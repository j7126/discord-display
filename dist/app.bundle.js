/*! For license information please see app.bundle.js.LICENSE.txt */
(()=>{var t={5475:(t,e,n)=>{"use strict";n.d(e,{E:()=>a,i:()=>s});var i={animation:{prefixed:"-webkit-animation",standard:"animation"},transform:{prefixed:"-webkit-transform",standard:"transform"},transition:{prefixed:"-webkit-transition",standard:"transition"}},r={animationend:{cssProperty:"animation",prefixed:"webkitAnimationEnd",standard:"animationend"},animationiteration:{cssProperty:"animation",prefixed:"webkitAnimationIteration",standard:"animationiteration"},animationstart:{cssProperty:"animation",prefixed:"webkitAnimationStart",standard:"animationstart"},transitionend:{cssProperty:"transition",prefixed:"webkitTransitionEnd",standard:"transitionend"}};function o(t){return Boolean(t.document)&&"function"==typeof t.document.createElement}function a(t,e){if(o(t)&&e in i){var n=t.document.createElement("div"),r=i[e],a=r.standard,s=r.prefixed;return a in n.style?a:s}return e}function s(t,e){if(o(t)&&e in r){var n=t.document.createElement("div"),i=r[e],a=i.standard,s=i.prefixed;return i.cssProperty in n.style?a:s}return e}},5179:(t,e,n)=>{"use strict";n.d(e,{B:()=>o});var i=n(655),r=n(6308),o=function(){function t(t,e){for(var n=[],r=2;r<arguments.length;r++)n[r-2]=arguments[r];this.root=t,this.initialize.apply(this,(0,i.ev)([],(0,i.CR)(n))),this.foundation=void 0===e?this.getDefaultFoundation():e,this.foundation.init(),this.initialSyncWithDOM()}return t.attachTo=function(e){return new t(e,new r.K({}))},t.prototype.initialize=function(){for(var t=[],e=0;e<arguments.length;e++)t[e]=arguments[e]},t.prototype.getDefaultFoundation=function(){throw new Error("Subclasses must override getDefaultFoundation to return a properly configured foundation class")},t.prototype.initialSyncWithDOM=function(){},t.prototype.destroy=function(){this.foundation.destroy()},t.prototype.listen=function(t,e,n){this.root.addEventListener(t,e,n)},t.prototype.unlisten=function(t,e,n){this.root.removeEventListener(t,e,n)},t.prototype.emit=function(t,e,n){var i;void 0===n&&(n=!1),"function"==typeof CustomEvent?i=new CustomEvent(t,{bubbles:n,detail:e}):(i=document.createEvent("CustomEvent")).initCustomEvent(t,n,!1,e),this.root.dispatchEvent(i)},t}()},6308:(t,e,n)=>{"use strict";n.d(e,{K:()=>i});var i=function(){function t(t){void 0===t&&(t={}),this.adapter=t}return Object.defineProperty(t,"cssClasses",{get:function(){return{}},enumerable:!1,configurable:!0}),Object.defineProperty(t,"strings",{get:function(){return{}},enumerable:!1,configurable:!0}),Object.defineProperty(t,"numbers",{get:function(){return{}},enumerable:!1,configurable:!0}),Object.defineProperty(t,"defaultAdapter",{get:function(){return{}},enumerable:!1,configurable:!0}),t.prototype.init=function(){},t.prototype.destroy=function(){},t}()},5886:(t,e,n)=>{"use strict";n.d(e,{Bo:()=>m});var i=n(655),r=n(5475),o=n(5179),a=n(9397),s=n(2851),u=n(1661),c=n(6725),l={ANIM_CHECKED_INDETERMINATE:"mdc-checkbox--anim-checked-indeterminate",ANIM_CHECKED_UNCHECKED:"mdc-checkbox--anim-checked-unchecked",ANIM_INDETERMINATE_CHECKED:"mdc-checkbox--anim-indeterminate-checked",ANIM_INDETERMINATE_UNCHECKED:"mdc-checkbox--anim-indeterminate-unchecked",ANIM_UNCHECKED_CHECKED:"mdc-checkbox--anim-unchecked-checked",ANIM_UNCHECKED_INDETERMINATE:"mdc-checkbox--anim-unchecked-indeterminate",BACKGROUND:"mdc-checkbox__background",CHECKED:"mdc-checkbox--checked",CHECKMARK:"mdc-checkbox__checkmark",CHECKMARK_PATH:"mdc-checkbox__checkmark-path",DISABLED:"mdc-checkbox--disabled",INDETERMINATE:"mdc-checkbox--indeterminate",MIXEDMARK:"mdc-checkbox__mixedmark",NATIVE_CONTROL:"mdc-checkbox__native-control",ROOT:"mdc-checkbox",SELECTED:"mdc-checkbox--selected",UPGRADED:"mdc-checkbox--upgraded"},d={ARIA_CHECKED_ATTR:"aria-checked",ARIA_CHECKED_INDETERMINATE_VALUE:"mixed",DATA_INDETERMINATE_ATTR:"data-indeterminate",NATIVE_CONTROL_SELECTOR:".mdc-checkbox__native-control",TRANSITION_STATE_CHECKED:"checked",TRANSITION_STATE_INDETERMINATE:"indeterminate",TRANSITION_STATE_INIT:"init",TRANSITION_STATE_UNCHECKED:"unchecked"},p={ANIM_END_LATCH_MS:250},h=function(t){function e(n){var r=t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this;return r.currentCheckState=d.TRANSITION_STATE_INIT,r.currentAnimationClass="",r.animEndLatchTimer=0,r.enableAnimationEndHandler=!1,r}return(0,i.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return l},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return d},enumerable:!1,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return p},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},forceLayout:function(){},hasNativeControl:function(){return!1},isAttachedToDOM:function(){return!1},isChecked:function(){return!1},isIndeterminate:function(){return!1},removeClass:function(){},removeNativeControlAttr:function(){},setNativeControlAttr:function(){},setNativeControlDisabled:function(){}}},enumerable:!1,configurable:!0}),e.prototype.init=function(){this.currentCheckState=this.determineCheckState(),this.updateAriaChecked(),this.adapter.addClass(l.UPGRADED)},e.prototype.destroy=function(){clearTimeout(this.animEndLatchTimer)},e.prototype.setDisabled=function(t){this.adapter.setNativeControlDisabled(t),t?this.adapter.addClass(l.DISABLED):this.adapter.removeClass(l.DISABLED)},e.prototype.handleAnimationEnd=function(){var t=this;this.enableAnimationEndHandler&&(clearTimeout(this.animEndLatchTimer),this.animEndLatchTimer=setTimeout((function(){t.adapter.removeClass(t.currentAnimationClass),t.enableAnimationEndHandler=!1}),p.ANIM_END_LATCH_MS))},e.prototype.handleChange=function(){this.transitionCheckState()},e.prototype.transitionCheckState=function(){if(this.adapter.hasNativeControl()){var t=this.currentCheckState,e=this.determineCheckState();if(t!==e){this.updateAriaChecked();var n=l.SELECTED;e===d.TRANSITION_STATE_UNCHECKED?this.adapter.removeClass(n):this.adapter.addClass(n),this.currentAnimationClass.length>0&&(clearTimeout(this.animEndLatchTimer),this.adapter.forceLayout(),this.adapter.removeClass(this.currentAnimationClass)),this.currentAnimationClass=this.getTransitionAnimationClass(t,e),this.currentCheckState=e,this.adapter.isAttachedToDOM()&&this.currentAnimationClass.length>0&&(this.adapter.addClass(this.currentAnimationClass),this.enableAnimationEndHandler=!0)}}},e.prototype.determineCheckState=function(){var t=d.TRANSITION_STATE_INDETERMINATE,e=d.TRANSITION_STATE_CHECKED,n=d.TRANSITION_STATE_UNCHECKED;return this.adapter.isIndeterminate()?t:this.adapter.isChecked()?e:n},e.prototype.getTransitionAnimationClass=function(t,n){var i=d.TRANSITION_STATE_INIT,r=d.TRANSITION_STATE_CHECKED,o=d.TRANSITION_STATE_UNCHECKED,a=e.cssClasses,s=a.ANIM_UNCHECKED_CHECKED,u=a.ANIM_UNCHECKED_INDETERMINATE,c=a.ANIM_CHECKED_UNCHECKED,l=a.ANIM_CHECKED_INDETERMINATE,p=a.ANIM_INDETERMINATE_CHECKED,h=a.ANIM_INDETERMINATE_UNCHECKED;switch(t){case i:return n===o?"":n===r?p:h;case o:return n===r?s:u;case r:return n===o?c:l;default:return n===r?p:h}},e.prototype.updateAriaChecked=function(){this.adapter.isIndeterminate()?this.adapter.setNativeControlAttr(d.ARIA_CHECKED_ATTR,d.ARIA_CHECKED_INDETERMINATE_VALUE):this.adapter.removeNativeControlAttr(d.ARIA_CHECKED_ATTR)},e}(n(6308).K),f=["checked","indeterminate"],m=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.rippleSurface=e.createRipple(),e}return(0,i.ZT)(e,t),e.attachTo=function(t){return new e(t)},Object.defineProperty(e.prototype,"ripple",{get:function(){return this.rippleSurface},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"checked",{get:function(){return this.getNativeControl().checked},set:function(t){this.getNativeControl().checked=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"indeterminate",{get:function(){return this.getNativeControl().indeterminate},set:function(t){this.getNativeControl().indeterminate=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"disabled",{get:function(){return this.getNativeControl().disabled},set:function(t){this.foundation.setDisabled(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"value",{get:function(){return this.getNativeControl().value},set:function(t){this.getNativeControl().value=t},enumerable:!1,configurable:!0}),e.prototype.initialize=function(){var t=d.DATA_INDETERMINATE_ATTR;this.getNativeControl().indeterminate="true"===this.getNativeControl().getAttribute(t),this.getNativeControl().removeAttribute(t)},e.prototype.initialSyncWithDOM=function(){var t=this;this.handleChange=function(){t.foundation.handleChange()},this.handleAnimationEnd=function(){t.foundation.handleAnimationEnd()},this.getNativeControl().addEventListener("change",this.handleChange),this.listen((0,r.i)(window,"animationend"),this.handleAnimationEnd),this.installPropertyChangeHooks()},e.prototype.destroy=function(){this.rippleSurface.destroy(),this.getNativeControl().removeEventListener("change",this.handleChange),this.unlisten((0,r.i)(window,"animationend"),this.handleAnimationEnd),this.uninstallPropertyChangeHooks(),t.prototype.destroy.call(this)},e.prototype.getDefaultFoundation=function(){var t=this;return new h({addClass:function(e){return t.root.classList.add(e)},forceLayout:function(){return t.root.offsetWidth},hasNativeControl:function(){return!!t.getNativeControl()},isAttachedToDOM:function(){return Boolean(t.root.parentNode)},isChecked:function(){return t.checked},isIndeterminate:function(){return t.indeterminate},removeClass:function(e){t.root.classList.remove(e)},removeNativeControlAttr:function(e){t.getNativeControl().removeAttribute(e)},setNativeControlAttr:function(e,n){t.getNativeControl().setAttribute(e,n)},setNativeControlDisabled:function(e){t.getNativeControl().disabled=e}})},e.prototype.createRipple=function(){var t=this,e=(0,i.pi)((0,i.pi)({},u.F.createAdapter(this)),{deregisterInteractionHandler:function(e,n){t.getNativeControl().removeEventListener(e,n,(0,a.K)())},isSurfaceActive:function(){return(0,s.wB)(t.getNativeControl(),":active")},isUnbounded:function(){return!0},registerInteractionHandler:function(e,n){t.getNativeControl().addEventListener(e,n,(0,a.K)())}});return new u.F(this.root,new c.l(e))},e.prototype.installPropertyChangeHooks=function(){var t,e,n=this,r=this.getNativeControl(),o=Object.getPrototypeOf(r),a=function(t){var e=Object.getOwnPropertyDescriptor(o,t);if(!v(e))return{value:void 0};var i=e.get,a={configurable:e.configurable,enumerable:e.enumerable,get:i,set:function(t){e.set.call(r,t),n.foundation.handleChange()}};Object.defineProperty(r,t,a)};try{for(var s=(0,i.XA)(f),u=s.next();!u.done;u=s.next()){var c=a(u.value);if("object"==typeof c)return c.value}}catch(e){t={error:e}}finally{try{u&&!u.done&&(e=s.return)&&e.call(s)}finally{if(t)throw t.error}}},e.prototype.uninstallPropertyChangeHooks=function(){var t,e,n=this.getNativeControl(),r=Object.getPrototypeOf(n);try{for(var o=(0,i.XA)(f),a=o.next();!a.done;a=o.next()){var s=a.value,u=Object.getOwnPropertyDescriptor(r,s);if(!v(u))return;Object.defineProperty(n,s,u)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}},e.prototype.getNativeControl=function(){var t=d.NATIVE_CONTROL_SELECTOR,e=this.root.querySelector(t);if(!e)throw new Error("Checkbox component requires a "+t+" element");return e},e}(o.B);function v(t){return!!t&&"function"==typeof t.set}},3376:(t,e,n)=>{"use strict";n.d(e,{W5:()=>g});var i,r=n(655),o=n(5179),a="mdc-dom-focus-sentinel",s=function(){function t(t,e){void 0===e&&(e={}),this.root=t,this.options=e,this.elFocusedBeforeTrapFocus=null}return t.prototype.trapFocus=function(){var t=this.getFocusableElements(this.root);if(0===t.length)throw new Error("FocusTrap: Element must have at least one focusable child.");this.elFocusedBeforeTrapFocus=document.activeElement instanceof HTMLElement?document.activeElement:null,this.wrapTabFocus(this.root),this.options.skipInitialFocus||this.focusInitialElement(t,this.options.initialFocusEl)},t.prototype.releaseFocus=function(){[].slice.call(this.root.querySelectorAll("."+a)).forEach((function(t){t.parentElement.removeChild(t)})),!this.options.skipRestoreFocus&&this.elFocusedBeforeTrapFocus&&this.elFocusedBeforeTrapFocus.focus()},t.prototype.wrapTabFocus=function(t){var e=this,n=this.createSentinel(),i=this.createSentinel();n.addEventListener("focus",(function(){var n=e.getFocusableElements(t);n.length>0&&n[n.length-1].focus()})),i.addEventListener("focus",(function(){var n=e.getFocusableElements(t);n.length>0&&n[0].focus()})),t.insertBefore(n,t.children[0]),t.appendChild(i)},t.prototype.focusInitialElement=function(t,e){var n=0;e&&(n=Math.max(t.indexOf(e),0)),t[n].focus()},t.prototype.getFocusableElements=function(t){return[].slice.call(t.querySelectorAll("[autofocus], [tabindex], a, input, textarea, select, button")).filter((function(t){var e="true"===t.getAttribute("aria-disabled")||null!=t.getAttribute("disabled")||null!=t.getAttribute("hidden")||"true"===t.getAttribute("aria-hidden"),n=t.tabIndex>=0&&t.getBoundingClientRect().width>0&&!t.classList.contains(a)&&!e,i=!1;if(n){var r=getComputedStyle(t);i="none"===r.display||"hidden"===r.visibility}return n&&!i}))},t.prototype.createSentinel=function(){var t=document.createElement("div");return t.setAttribute("tabindex","0"),t.setAttribute("aria-hidden","true"),t.classList.add(a),t},t}(),u=n(2851),c=n(1661),l=function(){function t(){this.rafIDs=new Map}return t.prototype.request=function(t,e){var n=this;this.cancel(t);var i=requestAnimationFrame((function(i){n.rafIDs.delete(t),e(i)}));this.rafIDs.set(t,i)},t.prototype.cancel=function(t){var e=this.rafIDs.get(t);e&&(cancelAnimationFrame(e),this.rafIDs.delete(t))},t.prototype.cancelAll=function(){var t=this;this.rafIDs.forEach((function(e,n){t.cancel(n)}))},t.prototype.getQueue=function(){var t=[];return this.rafIDs.forEach((function(e,n){t.push(n)})),t},t}(),d=n(6308),p={CLOSING:"mdc-dialog--closing",OPEN:"mdc-dialog--open",OPENING:"mdc-dialog--opening",SCROLLABLE:"mdc-dialog--scrollable",SCROLL_LOCK:"mdc-dialog-scroll-lock",STACKED:"mdc-dialog--stacked",FULLSCREEN:"mdc-dialog--fullscreen",SCROLL_DIVIDER_HEADER:"mdc-dialog-scroll-divider-header",SCROLL_DIVIDER_FOOTER:"mdc-dialog-scroll-divider-footer",SURFACE_SCRIM_SHOWN:"mdc-dialog__surface-scrim--shown",SURFACE_SCRIM_SHOWING:"mdc-dialog__surface-scrim--showing",SURFACE_SCRIM_HIDING:"mdc-dialog__surface-scrim--hiding",SCRIM_HIDDEN:"mdc-dialog__scrim--hidden"},h={ACTION_ATTRIBUTE:"data-mdc-dialog-action",BUTTON_DEFAULT_ATTRIBUTE:"data-mdc-dialog-button-default",BUTTON_SELECTOR:".mdc-dialog__button",CLOSED_EVENT:"MDCDialog:closed",CLOSE_ACTION:"close",CLOSING_EVENT:"MDCDialog:closing",CONTAINER_SELECTOR:".mdc-dialog__container",CONTENT_SELECTOR:".mdc-dialog__content",DESTROY_ACTION:"destroy",INITIAL_FOCUS_ATTRIBUTE:"data-mdc-dialog-initial-focus",OPENED_EVENT:"MDCDialog:opened",OPENING_EVENT:"MDCDialog:opening",SCRIM_SELECTOR:".mdc-dialog__scrim",SUPPRESS_DEFAULT_PRESS_SELECTOR:["textarea",".mdc-menu .mdc-list-item",".mdc-menu .mdc-deprecated-list-item"].join(", "),SURFACE_SELECTOR:".mdc-dialog__surface"},f={DIALOG_ANIMATION_CLOSE_TIME_MS:75,DIALOG_ANIMATION_OPEN_TIME_MS:150};!function(t){t.POLL_SCROLL_POS="poll_scroll_position",t.POLL_LAYOUT_CHANGE="poll_layout_change"}(i||(i={}));var m=function(t){function e(n){var i=t.call(this,(0,r.pi)((0,r.pi)({},e.defaultAdapter),n))||this;return i.dialogOpen=!1,i.isFullscreen=!1,i.animationFrame=0,i.animationTimer=0,i.escapeKeyAction=h.CLOSE_ACTION,i.scrimClickAction=h.CLOSE_ACTION,i.autoStackButtons=!0,i.areButtonsStacked=!1,i.suppressDefaultPressSelector=h.SUPPRESS_DEFAULT_PRESS_SELECTOR,i.animFrame=new l,i.contentScrollHandler=function(){i.handleScrollEvent()},i.windowResizeHandler=function(){i.layout()},i.windowOrientationChangeHandler=function(){i.layout()},i}return(0,r.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return p},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return h},enumerable:!1,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return f},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addBodyClass:function(){},addClass:function(){},areButtonsStacked:function(){return!1},clickDefaultButton:function(){},eventTargetMatches:function(){return!1},getActionFromEvent:function(){return""},getInitialFocusEl:function(){return null},hasClass:function(){return!1},isContentScrollable:function(){return!1},notifyClosed:function(){},notifyClosing:function(){},notifyOpened:function(){},notifyOpening:function(){},releaseFocus:function(){},removeBodyClass:function(){},removeClass:function(){},reverseButtons:function(){},trapFocus:function(){},registerContentEventHandler:function(){},deregisterContentEventHandler:function(){},isScrollableContentAtTop:function(){return!1},isScrollableContentAtBottom:function(){return!1},registerWindowEventHandler:function(){},deregisterWindowEventHandler:function(){}}},enumerable:!1,configurable:!0}),e.prototype.init=function(){this.adapter.hasClass(p.STACKED)&&this.setAutoStackButtons(!1),this.isFullscreen=this.adapter.hasClass(p.FULLSCREEN)},e.prototype.destroy=function(){this.animationTimer&&(clearTimeout(this.animationTimer),this.handleAnimationTimerEnd()),this.isFullscreen&&this.adapter.deregisterContentEventHandler("scroll",this.contentScrollHandler),this.animFrame.cancelAll(),this.adapter.deregisterWindowEventHandler("resize",this.windowResizeHandler),this.adapter.deregisterWindowEventHandler("orientationchange",this.windowOrientationChangeHandler)},e.prototype.open=function(t){var e=this;this.dialogOpen=!0,this.adapter.notifyOpening(),this.adapter.addClass(p.OPENING),this.isFullscreen&&this.adapter.registerContentEventHandler("scroll",this.contentScrollHandler),t&&t.isAboveFullscreenDialog&&this.adapter.addClass(p.SCRIM_HIDDEN),this.adapter.registerWindowEventHandler("resize",this.windowResizeHandler),this.adapter.registerWindowEventHandler("orientationchange",this.windowOrientationChangeHandler),this.runNextAnimationFrame((function(){e.adapter.addClass(p.OPEN),e.adapter.addBodyClass(p.SCROLL_LOCK),e.layout(),e.animationTimer=setTimeout((function(){e.handleAnimationTimerEnd(),e.adapter.trapFocus(e.adapter.getInitialFocusEl()),e.adapter.notifyOpened()}),f.DIALOG_ANIMATION_OPEN_TIME_MS)}))},e.prototype.close=function(t){var e=this;void 0===t&&(t=""),this.dialogOpen&&(this.dialogOpen=!1,this.adapter.notifyClosing(t),this.adapter.addClass(p.CLOSING),this.adapter.removeClass(p.OPEN),this.adapter.removeBodyClass(p.SCROLL_LOCK),this.isFullscreen&&this.adapter.deregisterContentEventHandler("scroll",this.contentScrollHandler),this.adapter.deregisterWindowEventHandler("resize",this.windowResizeHandler),this.adapter.deregisterWindowEventHandler("orientationchange",this.windowOrientationChangeHandler),cancelAnimationFrame(this.animationFrame),this.animationFrame=0,clearTimeout(this.animationTimer),this.animationTimer=setTimeout((function(){e.adapter.releaseFocus(),e.handleAnimationTimerEnd(),e.adapter.notifyClosed(t)}),f.DIALOG_ANIMATION_CLOSE_TIME_MS))},e.prototype.showSurfaceScrim=function(){var t=this;this.adapter.addClass(p.SURFACE_SCRIM_SHOWING),this.runNextAnimationFrame((function(){t.adapter.addClass(p.SURFACE_SCRIM_SHOWN)}))},e.prototype.hideSurfaceScrim=function(){this.adapter.removeClass(p.SURFACE_SCRIM_SHOWN),this.adapter.addClass(p.SURFACE_SCRIM_HIDING)},e.prototype.handleSurfaceScrimTransitionEnd=function(){this.adapter.removeClass(p.SURFACE_SCRIM_HIDING),this.adapter.removeClass(p.SURFACE_SCRIM_SHOWING)},e.prototype.isOpen=function(){return this.dialogOpen},e.prototype.getEscapeKeyAction=function(){return this.escapeKeyAction},e.prototype.setEscapeKeyAction=function(t){this.escapeKeyAction=t},e.prototype.getScrimClickAction=function(){return this.scrimClickAction},e.prototype.setScrimClickAction=function(t){this.scrimClickAction=t},e.prototype.getAutoStackButtons=function(){return this.autoStackButtons},e.prototype.setAutoStackButtons=function(t){this.autoStackButtons=t},e.prototype.getSuppressDefaultPressSelector=function(){return this.suppressDefaultPressSelector},e.prototype.setSuppressDefaultPressSelector=function(t){this.suppressDefaultPressSelector=t},e.prototype.layout=function(){var t=this;this.animFrame.request(i.POLL_LAYOUT_CHANGE,(function(){t.layoutInternal()}))},e.prototype.handleClick=function(t){if(this.adapter.eventTargetMatches(t.target,h.SCRIM_SELECTOR)&&""!==this.scrimClickAction)this.close(this.scrimClickAction);else{var e=this.adapter.getActionFromEvent(t);e&&this.close(e)}},e.prototype.handleKeydown=function(t){var e="Enter"===t.key||13===t.keyCode;if(e&&!this.adapter.getActionFromEvent(t)){var n=t.composedPath?t.composedPath()[0]:t.target,i=!this.suppressDefaultPressSelector||!this.adapter.eventTargetMatches(n,this.suppressDefaultPressSelector);e&&i&&this.adapter.clickDefaultButton()}},e.prototype.handleDocumentKeydown=function(t){("Escape"===t.key||27===t.keyCode)&&""!==this.escapeKeyAction&&this.close(this.escapeKeyAction)},e.prototype.handleScrollEvent=function(){var t=this;this.animFrame.request(i.POLL_SCROLL_POS,(function(){t.toggleScrollDividerHeader(),t.toggleScrollDividerFooter()}))},e.prototype.layoutInternal=function(){this.autoStackButtons&&this.detectStackedButtons(),this.toggleScrollableClasses()},e.prototype.handleAnimationTimerEnd=function(){this.animationTimer=0,this.adapter.removeClass(p.OPENING),this.adapter.removeClass(p.CLOSING)},e.prototype.runNextAnimationFrame=function(t){var e=this;cancelAnimationFrame(this.animationFrame),this.animationFrame=requestAnimationFrame((function(){e.animationFrame=0,clearTimeout(e.animationTimer),e.animationTimer=setTimeout(t,0)}))},e.prototype.detectStackedButtons=function(){this.adapter.removeClass(p.STACKED);var t=this.adapter.areButtonsStacked();t&&this.adapter.addClass(p.STACKED),t!==this.areButtonsStacked&&(this.adapter.reverseButtons(),this.areButtonsStacked=t)},e.prototype.toggleScrollableClasses=function(){this.adapter.removeClass(p.SCROLLABLE),this.adapter.isContentScrollable()&&(this.adapter.addClass(p.SCROLLABLE),this.isFullscreen&&(this.toggleScrollDividerHeader(),this.toggleScrollDividerFooter()))},e.prototype.toggleScrollDividerHeader=function(){this.adapter.isScrollableContentAtTop()?this.adapter.hasClass(p.SCROLL_DIVIDER_HEADER)&&this.adapter.removeClass(p.SCROLL_DIVIDER_HEADER):this.adapter.addClass(p.SCROLL_DIVIDER_HEADER)},e.prototype.toggleScrollDividerFooter=function(){this.adapter.isScrollableContentAtBottom()?this.adapter.hasClass(p.SCROLL_DIVIDER_FOOTER)&&this.adapter.removeClass(p.SCROLL_DIVIDER_FOOTER):this.adapter.addClass(p.SCROLL_DIVIDER_FOOTER)},e}(d.K),v=m.strings,g=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,r.ZT)(e,t),Object.defineProperty(e.prototype,"isOpen",{get:function(){return this.foundation.isOpen()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"escapeKeyAction",{get:function(){return this.foundation.getEscapeKeyAction()},set:function(t){this.foundation.setEscapeKeyAction(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"scrimClickAction",{get:function(){return this.foundation.getScrimClickAction()},set:function(t){this.foundation.setScrimClickAction(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"autoStackButtons",{get:function(){return this.foundation.getAutoStackButtons()},set:function(t){this.foundation.setAutoStackButtons(t)},enumerable:!1,configurable:!0}),e.attachTo=function(t){return new e(t)},e.prototype.initialize=function(t){var e,n;void 0===t&&(t=function(t,e){return new s(t,e)});var i=this.root.querySelector(v.CONTAINER_SELECTOR);if(!i)throw new Error("Dialog component requires a "+v.CONTAINER_SELECTOR+" container element");this.container=i,this.content=this.root.querySelector(v.CONTENT_SELECTOR),this.buttons=[].slice.call(this.root.querySelectorAll(v.BUTTON_SELECTOR)),this.defaultButton=this.root.querySelector("["+v.BUTTON_DEFAULT_ATTRIBUTE+"]"),this.focusTrapFactory=t,this.buttonRipples=[];try{for(var o=(0,r.XA)(this.buttons),a=o.next();!a.done;a=o.next()){var u=a.value;this.buttonRipples.push(new c.F(u))}}catch(t){e={error:t}}finally{try{a&&!a.done&&(n=o.return)&&n.call(o)}finally{if(e)throw e.error}}},e.prototype.initialSyncWithDOM=function(){var t,e=this;this.focusTrap=(t=this.container,(0,this.focusTrapFactory)(t,{initialFocusEl:this.getInitialFocusEl()||void 0})),this.handleClick=this.foundation.handleClick.bind(this.foundation),this.handleKeydown=this.foundation.handleKeydown.bind(this.foundation),this.handleDocumentKeydown=this.foundation.handleDocumentKeydown.bind(this.foundation),this.handleOpening=function(){document.addEventListener("keydown",e.handleDocumentKeydown)},this.handleClosing=function(){document.removeEventListener("keydown",e.handleDocumentKeydown)},this.listen("click",this.handleClick),this.listen("keydown",this.handleKeydown),this.listen(v.OPENING_EVENT,this.handleOpening),this.listen(v.CLOSING_EVENT,this.handleClosing)},e.prototype.destroy=function(){this.unlisten("click",this.handleClick),this.unlisten("keydown",this.handleKeydown),this.unlisten(v.OPENING_EVENT,this.handleOpening),this.unlisten(v.CLOSING_EVENT,this.handleClosing),this.handleClosing(),this.buttonRipples.forEach((function(t){t.destroy()})),t.prototype.destroy.call(this)},e.prototype.layout=function(){this.foundation.layout()},e.prototype.open=function(){this.foundation.open()},e.prototype.close=function(t){void 0===t&&(t=""),this.foundation.close(t)},e.prototype.getDefaultFoundation=function(){var t=this;return new m({addBodyClass:function(t){return document.body.classList.add(t)},addClass:function(e){return t.root.classList.add(e)},areButtonsStacked:function(){return e=t.buttons,n=new Set,[].forEach.call(e,(function(t){return n.add(t.offsetTop)})),n.size>1;var e,n},clickDefaultButton:function(){t.defaultButton&&!t.defaultButton.disabled&&t.defaultButton.click()},eventTargetMatches:function(t,e){return!!t&&(0,u.wB)(t,e)},getActionFromEvent:function(t){if(!t.target)return"";var e=(0,u.oq)(t.target,"["+v.ACTION_ATTRIBUTE+"]");return e&&e.getAttribute(v.ACTION_ATTRIBUTE)},getInitialFocusEl:function(){return t.getInitialFocusEl()},hasClass:function(e){return t.root.classList.contains(e)},isContentScrollable:function(){return!!(e=t.content)&&e.scrollHeight>e.offsetHeight;var e},notifyClosed:function(e){return t.emit(v.CLOSED_EVENT,e?{action:e}:{})},notifyClosing:function(e){return t.emit(v.CLOSING_EVENT,e?{action:e}:{})},notifyOpened:function(){return t.emit(v.OPENED_EVENT,{})},notifyOpening:function(){return t.emit(v.OPENING_EVENT,{})},releaseFocus:function(){t.focusTrap.releaseFocus()},removeBodyClass:function(t){return document.body.classList.remove(t)},removeClass:function(e){return t.root.classList.remove(e)},reverseButtons:function(){t.buttons.reverse(),t.buttons.forEach((function(t){t.parentElement.appendChild(t)}))},trapFocus:function(){t.focusTrap.trapFocus()},registerContentEventHandler:function(e,n){t.content instanceof HTMLElement&&t.content.addEventListener(e,n)},deregisterContentEventHandler:function(e,n){t.content instanceof HTMLElement&&t.content.removeEventListener(e,n)},isScrollableContentAtTop:function(){return!!(e=t.content)&&0===e.scrollTop;var e},isScrollableContentAtBottom:function(){return!!(e=t.content)&&Math.ceil(e.scrollHeight-e.scrollTop)===e.clientHeight;var e},registerWindowEventHandler:function(t,e){window.addEventListener(t,e)},deregisterWindowEventHandler:function(t,e){window.removeEventListener(t,e)}})},e.prototype.getInitialFocusEl=function(){return this.root.querySelector("["+v.INITIAL_FOCUS_ATTRIBUTE+"]")},e}(o.B)},9397:(t,e,n)=>{"use strict";function i(t){return void 0===t&&(t=window),!!function(t){void 0===t&&(t=window);var e=!1;try{var n={get passive(){return e=!0,!1}},i=function(){};t.document.addEventListener("test",i,n),t.document.removeEventListener("test",i,n)}catch(t){e=!1}return e}(t)&&{passive:!0}}n.d(e,{K:()=>i})},2851:(t,e,n)=>{"use strict";function i(t,e){if(t.closest)return t.closest(e);for(var n=t;n;){if(r(n,e))return n;n=n.parentElement}return null}function r(t,e){return(t.matches||t.webkitMatchesSelector||t.msMatchesSelector).call(t,e)}function o(t){var e=t;if(null!==e.offsetParent)return e.scrollWidth;var n=e.cloneNode(!0);n.style.setProperty("position","absolute"),n.style.setProperty("transform","translate(-9999px, -9999px)"),document.documentElement.appendChild(n);var i=n.scrollWidth;return document.documentElement.removeChild(n),i}n.d(e,{oq:()=>i,wB:()=>r,FL:()=>o})},7706:(t,e,n)=>{"use strict";n.d(e,{g:()=>s});var i=n(655),r=n(5179),o=n(2851),a=n(8678),s=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.attachTo=function(t){return new e(t)},e.prototype.shake=function(t){this.foundation.shake(t)},e.prototype.float=function(t){this.foundation.float(t)},e.prototype.setRequired=function(t){this.foundation.setRequired(t)},e.prototype.getWidth=function(){return this.foundation.getWidth()},e.prototype.getDefaultFoundation=function(){var t=this,e={addClass:function(e){return t.root.classList.add(e)},removeClass:function(e){return t.root.classList.remove(e)},getWidth:function(){return(0,o.FL)(t.root)},registerInteractionHandler:function(e,n){return t.listen(e,n)},deregisterInteractionHandler:function(e,n){return t.unlisten(e,n)}};return new a.T(e)},e}(r.B)},8678:(t,e,n)=>{"use strict";n.d(e,{T:()=>a});var i=n(655),r=n(6308),o={LABEL_FLOAT_ABOVE:"mdc-floating-label--float-above",LABEL_REQUIRED:"mdc-floating-label--required",LABEL_SHAKE:"mdc-floating-label--shake",ROOT:"mdc-floating-label"},a=function(t){function e(n){var r=t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this;return r.shakeAnimationEndHandler=function(){r.handleShakeAnimationEnd()},r}return(0,i.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return o},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},getWidth:function(){return 0},registerInteractionHandler:function(){},deregisterInteractionHandler:function(){}}},enumerable:!1,configurable:!0}),e.prototype.init=function(){this.adapter.registerInteractionHandler("animationend",this.shakeAnimationEndHandler)},e.prototype.destroy=function(){this.adapter.deregisterInteractionHandler("animationend",this.shakeAnimationEndHandler)},e.prototype.getWidth=function(){return this.adapter.getWidth()},e.prototype.shake=function(t){var n=e.cssClasses.LABEL_SHAKE;t?this.adapter.addClass(n):this.adapter.removeClass(n)},e.prototype.float=function(t){var n=e.cssClasses,i=n.LABEL_FLOAT_ABOVE,r=n.LABEL_SHAKE;t?this.adapter.addClass(i):(this.adapter.removeClass(i),this.adapter.removeClass(r))},e.prototype.setRequired=function(t){var n=e.cssClasses.LABEL_REQUIRED;t?this.adapter.addClass(n):this.adapter.removeClass(n)},e.prototype.handleShakeAnimationEnd=function(){var t=e.cssClasses.LABEL_SHAKE;this.adapter.removeClass(t)},e}(r.K)},9789:(t,e,n)=>{"use strict";n.d(e,{bm:()=>c});var i=n(655),r=n(5179),o=n(6308),a={ROOT:"mdc-form-field"},s={LABEL_SELECTOR:".mdc-form-field > label"},u=function(t){function e(n){var r=t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this;return r.click=function(){r.handleClick()},r}return(0,i.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return a},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return s},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{activateInputRipple:function(){},deactivateInputRipple:function(){},deregisterInteractionHandler:function(){},registerInteractionHandler:function(){}}},enumerable:!1,configurable:!0}),e.prototype.init=function(){this.adapter.registerInteractionHandler("click",this.click)},e.prototype.destroy=function(){this.adapter.deregisterInteractionHandler("click",this.click)},e.prototype.handleClick=function(){var t=this;this.adapter.activateInputRipple(),requestAnimationFrame((function(){t.adapter.deactivateInputRipple()}))},e}(o.K),c=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.attachTo=function(t){return new e(t)},e.prototype.labelEl=function(){var t=u.strings.LABEL_SELECTOR;return this.root.querySelector(t)},e.prototype.getDefaultFoundation=function(){var t=this;return new u({activateInputRipple:function(){t.input&&t.input.ripple&&t.input.ripple.activate()},deactivateInputRipple:function(){t.input&&t.input.ripple&&t.input.ripple.deactivate()},deregisterInteractionHandler:function(e,n){var i=t.labelEl();i&&i.removeEventListener(e,n)},registerInteractionHandler:function(e,n){var i=t.labelEl();i&&i.addEventListener(e,n)}})},e}(r.B)},8323:(t,e,n)=>{"use strict";n.d(e,{k:()=>u});var i=n(655),r=n(5179),o=n(6308),a={LINE_RIPPLE_ACTIVE:"mdc-line-ripple--active",LINE_RIPPLE_DEACTIVATING:"mdc-line-ripple--deactivating"},s=function(t){function e(n){var r=t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this;return r.transitionEndHandler=function(t){r.handleTransitionEnd(t)},r}return(0,i.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return a},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},setStyle:function(){},registerEventHandler:function(){},deregisterEventHandler:function(){}}},enumerable:!1,configurable:!0}),e.prototype.init=function(){this.adapter.registerEventHandler("transitionend",this.transitionEndHandler)},e.prototype.destroy=function(){this.adapter.deregisterEventHandler("transitionend",this.transitionEndHandler)},e.prototype.activate=function(){this.adapter.removeClass(a.LINE_RIPPLE_DEACTIVATING),this.adapter.addClass(a.LINE_RIPPLE_ACTIVE)},e.prototype.setRippleCenter=function(t){this.adapter.setStyle("transform-origin",t+"px center")},e.prototype.deactivate=function(){this.adapter.addClass(a.LINE_RIPPLE_DEACTIVATING)},e.prototype.handleTransitionEnd=function(t){var e=this.adapter.hasClass(a.LINE_RIPPLE_DEACTIVATING);"opacity"===t.propertyName&&e&&(this.adapter.removeClass(a.LINE_RIPPLE_ACTIVE),this.adapter.removeClass(a.LINE_RIPPLE_DEACTIVATING))},e}(o.K),u=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.attachTo=function(t){return new e(t)},e.prototype.activate=function(){this.foundation.activate()},e.prototype.deactivate=function(){this.foundation.deactivate()},e.prototype.setRippleCenter=function(t){this.foundation.setRippleCenter(t)},e.prototype.getDefaultFoundation=function(){var t=this;return new s({addClass:function(e){return t.root.classList.add(e)},removeClass:function(e){return t.root.classList.remove(e)},hasClass:function(e){return t.root.classList.contains(e)},setStyle:function(e,n){return t.root.style.setProperty(e,n)},registerEventHandler:function(e,n){return t.listen(e,n)},deregisterEventHandler:function(e,n){return t.unlisten(e,n)}})},e}(r.B)},9966:(t,e,n)=>{"use strict";n.d(e,{A:()=>l});var i=n(655),r=n(5179),o=n(8678),a={NOTCH_ELEMENT_SELECTOR:".mdc-notched-outline__notch"},s={NOTCH_ELEMENT_PADDING:8},u={NO_LABEL:"mdc-notched-outline--no-label",OUTLINE_NOTCHED:"mdc-notched-outline--notched",OUTLINE_UPGRADED:"mdc-notched-outline--upgraded"},c=function(t){function e(n){return t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this}return(0,i.ZT)(e,t),Object.defineProperty(e,"strings",{get:function(){return a},enumerable:!1,configurable:!0}),Object.defineProperty(e,"cssClasses",{get:function(){return u},enumerable:!1,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return s},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},setNotchWidthProperty:function(){},removeNotchWidthProperty:function(){}}},enumerable:!1,configurable:!0}),e.prototype.notch=function(t){var n=e.cssClasses.OUTLINE_NOTCHED;t>0&&(t+=s.NOTCH_ELEMENT_PADDING),this.adapter.setNotchWidthProperty(t),this.adapter.addClass(n)},e.prototype.closeNotch=function(){var t=e.cssClasses.OUTLINE_NOTCHED;this.adapter.removeClass(t),this.adapter.removeNotchWidthProperty()},e}(n(6308).K),l=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.attachTo=function(t){return new e(t)},e.prototype.initialSyncWithDOM=function(){this.notchElement=this.root.querySelector(a.NOTCH_ELEMENT_SELECTOR);var t=this.root.querySelector("."+o.T.cssClasses.ROOT);t?(t.style.transitionDuration="0s",this.root.classList.add(u.OUTLINE_UPGRADED),requestAnimationFrame((function(){t.style.transitionDuration=""}))):this.root.classList.add(u.NO_LABEL)},e.prototype.notch=function(t){this.foundation.notch(t)},e.prototype.closeNotch=function(){this.foundation.closeNotch()},e.prototype.getDefaultFoundation=function(){var t=this;return new c({addClass:function(e){return t.root.classList.add(e)},removeClass:function(e){return t.root.classList.remove(e)},setNotchWidthProperty:function(e){t.notchElement.style.setProperty("width",e+"px")},removeNotchWidthProperty:function(){t.notchElement.style.removeProperty("width")}})},e}(r.B)},1661:(t,e,n)=>{"use strict";n.d(e,{F:()=>c});var i=n(655),r=n(5179),o=n(9397),a=n(2851),s=n(6725),u=n(4014),c=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.disabled=!1,e}return(0,i.ZT)(e,t),e.attachTo=function(t,n){void 0===n&&(n={isUnbounded:void 0});var i=new e(t);return void 0!==n.isUnbounded&&(i.unbounded=n.isUnbounded),i},e.createAdapter=function(t){return{addClass:function(e){return t.root.classList.add(e)},browserSupportsCssVars:function(){return u.x(window)},computeBoundingRect:function(){return t.root.getBoundingClientRect()},containsEventTarget:function(e){return t.root.contains(e)},deregisterDocumentInteractionHandler:function(t,e){return document.documentElement.removeEventListener(t,e,(0,o.K)())},deregisterInteractionHandler:function(e,n){return t.root.removeEventListener(e,n,(0,o.K)())},deregisterResizeHandler:function(t){return window.removeEventListener("resize",t)},getWindowPageOffset:function(){return{x:window.pageXOffset,y:window.pageYOffset}},isSurfaceActive:function(){return(0,a.wB)(t.root,":active")},isSurfaceDisabled:function(){return Boolean(t.disabled)},isUnbounded:function(){return Boolean(t.unbounded)},registerDocumentInteractionHandler:function(t,e){return document.documentElement.addEventListener(t,e,(0,o.K)())},registerInteractionHandler:function(e,n){return t.root.addEventListener(e,n,(0,o.K)())},registerResizeHandler:function(t){return window.addEventListener("resize",t)},removeClass:function(e){return t.root.classList.remove(e)},updateCssVariable:function(e,n){return t.root.style.setProperty(e,n)}}},Object.defineProperty(e.prototype,"unbounded",{get:function(){return Boolean(this.isUnbounded)},set:function(t){this.isUnbounded=Boolean(t),this.setUnbounded()},enumerable:!1,configurable:!0}),e.prototype.activate=function(){this.foundation.activate()},e.prototype.deactivate=function(){this.foundation.deactivate()},e.prototype.layout=function(){this.foundation.layout()},e.prototype.getDefaultFoundation=function(){return new s.l(e.createAdapter(this))},e.prototype.initialSyncWithDOM=function(){var t=this.root;this.isUnbounded="mdcRippleIsUnbounded"in t.dataset},e.prototype.setUnbounded=function(){this.foundation.setUnbounded(Boolean(this.isUnbounded))},e}(r.B)},6725:(t,e,n)=>{"use strict";n.d(e,{l:()=>p});var i=n(655),r=n(6308),o={BG_FOCUSED:"mdc-ripple-upgraded--background-focused",FG_ACTIVATION:"mdc-ripple-upgraded--foreground-activation",FG_DEACTIVATION:"mdc-ripple-upgraded--foreground-deactivation",ROOT:"mdc-ripple-upgraded",UNBOUNDED:"mdc-ripple-upgraded--unbounded"},a={VAR_FG_SCALE:"--mdc-ripple-fg-scale",VAR_FG_SIZE:"--mdc-ripple-fg-size",VAR_FG_TRANSLATE_END:"--mdc-ripple-fg-translate-end",VAR_FG_TRANSLATE_START:"--mdc-ripple-fg-translate-start",VAR_LEFT:"--mdc-ripple-left",VAR_TOP:"--mdc-ripple-top"},s={DEACTIVATION_TIMEOUT_MS:225,FG_DEACTIVATION_MS:150,INITIAL_ORIGIN_SCALE:.6,PADDING:10,TAP_DELAY_MS:300},u=n(4014),c=["touchstart","pointerdown","mousedown","keydown"],l=["touchend","pointerup","mouseup","contextmenu"],d=[],p=function(t){function e(n){var r=t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this;return r.activationAnimationHasEnded=!1,r.activationTimer=0,r.fgDeactivationRemovalTimer=0,r.fgScale="0",r.frame={width:0,height:0},r.initialSize=0,r.layoutFrame=0,r.maxRadius=0,r.unboundedCoords={left:0,top:0},r.activationState=r.defaultActivationState(),r.activationTimerCallback=function(){r.activationAnimationHasEnded=!0,r.runDeactivationUXLogicIfReady()},r.activateHandler=function(t){r.activateImpl(t)},r.deactivateHandler=function(){r.deactivateImpl()},r.focusHandler=function(){r.handleFocus()},r.blurHandler=function(){r.handleBlur()},r.resizeHandler=function(){r.layout()},r}return(0,i.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return o},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return a},enumerable:!1,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return s},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},browserSupportsCssVars:function(){return!0},computeBoundingRect:function(){return{top:0,right:0,bottom:0,left:0,width:0,height:0}},containsEventTarget:function(){return!0},deregisterDocumentInteractionHandler:function(){},deregisterInteractionHandler:function(){},deregisterResizeHandler:function(){},getWindowPageOffset:function(){return{x:0,y:0}},isSurfaceActive:function(){return!0},isSurfaceDisabled:function(){return!0},isUnbounded:function(){return!0},registerDocumentInteractionHandler:function(){},registerInteractionHandler:function(){},registerResizeHandler:function(){},removeClass:function(){},updateCssVariable:function(){}}},enumerable:!1,configurable:!0}),e.prototype.init=function(){var t=this,n=this.supportsPressRipple();if(this.registerRootHandlers(n),n){var i=e.cssClasses,r=i.ROOT,o=i.UNBOUNDED;requestAnimationFrame((function(){t.adapter.addClass(r),t.adapter.isUnbounded()&&(t.adapter.addClass(o),t.layoutInternal())}))}},e.prototype.destroy=function(){var t=this;if(this.supportsPressRipple()){this.activationTimer&&(clearTimeout(this.activationTimer),this.activationTimer=0,this.adapter.removeClass(e.cssClasses.FG_ACTIVATION)),this.fgDeactivationRemovalTimer&&(clearTimeout(this.fgDeactivationRemovalTimer),this.fgDeactivationRemovalTimer=0,this.adapter.removeClass(e.cssClasses.FG_DEACTIVATION));var n=e.cssClasses,i=n.ROOT,r=n.UNBOUNDED;requestAnimationFrame((function(){t.adapter.removeClass(i),t.adapter.removeClass(r),t.removeCssVars()}))}this.deregisterRootHandlers(),this.deregisterDeactivationHandlers()},e.prototype.activate=function(t){this.activateImpl(t)},e.prototype.deactivate=function(){this.deactivateImpl()},e.prototype.layout=function(){var t=this;this.layoutFrame&&cancelAnimationFrame(this.layoutFrame),this.layoutFrame=requestAnimationFrame((function(){t.layoutInternal(),t.layoutFrame=0}))},e.prototype.setUnbounded=function(t){var n=e.cssClasses.UNBOUNDED;t?this.adapter.addClass(n):this.adapter.removeClass(n)},e.prototype.handleFocus=function(){var t=this;requestAnimationFrame((function(){return t.adapter.addClass(e.cssClasses.BG_FOCUSED)}))},e.prototype.handleBlur=function(){var t=this;requestAnimationFrame((function(){return t.adapter.removeClass(e.cssClasses.BG_FOCUSED)}))},e.prototype.supportsPressRipple=function(){return this.adapter.browserSupportsCssVars()},e.prototype.defaultActivationState=function(){return{activationEvent:void 0,hasDeactivationUXRun:!1,isActivated:!1,isProgrammatic:!1,wasActivatedByPointer:!1,wasElementMadeActive:!1}},e.prototype.registerRootHandlers=function(t){var e,n;if(t){try{for(var r=(0,i.XA)(c),o=r.next();!o.done;o=r.next()){var a=o.value;this.adapter.registerInteractionHandler(a,this.activateHandler)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}this.adapter.isUnbounded()&&this.adapter.registerResizeHandler(this.resizeHandler)}this.adapter.registerInteractionHandler("focus",this.focusHandler),this.adapter.registerInteractionHandler("blur",this.blurHandler)},e.prototype.registerDeactivationHandlers=function(t){var e,n;if("keydown"===t.type)this.adapter.registerInteractionHandler("keyup",this.deactivateHandler);else try{for(var r=(0,i.XA)(l),o=r.next();!o.done;o=r.next()){var a=o.value;this.adapter.registerDocumentInteractionHandler(a,this.deactivateHandler)}}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}},e.prototype.deregisterRootHandlers=function(){var t,e;try{for(var n=(0,i.XA)(c),r=n.next();!r.done;r=n.next()){var o=r.value;this.adapter.deregisterInteractionHandler(o,this.activateHandler)}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}this.adapter.deregisterInteractionHandler("focus",this.focusHandler),this.adapter.deregisterInteractionHandler("blur",this.blurHandler),this.adapter.isUnbounded()&&this.adapter.deregisterResizeHandler(this.resizeHandler)},e.prototype.deregisterDeactivationHandlers=function(){var t,e;this.adapter.deregisterInteractionHandler("keyup",this.deactivateHandler);try{for(var n=(0,i.XA)(l),r=n.next();!r.done;r=n.next()){var o=r.value;this.adapter.deregisterDocumentInteractionHandler(o,this.deactivateHandler)}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}},e.prototype.removeCssVars=function(){var t=this,n=e.strings;Object.keys(n).forEach((function(e){0===e.indexOf("VAR_")&&t.adapter.updateCssVariable(n[e],null)}))},e.prototype.activateImpl=function(t){var e=this;if(!this.adapter.isSurfaceDisabled()){var n=this.activationState;if(!n.isActivated){var i=this.previousActivationEvent;i&&void 0!==t&&i.type!==t.type||(n.isActivated=!0,n.isProgrammatic=void 0===t,n.activationEvent=t,n.wasActivatedByPointer=!n.isProgrammatic&&void 0!==t&&("mousedown"===t.type||"touchstart"===t.type||"pointerdown"===t.type),void 0!==t&&d.length>0&&d.some((function(t){return e.adapter.containsEventTarget(t)}))?this.resetActivationState():(void 0!==t&&(d.push(t.target),this.registerDeactivationHandlers(t)),n.wasElementMadeActive=this.checkElementMadeActive(t),n.wasElementMadeActive&&this.animateActivation(),requestAnimationFrame((function(){d=[],n.wasElementMadeActive||void 0===t||" "!==t.key&&32!==t.keyCode||(n.wasElementMadeActive=e.checkElementMadeActive(t),n.wasElementMadeActive&&e.animateActivation()),n.wasElementMadeActive||(e.activationState=e.defaultActivationState())}))))}}},e.prototype.checkElementMadeActive=function(t){return void 0===t||"keydown"!==t.type||this.adapter.isSurfaceActive()},e.prototype.animateActivation=function(){var t=this,n=e.strings,i=n.VAR_FG_TRANSLATE_START,r=n.VAR_FG_TRANSLATE_END,o=e.cssClasses,a=o.FG_DEACTIVATION,s=o.FG_ACTIVATION,u=e.numbers.DEACTIVATION_TIMEOUT_MS;this.layoutInternal();var c="",l="";if(!this.adapter.isUnbounded()){var d=this.getFgTranslationCoordinates(),p=d.startPoint,h=d.endPoint;c=p.x+"px, "+p.y+"px",l=h.x+"px, "+h.y+"px"}this.adapter.updateCssVariable(i,c),this.adapter.updateCssVariable(r,l),clearTimeout(this.activationTimer),clearTimeout(this.fgDeactivationRemovalTimer),this.rmBoundedActivationClasses(),this.adapter.removeClass(a),this.adapter.computeBoundingRect(),this.adapter.addClass(s),this.activationTimer=setTimeout((function(){t.activationTimerCallback()}),u)},e.prototype.getFgTranslationCoordinates=function(){var t,e=this.activationState,n=e.activationEvent;return{startPoint:t={x:(t=e.wasActivatedByPointer?(0,u.Y)(n,this.adapter.getWindowPageOffset(),this.adapter.computeBoundingRect()):{x:this.frame.width/2,y:this.frame.height/2}).x-this.initialSize/2,y:t.y-this.initialSize/2},endPoint:{x:this.frame.width/2-this.initialSize/2,y:this.frame.height/2-this.initialSize/2}}},e.prototype.runDeactivationUXLogicIfReady=function(){var t=this,n=e.cssClasses.FG_DEACTIVATION,i=this.activationState,r=i.hasDeactivationUXRun,o=i.isActivated;(r||!o)&&this.activationAnimationHasEnded&&(this.rmBoundedActivationClasses(),this.adapter.addClass(n),this.fgDeactivationRemovalTimer=setTimeout((function(){t.adapter.removeClass(n)}),s.FG_DEACTIVATION_MS))},e.prototype.rmBoundedActivationClasses=function(){var t=e.cssClasses.FG_ACTIVATION;this.adapter.removeClass(t),this.activationAnimationHasEnded=!1,this.adapter.computeBoundingRect()},e.prototype.resetActivationState=function(){var t=this;this.previousActivationEvent=this.activationState.activationEvent,this.activationState=this.defaultActivationState(),setTimeout((function(){return t.previousActivationEvent=void 0}),e.numbers.TAP_DELAY_MS)},e.prototype.deactivateImpl=function(){var t=this,e=this.activationState;if(e.isActivated){var n=(0,i.pi)({},e);e.isProgrammatic?(requestAnimationFrame((function(){t.animateDeactivation(n)})),this.resetActivationState()):(this.deregisterDeactivationHandlers(),requestAnimationFrame((function(){t.activationState.hasDeactivationUXRun=!0,t.animateDeactivation(n),t.resetActivationState()})))}},e.prototype.animateDeactivation=function(t){var e=t.wasActivatedByPointer,n=t.wasElementMadeActive;(e||n)&&this.runDeactivationUXLogicIfReady()},e.prototype.layoutInternal=function(){this.frame=this.adapter.computeBoundingRect();var t=Math.max(this.frame.height,this.frame.width);this.maxRadius=this.adapter.isUnbounded()?t:Math.sqrt(Math.pow(this.frame.width,2)+Math.pow(this.frame.height,2))+e.numbers.PADDING;var n=Math.floor(t*e.numbers.INITIAL_ORIGIN_SCALE);this.adapter.isUnbounded()&&n%2!=0?this.initialSize=n-1:this.initialSize=n,this.fgScale=""+this.maxRadius/this.initialSize,this.updateLayoutCssVars()},e.prototype.updateLayoutCssVars=function(){var t=e.strings,n=t.VAR_FG_SIZE,i=t.VAR_LEFT,r=t.VAR_TOP,o=t.VAR_FG_SCALE;this.adapter.updateCssVariable(n,this.initialSize+"px"),this.adapter.updateCssVariable(o,this.fgScale),this.adapter.isUnbounded()&&(this.unboundedCoords={left:Math.round(this.frame.width/2-this.initialSize/2),top:Math.round(this.frame.height/2-this.initialSize/2)},this.adapter.updateCssVariable(i,this.unboundedCoords.left+"px"),this.adapter.updateCssVariable(r,this.unboundedCoords.top+"px"))},e}(r.K)},7933:(t,e,n)=>{"use strict";n.d(e,{Fl:()=>i.F});var i=n(1661)},4014:(t,e,n)=>{"use strict";var i;function r(t,e){void 0===e&&(e=!1);var n,r=t.CSS;if("boolean"==typeof i&&!e)return i;if(!r||"function"!=typeof r.supports)return!1;var o=r.supports("--css-vars","yes"),a=r.supports("(--css-vars: yes)")&&r.supports("color","#00000000");return n=o||a,e||(i=n),n}function o(t,e,n){if(!t)return{x:0,y:0};var i,r,o=e.x,a=e.y,s=o+n.left,u=a+n.top;if("touchstart"===t.type){var c=t;i=c.changedTouches[0].pageX-s,r=c.changedTouches[0].pageY-u}else{var l=t;i=l.pageX-s,r=l.pageY-u}return{x:i,y:r}}n.d(e,{x:()=>r,Y:()=>o})},6286:(t,e,n)=>{"use strict";n.d(e,{H3:()=>vt});var i,r,o=n(655),a=n(5179),s=n(7706),u=n(8323),c={ANCHOR:"mdc-menu-surface--anchor",ANIMATING_CLOSED:"mdc-menu-surface--animating-closed",ANIMATING_OPEN:"mdc-menu-surface--animating-open",FIXED:"mdc-menu-surface--fixed",IS_OPEN_BELOW:"mdc-menu-surface--is-open-below",OPEN:"mdc-menu-surface--open",ROOT:"mdc-menu-surface"},l={CLOSED_EVENT:"MDCMenuSurface:closed",CLOSING_EVENT:"MDCMenuSurface:closing",OPENED_EVENT:"MDCMenuSurface:opened",FOCUSABLE_ELEMENTS:["button:not(:disabled)",'[href]:not([aria-disabled="true"])',"input:not(:disabled)","select:not(:disabled)","textarea:not(:disabled)",'[tabindex]:not([tabindex="-1"]):not([aria-disabled="true"])'].join(", ")},d={TRANSITION_OPEN_DURATION:120,TRANSITION_CLOSE_DURATION:75,MARGIN_TO_EDGE:32,ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO:.67,TOUCH_EVENT_WAIT_MS:30};!function(t){t[t.BOTTOM=1]="BOTTOM",t[t.CENTER=2]="CENTER",t[t.RIGHT=4]="RIGHT",t[t.FLIP_RTL=8]="FLIP_RTL"}(i||(i={})),function(t){t[t.TOP_LEFT=0]="TOP_LEFT",t[t.TOP_RIGHT=4]="TOP_RIGHT",t[t.BOTTOM_LEFT=1]="BOTTOM_LEFT",t[t.BOTTOM_RIGHT=5]="BOTTOM_RIGHT",t[t.TOP_START=8]="TOP_START",t[t.TOP_END=12]="TOP_END",t[t.BOTTOM_START=9]="BOTTOM_START",t[t.BOTTOM_END=13]="BOTTOM_END"}(r||(r={}));var p,h,f=n(2851),m={LIST_ITEM_ACTIVATED_CLASS:"mdc-list-item--activated",LIST_ITEM_CLASS:"mdc-list-item",LIST_ITEM_DISABLED_CLASS:"mdc-list-item--disabled",LIST_ITEM_SELECTED_CLASS:"mdc-list-item--selected",LIST_ITEM_TEXT_CLASS:"mdc-list-item__text",LIST_ITEM_PRIMARY_TEXT_CLASS:"mdc-list-item__primary-text",ROOT:"mdc-list"},v=((p={})[""+m.LIST_ITEM_ACTIVATED_CLASS]="mdc-list-item--activated",p[""+m.LIST_ITEM_CLASS]="mdc-list-item",p[""+m.LIST_ITEM_DISABLED_CLASS]="mdc-list-item--disabled",p[""+m.LIST_ITEM_SELECTED_CLASS]="mdc-list-item--selected",p[""+m.LIST_ITEM_PRIMARY_TEXT_CLASS]="mdc-list-item__primary-text",p[""+m.ROOT]="mdc-list",p),g=((h={})[""+m.LIST_ITEM_ACTIVATED_CLASS]="mdc-deprecated-list-item--activated",h[""+m.LIST_ITEM_CLASS]="mdc-deprecated-list-item",h[""+m.LIST_ITEM_DISABLED_CLASS]="mdc-deprecated-list-item--disabled",h[""+m.LIST_ITEM_SELECTED_CLASS]="mdc-deprecated-list-item--selected",h[""+m.LIST_ITEM_TEXT_CLASS]="mdc-deprecated-list-item__text",h[""+m.LIST_ITEM_PRIMARY_TEXT_CLASS]="mdc-deprecated-list-item__primary-text",h[""+m.ROOT]="mdc-deprecated-list",h),y={ACTION_EVENT:"MDCList:action",ARIA_CHECKED:"aria-checked",ARIA_CHECKED_CHECKBOX_SELECTOR:'[role="checkbox"][aria-checked="true"]',ARIA_CHECKED_RADIO_SELECTOR:'[role="radio"][aria-checked="true"]',ARIA_CURRENT:"aria-current",ARIA_DISABLED:"aria-disabled",ARIA_ORIENTATION:"aria-orientation",ARIA_ORIENTATION_HORIZONTAL:"horizontal",ARIA_ROLE_CHECKBOX_SELECTOR:'[role="checkbox"]',ARIA_SELECTED:"aria-selected",ARIA_INTERACTIVE_ROLES_SELECTOR:'[role="listbox"], [role="menu"]',ARIA_MULTI_SELECTABLE_SELECTOR:'[aria-multiselectable="true"]',CHECKBOX_RADIO_SELECTOR:'input[type="checkbox"], input[type="radio"]',CHECKBOX_SELECTOR:'input[type="checkbox"]',CHILD_ELEMENTS_TO_TOGGLE_TABINDEX:"\n    ."+m.LIST_ITEM_CLASS+" button:not(:disabled),\n    ."+m.LIST_ITEM_CLASS+" a,\n    ."+g[m.LIST_ITEM_CLASS]+" button:not(:disabled),\n    ."+g[m.LIST_ITEM_CLASS]+" a\n  ",DEPRECATED_SELECTOR:".mdc-deprecated-list",FOCUSABLE_CHILD_ELEMENTS:"\n    ."+m.LIST_ITEM_CLASS+" button:not(:disabled),\n    ."+m.LIST_ITEM_CLASS+" a,\n    ."+m.LIST_ITEM_CLASS+' input[type="radio"]:not(:disabled),\n    .'+m.LIST_ITEM_CLASS+' input[type="checkbox"]:not(:disabled),\n    .'+g[m.LIST_ITEM_CLASS]+" button:not(:disabled),\n    ."+g[m.LIST_ITEM_CLASS]+" a,\n    ."+g[m.LIST_ITEM_CLASS]+' input[type="radio"]:not(:disabled),\n    .'+g[m.LIST_ITEM_CLASS]+' input[type="checkbox"]:not(:disabled)\n  ',RADIO_SELECTOR:'input[type="radio"]',SELECTED_ITEM_SELECTOR:'[aria-selected="true"], [aria-current="true"]'},A={UNSET_INDEX:-1,TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS:300},C=n(6308),E="Backspace",b="Enter",D="Spacebar",I="PageUp",_="PageDown",T="End",S="Home",x="ArrowLeft",O="ArrowUp",w="ArrowRight",L="ArrowDown",k="Delete",F="Escape",R=new Set;R.add(E),R.add(b),R.add(D),R.add(I),R.add(_),R.add(T),R.add(S),R.add(x),R.add(O),R.add(w),R.add(L),R.add(k),R.add(F),R.add("Tab");var N=new Map;N.set(8,E),N.set(13,b),N.set(32,D),N.set(33,I),N.set(34,_),N.set(35,T),N.set(36,S),N.set(37,x),N.set(38,O),N.set(39,w),N.set(40,L),N.set(46,k),N.set(27,F),N.set(9,"Tab");var B=new Set;function M(t){var e=t.key;return R.has(e)?e:N.get(t.keyCode)||"Unknown"}B.add(I),B.add(_),B.add(T),B.add(S),B.add(x),B.add(O),B.add(w),B.add(L);var P=["input","button","textarea","select"],H=function(t){var e=t.target;if(e){var n=(""+e.tagName).toLowerCase();-1===P.indexOf(n)&&t.preventDefault()}};function j(t,e){var n,i=t.nextChar,r=t.focusItemAtIndex,o=t.sortedIndexByFirstChar,a=t.focusedItemIndex,s=t.skipFocus,u=t.isItemAtIndexDisabled;return clearTimeout(e.bufferClearTimeout),e.bufferClearTimeout=setTimeout((function(){V(e)}),A.TYPEAHEAD_BUFFER_CLEAR_TIMEOUT_MS),e.typeaheadBuffer=e.typeaheadBuffer+i,-1===(n=1===e.typeaheadBuffer.length?function(t,e,n,i){var r=i.typeaheadBuffer[0],o=t.get(r);if(!o)return-1;if(r===i.currentFirstChar&&o[i.sortedIndexCursor].index===e){i.sortedIndexCursor=(i.sortedIndexCursor+1)%o.length;var a=o[i.sortedIndexCursor].index;if(!n(a))return a}i.currentFirstChar=r;var s,u=-1;for(s=0;s<o.length;s++)if(!n(o[s].index)){u=s;break}for(;s<o.length;s++)if(o[s].index>e&&!n(o[s].index)){u=s;break}return-1!==u?(i.sortedIndexCursor=u,o[i.sortedIndexCursor].index):-1}(o,a,u,e):function(t,e,n){var i=n.typeaheadBuffer[0],r=t.get(i);if(!r)return-1;var o=r[n.sortedIndexCursor];if(0===o.text.lastIndexOf(n.typeaheadBuffer,0)&&!e(o.index))return o.index;for(var a=(n.sortedIndexCursor+1)%r.length,s=-1;a!==n.sortedIndexCursor;){var u=r[a],c=0===u.text.lastIndexOf(n.typeaheadBuffer,0),l=!e(u.index);if(c&&l){s=a;break}a=(a+1)%r.length}return-1!==s?(n.sortedIndexCursor=s,r[n.sortedIndexCursor].index):-1}(o,u,e))||s||r(n),n}function $(t){return t.typeaheadBuffer.length>0}function V(t){t.typeaheadBuffer=""}function U(t,e){var n=t.event,i=t.isTargetListItem,r=t.focusedItemIndex,o=t.focusItemAtIndex,a=t.sortedIndexByFirstChar,s=t.isItemAtIndexDisabled,u="ArrowLeft"===M(n),c="ArrowUp"===M(n),l="ArrowRight"===M(n),d="ArrowDown"===M(n),p="Home"===M(n),h="End"===M(n),f="Enter"===M(n),m="Spacebar"===M(n);return n.ctrlKey||n.metaKey||u||c||l||d||p||h||f?-1:m||1!==n.key.length?m?(i&&H(n),i&&$(e)?j({focusItemAtIndex:o,focusedItemIndex:r,nextChar:" ",sortedIndexByFirstChar:a,skipFocus:!1,isItemAtIndexDisabled:s},e):-1):-1:(H(n),j({focusItemAtIndex:o,focusedItemIndex:r,nextChar:n.key.toLowerCase(),sortedIndexByFirstChar:a,skipFocus:!1,isItemAtIndexDisabled:s},e))}var q,z=function(t){function e(n){var i=t.call(this,(0,o.pi)((0,o.pi)({},e.defaultAdapter),n))||this;return i.wrapFocus=!1,i.isVertical=!0,i.isSingleSelectionList=!1,i.selectedIndex=A.UNSET_INDEX,i.focusedItemIndex=A.UNSET_INDEX,i.useActivatedClass=!1,i.useSelectedAttr=!1,i.ariaCurrentAttrValue=null,i.isCheckboxList=!1,i.isRadioList=!1,i.hasTypeahead=!1,i.typeaheadState={bufferClearTimeout:0,currentFirstChar:"",sortedIndexCursor:0,typeaheadBuffer:""},i.sortedIndexByFirstChar=new Map,i}return(0,o.ZT)(e,t),Object.defineProperty(e,"strings",{get:function(){return y},enumerable:!1,configurable:!0}),Object.defineProperty(e,"cssClasses",{get:function(){return m},enumerable:!1,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return A},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClassForElementIndex:function(){},focusItemAtIndex:function(){},getAttributeForElementIndex:function(){return null},getFocusedElementIndex:function(){return 0},getListItemCount:function(){return 0},hasCheckboxAtIndex:function(){return!1},hasRadioAtIndex:function(){return!1},isCheckboxCheckedAtIndex:function(){return!1},isFocusInsideList:function(){return!1},isRootFocused:function(){return!1},listItemAtIndexHasClass:function(){return!1},notifyAction:function(){},removeClassForElementIndex:function(){},setAttributeForElementIndex:function(){},setCheckedCheckboxOrRadioAtIndex:function(){},setTabIndexForListItemChildren:function(){},getPrimaryTextAtIndex:function(){return""}}},enumerable:!1,configurable:!0}),e.prototype.layout=function(){0!==this.adapter.getListItemCount()&&(this.adapter.hasCheckboxAtIndex(0)?this.isCheckboxList=!0:this.adapter.hasRadioAtIndex(0)?this.isRadioList=!0:this.maybeInitializeSingleSelection(),this.hasTypeahead&&(this.sortedIndexByFirstChar=this.typeaheadInitSortedIndex()))},e.prototype.getFocusedItemIndex=function(){return this.focusedItemIndex},e.prototype.setWrapFocus=function(t){this.wrapFocus=t},e.prototype.setVerticalOrientation=function(t){this.isVertical=t},e.prototype.setSingleSelection=function(t){this.isSingleSelectionList=t,t&&(this.maybeInitializeSingleSelection(),this.selectedIndex=this.getSelectedIndexFromDOM())},e.prototype.maybeInitializeSingleSelection=function(){var t=this.getSelectedIndexFromDOM();t!==A.UNSET_INDEX&&(this.adapter.listItemAtIndexHasClass(t,m.LIST_ITEM_ACTIVATED_CLASS)&&this.setUseActivatedClass(!0),this.isSingleSelectionList=!0,this.selectedIndex=t)},e.prototype.getSelectedIndexFromDOM=function(){for(var t=A.UNSET_INDEX,e=this.adapter.getListItemCount(),n=0;n<e;n++){var i=this.adapter.listItemAtIndexHasClass(n,m.LIST_ITEM_SELECTED_CLASS),r=this.adapter.listItemAtIndexHasClass(n,m.LIST_ITEM_ACTIVATED_CLASS);if(i||r){t=n;break}}return t},e.prototype.setHasTypeahead=function(t){this.hasTypeahead=t,t&&(this.sortedIndexByFirstChar=this.typeaheadInitSortedIndex())},e.prototype.isTypeaheadInProgress=function(){return this.hasTypeahead&&$(this.typeaheadState)},e.prototype.setUseActivatedClass=function(t){this.useActivatedClass=t},e.prototype.setUseSelectedAttribute=function(t){this.useSelectedAttr=t},e.prototype.getSelectedIndex=function(){return this.selectedIndex},e.prototype.setSelectedIndex=function(t,e){var n=(void 0===e?{}:e).forceUpdate;this.isIndexValid(t)&&(this.isCheckboxList?this.setCheckboxAtIndex(t):this.isRadioList?this.setRadioAtIndex(t):this.setSingleSelectionAtIndex(t,{forceUpdate:n}))},e.prototype.handleFocusIn=function(t){t>=0&&(this.focusedItemIndex=t,this.adapter.setAttributeForElementIndex(t,"tabindex","0"),this.adapter.setTabIndexForListItemChildren(t,"0"))},e.prototype.handleFocusOut=function(t){var e=this;t>=0&&(this.adapter.setAttributeForElementIndex(t,"tabindex","-1"),this.adapter.setTabIndexForListItemChildren(t,"-1")),setTimeout((function(){e.adapter.isFocusInsideList()||e.setTabindexToFirstSelectedOrFocusedItem()}),0)},e.prototype.handleKeydown=function(t,e,n){var i=this,r="ArrowLeft"===M(t),o="ArrowUp"===M(t),a="ArrowRight"===M(t),s="ArrowDown"===M(t),u="Home"===M(t),c="End"===M(t),l="Enter"===M(t),d="Spacebar"===M(t),p="A"===t.key||"a"===t.key;if(this.adapter.isRootFocused())o||c?(t.preventDefault(),this.focusLastElement()):(s||u)&&(t.preventDefault(),this.focusFirstElement()),this.hasTypeahead&&U({event:t,focusItemAtIndex:function(t){i.focusItemAtIndex(t)},focusedItemIndex:-1,isTargetListItem:e,sortedIndexByFirstChar:this.sortedIndexByFirstChar,isItemAtIndexDisabled:function(t){return i.adapter.listItemAtIndexHasClass(t,m.LIST_ITEM_DISABLED_CLASS)}},this.typeaheadState);else{var h=this.adapter.getFocusedElementIndex();if(!(-1===h&&(h=n)<0)){if(this.isVertical&&s||!this.isVertical&&a)H(t),this.focusNextElement(h);else if(this.isVertical&&o||!this.isVertical&&r)H(t),this.focusPrevElement(h);else if(u)H(t),this.focusFirstElement();else if(c)H(t),this.focusLastElement();else if(p&&t.ctrlKey&&this.isCheckboxList)t.preventDefault(),this.toggleAll(this.selectedIndex===A.UNSET_INDEX?[]:this.selectedIndex);else if((l||d)&&e){var f=t.target;if(f&&"A"===f.tagName&&l)return;if(H(t),this.adapter.listItemAtIndexHasClass(h,m.LIST_ITEM_DISABLED_CLASS))return;this.isTypeaheadInProgress()||(this.isSelectableList()&&this.setSelectedIndexOnAction(h),this.adapter.notifyAction(h))}this.hasTypeahead&&U({event:t,focusItemAtIndex:function(t){i.focusItemAtIndex(t)},focusedItemIndex:this.focusedItemIndex,isTargetListItem:e,sortedIndexByFirstChar:this.sortedIndexByFirstChar,isItemAtIndexDisabled:function(t){return i.adapter.listItemAtIndexHasClass(t,m.LIST_ITEM_DISABLED_CLASS)}},this.typeaheadState)}}},e.prototype.handleClick=function(t,e){t!==A.UNSET_INDEX&&(this.adapter.listItemAtIndexHasClass(t,m.LIST_ITEM_DISABLED_CLASS)||(this.isSelectableList()&&this.setSelectedIndexOnAction(t,e),this.adapter.notifyAction(t)))},e.prototype.focusNextElement=function(t){var e=t+1;if(e>=this.adapter.getListItemCount()){if(!this.wrapFocus)return t;e=0}return this.focusItemAtIndex(e),e},e.prototype.focusPrevElement=function(t){var e=t-1;if(e<0){if(!this.wrapFocus)return t;e=this.adapter.getListItemCount()-1}return this.focusItemAtIndex(e),e},e.prototype.focusFirstElement=function(){return this.focusItemAtIndex(0),0},e.prototype.focusLastElement=function(){var t=this.adapter.getListItemCount()-1;return this.focusItemAtIndex(t),t},e.prototype.focusInitialElement=function(){var t=this.getFirstSelectedOrFocusedItemIndex();return this.focusItemAtIndex(t),t},e.prototype.setEnabled=function(t,e){this.isIndexValid(t)&&(e?(this.adapter.removeClassForElementIndex(t,m.LIST_ITEM_DISABLED_CLASS),this.adapter.setAttributeForElementIndex(t,y.ARIA_DISABLED,"false")):(this.adapter.addClassForElementIndex(t,m.LIST_ITEM_DISABLED_CLASS),this.adapter.setAttributeForElementIndex(t,y.ARIA_DISABLED,"true")))},e.prototype.setSingleSelectionAtIndex=function(t,e){var n=(void 0===e?{}:e).forceUpdate;if(this.selectedIndex!==t||n){var i=m.LIST_ITEM_SELECTED_CLASS;this.useActivatedClass&&(i=m.LIST_ITEM_ACTIVATED_CLASS),this.selectedIndex!==A.UNSET_INDEX&&this.adapter.removeClassForElementIndex(this.selectedIndex,i),this.setAriaForSingleSelectionAtIndex(t),this.setTabindexAtIndex(t),t!==A.UNSET_INDEX&&this.adapter.addClassForElementIndex(t,i),this.selectedIndex=t}},e.prototype.setAriaForSingleSelectionAtIndex=function(t){this.selectedIndex===A.UNSET_INDEX&&(this.ariaCurrentAttrValue=this.adapter.getAttributeForElementIndex(t,y.ARIA_CURRENT));var e=null!==this.ariaCurrentAttrValue,n=e?y.ARIA_CURRENT:y.ARIA_SELECTED;if(this.selectedIndex!==A.UNSET_INDEX&&this.adapter.setAttributeForElementIndex(this.selectedIndex,n,"false"),t!==A.UNSET_INDEX){var i=e?this.ariaCurrentAttrValue:"true";this.adapter.setAttributeForElementIndex(t,n,i)}},e.prototype.getSelectionAttribute=function(){return this.useSelectedAttr?y.ARIA_SELECTED:y.ARIA_CHECKED},e.prototype.setRadioAtIndex=function(t){var e=this.getSelectionAttribute();this.adapter.setCheckedCheckboxOrRadioAtIndex(t,!0),this.selectedIndex!==A.UNSET_INDEX&&this.adapter.setAttributeForElementIndex(this.selectedIndex,e,"false"),this.adapter.setAttributeForElementIndex(t,e,"true"),this.selectedIndex=t},e.prototype.setCheckboxAtIndex=function(t){for(var e=this.getSelectionAttribute(),n=0;n<this.adapter.getListItemCount();n++){var i=!1;t.indexOf(n)>=0&&(i=!0),this.adapter.setCheckedCheckboxOrRadioAtIndex(n,i),this.adapter.setAttributeForElementIndex(n,e,i?"true":"false")}this.selectedIndex=t},e.prototype.setTabindexAtIndex=function(t){this.focusedItemIndex===A.UNSET_INDEX&&0!==t?this.adapter.setAttributeForElementIndex(0,"tabindex","-1"):this.focusedItemIndex>=0&&this.focusedItemIndex!==t&&this.adapter.setAttributeForElementIndex(this.focusedItemIndex,"tabindex","-1"),this.selectedIndex instanceof Array||this.selectedIndex===t||this.adapter.setAttributeForElementIndex(this.selectedIndex,"tabindex","-1"),t!==A.UNSET_INDEX&&this.adapter.setAttributeForElementIndex(t,"tabindex","0")},e.prototype.isSelectableList=function(){return this.isSingleSelectionList||this.isCheckboxList||this.isRadioList},e.prototype.setTabindexToFirstSelectedOrFocusedItem=function(){var t=this.getFirstSelectedOrFocusedItemIndex();this.setTabindexAtIndex(t)},e.prototype.getFirstSelectedOrFocusedItemIndex=function(){return this.isSelectableList()?"number"==typeof this.selectedIndex&&this.selectedIndex!==A.UNSET_INDEX?this.selectedIndex:this.selectedIndex instanceof Array&&this.selectedIndex.length>0?this.selectedIndex.reduce((function(t,e){return Math.min(t,e)})):0:Math.max(this.focusedItemIndex,0)},e.prototype.isIndexValid=function(t){var e=this;if(t instanceof Array){if(!this.isCheckboxList)throw new Error("MDCListFoundation: Array of index is only supported for checkbox based list");return 0===t.length||t.some((function(t){return e.isIndexInRange(t)}))}if("number"==typeof t){if(this.isCheckboxList)throw new Error("MDCListFoundation: Expected array of index for checkbox based list but got number: "+t);return this.isIndexInRange(t)||this.isSingleSelectionList&&t===A.UNSET_INDEX}return!1},e.prototype.isIndexInRange=function(t){var e=this.adapter.getListItemCount();return t>=0&&t<e},e.prototype.setSelectedIndexOnAction=function(t,e){void 0===e&&(e=!0),this.isCheckboxList?this.toggleCheckboxAtIndex(t,e):this.setSelectedIndex(t)},e.prototype.toggleCheckboxAtIndex=function(t,e){var n=this.getSelectionAttribute(),i=this.adapter.isCheckboxCheckedAtIndex(t);e&&(i=!i,this.adapter.setCheckedCheckboxOrRadioAtIndex(t,i)),this.adapter.setAttributeForElementIndex(t,n,i?"true":"false");var r=this.selectedIndex===A.UNSET_INDEX?[]:this.selectedIndex.slice();i?r.push(t):r=r.filter((function(e){return e!==t})),this.selectedIndex=r},e.prototype.focusItemAtIndex=function(t){this.adapter.focusItemAtIndex(t),this.focusedItemIndex=t},e.prototype.toggleAll=function(t){var e=this.adapter.getListItemCount();if(t.length===e)this.setCheckboxAtIndex([]);else{for(var n=[],i=0;i<e;i++)(!this.adapter.listItemAtIndexHasClass(i,m.LIST_ITEM_DISABLED_CLASS)||t.indexOf(i)>-1)&&n.push(i);this.setCheckboxAtIndex(n)}},e.prototype.typeaheadMatchItem=function(t,e,n){var i=this;return void 0===n&&(n=!1),j({focusItemAtIndex:function(t){i.focusItemAtIndex(t)},focusedItemIndex:e||this.focusedItemIndex,nextChar:t,sortedIndexByFirstChar:this.sortedIndexByFirstChar,skipFocus:n,isItemAtIndexDisabled:function(t){return i.adapter.listItemAtIndexHasClass(t,m.LIST_ITEM_DISABLED_CLASS)}},this.typeaheadState)},e.prototype.typeaheadInitSortedIndex=function(){return function(t,e){for(var n=new Map,i=0;i<t;i++){var r=e(i).trim();if(r){var o=r[0].toLowerCase();n.has(o)||n.set(o,[]),n.get(o).push({text:r.toLowerCase(),index:i})}}return n.forEach((function(t){t.sort((function(t,e){return t.index-e.index}))})),n}(this.adapter.getListItemCount(),this.adapter.getPrimaryTextAtIndex)},e.prototype.clearTypeaheadBuffer=function(){V(this.typeaheadState)},e}(C.K),K=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,o.ZT)(e,t),Object.defineProperty(e.prototype,"vertical",{set:function(t){this.foundation.setVerticalOrientation(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"listElements",{get:function(){return Array.from(this.root.querySelectorAll("."+this.classNameMap[m.LIST_ITEM_CLASS]))},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"wrapFocus",{set:function(t){this.foundation.setWrapFocus(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeaheadInProgress",{get:function(){return this.foundation.isTypeaheadInProgress()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"hasTypeahead",{set:function(t){this.foundation.setHasTypeahead(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"singleSelection",{set:function(t){this.foundation.setSingleSelection(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selectedIndex",{get:function(){return this.foundation.getSelectedIndex()},set:function(t){this.foundation.setSelectedIndex(t)},enumerable:!1,configurable:!0}),e.attachTo=function(t){return new e(t)},e.prototype.initialSyncWithDOM=function(){this.isEvolutionEnabled="evolution"in this.root.dataset,this.isEvolutionEnabled?this.classNameMap=v:(0,f.wB)(this.root,y.DEPRECATED_SELECTOR)?this.classNameMap=g:this.classNameMap=Object.values(m).reduce((function(t,e){return t[e]=e,t}),{}),this.handleClick=this.handleClickEvent.bind(this),this.handleKeydown=this.handleKeydownEvent.bind(this),this.focusInEventListener=this.handleFocusInEvent.bind(this),this.focusOutEventListener=this.handleFocusOutEvent.bind(this),this.listen("keydown",this.handleKeydown),this.listen("click",this.handleClick),this.listen("focusin",this.focusInEventListener),this.listen("focusout",this.focusOutEventListener),this.layout(),this.initializeListType(),this.ensureFocusable()},e.prototype.destroy=function(){this.unlisten("keydown",this.handleKeydown),this.unlisten("click",this.handleClick),this.unlisten("focusin",this.focusInEventListener),this.unlisten("focusout",this.focusOutEventListener)},e.prototype.layout=function(){var t=this.root.getAttribute(y.ARIA_ORIENTATION);this.vertical=t!==y.ARIA_ORIENTATION_HORIZONTAL;var e="."+this.classNameMap[m.LIST_ITEM_CLASS]+":not([tabindex])",n=y.FOCUSABLE_CHILD_ELEMENTS,i=this.root.querySelectorAll(e);i.length&&Array.prototype.forEach.call(i,(function(t){t.setAttribute("tabindex","-1")}));var r=this.root.querySelectorAll(n);r.length&&Array.prototype.forEach.call(r,(function(t){t.setAttribute("tabindex","-1")})),this.isEvolutionEnabled&&this.foundation.setUseSelectedAttribute(!0),this.foundation.layout()},e.prototype.getPrimaryText=function(t){var e,n=t.querySelector("."+this.classNameMap[m.LIST_ITEM_PRIMARY_TEXT_CLASS]);if(this.isEvolutionEnabled||n)return null!==(e=null==n?void 0:n.textContent)&&void 0!==e?e:"";var i=t.querySelector("."+this.classNameMap[m.LIST_ITEM_TEXT_CLASS]);return i&&i.textContent||""},e.prototype.initializeListType=function(){var t=this;if(this.isInteractive=(0,f.wB)(this.root,y.ARIA_INTERACTIVE_ROLES_SELECTOR),this.isEvolutionEnabled&&this.isInteractive){var e=Array.from(this.root.querySelectorAll(y.SELECTED_ITEM_SELECTOR),(function(e){return t.listElements.indexOf(e)}));(0,f.wB)(this.root,y.ARIA_MULTI_SELECTABLE_SELECTOR)?this.selectedIndex=e:e.length>0&&(this.selectedIndex=e[0])}else{var n=this.root.querySelectorAll(y.ARIA_ROLE_CHECKBOX_SELECTOR),i=this.root.querySelector(y.ARIA_CHECKED_RADIO_SELECTOR);if(n.length){var r=this.root.querySelectorAll(y.ARIA_CHECKED_CHECKBOX_SELECTOR);this.selectedIndex=Array.from(r,(function(e){return t.listElements.indexOf(e)}))}else i&&(this.selectedIndex=this.listElements.indexOf(i))}},e.prototype.setEnabled=function(t,e){this.foundation.setEnabled(t,e)},e.prototype.typeaheadMatchItem=function(t,e){return this.foundation.typeaheadMatchItem(t,e,!0)},e.prototype.getDefaultFoundation=function(){var t=this;return new z({addClassForElementIndex:function(e,n){var i=t.listElements[e];i&&i.classList.add(t.classNameMap[n])},focusItemAtIndex:function(e){var n=t.listElements[e];n&&n.focus()},getAttributeForElementIndex:function(e,n){return t.listElements[e].getAttribute(n)},getFocusedElementIndex:function(){return t.listElements.indexOf(document.activeElement)},getListItemCount:function(){return t.listElements.length},getPrimaryTextAtIndex:function(e){return t.getPrimaryText(t.listElements[e])},hasCheckboxAtIndex:function(e){return!!t.listElements[e].querySelector(y.CHECKBOX_SELECTOR)},hasRadioAtIndex:function(e){return!!t.listElements[e].querySelector(y.RADIO_SELECTOR)},isCheckboxCheckedAtIndex:function(e){return t.listElements[e].querySelector(y.CHECKBOX_SELECTOR).checked},isFocusInsideList:function(){return t.root!==document.activeElement&&t.root.contains(document.activeElement)},isRootFocused:function(){return document.activeElement===t.root},listItemAtIndexHasClass:function(e,n){return t.listElements[e].classList.contains(t.classNameMap[n])},notifyAction:function(e){t.emit(y.ACTION_EVENT,{index:e},!0)},removeClassForElementIndex:function(e,n){var i=t.listElements[e];i&&i.classList.remove(t.classNameMap[n])},setAttributeForElementIndex:function(e,n,i){var r=t.listElements[e];r&&r.setAttribute(n,i)},setCheckedCheckboxOrRadioAtIndex:function(e,n){var i=t.listElements[e].querySelector(y.CHECKBOX_RADIO_SELECTOR);i.checked=n;var r=document.createEvent("Event");r.initEvent("change",!0,!0),i.dispatchEvent(r)},setTabIndexForListItemChildren:function(e,n){var i=t.listElements[e],r=y.CHILD_ELEMENTS_TO_TOGGLE_TABINDEX;Array.prototype.forEach.call(i.querySelectorAll(r),(function(t){t.setAttribute("tabindex",n)}))}})},e.prototype.ensureFocusable=function(){if(this.isEvolutionEnabled&&this.isInteractive&&!this.root.querySelector("."+this.classNameMap[m.LIST_ITEM_CLASS]+'[tabindex="0"]')){var t=this.initialFocusIndex();-1!==t&&(this.listElements[t].tabIndex=0)}},e.prototype.initialFocusIndex=function(){if(this.selectedIndex instanceof Array&&this.selectedIndex.length>0)return this.selectedIndex[0];if("number"==typeof this.selectedIndex&&this.selectedIndex!==A.UNSET_INDEX)return this.selectedIndex;var t=this.root.querySelector("."+this.classNameMap[m.LIST_ITEM_CLASS]+":not(."+this.classNameMap[m.LIST_ITEM_DISABLED_CLASS]+")");return null===t?-1:this.getListItemIndex(t)},e.prototype.getListItemIndex=function(t){var e=(0,f.oq)(t,"."+this.classNameMap[m.LIST_ITEM_CLASS]+", ."+this.classNameMap[m.ROOT]);return e&&(0,f.wB)(e,"."+this.classNameMap[m.LIST_ITEM_CLASS])?this.listElements.indexOf(e):-1},e.prototype.handleFocusInEvent=function(t){var e=this.getListItemIndex(t.target);this.foundation.handleFocusIn(e)},e.prototype.handleFocusOutEvent=function(t){var e=this.getListItemIndex(t.target);this.foundation.handleFocusOut(e)},e.prototype.handleKeydownEvent=function(t){var e=this.getListItemIndex(t.target),n=t.target;this.foundation.handleKeydown(t,n.classList.contains(this.classNameMap[m.LIST_ITEM_CLASS]),e)},e.prototype.handleClickEvent=function(t){var e=this.getListItemIndex(t.target),n=t.target,i=!(0,f.wB)(n,y.CHECKBOX_RADIO_SELECTOR);this.foundation.handleClick(e,i)},e}(a.B),G=function(t){function e(n){var i=t.call(this,(0,o.pi)((0,o.pi)({},e.defaultAdapter),n))||this;return i.isSurfaceOpen=!1,i.isQuickOpen=!1,i.isHoistedElement=!1,i.isFixedPosition=!1,i.isHorizontallyCenteredOnViewport=!1,i.maxHeight=0,i.openAnimationEndTimerId=0,i.closeAnimationEndTimerId=0,i.animationRequestId=0,i.anchorCorner=r.TOP_START,i.originCorner=r.TOP_START,i.anchorMargin={top:0,right:0,bottom:0,left:0},i.position={x:0,y:0},i}return(0,o.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return c},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return l},enumerable:!1,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return d},enumerable:!1,configurable:!0}),Object.defineProperty(e,"Corner",{get:function(){return r},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},hasAnchor:function(){return!1},isElementInContainer:function(){return!1},isFocused:function(){return!1},isRtl:function(){return!1},getInnerDimensions:function(){return{height:0,width:0}},getAnchorDimensions:function(){return null},getWindowDimensions:function(){return{height:0,width:0}},getBodyDimensions:function(){return{height:0,width:0}},getWindowScroll:function(){return{x:0,y:0}},setPosition:function(){},setMaxHeight:function(){},setTransformOrigin:function(){},saveFocus:function(){},restoreFocus:function(){},notifyClose:function(){},notifyOpen:function(){},notifyClosing:function(){}}},enumerable:!1,configurable:!0}),e.prototype.init=function(){var t=e.cssClasses,n=t.ROOT,i=t.OPEN;if(!this.adapter.hasClass(n))throw new Error(n+" class required in root element.");this.adapter.hasClass(i)&&(this.isSurfaceOpen=!0)},e.prototype.destroy=function(){clearTimeout(this.openAnimationEndTimerId),clearTimeout(this.closeAnimationEndTimerId),cancelAnimationFrame(this.animationRequestId)},e.prototype.setAnchorCorner=function(t){this.anchorCorner=t},e.prototype.flipCornerHorizontally=function(){this.originCorner=this.originCorner^i.RIGHT},e.prototype.setAnchorMargin=function(t){this.anchorMargin.top=t.top||0,this.anchorMargin.right=t.right||0,this.anchorMargin.bottom=t.bottom||0,this.anchorMargin.left=t.left||0},e.prototype.setIsHoisted=function(t){this.isHoistedElement=t},e.prototype.setFixedPosition=function(t){this.isFixedPosition=t},e.prototype.setAbsolutePosition=function(t,e){this.position.x=this.isFinite(t)?t:0,this.position.y=this.isFinite(e)?e:0},e.prototype.setIsHorizontallyCenteredOnViewport=function(t){this.isHorizontallyCenteredOnViewport=t},e.prototype.setQuickOpen=function(t){this.isQuickOpen=t},e.prototype.setMaxHeight=function(t){this.maxHeight=t},e.prototype.isOpen=function(){return this.isSurfaceOpen},e.prototype.open=function(){var t=this;this.isSurfaceOpen||(this.adapter.saveFocus(),this.isQuickOpen?(this.isSurfaceOpen=!0,this.adapter.addClass(e.cssClasses.OPEN),this.dimensions=this.adapter.getInnerDimensions(),this.autoposition(),this.adapter.notifyOpen()):(this.adapter.addClass(e.cssClasses.ANIMATING_OPEN),this.animationRequestId=requestAnimationFrame((function(){t.dimensions=t.adapter.getInnerDimensions(),t.autoposition(),t.adapter.addClass(e.cssClasses.OPEN),t.openAnimationEndTimerId=setTimeout((function(){t.openAnimationEndTimerId=0,t.adapter.removeClass(e.cssClasses.ANIMATING_OPEN),t.adapter.notifyOpen()}),d.TRANSITION_OPEN_DURATION)})),this.isSurfaceOpen=!0))},e.prototype.close=function(t){var n=this;if(void 0===t&&(t=!1),this.isSurfaceOpen){if(this.adapter.notifyClosing(),this.isQuickOpen)return this.isSurfaceOpen=!1,t||this.maybeRestoreFocus(),this.adapter.removeClass(e.cssClasses.OPEN),this.adapter.removeClass(e.cssClasses.IS_OPEN_BELOW),void this.adapter.notifyClose();this.adapter.addClass(e.cssClasses.ANIMATING_CLOSED),requestAnimationFrame((function(){n.adapter.removeClass(e.cssClasses.OPEN),n.adapter.removeClass(e.cssClasses.IS_OPEN_BELOW),n.closeAnimationEndTimerId=setTimeout((function(){n.closeAnimationEndTimerId=0,n.adapter.removeClass(e.cssClasses.ANIMATING_CLOSED),n.adapter.notifyClose()}),d.TRANSITION_CLOSE_DURATION)})),this.isSurfaceOpen=!1,t||this.maybeRestoreFocus()}},e.prototype.handleBodyClick=function(t){var e=t.target;this.adapter.isElementInContainer(e)||this.close()},e.prototype.handleKeydown=function(t){var e=t.keyCode;("Escape"===t.key||27===e)&&this.close()},e.prototype.autoposition=function(){var t;this.measurements=this.getAutoLayoutmeasurements();var n=this.getoriginCorner(),r=this.getMenuSurfaceMaxHeight(n),o=this.hasBit(n,i.BOTTOM)?"bottom":"top",a=this.hasBit(n,i.RIGHT)?"right":"left",s=this.getHorizontalOriginOffset(n),u=this.getVerticalOriginOffset(n),c=this.measurements,l=c.anchorSize,p=c.surfaceSize,h=((t={})[a]=s,t[o]=u,t);l.width/p.width>d.ANCHOR_TO_MENU_SURFACE_WIDTH_RATIO&&(a="center"),(this.isHoistedElement||this.isFixedPosition)&&this.adjustPositionForHoistedElement(h),this.adapter.setTransformOrigin(a+" "+o),this.adapter.setPosition(h),this.adapter.setMaxHeight(r?r+"px":""),this.hasBit(n,i.BOTTOM)||this.adapter.addClass(e.cssClasses.IS_OPEN_BELOW)},e.prototype.getAutoLayoutmeasurements=function(){var t=this.adapter.getAnchorDimensions(),e=this.adapter.getBodyDimensions(),n=this.adapter.getWindowDimensions(),i=this.adapter.getWindowScroll();return t||(t={top:this.position.y,right:this.position.x,bottom:this.position.y,left:this.position.x,width:0,height:0}),{anchorSize:t,bodySize:e,surfaceSize:this.dimensions,viewportDistance:{top:t.top,right:n.width-t.right,bottom:n.height-t.bottom,left:t.left},viewportSize:n,windowScroll:i}},e.prototype.getoriginCorner=function(){var t,n,r=this.originCorner,o=this.measurements,a=o.viewportDistance,s=o.anchorSize,u=o.surfaceSize,c=e.numbers.MARGIN_TO_EDGE;this.hasBit(this.anchorCorner,i.BOTTOM)?(t=a.top-c+this.anchorMargin.bottom,n=a.bottom-c-this.anchorMargin.bottom):(t=a.top-c+this.anchorMargin.top,n=a.bottom-c+s.height-this.anchorMargin.top),!(n-u.height>0)&&t>n&&(r=this.setBit(r,i.BOTTOM));var l,d,p,h=this.adapter.isRtl(),f=this.hasBit(this.anchorCorner,i.FLIP_RTL),m=this.hasBit(this.anchorCorner,i.RIGHT)||this.hasBit(r,i.RIGHT);(p=h&&f?!m:m)?(l=a.left+s.width+this.anchorMargin.right,d=a.right-this.anchorMargin.right):(l=a.left+this.anchorMargin.left,d=a.right+s.width-this.anchorMargin.left);var v=l-u.width>0,g=d-u.width>0,y=this.hasBit(r,i.FLIP_RTL)&&this.hasBit(r,i.RIGHT);return g&&y&&h||!v&&y?r=this.unsetBit(r,i.RIGHT):(v&&p&&h||v&&!p&&m||!g&&l>=d)&&(r=this.setBit(r,i.RIGHT)),r},e.prototype.getMenuSurfaceMaxHeight=function(t){if(this.maxHeight>0)return this.maxHeight;var n=this.measurements.viewportDistance,r=0,o=this.hasBit(t,i.BOTTOM),a=this.hasBit(this.anchorCorner,i.BOTTOM),s=e.numbers.MARGIN_TO_EDGE;return o?(r=n.top+this.anchorMargin.top-s,a||(r+=this.measurements.anchorSize.height)):(r=n.bottom-this.anchorMargin.bottom+this.measurements.anchorSize.height-s,a&&(r-=this.measurements.anchorSize.height)),r},e.prototype.getHorizontalOriginOffset=function(t){var e=this.measurements.anchorSize,n=this.hasBit(t,i.RIGHT),r=this.hasBit(this.anchorCorner,i.RIGHT);if(n){var o=r?e.width-this.anchorMargin.left:this.anchorMargin.right;return this.isHoistedElement||this.isFixedPosition?o-(this.measurements.viewportSize.width-this.measurements.bodySize.width):o}return r?e.width-this.anchorMargin.right:this.anchorMargin.left},e.prototype.getVerticalOriginOffset=function(t){var e=this.measurements.anchorSize,n=this.hasBit(t,i.BOTTOM),r=this.hasBit(this.anchorCorner,i.BOTTOM);return n?r?e.height-this.anchorMargin.top:-this.anchorMargin.bottom:r?e.height+this.anchorMargin.bottom:this.anchorMargin.top},e.prototype.adjustPositionForHoistedElement=function(t){var e,n,i=this.measurements,r=i.windowScroll,a=i.viewportDistance,s=i.surfaceSize,u=i.viewportSize,c=Object.keys(t);try{for(var l=(0,o.XA)(c),d=l.next();!d.done;d=l.next()){var p=d.value,h=t[p]||0;!this.isHorizontallyCenteredOnViewport||"left"!==p&&"right"!==p?(h+=a[p],this.isFixedPosition||("top"===p?h+=r.y:"bottom"===p?h-=r.y:"left"===p?h+=r.x:h-=r.x),t[p]=h):t[p]=(u.width-s.width)/2}}catch(t){e={error:t}}finally{try{d&&!d.done&&(n=l.return)&&n.call(l)}finally{if(e)throw e.error}}},e.prototype.maybeRestoreFocus=function(){var t=this,e=this.adapter.isFocused(),n=document.activeElement&&this.adapter.isElementInContainer(document.activeElement);(e||n)&&setTimeout((function(){t.adapter.restoreFocus()}),d.TOUCH_EVENT_WAIT_MS)},e.prototype.hasBit=function(t,e){return Boolean(t&e)},e.prototype.setBit=function(t,e){return t|e},e.prototype.unsetBit=function(t,e){return t^e},e.prototype.isFinite=function(t){return"number"==typeof t&&isFinite(t)},e}(C.K),X=n(5475),W=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,o.ZT)(e,t),e.attachTo=function(t){return new e(t)},e.prototype.initialSyncWithDOM=function(){var t=this,e=this.root.parentElement;this.anchorElement=e&&e.classList.contains(c.ANCHOR)?e:null,this.root.classList.contains(c.FIXED)&&this.setFixedPosition(!0),this.handleKeydown=function(e){t.foundation.handleKeydown(e)},this.handleBodyClick=function(e){t.foundation.handleBodyClick(e)},this.registerBodyClickListener=function(){document.body.addEventListener("click",t.handleBodyClick,{capture:!0})},this.deregisterBodyClickListener=function(){document.body.removeEventListener("click",t.handleBodyClick,{capture:!0})},this.listen("keydown",this.handleKeydown),this.listen(l.OPENED_EVENT,this.registerBodyClickListener),this.listen(l.CLOSED_EVENT,this.deregisterBodyClickListener)},e.prototype.destroy=function(){this.unlisten("keydown",this.handleKeydown),this.unlisten(l.OPENED_EVENT,this.registerBodyClickListener),this.unlisten(l.CLOSED_EVENT,this.deregisterBodyClickListener),t.prototype.destroy.call(this)},e.prototype.isOpen=function(){return this.foundation.isOpen()},e.prototype.open=function(){this.foundation.open()},e.prototype.close=function(t){void 0===t&&(t=!1),this.foundation.close(t)},Object.defineProperty(e.prototype,"quickOpen",{set:function(t){this.foundation.setQuickOpen(t)},enumerable:!1,configurable:!0}),e.prototype.setIsHoisted=function(t){this.foundation.setIsHoisted(t)},e.prototype.setMenuSurfaceAnchorElement=function(t){this.anchorElement=t},e.prototype.setFixedPosition=function(t){t?this.root.classList.add(c.FIXED):this.root.classList.remove(c.FIXED),this.foundation.setFixedPosition(t)},e.prototype.setAbsolutePosition=function(t,e){this.foundation.setAbsolutePosition(t,e),this.setIsHoisted(!0)},e.prototype.setAnchorCorner=function(t){this.foundation.setAnchorCorner(t)},e.prototype.setAnchorMargin=function(t){this.foundation.setAnchorMargin(t)},e.prototype.getDefaultFoundation=function(){var t=this;return new G({addClass:function(e){return t.root.classList.add(e)},removeClass:function(e){return t.root.classList.remove(e)},hasClass:function(e){return t.root.classList.contains(e)},hasAnchor:function(){return!!t.anchorElement},notifyClose:function(){return t.emit(G.strings.CLOSED_EVENT,{})},notifyClosing:function(){t.emit(G.strings.CLOSING_EVENT,{})},notifyOpen:function(){return t.emit(G.strings.OPENED_EVENT,{})},isElementInContainer:function(e){return t.root.contains(e)},isRtl:function(){return"rtl"===getComputedStyle(t.root).getPropertyValue("direction")},setTransformOrigin:function(e){var n=(0,X.E)(window,"transform")+"-origin";t.root.style.setProperty(n,e)},isFocused:function(){return document.activeElement===t.root},saveFocus:function(){t.previousFocus=document.activeElement},restoreFocus:function(){t.root.contains(document.activeElement)&&t.previousFocus&&t.previousFocus.focus&&t.previousFocus.focus()},getInnerDimensions:function(){return{width:t.root.offsetWidth,height:t.root.offsetHeight}},getAnchorDimensions:function(){return t.anchorElement?t.anchorElement.getBoundingClientRect():null},getWindowDimensions:function(){return{width:window.innerWidth,height:window.innerHeight}},getBodyDimensions:function(){return{width:document.body.clientWidth,height:document.body.clientHeight}},getWindowScroll:function(){return{x:window.pageXOffset,y:window.pageYOffset}},setPosition:function(e){var n=t.root;n.style.left="left"in e?e.left+"px":"",n.style.right="right"in e?e.right+"px":"",n.style.top="top"in e?e.top+"px":"",n.style.bottom="bottom"in e?e.bottom+"px":""},setMaxHeight:function(e){t.root.style.maxHeight=e}})},e}(a.B),Z={MENU_SELECTED_LIST_ITEM:"mdc-menu-item--selected",MENU_SELECTION_GROUP:"mdc-menu__selection-group",ROOT:"mdc-menu"},Y={ARIA_CHECKED_ATTR:"aria-checked",ARIA_DISABLED_ATTR:"aria-disabled",CHECKBOX_SELECTOR:'input[type="checkbox"]',LIST_SELECTOR:".mdc-list,.mdc-deprecated-list",SELECTED_EVENT:"MDCMenu:selected"},J={FOCUS_ROOT_INDEX:-1};!function(t){t[t.NONE=0]="NONE",t[t.LIST_ROOT=1]="LIST_ROOT",t[t.FIRST_ITEM=2]="FIRST_ITEM",t[t.LAST_ITEM=3]="LAST_ITEM"}(q||(q={}));var Q=function(t){function e(n){var i=t.call(this,(0,o.pi)((0,o.pi)({},e.defaultAdapter),n))||this;return i.closeAnimationEndTimerId=0,i.defaultFocusState=q.LIST_ROOT,i.selectedIndex=-1,i}return(0,o.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return Z},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return Y},enumerable:!1,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return J},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClassToElementAtIndex:function(){},removeClassFromElementAtIndex:function(){},addAttributeToElementAtIndex:function(){},removeAttributeFromElementAtIndex:function(){},elementContainsClass:function(){return!1},closeSurface:function(){},getElementIndex:function(){return-1},notifySelected:function(){},getMenuItemCount:function(){return 0},focusItemAtIndex:function(){},focusListRoot:function(){},getSelectedSiblingOfItemAtIndex:function(){return-1},isSelectableItemAtIndex:function(){return!1}}},enumerable:!1,configurable:!0}),e.prototype.destroy=function(){this.closeAnimationEndTimerId&&clearTimeout(this.closeAnimationEndTimerId),this.adapter.closeSurface()},e.prototype.handleKeydown=function(t){var e=t.key,n=t.keyCode;("Tab"===e||9===n)&&this.adapter.closeSurface(!0)},e.prototype.handleItemAction=function(t){var e=this,n=this.adapter.getElementIndex(t);n<0||(this.adapter.notifySelected({index:n}),this.adapter.closeSurface(),this.closeAnimationEndTimerId=setTimeout((function(){var n=e.adapter.getElementIndex(t);n>=0&&e.adapter.isSelectableItemAtIndex(n)&&e.setSelectedIndex(n)}),G.numbers.TRANSITION_CLOSE_DURATION))},e.prototype.handleMenuSurfaceOpened=function(){switch(this.defaultFocusState){case q.FIRST_ITEM:this.adapter.focusItemAtIndex(0);break;case q.LAST_ITEM:this.adapter.focusItemAtIndex(this.adapter.getMenuItemCount()-1);break;case q.NONE:break;default:this.adapter.focusListRoot()}},e.prototype.setDefaultFocusState=function(t){this.defaultFocusState=t},e.prototype.getSelectedIndex=function(){return this.selectedIndex},e.prototype.setSelectedIndex=function(t){if(this.validatedIndex(t),!this.adapter.isSelectableItemAtIndex(t))throw new Error("MDCMenuFoundation: No selection group at specified index.");var e=this.adapter.getSelectedSiblingOfItemAtIndex(t);e>=0&&(this.adapter.removeAttributeFromElementAtIndex(e,Y.ARIA_CHECKED_ATTR),this.adapter.removeClassFromElementAtIndex(e,Z.MENU_SELECTED_LIST_ITEM)),this.adapter.addClassToElementAtIndex(t,Z.MENU_SELECTED_LIST_ITEM),this.adapter.addAttributeToElementAtIndex(t,Y.ARIA_CHECKED_ATTR,"true"),this.selectedIndex=t},e.prototype.setEnabled=function(t,e){this.validatedIndex(t),e?(this.adapter.removeClassFromElementAtIndex(t,m.LIST_ITEM_DISABLED_CLASS),this.adapter.addAttributeToElementAtIndex(t,Y.ARIA_DISABLED_ATTR,"false")):(this.adapter.addClassToElementAtIndex(t,m.LIST_ITEM_DISABLED_CLASS),this.adapter.addAttributeToElementAtIndex(t,Y.ARIA_DISABLED_ATTR,"true"))},e.prototype.validatedIndex=function(t){var e=this.adapter.getMenuItemCount();if(!(t>=0&&t<e))throw new Error("MDCMenuFoundation: No list item at specified index.")},e}(C.K),tt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,o.ZT)(e,t),e.attachTo=function(t){return new e(t)},e.prototype.initialize=function(t,e){void 0===t&&(t=function(t){return new W(t)}),void 0===e&&(e=function(t){return new K(t)}),this.menuSurfaceFactory=t,this.listFactory=e},e.prototype.initialSyncWithDOM=function(){var t=this;this.menuSurface=this.menuSurfaceFactory(this.root);var e=this.root.querySelector(Y.LIST_SELECTOR);e?(this.list=this.listFactory(e),this.list.wrapFocus=!0):this.list=null,this.handleKeydown=function(e){t.foundation.handleKeydown(e)},this.handleItemAction=function(e){t.foundation.handleItemAction(t.items[e.detail.index])},this.handleMenuSurfaceOpened=function(){t.foundation.handleMenuSurfaceOpened()},this.menuSurface.listen(G.strings.OPENED_EVENT,this.handleMenuSurfaceOpened),this.listen("keydown",this.handleKeydown),this.listen(z.strings.ACTION_EVENT,this.handleItemAction)},e.prototype.destroy=function(){this.list&&this.list.destroy(),this.menuSurface.destroy(),this.menuSurface.unlisten(G.strings.OPENED_EVENT,this.handleMenuSurfaceOpened),this.unlisten("keydown",this.handleKeydown),this.unlisten(z.strings.ACTION_EVENT,this.handleItemAction),t.prototype.destroy.call(this)},Object.defineProperty(e.prototype,"open",{get:function(){return this.menuSurface.isOpen()},set:function(t){t?this.menuSurface.open():this.menuSurface.close()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"wrapFocus",{get:function(){return!!this.list&&this.list.wrapFocus},set:function(t){this.list&&(this.list.wrapFocus=t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"hasTypeahead",{set:function(t){this.list&&(this.list.hasTypeahead=t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"typeaheadInProgress",{get:function(){return!!this.list&&this.list.typeaheadInProgress},enumerable:!1,configurable:!0}),e.prototype.typeaheadMatchItem=function(t,e){return this.list?this.list.typeaheadMatchItem(t,e):-1},e.prototype.layout=function(){this.list&&this.list.layout()},Object.defineProperty(e.prototype,"items",{get:function(){return this.list?this.list.listElements:[]},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"singleSelection",{set:function(t){this.list&&(this.list.singleSelection=t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"selectedIndex",{get:function(){return this.list?this.list.selectedIndex:A.UNSET_INDEX},set:function(t){this.list&&(this.list.selectedIndex=t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"quickOpen",{set:function(t){this.menuSurface.quickOpen=t},enumerable:!1,configurable:!0}),e.prototype.setDefaultFocusState=function(t){this.foundation.setDefaultFocusState(t)},e.prototype.setAnchorCorner=function(t){this.menuSurface.setAnchorCorner(t)},e.prototype.setAnchorMargin=function(t){this.menuSurface.setAnchorMargin(t)},e.prototype.setSelectedIndex=function(t){this.foundation.setSelectedIndex(t)},e.prototype.setEnabled=function(t,e){this.foundation.setEnabled(t,e)},e.prototype.getOptionByIndex=function(t){return t<this.items.length?this.items[t]:null},e.prototype.getPrimaryTextAtIndex=function(t){var e=this.getOptionByIndex(t);return e&&this.list&&this.list.getPrimaryText(e)||""},e.prototype.setFixedPosition=function(t){this.menuSurface.setFixedPosition(t)},e.prototype.setIsHoisted=function(t){this.menuSurface.setIsHoisted(t)},e.prototype.setAbsolutePosition=function(t,e){this.menuSurface.setAbsolutePosition(t,e)},e.prototype.setAnchorElement=function(t){this.menuSurface.anchorElement=t},e.prototype.getDefaultFoundation=function(){var t=this;return new Q({addClassToElementAtIndex:function(e,n){t.items[e].classList.add(n)},removeClassFromElementAtIndex:function(e,n){t.items[e].classList.remove(n)},addAttributeToElementAtIndex:function(e,n,i){t.items[e].setAttribute(n,i)},removeAttributeFromElementAtIndex:function(e,n){t.items[e].removeAttribute(n)},elementContainsClass:function(t,e){return t.classList.contains(e)},closeSurface:function(e){t.menuSurface.close(e)},getElementIndex:function(e){return t.items.indexOf(e)},notifySelected:function(e){t.emit(Y.SELECTED_EVENT,{index:e.index,item:t.items[e.index]})},getMenuItemCount:function(){return t.items.length},focusItemAtIndex:function(e){t.items[e].focus()},focusListRoot:function(){t.root.querySelector(Y.LIST_SELECTOR).focus()},isSelectableItemAtIndex:function(e){return!!(0,f.oq)(t.items[e],"."+Z.MENU_SELECTION_GROUP)},getSelectedSiblingOfItemAtIndex:function(e){var n=(0,f.oq)(t.items[e],"."+Z.MENU_SELECTION_GROUP).querySelector("."+Z.MENU_SELECTED_LIST_ITEM);return n?t.items.indexOf(n):-1}})},e}(a.B),et=n(9966),nt=n(1661),it=n(6725),rt={ACTIVATED:"mdc-select--activated",DISABLED:"mdc-select--disabled",FOCUSED:"mdc-select--focused",INVALID:"mdc-select--invalid",MENU_INVALID:"mdc-select__menu--invalid",OUTLINED:"mdc-select--outlined",REQUIRED:"mdc-select--required",ROOT:"mdc-select",WITH_LEADING_ICON:"mdc-select--with-leading-icon"},ot={ARIA_CONTROLS:"aria-controls",ARIA_DESCRIBEDBY:"aria-describedby",ARIA_SELECTED_ATTR:"aria-selected",CHANGE_EVENT:"MDCSelect:change",HIDDEN_INPUT_SELECTOR:'input[type="hidden"]',LABEL_SELECTOR:".mdc-floating-label",LEADING_ICON_SELECTOR:".mdc-select__icon",LINE_RIPPLE_SELECTOR:".mdc-line-ripple",MENU_SELECTOR:".mdc-select__menu",OUTLINE_SELECTOR:".mdc-notched-outline",SELECTED_TEXT_SELECTOR:".mdc-select__selected-text",SELECT_ANCHOR_SELECTOR:".mdc-select__anchor",VALUE_ATTR:"data-value"},at={LABEL_SCALE:.75,UNSET_INDEX:-1,CLICK_DEBOUNCE_TIMEOUT_MS:330},st=function(t){function e(n,i){void 0===i&&(i={});var r=t.call(this,(0,o.pi)((0,o.pi)({},e.defaultAdapter),n))||this;return r.disabled=!1,r.isMenuOpen=!1,r.useDefaultValidation=!0,r.customValidity=!0,r.lastSelectedIndex=at.UNSET_INDEX,r.clickDebounceTimeout=0,r.recentlyClicked=!1,r.leadingIcon=i.leadingIcon,r.helperText=i.helperText,r}return(0,o.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return rt},enumerable:!1,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return at},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return ot},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},activateBottomLine:function(){},deactivateBottomLine:function(){},getSelectedIndex:function(){return-1},setSelectedIndex:function(){},hasLabel:function(){return!1},floatLabel:function(){},getLabelWidth:function(){return 0},setLabelRequired:function(){},hasOutline:function(){return!1},notchOutline:function(){},closeOutline:function(){},setRippleCenter:function(){},notifyChange:function(){},setSelectedText:function(){},isSelectAnchorFocused:function(){return!1},getSelectAnchorAttr:function(){return""},setSelectAnchorAttr:function(){},removeSelectAnchorAttr:function(){},addMenuClass:function(){},removeMenuClass:function(){},openMenu:function(){},closeMenu:function(){},getAnchorElement:function(){return null},setMenuAnchorElement:function(){},setMenuAnchorCorner:function(){},setMenuWrapFocus:function(){},focusMenuItemAtIndex:function(){},getMenuItemCount:function(){return 0},getMenuItemValues:function(){return[]},getMenuItemTextAtIndex:function(){return""},isTypeaheadInProgress:function(){return!1},typeaheadMatchItem:function(){return-1}}},enumerable:!1,configurable:!0}),e.prototype.getSelectedIndex=function(){return this.adapter.getSelectedIndex()},e.prototype.setSelectedIndex=function(t,e,n){void 0===e&&(e=!1),void 0===n&&(n=!1),t>=this.adapter.getMenuItemCount()||(t===at.UNSET_INDEX?this.adapter.setSelectedText(""):this.adapter.setSelectedText(this.adapter.getMenuItemTextAtIndex(t).trim()),this.adapter.setSelectedIndex(t),e&&this.adapter.closeMenu(),n||this.lastSelectedIndex===t||this.handleChange(),this.lastSelectedIndex=t)},e.prototype.setValue=function(t,e){void 0===e&&(e=!1);var n=this.adapter.getMenuItemValues().indexOf(t);this.setSelectedIndex(n,!1,e)},e.prototype.getValue=function(){var t=this.adapter.getSelectedIndex(),e=this.adapter.getMenuItemValues();return t!==at.UNSET_INDEX?e[t]:""},e.prototype.getDisabled=function(){return this.disabled},e.prototype.setDisabled=function(t){this.disabled=t,this.disabled?(this.adapter.addClass(rt.DISABLED),this.adapter.closeMenu()):this.adapter.removeClass(rt.DISABLED),this.leadingIcon&&this.leadingIcon.setDisabled(this.disabled),this.disabled?this.adapter.removeSelectAnchorAttr("tabindex"):this.adapter.setSelectAnchorAttr("tabindex","0"),this.adapter.setSelectAnchorAttr("aria-disabled",this.disabled.toString())},e.prototype.openMenu=function(){this.adapter.addClass(rt.ACTIVATED),this.adapter.openMenu(),this.isMenuOpen=!0,this.adapter.setSelectAnchorAttr("aria-expanded","true")},e.prototype.setHelperTextContent=function(t){this.helperText&&this.helperText.setContent(t)},e.prototype.layout=function(){if(this.adapter.hasLabel()){var t=this.getValue().length>0,e=this.adapter.hasClass(rt.FOCUSED),n=t||e,i=this.adapter.hasClass(rt.REQUIRED);this.notchOutline(n),this.adapter.floatLabel(n),this.adapter.setLabelRequired(i)}},e.prototype.layoutOptions=function(){var t=this.adapter.getMenuItemValues().indexOf(this.getValue());this.setSelectedIndex(t,!1,!0)},e.prototype.handleMenuOpened=function(){if(0!==this.adapter.getMenuItemValues().length){var t=this.getSelectedIndex(),e=t>=0?t:0;this.adapter.focusMenuItemAtIndex(e)}},e.prototype.handleMenuClosing=function(){this.adapter.setSelectAnchorAttr("aria-expanded","false")},e.prototype.handleMenuClosed=function(){this.adapter.removeClass(rt.ACTIVATED),this.isMenuOpen=!1,this.adapter.isSelectAnchorFocused()||this.blur()},e.prototype.handleChange=function(){this.layout(),this.adapter.notifyChange(this.getValue()),this.adapter.hasClass(rt.REQUIRED)&&this.useDefaultValidation&&this.setValid(this.isValid())},e.prototype.handleMenuItemAction=function(t){this.setSelectedIndex(t,!0)},e.prototype.handleFocus=function(){this.adapter.addClass(rt.FOCUSED),this.layout(),this.adapter.activateBottomLine()},e.prototype.handleBlur=function(){this.isMenuOpen||this.blur()},e.prototype.handleClick=function(t){this.disabled||this.recentlyClicked||(this.setClickDebounceTimeout(),this.isMenuOpen?this.adapter.closeMenu():(this.adapter.setRippleCenter(t),this.openMenu()))},e.prototype.handleKeydown=function(t){if(!this.isMenuOpen&&this.adapter.hasClass(rt.FOCUSED)){var e=M(t)===b,n=M(t)===D,i=M(t)===O,r=M(t)===L;if(!t.ctrlKey&&!t.metaKey&&(!n&&t.key&&1===t.key.length||n&&this.adapter.isTypeaheadInProgress())){var o=n?" ":t.key,a=this.adapter.typeaheadMatchItem(o,this.getSelectedIndex());return a>=0&&this.setSelectedIndex(a),void t.preventDefault()}(e||n||i||r)&&(i&&this.getSelectedIndex()>0?this.setSelectedIndex(this.getSelectedIndex()-1):r&&this.getSelectedIndex()<this.adapter.getMenuItemCount()-1&&this.setSelectedIndex(this.getSelectedIndex()+1),this.openMenu(),t.preventDefault())}},e.prototype.notchOutline=function(t){if(this.adapter.hasOutline()){var e=this.adapter.hasClass(rt.FOCUSED);if(t){var n=at.LABEL_SCALE,i=this.adapter.getLabelWidth()*n;this.adapter.notchOutline(i)}else e||this.adapter.closeOutline()}},e.prototype.setLeadingIconAriaLabel=function(t){this.leadingIcon&&this.leadingIcon.setAriaLabel(t)},e.prototype.setLeadingIconContent=function(t){this.leadingIcon&&this.leadingIcon.setContent(t)},e.prototype.getUseDefaultValidation=function(){return this.useDefaultValidation},e.prototype.setUseDefaultValidation=function(t){this.useDefaultValidation=t},e.prototype.setValid=function(t){this.useDefaultValidation||(this.customValidity=t),this.adapter.setSelectAnchorAttr("aria-invalid",(!t).toString()),t?(this.adapter.removeClass(rt.INVALID),this.adapter.removeMenuClass(rt.MENU_INVALID)):(this.adapter.addClass(rt.INVALID),this.adapter.addMenuClass(rt.MENU_INVALID)),this.syncHelperTextValidity(t)},e.prototype.isValid=function(){return this.useDefaultValidation&&this.adapter.hasClass(rt.REQUIRED)&&!this.adapter.hasClass(rt.DISABLED)?this.getSelectedIndex()!==at.UNSET_INDEX&&(0!==this.getSelectedIndex()||Boolean(this.getValue())):this.customValidity},e.prototype.setRequired=function(t){t?this.adapter.addClass(rt.REQUIRED):this.adapter.removeClass(rt.REQUIRED),this.adapter.setSelectAnchorAttr("aria-required",t.toString()),this.adapter.setLabelRequired(t)},e.prototype.getRequired=function(){return"true"===this.adapter.getSelectAnchorAttr("aria-required")},e.prototype.init=function(){var t=this.adapter.getAnchorElement();t&&(this.adapter.setMenuAnchorElement(t),this.adapter.setMenuAnchorCorner(r.BOTTOM_START)),this.adapter.setMenuWrapFocus(!1),this.setDisabled(this.adapter.hasClass(rt.DISABLED)),this.syncHelperTextValidity(!this.adapter.hasClass(rt.INVALID)),this.layout(),this.layoutOptions()},e.prototype.blur=function(){this.adapter.removeClass(rt.FOCUSED),this.layout(),this.adapter.deactivateBottomLine(),this.adapter.hasClass(rt.REQUIRED)&&this.useDefaultValidation&&this.setValid(this.isValid())},e.prototype.syncHelperTextValidity=function(t){if(this.helperText){this.helperText.setValidity(t);var e=this.helperText.isVisible(),n=this.helperText.getId();e&&n?this.adapter.setSelectAnchorAttr(ot.ARIA_DESCRIBEDBY,n):this.adapter.removeSelectAnchorAttr(ot.ARIA_DESCRIBEDBY)}},e.prototype.setClickDebounceTimeout=function(){var t=this;clearTimeout(this.clickDebounceTimeout),this.clickDebounceTimeout=setTimeout((function(){t.recentlyClicked=!1}),at.CLICK_DEBOUNCE_TIMEOUT_MS),this.recentlyClicked=!0},e}(C.K),ut={ARIA_HIDDEN:"aria-hidden",ROLE:"role"},ct={HELPER_TEXT_VALIDATION_MSG:"mdc-select-helper-text--validation-msg",HELPER_TEXT_VALIDATION_MSG_PERSISTENT:"mdc-select-helper-text--validation-msg-persistent"},lt=function(t){function e(n){return t.call(this,(0,o.pi)((0,o.pi)({},e.defaultAdapter),n))||this}return(0,o.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return ct},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return ut},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},setAttr:function(){},getAttr:function(){return null},removeAttr:function(){},setContent:function(){}}},enumerable:!1,configurable:!0}),e.prototype.getId=function(){return this.adapter.getAttr("id")},e.prototype.isVisible=function(){return"true"!==this.adapter.getAttr(ut.ARIA_HIDDEN)},e.prototype.setContent=function(t){this.adapter.setContent(t)},e.prototype.setValidation=function(t){t?this.adapter.addClass(ct.HELPER_TEXT_VALIDATION_MSG):this.adapter.removeClass(ct.HELPER_TEXT_VALIDATION_MSG)},e.prototype.setValidationMsgPersistent=function(t){t?this.adapter.addClass(ct.HELPER_TEXT_VALIDATION_MSG_PERSISTENT):this.adapter.removeClass(ct.HELPER_TEXT_VALIDATION_MSG_PERSISTENT)},e.prototype.setValidity=function(t){if(this.adapter.hasClass(ct.HELPER_TEXT_VALIDATION_MSG)){var e=this.adapter.hasClass(ct.HELPER_TEXT_VALIDATION_MSG_PERSISTENT);if(!t||e)return this.showToScreenReader(),void(t?this.adapter.removeAttr(ut.ROLE):this.adapter.setAttr(ut.ROLE,"alert"));this.adapter.removeAttr(ut.ROLE),this.hide()}},e.prototype.showToScreenReader=function(){this.adapter.removeAttr(ut.ARIA_HIDDEN)},e.prototype.hide=function(){this.adapter.setAttr(ut.ARIA_HIDDEN,"true")},e}(C.K),dt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,o.ZT)(e,t),e.attachTo=function(t){return new e(t)},Object.defineProperty(e.prototype,"foundationForSelect",{get:function(){return this.foundation},enumerable:!1,configurable:!0}),e.prototype.getDefaultFoundation=function(){var t=this;return new lt({addClass:function(e){return t.root.classList.add(e)},removeClass:function(e){return t.root.classList.remove(e)},hasClass:function(e){return t.root.classList.contains(e)},getAttr:function(e){return t.root.getAttribute(e)},setAttr:function(e,n){return t.root.setAttribute(e,n)},removeAttr:function(e){return t.root.removeAttribute(e)},setContent:function(e){t.root.textContent=e}})},e}(a.B),pt={ICON_EVENT:"MDCSelect:icon",ICON_ROLE:"button"},ht=["click","keydown"],ft=function(t){function e(n){var i=t.call(this,(0,o.pi)((0,o.pi)({},e.defaultAdapter),n))||this;return i.savedTabIndex=null,i.interactionHandler=function(t){i.handleInteraction(t)},i}return(0,o.ZT)(e,t),Object.defineProperty(e,"strings",{get:function(){return pt},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{getAttr:function(){return null},setAttr:function(){},removeAttr:function(){},setContent:function(){},registerInteractionHandler:function(){},deregisterInteractionHandler:function(){},notifyIconAction:function(){}}},enumerable:!1,configurable:!0}),e.prototype.init=function(){var t,e;this.savedTabIndex=this.adapter.getAttr("tabindex");try{for(var n=(0,o.XA)(ht),i=n.next();!i.done;i=n.next()){var r=i.value;this.adapter.registerInteractionHandler(r,this.interactionHandler)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}},e.prototype.destroy=function(){var t,e;try{for(var n=(0,o.XA)(ht),i=n.next();!i.done;i=n.next()){var r=i.value;this.adapter.deregisterInteractionHandler(r,this.interactionHandler)}}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}},e.prototype.setDisabled=function(t){this.savedTabIndex&&(t?(this.adapter.setAttr("tabindex","-1"),this.adapter.removeAttr("role")):(this.adapter.setAttr("tabindex",this.savedTabIndex),this.adapter.setAttr("role",pt.ICON_ROLE)))},e.prototype.setAriaLabel=function(t){this.adapter.setAttr("aria-label",t)},e.prototype.setContent=function(t){this.adapter.setContent(t)},e.prototype.handleInteraction=function(t){var e="Enter"===t.key||13===t.keyCode;("click"===t.type||e)&&this.adapter.notifyIconAction()},e}(C.K),mt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,o.ZT)(e,t),e.attachTo=function(t){return new e(t)},Object.defineProperty(e.prototype,"foundationForSelect",{get:function(){return this.foundation},enumerable:!1,configurable:!0}),e.prototype.getDefaultFoundation=function(){var t=this;return new ft({getAttr:function(e){return t.root.getAttribute(e)},setAttr:function(e,n){return t.root.setAttribute(e,n)},removeAttr:function(e){return t.root.removeAttribute(e)},setContent:function(e){t.root.textContent=e},registerInteractionHandler:function(e,n){return t.listen(e,n)},deregisterInteractionHandler:function(e,n){return t.unlisten(e,n)},notifyIconAction:function(){return t.emit(ft.strings.ICON_EVENT,{},!0)}})},e}(a.B),vt=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,o.ZT)(e,t),e.attachTo=function(t){return new e(t)},e.prototype.initialize=function(t,e,n,i,r,o){if(void 0===t&&(t=function(t){return new s.g(t)}),void 0===e&&(e=function(t){return new u.k(t)}),void 0===n&&(n=function(t){return new et.A(t)}),void 0===i&&(i=function(t){return new tt(t)}),void 0===r&&(r=function(t){return new mt(t)}),void 0===o&&(o=function(t){return new dt(t)}),this.selectAnchor=this.root.querySelector(ot.SELECT_ANCHOR_SELECTOR),this.selectedText=this.root.querySelector(ot.SELECTED_TEXT_SELECTOR),this.hiddenInput=this.root.querySelector(ot.HIDDEN_INPUT_SELECTOR),!this.selectedText)throw new Error("MDCSelect: Missing required element: The following selector must be present: '"+ot.SELECTED_TEXT_SELECTOR+"'");if(this.selectAnchor.hasAttribute(ot.ARIA_CONTROLS)){var a=document.getElementById(this.selectAnchor.getAttribute(ot.ARIA_CONTROLS));a&&(this.helperText=o(a))}this.menuSetup(i);var c=this.root.querySelector(ot.LABEL_SELECTOR);this.label=c?t(c):null;var l=this.root.querySelector(ot.LINE_RIPPLE_SELECTOR);this.lineRipple=l?e(l):null;var d=this.root.querySelector(ot.OUTLINE_SELECTOR);this.outline=d?n(d):null;var p=this.root.querySelector(ot.LEADING_ICON_SELECTOR);p&&(this.leadingIcon=r(p)),this.root.classList.contains(rt.OUTLINED)||(this.ripple=this.createRipple())},e.prototype.initialSyncWithDOM=function(){var t=this;if(this.handleFocus=function(){t.foundation.handleFocus()},this.handleBlur=function(){t.foundation.handleBlur()},this.handleClick=function(e){t.selectAnchor.focus(),t.foundation.handleClick(t.getNormalizedXCoordinate(e))},this.handleKeydown=function(e){t.foundation.handleKeydown(e)},this.handleMenuItemAction=function(e){t.foundation.handleMenuItemAction(e.detail.index)},this.handleMenuOpened=function(){t.foundation.handleMenuOpened()},this.handleMenuClosed=function(){t.foundation.handleMenuClosed()},this.handleMenuClosing=function(){t.foundation.handleMenuClosing()},this.selectAnchor.addEventListener("focus",this.handleFocus),this.selectAnchor.addEventListener("blur",this.handleBlur),this.selectAnchor.addEventListener("click",this.handleClick),this.selectAnchor.addEventListener("keydown",this.handleKeydown),this.menu.listen(l.CLOSED_EVENT,this.handleMenuClosed),this.menu.listen(l.CLOSING_EVENT,this.handleMenuClosing),this.menu.listen(l.OPENED_EVENT,this.handleMenuOpened),this.menu.listen(Y.SELECTED_EVENT,this.handleMenuItemAction),this.hiddenInput){if(this.hiddenInput.value)return this.foundation.setValue(this.hiddenInput.value,!0),void this.foundation.layout();this.hiddenInput.value=this.value}},e.prototype.destroy=function(){this.selectAnchor.removeEventListener("focus",this.handleFocus),this.selectAnchor.removeEventListener("blur",this.handleBlur),this.selectAnchor.removeEventListener("keydown",this.handleKeydown),this.selectAnchor.removeEventListener("click",this.handleClick),this.menu.unlisten(l.CLOSED_EVENT,this.handleMenuClosed),this.menu.unlisten(l.OPENED_EVENT,this.handleMenuOpened),this.menu.unlisten(Y.SELECTED_EVENT,this.handleMenuItemAction),this.menu.destroy(),this.ripple&&this.ripple.destroy(),this.outline&&this.outline.destroy(),this.leadingIcon&&this.leadingIcon.destroy(),this.helperText&&this.helperText.destroy(),t.prototype.destroy.call(this)},Object.defineProperty(e.prototype,"value",{get:function(){return this.foundation.getValue()},set:function(t){this.foundation.setValue(t)},enumerable:!1,configurable:!0}),e.prototype.setValue=function(t,e){void 0===e&&(e=!1),this.foundation.setValue(t,e)},Object.defineProperty(e.prototype,"selectedIndex",{get:function(){return this.foundation.getSelectedIndex()},set:function(t){this.foundation.setSelectedIndex(t,!0)},enumerable:!1,configurable:!0}),e.prototype.setSelectedIndex=function(t,e){void 0===e&&(e=!1),this.foundation.setSelectedIndex(t,!0,e)},Object.defineProperty(e.prototype,"disabled",{get:function(){return this.foundation.getDisabled()},set:function(t){this.foundation.setDisabled(t),this.hiddenInput&&(this.hiddenInput.disabled=t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"leadingIconAriaLabel",{set:function(t){this.foundation.setLeadingIconAriaLabel(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"leadingIconContent",{set:function(t){this.foundation.setLeadingIconContent(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"helperTextContent",{set:function(t){this.foundation.setHelperTextContent(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"useDefaultValidation",{set:function(t){this.foundation.setUseDefaultValidation(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valid",{get:function(){return this.foundation.isValid()},set:function(t){this.foundation.setValid(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"required",{get:function(){return this.foundation.getRequired()},set:function(t){this.foundation.setRequired(t)},enumerable:!1,configurable:!0}),e.prototype.layout=function(){this.foundation.layout()},e.prototype.layoutOptions=function(){this.foundation.layoutOptions(),this.menu.layout(),this.menuItemValues=this.menu.items.map((function(t){return t.getAttribute(ot.VALUE_ATTR)||""})),this.hiddenInput&&(this.hiddenInput.value=this.value)},e.prototype.getDefaultFoundation=function(){var t=(0,o.pi)((0,o.pi)((0,o.pi)((0,o.pi)({},this.getSelectAdapterMethods()),this.getCommonAdapterMethods()),this.getOutlineAdapterMethods()),this.getLabelAdapterMethods());return new st(t,this.getFoundationMap())},e.prototype.menuSetup=function(t){this.menuElement=this.root.querySelector(ot.MENU_SELECTOR),this.menu=t(this.menuElement),this.menu.hasTypeahead=!0,this.menu.singleSelection=!0,this.menuItemValues=this.menu.items.map((function(t){return t.getAttribute(ot.VALUE_ATTR)||""}))},e.prototype.createRipple=function(){var t=this,e=(0,o.pi)((0,o.pi)({},nt.F.createAdapter({root:this.selectAnchor})),{registerInteractionHandler:function(e,n){t.selectAnchor.addEventListener(e,n)},deregisterInteractionHandler:function(e,n){t.selectAnchor.removeEventListener(e,n)}});return new nt.F(this.selectAnchor,new it.l(e))},e.prototype.getSelectAdapterMethods=function(){var t=this;return{getMenuItemAttr:function(t,e){return t.getAttribute(e)},setSelectedText:function(e){t.selectedText.textContent=e},isSelectAnchorFocused:function(){return document.activeElement===t.selectAnchor},getSelectAnchorAttr:function(e){return t.selectAnchor.getAttribute(e)},setSelectAnchorAttr:function(e,n){t.selectAnchor.setAttribute(e,n)},removeSelectAnchorAttr:function(e){t.selectAnchor.removeAttribute(e)},addMenuClass:function(e){t.menuElement.classList.add(e)},removeMenuClass:function(e){t.menuElement.classList.remove(e)},openMenu:function(){t.menu.open=!0},closeMenu:function(){t.menu.open=!1},getAnchorElement:function(){return t.root.querySelector(ot.SELECT_ANCHOR_SELECTOR)},setMenuAnchorElement:function(e){t.menu.setAnchorElement(e)},setMenuAnchorCorner:function(e){t.menu.setAnchorCorner(e)},setMenuWrapFocus:function(e){t.menu.wrapFocus=e},getSelectedIndex:function(){var e=t.menu.selectedIndex;return e instanceof Array?e[0]:e},setSelectedIndex:function(e){t.menu.selectedIndex=e},focusMenuItemAtIndex:function(e){t.menu.items[e].focus()},getMenuItemCount:function(){return t.menu.items.length},getMenuItemValues:function(){return t.menuItemValues},getMenuItemTextAtIndex:function(e){return t.menu.getPrimaryTextAtIndex(e)},isTypeaheadInProgress:function(){return t.menu.typeaheadInProgress},typeaheadMatchItem:function(e,n){return t.menu.typeaheadMatchItem(e,n)}}},e.prototype.getCommonAdapterMethods=function(){var t=this;return{addClass:function(e){t.root.classList.add(e)},removeClass:function(e){t.root.classList.remove(e)},hasClass:function(e){return t.root.classList.contains(e)},setRippleCenter:function(e){t.lineRipple&&t.lineRipple.setRippleCenter(e)},activateBottomLine:function(){t.lineRipple&&t.lineRipple.activate()},deactivateBottomLine:function(){t.lineRipple&&t.lineRipple.deactivate()},notifyChange:function(e){t.hiddenInput&&(t.hiddenInput.value=e);var n=t.selectedIndex;t.emit(ot.CHANGE_EVENT,{value:e,index:n},!0)}}},e.prototype.getOutlineAdapterMethods=function(){var t=this;return{hasOutline:function(){return Boolean(t.outline)},notchOutline:function(e){t.outline&&t.outline.notch(e)},closeOutline:function(){t.outline&&t.outline.closeNotch()}}},e.prototype.getLabelAdapterMethods=function(){var t=this;return{hasLabel:function(){return!!t.label},floatLabel:function(e){t.label&&t.label.float(e)},getLabelWidth:function(){return t.label?t.label.getWidth():0},setLabelRequired:function(e){t.label&&t.label.setRequired(e)}}},e.prototype.getNormalizedXCoordinate=function(t){var e=t.target.getBoundingClientRect();return(this.isTouchEvent(t)?t.touches[0].clientX:t.clientX)-e.left},e.prototype.isTouchEvent=function(t){return Boolean(t.touches)},e.prototype.getFoundationMap=function(){return{helperText:this.helperText?this.helperText.foundationForSelect:void 0,leadingIcon:this.leadingIcon?this.leadingIcon.foundationForSelect:void 0}},e}(a.B)},1567:(t,e,n)=>{"use strict";n.d(e,{CT:()=>p});var i,r,o=n(655),a=n(5179),s=n(1661),u=n(6725);!function(t){t.PROCESSING="mdc-switch--processing",t.SELECTED="mdc-switch--selected",t.UNSELECTED="mdc-switch--unselected"}(i||(i={})),function(t){t.RIPPLE=".mdc-switch__ripple"}(r||(r={}));var c=n(6308);var l=new WeakMap;var d=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,o.ZT)(e,t),e.prototype.init=function(){t.prototype.init.call(this),this.observe(this.adapter.state,{disabled:this.onDisabledChange,processing:this.onProcessingChange,selected:this.onSelectedChange})},e.prototype.initFromDOM=function(){this.setObserversEnabled(this.adapter.state,!1),this.adapter.state.selected=this.adapter.hasClass(i.SELECTED),this.onSelectedChange(),this.adapter.state.disabled=this.adapter.isDisabled(),this.adapter.state.processing=this.adapter.hasClass(i.PROCESSING),this.setObserversEnabled(this.adapter.state,!0),this.stopProcessingIfDisabled()},e.prototype.onDisabledChange=function(){this.adapter.setDisabled(this.adapter.state.disabled)},e.prototype.onProcessingChange=function(){this.toggleClass(this.adapter.state.processing,i.PROCESSING)},e.prototype.onSelectedChange=function(){this.adapter.setAriaChecked(String(this.adapter.state.selected)),this.toggleClass(this.adapter.state.selected,i.SELECTED),this.toggleClass(!this.adapter.state.selected,i.UNSELECTED)},e.prototype.toggleClass=function(t,e){t?this.adapter.addClass(e):this.adapter.removeClass(e)},e}(function(t){function e(e){var n=t.call(this,e)||this;return n.handleClick=n.handleClick.bind(n),n}return(0,o.ZT)(e,t),e.prototype.init=function(){this.observe(this.adapter.state,{disabled:this.stopProcessingIfDisabled,processing:this.stopProcessingIfDisabled})},e.prototype.handleClick=function(){this.adapter.state.disabled||(this.adapter.state.selected=!this.adapter.state.selected)},e.prototype.stopProcessingIfDisabled=function(){this.adapter.state.disabled&&(this.adapter.state.processing=!1)},e}(function(t){function e(e){var n=t.call(this,e)||this;return n.unobserves=new Set,n}return(0,o.ZT)(e,t),e.prototype.destroy=function(){t.prototype.destroy.call(this),this.unobserve()},e.prototype.observe=function(t,e){var n,i,r=this,a=[];try{for(var s=(0,o.XA)(Object.keys(e)),u=s.next();!u.done;u=s.next()){var c=u.value,l=e[c].bind(this);a.push(this.observeProperty(t,c,l))}}catch(t){n={error:t}}finally{try{u&&!u.done&&(i=s.return)&&i.call(s)}finally{if(n)throw n.error}}var d=function(){var t,e;try{for(var n=(0,o.XA)(a),i=n.next();!i.done;i=n.next())(0,i.value)()}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}r.unobserves.delete(d)};return this.unobserves.add(d),d},e.prototype.observeProperty=function(t,e,n){return function(t,e,n){var i=function(t,e){var n=new Map;l.has(t)||l.set(t,{isEnabled:!0,getObservers:function(t){var e=n.get(t)||[];return n.has(t)||n.set(t,e),e},installedProperties:new Set});var i=l.get(t);if(i.installedProperties.has(e))return i;var r=function(t,e){for(var n,i=t;i&&!(n=Object.getOwnPropertyDescriptor(i,e));)i=Object.getPrototypeOf(i);return n}(t,e)||{configurable:!0,enumerable:!0,value:t[e],writable:!0},a=(0,o.pi)({},r),s=r.get,u=r.set;if("value"in r){delete a.value,delete a.writable;var c=r.value;s=function(){return c},r.writable&&(u=function(t){c=t})}return s&&(a.get=function(){return s.call(this)}),u&&(a.set=function(t){var n,r,a=s?s.call(this):t;if(u.call(this,t),i.isEnabled&&(!s||t!==a))try{for(var c=(0,o.XA)(i.getObservers(e)),l=c.next();!l.done;l=c.next())(0,l.value)(t,a)}catch(t){n={error:t}}finally{try{l&&!l.done&&(r=c.return)&&r.call(c)}finally{if(n)throw n.error}}}),i.installedProperties.add(e),Object.defineProperty(t,e,a),i}(t,e).getObservers(e);return i.push(n),function(){i.splice(i.indexOf(n),1)}}(t,e,n)},e.prototype.setObserversEnabled=function(t,e){!function(t,e){var n=l.get(t);n&&(n.isEnabled=e)}(t,e)},e.prototype.unobserve=function(){var t,e;try{for(var n=(0,o.XA)((0,o.ev)([],(0,o.CR)(this.unobserves))),i=n.next();!i.done;i=n.next())(0,i.value)()}catch(e){t={error:e}}finally{try{i&&!i.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}},e}(c.K))),p=function(t){function e(e,n){var i=t.call(this,e,n)||this;return i.root=e,i}return(0,o.ZT)(e,t),e.attachTo=function(t){return new e(t)},e.prototype.initialize=function(){this.ripple=new s.F(this.root,this.createRippleFoundation())},e.prototype.initialSyncWithDOM=function(){var t=this.root.querySelector(r.RIPPLE);if(!t)throw new Error("Switch "+r.RIPPLE+" element is required.");this.rippleElement=t,this.root.addEventListener("click",this.foundation.handleClick),this.foundation.initFromDOM()},e.prototype.destroy=function(){t.prototype.destroy.call(this),this.ripple.destroy(),this.root.removeEventListener("click",this.foundation.handleClick)},e.prototype.getDefaultFoundation=function(){return new d(this.createAdapter())},e.prototype.createAdapter=function(){var t=this;return{addClass:function(e){t.root.classList.add(e)},hasClass:function(e){return t.root.classList.contains(e)},isDisabled:function(){return t.root.disabled},removeClass:function(e){t.root.classList.remove(e)},setAriaChecked:function(e){return t.root.setAttribute("aria-checked",e)},setDisabled:function(e){t.root.disabled=e},state:this}},e.prototype.createRippleFoundation=function(){return new u.l(this.createRippleAdapter())},e.prototype.createRippleAdapter=function(){var t=this;return(0,o.pi)((0,o.pi)({},s.F.createAdapter(this)),{computeBoundingRect:function(){return t.rippleElement.getBoundingClientRect()},isUnbounded:function(){return!0}})},e}(a.B)},284:(t,e,n)=>{"use strict";n.d(e,{KX:()=>R});var i=n(655),r=n(5179),o=n(9397),a=n(2851),s=n(7706),u=n(8323),c=n(9966),l=n(1661),d=n(6725),p=n(6308),h={ROOT:"mdc-text-field-character-counter"},f={ROOT_SELECTOR:"."+h.ROOT},m=function(t){function e(n){return t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this}return(0,i.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return h},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return f},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{setContent:function(){}}},enumerable:!1,configurable:!0}),e.prototype.setCounterValue=function(t,e){t=Math.min(t,e),this.adapter.setContent(t+" / "+e)},e}(p.K),v=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.attachTo=function(t){return new e(t)},Object.defineProperty(e.prototype,"foundationForTextField",{get:function(){return this.foundation},enumerable:!1,configurable:!0}),e.prototype.getDefaultFoundation=function(){var t=this;return new m({setContent:function(e){t.root.textContent=e}})},e}(r.B),g={ARIA_CONTROLS:"aria-controls",ARIA_DESCRIBEDBY:"aria-describedby",INPUT_SELECTOR:".mdc-text-field__input",LABEL_SELECTOR:".mdc-floating-label",LEADING_ICON_SELECTOR:".mdc-text-field__icon--leading",LINE_RIPPLE_SELECTOR:".mdc-line-ripple",OUTLINE_SELECTOR:".mdc-notched-outline",PREFIX_SELECTOR:".mdc-text-field__affix--prefix",SUFFIX_SELECTOR:".mdc-text-field__affix--suffix",TRAILING_ICON_SELECTOR:".mdc-text-field__icon--trailing"},y={DISABLED:"mdc-text-field--disabled",FOCUSED:"mdc-text-field--focused",HELPER_LINE:"mdc-text-field-helper-line",INVALID:"mdc-text-field--invalid",LABEL_FLOATING:"mdc-text-field--label-floating",NO_LABEL:"mdc-text-field--no-label",OUTLINED:"mdc-text-field--outlined",ROOT:"mdc-text-field",TEXTAREA:"mdc-text-field--textarea",WITH_LEADING_ICON:"mdc-text-field--with-leading-icon",WITH_TRAILING_ICON:"mdc-text-field--with-trailing-icon"},A={LABEL_SCALE:.75},C=["pattern","min","max","required","step","minlength","maxlength"],E=["color","date","datetime-local","month","range","time","week"],b=["mousedown","touchstart"],D=["click","keydown"],I=function(t){function e(n,r){void 0===r&&(r={});var o=t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this;return o.isFocused=!1,o.receivedUserInput=!1,o.valid=!0,o.useNativeValidation=!0,o.validateOnValueChange=!0,o.helperText=r.helperText,o.characterCounter=r.characterCounter,o.leadingIcon=r.leadingIcon,o.trailingIcon=r.trailingIcon,o.inputFocusHandler=function(){o.activateFocus()},o.inputBlurHandler=function(){o.deactivateFocus()},o.inputInputHandler=function(){o.handleInput()},o.setPointerXOffset=function(t){o.setTransformOrigin(t)},o.textFieldInteractionHandler=function(){o.handleTextFieldInteraction()},o.validationAttributeChangeHandler=function(t){o.handleValidationAttributeChange(t)},o}return(0,i.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return y},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return g},enumerable:!1,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return A},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"shouldAlwaysFloat",{get:function(){var t=this.getNativeInput().type;return E.indexOf(t)>=0},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"shouldFloat",{get:function(){return this.shouldAlwaysFloat||this.isFocused||!!this.getValue()||this.isBadInput()},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"shouldShake",{get:function(){return!this.isFocused&&!this.isValid()&&!!this.getValue()},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!0},setInputAttr:function(){},removeInputAttr:function(){},registerTextFieldInteractionHandler:function(){},deregisterTextFieldInteractionHandler:function(){},registerInputInteractionHandler:function(){},deregisterInputInteractionHandler:function(){},registerValidationAttributeChangeHandler:function(){return new MutationObserver((function(){}))},deregisterValidationAttributeChangeHandler:function(){},getNativeInput:function(){return null},isFocused:function(){return!1},activateLineRipple:function(){},deactivateLineRipple:function(){},setLineRippleTransformOrigin:function(){},shakeLabel:function(){},floatLabel:function(){},setLabelRequired:function(){},hasLabel:function(){return!1},getLabelWidth:function(){return 0},hasOutline:function(){return!1},notchOutline:function(){},closeOutline:function(){}}},enumerable:!1,configurable:!0}),e.prototype.init=function(){var t,e,n,r;this.adapter.hasLabel()&&this.getNativeInput().required&&this.adapter.setLabelRequired(!0),this.adapter.isFocused()?this.inputFocusHandler():this.adapter.hasLabel()&&this.shouldFloat&&(this.notchOutline(!0),this.adapter.floatLabel(!0),this.styleFloating(!0)),this.adapter.registerInputInteractionHandler("focus",this.inputFocusHandler),this.adapter.registerInputInteractionHandler("blur",this.inputBlurHandler),this.adapter.registerInputInteractionHandler("input",this.inputInputHandler);try{for(var o=(0,i.XA)(b),a=o.next();!a.done;a=o.next()){var s=a.value;this.adapter.registerInputInteractionHandler(s,this.setPointerXOffset)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}try{for(var u=(0,i.XA)(D),c=u.next();!c.done;c=u.next())s=c.value,this.adapter.registerTextFieldInteractionHandler(s,this.textFieldInteractionHandler)}catch(t){n={error:t}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}this.validationObserver=this.adapter.registerValidationAttributeChangeHandler(this.validationAttributeChangeHandler),this.setcharacterCounter(this.getValue().length)},e.prototype.destroy=function(){var t,e,n,r;this.adapter.deregisterInputInteractionHandler("focus",this.inputFocusHandler),this.adapter.deregisterInputInteractionHandler("blur",this.inputBlurHandler),this.adapter.deregisterInputInteractionHandler("input",this.inputInputHandler);try{for(var o=(0,i.XA)(b),a=o.next();!a.done;a=o.next()){var s=a.value;this.adapter.deregisterInputInteractionHandler(s,this.setPointerXOffset)}}catch(e){t={error:e}}finally{try{a&&!a.done&&(e=o.return)&&e.call(o)}finally{if(t)throw t.error}}try{for(var u=(0,i.XA)(D),c=u.next();!c.done;c=u.next())s=c.value,this.adapter.deregisterTextFieldInteractionHandler(s,this.textFieldInteractionHandler)}catch(t){n={error:t}}finally{try{c&&!c.done&&(r=u.return)&&r.call(u)}finally{if(n)throw n.error}}this.adapter.deregisterValidationAttributeChangeHandler(this.validationObserver)},e.prototype.handleTextFieldInteraction=function(){var t=this.adapter.getNativeInput();t&&t.disabled||(this.receivedUserInput=!0)},e.prototype.handleValidationAttributeChange=function(t){var e=this;t.some((function(t){return C.indexOf(t)>-1&&(e.styleValidity(!0),e.adapter.setLabelRequired(e.getNativeInput().required),!0)})),t.indexOf("maxlength")>-1&&this.setcharacterCounter(this.getValue().length)},e.prototype.notchOutline=function(t){if(this.adapter.hasOutline()&&this.adapter.hasLabel())if(t){var e=this.adapter.getLabelWidth()*A.LABEL_SCALE;this.adapter.notchOutline(e)}else this.adapter.closeOutline()},e.prototype.activateFocus=function(){this.isFocused=!0,this.styleFocused(this.isFocused),this.adapter.activateLineRipple(),this.adapter.hasLabel()&&(this.notchOutline(this.shouldFloat),this.adapter.floatLabel(this.shouldFloat),this.styleFloating(this.shouldFloat),this.adapter.shakeLabel(this.shouldShake)),!this.helperText||!this.helperText.isPersistent()&&this.helperText.isValidation()&&this.valid||this.helperText.showToScreenReader()},e.prototype.setTransformOrigin=function(t){if(!this.isDisabled()&&!this.adapter.hasOutline()){var e=t.touches,n=e?e[0]:t,i=n.target.getBoundingClientRect(),r=n.clientX-i.left;this.adapter.setLineRippleTransformOrigin(r)}},e.prototype.handleInput=function(){this.autoCompleteFocus(),this.setcharacterCounter(this.getValue().length)},e.prototype.autoCompleteFocus=function(){this.receivedUserInput||this.activateFocus()},e.prototype.deactivateFocus=function(){this.isFocused=!1,this.adapter.deactivateLineRipple();var t=this.isValid();this.styleValidity(t),this.styleFocused(this.isFocused),this.adapter.hasLabel()&&(this.notchOutline(this.shouldFloat),this.adapter.floatLabel(this.shouldFloat),this.styleFloating(this.shouldFloat),this.adapter.shakeLabel(this.shouldShake)),this.shouldFloat||(this.receivedUserInput=!1)},e.prototype.getValue=function(){return this.getNativeInput().value},e.prototype.setValue=function(t){if(this.getValue()!==t&&(this.getNativeInput().value=t),this.setcharacterCounter(t.length),this.validateOnValueChange){var e=this.isValid();this.styleValidity(e)}this.adapter.hasLabel()&&(this.notchOutline(this.shouldFloat),this.adapter.floatLabel(this.shouldFloat),this.styleFloating(this.shouldFloat),this.validateOnValueChange&&this.adapter.shakeLabel(this.shouldShake))},e.prototype.isValid=function(){return this.useNativeValidation?this.isNativeInputValid():this.valid},e.prototype.setValid=function(t){this.valid=t,this.styleValidity(t);var e=!t&&!this.isFocused&&!!this.getValue();this.adapter.hasLabel()&&this.adapter.shakeLabel(e)},e.prototype.setValidateOnValueChange=function(t){this.validateOnValueChange=t},e.prototype.getValidateOnValueChange=function(){return this.validateOnValueChange},e.prototype.setUseNativeValidation=function(t){this.useNativeValidation=t},e.prototype.isDisabled=function(){return this.getNativeInput().disabled},e.prototype.setDisabled=function(t){this.getNativeInput().disabled=t,this.styleDisabled(t)},e.prototype.setHelperTextContent=function(t){this.helperText&&this.helperText.setContent(t)},e.prototype.setLeadingIconAriaLabel=function(t){this.leadingIcon&&this.leadingIcon.setAriaLabel(t)},e.prototype.setLeadingIconContent=function(t){this.leadingIcon&&this.leadingIcon.setContent(t)},e.prototype.setTrailingIconAriaLabel=function(t){this.trailingIcon&&this.trailingIcon.setAriaLabel(t)},e.prototype.setTrailingIconContent=function(t){this.trailingIcon&&this.trailingIcon.setContent(t)},e.prototype.setcharacterCounter=function(t){if(this.characterCounter){var e=this.getNativeInput().maxLength;if(-1===e)throw new Error("MDCTextFieldFoundation: Expected maxlength html property on text input or textarea.");this.characterCounter.setCounterValue(t,e)}},e.prototype.isBadInput=function(){return this.getNativeInput().validity.badInput||!1},e.prototype.isNativeInputValid=function(){return this.getNativeInput().validity.valid},e.prototype.styleValidity=function(t){var n=e.cssClasses.INVALID;if(t?this.adapter.removeClass(n):this.adapter.addClass(n),this.helperText){if(this.helperText.setValidity(t),!this.helperText.isValidation())return;var i=this.helperText.isVisible(),r=this.helperText.getId();i&&r?this.adapter.setInputAttr(g.ARIA_DESCRIBEDBY,r):this.adapter.removeInputAttr(g.ARIA_DESCRIBEDBY)}},e.prototype.styleFocused=function(t){var n=e.cssClasses.FOCUSED;t?this.adapter.addClass(n):this.adapter.removeClass(n)},e.prototype.styleDisabled=function(t){var n=e.cssClasses,i=n.DISABLED,r=n.INVALID;t?(this.adapter.addClass(i),this.adapter.removeClass(r)):this.adapter.removeClass(i),this.leadingIcon&&this.leadingIcon.setDisabled(t),this.trailingIcon&&this.trailingIcon.setDisabled(t)},e.prototype.styleFloating=function(t){var n=e.cssClasses.LABEL_FLOATING;t?this.adapter.addClass(n):this.adapter.removeClass(n)},e.prototype.getNativeInput=function(){return(this.adapter?this.adapter.getNativeInput():null)||{disabled:!1,maxLength:-1,required:!1,type:"input",validity:{badInput:!1,valid:!0},value:""}},e}(p.K),_={HELPER_TEXT_PERSISTENT:"mdc-text-field-helper-text--persistent",HELPER_TEXT_VALIDATION_MSG:"mdc-text-field-helper-text--validation-msg",ROOT:"mdc-text-field-helper-text"},T={ARIA_HIDDEN:"aria-hidden",ROLE:"role",ROOT_SELECTOR:"."+_.ROOT},S=function(t){function e(n){return t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this}return(0,i.ZT)(e,t),Object.defineProperty(e,"cssClasses",{get:function(){return _},enumerable:!1,configurable:!0}),Object.defineProperty(e,"strings",{get:function(){return T},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},getAttr:function(){return null},setAttr:function(){},removeAttr:function(){},setContent:function(){}}},enumerable:!1,configurable:!0}),e.prototype.getId=function(){return this.adapter.getAttr("id")},e.prototype.isVisible=function(){return"true"!==this.adapter.getAttr(T.ARIA_HIDDEN)},e.prototype.setContent=function(t){this.adapter.setContent(t)},e.prototype.isPersistent=function(){return this.adapter.hasClass(_.HELPER_TEXT_PERSISTENT)},e.prototype.setPersistent=function(t){t?this.adapter.addClass(_.HELPER_TEXT_PERSISTENT):this.adapter.removeClass(_.HELPER_TEXT_PERSISTENT)},e.prototype.isValidation=function(){return this.adapter.hasClass(_.HELPER_TEXT_VALIDATION_MSG)},e.prototype.setValidation=function(t){t?this.adapter.addClass(_.HELPER_TEXT_VALIDATION_MSG):this.adapter.removeClass(_.HELPER_TEXT_VALIDATION_MSG)},e.prototype.showToScreenReader=function(){this.adapter.removeAttr(T.ARIA_HIDDEN)},e.prototype.setValidity=function(t){var e=this.adapter.hasClass(_.HELPER_TEXT_PERSISTENT),n=this.adapter.hasClass(_.HELPER_TEXT_VALIDATION_MSG)&&!t;n?(this.showToScreenReader(),"alert"===this.adapter.getAttr(T.ROLE)?this.refreshAlertRole():this.adapter.setAttr(T.ROLE,"alert")):this.adapter.removeAttr(T.ROLE),e||n||this.hide()},e.prototype.hide=function(){this.adapter.setAttr(T.ARIA_HIDDEN,"true")},e.prototype.refreshAlertRole=function(){var t=this;this.adapter.removeAttr(T.ROLE),requestAnimationFrame((function(){t.adapter.setAttr(T.ROLE,"alert")}))},e}(p.K),x=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.attachTo=function(t){return new e(t)},Object.defineProperty(e.prototype,"foundationForTextField",{get:function(){return this.foundation},enumerable:!1,configurable:!0}),e.prototype.getDefaultFoundation=function(){var t=this;return new S({addClass:function(e){return t.root.classList.add(e)},removeClass:function(e){return t.root.classList.remove(e)},hasClass:function(e){return t.root.classList.contains(e)},getAttr:function(e){return t.root.getAttribute(e)},setAttr:function(e,n){return t.root.setAttribute(e,n)},removeAttr:function(e){return t.root.removeAttribute(e)},setContent:function(e){t.root.textContent=e}})},e}(r.B),O={ICON_EVENT:"MDCTextField:icon",ICON_ROLE:"button"},w={ROOT:"mdc-text-field__icon"},L=["click","keydown"],k=function(t){function e(n){var r=t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this;return r.savedTabIndex=null,r.interactionHandler=function(t){r.handleInteraction(t)},r}return(0,i.ZT)(e,t),Object.defineProperty(e,"strings",{get:function(){return O},enumerable:!1,configurable:!0}),Object.defineProperty(e,"cssClasses",{get:function(){return w},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{getAttr:function(){return null},setAttr:function(){},removeAttr:function(){},setContent:function(){},registerInteractionHandler:function(){},deregisterInteractionHandler:function(){},notifyIconAction:function(){}}},enumerable:!1,configurable:!0}),e.prototype.init=function(){var t,e;this.savedTabIndex=this.adapter.getAttr("tabindex");try{for(var n=(0,i.XA)(L),r=n.next();!r.done;r=n.next()){var o=r.value;this.adapter.registerInteractionHandler(o,this.interactionHandler)}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}},e.prototype.destroy=function(){var t,e;try{for(var n=(0,i.XA)(L),r=n.next();!r.done;r=n.next()){var o=r.value;this.adapter.deregisterInteractionHandler(o,this.interactionHandler)}}catch(e){t={error:e}}finally{try{r&&!r.done&&(e=n.return)&&e.call(n)}finally{if(t)throw t.error}}},e.prototype.setDisabled=function(t){this.savedTabIndex&&(t?(this.adapter.setAttr("tabindex","-1"),this.adapter.removeAttr("role")):(this.adapter.setAttr("tabindex",this.savedTabIndex),this.adapter.setAttr("role",O.ICON_ROLE)))},e.prototype.setAriaLabel=function(t){this.adapter.setAttr("aria-label",t)},e.prototype.setContent=function(t){this.adapter.setContent(t)},e.prototype.handleInteraction=function(t){var e="Enter"===t.key||13===t.keyCode;("click"===t.type||e)&&(t.preventDefault(),this.adapter.notifyIconAction())},e}(p.K),F=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.attachTo=function(t){return new e(t)},Object.defineProperty(e.prototype,"foundationForTextField",{get:function(){return this.foundation},enumerable:!1,configurable:!0}),e.prototype.getDefaultFoundation=function(){var t=this;return new k({getAttr:function(e){return t.root.getAttribute(e)},setAttr:function(e,n){return t.root.setAttribute(e,n)},removeAttr:function(e){return t.root.removeAttribute(e)},setContent:function(e){t.root.textContent=e},registerInteractionHandler:function(e,n){return t.listen(e,n)},deregisterInteractionHandler:function(e,n){return t.unlisten(e,n)},notifyIconAction:function(){return t.emit(k.strings.ICON_EVENT,{},!0)}})},e}(r.B),R=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.attachTo=function(t){return new e(t)},e.prototype.initialize=function(t,e,n,i,r,o,a){void 0===t&&(t=function(t,e){return new l.F(t,e)}),void 0===e&&(e=function(t){return new u.k(t)}),void 0===n&&(n=function(t){return new x(t)}),void 0===i&&(i=function(t){return new v(t)}),void 0===r&&(r=function(t){return new F(t)}),void 0===o&&(o=function(t){return new s.g(t)}),void 0===a&&(a=function(t){return new c.A(t)}),this.input=this.root.querySelector(g.INPUT_SELECTOR);var d=this.root.querySelector(g.LABEL_SELECTOR);this.label=d?o(d):null;var p=this.root.querySelector(g.LINE_RIPPLE_SELECTOR);this.lineRipple=p?e(p):null;var h=this.root.querySelector(g.OUTLINE_SELECTOR);this.outline=h?a(h):null;var f=S.strings,A=this.root.nextElementSibling,C=A&&A.classList.contains(y.HELPER_LINE),E=C&&A&&A.querySelector(f.ROOT_SELECTOR);this.helperText=E?n(E):null;var b=m.strings,D=this.root.querySelector(b.ROOT_SELECTOR);!D&&C&&A&&(D=A.querySelector(b.ROOT_SELECTOR)),this.characterCounter=D?i(D):null;var I=this.root.querySelector(g.LEADING_ICON_SELECTOR);this.leadingIcon=I?r(I):null;var _=this.root.querySelector(g.TRAILING_ICON_SELECTOR);this.trailingIcon=_?r(_):null,this.prefix=this.root.querySelector(g.PREFIX_SELECTOR),this.suffix=this.root.querySelector(g.SUFFIX_SELECTOR),this.ripple=this.createRipple(t)},e.prototype.destroy=function(){this.ripple&&this.ripple.destroy(),this.lineRipple&&this.lineRipple.destroy(),this.helperText&&this.helperText.destroy(),this.characterCounter&&this.characterCounter.destroy(),this.leadingIcon&&this.leadingIcon.destroy(),this.trailingIcon&&this.trailingIcon.destroy(),this.label&&this.label.destroy(),this.outline&&this.outline.destroy(),t.prototype.destroy.call(this)},e.prototype.initialSyncWithDOM=function(){this.disabled=this.input.disabled},Object.defineProperty(e.prototype,"value",{get:function(){return this.foundation.getValue()},set:function(t){this.foundation.setValue(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"disabled",{get:function(){return this.foundation.isDisabled()},set:function(t){this.foundation.setDisabled(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"valid",{get:function(){return this.foundation.isValid()},set:function(t){this.foundation.setValid(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"required",{get:function(){return this.input.required},set:function(t){this.input.required=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"pattern",{get:function(){return this.input.pattern},set:function(t){this.input.pattern=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"minLength",{get:function(){return this.input.minLength},set:function(t){this.input.minLength=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"maxLength",{get:function(){return this.input.maxLength},set:function(t){t<0?this.input.removeAttribute("maxLength"):this.input.maxLength=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"min",{get:function(){return this.input.min},set:function(t){this.input.min=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"max",{get:function(){return this.input.max},set:function(t){this.input.max=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"step",{get:function(){return this.input.step},set:function(t){this.input.step=t},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"helperTextContent",{set:function(t){this.foundation.setHelperTextContent(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"leadingIconAriaLabel",{set:function(t){this.foundation.setLeadingIconAriaLabel(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"leadingIconContent",{set:function(t){this.foundation.setLeadingIconContent(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"trailingIconAriaLabel",{set:function(t){this.foundation.setTrailingIconAriaLabel(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"trailingIconContent",{set:function(t){this.foundation.setTrailingIconContent(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"useNativeValidation",{set:function(t){this.foundation.setUseNativeValidation(t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"prefixText",{get:function(){return this.prefix?this.prefix.textContent:null},set:function(t){this.prefix&&(this.prefix.textContent=t)},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"suffixText",{get:function(){return this.suffix?this.suffix.textContent:null},set:function(t){this.suffix&&(this.suffix.textContent=t)},enumerable:!1,configurable:!0}),e.prototype.focus=function(){this.input.focus()},e.prototype.layout=function(){var t=this.foundation.shouldFloat;this.foundation.notchOutline(t)},e.prototype.getDefaultFoundation=function(){var t=(0,i.pi)((0,i.pi)((0,i.pi)((0,i.pi)((0,i.pi)({},this.getRootAdapterMethods()),this.getInputAdapterMethods()),this.getLabelAdapterMethods()),this.getLineRippleAdapterMethods()),this.getOutlineAdapterMethods());return new I(t,this.getFoundationMap())},e.prototype.getRootAdapterMethods=function(){var t=this;return{addClass:function(e){return t.root.classList.add(e)},removeClass:function(e){return t.root.classList.remove(e)},hasClass:function(e){return t.root.classList.contains(e)},registerTextFieldInteractionHandler:function(e,n){t.listen(e,n)},deregisterTextFieldInteractionHandler:function(e,n){t.unlisten(e,n)},registerValidationAttributeChangeHandler:function(e){var n=new MutationObserver((function(t){return e(function(t){return t.map((function(t){return t.attributeName})).filter((function(t){return t}))}(t))}));return n.observe(t.input,{attributes:!0}),n},deregisterValidationAttributeChangeHandler:function(t){t.disconnect()}}},e.prototype.getInputAdapterMethods=function(){var t=this;return{getNativeInput:function(){return t.input},setInputAttr:function(e,n){t.input.setAttribute(e,n)},removeInputAttr:function(e){t.input.removeAttribute(e)},isFocused:function(){return document.activeElement===t.input},registerInputInteractionHandler:function(e,n){t.input.addEventListener(e,n,(0,o.K)())},deregisterInputInteractionHandler:function(e,n){t.input.removeEventListener(e,n,(0,o.K)())}}},e.prototype.getLabelAdapterMethods=function(){var t=this;return{floatLabel:function(e){t.label&&t.label.float(e)},getLabelWidth:function(){return t.label?t.label.getWidth():0},hasLabel:function(){return Boolean(t.label)},shakeLabel:function(e){t.label&&t.label.shake(e)},setLabelRequired:function(e){t.label&&t.label.setRequired(e)}}},e.prototype.getLineRippleAdapterMethods=function(){var t=this;return{activateLineRipple:function(){t.lineRipple&&t.lineRipple.activate()},deactivateLineRipple:function(){t.lineRipple&&t.lineRipple.deactivate()},setLineRippleTransformOrigin:function(e){t.lineRipple&&t.lineRipple.setRippleCenter(e)}}},e.prototype.getOutlineAdapterMethods=function(){var t=this;return{closeOutline:function(){t.outline&&t.outline.closeNotch()},hasOutline:function(){return Boolean(t.outline)},notchOutline:function(e){t.outline&&t.outline.notch(e)}}},e.prototype.getFoundationMap=function(){return{characterCounter:this.characterCounter?this.characterCounter.foundationForTextField:void 0,helperText:this.helperText?this.helperText.foundationForTextField:void 0,leadingIcon:this.leadingIcon?this.leadingIcon.foundationForTextField:void 0,trailingIcon:this.trailingIcon?this.trailingIcon.foundationForTextField:void 0}},e.prototype.createRipple=function(t){var e=this,n=this.root.classList.contains(y.TEXTAREA),r=this.root.classList.contains(y.OUTLINED);if(n||r)return null;var s=(0,i.pi)((0,i.pi)({},l.F.createAdapter(this)),{isSurfaceActive:function(){return a.wB(e.input,":active")},registerInteractionHandler:function(t,n){e.input.addEventListener(t,n,(0,o.K)())},deregisterInteractionHandler:function(t,n){e.input.removeEventListener(t,n,(0,o.K)())}});return t(this.root,new d.l(s))},e}(r.B)},990:(t,e,n)=>{"use strict";n.d(e,{tn:()=>h});var i=n(655),r=n(5179),o=n(1661),a={FIXED_CLASS:"mdc-top-app-bar--fixed",FIXED_SCROLLED_CLASS:"mdc-top-app-bar--fixed-scrolled",SHORT_CLASS:"mdc-top-app-bar--short",SHORT_COLLAPSED_CLASS:"mdc-top-app-bar--short-collapsed",SHORT_HAS_ACTION_ITEM_CLASS:"mdc-top-app-bar--short-has-action-item"},s={DEBOUNCE_THROTTLE_RESIZE_TIME_MS:100,MAX_TOP_APP_BAR_HEIGHT:128},u={ACTION_ITEM_SELECTOR:".mdc-top-app-bar__action-item",NAVIGATION_EVENT:"MDCTopAppBar:nav",NAVIGATION_ICON_SELECTOR:".mdc-top-app-bar__navigation-icon",ROOT_SELECTOR:".mdc-top-app-bar",TITLE_SELECTOR:".mdc-top-app-bar__title"},c=function(t){function e(n){return t.call(this,(0,i.pi)((0,i.pi)({},e.defaultAdapter),n))||this}return(0,i.ZT)(e,t),Object.defineProperty(e,"strings",{get:function(){return u},enumerable:!1,configurable:!0}),Object.defineProperty(e,"cssClasses",{get:function(){return a},enumerable:!1,configurable:!0}),Object.defineProperty(e,"numbers",{get:function(){return s},enumerable:!1,configurable:!0}),Object.defineProperty(e,"defaultAdapter",{get:function(){return{addClass:function(){},removeClass:function(){},hasClass:function(){return!1},setStyle:function(){},getTopAppBarHeight:function(){return 0},notifyNavigationIconClicked:function(){},getViewportScrollY:function(){return 0},getTotalActionItems:function(){return 0}}},enumerable:!1,configurable:!0}),e.prototype.handleTargetScroll=function(){},e.prototype.handleWindowResize=function(){},e.prototype.handleNavigationClick=function(){this.adapter.notifyNavigationIconClicked()},e}(n(6308).K),l=function(t){function e(e){var n=t.call(this,e)||this;return n.wasDocked=!0,n.isDockedShowing=!0,n.currentAppBarOffsetTop=0,n.isCurrentlyBeingResized=!1,n.resizeThrottleId=0,n.resizeDebounceId=0,n.lastScrollPosition=n.adapter.getViewportScrollY(),n.topAppBarHeight=n.adapter.getTopAppBarHeight(),n}return(0,i.ZT)(e,t),e.prototype.destroy=function(){t.prototype.destroy.call(this),this.adapter.setStyle("top","")},e.prototype.handleTargetScroll=function(){var t=Math.max(this.adapter.getViewportScrollY(),0),e=t-this.lastScrollPosition;this.lastScrollPosition=t,this.isCurrentlyBeingResized||(this.currentAppBarOffsetTop-=e,this.currentAppBarOffsetTop>0?this.currentAppBarOffsetTop=0:Math.abs(this.currentAppBarOffsetTop)>this.topAppBarHeight&&(this.currentAppBarOffsetTop=-this.topAppBarHeight),this.moveTopAppBar())},e.prototype.handleWindowResize=function(){var t=this;this.resizeThrottleId||(this.resizeThrottleId=setTimeout((function(){t.resizeThrottleId=0,t.throttledResizeHandler()}),s.DEBOUNCE_THROTTLE_RESIZE_TIME_MS)),this.isCurrentlyBeingResized=!0,this.resizeDebounceId&&clearTimeout(this.resizeDebounceId),this.resizeDebounceId=setTimeout((function(){t.handleTargetScroll(),t.isCurrentlyBeingResized=!1,t.resizeDebounceId=0}),s.DEBOUNCE_THROTTLE_RESIZE_TIME_MS)},e.prototype.checkForUpdate=function(){var t=-this.topAppBarHeight,e=this.currentAppBarOffsetTop<0,n=this.currentAppBarOffsetTop>t,i=e&&n;if(i)this.wasDocked=!1;else{if(!this.wasDocked)return this.wasDocked=!0,!0;if(this.isDockedShowing!==n)return this.isDockedShowing=n,!0}return i},e.prototype.moveTopAppBar=function(){if(this.checkForUpdate()){var t=this.currentAppBarOffsetTop;Math.abs(t)>=this.topAppBarHeight&&(t=-s.MAX_TOP_APP_BAR_HEIGHT),this.adapter.setStyle("top",t+"px")}},e.prototype.throttledResizeHandler=function(){var t=this.adapter.getTopAppBarHeight();this.topAppBarHeight!==t&&(this.wasDocked=!1,this.currentAppBarOffsetTop-=this.topAppBarHeight-t,this.topAppBarHeight=t),this.handleTargetScroll()},e}(c),d=function(t){function e(){var e=null!==t&&t.apply(this,arguments)||this;return e.wasScrolled=!1,e}return(0,i.ZT)(e,t),e.prototype.handleTargetScroll=function(){this.adapter.getViewportScrollY()<=0?this.wasScrolled&&(this.adapter.removeClass(a.FIXED_SCROLLED_CLASS),this.wasScrolled=!1):this.wasScrolled||(this.adapter.addClass(a.FIXED_SCROLLED_CLASS),this.wasScrolled=!0)},e}(l),p=function(t){function e(e){var n=t.call(this,e)||this;return n.collapsed=!1,n.isAlwaysCollapsed=!1,n}return(0,i.ZT)(e,t),Object.defineProperty(e.prototype,"isCollapsed",{get:function(){return this.collapsed},enumerable:!1,configurable:!0}),e.prototype.init=function(){t.prototype.init.call(this),this.adapter.getTotalActionItems()>0&&this.adapter.addClass(a.SHORT_HAS_ACTION_ITEM_CLASS),this.setAlwaysCollapsed(this.adapter.hasClass(a.SHORT_COLLAPSED_CLASS))},e.prototype.setAlwaysCollapsed=function(t){this.isAlwaysCollapsed=!!t,this.isAlwaysCollapsed?this.collapse():this.maybeCollapseBar()},e.prototype.getAlwaysCollapsed=function(){return this.isAlwaysCollapsed},e.prototype.handleTargetScroll=function(){this.maybeCollapseBar()},e.prototype.maybeCollapseBar=function(){this.isAlwaysCollapsed||(this.adapter.getViewportScrollY()<=0?this.collapsed&&this.uncollapse():this.collapsed||this.collapse())},e.prototype.uncollapse=function(){this.adapter.removeClass(a.SHORT_COLLAPSED_CLASS),this.collapsed=!1},e.prototype.collapse=function(){this.adapter.addClass(a.SHORT_COLLAPSED_CLASS),this.collapsed=!0},e}(c),h=function(t){function e(){return null!==t&&t.apply(this,arguments)||this}return(0,i.ZT)(e,t),e.attachTo=function(t){return new e(t)},e.prototype.initialize=function(t){void 0===t&&(t=function(t){return o.F.attachTo(t)}),this.navIcon=this.root.querySelector(u.NAVIGATION_ICON_SELECTOR);var e=[].slice.call(this.root.querySelectorAll(u.ACTION_ITEM_SELECTOR));this.navIcon&&e.push(this.navIcon),this.iconRipples=e.map((function(e){var n=t(e);return n.unbounded=!0,n})),this.scrollTarget=window},e.prototype.initialSyncWithDOM=function(){this.handleNavigationClick=this.foundation.handleNavigationClick.bind(this.foundation),this.handleWindowResize=this.foundation.handleWindowResize.bind(this.foundation),this.handleTargetScroll=this.foundation.handleTargetScroll.bind(this.foundation),this.scrollTarget.addEventListener("scroll",this.handleTargetScroll),this.navIcon&&this.navIcon.addEventListener("click",this.handleNavigationClick);var t=this.root.classList.contains(a.FIXED_CLASS);this.root.classList.contains(a.SHORT_CLASS)||t||window.addEventListener("resize",this.handleWindowResize)},e.prototype.destroy=function(){var e,n;try{for(var r=(0,i.XA)(this.iconRipples),o=r.next();!o.done;o=r.next())o.value.destroy()}catch(t){e={error:t}}finally{try{o&&!o.done&&(n=r.return)&&n.call(r)}finally{if(e)throw e.error}}this.scrollTarget.removeEventListener("scroll",this.handleTargetScroll),this.navIcon&&this.navIcon.removeEventListener("click",this.handleNavigationClick);var s=this.root.classList.contains(a.FIXED_CLASS);this.root.classList.contains(a.SHORT_CLASS)||s||window.removeEventListener("resize",this.handleWindowResize),t.prototype.destroy.call(this)},e.prototype.setScrollTarget=function(t){this.scrollTarget.removeEventListener("scroll",this.handleTargetScroll),this.scrollTarget=t,this.handleTargetScroll=this.foundation.handleTargetScroll.bind(this.foundation),this.scrollTarget.addEventListener("scroll",this.handleTargetScroll)},e.prototype.getDefaultFoundation=function(){var t=this,e={hasClass:function(e){return t.root.classList.contains(e)},addClass:function(e){return t.root.classList.add(e)},removeClass:function(e){return t.root.classList.remove(e)},setStyle:function(e,n){return t.root.style.setProperty(e,n)},getTopAppBarHeight:function(){return t.root.clientHeight},notifyNavigationIconClicked:function(){return t.emit(u.NAVIGATION_EVENT,{})},getViewportScrollY:function(){var e=t.scrollTarget,n=t.scrollTarget;return void 0!==e.pageYOffset?e.pageYOffset:n.scrollTop},getTotalActionItems:function(){return t.root.querySelectorAll(u.ACTION_ITEM_SELECTOR).length}};return this.root.classList.contains(a.SHORT_CLASS)?new p(e):this.root.classList.contains(a.FIXED_CLASS)?new d(e):new l(e)},e}(r.B)},3010:t=>{function e(t){t=t||{},this.ms=t.min||100,this.max=t.max||1e4,this.factor=t.factor||2,this.jitter=t.jitter>0&&t.jitter<=1?t.jitter:0,this.attempts=0}t.exports=e,e.prototype.duration=function(){var t=this.ms*Math.pow(this.factor,this.attempts++);if(this.jitter){var e=Math.random(),n=Math.floor(e*this.jitter*t);t=0==(1&Math.floor(10*e))?t-n:t+n}return 0|Math.min(t,this.max)},e.prototype.reset=function(){this.attempts=0},e.prototype.setMin=function(t){this.ms=t},e.prototype.setMax=function(t){this.max=t},e.prototype.setJitter=function(t){this.jitter=t}},3704:(t,e)=>{!function(t){"use strict";e.encode=function(e){var n,i=new Uint8Array(e),r=i.length,o="";for(n=0;n<r;n+=3)o+=t[i[n]>>2],o+=t[(3&i[n])<<4|i[n+1]>>4],o+=t[(15&i[n+1])<<2|i[n+2]>>6],o+=t[63&i[n+2]];return r%3==2?o=o.substring(0,o.length-1)+"=":r%3==1&&(o=o.substring(0,o.length-2)+"=="),o},e.decode=function(e){var n,i,r,o,a,s=.75*e.length,u=e.length,c=0;"="===e[e.length-1]&&(s--,"="===e[e.length-2]&&s--);var l=new ArrayBuffer(s),d=new Uint8Array(l);for(n=0;n<u;n+=4)i=t.indexOf(e[n]),r=t.indexOf(e[n+1]),o=t.indexOf(e[n+2]),a=t.indexOf(e[n+3]),d[c++]=i<<2|r>>4,d[c++]=(15&r)<<4|o>>2,d[c++]=(3&o)<<6|63&a;return l}}("ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/")},8767:t=>{function e(t){if(t)return function(t){for(var n in e.prototype)t[n]=e.prototype[n];return t}(t)}t.exports=e,e.prototype.on=e.prototype.addEventListener=function(t,e){return this._callbacks=this._callbacks||{},(this._callbacks["$"+t]=this._callbacks["$"+t]||[]).push(e),this},e.prototype.once=function(t,e){function n(){this.off(t,n),e.apply(this,arguments)}return n.fn=e,this.on(t,n),this},e.prototype.off=e.prototype.removeListener=e.prototype.removeAllListeners=e.prototype.removeEventListener=function(t,e){if(this._callbacks=this._callbacks||{},0==arguments.length)return this._callbacks={},this;var n,i=this._callbacks["$"+t];if(!i)return this;if(1==arguments.length)return delete this._callbacks["$"+t],this;for(var r=0;r<i.length;r++)if((n=i[r])===e||n.fn===e){i.splice(r,1);break}return 0===i.length&&delete this._callbacks["$"+t],this},e.prototype.emit=function(t){this._callbacks=this._callbacks||{};for(var e=new Array(arguments.length-1),n=this._callbacks["$"+t],i=1;i<arguments.length;i++)e[i-1]=arguments[i];if(n){i=0;for(var r=(n=n.slice(0)).length;i<r;++i)n[i].apply(this,e)}return this},e.prototype.listeners=function(t){return this._callbacks=this._callbacks||{},this._callbacks["$"+t]||[]},e.prototype.hasListeners=function(t){return!!this.listeners(t).length}},8607:(t,e,n)=>{"use strict";n.d(e,{Z:()=>w});var i=n(4015),r=n.n(i),o=n(3645),a=n.n(o),s=n(1667),u=n.n(s),c=new URL(n(4354),n.b),l=new URL(n(1837),n.b),d=new URL(n(8050),n.b),p=new URL(n(1997),n.b),h=new URL(n(6744),n.b),f=new URL(n(5132),n.b),m=new URL(n(1186),n.b),v=new URL(n(4458),n.b),g=new URL(n(6024),n.b),y=new URL(n(1397),n.b),A=a()(r()),C=u()(c),E=u()(l),b=u()(d),D=u()(p),I=u()(h),_=u()(f),T=u()(m),S=u()(v),x=u()(g),O=u()(y);A.push([t.id,'@font-face {\n  font-family: "Material Icons";\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url('+C+') format("woff2"), url('+E+') format("woff");\n}\n.material-icons {\n  font-family: "Material Icons";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Icons Outlined";\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url('+b+') format("woff2"), url('+D+') format("woff");\n}\n.material-icons-outlined {\n  font-family: "Material Icons Outlined";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Icons Round";\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url('+I+') format("woff2"), url('+_+') format("woff");\n}\n.material-icons-round {\n  font-family: "Material Icons Round";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Icons Sharp";\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url('+T+') format("woff2"), url('+S+') format("woff");\n}\n.material-icons-sharp {\n  font-family: "Material Icons Sharp";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Icons Two Tone";\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url('+x+') format("woff2"), url('+O+') format("woff");\n}\n.material-icons-two-tone {\n  font-family: "Material Icons Two Tone";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n',"",{version:3,sources:["webpack://./node_modules/material-icons/iconfont/material-icons.css"],names:[],mappings:"AAAA;EACE,6BAA6B;EAC7B,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,oHAA+F;AACjG;AACA;EACE,6BAA6B;EAC7B,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;EACd,mCAAmC;EACnC,kCAAkC;EAClC,kCAAkC;EAClC,6BAA6B;AAC/B;;AAEA;EACE,sCAAsC;EACtC,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,oHAAiH;AACnH;AACA;EACE,sCAAsC;EACtC,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;EACd,mCAAmC;EACnC,kCAAkC;EAClC,kCAAkC;EAClC,6BAA6B;AAC/B;;AAEA;EACE,mCAAmC;EACnC,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,oHAA2G;AAC7G;AACA;EACE,mCAAmC;EACnC,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;EACd,mCAAmC;EACnC,kCAAkC;EAClC,kCAAkC;EAClC,6BAA6B;AAC/B;;AAEA;EACE,mCAAmC;EACnC,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,oHAA2G;AAC7G;AACA;EACE,mCAAmC;EACnC,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;EACd,mCAAmC;EACnC,kCAAkC;EAClC,kCAAkC;EAClC,6BAA6B;AAC/B;;AAEA;EACE,sCAAsC;EACtC,kBAAkB;EAClB,gBAAgB;EAChB,mBAAmB;EACnB,oHAAiH;AACnH;AACA;EACE,sCAAsC;EACtC,mBAAmB;EACnB,kBAAkB;EAClB,eAAe;EACf,cAAc;EACd,sBAAsB;EACtB,oBAAoB;EACpB,qBAAqB;EACrB,mBAAmB;EACnB,iBAAiB;EACjB,cAAc;EACd,mCAAmC;EACnC,kCAAkC;EAClC,kCAAkC;EAClC,6BAA6B;AAC/B",sourcesContent:['@font-face {\n  font-family: "Material Icons";\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url("./material-icons.woff2") format("woff2"), url("./material-icons.woff") format("woff");\n}\n.material-icons {\n  font-family: "Material Icons";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Icons Outlined";\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url("./material-icons-outlined.woff2") format("woff2"), url("./material-icons-outlined.woff") format("woff");\n}\n.material-icons-outlined {\n  font-family: "Material Icons Outlined";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Icons Round";\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url("./material-icons-round.woff2") format("woff2"), url("./material-icons-round.woff") format("woff");\n}\n.material-icons-round {\n  font-family: "Material Icons Round";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Icons Sharp";\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url("./material-icons-sharp.woff2") format("woff2"), url("./material-icons-sharp.woff") format("woff");\n}\n.material-icons-sharp {\n  font-family: "Material Icons Sharp";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n\n@font-face {\n  font-family: "Material Icons Two Tone";\n  font-style: normal;\n  font-weight: 400;\n  font-display: block;\n  src: url("./material-icons-two-tone.woff2") format("woff2"), url("./material-icons-two-tone.woff") format("woff");\n}\n.material-icons-two-tone {\n  font-family: "Material Icons Two Tone";\n  font-weight: normal;\n  font-style: normal;\n  font-size: 24px;\n  line-height: 1;\n  letter-spacing: normal;\n  text-transform: none;\n  display: inline-block;\n  white-space: nowrap;\n  word-wrap: normal;\n  direction: ltr;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-rendering: optimizeLegibility;\n  font-feature-settings: "liga";\n}\n'],sourceRoot:""}]);const w=A},3645:t=>{"use strict";t.exports=function(t){var e=[];return e.toString=function(){return this.map((function(e){var n=t(e);return e[2]?"@media ".concat(e[2]," {").concat(n,"}"):n})).join("")},e.i=function(t,n,i){"string"==typeof t&&(t=[[null,t,""]]);var r={};if(i)for(var o=0;o<this.length;o++){var a=this[o][0];null!=a&&(r[a]=!0)}for(var s=0;s<t.length;s++){var u=[].concat(t[s]);i&&r[u[0]]||(n&&(u[2]?u[2]="".concat(n," and ").concat(u[2]):u[2]=n),e.push(u))}},e}},4015:t=>{"use strict";function e(t,e){(null==e||e>t.length)&&(e=t.length);for(var n=0,i=new Array(e);n<e;n++)i[n]=t[n];return i}t.exports=function(t){var n,i,r=(i=4,function(t){if(Array.isArray(t))return t}(n=t)||function(t,e){var n=null==t?null:"undefined"!=typeof Symbol&&t[Symbol.iterator]||t["@@iterator"];if(null!=n){var i,r,o=[],a=!0,s=!1;try{for(n=n.call(t);!(a=(i=n.next()).done)&&(o.push(i.value),!e||o.length!==e);a=!0);}catch(t){s=!0,r=t}finally{try{a||null==n.return||n.return()}finally{if(s)throw r}}return o}}(n,i)||function(t,n){if(t){if("string"==typeof t)return e(t,n);var i=Object.prototype.toString.call(t).slice(8,-1);return"Object"===i&&t.constructor&&(i=t.constructor.name),"Map"===i||"Set"===i?Array.from(t):"Arguments"===i||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(i)?e(t,n):void 0}}(n,i)||function(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}()),o=r[1],a=r[3];if(!a)return o;if("function"==typeof btoa){var s=btoa(unescape(encodeURIComponent(JSON.stringify(a)))),u="sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(s),c="/*# ".concat(u," */"),l=a.sources.map((function(t){return"/*# sourceURL=".concat(a.sourceRoot||"").concat(t," */")}));return[o].concat(l).concat([c]).join("\n")}return[o].join("\n")}},1667:t=>{"use strict";t.exports=function(t,e){return e||(e={}),t?(t=String(t.__esModule?t.default:t),/^['"].*['"]$/.test(t)&&(t=t.slice(1,-1)),e.hash&&(t+=e.hash),/["'() \t\n]|(%20)/.test(t)||e.needQuotes?'"'.concat(t.replace(/"/g,'\\"').replace(/\n/g,"\\n"),'"'):t):t}},1227:(t,e,n)=>{e.formatArgs=function(e){if(e[0]=(this.useColors?"%c":"")+this.namespace+(this.useColors?" %c":" ")+e[0]+(this.useColors?"%c ":" ")+"+"+t.exports.humanize(this.diff),!this.useColors)return;const n="color: "+this.color;e.splice(1,0,n,"color: inherit");let i=0,r=0;e[0].replace(/%[a-zA-Z%]/g,(t=>{"%%"!==t&&(i++,"%c"===t&&(r=i))})),e.splice(r,0,n)},e.save=function(t){try{t?e.storage.setItem("debug",t):e.storage.removeItem("debug")}catch(t){}},e.load=function(){let t;try{t=e.storage.getItem("debug")}catch(t){}return!t&&"undefined"!=typeof process&&"env"in process&&(t=process.env.DEBUG),t},e.useColors=function(){return!("undefined"==typeof window||!window.process||"renderer"!==window.process.type&&!window.process.__nwjs)||("undefined"==typeof navigator||!navigator.userAgent||!navigator.userAgent.toLowerCase().match(/(edge|trident)\/(\d+)/))&&("undefined"!=typeof document&&document.documentElement&&document.documentElement.style&&document.documentElement.style.WebkitAppearance||"undefined"!=typeof window&&window.console&&(window.console.firebug||window.console.exception&&window.console.table)||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/firefox\/(\d+)/)&&parseInt(RegExp.$1,10)>=31||"undefined"!=typeof navigator&&navigator.userAgent&&navigator.userAgent.toLowerCase().match(/applewebkit\/(\d+)/))},e.storage=function(){try{return localStorage}catch(t){}}(),e.destroy=(()=>{let t=!1;return()=>{t||(t=!0,console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`."))}})(),e.colors=["#0000CC","#0000FF","#0033CC","#0033FF","#0066CC","#0066FF","#0099CC","#0099FF","#00CC00","#00CC33","#00CC66","#00CC99","#00CCCC","#00CCFF","#3300CC","#3300FF","#3333CC","#3333FF","#3366CC","#3366FF","#3399CC","#3399FF","#33CC00","#33CC33","#33CC66","#33CC99","#33CCCC","#33CCFF","#6600CC","#6600FF","#6633CC","#6633FF","#66CC00","#66CC33","#9900CC","#9900FF","#9933CC","#9933FF","#99CC00","#99CC33","#CC0000","#CC0033","#CC0066","#CC0099","#CC00CC","#CC00FF","#CC3300","#CC3333","#CC3366","#CC3399","#CC33CC","#CC33FF","#CC6600","#CC6633","#CC9900","#CC9933","#CCCC00","#CCCC33","#FF0000","#FF0033","#FF0066","#FF0099","#FF00CC","#FF00FF","#FF3300","#FF3333","#FF3366","#FF3399","#FF33CC","#FF33FF","#FF6600","#FF6633","#FF9900","#FF9933","#FFCC00","#FFCC33"],e.log=console.debug||console.log||(()=>{}),t.exports=n(2447)(e);const{formatters:i}=t.exports;i.j=function(t){try{return JSON.stringify(t)}catch(t){return"[UnexpectedJSONParseError]: "+t.message}}},2447:(t,e,n)=>{t.exports=function(t){function e(t){let n,r,o,a=null;function s(...t){if(!s.enabled)return;const i=s,r=Number(new Date),o=r-(n||r);i.diff=o,i.prev=n,i.curr=r,n=r,t[0]=e.coerce(t[0]),"string"!=typeof t[0]&&t.unshift("%O");let a=0;t[0]=t[0].replace(/%([a-zA-Z%])/g,((n,r)=>{if("%%"===n)return"%";a++;const o=e.formatters[r];if("function"==typeof o){const e=t[a];n=o.call(i,e),t.splice(a,1),a--}return n})),e.formatArgs.call(i,t),(i.log||e.log).apply(i,t)}return s.namespace=t,s.useColors=e.useColors(),s.color=e.selectColor(t),s.extend=i,s.destroy=e.destroy,Object.defineProperty(s,"enabled",{enumerable:!0,configurable:!1,get:()=>null!==a?a:(r!==e.namespaces&&(r=e.namespaces,o=e.enabled(t)),o),set:t=>{a=t}}),"function"==typeof e.init&&e.init(s),s}function i(t,n){const i=e(this.namespace+(void 0===n?":":n)+t);return i.log=this.log,i}function r(t){return t.toString().substring(2,t.toString().length-2).replace(/\.\*\?$/,"*")}return e.debug=e,e.default=e,e.coerce=function(t){return t instanceof Error?t.stack||t.message:t},e.disable=function(){const t=[...e.names.map(r),...e.skips.map(r).map((t=>"-"+t))].join(",");return e.enable(""),t},e.enable=function(t){let n;e.save(t),e.namespaces=t,e.names=[],e.skips=[];const i=("string"==typeof t?t:"").split(/[\s,]+/),r=i.length;for(n=0;n<r;n++)i[n]&&("-"===(t=i[n].replace(/\*/g,".*?"))[0]?e.skips.push(new RegExp("^"+t.substr(1)+"$")):e.names.push(new RegExp("^"+t+"$")))},e.enabled=function(t){if("*"===t[t.length-1])return!0;let n,i;for(n=0,i=e.skips.length;n<i;n++)if(e.skips[n].test(t))return!1;for(n=0,i=e.names.length;n<i;n++)if(e.names[n].test(t))return!0;return!1},e.humanize=n(7824),e.destroy=function(){console.warn("Instance method `debug.destroy()` is deprecated and no longer does anything. It will be removed in the next major version of `debug`.")},Object.keys(t).forEach((n=>{e[n]=t[n]})),e.names=[],e.skips=[],e.formatters={},e.selectColor=function(t){let n=0;for(let e=0;e<t.length;e++)n=(n<<5)-n+t.charCodeAt(e),n|=0;return e.colors[Math.abs(n)%e.colors.length]},e.enable(e.load()),e}},3549:t=>{t.exports="undefined"!=typeof self?self:"undefined"!=typeof window?window:Function("return this")()},5983:(t,e,n)=>{const i=n(2192);t.exports=(t,e)=>new i(t,e),t.exports.Socket=i,t.exports.protocol=i.protocol,t.exports.Transport=n(6496),t.exports.transports=n(3352),t.exports.parser=n(9743)},2192:(t,e,n)=>{const i=n(3352),r=n(8767),o=n(1227)("engine.io-client:socket"),a=n(9743),s=n(4187),u=n(1830);class c extends r{constructor(t,e={}){super(),t&&"object"==typeof t&&(e=t,t=null),t?(t=s(t),e.hostname=t.host,e.secure="https"===t.protocol||"wss"===t.protocol,e.port=t.port,t.query&&(e.query=t.query)):e.host&&(e.hostname=s(e.host).host),this.secure=null!=e.secure?e.secure:"undefined"!=typeof location&&"https:"===location.protocol,e.hostname&&!e.port&&(e.port=this.secure?"443":"80"),this.hostname=e.hostname||("undefined"!=typeof location?location.hostname:"localhost"),this.port=e.port||("undefined"!=typeof location&&location.port?location.port:this.secure?443:80),this.transports=e.transports||["polling","websocket"],this.readyState="",this.writeBuffer=[],this.prevBufferLen=0,this.opts=Object.assign({path:"/engine.io",agent:!1,withCredentials:!1,upgrade:!0,jsonp:!0,timestampParam:"t",rememberUpgrade:!1,rejectUnauthorized:!0,perMessageDeflate:{threshold:1024},transportOptions:{},closeOnBeforeunload:!0},e),this.opts.path=this.opts.path.replace(/\/$/,"")+"/","string"==typeof this.opts.query&&(this.opts.query=u.decode(this.opts.query)),this.id=null,this.upgrades=null,this.pingInterval=null,this.pingTimeout=null,this.pingTimeoutTimer=null,"function"==typeof addEventListener&&(this.opts.closeOnBeforeunload&&addEventListener("beforeunload",(()=>{this.transport&&(this.transport.removeAllListeners(),this.transport.close())}),!1),"localhost"!==this.hostname&&(this.offlineEventListener=()=>{this.onClose("transport close")},addEventListener("offline",this.offlineEventListener,!1))),this.open()}createTransport(t){o('creating transport "%s"',t);const e=function(t){const e={};for(let n in t)t.hasOwnProperty(n)&&(e[n]=t[n]);return e}(this.opts.query);e.EIO=a.protocol,e.transport=t,this.id&&(e.sid=this.id);const n=Object.assign({},this.opts.transportOptions[t],this.opts,{query:e,socket:this,hostname:this.hostname,secure:this.secure,port:this.port});return o("options: %j",n),new i[t](n)}open(){let t;if(this.opts.rememberUpgrade&&c.priorWebsocketSuccess&&-1!==this.transports.indexOf("websocket"))t="websocket";else{if(0===this.transports.length)return void setTimeout((()=>{this.emit("error","No transports available")}),0);t=this.transports[0]}this.readyState="opening";try{t=this.createTransport(t)}catch(t){return o("error while creating transport: %s",t),this.transports.shift(),void this.open()}t.open(),this.setTransport(t)}setTransport(t){o("setting transport %s",t.name),this.transport&&(o("clearing existing transport %s",this.transport.name),this.transport.removeAllListeners()),this.transport=t,t.on("drain",this.onDrain.bind(this)).on("packet",this.onPacket.bind(this)).on("error",this.onError.bind(this)).on("close",(()=>{this.onClose("transport close")}))}probe(t){o('probing transport "%s"',t);let e=this.createTransport(t,{probe:1}),n=!1;c.priorWebsocketSuccess=!1;const i=()=>{n||(o('probe transport "%s" opened',t),e.send([{type:"ping",data:"probe"}]),e.once("packet",(i=>{if(!n)if("pong"===i.type&&"probe"===i.data){if(o('probe transport "%s" pong',t),this.upgrading=!0,this.emit("upgrading",e),!e)return;c.priorWebsocketSuccess="websocket"===e.name,o('pausing current transport "%s"',this.transport.name),this.transport.pause((()=>{n||"closed"!==this.readyState&&(o("changing transport and sending upgrade packet"),d(),this.setTransport(e),e.send([{type:"upgrade"}]),this.emit("upgrade",e),e=null,this.upgrading=!1,this.flush())}))}else{o('probe transport "%s" failed',t);const n=new Error("probe error");n.transport=e.name,this.emit("upgradeError",n)}})))};function r(){n||(n=!0,d(),e.close(),e=null)}const a=n=>{const i=new Error("probe error: "+n);i.transport=e.name,r(),o('probe transport "%s" failed because of error: %s',t,n),this.emit("upgradeError",i)};function s(){a("transport closed")}function u(){a("socket closed")}function l(t){e&&t.name!==e.name&&(o('"%s" works - aborting "%s"',t.name,e.name),r())}const d=()=>{e.removeListener("open",i),e.removeListener("error",a),e.removeListener("close",s),this.removeListener("close",u),this.removeListener("upgrading",l)};e.once("open",i),e.once("error",a),e.once("close",s),this.once("close",u),this.once("upgrading",l),e.open()}onOpen(){if(o("socket open"),this.readyState="open",c.priorWebsocketSuccess="websocket"===this.transport.name,this.emit("open"),this.flush(),"open"===this.readyState&&this.opts.upgrade&&this.transport.pause){o("starting upgrade probes");let t=0;const e=this.upgrades.length;for(;t<e;t++)this.probe(this.upgrades[t])}}onPacket(t){if("opening"===this.readyState||"open"===this.readyState||"closing"===this.readyState)switch(o('socket receive: type "%s", data "%s"',t.type,t.data),this.emit("packet",t),this.emit("heartbeat"),t.type){case"open":this.onHandshake(JSON.parse(t.data));break;case"ping":this.resetPingTimeout(),this.sendPacket("pong"),this.emit("ping"),this.emit("pong");break;case"error":const e=new Error("server error");e.code=t.data,this.onError(e);break;case"message":this.emit("data",t.data),this.emit("message",t.data)}else o('packet received with socket readyState "%s"',this.readyState)}onHandshake(t){this.emit("handshake",t),this.id=t.sid,this.transport.query.sid=t.sid,this.upgrades=this.filterUpgrades(t.upgrades),this.pingInterval=t.pingInterval,this.pingTimeout=t.pingTimeout,this.onOpen(),"closed"!==this.readyState&&this.resetPingTimeout()}resetPingTimeout(){clearTimeout(this.pingTimeoutTimer),this.pingTimeoutTimer=setTimeout((()=>{this.onClose("ping timeout")}),this.pingInterval+this.pingTimeout),this.opts.autoUnref&&this.pingTimeoutTimer.unref()}onDrain(){this.writeBuffer.splice(0,this.prevBufferLen),this.prevBufferLen=0,0===this.writeBuffer.length?this.emit("drain"):this.flush()}flush(){"closed"!==this.readyState&&this.transport.writable&&!this.upgrading&&this.writeBuffer.length&&(o("flushing %d packets in socket",this.writeBuffer.length),this.transport.send(this.writeBuffer),this.prevBufferLen=this.writeBuffer.length,this.emit("flush"))}write(t,e,n){return this.sendPacket("message",t,e,n),this}send(t,e,n){return this.sendPacket("message",t,e,n),this}sendPacket(t,e,n,i){if("function"==typeof e&&(i=e,e=void 0),"function"==typeof n&&(i=n,n=null),"closing"===this.readyState||"closed"===this.readyState)return;(n=n||{}).compress=!1!==n.compress;const r={type:t,data:e,options:n};this.emit("packetCreate",r),this.writeBuffer.push(r),i&&this.once("flush",i),this.flush()}close(){const t=()=>{this.onClose("forced close"),o("socket closing - telling transport to close"),this.transport.close()},e=()=>{this.removeListener("upgrade",e),this.removeListener("upgradeError",e),t()},n=()=>{this.once("upgrade",e),this.once("upgradeError",e)};return"opening"!==this.readyState&&"open"!==this.readyState||(this.readyState="closing",this.writeBuffer.length?this.once("drain",(()=>{this.upgrading?n():t()})):this.upgrading?n():t()),this}onError(t){o("socket error %j",t),c.priorWebsocketSuccess=!1,this.emit("error",t),this.onClose("transport error",t)}onClose(t,e){"opening"!==this.readyState&&"open"!==this.readyState&&"closing"!==this.readyState||(o('socket close with reason: "%s"',t),clearTimeout(this.pingIntervalTimer),clearTimeout(this.pingTimeoutTimer),this.transport.removeAllListeners("close"),this.transport.close(),this.transport.removeAllListeners(),"function"==typeof removeEventListener&&removeEventListener("offline",this.offlineEventListener,!1),this.readyState="closed",this.id=null,this.emit("close",t,e),this.writeBuffer=[],this.prevBufferLen=0)}filterUpgrades(t){const e=[];let n=0;const i=t.length;for(;n<i;n++)~this.transports.indexOf(t[n])&&e.push(t[n]);return e}}c.priorWebsocketSuccess=!1,c.protocol=a.protocol,t.exports=c},6496:(t,e,n)=>{const i=n(9743),r=n(8767),o=n(1227)("engine.io-client:transport");t.exports=class extends r{constructor(t){super(),this.opts=t,this.query=t.query,this.readyState="",this.socket=t.socket}onError(t,e){const n=new Error(t);return n.type="TransportError",n.description=e,this.emit("error",n),this}open(){return"closed"!==this.readyState&&""!==this.readyState||(this.readyState="opening",this.doOpen()),this}close(){return"opening"!==this.readyState&&"open"!==this.readyState||(this.doClose(),this.onClose()),this}send(t){"open"===this.readyState?this.write(t):o("transport is not open, discarding packets")}onOpen(){this.readyState="open",this.writable=!0,this.emit("open")}onData(t){const e=i.decodePacket(t,this.socket.binaryType);this.onPacket(e)}onPacket(t){this.emit("packet",t)}onClose(){this.readyState="closed",this.emit("close")}}},3352:(t,e,n)=>{const i=n(2777),r=n(3416),o=n(9785),a=n(4442);e.polling=function(t){let e,n=!1,a=!1;const s=!1!==t.jsonp;if("undefined"!=typeof location){const e="https:"===location.protocol;let i=location.port;i||(i=e?443:80),n=t.hostname!==location.hostname||i!==t.port,a=t.secure!==e}if(t.xdomain=n,t.xscheme=a,e=new i(t),"open"in e&&!t.forceJSONP)return new r(t);if(!s)throw new Error("JSONP disabled");return new o(t)},e.websocket=a},9785:(t,e,n)=>{const i=n(9015),r=n(3549),o=/\n/g,a=/\\n/g;let s;t.exports=class extends i{constructor(t){super(t),this.query=this.query||{},s||(s=r.___eio=r.___eio||[]),this.index=s.length,s.push(this.onData.bind(this)),this.query.j=this.index}get supportsBinary(){return!1}doClose(){this.script&&(this.script.onerror=()=>{},this.script.parentNode.removeChild(this.script),this.script=null),this.form&&(this.form.parentNode.removeChild(this.form),this.form=null,this.iframe=null),super.doClose()}doPoll(){const t=document.createElement("script");this.script&&(this.script.parentNode.removeChild(this.script),this.script=null),t.async=!0,t.src=this.uri(),t.onerror=t=>{this.onError("jsonp poll error",t)};const e=document.getElementsByTagName("script")[0];e?e.parentNode.insertBefore(t,e):(document.head||document.body).appendChild(t),this.script=t,"undefined"!=typeof navigator&&/gecko/i.test(navigator.userAgent)&&setTimeout((function(){const t=document.createElement("iframe");document.body.appendChild(t),document.body.removeChild(t)}),100)}doWrite(t,e){let n;if(!this.form){const t=document.createElement("form"),e=document.createElement("textarea"),n=this.iframeId="eio_iframe_"+this.index;t.className="socketio",t.style.position="absolute",t.style.top="-1000px",t.style.left="-1000px",t.target=n,t.method="POST",t.setAttribute("accept-charset","utf-8"),e.name="d",t.appendChild(e),document.body.appendChild(t),this.form=t,this.area=e}function i(){r(),e()}this.form.action=this.uri();const r=()=>{if(this.iframe)try{this.form.removeChild(this.iframe)}catch(t){this.onError("jsonp polling iframe removal error",t)}try{const t='<iframe src="javascript:0" name="'+this.iframeId+'">';n=document.createElement(t)}catch(t){n=document.createElement("iframe"),n.name=this.iframeId,n.src="javascript:0"}n.id=this.iframeId,this.form.appendChild(n),this.iframe=n};r(),t=t.replace(a,"\\\n"),this.area.value=t.replace(o,"\\n");try{this.form.submit()}catch(t){}this.iframe.attachEvent?this.iframe.onreadystatechange=()=>{"complete"===this.iframe.readyState&&i()}:this.iframe.onload=i}}},3416:(t,e,n)=>{const i=n(2777),r=n(9015),o=n(8767),{pick:a}=n(6839),s=n(3549),u=n(1227)("engine.io-client:polling-xhr");function c(){}const l=null!=new i({xdomain:!1}).responseType;class d extends o{constructor(t,e){super(),this.opts=e,this.method=e.method||"GET",this.uri=t,this.async=!1!==e.async,this.data=void 0!==e.data?e.data:null,this.create()}create(){const t=a(this.opts,"agent","enablesXDR","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","autoUnref");t.xdomain=!!this.opts.xd,t.xscheme=!!this.opts.xs;const e=this.xhr=new i(t);try{u("xhr open %s: %s",this.method,this.uri),e.open(this.method,this.uri,this.async);try{if(this.opts.extraHeaders){e.setDisableHeaderCheck&&e.setDisableHeaderCheck(!0);for(let t in this.opts.extraHeaders)this.opts.extraHeaders.hasOwnProperty(t)&&e.setRequestHeader(t,this.opts.extraHeaders[t])}}catch(t){}if("POST"===this.method)try{e.setRequestHeader("Content-type","text/plain;charset=UTF-8")}catch(t){}try{e.setRequestHeader("Accept","*/*")}catch(t){}"withCredentials"in e&&(e.withCredentials=this.opts.withCredentials),this.opts.requestTimeout&&(e.timeout=this.opts.requestTimeout),this.hasXDR()?(e.onload=()=>{this.onLoad()},e.onerror=()=>{this.onError(e.responseText)}):e.onreadystatechange=()=>{4===e.readyState&&(200===e.status||1223===e.status?this.onLoad():setTimeout((()=>{this.onError("number"==typeof e.status?e.status:0)}),0))},u("xhr data %s",this.data),e.send(this.data)}catch(t){return void setTimeout((()=>{this.onError(t)}),0)}"undefined"!=typeof document&&(this.index=d.requestsCount++,d.requests[this.index]=this)}onSuccess(){this.emit("success"),this.cleanup()}onData(t){this.emit("data",t),this.onSuccess()}onError(t){this.emit("error",t),this.cleanup(!0)}cleanup(t){if(void 0!==this.xhr&&null!==this.xhr){if(this.hasXDR()?this.xhr.onload=this.xhr.onerror=c:this.xhr.onreadystatechange=c,t)try{this.xhr.abort()}catch(t){}"undefined"!=typeof document&&delete d.requests[this.index],this.xhr=null}}onLoad(){const t=this.xhr.responseText;null!==t&&this.onData(t)}hasXDR(){return"undefined"!=typeof XDomainRequest&&!this.xs&&this.enablesXDR}abort(){this.cleanup()}}function p(){for(let t in d.requests)d.requests.hasOwnProperty(t)&&d.requests[t].abort()}d.requestsCount=0,d.requests={},"undefined"!=typeof document&&("function"==typeof attachEvent?attachEvent("onunload",p):"function"==typeof addEventListener&&addEventListener("onpagehide"in s?"pagehide":"unload",p,!1)),t.exports=class extends r{constructor(t){if(super(t),"undefined"!=typeof location){const e="https:"===location.protocol;let n=location.port;n||(n=e?443:80),this.xd="undefined"!=typeof location&&t.hostname!==location.hostname||n!==t.port,this.xs=t.secure!==e}const e=t&&t.forceBase64;this.supportsBinary=l&&!e}request(t={}){return Object.assign(t,{xd:this.xd,xs:this.xs},this.opts),new d(this.uri(),t)}doWrite(t,e){const n=this.request({method:"POST",data:t});n.on("success",e),n.on("error",(t=>{this.onError("xhr post error",t)}))}doPoll(){u("xhr poll");const t=this.request();t.on("data",this.onData.bind(this)),t.on("error",(t=>{this.onError("xhr poll error",t)})),this.pollXhr=t}},t.exports.Request=d},9015:(t,e,n)=>{const i=n(6496),r=n(1830),o=n(9743),a=n(2281),s=n(1227)("engine.io-client:polling");t.exports=class extends i{get name(){return"polling"}doOpen(){this.poll()}pause(t){this.readyState="pausing";const e=()=>{s("paused"),this.readyState="paused",t()};if(this.polling||!this.writable){let t=0;this.polling&&(s("we are currently polling - waiting to pause"),t++,this.once("pollComplete",(function(){s("pre-pause polling complete"),--t||e()}))),this.writable||(s("we are currently writing - waiting to pause"),t++,this.once("drain",(function(){s("pre-pause writing complete"),--t||e()})))}else e()}poll(){s("polling"),this.polling=!0,this.doPoll(),this.emit("poll")}onData(t){s("polling got data %s",t),o.decodePayload(t,this.socket.binaryType).forEach((t=>{if("opening"===this.readyState&&"open"===t.type&&this.onOpen(),"close"===t.type)return this.onClose(),!1;this.onPacket(t)})),"closed"!==this.readyState&&(this.polling=!1,this.emit("pollComplete"),"open"===this.readyState?this.poll():s('ignoring poll - transport state "%s"',this.readyState))}doClose(){const t=()=>{s("writing close packet"),this.write([{type:"close"}])};"open"===this.readyState?(s("transport open - closing"),t()):(s("transport not open - deferring close"),this.once("open",t))}write(t){this.writable=!1,o.encodePayload(t,(t=>{this.doWrite(t,(()=>{this.writable=!0,this.emit("drain")}))}))}uri(){let t=this.query||{};const e=this.opts.secure?"https":"http";let n="";return!1!==this.opts.timestampRequests&&(t[this.opts.timestampParam]=a()),this.supportsBinary||t.sid||(t.b64=1),t=r.encode(t),this.opts.port&&("https"===e&&443!==Number(this.opts.port)||"http"===e&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+t}}},866:(t,e,n)=>{const i=n(3549),r="function"==typeof Promise&&"function"==typeof Promise.resolve?t=>Promise.resolve().then(t):t=>setTimeout(t,0);t.exports={WebSocket:i.WebSocket||i.MozWebSocket,usingBrowserWebSocket:!0,defaultBinaryType:"arraybuffer",nextTick:r}},4442:(t,e,n)=>{const i=n(6496),r=n(9743),o=n(1830),a=n(2281),{pick:s}=n(6839),{WebSocket:u,usingBrowserWebSocket:c,defaultBinaryType:l,nextTick:d}=n(866),p=n(1227)("engine.io-client:websocket"),h="undefined"!=typeof navigator&&"string"==typeof navigator.product&&"reactnative"===navigator.product.toLowerCase();class f extends i{constructor(t){super(t),this.supportsBinary=!t.forceBase64}get name(){return"websocket"}doOpen(){if(!this.check())return;const t=this.uri(),e=this.opts.protocols,n=h?{}:s(this.opts,"agent","perMessageDeflate","pfx","key","passphrase","cert","ca","ciphers","rejectUnauthorized","localAddress","protocolVersion","origin","maxPayload","family","checkServerIdentity");this.opts.extraHeaders&&(n.headers=this.opts.extraHeaders);try{this.ws=c&&!h?e?new u(t,e):new u(t):new u(t,e,n)}catch(t){return this.emit("error",t)}this.ws.binaryType=this.socket.binaryType||l,this.addEventListeners()}addEventListeners(){this.ws.onopen=()=>{this.opts.autoUnref&&this.ws._socket.unref(),this.onOpen()},this.ws.onclose=this.onClose.bind(this),this.ws.onmessage=t=>this.onData(t.data),this.ws.onerror=t=>this.onError("websocket error",t)}write(t){this.writable=!1;for(let e=0;e<t.length;e++){const n=t[e],i=e===t.length-1;r.encodePacket(n,this.supportsBinary,(t=>{const e={};!c&&(n.options&&(e.compress=n.options.compress),this.opts.perMessageDeflate)&&("string"==typeof t?Buffer.byteLength(t):t.length)<this.opts.perMessageDeflate.threshold&&(e.compress=!1);try{c?this.ws.send(t):this.ws.send(t,e)}catch(t){p("websocket closed before onclose event")}i&&d((()=>{this.writable=!0,this.emit("drain")}))}))}}onClose(){i.prototype.onClose.call(this)}doClose(){void 0!==this.ws&&(this.ws.close(),this.ws=null)}uri(){let t=this.query||{};const e=this.opts.secure?"wss":"ws";let n="";return this.opts.port&&("wss"===e&&443!==Number(this.opts.port)||"ws"===e&&80!==Number(this.opts.port))&&(n=":"+this.opts.port),this.opts.timestampRequests&&(t[this.opts.timestampParam]=a()),this.supportsBinary||(t.b64=1),t=o.encode(t),t.length&&(t="?"+t),e+"://"+(-1!==this.opts.hostname.indexOf(":")?"["+this.opts.hostname+"]":this.opts.hostname)+n+this.opts.path+t}check(){return!(!u||"__initialize"in u&&this.name===f.prototype.name)}}t.exports=f},6839:t=>{t.exports.pick=(t,...e)=>e.reduce(((e,n)=>(t.hasOwnProperty(n)&&(e[n]=t[n]),e)),{})},2777:(t,e,n)=>{const i=n(8058),r=n(3549);t.exports=function(t){const e=t.xdomain,n=t.xscheme,o=t.enablesXDR;try{if("undefined"!=typeof XMLHttpRequest&&(!e||i))return new XMLHttpRequest}catch(t){}try{if("undefined"!=typeof XDomainRequest&&!n&&o)return new XDomainRequest}catch(t){}if(!e)try{return new(r[["Active"].concat("Object").join("X")])("Microsoft.XMLHTTP")}catch(t){}}},1712:t=>{const e=Object.create(null);e.open="0",e.close="1",e.ping="2",e.pong="3",e.message="4",e.upgrade="5",e.noop="6";const n=Object.create(null);Object.keys(e).forEach((t=>{n[e[t]]=t})),t.exports={PACKET_TYPES:e,PACKET_TYPES_REVERSE:n,ERROR_PACKET:{type:"error",data:"parser error"}}},4965:(t,e,n)=>{const{PACKET_TYPES_REVERSE:i,ERROR_PACKET:r}=n(1712);let o;"function"==typeof ArrayBuffer&&(o=n(3704));const a=(t,e)=>{if(o){const n=o.decode(t);return s(n,e)}return{base64:!0,data:t}},s=(t,e)=>{switch(e){case"blob":return t instanceof ArrayBuffer?new Blob([t]):t;case"arraybuffer":default:return t}};t.exports=(t,e)=>{if("string"!=typeof t)return{type:"message",data:s(t,e)};const n=t.charAt(0);return"b"===n?{type:"message",data:a(t.substring(1),e)}:i[n]?t.length>1?{type:i[n],data:t.substring(1)}:{type:i[n]}:r}},2929:(t,e,n)=>{const{PACKET_TYPES:i}=n(1712),r="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===Object.prototype.toString.call(Blob),o="function"==typeof ArrayBuffer,a=(t,e)=>{const n=new FileReader;return n.onload=function(){const t=n.result.split(",")[1];e("b"+t)},n.readAsDataURL(t)};t.exports=({type:t,data:e},n,s)=>{return r&&e instanceof Blob?n?s(e):a(e,s):o&&(e instanceof ArrayBuffer||(u=e,"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(u):u&&u.buffer instanceof ArrayBuffer))?n?s(e instanceof ArrayBuffer?e:e.buffer):a(new Blob([e]),s):s(i[t]+(e||""));var u}},9743:(t,e,n)=>{const i=n(2929),r=n(4965),o=String.fromCharCode(30);t.exports={protocol:4,encodePacket:i,encodePayload:(t,e)=>{const n=t.length,r=new Array(n);let a=0;t.forEach(((t,s)=>{i(t,!1,(t=>{r[s]=t,++a===n&&e(r.join(o))}))}))},decodePacket:r,decodePayload:(t,e)=>{const n=t.split(o),i=[];for(let t=0;t<n.length;t++){const o=r(n[t],e);if(i.push(o),"error"===o.type)break}return i}}},8058:t=>{try{t.exports="undefined"!=typeof XMLHttpRequest&&"withCredentials"in new XMLHttpRequest}catch(e){t.exports=!1}},5235:(t,e,n)=>{t.exports=n(8425)},8425:(t,e)=>{"use strict";function n(t){this.j={},this.jr=[],this.jd=null,this.t=t}n.prototype={accepts:function(){return!!this.t},tt:function(t,e){if(e&&e.j)return this.j[t]=e,e;var n=e,r=this.j[t];if(r)return n&&(r.t=n),r;r=i();var o=s(this,t);return o?(Object.assign(r.j,o.j),r.jr.append(o.jr),r.jr=o.jd,r.t=n||o.t):r.t=n,this.j[t]=r,r}};var i=function(){return new n},r=function(t){return new n(t)},o=function(t,e,n){t.j[e]||(t.j[e]=n)},a=function(t,e,n){t.jr.push([e,n])},s=function(t,e){var n=t.j[e];if(n)return n;for(var i=0;i<t.jr.length;i++){var r=t.jr[i][0],o=t.jr[i][1];if(r.test(e))return o}return t.jd},u=function(t,e,n){for(var i=0;i<e.length;i++)o(t,e[i],n)},c=function(t,e){for(var n=0;n<e.length;n++){var i=e[n][0],r=e[n][1];o(t,i,r)}},l=function(t,e,n,i){for(var r,a=0,s=e.length;a<s&&(r=t.j[e[a]]);)t=r,a++;if(a>=s)return[];for(;a<s-1;)r=i(),o(t,e[a],r),t=r,a++;o(t,e[s-1],n)},d="DOMAIN",p="LOCALHOST",h="TLD",f="AT",m="COLON",v="DOT",g="PUNCTUATION",y="NL",A="NUM",C="PLUS",E="POUND",b="QUERY",D="SLASH",I="UNDERSCORE",_="PROTOCOL",T="MAILTO",S="WS",x="OPENBRACE",O="OPENBRACKET",w="OPENANGLEBRACKET",L="OPENPAREN",k="CLOSEBRACE",F="CLOSEBRACKET",R="CLOSEANGLEBRACKET",N="CLOSEPAREN",B="AMPERSAND",M="SYM",P=Object.freeze({__proto__:null,DOMAIN:d,LOCALHOST:p,TLD:h,AT:f,COLON:m,DOT:v,PUNCTUATION:g,NL:y,NUM:A,PLUS:C,POUND:E,QUERY:b,SLASH:D,UNDERSCORE:I,PROTOCOL:_,MAILTO:T,WS:S,OPENBRACE:x,OPENBRACKET:O,OPENANGLEBRACKET:w,OPENPAREN:L,CLOSEBRACE:k,CLOSEBRACKET:F,CLOSEANGLEBRACKET:R,CLOSEPAREN:N,AMPERSAND:B,SYM:M}),H="aaa aarp abarth abb abbott abbvie abc able abogado abudhabi ac academy accenture accountant accountants aco actor ad adac ads adult ae aeg aero aetna af afamilycompany afl africa ag agakhan agency ai aig airbus airforce airtel akdn al alfaromeo alibaba alipay allfinanz allstate ally alsace alstom am amazon americanexpress americanfamily amex amfam amica amsterdam analytics android anquan anz ao aol apartments app apple aq aquarelle ar arab aramco archi army arpa art arte as asda asia associates at athleta attorney au auction audi audible audio auspost author auto autos avianca aw aws ax axa az azure ba baby baidu banamex bananarepublic band bank bar barcelona barclaycard barclays barefoot bargains baseball basketball bauhaus bayern bb bbc bbt bbva bcg bcn bd be beats beauty beer bentley berlin best bestbuy bet bf bg bh bharti bi bible bid bike bing bingo bio biz bj black blackfriday blockbuster blog bloomberg blue bm bms bmw bn bnpparibas bo boats boehringer bofa bom bond boo book booking bosch bostik boston bot boutique box br bradesco bridgestone broadway broker brother brussels bs bt budapest bugatti build builders business buy buzz bv bw by bz bzh ca cab cafe cal call calvinklein cam camera camp cancerresearch canon capetown capital capitalone car caravan cards care career careers cars casa case cash casino cat catering catholic cba cbn cbre cbs cc cd center ceo cern cf cfa cfd cg ch chanel channel charity chase chat cheap chintai christmas chrome church ci cipriani circle cisco citadel citi citic city cityeats ck cl claims cleaning click clinic clinique clothing cloud club clubmed cm cn co coach codes coffee college cologne com comcast commbank community company compare computer comsec condos construction consulting contact contractors cooking cookingchannel cool coop corsica country coupon coupons courses cpa cr credit creditcard creditunion cricket crown crs cruise cruises csc cu cuisinella cv cw cx cy cymru cyou cz dabur dad dance data date dating datsun day dclk dds de deal dealer deals degree delivery dell deloitte delta democrat dental dentist desi design dev dhl diamonds diet digital direct directory discount discover dish diy dj dk dm dnp do docs doctor dog domains dot download drive dtv dubai duck dunlop dupont durban dvag dvr dz earth eat ec eco edeka edu education ee eg email emerck energy engineer engineering enterprises epson equipment er ericsson erni es esq estate et etisalat eu eurovision eus events exchange expert exposed express extraspace fage fail fairwinds faith family fan fans farm farmers fashion fast fedex feedback ferrari ferrero fi fiat fidelity fido film final finance financial fire firestone firmdale fish fishing fit fitness fj fk flickr flights flir florist flowers fly fm fo foo food foodnetwork football ford forex forsale forum foundation fox fr free fresenius frl frogans frontdoor frontier ftr fujitsu fujixerox fun fund furniture futbol fyi ga gal gallery gallo gallup game games gap garden gay gb gbiz gd gdn ge gea gent genting george gf gg ggee gh gi gift gifts gives giving gl glade glass gle global globo gm gmail gmbh gmo gmx gn godaddy gold goldpoint golf goo goodyear goog google gop got gov gp gq gr grainger graphics gratis green gripe grocery group gs gt gu guardian gucci guge guide guitars guru gw gy hair hamburg hangout haus hbo hdfc hdfcbank health healthcare help helsinki here hermes hgtv hiphop hisamitsu hitachi hiv hk hkt hm hn hockey holdings holiday homedepot homegoods homes homesense honda horse hospital host hosting hot hoteles hotels hotmail house how hr hsbc ht hu hughes hyatt hyundai ibm icbc ice icu id ie ieee ifm ikano il im imamat imdb immo immobilien in inc industries infiniti info ing ink institute insurance insure int international intuit investments io ipiranga iq ir irish is ismaili ist istanbul it itau itv iveco jaguar java jcb je jeep jetzt jewelry jio jll jm jmp jnj jo jobs joburg jot joy jp jpmorgan jprs juegos juniper kaufen kddi ke kerryhotels kerrylogistics kerryproperties kfh kg kh ki kia kim kinder kindle kitchen kiwi km kn koeln komatsu kosher kp kpmg kpn kr krd kred kuokgroup kw ky kyoto kz la lacaixa lamborghini lamer lancaster lancia land landrover lanxess lasalle lat latino latrobe law lawyer lb lc lds lease leclerc lefrak legal lego lexus lgbt li lidl life lifeinsurance lifestyle lighting like lilly limited limo lincoln linde link lipsy live living lixil lk llc llp loan loans locker locus loft lol london lotte lotto love lpl lplfinancial lr ls lt ltd ltda lu lundbeck luxe luxury lv ly ma macys madrid maif maison makeup man management mango map market marketing markets marriott marshalls maserati mattel mba mc mckinsey md me med media meet melbourne meme memorial men menu merckmsd mg mh miami microsoft mil mini mint mit mitsubishi mk ml mlb mls mm mma mn mo mobi mobile moda moe moi mom monash money monster mormon mortgage moscow moto motorcycles mov movie mp mq mr ms msd mt mtn mtr mu museum mutual mv mw mx my mz na nab nagoya name nationwide natura navy nba nc ne nec net netbank netflix network neustar new news next nextdirect nexus nf nfl ng ngo nhk ni nico nike nikon ninja nissan nissay nl no nokia northwesternmutual norton now nowruz nowtv np nr nra nrw ntt nu nyc nz obi observer off office okinawa olayan olayangroup oldnavy ollo om omega one ong onl online onyourside ooo open oracle orange org organic origins osaka otsuka ott ovh pa page panasonic paris pars partners parts party passagens pay pccw pe pet pf pfizer pg ph pharmacy phd philips phone photo photography photos physio pics pictet pictures pid pin ping pink pioneer pizza pk pl place play playstation plumbing plus pm pn pnc pohl poker politie porn post pr pramerica praxi press prime pro prod productions prof progressive promo properties property protection pru prudential ps pt pub pw pwc py qa qpon quebec quest qvc racing radio raid re read realestate realtor realty recipes red redstone redumbrella rehab reise reisen reit reliance ren rent rentals repair report republican rest restaurant review reviews rexroth rich richardli ricoh ril rio rip rmit ro rocher rocks rodeo rogers room rs rsvp ru rugby ruhr run rw rwe ryukyu sa saarland safe safety sakura sale salon samsclub samsung sandvik sandvikcoromant sanofi sap sarl sas save saxo sb sbi sbs sc sca scb schaeffler schmidt scholarships school schule schwarz science scjohnson scot sd se search seat secure security seek select sener services ses seven sew sex sexy sfr sg sh shangrila sharp shaw shell shia shiksha shoes shop shopping shouji show showtime si silk sina singles site sj sk ski skin sky skype sl sling sm smart smile sn sncf so soccer social softbank software sohu solar solutions song sony soy spa space sport spot spreadbetting sr srl ss st stada staples star statebank statefarm stc stcgroup stockholm storage store stream studio study style su sucks supplies supply support surf surgery suzuki sv swatch swiftcover swiss sx sy sydney systems sz tab taipei talk taobao target tatamotors tatar tattoo tax taxi tc tci td tdk team tech technology tel temasek tennis teva tf tg th thd theater theatre tiaa tickets tienda tiffany tips tires tirol tj tjmaxx tjx tk tkmaxx tl tm tmall tn to today tokyo tools top toray toshiba total tours town toyota toys tr trade trading training travel travelchannel travelers travelersinsurance trust trv tt tube tui tunes tushu tv tvs tw tz ua ubank ubs ug uk unicom university uno uol ups us uy uz va vacations vana vanguard vc ve vegas ventures verisign versicherung vet vg vi viajes video vig viking villas vin vip virgin visa vision viva vivo vlaanderen vn vodka volkswagen volvo vote voting voto voyage vu vuelos wales walmart walter wang wanggou watch watches weather weatherchannel webcam weber website wed wedding weibo weir wf whoswho wien wiki williamhill win windows wine winners wme wolterskluwer woodside work works world wow ws wtc wtf xbox xerox xfinity xihuan xin xxx xyz yachts yahoo yamaxun yandex ye yodobashi yoga yokohama you youtube yt yun za zappos zara zero zip zm zone zuerich zw vermögensberater-ctb vermögensberatung-pwb ελ ευ бг бел дети ею католик ком қаз мкд мон москва онлайн орг рус рф сайт срб укр გე հայ ישראל קום ابوظبي اتصالات ارامكو الاردن البحرين الجزائر السعودية العليان المغرب امارات ایران بارت بازار بھارت بيتك پاکستان ڀارت تونس سودان سورية شبكة عراق عرب عمان فلسطين قطر كاثوليك كوم مصر مليسيا موريتانيا موقع همراه कॉम नेट भारत भारतम् भारोत संगठन বাংলা ভারত ভাৰত ਭਾਰਤ ભારત ଭାରତ இந்தியா இலங்கை சிங்கப்பூர் భారత్ ಭಾರತ ഭാരതം ලංකා คอม ไทย ລາວ 닷넷 닷컴 삼성 한국 アマゾン グーグル クラウド コム ストア セール ファッション ポイント みんな 世界 中信 中国 中國 中文网 亚马逊 企业 佛山 信息 健康 八卦 公司 公益 台湾 台灣 商城 商店 商标 嘉里 嘉里大酒店 在线 大众汽车 大拿 天主教 娱乐 家電 广东 微博 慈善 我爱你 手机 招聘 政务 政府 新加坡 新闻 时尚 書籍 机构 淡马锡 游戏 澳門 点看 移动 组织机构 网址 网店 网站 网络 联通 诺基亚 谷歌 购物 通販 集团 電訊盈科 飞利浦 食品 餐厅 香格里拉 香港".split(" "),j=/(?:[A-Za-z\xAA\xB5\xBA\xC0-\xD6\xD8-\xF6\xF8-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0370-\u0374\u0376\u0377\u037A-\u037D\u037F\u0386\u0388-\u038A\u038C\u038E-\u03A1\u03A3-\u03F5\u03F7-\u0481\u048A-\u052F\u0531-\u0556\u0559\u0560-\u0588\u05D0-\u05EA\u05EF-\u05F2\u0620-\u064A\u066E\u066F\u0671-\u06D3\u06D5\u06E5\u06E6\u06EE\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u07F4\u07F5\u07FA\u0800-\u0815\u081A\u0824\u0828\u0840-\u0858\u0860-\u086A\u08A0-\u08B4\u08B6-\u08C7\u0904-\u0939\u093D\u0950\u0958-\u0961\u0971-\u0980\u0985-\u098C\u098F\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC\u09DD\u09DF-\u09E1\u09F0\u09F1\u09FC\u0A05-\u0A0A\u0A0F\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32\u0A33\u0A35\u0A36\u0A38\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32\u0B33\u0B35-\u0B39\u0B3D\u0B5C\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99\u0B9A\u0B9C\u0B9E\u0B9F\u0BA3\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60\u0C61\u0C80\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0\u0CE1\u0CF1\u0CF2\u0D04-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D54-\u0D56\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32\u0E33\u0E40-\u0E46\u0E81\u0E82\u0E84\u0E86-\u0E8A\u0E8C-\u0EA3\u0EA5\u0EA7-\u0EB0\u0EB2\u0EB3\u0EBD\u0EC0-\u0EC4\u0EC6\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065\u1066\u106E-\u1070\u1075-\u1081\u108E\u10A0-\u10C5\u10C7\u10CD\u10D0-\u10FA\u10FC-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u13A0-\u13F5\u13F8-\u13FD\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17D7\u17DC\u1820-\u1878\u1880-\u1884\u1887-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1AA7\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C7D\u1C80-\u1C88\u1C90-\u1CBA\u1CBD-\u1CBF\u1CE9-\u1CEC\u1CEE-\u1CF3\u1CF5\u1CF6\u1CFA\u1D00-\u1DBF\u1E00-\u1F15\u1F18-\u1F1D\u1F20-\u1F45\u1F48-\u1F4D\u1F50-\u1F57\u1F59\u1F5B\u1F5D\u1F5F-\u1F7D\u1F80-\u1FB4\u1FB6-\u1FBC\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FCC\u1FD0-\u1FD3\u1FD6-\u1FDB\u1FE0-\u1FEC\u1FF2-\u1FF4\u1FF6-\u1FFC\u2071\u207F\u2090-\u209C\u2102\u2107\u210A-\u2113\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u212F-\u2139\u213C-\u213F\u2145-\u2149\u214E\u2183\u2184\u2C00-\u2C2E\u2C30-\u2C5E\u2C60-\u2CE4\u2CEB-\u2CEE\u2CF2\u2CF3\u2D00-\u2D25\u2D27\u2D2D\u2D30-\u2D67\u2D6F\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u2E2F\u3005\u3006\u3031-\u3035\u303B\u303C\u3041-\u3096\u309D-\u309F\u30A1-\u30FA\u30FC-\u30FF\u3105-\u312F\u3131-\u318E\u31A0-\u31BF\u31F0-\u31FF\u3400-\u4DBF\u4E00-\u9FFC\uA000-\uA48C\uA4D0-\uA4FD\uA500-\uA60C\uA610-\uA61F\uA62A\uA62B\uA640-\uA66E\uA67F-\uA69D\uA6A0-\uA6E5\uA717-\uA71F\uA722-\uA788\uA78B-\uA7BF\uA7C2-\uA7CA\uA7F5-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA8FE\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9CF\uA9E0-\uA9E4\uA9E6-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADD\uAAE0-\uAAEA\uAAF2-\uAAF4\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uAB30-\uAB5A\uAB5C-\uAB69\uAB70-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB00-\uFB06\uFB13-\uFB17\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40\uFB41\uFB43\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF21-\uFF3A\uFF41-\uFF5A\uFF66-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]|\uD800[\uDC00-\uDC0B\uDC0D-\uDC26\uDC28-\uDC3A\uDC3C\uDC3D\uDC3F-\uDC4D\uDC50-\uDC5D\uDC80-\uDCFA\uDE80-\uDE9C\uDEA0-\uDED0\uDF00-\uDF1F\uDF2D-\uDF40\uDF42-\uDF49\uDF50-\uDF75\uDF80-\uDF9D\uDFA0-\uDFC3\uDFC8-\uDFCF]|\uD801[\uDC00-\uDC9D\uDCB0-\uDCD3\uDCD8-\uDCFB\uDD00-\uDD27\uDD30-\uDD63\uDE00-\uDF36\uDF40-\uDF55\uDF60-\uDF67]|\uD802[\uDC00-\uDC05\uDC08\uDC0A-\uDC35\uDC37\uDC38\uDC3C\uDC3F-\uDC55\uDC60-\uDC76\uDC80-\uDC9E\uDCE0-\uDCF2\uDCF4\uDCF5\uDD00-\uDD15\uDD20-\uDD39\uDD80-\uDDB7\uDDBE\uDDBF\uDE00\uDE10-\uDE13\uDE15-\uDE17\uDE19-\uDE35\uDE60-\uDE7C\uDE80-\uDE9C\uDEC0-\uDEC7\uDEC9-\uDEE4\uDF00-\uDF35\uDF40-\uDF55\uDF60-\uDF72\uDF80-\uDF91]|\uD803[\uDC00-\uDC48\uDC80-\uDCB2\uDCC0-\uDCF2\uDD00-\uDD23\uDE80-\uDEA9\uDEB0\uDEB1\uDF00-\uDF1C\uDF27\uDF30-\uDF45\uDFB0-\uDFC4\uDFE0-\uDFF6]|\uD804[\uDC03-\uDC37\uDC83-\uDCAF\uDCD0-\uDCE8\uDD03-\uDD26\uDD44\uDD47\uDD50-\uDD72\uDD76\uDD83-\uDDB2\uDDC1-\uDDC4\uDDDA\uDDDC\uDE00-\uDE11\uDE13-\uDE2B\uDE80-\uDE86\uDE88\uDE8A-\uDE8D\uDE8F-\uDE9D\uDE9F-\uDEA8\uDEB0-\uDEDE\uDF05-\uDF0C\uDF0F\uDF10\uDF13-\uDF28\uDF2A-\uDF30\uDF32\uDF33\uDF35-\uDF39\uDF3D\uDF50\uDF5D-\uDF61]|\uD805[\uDC00-\uDC34\uDC47-\uDC4A\uDC5F-\uDC61\uDC80-\uDCAF\uDCC4\uDCC5\uDCC7\uDD80-\uDDAE\uDDD8-\uDDDB\uDE00-\uDE2F\uDE44\uDE80-\uDEAA\uDEB8\uDF00-\uDF1A]|\uD806[\uDC00-\uDC2B\uDCA0-\uDCDF\uDCFF-\uDD06\uDD09\uDD0C-\uDD13\uDD15\uDD16\uDD18-\uDD2F\uDD3F\uDD41\uDDA0-\uDDA7\uDDAA-\uDDD0\uDDE1\uDDE3\uDE00\uDE0B-\uDE32\uDE3A\uDE50\uDE5C-\uDE89\uDE9D\uDEC0-\uDEF8]|\uD807[\uDC00-\uDC08\uDC0A-\uDC2E\uDC40\uDC72-\uDC8F\uDD00-\uDD06\uDD08\uDD09\uDD0B-\uDD30\uDD46\uDD60-\uDD65\uDD67\uDD68\uDD6A-\uDD89\uDD98\uDEE0-\uDEF2\uDFB0]|\uD808[\uDC00-\uDF99]|\uD809[\uDC80-\uDD43]|[\uD80C\uD81C-\uD820\uD822\uD840-\uD868\uD86A-\uD86C\uD86F-\uD872\uD874-\uD879\uD880-\uD883][\uDC00-\uDFFF]|\uD80D[\uDC00-\uDC2E]|\uD811[\uDC00-\uDE46]|\uD81A[\uDC00-\uDE38\uDE40-\uDE5E\uDED0-\uDEED\uDF00-\uDF2F\uDF40-\uDF43\uDF63-\uDF77\uDF7D-\uDF8F]|\uD81B[\uDE40-\uDE7F\uDF00-\uDF4A\uDF50\uDF93-\uDF9F\uDFE0\uDFE1\uDFE3]|\uD821[\uDC00-\uDFF7]|\uD823[\uDC00-\uDCD5\uDD00-\uDD08]|\uD82C[\uDC00-\uDD1E\uDD50-\uDD52\uDD64-\uDD67\uDD70-\uDEFB]|\uD82F[\uDC00-\uDC6A\uDC70-\uDC7C\uDC80-\uDC88\uDC90-\uDC99]|\uD835[\uDC00-\uDC54\uDC56-\uDC9C\uDC9E\uDC9F\uDCA2\uDCA5\uDCA6\uDCA9-\uDCAC\uDCAE-\uDCB9\uDCBB\uDCBD-\uDCC3\uDCC5-\uDD05\uDD07-\uDD0A\uDD0D-\uDD14\uDD16-\uDD1C\uDD1E-\uDD39\uDD3B-\uDD3E\uDD40-\uDD44\uDD46\uDD4A-\uDD50\uDD52-\uDEA5\uDEA8-\uDEC0\uDEC2-\uDEDA\uDEDC-\uDEFA\uDEFC-\uDF14\uDF16-\uDF34\uDF36-\uDF4E\uDF50-\uDF6E\uDF70-\uDF88\uDF8A-\uDFA8\uDFAA-\uDFC2\uDFC4-\uDFCB]|\uD838[\uDD00-\uDD2C\uDD37-\uDD3D\uDD4E\uDEC0-\uDEEB]|\uD83A[\uDC00-\uDCC4\uDD00-\uDD43\uDD4B]|\uD83B[\uDE00-\uDE03\uDE05-\uDE1F\uDE21\uDE22\uDE24\uDE27\uDE29-\uDE32\uDE34-\uDE37\uDE39\uDE3B\uDE42\uDE47\uDE49\uDE4B\uDE4D-\uDE4F\uDE51\uDE52\uDE54\uDE57\uDE59\uDE5B\uDE5D\uDE5F\uDE61\uDE62\uDE64\uDE67-\uDE6A\uDE6C-\uDE72\uDE74-\uDE77\uDE79-\uDE7C\uDE7E\uDE80-\uDE89\uDE8B-\uDE9B\uDEA1-\uDEA3\uDEA5-\uDEA9\uDEAB-\uDEBB]|\uD869[\uDC00-\uDEDD\uDF00-\uDFFF]|\uD86D[\uDC00-\uDF34\uDF40-\uDFFF]|\uD86E[\uDC00-\uDC1D\uDC20-\uDFFF]|\uD873[\uDC00-\uDEA1\uDEB0-\uDFFF]|\uD87A[\uDC00-\uDFE0]|\uD87E[\uDC00-\uDE1D]|\uD884[\uDC00-\uDF4A])/,$=/(?:[#\*0-9\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23E9-\u23F3\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB-\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u261D\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692-\u2697\u2699\u269B\u269C\u26A0\u26A1\u26A7\u26AA\u26AB\u26B0\u26B1\u26BD\u26BE\u26C4\u26C5\u26C8\u26CE\u26CF\u26D1\u26D3\u26D4\u26E9\u26EA\u26F0-\u26F5\u26F7-\u26FA\u26FD\u2702\u2705\u2708-\u270D\u270F\u2712\u2714\u2716\u271D\u2721\u2728\u2733\u2734\u2744\u2747\u274C\u274E\u2753-\u2755\u2757\u2763\u2764\u2795-\u2797\u27A1\u27B0\u27BF\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B50\u2B55\u3030\u303D\u3297\u3299]|\uD83C[\uDC04\uDCCF\uDD70\uDD71\uDD7E\uDD7F\uDD8E\uDD91-\uDD9A\uDDE6-\uDDFF\uDE01\uDE02\uDE1A\uDE2F\uDE32-\uDE3A\uDE50\uDE51\uDF00-\uDF21\uDF24-\uDF93\uDF96\uDF97\uDF99-\uDF9B\uDF9E-\uDFF0\uDFF3-\uDFF5\uDFF7-\uDFFF]|\uD83D[\uDC00-\uDCFD\uDCFF-\uDD3D\uDD49-\uDD4E\uDD50-\uDD67\uDD6F\uDD70\uDD73-\uDD7A\uDD87\uDD8A-\uDD8D\uDD90\uDD95\uDD96\uDDA4\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA-\uDE4F\uDE80-\uDEC5\uDECB-\uDED2\uDED5-\uDED7\uDEE0-\uDEE5\uDEE9\uDEEB\uDEEC\uDEF0\uDEF3-\uDEFC\uDFE0-\uDFEB]|\uD83E[\uDD0C-\uDD3A\uDD3C-\uDD45\uDD47-\uDD78\uDD7A-\uDDCB\uDDCD-\uDDFF\uDE70-\uDE74\uDE78-\uDE7A\uDE80-\uDE86\uDE90-\uDEA8\uDEB0-\uDEB6\uDEC0-\uDEC2\uDED0-\uDED6])/,V=/\d/,U=/\s/;function q(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:[],e=i(),n=r(A),s=r(d),P=i(),q=r(S),z=[[V,s],[j,s],[$,s]],K=function(){var t=r(d);return t.j={"-":P},t.jr=[].concat(z),t},G=function(t){var e=K();return e.t=t,e};c(e,[["@",r(f)],[".",r(v)],["+",r(C)],["#",r(E)],["?",r(b)],["/",r(D)],["_",r(I)],[":",r(m)],["{",r(x)],["[",r(O)],["<",r(w)],["(",r(L)],["}",r(k)],["]",r(F)],[">",r(R)],[")",r(N)],["&",r(B)]]),u(e,[",",";","!",'"',"'"],r(g)),o(e,"\n",r(y)),a(e,U,q),o(q,"\n",i()),a(q,U,q);for(var X=0;X<H.length;X++)l(e,H[X],G(h),K);var W=K(),Z=K(),Y=K(),J=K();l(e,"file",W,K),l(e,"ftp",Z,K),l(e,"http",Y,K),l(e,"mailto",J,K);var Q=K(),tt=r(_),et=r(T);o(Z,"s",Q),o(Z,":",tt),o(Y,"s",Q),o(Y,":",tt),o(W,":",tt),o(Q,":",tt),o(J,":",et);for(var nt=K(),it=0;it<t.length;it++)l(e,t[it],nt,K);return o(nt,":",tt),l(e,"localhost",G(p),K),a(e,V,n),a(e,j,s),a(e,$,s),a(n,V,n),a(n,j,s),a(n,$,s),o(n,"-",P),o(s,"-",P),o(P,"-",P),a(s,V,s),a(s,j,s),a(s,$,s),a(P,V,s),a(P,j,s),a(P,$,s),e.jd=r(M),e}function z(t){return(z="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t})(t)}var K={defaultProtocol:"http",events:null,format:X,formatHref:X,nl2br:!1,tagName:"a",target:null,rel:null,validate:!0,truncate:0,className:null,attributes:null,ignoreTags:[]};function G(t){t=t||{},this.defaultProtocol="defaultProtocol"in t?t.defaultProtocol:K.defaultProtocol,this.events="events"in t?t.events:K.events,this.format="format"in t?t.format:K.format,this.formatHref="formatHref"in t?t.formatHref:K.formatHref,this.nl2br="nl2br"in t?t.nl2br:K.nl2br,this.tagName="tagName"in t?t.tagName:K.tagName,this.target="target"in t?t.target:K.target,this.rel="rel"in t?t.rel:K.rel,this.validate="validate"in t?t.validate:K.validate,this.truncate="truncate"in t?t.truncate:K.truncate,this.className="className"in t?t.className:K.className,this.attributes=t.attributes||K.attributes,this.ignoreTags=[];for(var e=("ignoreTags"in t?t.ignoreTags:K.ignoreTags),n=0;n<e.length;n++)this.ignoreTags.push(e[n].toUpperCase())}function X(t){return t}G.prototype={resolve:function(t){var e=t.toHref(this.defaultProtocol);return{formatted:this.get("format",t.toString(),t),formattedHref:this.get("formatHref",e,t),tagName:this.get("tagName",e,t),className:this.get("className",e,t),target:this.get("target",e,t),rel:this.get("rel",e,t),events:this.getObject("events",e,t),attributes:this.getObject("attributes",e,t),truncate:this.get("truncate",e,t)}},check:function(t){return this.get("validate",t.toString(),t)},get:function(t,e,n){var i,r=this[t];if(!r)return r;switch(z(r)){case"function":return r(e,n.t);case"object":return"function"==typeof(i=n.t in r?r[n.t]:K[t])?i(e,n.t):i}return r},getObject:function(t,e,n){var i=this[t];return"function"==typeof i?i(e,n.t):i}};function W(t,e,n){this.t=t,this.v=e,this.tk=n,this.isLink=!1}function Z(t,e){function n(e,n){this.t=t,this.v=e,this.tk=n}return function(t,e){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=Object.create(t.prototype);for(var r in n)i[r]=n[r];i.constructor=e,e.prototype=i}(W,n,e),n}W.prototype={t:"token",isLink:!1,toString:function(){return this.v},toHref:function(){return this.toString()},startIndex:function(){return this.tk[0].s},endIndex:function(){return this.tk[this.tk.length-1].e},toObject:function(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:K.defaultProtocol;return{type:this.t,value:this.v,isLink:this.isLink,href:this.toHref(t),start:this.startIndex(),end:this.endIndex()}}};var Y=Z("email",{isLink:!0}),J=Z("email",{isLink:!0,toHref:function(){return"mailto:"+this.toString()}}),Q=Z("text"),tt=Z("nl"),et=Z("url",{isLink:!0,toHref:function(){for(var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:K.defaultProtocol,e=this.tk,n=!1,i=!1,r=[],o=0;e[o].t===_;)n=!0,r.push(e[o].v),o++;for(;e[o].t===D;)i=!0,r.push(e[o].v),o++;for(;o<e.length;o++)r.push(e[o].v);return r=r.join(""),n||i||(r="".concat(t,"://").concat(r)),r},hasProtocol:function(){return this.tk[0].t===_}}),nt=Object.freeze({__proto__:null,MultiToken:W,Base:W,createTokenClass:Z,MailtoEmail:Y,Email:J,Text:Q,Nl:tt,Url:et});function it(){var t=i(),e=i(),n=i(),a=i(),s=i(),c=i(),l=i(),S=r(et),P=i(),H=r(et),j=r(et),$=i(),V=i(),U=i(),q=i(),z=i(),K=r(et),G=r(et),X=r(et),W=r(et),Z=i(),Q=i(),nt=i(),it=i(),rt=i(),ot=i(),at=r(J),st=i(),ut=r(J),ct=r(Y),lt=i(),dt=i(),pt=i(),ht=i(),ft=r(tt);o(t,y,ft),o(t,_,e),o(t,T,n),o(e,D,a),o(a,D,s),o(t,h,c),o(t,d,c),o(t,p,S),o(t,A,c),o(s,h,j),o(s,d,j),o(s,A,j),o(s,p,j),o(c,v,l),o(rt,v,ot),o(l,h,S),o(l,d,c),o(l,A,c),o(l,p,c),o(ot,h,at),o(ot,d,rt),o(ot,A,rt),o(ot,p,rt),o(S,v,l),o(at,v,ot),o(S,m,P),o(S,D,j),o(P,A,H),o(H,D,j),o(at,m,st),o(st,A,ut);var mt=[d,f,p,A,C,E,_,D,h,I,M,B],vt=[m,v,b,g,k,F,R,N,x,O,w,L];o(j,x,V),o(j,O,U),o(j,w,q),o(j,L,z),o($,x,V),o($,O,U),o($,w,q),o($,L,z),o(V,k,j),o(U,F,j),o(q,R,j),o(z,N,j),o(K,k,j),o(G,F,j),o(X,R,j),o(W,N,j),o(Z,k,j),o(Q,F,j),o(nt,R,j),o(it,N,j),u(V,mt,K),u(U,mt,G),u(q,mt,X),u(z,mt,W),u(V,vt,Z),u(U,vt,Q),u(q,vt,nt),u(z,vt,it),u(K,mt,K),u(G,mt,G),u(X,mt,X),u(W,mt,W),u(K,vt,K),u(G,vt,G),u(X,vt,X),u(W,vt,W),u(Z,mt,K),u(Q,mt,G),u(nt,mt,X),u(it,mt,W),u(Z,vt,Z),u(Q,vt,Q),u(nt,vt,nt),u(it,vt,it),u(j,mt,j),u($,mt,j),u(j,vt,$),u($,vt,$),o(n,h,ct),o(n,d,ct),o(n,A,ct),o(n,p,ct),u(ct,mt,ct),u(ct,vt,lt),u(lt,mt,ct),u(lt,vt,lt);var gt=[d,A,C,E,b,I,M,B,h];return u(c,gt,dt),o(c,f,pt),u(S,gt,dt),o(S,f,pt),u(l,gt,dt),u(dt,gt,dt),o(dt,f,pt),o(dt,v,ht),u(ht,gt,dt),o(pt,h,rt),o(pt,d,rt),o(pt,A,rt),o(pt,p,at),t}function rt(t,e,n){var i=n[0].s,r=n[n.length-1].e;return new t(e.substr(i,r-i),n)}"undefined"!=typeof console&&console&&console.warn;var ot={scanner:null,parser:null,pluginQueue:[],customProtocols:[],initialized:!1};function at(t){return ot.initialized||function(){ot.scanner={start:q(ot.customProtocols),tokens:P},ot.parser={start:it(),tokens:nt};for(var t={createTokenClass:Z},e=0;e<ot.pluginQueue.length;e++)ot.pluginQueue[e][1]({scanner:ot.scanner,parser:ot.parser,utils:t});ot.initialized=!0}(),function(t,e,n){for(var i=n.length,r=0,o=[],a=[];r<i;){for(var u=t,c=null,l=null,d=0,p=null,h=-1;r<i&&!(c=s(u,n[r].t));)a.push(n[r++]);for(;r<i&&(l=c||s(u,n[r].t));)c=null,(u=l).accepts()?(h=0,p=u):h>=0&&h++,r++,d++;if(h<0)for(var f=r-d;f<r;f++)a.push(n[f]);else{a.length>0&&(o.push(rt(Q,e,a)),a=[]),r-=h,d-=h;var m=p.t,v=n.slice(r-d,r);o.push(rt(m,e,v))}}return a.length>0&&o.push(rt(Q,e,a)),o}(ot.parser.start,t,function(t,e){for(var n=Array.from(e.replace(/[A-Z]/g,(function(t){return t.toLowerCase()}))),i=n.length,r=[],o=0,a=0;a<i;){for(var u=t,c=null,l=0,d=null,p=-1,h=-1;a<i&&(c=s(u,n[a]));)(u=c).accepts()?(p=0,h=0,d=u):p>=0&&(p+=n[a].length,h++),l+=n[a].length,o+=n[a].length,a++;p<0||(o-=p,a-=h,l-=p,r.push({t:d.t,v:e.substr(o-l,l),s:o-l,e:o}))}return r}(ot.scanner.start,t))}e.find=function(t){for(var e=arguments.length>1&&void 0!==arguments[1]?arguments[1]:null,n=at(t),i=[],r=0;r<n.length;r++){var o=n[r];!o.isLink||e&&o.t!==e||i.push(o.toObject())}return i}},1997:(t,e,n)=>{"use strict";t.exports=n.p+"b3fefa35b11abd5b00ca.woff"},8050:(t,e,n)=>{"use strict";t.exports=n.p+"44a3cac6961a9a4c5552.woff2"},5132:(t,e,n)=>{"use strict";t.exports=n.p+"c11b70542df09b76cffe.woff"},6744:(t,e,n)=>{"use strict";t.exports=n.p+"5edc2ac67d87479b897b.woff2"},4458:(t,e,n)=>{"use strict";t.exports=n.p+"4d0bd0d233803357b215.woff"},1186:(t,e,n)=>{"use strict";t.exports=n.p+"c678cb27addc55581299.woff2"},1397:(t,e,n)=>{"use strict";t.exports=n.p+"2041dcb86924aafa5d6e.woff"},6024:(t,e,n)=>{"use strict";t.exports=n.p+"c3881f7c047146ff546c.woff2"},1837:(t,e,n)=>{"use strict";t.exports=n.p+"f26a38706c9665a40421.woff"},4354:(t,e,n)=>{"use strict";t.exports=n.p+"955cc4e50baa5e6271a2.woff2"},7824:t=>{var e=1e3,n=60*e,i=60*n,r=24*i;function o(t,e,n,i){var r=e>=1.5*n;return Math.round(t/n)+" "+i+(r?"s":"")}t.exports=function(t,a){a=a||{};var s,u,c=typeof t;if("string"===c&&t.length>0)return function(t){if(!((t=String(t)).length>100)){var o=/^(-?(?:\d+)?\.?\d+) *(milliseconds?|msecs?|ms|seconds?|secs?|s|minutes?|mins?|m|hours?|hrs?|h|days?|d|weeks?|w|years?|yrs?|y)?$/i.exec(t);if(o){var a=parseFloat(o[1]);switch((o[2]||"ms").toLowerCase()){case"years":case"year":case"yrs":case"yr":case"y":return 315576e5*a;case"weeks":case"week":case"w":return 6048e5*a;case"days":case"day":case"d":return a*r;case"hours":case"hour":case"hrs":case"hr":case"h":return a*i;case"minutes":case"minute":case"mins":case"min":case"m":return a*n;case"seconds":case"second":case"secs":case"sec":case"s":return a*e;case"milliseconds":case"millisecond":case"msecs":case"msec":case"ms":return a;default:return}}}}(t);if("number"===c&&isFinite(t))return a.long?(s=t,(u=Math.abs(s))>=r?o(s,u,r,"day"):u>=i?o(s,u,i,"hour"):u>=n?o(s,u,n,"minute"):u>=e?o(s,u,e,"second"):s+" ms"):function(t){var o=Math.abs(t);return o>=r?Math.round(t/r)+"d":o>=i?Math.round(t/i)+"h":o>=n?Math.round(t/n)+"m":o>=e?Math.round(t/e)+"s":t+"ms"}(t);throw new Error("val is not a non-empty string or a valid number. val="+JSON.stringify(t))}},1830:(t,e)=>{e.encode=function(t){var e="";for(var n in t)t.hasOwnProperty(n)&&(e.length&&(e+="&"),e+=encodeURIComponent(n)+"="+encodeURIComponent(t[n]));return e},e.decode=function(t){for(var e={},n=t.split("&"),i=0,r=n.length;i<r;i++){var o=n[i].split("=");e[decodeURIComponent(o[0])]=decodeURIComponent(o[1])}return e}},4187:t=>{var e=/^(?:(?![^:@]+:[^:@\/]*@)(http|https|ws|wss):\/\/)?((?:(([^:@]*)(?::([^:@]*))?)?@)?((?:[a-f0-9]{0,4}:){2,7}[a-f0-9]{0,4}|[^:\/?#]*)(?::(\d*))?)(((\/(?:[^?#](?![^?#\/]*\.[^?#\/.]+(?:[?#]|$)))*\/?)?([^?#\/]*))(?:\?([^#]*))?(?:#(.*))?)/,n=["source","protocol","authority","userInfo","user","password","host","port","relative","path","directory","file","query","anchor"];t.exports=function(t){var i,r,o=t,a=t.indexOf("["),s=t.indexOf("]");-1!=a&&-1!=s&&(t=t.substring(0,a)+t.substring(a,s).replace(/:/g,";")+t.substring(s,t.length));for(var u,c,l=e.exec(t||""),d={},p=14;p--;)d[n[p]]=l[p]||"";return-1!=a&&-1!=s&&(d.source=o,d.host=d.host.substring(1,d.host.length-1).replace(/;/g,":"),d.authority=d.authority.replace("[","").replace("]","").replace(/;/g,":"),d.ipv6uri=!0),d.pathNames=(i=d.path,r=i.replace(/\/{2,9}/g,"/").split("/"),"/"!=i.substr(0,1)&&0!==i.length||r.splice(0,1),"/"==i.substr(i.length-1,1)&&r.splice(r.length-1,1),r),d.queryKey=(u=d.query,c={},u.replace(/(?:^|&)([^&=]*)=?([^&]*)/g,(function(t,e,n){e&&(c[e]=n)})),c),d}},751:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.io=e.Socket=e.Manager=e.protocol=void 0;const i=n(1775),r=n(7703),o=n(1227)("socket.io-client");t.exports=e=s;const a=e.managers={};function s(t,e){"object"==typeof t&&(e=t,t=void 0),e=e||{};const n=i.url(t,e.path||"/socket.io"),s=n.source,u=n.id,c=n.path,l=a[u]&&c in a[u].nsps;let d;return e.forceNew||e["force new connection"]||!1===e.multiplex||l?(o("ignoring socket cache for %s",s),d=new r.Manager(s,e)):(a[u]||(o("new io instance for %s",s),a[u]=new r.Manager(s,e)),d=a[u]),n.query&&!e.query&&(e.query=n.queryKey),d.socket(n.path,e)}e.io=s;var u=n(5485);Object.defineProperty(e,"protocol",{enumerable:!0,get:function(){return u.protocol}}),e.connect=s;var c=n(7703);Object.defineProperty(e,"Manager",{enumerable:!0,get:function(){return c.Manager}});var l=n(2277);Object.defineProperty(e,"Socket",{enumerable:!0,get:function(){return l.Socket}}),e.default=s},7703:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Manager=void 0;const i=n(5983),r=n(2277),o=n(5485),a=n(5657),s=n(3010),u=n(8791),c=n(1227)("socket.io-client:manager");class l extends u.StrictEventEmitter{constructor(t,e){super(),this.nsps={},this.subs=[],t&&"object"==typeof t&&(e=t,t=void 0),(e=e||{}).path=e.path||"/socket.io",this.opts=e,this.reconnection(!1!==e.reconnection),this.reconnectionAttempts(e.reconnectionAttempts||1/0),this.reconnectionDelay(e.reconnectionDelay||1e3),this.reconnectionDelayMax(e.reconnectionDelayMax||5e3),this.randomizationFactor(e.randomizationFactor||.5),this.backoff=new s({min:this.reconnectionDelay(),max:this.reconnectionDelayMax(),jitter:this.randomizationFactor()}),this.timeout(null==e.timeout?2e4:e.timeout),this._readyState="closed",this.uri=t;const n=e.parser||o;this.encoder=new n.Encoder,this.decoder=new n.Decoder,this._autoConnect=!1!==e.autoConnect,this._autoConnect&&this.open()}reconnection(t){return arguments.length?(this._reconnection=!!t,this):this._reconnection}reconnectionAttempts(t){return void 0===t?this._reconnectionAttempts:(this._reconnectionAttempts=t,this)}reconnectionDelay(t){var e;return void 0===t?this._reconnectionDelay:(this._reconnectionDelay=t,null===(e=this.backoff)||void 0===e||e.setMin(t),this)}randomizationFactor(t){var e;return void 0===t?this._randomizationFactor:(this._randomizationFactor=t,null===(e=this.backoff)||void 0===e||e.setJitter(t),this)}reconnectionDelayMax(t){var e;return void 0===t?this._reconnectionDelayMax:(this._reconnectionDelayMax=t,null===(e=this.backoff)||void 0===e||e.setMax(t),this)}timeout(t){return arguments.length?(this._timeout=t,this):this._timeout}maybeReconnectOnOpen(){!this._reconnecting&&this._reconnection&&0===this.backoff.attempts&&this.reconnect()}open(t){if(c("readyState %s",this._readyState),~this._readyState.indexOf("open"))return this;c("opening %s",this.uri),this.engine=i(this.uri,this.opts);const e=this.engine,n=this;this._readyState="opening",this.skipReconnect=!1;const r=a.on(e,"open",(function(){n.onopen(),t&&t()})),o=a.on(e,"error",(e=>{c("error"),n.cleanup(),n._readyState="closed",this.emitReserved("error",e),t?t(e):n.maybeReconnectOnOpen()}));if(!1!==this._timeout){const t=this._timeout;c("connect attempt will timeout after %d",t),0===t&&r();const n=setTimeout((()=>{c("connect attempt timed out after %d",t),r(),e.close(),e.emit("error",new Error("timeout"))}),t);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}return this.subs.push(r),this.subs.push(o),this}connect(t){return this.open(t)}onopen(){c("open"),this.cleanup(),this._readyState="open",this.emitReserved("open");const t=this.engine;this.subs.push(a.on(t,"ping",this.onping.bind(this)),a.on(t,"data",this.ondata.bind(this)),a.on(t,"error",this.onerror.bind(this)),a.on(t,"close",this.onclose.bind(this)),a.on(this.decoder,"decoded",this.ondecoded.bind(this)))}onping(){this.emitReserved("ping")}ondata(t){this.decoder.add(t)}ondecoded(t){this.emitReserved("packet",t)}onerror(t){c("error",t),this.emitReserved("error",t)}socket(t,e){let n=this.nsps[t];return n||(n=new r.Socket(this,t,e),this.nsps[t]=n),n}_destroy(t){const e=Object.keys(this.nsps);for(const t of e)if(this.nsps[t].active)return void c("socket %s is still active, skipping close",t);this._close()}_packet(t){c("writing packet %j",t);const e=this.encoder.encode(t);for(let n=0;n<e.length;n++)this.engine.write(e[n],t.options)}cleanup(){c("cleanup"),this.subs.forEach((t=>t())),this.subs.length=0,this.decoder.destroy()}_close(){c("disconnect"),this.skipReconnect=!0,this._reconnecting=!1,"opening"===this._readyState&&this.cleanup(),this.backoff.reset(),this._readyState="closed",this.engine&&this.engine.close()}disconnect(){return this._close()}onclose(t){c("onclose"),this.cleanup(),this.backoff.reset(),this._readyState="closed",this.emitReserved("close",t),this._reconnection&&!this.skipReconnect&&this.reconnect()}reconnect(){if(this._reconnecting||this.skipReconnect)return this;const t=this;if(this.backoff.attempts>=this._reconnectionAttempts)c("reconnect failed"),this.backoff.reset(),this.emitReserved("reconnect_failed"),this._reconnecting=!1;else{const e=this.backoff.duration();c("will wait %dms before reconnect attempt",e),this._reconnecting=!0;const n=setTimeout((()=>{t.skipReconnect||(c("attempting reconnect"),this.emitReserved("reconnect_attempt",t.backoff.attempts),t.skipReconnect||t.open((e=>{e?(c("reconnect attempt error"),t._reconnecting=!1,t.reconnect(),this.emitReserved("reconnect_error",e)):(c("reconnect success"),t.onreconnect())})))}),e);this.opts.autoUnref&&n.unref(),this.subs.push((function(){clearTimeout(n)}))}}onreconnect(){const t=this.backoff.attempts;this._reconnecting=!1,this.backoff.reset(),this.emitReserved("reconnect",t)}}e.Manager=l},5657:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.on=void 0,e.on=function(t,e,n){return t.on(e,n),function(){t.off(e,n)}}},2277:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Socket=void 0;const i=n(5485),r=n(5657),o=n(8791),a=n(1227)("socket.io-client:socket"),s=Object.freeze({connect:1,connect_error:1,disconnect:1,disconnecting:1,newListener:1,removeListener:1});class u extends o.StrictEventEmitter{constructor(t,e,n){super(),this.receiveBuffer=[],this.sendBuffer=[],this.ids=0,this.acks={},this.flags={},this.io=t,this.nsp=e,this.ids=0,this.acks={},this.receiveBuffer=[],this.sendBuffer=[],this.connected=!1,this.disconnected=!0,this.flags={},n&&n.auth&&(this.auth=n.auth),this.io._autoConnect&&this.open()}subEvents(){if(this.subs)return;const t=this.io;this.subs=[r.on(t,"open",this.onopen.bind(this)),r.on(t,"packet",this.onpacket.bind(this)),r.on(t,"error",this.onerror.bind(this)),r.on(t,"close",this.onclose.bind(this))]}get active(){return!!this.subs}connect(){return this.connected||(this.subEvents(),this.io._reconnecting||this.io.open(),"open"===this.io._readyState&&this.onopen()),this}open(){return this.connect()}send(...t){return t.unshift("message"),this.emit.apply(this,t),this}emit(t,...e){if(s.hasOwnProperty(t))throw new Error('"'+t+'" is a reserved event name');e.unshift(t);const n={type:i.PacketType.EVENT,data:e,options:{}};n.options.compress=!1!==this.flags.compress,"function"==typeof e[e.length-1]&&(a("emitting packet with ack id %d",this.ids),this.acks[this.ids]=e.pop(),n.id=this.ids++);const r=this.io.engine&&this.io.engine.transport&&this.io.engine.transport.writable;return!this.flags.volatile||r&&this.connected?this.connected?this.packet(n):this.sendBuffer.push(n):a("discard packet as the transport is not currently writable"),this.flags={},this}packet(t){t.nsp=this.nsp,this.io._packet(t)}onopen(){a("transport is open - connecting"),"function"==typeof this.auth?this.auth((t=>{this.packet({type:i.PacketType.CONNECT,data:t})})):this.packet({type:i.PacketType.CONNECT,data:this.auth})}onerror(t){this.connected||this.emitReserved("connect_error",t)}onclose(t){a("close (%s)",t),this.connected=!1,this.disconnected=!0,delete this.id,this.emitReserved("disconnect",t)}onpacket(t){if(t.nsp===this.nsp)switch(t.type){case i.PacketType.CONNECT:if(t.data&&t.data.sid){const e=t.data.sid;this.onconnect(e)}else this.emitReserved("connect_error",new Error("It seems you are trying to reach a Socket.IO server in v2.x with a v3.x client, but they are not compatible (more information here: https://socket.io/docs/v3/migrating-from-2-x-to-3-0/)"));break;case i.PacketType.EVENT:case i.PacketType.BINARY_EVENT:this.onevent(t);break;case i.PacketType.ACK:case i.PacketType.BINARY_ACK:this.onack(t);break;case i.PacketType.DISCONNECT:this.ondisconnect();break;case i.PacketType.CONNECT_ERROR:const e=new Error(t.data.message);e.data=t.data.data,this.emitReserved("connect_error",e)}}onevent(t){const e=t.data||[];a("emitting event %j",e),null!=t.id&&(a("attaching ack callback to event"),e.push(this.ack(t.id))),this.connected?this.emitEvent(e):this.receiveBuffer.push(Object.freeze(e))}emitEvent(t){if(this._anyListeners&&this._anyListeners.length){const e=this._anyListeners.slice();for(const n of e)n.apply(this,t)}super.emit.apply(this,t)}ack(t){const e=this;let n=!1;return function(...r){n||(n=!0,a("sending ack %j",r),e.packet({type:i.PacketType.ACK,id:t,data:r}))}}onack(t){const e=this.acks[t.id];"function"==typeof e?(a("calling ack %s with %j",t.id,t.data),e.apply(this,t.data),delete this.acks[t.id]):a("bad ack %s",t.id)}onconnect(t){a("socket connected with id %s",t),this.id=t,this.connected=!0,this.disconnected=!1,this.emitBuffered(),this.emitReserved("connect")}emitBuffered(){this.receiveBuffer.forEach((t=>this.emitEvent(t))),this.receiveBuffer=[],this.sendBuffer.forEach((t=>this.packet(t))),this.sendBuffer=[]}ondisconnect(){a("server disconnect (%s)",this.nsp),this.destroy(),this.onclose("io server disconnect")}destroy(){this.subs&&(this.subs.forEach((t=>t())),this.subs=void 0),this.io._destroy(this)}disconnect(){return this.connected&&(a("performing disconnect (%s)",this.nsp),this.packet({type:i.PacketType.DISCONNECT})),this.destroy(),this.connected&&this.onclose("io client disconnect"),this}close(){return this.disconnect()}compress(t){return this.flags.compress=t,this}get volatile(){return this.flags.volatile=!0,this}onAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.push(t),this}prependAny(t){return this._anyListeners=this._anyListeners||[],this._anyListeners.unshift(t),this}offAny(t){if(!this._anyListeners)return this;if(t){const e=this._anyListeners;for(let n=0;n<e.length;n++)if(t===e[n])return e.splice(n,1),this}else this._anyListeners=[];return this}listenersAny(){return this._anyListeners||[]}}e.Socket=u},8791:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.StrictEventEmitter=void 0;const i=n(8767);e.StrictEventEmitter=class extends i{on(t,e){return super.on(t,e),this}once(t,e){return super.once(t,e),this}emit(t,...e){return super.emit(t,...e),this}emitReserved(t,...e){return super.emit(t,...e),this}listeners(t){return super.listeners(t)}}},1775:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.url=void 0;const i=n(4187),r=n(1227)("socket.io-client:url");e.url=function(t,e="",n){let o=t;n=n||"undefined"!=typeof location&&location,null==t&&(t=n.protocol+"//"+n.host),"string"==typeof t&&("/"===t.charAt(0)&&(t="/"===t.charAt(1)?n.protocol+t:n.host+t),/^(https?|wss?):\/\//.test(t)||(r("protocol-less url %s",t),t=void 0!==n?n.protocol+"//"+t:"https://"+t),r("parse %s",t),o=i(t)),o.port||(/^(http|ws)$/.test(o.protocol)?o.port="80":/^(http|ws)s$/.test(o.protocol)&&(o.port="443")),o.path=o.path||"/";const a=-1!==o.host.indexOf(":")?"["+o.host+"]":o.host;return o.id=o.protocol+"://"+a+":"+o.port+e,o.href=o.protocol+"://"+a+(n&&n.port===o.port?"":":"+o.port),o}},7719:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.reconstructPacket=e.deconstructPacket=void 0;const i=n(2986);function r(t,e){if(!t)return t;if(i.isBinary(t)){const n={_placeholder:!0,num:e.length};return e.push(t),n}if(Array.isArray(t)){const n=new Array(t.length);for(let i=0;i<t.length;i++)n[i]=r(t[i],e);return n}if("object"==typeof t&&!(t instanceof Date)){const n={};for(const i in t)t.hasOwnProperty(i)&&(n[i]=r(t[i],e));return n}return t}function o(t,e){if(!t)return t;if(t&&t._placeholder)return e[t.num];if(Array.isArray(t))for(let n=0;n<t.length;n++)t[n]=o(t[n],e);else if("object"==typeof t)for(const n in t)t.hasOwnProperty(n)&&(t[n]=o(t[n],e));return t}e.deconstructPacket=function(t){const e=[],n=t.data,i=t;return i.data=r(n,e),i.attachments=e.length,{packet:i,buffers:e}},e.reconstructPacket=function(t,e){return t.data=o(t.data,e),t.attachments=void 0,t}},5485:(t,e,n)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.Decoder=e.Encoder=e.PacketType=e.protocol=void 0;const i=n(8767),r=n(7719),o=n(2986),a=n(1227)("socket.io-parser");var s;e.protocol=5,function(t){t[t.CONNECT=0]="CONNECT",t[t.DISCONNECT=1]="DISCONNECT",t[t.EVENT=2]="EVENT",t[t.ACK=3]="ACK",t[t.CONNECT_ERROR=4]="CONNECT_ERROR",t[t.BINARY_EVENT=5]="BINARY_EVENT",t[t.BINARY_ACK=6]="BINARY_ACK"}(s=e.PacketType||(e.PacketType={})),e.Encoder=class{encode(t){return a("encoding packet %j",t),t.type!==s.EVENT&&t.type!==s.ACK||!o.hasBinary(t)?[this.encodeAsString(t)]:(t.type=t.type===s.EVENT?s.BINARY_EVENT:s.BINARY_ACK,this.encodeAsBinary(t))}encodeAsString(t){let e=""+t.type;return t.type!==s.BINARY_EVENT&&t.type!==s.BINARY_ACK||(e+=t.attachments+"-"),t.nsp&&"/"!==t.nsp&&(e+=t.nsp+","),null!=t.id&&(e+=t.id),null!=t.data&&(e+=JSON.stringify(t.data)),a("encoded %j as %s",t,e),e}encodeAsBinary(t){const e=r.deconstructPacket(t),n=this.encodeAsString(e.packet),i=e.buffers;return i.unshift(n),i}};class u extends i{constructor(){super()}add(t){let e;if("string"==typeof t)e=this.decodeString(t),e.type===s.BINARY_EVENT||e.type===s.BINARY_ACK?(this.reconstructor=new c(e),0===e.attachments&&super.emit("decoded",e)):super.emit("decoded",e);else{if(!o.isBinary(t)&&!t.base64)throw new Error("Unknown type: "+t);if(!this.reconstructor)throw new Error("got binary data when not reconstructing a packet");e=this.reconstructor.takeBinaryData(t),e&&(this.reconstructor=null,super.emit("decoded",e))}}decodeString(t){let e=0;const n={type:Number(t.charAt(0))};if(void 0===s[n.type])throw new Error("unknown packet type "+n.type);if(n.type===s.BINARY_EVENT||n.type===s.BINARY_ACK){const i=e+1;for(;"-"!==t.charAt(++e)&&e!=t.length;);const r=t.substring(i,e);if(r!=Number(r)||"-"!==t.charAt(e))throw new Error("Illegal attachments");n.attachments=Number(r)}if("/"===t.charAt(e+1)){const i=e+1;for(;++e&&","!==t.charAt(e)&&e!==t.length;);n.nsp=t.substring(i,e)}else n.nsp="/";const i=t.charAt(e+1);if(""!==i&&Number(i)==i){const i=e+1;for(;++e;){const n=t.charAt(e);if(null==n||Number(n)!=n){--e;break}if(e===t.length)break}n.id=Number(t.substring(i,e+1))}if(t.charAt(++e)){const i=function(t){try{return JSON.parse(t)}catch(t){return!1}}(t.substr(e));if(!u.isPayloadValid(n.type,i))throw new Error("invalid payload");n.data=i}return a("decoded %s as %j",t,n),n}static isPayloadValid(t,e){switch(t){case s.CONNECT:return"object"==typeof e;case s.DISCONNECT:return void 0===e;case s.CONNECT_ERROR:return"string"==typeof e||"object"==typeof e;case s.EVENT:case s.BINARY_EVENT:return Array.isArray(e)&&e.length>0;case s.ACK:case s.BINARY_ACK:return Array.isArray(e)}}destroy(){this.reconstructor&&this.reconstructor.finishedReconstruction()}}e.Decoder=u;class c{constructor(t){this.packet=t,this.buffers=[],this.reconPack=t}takeBinaryData(t){if(this.buffers.push(t),this.buffers.length===this.reconPack.attachments){const t=r.reconstructPacket(this.reconPack,this.buffers);return this.finishedReconstruction(),t}return null}finishedReconstruction(){this.reconPack=null,this.buffers=[]}}},2986:(t,e)=>{"use strict";Object.defineProperty(e,"__esModule",{value:!0}),e.hasBinary=e.isBinary=void 0;const n="function"==typeof ArrayBuffer,i=Object.prototype.toString,r="function"==typeof Blob||"undefined"!=typeof Blob&&"[object BlobConstructor]"===i.call(Blob),o="function"==typeof File||"undefined"!=typeof File&&"[object FileConstructor]"===i.call(File);function a(t){return n&&(t instanceof ArrayBuffer||(t=>"function"==typeof ArrayBuffer.isView?ArrayBuffer.isView(t):t.buffer instanceof ArrayBuffer)(t))||r&&t instanceof Blob||o&&t instanceof File}e.isBinary=a,e.hasBinary=function t(e,n){if(!e||"object"!=typeof e)return!1;if(Array.isArray(e)){for(let n=0,i=e.length;n<i;n++)if(t(e[n]))return!0;return!1}if(a(e))return!0;if(e.toJSON&&"function"==typeof e.toJSON&&1===arguments.length)return t(e.toJSON(),!0);for(const n in e)if(Object.prototype.hasOwnProperty.call(e,n)&&t(e[n]))return!0;return!1}},3379:t=>{"use strict";var e=[];function n(t){for(var n=-1,i=0;i<e.length;i++)if(e[i].identifier===t){n=i;break}return n}function i(t,i){for(var o={},a=[],s=0;s<t.length;s++){var u=t[s],c=i.base?u[0]+i.base:u[0],l=o[c]||0,d="".concat(c," ").concat(l);o[c]=l+1;var p=n(d),h={css:u[1],media:u[2],sourceMap:u[3]};-1!==p?(e[p].references++,e[p].updater(h)):e.push({identifier:d,updater:r(h,i),references:1}),a.push(d)}return a}function r(t,e){var n=e.domAPI(e);return n.update(t),function(e){if(e){if(e.css===t.css&&e.media===t.media&&e.sourceMap===t.sourceMap)return;n.update(t=e)}else n.remove()}}t.exports=function(t,r){var o=i(t=t||[],r=r||{});return function(t){t=t||[];for(var a=0;a<o.length;a++){var s=n(o[a]);e[s].references--}for(var u=i(t,r),c=0;c<o.length;c++){var l=n(o[c]);0===e[l].references&&(e[l].updater(),e.splice(l,1))}o=u}}},569:t=>{"use strict";var e={};t.exports=function(t,n){var i=function(t){if(void 0===e[t]){var n=document.querySelector(t);if(window.HTMLIFrameElement&&n instanceof window.HTMLIFrameElement)try{n=n.contentDocument.head}catch(t){n=null}e[t]=n}return e[t]}(t);if(!i)throw new Error("Couldn't find a style target. This probably means that the value for the 'insert' parameter is invalid.");i.appendChild(n)}},9216:t=>{"use strict";t.exports=function(t){var e=document.createElement("style");return t.setAttributes(e,t.attributes),t.insert(e),e}},3565:(t,e,n)=>{"use strict";t.exports=function(t){var e=n.nc;e&&t.setAttribute("nonce",e)}},7795:t=>{"use strict";t.exports=function(t){var e=t.insertStyleElement(t);return{update:function(n){!function(t,e,n){var i=n.css,r=n.media,o=n.sourceMap;r?t.setAttribute("media",r):t.removeAttribute("media"),o&&"undefined"!=typeof btoa&&(i+="\n/*# sourceMappingURL=data:application/json;base64,".concat(btoa(unescape(encodeURIComponent(JSON.stringify(o))))," */")),e.styleTagTransform(i,t)}(e,t,n)},remove:function(){!function(t){if(null===t.parentNode)return!1;t.parentNode.removeChild(t)}(e)}}}},4589:t=>{"use strict";t.exports=function(t,e){if(e.styleSheet)e.styleSheet.cssText=t;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(t))}}},655:(t,e,n)=>{"use strict";n.d(e,{ZT:()=>r,pi:()=>o,XA:()=>a,CR:()=>s,ev:()=>u});var i=function(t,e){return(i=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,e){t.__proto__=e}||function(t,e){for(var n in e)Object.prototype.hasOwnProperty.call(e,n)&&(t[n]=e[n])})(t,e)};function r(t,e){if("function"!=typeof e&&null!==e)throw new TypeError("Class extends value "+String(e)+" is not a constructor or null");function n(){this.constructor=t}i(t,e),t.prototype=null===e?Object.create(e):(n.prototype=e.prototype,new n)}var o=function(){return(o=Object.assign||function(t){for(var e,n=1,i=arguments.length;n<i;n++)for(var r in e=arguments[n])Object.prototype.hasOwnProperty.call(e,r)&&(t[r]=e[r]);return t}).apply(this,arguments)};function a(t){var e="function"==typeof Symbol&&Symbol.iterator,n=e&&t[e],i=0;if(n)return n.call(t);if(t&&"number"==typeof t.length)return{next:function(){return t&&i>=t.length&&(t=void 0),{value:t&&t[i++],done:!t}}};throw new TypeError(e?"Object is not iterable.":"Symbol.iterator is not defined.")}function s(t,e){var n="function"==typeof Symbol&&t[Symbol.iterator];if(!n)return t;var i,r,o=n.call(t),a=[];try{for(;(void 0===e||e-- >0)&&!(i=o.next()).done;)a.push(i.value)}catch(t){r={error:t}}finally{try{i&&!i.done&&(n=o.return)&&n.call(o)}finally{if(r)throw r.error}}return a}function u(t,e,n){if(n||2===arguments.length)for(var i,r=0,o=e.length;r<o;r++)!i&&r in e||(i||(i=Array.prototype.slice.call(e,0,r)),i[r]=e[r]);return t.concat(i||e)}Object.create,Object.create},1094:function(t,e,n){t.exports=function(){"use strict";var t=Object.freeze({});function e(t){return null==t}function i(t){return null!=t}function r(t){return!0===t}function o(t){return"string"==typeof t||"number"==typeof t||"symbol"==typeof t||"boolean"==typeof t}function a(t){return null!==t&&"object"==typeof t}var s=Object.prototype.toString;function u(t){return s.call(t).slice(8,-1)}function c(t){return"[object Object]"===s.call(t)}function l(t){return"[object RegExp]"===s.call(t)}function d(t){var e=parseFloat(String(t));return e>=0&&Math.floor(e)===e&&isFinite(t)}function p(t){return i(t)&&"function"==typeof t.then&&"function"==typeof t.catch}function h(t){return null==t?"":Array.isArray(t)||c(t)&&t.toString===s?JSON.stringify(t,null,2):String(t)}function f(t){var e=parseFloat(t);return isNaN(e)?t:e}function m(t,e){for(var n=Object.create(null),i=t.split(","),r=0;r<i.length;r++)n[i[r]]=!0;return e?function(t){return n[t.toLowerCase()]}:function(t){return n[t]}}var v=m("slot,component",!0),g=m("key,ref,slot,slot-scope,is");function y(t,e){if(t.length){var n=t.indexOf(e);if(n>-1)return t.splice(n,1)}}var A=Object.prototype.hasOwnProperty;function C(t,e){return A.call(t,e)}function E(t){var e=Object.create(null);return function(n){return e[n]||(e[n]=t(n))}}var b=/-(\w)/g,D=E((function(t){return t.replace(b,(function(t,e){return e?e.toUpperCase():""}))})),I=E((function(t){return t.charAt(0).toUpperCase()+t.slice(1)})),_=/\B([A-Z])/g,T=E((function(t){return t.replace(_,"-$1").toLowerCase()}));var S=Function.prototype.bind?function(t,e){return t.bind(e)}:function(t,e){function n(n){var i=arguments.length;return i?i>1?t.apply(e,arguments):t.call(e,n):t.call(e)}return n._length=t.length,n};function x(t,e){e=e||0;for(var n=t.length-e,i=new Array(n);n--;)i[n]=t[n+e];return i}function O(t,e){for(var n in e)t[n]=e[n];return t}function w(t){for(var e={},n=0;n<t.length;n++)t[n]&&O(e,t[n]);return e}function L(t,e,n){}var k=function(t,e,n){return!1},F=function(t){return t};function R(t,e){if(t===e)return!0;var n=a(t),i=a(e);if(!n||!i)return!n&&!i&&String(t)===String(e);try{var r=Array.isArray(t),o=Array.isArray(e);if(r&&o)return t.length===e.length&&t.every((function(t,n){return R(t,e[n])}));if(t instanceof Date&&e instanceof Date)return t.getTime()===e.getTime();if(r||o)return!1;var s=Object.keys(t),u=Object.keys(e);return s.length===u.length&&s.every((function(n){return R(t[n],e[n])}))}catch(t){return!1}}function N(t,e){for(var n=0;n<t.length;n++)if(R(t[n],e))return n;return-1}function B(t){var e=!1;return function(){e||(e=!0,t.apply(this,arguments))}}var M="data-server-rendered",P=["component","directive","filter"],H=["beforeCreate","created","beforeMount","mounted","beforeUpdate","updated","beforeDestroy","destroyed","activated","deactivated","errorCaptured","serverPrefetch"],j={optionMergeStrategies:Object.create(null),silent:!1,productionTip:!0,devtools:!0,performance:!1,errorHandler:null,warnHandler:null,ignoredElements:[],keyCodes:Object.create(null),isReservedTag:k,isReservedAttr:k,isUnknownElement:k,getTagNamespace:L,parsePlatformTagName:F,mustUseProp:k,async:!0,_lifecycleHooks:H},$=/a-zA-Z\u00B7\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u037D\u037F-\u1FFF\u200C-\u200D\u203F-\u2040\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD/;function V(t){var e=(t+"").charCodeAt(0);return 36===e||95===e}function U(t,e,n,i){Object.defineProperty(t,e,{value:n,enumerable:!!i,writable:!0,configurable:!0})}var q=new RegExp("[^"+$.source+".$_\\d]");var z,K="__proto__"in{},G="undefined"!=typeof window,X="undefined"!=typeof WXEnvironment&&!!WXEnvironment.platform,W=X&&WXEnvironment.platform.toLowerCase(),Z=G&&window.navigator.userAgent.toLowerCase(),Y=Z&&/msie|trident/.test(Z),J=Z&&Z.indexOf("msie 9.0")>0,Q=Z&&Z.indexOf("edge/")>0,tt=(Z&&Z.indexOf("android"),Z&&/iphone|ipad|ipod|ios/.test(Z)||"ios"===W),et=(Z&&/chrome\/\d+/.test(Z),Z&&/phantomjs/.test(Z),Z&&Z.match(/firefox\/(\d+)/)),nt={}.watch,it=!1;if(G)try{var rt={};Object.defineProperty(rt,"passive",{get:function(){it=!0}}),window.addEventListener("test-passive",null,rt)}catch(t){}var ot=function(){return void 0===z&&(z=!G&&!X&&void 0!==n.g&&n.g.process&&"server"===n.g.process.env.VUE_ENV),z},at=G&&window.__VUE_DEVTOOLS_GLOBAL_HOOK__;function st(t){return"function"==typeof t&&/native code/.test(t.toString())}var ut,ct="undefined"!=typeof Symbol&&st(Symbol)&&"undefined"!=typeof Reflect&&st(Reflect.ownKeys);ut="undefined"!=typeof Set&&st(Set)?Set:function(){function t(){this.set=Object.create(null)}return t.prototype.has=function(t){return!0===this.set[t]},t.prototype.add=function(t){this.set[t]=!0},t.prototype.clear=function(){this.set=Object.create(null)},t}();var lt,dt,pt,ht=L,ft="undefined"!=typeof console,mt=/(?:^|[-_])(\w)/g;lt=function(t,e){var n=e?ht(e):"";j.warnHandler?j.warnHandler.call(null,t,e,n):ft&&!j.silent&&console.error("[Vue warn]: "+t+n)},dt=function(t,e){ft&&!j.silent&&console.warn("[Vue tip]: "+t+(e?ht(e):""))},pt=function(t,e){if(t.$root===t)return"<Root>";var n="function"==typeof t&&null!=t.cid?t.options:t._isVue?t.$options||t.constructor.options:t,i=n.name||n._componentTag,r=n.__file;if(!i&&r){var o=r.match(/([^/\\]+)\.vue$/);i=o&&o[1]}return(i?"<"+function(t){return t.replace(mt,(function(t){return t.toUpperCase()})).replace(/[-_]/g,"")}(i)+">":"<Anonymous>")+(r&&!1!==e?" at "+r:"")};ht=function(t){if(t._isVue&&t.$parent){for(var e=[],n=0;t;){if(e.length>0){var i=e[e.length-1];if(i.constructor===t.constructor){n++,t=t.$parent;continue}n>0&&(e[e.length-1]=[i,n],n=0)}e.push(t),t=t.$parent}return"\n\nfound in\n\n"+e.map((function(t,e){return""+(0===e?"---\x3e ":function(t,e){for(var n="";e;)e%2==1&&(n+=t),e>1&&(t+=t),e>>=1;return n}(" ",5+2*e))+(Array.isArray(t)?pt(t[0])+"... ("+t[1]+" recursive calls)":pt(t))})).join("\n")}return"\n\n(found in "+pt(t)+")"};var vt=0,gt=function(){this.id=vt++,this.subs=[]};gt.prototype.addSub=function(t){this.subs.push(t)},gt.prototype.removeSub=function(t){y(this.subs,t)},gt.prototype.depend=function(){gt.target&&gt.target.addDep(this)},gt.prototype.notify=function(){var t=this.subs.slice();j.async||t.sort((function(t,e){return t.id-e.id}));for(var e=0,n=t.length;e<n;e++)t[e].update()},gt.target=null;var yt=[];function At(t){yt.push(t),gt.target=t}function Ct(){yt.pop(),gt.target=yt[yt.length-1]}var Et=function(t,e,n,i,r,o,a,s){this.tag=t,this.data=e,this.children=n,this.text=i,this.elm=r,this.ns=void 0,this.context=o,this.fnContext=void 0,this.fnOptions=void 0,this.fnScopeId=void 0,this.key=e&&e.key,this.componentOptions=a,this.componentInstance=void 0,this.parent=void 0,this.raw=!1,this.isStatic=!1,this.isRootInsert=!0,this.isComment=!1,this.isCloned=!1,this.isOnce=!1,this.asyncFactory=s,this.asyncMeta=void 0,this.isAsyncPlaceholder=!1},bt={child:{configurable:!0}};bt.child.get=function(){return this.componentInstance},Object.defineProperties(Et.prototype,bt);var Dt=function(t){void 0===t&&(t="");var e=new Et;return e.text=t,e.isComment=!0,e};function It(t){return new Et(void 0,void 0,void 0,String(t))}function _t(t){var e=new Et(t.tag,t.data,t.children&&t.children.slice(),t.text,t.elm,t.context,t.componentOptions,t.asyncFactory);return e.ns=t.ns,e.isStatic=t.isStatic,e.key=t.key,e.isComment=t.isComment,e.fnContext=t.fnContext,e.fnOptions=t.fnOptions,e.fnScopeId=t.fnScopeId,e.asyncMeta=t.asyncMeta,e.isCloned=!0,e}var Tt=Array.prototype,St=Object.create(Tt);["push","pop","shift","unshift","splice","sort","reverse"].forEach((function(t){var e=Tt[t];U(St,t,(function(){for(var n=[],i=arguments.length;i--;)n[i]=arguments[i];var r,o=e.apply(this,n),a=this.__ob__;switch(t){case"push":case"unshift":r=n;break;case"splice":r=n.slice(2)}return r&&a.observeArray(r),a.dep.notify(),o}))}));var xt=Object.getOwnPropertyNames(St),Ot=!0;function wt(t){Ot=t}var Lt=function(t){this.value=t,this.dep=new gt,this.vmCount=0,U(t,"__ob__",this),Array.isArray(t)?(K?function(t,e){t.__proto__=e}(t,St):function(t,e,n){for(var i=0,r=n.length;i<r;i++){var o=n[i];U(t,o,e[o])}}(t,St,xt),this.observeArray(t)):this.walk(t)};function kt(t,e){var n;if(a(t)&&!(t instanceof Et))return C(t,"__ob__")&&t.__ob__ instanceof Lt?n=t.__ob__:Ot&&!ot()&&(Array.isArray(t)||c(t))&&Object.isExtensible(t)&&!t._isVue&&(n=new Lt(t)),e&&n&&n.vmCount++,n}function Ft(t,e,n,i,r){var o=new gt,a=Object.getOwnPropertyDescriptor(t,e);if(!a||!1!==a.configurable){var s=a&&a.get,u=a&&a.set;s&&!u||2!==arguments.length||(n=t[e]);var c=!r&&kt(n);Object.defineProperty(t,e,{enumerable:!0,configurable:!0,get:function(){var e=s?s.call(t):n;return gt.target&&(o.depend(),c&&(c.dep.depend(),Array.isArray(e)&&Bt(e))),e},set:function(e){var a=s?s.call(t):n;e===a||e!=e&&a!=a||(i&&i(),s&&!u||(u?u.call(t,e):n=e,c=!r&&kt(e),o.notify()))}})}}function Rt(t,n,i){if((e(t)||o(t))&&lt("Cannot set reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&d(n))return t.length=Math.max(t.length,n),t.splice(n,1,i),i;if(n in t&&!(n in Object.prototype))return t[n]=i,i;var r=t.__ob__;return t._isVue||r&&r.vmCount?(lt("Avoid adding reactive properties to a Vue instance or its root $data at runtime - declare it upfront in the data option."),i):r?(Ft(r.value,n,i),r.dep.notify(),i):(t[n]=i,i)}function Nt(t,n){if((e(t)||o(t))&&lt("Cannot delete reactive property on undefined, null, or primitive value: "+t),Array.isArray(t)&&d(n))t.splice(n,1);else{var i=t.__ob__;t._isVue||i&&i.vmCount?lt("Avoid deleting properties on a Vue instance or its root $data - just set it to null."):C(t,n)&&(delete t[n],i&&i.dep.notify())}}function Bt(t){for(var e=void 0,n=0,i=t.length;n<i;n++)(e=t[n])&&e.__ob__&&e.__ob__.dep.depend(),Array.isArray(e)&&Bt(e)}Lt.prototype.walk=function(t){for(var e=Object.keys(t),n=0;n<e.length;n++)Ft(t,e[n])},Lt.prototype.observeArray=function(t){for(var e=0,n=t.length;e<n;e++)kt(t[e])};var Mt=j.optionMergeStrategies;function Pt(t,e){if(!e)return t;for(var n,i,r,o=ct?Reflect.ownKeys(e):Object.keys(e),a=0;a<o.length;a++)"__ob__"!==(n=o[a])&&(i=t[n],r=e[n],C(t,n)?i!==r&&c(i)&&c(r)&&Pt(i,r):Rt(t,n,r));return t}function Ht(t,e,n){return n?function(){var i="function"==typeof e?e.call(n,n):e,r="function"==typeof t?t.call(n,n):t;return i?Pt(i,r):r}:e?t?function(){return Pt("function"==typeof e?e.call(this,this):e,"function"==typeof t?t.call(this,this):t)}:e:t}function jt(t,e){var n=e?t?t.concat(e):Array.isArray(e)?e:[e]:t;return n?function(t){for(var e=[],n=0;n<t.length;n++)-1===e.indexOf(t[n])&&e.push(t[n]);return e}(n):n}function $t(t,e,n,i){var r=Object.create(t||null);return e?(qt(i,e,n),O(r,e)):r}Mt.el=Mt.propsData=function(t,e,n,i){return n||lt('option "'+i+'" can only be used during instance creation with the `new` keyword.'),Vt(t,e)},Mt.data=function(t,e,n){return n?Ht(t,e,n):e&&"function"!=typeof e?(lt('The "data" option should be a function that returns a per-instance value in component definitions.',n),t):Ht(t,e)},H.forEach((function(t){Mt[t]=jt})),P.forEach((function(t){Mt[t+"s"]=$t})),Mt.watch=function(t,e,n,i){if(t===nt&&(t=void 0),e===nt&&(e=void 0),!e)return Object.create(t||null);if(qt(i,e,n),!t)return e;var r={};for(var o in O(r,t),e){var a=r[o],s=e[o];a&&!Array.isArray(a)&&(a=[a]),r[o]=a?a.concat(s):Array.isArray(s)?s:[s]}return r},Mt.props=Mt.methods=Mt.inject=Mt.computed=function(t,e,n,i){if(e&&qt(i,e,n),!t)return e;var r=Object.create(null);return O(r,t),e&&O(r,e),r},Mt.provide=Ht;var Vt=function(t,e){return void 0===e?t:e};function Ut(t){new RegExp("^[a-zA-Z][\\-\\.0-9_"+$.source+"]*$").test(t)||lt('Invalid component name: "'+t+'". Component names should conform to valid custom element name in html5 specification.'),(v(t)||j.isReservedTag(t))&&lt("Do not use built-in or reserved HTML elements as component id: "+t)}function qt(t,e,n){c(e)||lt('Invalid value for option "'+t+'": expected an Object, but got '+u(e)+".",n)}function zt(t,e,n){if(function(t){for(var e in t.components)Ut(e)}(e),"function"==typeof e&&(e=e.options),function(t,e){var n=t.props;if(n){var i,r,o={};if(Array.isArray(n))for(i=n.length;i--;)"string"==typeof(r=n[i])?o[D(r)]={type:null}:lt("props must be strings when using array syntax.");else if(c(n))for(var a in n)r=n[a],o[D(a)]=c(r)?r:{type:r};else lt('Invalid value for option "props": expected an Array or an Object, but got '+u(n)+".",e);t.props=o}}(e,n),function(t,e){var n=t.inject;if(n){var i=t.inject={};if(Array.isArray(n))for(var r=0;r<n.length;r++)i[n[r]]={from:n[r]};else if(c(n))for(var o in n){var a=n[o];i[o]=c(a)?O({from:o},a):{from:a}}else lt('Invalid value for option "inject": expected an Array or an Object, but got '+u(n)+".",e)}}(e,n),function(t){var e=t.directives;if(e)for(var n in e){var i=e[n];"function"==typeof i&&(e[n]={bind:i,update:i})}}(e),!e._base&&(e.extends&&(t=zt(t,e.extends,n)),e.mixins))for(var i=0,r=e.mixins.length;i<r;i++)t=zt(t,e.mixins[i],n);var o,a={};for(o in t)s(o);for(o in e)C(t,o)||s(o);function s(i){var r=Mt[i]||Vt;a[i]=r(t[i],e[i],n,i)}return a}function Kt(t,e,n,i){if("string"==typeof n){var r=t[e];if(C(r,n))return r[n];var o=D(n);if(C(r,o))return r[o];var a=I(o);if(C(r,a))return r[a];var s=r[n]||r[o]||r[a];return i&&!s&&lt("Failed to resolve "+e.slice(0,-1)+": "+n,t),s}}function Gt(t,e,n,i){var r=e[t],o=!C(n,t),s=n[t],c=Qt(Boolean,r.type);if(c>-1)if(o&&!C(r,"default"))s=!1;else if(""===s||s===T(t)){var l=Qt(String,r.type);(l<0||c<l)&&(s=!0)}if(void 0===s){s=function(t,e,n){if(C(e,"default")){var i=e.default;return a(i)&&lt('Invalid default value for prop "'+n+'": Props with type Object/Array must use a factory function to return the default value.',t),t&&t.$options.propsData&&void 0===t.$options.propsData[n]&&void 0!==t._props[n]?t._props[n]:"function"==typeof i&&"Function"!==Yt(e.type)?i.call(t):i}}(i,r,t);var d=Ot;wt(!0),kt(s),wt(d)}return function(t,e,n,i,r){if(t.required&&r)lt('Missing required prop: "'+e+'"',i);else if(null!=n||t.required){var o=t.type,a=!o||!0===o,s=[];if(o){Array.isArray(o)||(o=[o]);for(var c=0;c<o.length&&!a;c++){var l=Wt(n,o[c],i);s.push(l.expectedType||""),a=l.valid}}var d=s.some((function(t){return t}));if(a||!d){var p=t.validator;p&&(p(n)||lt('Invalid prop: custom validator check failed for prop "'+e+'".',i))}else lt(function(t,e,n){var i='Invalid prop: type check failed for prop "'+t+'". Expected '+n.map(I).join(", "),r=n[0],o=u(e);return 1===n.length&&ne(r)&&ne(typeof e)&&!function(){for(var t=[],e=arguments.length;e--;)t[e]=arguments[e];return t.some((function(t){return"boolean"===t.toLowerCase()}))}(r,o)&&(i+=" with value "+te(e,r)),i+=", got "+o+" ",ne(o)&&(i+="with value "+te(e,o)+"."),i}(e,n,s),i)}}(r,t,s,i,o),s}var Xt=/^(String|Number|Boolean|Function|Symbol|BigInt)$/;function Wt(t,e,n){var i,r=Yt(e);if(Xt.test(r)){var o=typeof t;(i=o===r.toLowerCase())||"object"!==o||(i=t instanceof e)}else if("Object"===r)i=c(t);else if("Array"===r)i=Array.isArray(t);else try{i=t instanceof e}catch(t){lt('Invalid prop type: "'+String(e)+'" is not a constructor',n),i=!1}return{valid:i,expectedType:r}}var Zt=/^\s*function (\w+)/;function Yt(t){var e=t&&t.toString().match(Zt);return e?e[1]:""}function Jt(t,e){return Yt(t)===Yt(e)}function Qt(t,e){if(!Array.isArray(e))return Jt(e,t)?0:-1;for(var n=0,i=e.length;n<i;n++)if(Jt(e[n],t))return n;return-1}function te(t,e){return"String"===e?'"'+t+'"':"Number"===e?""+Number(t):""+t}var ee=["string","number","boolean"];function ne(t){return ee.some((function(e){return t.toLowerCase()===e}))}function ie(t,e,n){At();try{if(e)for(var i=e;i=i.$parent;){var r=i.$options.errorCaptured;if(r)for(var o=0;o<r.length;o++)try{if(!1===r[o].call(i,t,e,n))return}catch(t){oe(t,i,"errorCaptured hook")}}oe(t,e,n)}finally{Ct()}}function re(t,e,n,i,r){var o;try{(o=n?t.apply(e,n):t.call(e))&&!o._isVue&&p(o)&&!o._handled&&(o.catch((function(t){return ie(t,i,r+" (Promise/async)")})),o._handled=!0)}catch(t){ie(t,i,r)}return o}function oe(t,e,n){if(j.errorHandler)try{return j.errorHandler.call(null,t,e,n)}catch(e){e!==t&&ae(e,null,"config.errorHandler")}ae(t,e,n)}function ae(t,e,n){if(lt("Error in "+n+': "'+t.toString()+'"',e),!G&&!X||"undefined"==typeof console)throw t;console.error(t)}var se,ue,ce,le=!1,de=[],pe=!1;function he(){pe=!1;var t=de.slice(0);de.length=0;for(var e=0;e<t.length;e++)t[e]()}if("undefined"!=typeof Promise&&st(Promise)){var fe=Promise.resolve();se=function(){fe.then(he),tt&&setTimeout(L)},le=!0}else if(Y||"undefined"==typeof MutationObserver||!st(MutationObserver)&&"[object MutationObserverConstructor]"!==MutationObserver.toString())se="undefined"!=typeof setImmediate&&st(setImmediate)?function(){setImmediate(he)}:function(){setTimeout(he,0)};else{var me=1,ve=new MutationObserver(he),ge=document.createTextNode(String(me));ve.observe(ge,{characterData:!0}),se=function(){me=(me+1)%2,ge.data=String(me)},le=!0}function ye(t,e){var n;if(de.push((function(){if(t)try{t.call(e)}catch(t){ie(t,e,"nextTick")}else n&&n(e)})),pe||(pe=!0,se()),!t&&"undefined"!=typeof Promise)return new Promise((function(t){n=t}))}var Ae,Ce=G&&window.performance;Ce&&Ce.mark&&Ce.measure&&Ce.clearMarks&&Ce.clearMeasures&&(ue=function(t){return Ce.mark(t)},ce=function(t,e,n){Ce.measure(t,e,n),Ce.clearMarks(e),Ce.clearMarks(n)});var Ee=m("Infinity,undefined,NaN,isFinite,isNaN,parseFloat,parseInt,decodeURI,decodeURIComponent,encodeURI,encodeURIComponent,Math,Number,Date,Array,Object,Boolean,String,RegExp,Map,Set,JSON,Intl,BigInt,require"),be=function(t,e){lt('Property or method "'+e+'" is not defined on the instance but referenced during render. Make sure that this property is reactive, either in the data option, or for class-based components, by initializing the property. See: https://vuejs.org/v2/guide/reactivity.html#Declaring-Reactive-Properties.',t)},De=function(t,e){lt('Property "'+e+'" must be accessed with "$data.'+e+'" because properties starting with "$" or "_" are not proxied in the Vue instance to prevent conflicts with Vue internals. See: https://vuejs.org/v2/api/#data',t)},Ie="undefined"!=typeof Proxy&&st(Proxy);if(Ie){var _e=m("stop,prevent,self,ctrl,shift,alt,meta,exact");j.keyCodes=new Proxy(j.keyCodes,{set:function(t,e,n){return _e(e)?(lt("Avoid overwriting built-in modifier in config.keyCodes: ."+e),!1):(t[e]=n,!0)}})}var Te={has:function(t,e){var n=e in t,i=Ee(e)||"string"==typeof e&&"_"===e.charAt(0)&&!(e in t.$data);return n||i||(e in t.$data?De(t,e):be(t,e)),n||!i}},Se={get:function(t,e){return"string"!=typeof e||e in t||(e in t.$data?De(t,e):be(t,e)),t[e]}};Ae=function(t){if(Ie){var e=t.$options,n=e.render&&e.render._withStripped?Se:Te;t._renderProxy=new Proxy(t,n)}else t._renderProxy=t};var xe=new ut;function Oe(t){we(t,xe),xe.clear()}function we(t,e){var n,i,r=Array.isArray(t);if(!(!r&&!a(t)||Object.isFrozen(t)||t instanceof Et)){if(t.__ob__){var o=t.__ob__.dep.id;if(e.has(o))return;e.add(o)}if(r)for(n=t.length;n--;)we(t[n],e);else for(n=(i=Object.keys(t)).length;n--;)we(t[i[n]],e)}}var Le=E((function(t){var e="&"===t.charAt(0),n="~"===(t=e?t.slice(1):t).charAt(0),i="!"===(t=n?t.slice(1):t).charAt(0);return{name:t=i?t.slice(1):t,once:n,capture:i,passive:e}}));function ke(t,e){function n(){var t=arguments,i=n.fns;if(!Array.isArray(i))return re(i,null,arguments,e,"v-on handler");for(var r=i.slice(),o=0;o<r.length;o++)re(r[o],null,t,e,"v-on handler")}return n.fns=t,n}function Fe(t,n,i,o,a,s){var u,c,l,d;for(u in t)c=t[u],l=n[u],d=Le(u),e(c)?lt('Invalid handler for event "'+d.name+'": got '+String(c),s):e(l)?(e(c.fns)&&(c=t[u]=ke(c,s)),r(d.once)&&(c=t[u]=a(d.name,c,d.capture)),i(d.name,c,d.capture,d.passive,d.params)):c!==l&&(l.fns=c,t[u]=l);for(u in n)e(t[u])&&o((d=Le(u)).name,n[u],d.capture)}function Re(t,n,o){var a;t instanceof Et&&(t=t.data.hook||(t.data.hook={}));var s=t[n];function u(){o.apply(this,arguments),y(a.fns,u)}e(s)?a=ke([u]):i(s.fns)&&r(s.merged)?(a=s).fns.push(u):a=ke([s,u]),a.merged=!0,t[n]=a}function Ne(t,e,n,r,o){if(i(e)){if(C(e,n))return t[n]=e[n],o||delete e[n],!0;if(C(e,r))return t[n]=e[r],o||delete e[r],!0}return!1}function Be(t){return o(t)?[It(t)]:Array.isArray(t)?Pe(t):void 0}function Me(t){return i(t)&&i(t.text)&&!1===t.isComment}function Pe(t,n){var a,s,u,c,l=[];for(a=0;a<t.length;a++)e(s=t[a])||"boolean"==typeof s||(c=l[u=l.length-1],Array.isArray(s)?s.length>0&&(Me((s=Pe(s,(n||"")+"_"+a))[0])&&Me(c)&&(l[u]=It(c.text+s[0].text),s.shift()),l.push.apply(l,s)):o(s)?Me(c)?l[u]=It(c.text+s):""!==s&&l.push(It(s)):Me(s)&&Me(c)?l[u]=It(c.text+s.text):(r(t._isVList)&&i(s.tag)&&e(s.key)&&i(n)&&(s.key="__vlist"+n+"_"+a+"__"),l.push(s)));return l}function He(t,e){if(t){for(var n=Object.create(null),i=ct?Reflect.ownKeys(t):Object.keys(t),r=0;r<i.length;r++){var o=i[r];if("__ob__"!==o){for(var a=t[o].from,s=e;s;){if(s._provided&&C(s._provided,a)){n[o]=s._provided[a];break}s=s.$parent}if(!s)if("default"in t[o]){var u=t[o].default;n[o]="function"==typeof u?u.call(e):u}else lt('Injection "'+o+'" not found',e)}}return n}}function je(t,e){if(!t||!t.length)return{};for(var n={},i=0,r=t.length;i<r;i++){var o=t[i],a=o.data;if(a&&a.attrs&&a.attrs.slot&&delete a.attrs.slot,o.context!==e&&o.fnContext!==e||!a||null==a.slot)(n.default||(n.default=[])).push(o);else{var s=a.slot,u=n[s]||(n[s]=[]);"template"===o.tag?u.push.apply(u,o.children||[]):u.push(o)}}for(var c in n)n[c].every($e)&&delete n[c];return n}function $e(t){return t.isComment&&!t.asyncFactory||" "===t.text}function Ve(t){return t.isComment&&t.asyncFactory}function Ue(e,n,i){var r,o=Object.keys(n).length>0,a=e?!!e.$stable:!o,s=e&&e.$key;if(e){if(e._normalized)return e._normalized;if(a&&i&&i!==t&&s===i.$key&&!o&&!i.$hasNormal)return i;for(var u in r={},e)e[u]&&"$"!==u[0]&&(r[u]=qe(n,u,e[u]))}else r={};for(var c in n)c in r||(r[c]=ze(n,c));return e&&Object.isExtensible(e)&&(e._normalized=r),U(r,"$stable",a),U(r,"$key",s),U(r,"$hasNormal",o),r}function qe(t,e,n){var i=function(){var t=arguments.length?n.apply(null,arguments):n({}),e=(t=t&&"object"==typeof t&&!Array.isArray(t)?[t]:Be(t))&&t[0];return t&&(!e||1===t.length&&e.isComment&&!Ve(e))?void 0:t};return n.proxy&&Object.defineProperty(t,e,{get:i,enumerable:!0,configurable:!0}),i}function ze(t,e){return function(){return t[e]}}function Ke(t,e){var n,r,o,s,u;if(Array.isArray(t)||"string"==typeof t)for(n=new Array(t.length),r=0,o=t.length;r<o;r++)n[r]=e(t[r],r);else if("number"==typeof t)for(n=new Array(t),r=0;r<t;r++)n[r]=e(r+1,r);else if(a(t))if(ct&&t[Symbol.iterator]){n=[];for(var c=t[Symbol.iterator](),l=c.next();!l.done;)n.push(e(l.value,n.length)),l=c.next()}else for(s=Object.keys(t),n=new Array(s.length),r=0,o=s.length;r<o;r++)u=s[r],n[r]=e(t[u],u,r);return i(n)||(n=[]),n._isVList=!0,n}function Ge(t,e,n,i){var r,o=this.$scopedSlots[t];o?(n=n||{},i&&(a(i)||lt("slot v-bind without argument expects an Object",this),n=O(O({},i),n)),r=o(n)||("function"==typeof e?e():e)):r=this.$slots[t]||("function"==typeof e?e():e);var s=n&&n.slot;return s?this.$createElement("template",{slot:s},r):r}function Xe(t){return Kt(this.$options,"filters",t,!0)||F}function We(t,e){return Array.isArray(t)?-1===t.indexOf(e):t!==e}function Ze(t,e,n,i,r){var o=j.keyCodes[e]||n;return r&&i&&!j.keyCodes[e]?We(r,i):o?We(o,t):i?T(i)!==e:void 0===t}function Ye(t,e,n,i,r){if(n)if(a(n)){var o;Array.isArray(n)&&(n=w(n));var s=function(a){if("class"===a||"style"===a||g(a))o=t;else{var s=t.attrs&&t.attrs.type;o=i||j.mustUseProp(e,s,a)?t.domProps||(t.domProps={}):t.attrs||(t.attrs={})}var u=D(a),c=T(a);u in o||c in o||(o[a]=n[a],r&&((t.on||(t.on={}))["update:"+a]=function(t){n[a]=t}))};for(var u in n)s(u)}else lt("v-bind without argument expects an Object or Array value",this);return t}function Je(t,e){var n=this._staticTrees||(this._staticTrees=[]),i=n[t];return i&&!e||tn(i=n[t]=this.$options.staticRenderFns[t].call(this._renderProxy,null,this),"__static__"+t,!1),i}function Qe(t,e,n){return tn(t,"__once__"+e+(n?"_"+n:""),!0),t}function tn(t,e,n){if(Array.isArray(t))for(var i=0;i<t.length;i++)t[i]&&"string"!=typeof t[i]&&en(t[i],e+"_"+i,n);else en(t,e,n)}function en(t,e,n){t.isStatic=!0,t.key=e,t.isOnce=n}function nn(t,e){if(e)if(c(e)){var n=t.on=t.on?O({},t.on):{};for(var i in e){var r=n[i],o=e[i];n[i]=r?[].concat(r,o):o}}else lt("v-on without argument expects an Object value",this);return t}function rn(t,e,n,i){e=e||{$stable:!n};for(var r=0;r<t.length;r++){var o=t[r];Array.isArray(o)?rn(o,e,n):o&&(o.proxy&&(o.fn.proxy=!0),e[o.key]=o.fn)}return i&&(e.$key=i),e}function on(t,e){for(var n=0;n<e.length;n+=2){var i=e[n];"string"==typeof i&&i?t[e[n]]=e[n+1]:""!==i&&null!==i&&lt("Invalid value for dynamic directive argument (expected string or null): "+i,this)}return t}function an(t,e){return"string"==typeof t?e+t:t}function sn(t){t._o=Qe,t._n=f,t._s=h,t._l=Ke,t._t=Ge,t._q=R,t._i=N,t._m=Je,t._f=Xe,t._k=Ze,t._b=Ye,t._v=It,t._e=Dt,t._u=rn,t._g=nn,t._d=on,t._p=an}function un(e,n,i,o,a){var s,u=this,c=a.options;C(o,"_uid")?(s=Object.create(o))._original=o:(s=o,o=o._original);var l=r(c._compiled),d=!l;this.data=e,this.props=n,this.children=i,this.parent=o,this.listeners=e.on||t,this.injections=He(c.inject,o),this.slots=function(){return u.$slots||Ue(e.scopedSlots,u.$slots=je(i,o)),u.$slots},Object.defineProperty(this,"scopedSlots",{enumerable:!0,get:function(){return Ue(e.scopedSlots,this.slots())}}),l&&(this.$options=c,this.$slots=this.slots(),this.$scopedSlots=Ue(e.scopedSlots,this.$slots)),c._scopeId?this._c=function(t,e,n,i){var r=mn(s,t,e,n,i,d);return r&&!Array.isArray(r)&&(r.fnScopeId=c._scopeId,r.fnContext=o),r}:this._c=function(t,e,n,i){return mn(s,t,e,n,i,d)}}function cn(t,e,n,i,r){var o=_t(t);return o.fnContext=n,o.fnOptions=i,(o.devtoolsMeta=o.devtoolsMeta||{}).renderContext=r,e.slot&&((o.data||(o.data={})).slot=e.slot),o}function ln(t,e){for(var n in e)t[D(n)]=e[n]}sn(un.prototype);var dn={init:function(t,e){if(t.componentInstance&&!t.componentInstance._isDestroyed&&t.data.keepAlive){var n=t;dn.prepatch(n,n)}else(t.componentInstance=function(t,e){var n={_isComponent:!0,_parentVnode:t,parent:e},r=t.data.inlineTemplate;return i(r)&&(n.render=r.render,n.staticRenderFns=r.staticRenderFns),new t.componentOptions.Ctor(n)}(t,_n)).$mount(e?t.elm:void 0,e)},prepatch:function(e,n){var i=n.componentOptions;!function(e,n,i,r,o){Tn=!0;var a=r.data.scopedSlots,s=e.$scopedSlots,u=!!(a&&!a.$stable||s!==t&&!s.$stable||a&&e.$scopedSlots.$key!==a.$key||!a&&e.$scopedSlots.$key),c=!!(o||e.$options._renderChildren||u);if(e.$options._parentVnode=r,e.$vnode=r,e._vnode&&(e._vnode.parent=r),e.$options._renderChildren=o,e.$attrs=r.data.attrs||t,e.$listeners=i||t,n&&e.$options.props){wt(!1);for(var l=e._props,d=e.$options._propKeys||[],p=0;p<d.length;p++){var h=d[p],f=e.$options.props;l[h]=Gt(h,f,n,e)}wt(!0),e.$options.propsData=n}i=i||t;var m=e.$options._parentListeners;e.$options._parentListeners=i,In(e,i,m),c&&(e.$slots=je(o,r.context),e.$forceUpdate()),Tn=!1}(n.componentInstance=e.componentInstance,i.propsData,i.listeners,n,i.children)},insert:function(t){var e,n=t.context,i=t.componentInstance;i._isMounted||(i._isMounted=!0,Ln(i,"mounted")),t.data.keepAlive&&(n._isMounted?((e=i)._inactive=!1,Fn.push(e)):On(i,!0))},destroy:function(t){var e=t.componentInstance;e._isDestroyed||(t.data.keepAlive?wn(e,!0):e.$destroy())}},pn=Object.keys(dn);function hn(n,o,s,u,c){if(!e(n)){var l=s.$options._base;if(a(n)&&(n=l.extend(n)),"function"==typeof n){var d;if(e(n.cid)&&void 0===(n=function(t,n){if(r(t.error)&&i(t.errorComp))return t.errorComp;if(i(t.resolved))return t.resolved;var o=yn;if(o&&i(t.owners)&&-1===t.owners.indexOf(o)&&t.owners.push(o),r(t.loading)&&i(t.loadingComp))return t.loadingComp;if(o&&!i(t.owners)){var s=t.owners=[o],u=!0,c=null,l=null;o.$on("hook:destroyed",(function(){return y(s,o)}));var d=function(t){for(var e=0,n=s.length;e<n;e++)s[e].$forceUpdate();t&&(s.length=0,null!==c&&(clearTimeout(c),c=null),null!==l&&(clearTimeout(l),l=null))},h=B((function(e){t.resolved=An(e,n),u?s.length=0:d(!0)})),f=B((function(e){lt("Failed to resolve async component: "+String(t)+(e?"\nReason: "+e:"")),i(t.errorComp)&&(t.error=!0,d(!0))})),m=t(h,f);return a(m)&&(p(m)?e(t.resolved)&&m.then(h,f):p(m.component)&&(m.component.then(h,f),i(m.error)&&(t.errorComp=An(m.error,n)),i(m.loading)&&(t.loadingComp=An(m.loading,n),0===m.delay?t.loading=!0:c=setTimeout((function(){c=null,e(t.resolved)&&e(t.error)&&(t.loading=!0,d(!1))}),m.delay||200)),i(m.timeout)&&(l=setTimeout((function(){l=null,e(t.resolved)&&f("timeout ("+m.timeout+"ms)")}),m.timeout)))),u=!1,t.loading?t.loadingComp:t.resolved}}(d=n,l)))return function(t,e,n,i,r){var o=Dt();return o.asyncFactory=t,o.asyncMeta={data:e,context:n,children:i,tag:r},o}(d,o,s,u,c);o=o||{},ti(n),i(o.model)&&function(t,e){var n=t.model&&t.model.prop||"value",r=t.model&&t.model.event||"input";(e.attrs||(e.attrs={}))[n]=e.model.value;var o=e.on||(e.on={}),a=o[r],s=e.model.callback;i(a)?(Array.isArray(a)?-1===a.indexOf(s):a!==s)&&(o[r]=[s].concat(a)):o[r]=s}(n.options,o);var h=function(t,n,r){var o=n.options.props;if(!e(o)){var a={},s=t.attrs,u=t.props;if(i(s)||i(u))for(var c in o){var l=T(c),d=c.toLowerCase();c!==d&&s&&C(s,d)&&dt('Prop "'+d+'" is passed to component '+pt(r||n)+', but the declared prop name is "'+c+'". Note that HTML attributes are case-insensitive and camelCased props need to use their kebab-case equivalents when using in-DOM templates. You should probably use "'+l+'" instead of "'+c+'".'),Ne(a,u,c,l,!0)||Ne(a,s,c,l,!1)}return a}}(o,n,c);if(r(n.options.functional))return function(e,n,r,o,a){var s=e.options,u={},c=s.props;if(i(c))for(var l in c)u[l]=Gt(l,c,n||t);else i(r.attrs)&&ln(u,r.attrs),i(r.props)&&ln(u,r.props);var d=new un(r,u,a,o,e),p=s.render.call(null,d._c,d);if(p instanceof Et)return cn(p,r,d.parent,s,d);if(Array.isArray(p)){for(var h=Be(p)||[],f=new Array(h.length),m=0;m<h.length;m++)f[m]=cn(h[m],r,d.parent,s,d);return f}}(n,h,o,s,u);var f=o.on;if(o.on=o.nativeOn,r(n.options.abstract)){var m=o.slot;o={},m&&(o.slot=m)}!function(t){for(var e=t.hook||(t.hook={}),n=0;n<pn.length;n++){var i=pn[n],r=e[i],o=dn[i];r===o||r&&r._merged||(e[i]=r?fn(o,r):o)}}(o);var v=n.options.name||c;return new Et("vue-component-"+n.cid+(v?"-"+v:""),o,void 0,void 0,void 0,s,{Ctor:n,propsData:h,listeners:f,tag:c,children:u},d)}lt("Invalid Component definition: "+String(n),s)}}function fn(t,e){var n=function(n,i){t(n,i),e(n,i)};return n._merged=!0,n}function mn(t,e,n,s,u,c){return(Array.isArray(n)||o(n))&&(u=s,s=n,n=void 0),r(c)&&(u=2),function(t,e,n,r,s){return i(n)&&i(n.__ob__)?(lt("Avoid using observed data object as vnode data: "+JSON.stringify(n)+"\nAlways create fresh vnode data objects in each render!",t),Dt()):(i(n)&&i(n.is)&&(e=n.is),e?(i(n)&&i(n.key)&&!o(n.key)&&lt("Avoid using non-primitive value as key, use string/number value instead.",t),Array.isArray(r)&&"function"==typeof r[0]&&((n=n||{}).scopedSlots={default:r[0]},r.length=0),2===s?r=Be(r):1===s&&(r=function(t){for(var e=0;e<t.length;e++)if(Array.isArray(t[e]))return Array.prototype.concat.apply([],t);return t}(r)),"string"==typeof e?(c=t.$vnode&&t.$vnode.ns||j.getTagNamespace(e),j.isReservedTag(e)?(i(n)&&i(n.nativeOn)&&"component"!==n.tag&&lt("The .native modifier for v-on is only valid on components but it was used on <"+e+">.",t),u=new Et(j.parsePlatformTagName(e),n,r,void 0,void 0,t)):u=n&&n.pre||!i(l=Kt(t.$options,"components",e))?new Et(e,n,r,void 0,void 0,t):hn(l,n,t,r,e)):u=hn(e,n,t,r),Array.isArray(u)?u:i(u)?(i(c)&&vn(u,c),i(n)&&function(t){a(t.style)&&Oe(t.style),a(t.class)&&Oe(t.class)}(n),u):Dt()):Dt());var u,c,l}(t,e,n,s,u)}function vn(t,n,o){if(t.ns=n,"foreignObject"===t.tag&&(n=void 0,o=!0),i(t.children))for(var a=0,s=t.children.length;a<s;a++){var u=t.children[a];i(u.tag)&&(e(u.ns)||r(o)&&"svg"!==u.tag)&&vn(u,n,o)}}var gn,yn=null;function An(t,e){return(t.__esModule||ct&&"Module"===t[Symbol.toStringTag])&&(t=t.default),a(t)?e.extend(t):t}function Cn(t){if(Array.isArray(t))for(var e=0;e<t.length;e++){var n=t[e];if(i(n)&&(i(n.componentOptions)||Ve(n)))return n}}function En(t,e){gn.$on(t,e)}function bn(t,e){gn.$off(t,e)}function Dn(t,e){var n=gn;return function i(){null!==e.apply(null,arguments)&&n.$off(t,i)}}function In(t,e,n){gn=t,Fe(e,n||{},En,bn,Dn,t),gn=void 0}var _n=null,Tn=!1;function Sn(t){var e=_n;return _n=t,function(){_n=e}}function xn(t){for(;t&&(t=t.$parent);)if(t._inactive)return!0;return!1}function On(t,e){if(e){if(t._directInactive=!1,xn(t))return}else if(t._directInactive)return;if(t._inactive||null===t._inactive){t._inactive=!1;for(var n=0;n<t.$children.length;n++)On(t.$children[n]);Ln(t,"activated")}}function wn(t,e){if(!(e&&(t._directInactive=!0,xn(t))||t._inactive)){t._inactive=!0;for(var n=0;n<t.$children.length;n++)wn(t.$children[n]);Ln(t,"deactivated")}}function Ln(t,e){At();var n=t.$options[e],i=e+" hook";if(n)for(var r=0,o=n.length;r<o;r++)re(n[r],t,null,t,i);t._hasHookEvent&&t.$emit("hook:"+e),Ct()}var kn=[],Fn=[],Rn={},Nn={},Bn=!1,Mn=!1,Pn=0;var Hn=0,jn=Date.now;if(G&&!Y){var $n=window.performance;$n&&"function"==typeof $n.now&&jn()>document.createEvent("Event").timeStamp&&(jn=function(){return $n.now()})}function Vn(){var t,e;for(Hn=jn(),Mn=!0,kn.sort((function(t,e){return t.id-e.id})),Pn=0;Pn<kn.length;Pn++)if((t=kn[Pn]).before&&t.before(),e=t.id,Rn[e]=null,t.run(),null!=Rn[e]&&(Nn[e]=(Nn[e]||0)+1,Nn[e]>100)){lt("You may have an infinite update loop "+(t.user?'in watcher with expression "'+t.expression+'"':"in a component render function."),t.vm);break}var n=Fn.slice(),i=kn.slice();Pn=kn.length=Fn.length=0,Rn={},Nn={},Bn=Mn=!1,function(t){for(var e=0;e<t.length;e++)t[e]._inactive=!0,On(t[e],!0)}(n),function(t){for(var e=t.length;e--;){var n=t[e],i=n.vm;i._watcher===n&&i._isMounted&&!i._isDestroyed&&Ln(i,"updated")}}(i),at&&j.devtools&&at.emit("flush")}var Un=0,qn=function(t,e,n,i,r){this.vm=t,r&&(t._watcher=this),t._watchers.push(this),i?(this.deep=!!i.deep,this.user=!!i.user,this.lazy=!!i.lazy,this.sync=!!i.sync,this.before=i.before):this.deep=this.user=this.lazy=this.sync=!1,this.cb=n,this.id=++Un,this.active=!0,this.dirty=this.lazy,this.deps=[],this.newDeps=[],this.depIds=new ut,this.newDepIds=new ut,this.expression=e.toString(),"function"==typeof e?this.getter=e:(this.getter=function(t){if(!q.test(t)){var e=t.split(".");return function(t){for(var n=0;n<e.length;n++){if(!t)return;t=t[e[n]]}return t}}}(e),this.getter||(this.getter=L,lt('Failed watching path: "'+e+'" Watcher only accepts simple dot-delimited paths. For full control, use a function instead.',t))),this.value=this.lazy?void 0:this.get()};qn.prototype.get=function(){var t;At(this);var e=this.vm;try{t=this.getter.call(e,e)}catch(t){if(!this.user)throw t;ie(t,e,'getter for watcher "'+this.expression+'"')}finally{this.deep&&Oe(t),Ct(),this.cleanupDeps()}return t},qn.prototype.addDep=function(t){var e=t.id;this.newDepIds.has(e)||(this.newDepIds.add(e),this.newDeps.push(t),this.depIds.has(e)||t.addSub(this))},qn.prototype.cleanupDeps=function(){for(var t=this.deps.length;t--;){var e=this.deps[t];this.newDepIds.has(e.id)||e.removeSub(this)}var n=this.depIds;this.depIds=this.newDepIds,this.newDepIds=n,this.newDepIds.clear(),n=this.deps,this.deps=this.newDeps,this.newDeps=n,this.newDeps.length=0},qn.prototype.update=function(){this.lazy?this.dirty=!0:this.sync?this.run():function(t){var e=t.id;if(null==Rn[e]){if(Rn[e]=!0,Mn){for(var n=kn.length-1;n>Pn&&kn[n].id>t.id;)n--;kn.splice(n+1,0,t)}else kn.push(t);if(!Bn){if(Bn=!0,!j.async)return void Vn();ye(Vn)}}}(this)},qn.prototype.run=function(){if(this.active){var t=this.get();if(t!==this.value||a(t)||this.deep){var e=this.value;if(this.value=t,this.user){var n='callback for watcher "'+this.expression+'"';re(this.cb,this.vm,[t,e],this.vm,n)}else this.cb.call(this.vm,t,e)}}},qn.prototype.evaluate=function(){this.value=this.get(),this.dirty=!1},qn.prototype.depend=function(){for(var t=this.deps.length;t--;)this.deps[t].depend()},qn.prototype.teardown=function(){if(this.active){this.vm._isBeingDestroyed||y(this.vm._watchers,this);for(var t=this.deps.length;t--;)this.deps[t].removeSub(this);this.active=!1}};var zn={enumerable:!0,configurable:!0,get:L,set:L};function Kn(t,e,n){zn.get=function(){return this[e][n]},zn.set=function(t){this[e][n]=t},Object.defineProperty(t,n,zn)}function Gn(t){t._watchers=[];var e=t.$options;e.props&&function(t,e){var n=t.$options.propsData||{},i=t._props={},r=t.$options._propKeys=[],o=!t.$parent;o||wt(!1);var a=function(a){r.push(a);var s=Gt(a,e,n,t),u=T(a);(g(u)||j.isReservedAttr(u))&&lt('"'+u+'" is a reserved attribute and cannot be used as component prop.',t),Ft(i,a,s,(function(){o||Tn||lt("Avoid mutating a prop directly since the value will be overwritten whenever the parent component re-renders. Instead, use a data or computed property based on the prop's value. Prop being mutated: \""+a+'"',t)})),a in t||Kn(t,"_props",a)};for(var s in e)a(s);wt(!0)}(t,e.props),e.methods&&function(t,e){var n=t.$options.props;for(var i in e)"function"!=typeof e[i]&&lt('Method "'+i+'" has type "'+typeof e[i]+'" in the component definition. Did you reference the function correctly?',t),n&&C(n,i)&&lt('Method "'+i+'" has already been defined as a prop.',t),i in t&&V(i)&&lt('Method "'+i+'" conflicts with an existing Vue instance method. Avoid defining component methods that start with _ or $.'),t[i]="function"!=typeof e[i]?L:S(e[i],t)}(t,e.methods),e.data?function(t){var e=t.$options.data;c(e=t._data="function"==typeof e?function(t,e){At();try{return t.call(e,e)}catch(t){return ie(t,e,"data()"),{}}finally{Ct()}}(e,t):e||{})||(e={},lt("data functions should return an object:\nhttps://vuejs.org/v2/guide/components.html#data-Must-Be-a-Function",t));for(var n=Object.keys(e),i=t.$options.props,r=t.$options.methods,o=n.length;o--;){var a=n[o];r&&C(r,a)&&lt('Method "'+a+'" has already been defined as a data property.',t),i&&C(i,a)?lt('The data property "'+a+'" is already declared as a prop. Use prop default value instead.',t):V(a)||Kn(t,"_data",a)}kt(e,!0)}(t):kt(t._data={},!0),e.computed&&function(t,e){var n=t._computedWatchers=Object.create(null),i=ot();for(var r in e){var o=e[r],a="function"==typeof o?o:o.get;null==a&&lt('Getter is missing for computed property "'+r+'".',t),i||(n[r]=new qn(t,a||L,L,Xn)),r in t?r in t.$data?lt('The computed property "'+r+'" is already defined in data.',t):t.$options.props&&r in t.$options.props?lt('The computed property "'+r+'" is already defined as a prop.',t):t.$options.methods&&r in t.$options.methods&&lt('The computed property "'+r+'" is already defined as a method.',t):Wn(t,r,o)}}(t,e.computed),e.watch&&e.watch!==nt&&function(t,e){for(var n in e){var i=e[n];if(Array.isArray(i))for(var r=0;r<i.length;r++)Jn(t,n,i[r]);else Jn(t,n,i)}}(t,e.watch)}var Xn={lazy:!0};function Wn(t,e,n){var i=!ot();"function"==typeof n?(zn.get=i?Zn(e):Yn(n),zn.set=L):(zn.get=n.get?i&&!1!==n.cache?Zn(e):Yn(n.get):L,zn.set=n.set||L),zn.set===L&&(zn.set=function(){lt('Computed property "'+e+'" was assigned to but it has no setter.',this)}),Object.defineProperty(t,e,zn)}function Zn(t){return function(){var e=this._computedWatchers&&this._computedWatchers[t];if(e)return e.dirty&&e.evaluate(),gt.target&&e.depend(),e.value}}function Yn(t){return function(){return t.call(this,this)}}function Jn(t,e,n,i){return c(n)&&(i=n,n=n.handler),"string"==typeof n&&(n=t[n]),t.$watch(e,n,i)}var Qn=0;function ti(t){var e=t.options;if(t.super){var n=ti(t.super);if(n!==t.superOptions){t.superOptions=n;var i=function(t){var e,n=t.options,i=t.sealedOptions;for(var r in n)n[r]!==i[r]&&(e||(e={}),e[r]=n[r]);return e}(t);i&&O(t.extendOptions,i),(e=t.options=zt(n,t.extendOptions)).name&&(e.components[e.name]=t)}}return e}function ei(t){this instanceof ei||lt("Vue is a constructor and should be called with the `new` keyword"),this._init(t)}function ni(t){t.cid=0;var e=1;t.extend=function(t){t=t||{};var n=this,i=n.cid,r=t._Ctor||(t._Ctor={});if(r[i])return r[i];var o=t.name||n.options.name;o&&Ut(o);var a=function(t){this._init(t)};return(a.prototype=Object.create(n.prototype)).constructor=a,a.cid=e++,a.options=zt(n.options,t),a.super=n,a.options.props&&function(t){var e=t.options.props;for(var n in e)Kn(t.prototype,"_props",n)}(a),a.options.computed&&function(t){var e=t.options.computed;for(var n in e)Wn(t.prototype,n,e[n])}(a),a.extend=n.extend,a.mixin=n.mixin,a.use=n.use,P.forEach((function(t){a[t]=n[t]})),o&&(a.options.components[o]=a),a.superOptions=n.options,a.extendOptions=t,a.sealedOptions=O({},a.options),r[i]=a,a}}function ii(t){return t&&(t.Ctor.options.name||t.tag)}function ri(t,e){return Array.isArray(t)?t.indexOf(e)>-1:"string"==typeof t?t.split(",").indexOf(e)>-1:!!l(t)&&t.test(e)}function oi(t,e){var n=t.cache,i=t.keys,r=t._vnode;for(var o in n){var a=n[o];if(a){var s=a.name;s&&!e(s)&&ai(n,o,i,r)}}}function ai(t,e,n,i){var r=t[e];!r||i&&r.tag===i.tag||r.componentInstance.$destroy(),t[e]=null,y(n,e)}(function(e){e.prototype._init=function(e){var n,i,r=this;r._uid=Qn++,j.performance&&ue&&(n="vue-perf-start:"+r._uid,i="vue-perf-end:"+r._uid,ue(n)),r._isVue=!0,e&&e._isComponent?function(t,e){var n=t.$options=Object.create(t.constructor.options),i=e._parentVnode;n.parent=e.parent,n._parentVnode=i;var r=i.componentOptions;n.propsData=r.propsData,n._parentListeners=r.listeners,n._renderChildren=r.children,n._componentTag=r.tag,e.render&&(n.render=e.render,n.staticRenderFns=e.staticRenderFns)}(r,e):r.$options=zt(ti(r.constructor),e||{},r),Ae(r),r._self=r,function(t){var e=t.$options,n=e.parent;if(n&&!e.abstract){for(;n.$options.abstract&&n.$parent;)n=n.$parent;n.$children.push(t)}t.$parent=n,t.$root=n?n.$root:t,t.$children=[],t.$refs={},t._watcher=null,t._inactive=null,t._directInactive=!1,t._isMounted=!1,t._isDestroyed=!1,t._isBeingDestroyed=!1}(r),function(t){t._events=Object.create(null),t._hasHookEvent=!1;var e=t.$options._parentListeners;e&&In(t,e)}(r),function(e){e._vnode=null,e._staticTrees=null;var n=e.$options,i=e.$vnode=n._parentVnode,r=i&&i.context;e.$slots=je(n._renderChildren,r),e.$scopedSlots=t,e._c=function(t,n,i,r){return mn(e,t,n,i,r,!1)},e.$createElement=function(t,n,i,r){return mn(e,t,n,i,r,!0)};var o=i&&i.data;Ft(e,"$attrs",o&&o.attrs||t,(function(){!Tn&&lt("$attrs is readonly.",e)}),!0),Ft(e,"$listeners",n._parentListeners||t,(function(){!Tn&&lt("$listeners is readonly.",e)}),!0)}(r),Ln(r,"beforeCreate"),function(t){var e=He(t.$options.inject,t);e&&(wt(!1),Object.keys(e).forEach((function(n){Ft(t,n,e[n],(function(){lt('Avoid mutating an injected value directly since the changes will be overwritten whenever the provided component re-renders. injection being mutated: "'+n+'"',t)}))})),wt(!0))}(r),Gn(r),function(t){var e=t.$options.provide;e&&(t._provided="function"==typeof e?e.call(t):e)}(r),Ln(r,"created"),j.performance&&ue&&(r._name=pt(r,!1),ue(i),ce("vue "+r._name+" init",n,i)),r.$options.el&&r.$mount(r.$options.el)}})(ei),function(t){var e={get:function(){return this._data}},n={get:function(){return this._props}};e.set=function(){lt("Avoid replacing instance root $data. Use nested data properties instead.",this)},n.set=function(){lt("$props is readonly.",this)},Object.defineProperty(t.prototype,"$data",e),Object.defineProperty(t.prototype,"$props",n),t.prototype.$set=Rt,t.prototype.$delete=Nt,t.prototype.$watch=function(t,e,n){var i=this;if(c(e))return Jn(i,t,e,n);(n=n||{}).user=!0;var r=new qn(i,t,e,n);if(n.immediate){var o='callback for immediate watcher "'+r.expression+'"';At(),re(e,i,[r.value],i,o),Ct()}return function(){r.teardown()}}}(ei),function(t){var e=/^hook:/;t.prototype.$on=function(t,n){var i=this;if(Array.isArray(t))for(var r=0,o=t.length;r<o;r++)i.$on(t[r],n);else(i._events[t]||(i._events[t]=[])).push(n),e.test(t)&&(i._hasHookEvent=!0);return i},t.prototype.$once=function(t,e){var n=this;function i(){n.$off(t,i),e.apply(n,arguments)}return i.fn=e,n.$on(t,i),n},t.prototype.$off=function(t,e){var n=this;if(!arguments.length)return n._events=Object.create(null),n;if(Array.isArray(t)){for(var i=0,r=t.length;i<r;i++)n.$off(t[i],e);return n}var o,a=n._events[t];if(!a)return n;if(!e)return n._events[t]=null,n;for(var s=a.length;s--;)if((o=a[s])===e||o.fn===e){a.splice(s,1);break}return n},t.prototype.$emit=function(t){var e=this,n=t.toLowerCase();n!==t&&e._events[n]&&dt('Event "'+n+'" is emitted in component '+pt(e)+' but the handler is registered for "'+t+'". Note that HTML attributes are case-insensitive and you cannot use v-on to listen to camelCase events when using in-DOM templates. You should probably use "'+T(t)+'" instead of "'+t+'".');var i=e._events[t];if(i){i=i.length>1?x(i):i;for(var r=x(arguments,1),o='event handler for "'+t+'"',a=0,s=i.length;a<s;a++)re(i[a],e,r,e,o)}return e}}(ei),function(t){t.prototype._update=function(t,e){var n=this,i=n.$el,r=n._vnode,o=Sn(n);n._vnode=t,n.$el=r?n.__patch__(r,t):n.__patch__(n.$el,t,e,!1),o(),i&&(i.__vue__=null),n.$el&&(n.$el.__vue__=n),n.$vnode&&n.$parent&&n.$vnode===n.$parent._vnode&&(n.$parent.$el=n.$el)},t.prototype.$forceUpdate=function(){this._watcher&&this._watcher.update()},t.prototype.$destroy=function(){var t=this;if(!t._isBeingDestroyed){Ln(t,"beforeDestroy"),t._isBeingDestroyed=!0;var e=t.$parent;!e||e._isBeingDestroyed||t.$options.abstract||y(e.$children,t),t._watcher&&t._watcher.teardown();for(var n=t._watchers.length;n--;)t._watchers[n].teardown();t._data.__ob__&&t._data.__ob__.vmCount--,t._isDestroyed=!0,t.__patch__(t._vnode,null),Ln(t,"destroyed"),t.$off(),t.$el&&(t.$el.__vue__=null),t.$vnode&&(t.$vnode.parent=null)}}}(ei),function(t){sn(t.prototype),t.prototype.$nextTick=function(t){return ye(t,this)},t.prototype._render=function(){var t,e=this,n=e.$options,i=n.render,r=n._parentVnode;r&&(e.$scopedSlots=Ue(r.data.scopedSlots,e.$slots,e.$scopedSlots)),e.$vnode=r;try{yn=e,t=i.call(e._renderProxy,e.$createElement)}catch(n){if(ie(n,e,"render"),e.$options.renderError)try{t=e.$options.renderError.call(e._renderProxy,e.$createElement,n)}catch(n){ie(n,e,"renderError"),t=e._vnode}else t=e._vnode}finally{yn=null}return Array.isArray(t)&&1===t.length&&(t=t[0]),t instanceof Et||(Array.isArray(t)&&lt("Multiple root nodes returned from render function. Render function should return a single root node.",e),t=Dt()),t.parent=r,t}}(ei);var si=[String,RegExp,Array],ui={KeepAlive:{name:"keep-alive",abstract:!0,props:{include:si,exclude:si,max:[String,Number]},methods:{cacheVNode:function(){var t=this,e=t.cache,n=t.keys,i=t.vnodeToCache,r=t.keyToCache;if(i){var o=i.tag,a=i.componentInstance,s=i.componentOptions;e[r]={name:ii(s),tag:o,componentInstance:a},n.push(r),this.max&&n.length>parseInt(this.max)&&ai(e,n[0],n,this._vnode),this.vnodeToCache=null}}},created:function(){this.cache=Object.create(null),this.keys=[]},destroyed:function(){for(var t in this.cache)ai(this.cache,t,this.keys)},mounted:function(){var t=this;this.cacheVNode(),this.$watch("include",(function(e){oi(t,(function(t){return ri(e,t)}))})),this.$watch("exclude",(function(e){oi(t,(function(t){return!ri(e,t)}))}))},updated:function(){this.cacheVNode()},render:function(){var t=this.$slots.default,e=Cn(t),n=e&&e.componentOptions;if(n){var i=ii(n),r=this.include,o=this.exclude;if(r&&(!i||!ri(r,i))||o&&i&&ri(o,i))return e;var a=this.cache,s=this.keys,u=null==e.key?n.Ctor.cid+(n.tag?"::"+n.tag:""):e.key;a[u]?(e.componentInstance=a[u].componentInstance,y(s,u),s.push(u)):(this.vnodeToCache=e,this.keyToCache=u),e.data.keepAlive=!0}return e||t&&t[0]}}};(function(t){var e={get:function(){return j},set:function(){lt("Do not replace the Vue.config object, set individual fields instead.")}};Object.defineProperty(t,"config",e),t.util={warn:lt,extend:O,mergeOptions:zt,defineReactive:Ft},t.set=Rt,t.delete=Nt,t.nextTick=ye,t.observable=function(t){return kt(t),t},t.options=Object.create(null),P.forEach((function(e){t.options[e+"s"]=Object.create(null)})),t.options._base=t,O(t.options.components,ui),function(t){t.use=function(t){var e=this._installedPlugins||(this._installedPlugins=[]);if(e.indexOf(t)>-1)return this;var n=x(arguments,1);return n.unshift(this),"function"==typeof t.install?t.install.apply(t,n):"function"==typeof t&&t.apply(null,n),e.push(t),this}}(t),function(t){t.mixin=function(t){return this.options=zt(this.options,t),this}}(t),ni(t),function(t){P.forEach((function(e){t[e]=function(t,n){return n?("component"===e&&Ut(t),"component"===e&&c(n)&&(n.name=n.name||t,n=this.options._base.extend(n)),"directive"===e&&"function"==typeof n&&(n={bind:n,update:n}),this.options[e+"s"][t]=n,n):this.options[e+"s"][t]}}))}(t)})(ei),Object.defineProperty(ei.prototype,"$isServer",{get:ot}),Object.defineProperty(ei.prototype,"$ssrContext",{get:function(){return this.$vnode&&this.$vnode.ssrContext}}),Object.defineProperty(ei,"FunctionalRenderContext",{value:un}),ei.version="2.6.14";var ci=m("style,class"),li=m("input,textarea,option,select,progress"),di=function(t,e,n){return"value"===n&&li(t)&&"button"!==e||"selected"===n&&"option"===t||"checked"===n&&"input"===t||"muted"===n&&"video"===t},pi=m("contenteditable,draggable,spellcheck"),hi=m("events,caret,typing,plaintext-only"),fi=m("allowfullscreen,async,autofocus,autoplay,checked,compact,controls,declare,default,defaultchecked,defaultmuted,defaultselected,defer,disabled,enabled,formnovalidate,hidden,indeterminate,inert,ismap,itemscope,loop,multiple,muted,nohref,noresize,noshade,novalidate,nowrap,open,pauseonexit,readonly,required,reversed,scoped,seamless,selected,sortable,truespeed,typemustmatch,visible"),mi="http://www.w3.org/1999/xlink",vi=function(t){return":"===t.charAt(5)&&"xlink"===t.slice(0,5)},gi=function(t){return vi(t)?t.slice(6,t.length):""},yi=function(t){return null==t||!1===t};function Ai(t){for(var e=t.data,n=t,r=t;i(r.componentInstance);)(r=r.componentInstance._vnode)&&r.data&&(e=Ci(r.data,e));for(;i(n=n.parent);)n&&n.data&&(e=Ci(e,n.data));return o=e.staticClass,a=e.class,i(o)||i(a)?Ei(o,bi(a)):"";var o,a}function Ci(t,e){return{staticClass:Ei(t.staticClass,e.staticClass),class:i(t.class)?[t.class,e.class]:e.class}}function Ei(t,e){return t?e?t+" "+e:t:e||""}function bi(t){return Array.isArray(t)?function(t){for(var e,n="",r=0,o=t.length;r<o;r++)i(e=bi(t[r]))&&""!==e&&(n&&(n+=" "),n+=e);return n}(t):a(t)?function(t){var e="";for(var n in t)t[n]&&(e&&(e+=" "),e+=n);return e}(t):"string"==typeof t?t:""}var Di={svg:"http://www.w3.org/2000/svg",math:"http://www.w3.org/1998/Math/MathML"},Ii=m("html,body,base,head,link,meta,style,title,address,article,aside,footer,header,h1,h2,h3,h4,h5,h6,hgroup,nav,section,div,dd,dl,dt,figcaption,figure,picture,hr,img,li,main,ol,p,pre,ul,a,b,abbr,bdi,bdo,br,cite,code,data,dfn,em,i,kbd,mark,q,rp,rt,rtc,ruby,s,samp,small,span,strong,sub,sup,time,u,var,wbr,area,audio,map,track,video,embed,object,param,source,canvas,script,noscript,del,ins,caption,col,colgroup,table,thead,tbody,td,th,tr,button,datalist,fieldset,form,input,label,legend,meter,optgroup,option,output,progress,select,textarea,details,dialog,menu,menuitem,summary,content,element,shadow,template,blockquote,iframe,tfoot"),_i=m("svg,animate,circle,clippath,cursor,defs,desc,ellipse,filter,font-face,foreignobject,g,glyph,image,line,marker,mask,missing-glyph,path,pattern,polygon,polyline,rect,switch,symbol,text,textpath,tspan,use,view",!0),Ti=function(t){return Ii(t)||_i(t)};function Si(t){return _i(t)?"svg":"math"===t?"math":void 0}var xi=Object.create(null);var Oi=m("text,number,password,search,email,tel,url");function wi(t){return"string"==typeof t?document.querySelector(t)||(lt("Cannot find element: "+t),document.createElement("div")):t}var Li=Object.freeze({createElement:function(t,e){var n=document.createElement(t);return"select"!==t||e.data&&e.data.attrs&&void 0!==e.data.attrs.multiple&&n.setAttribute("multiple","multiple"),n},createElementNS:function(t,e){return document.createElementNS(Di[t],e)},createTextNode:function(t){return document.createTextNode(t)},createComment:function(t){return document.createComment(t)},insertBefore:function(t,e,n){t.insertBefore(e,n)},removeChild:function(t,e){t.removeChild(e)},appendChild:function(t,e){t.appendChild(e)},parentNode:function(t){return t.parentNode},nextSibling:function(t){return t.nextSibling},tagName:function(t){return t.tagName},setTextContent:function(t,e){t.textContent=e},setStyleScope:function(t,e){t.setAttribute(e,"")}}),ki={create:function(t,e){Fi(e)},update:function(t,e){t.data.ref!==e.data.ref&&(Fi(t,!0),Fi(e))},destroy:function(t){Fi(t,!0)}};function Fi(t,e){var n=t.data.ref;if(i(n)){var r=t.context,o=t.componentInstance||t.elm,a=r.$refs;e?Array.isArray(a[n])?y(a[n],o):a[n]===o&&(a[n]=void 0):t.data.refInFor?Array.isArray(a[n])?a[n].indexOf(o)<0&&a[n].push(o):a[n]=[o]:a[n]=o}}var Ri=new Et("",{},[]),Ni=["create","activate","update","remove","destroy"];function Bi(t,n){return t.key===n.key&&t.asyncFactory===n.asyncFactory&&(t.tag===n.tag&&t.isComment===n.isComment&&i(t.data)===i(n.data)&&function(t,e){if("input"!==t.tag)return!0;var n,r=i(n=t.data)&&i(n=n.attrs)&&n.type,o=i(n=e.data)&&i(n=n.attrs)&&n.type;return r===o||Oi(r)&&Oi(o)}(t,n)||r(t.isAsyncPlaceholder)&&e(n.asyncFactory.error))}function Mi(t,e,n){var r,o,a={};for(r=e;r<=n;++r)i(o=t[r].key)&&(a[o]=r);return a}var Pi={create:Hi,update:Hi,destroy:function(t){Hi(t,Ri)}};function Hi(t,e){(t.data.directives||e.data.directives)&&function(t,e){var n,i,r,o=t===Ri,a=e===Ri,s=$i(t.data.directives,t.context),u=$i(e.data.directives,e.context),c=[],l=[];for(n in u)i=s[n],r=u[n],i?(r.oldValue=i.value,r.oldArg=i.arg,Ui(r,"update",e,t),r.def&&r.def.componentUpdated&&l.push(r)):(Ui(r,"bind",e,t),r.def&&r.def.inserted&&c.push(r));if(c.length){var d=function(){for(var n=0;n<c.length;n++)Ui(c[n],"inserted",e,t)};o?Re(e,"insert",d):d()}if(l.length&&Re(e,"postpatch",(function(){for(var n=0;n<l.length;n++)Ui(l[n],"componentUpdated",e,t)})),!o)for(n in s)u[n]||Ui(s[n],"unbind",t,t,a)}(t,e)}var ji=Object.create(null);function $i(t,e){var n,i,r=Object.create(null);if(!t)return r;for(n=0;n<t.length;n++)(i=t[n]).modifiers||(i.modifiers=ji),r[Vi(i)]=i,i.def=Kt(e.$options,"directives",i.name,!0);return r}function Vi(t){return t.rawName||t.name+"."+Object.keys(t.modifiers||{}).join(".")}function Ui(t,e,n,i,r){var o=t.def&&t.def[e];if(o)try{o(n.elm,t,n,i,r)}catch(i){ie(i,n.context,"directive "+t.name+" "+e+" hook")}}var qi=[ki,Pi];function zi(t,n){var r=n.componentOptions;if(!(i(r)&&!1===r.Ctor.options.inheritAttrs||e(t.data.attrs)&&e(n.data.attrs))){var o,a,s=n.elm,u=t.data.attrs||{},c=n.data.attrs||{};for(o in i(c.__ob__)&&(c=n.data.attrs=O({},c)),c)a=c[o],u[o]!==a&&Ki(s,o,a,n.data.pre);for(o in(Y||Q)&&c.value!==u.value&&Ki(s,"value",c.value),u)e(c[o])&&(vi(o)?s.removeAttributeNS(mi,gi(o)):pi(o)||s.removeAttribute(o))}}function Ki(t,e,n,i){i||t.tagName.indexOf("-")>-1?Gi(t,e,n):fi(e)?yi(n)?t.removeAttribute(e):(n="allowfullscreen"===e&&"EMBED"===t.tagName?"true":e,t.setAttribute(e,n)):pi(e)?t.setAttribute(e,function(t,e){return yi(e)||"false"===e?"false":"contenteditable"===t&&hi(e)?e:"true"}(e,n)):vi(e)?yi(n)?t.removeAttributeNS(mi,gi(e)):t.setAttributeNS(mi,e,n):Gi(t,e,n)}function Gi(t,e,n){if(yi(n))t.removeAttribute(e);else{if(Y&&!J&&"TEXTAREA"===t.tagName&&"placeholder"===e&&""!==n&&!t.__ieph){var i=function(e){e.stopImmediatePropagation(),t.removeEventListener("input",i)};t.addEventListener("input",i),t.__ieph=!0}t.setAttribute(e,n)}}var Xi={create:zi,update:zi};function Wi(t,n){var r=n.elm,o=n.data,a=t.data;if(!(e(o.staticClass)&&e(o.class)&&(e(a)||e(a.staticClass)&&e(a.class)))){var s=Ai(n),u=r._transitionClasses;i(u)&&(s=Ei(s,bi(u))),s!==r._prevClass&&(r.setAttribute("class",s),r._prevClass=s)}}var Zi,Yi,Ji,Qi,tr,er,nr,ir={create:Wi,update:Wi},rr=/[\w).+\-_$\]]/;function or(t){var e,n,i,r,o,a=!1,s=!1,u=!1,c=!1,l=0,d=0,p=0,h=0;for(i=0;i<t.length;i++)if(n=e,e=t.charCodeAt(i),a)39===e&&92!==n&&(a=!1);else if(s)34===e&&92!==n&&(s=!1);else if(u)96===e&&92!==n&&(u=!1);else if(c)47===e&&92!==n&&(c=!1);else if(124!==e||124===t.charCodeAt(i+1)||124===t.charCodeAt(i-1)||l||d||p){switch(e){case 34:s=!0;break;case 39:a=!0;break;case 96:u=!0;break;case 40:p++;break;case 41:p--;break;case 91:d++;break;case 93:d--;break;case 123:l++;break;case 125:l--}if(47===e){for(var f=i-1,m=void 0;f>=0&&" "===(m=t.charAt(f));f--);m&&rr.test(m)||(c=!0)}}else void 0===r?(h=i+1,r=t.slice(0,i).trim()):v();function v(){(o||(o=[])).push(t.slice(h,i).trim()),h=i+1}if(void 0===r?r=t.slice(0,i).trim():0!==h&&v(),o)for(i=0;i<o.length;i++)r=ar(r,o[i]);return r}function ar(t,e){var n=e.indexOf("(");if(n<0)return'_f("'+e+'")('+t+")";var i=e.slice(0,n),r=e.slice(n+1);return'_f("'+i+'")('+t+(")"!==r?","+r:r)}function sr(t,e){console.error("[Vue compiler]: "+t)}function ur(t,e){return t?t.map((function(t){return t[e]})).filter((function(t){return t})):[]}function cr(t,e,n,i,r){(t.props||(t.props=[])).push(Ar({name:e,value:n,dynamic:r},i)),t.plain=!1}function lr(t,e,n,i,r){(r?t.dynamicAttrs||(t.dynamicAttrs=[]):t.attrs||(t.attrs=[])).push(Ar({name:e,value:n,dynamic:r},i)),t.plain=!1}function dr(t,e,n,i){t.attrsMap[e]=n,t.attrsList.push(Ar({name:e,value:n},i))}function pr(t,e,n,i,r,o,a,s){(t.directives||(t.directives=[])).push(Ar({name:e,rawName:n,value:i,arg:r,isDynamicArg:o,modifiers:a},s)),t.plain=!1}function hr(t,e,n){return n?"_p("+e+',"'+t+'")':t+e}function fr(e,n,i,r,o,a,s,u){var c;r=r||t,a&&r.prevent&&r.passive&&a("passive and prevent can't be used together. Passive handler can't prevent default event.",s),r.right?u?n="("+n+")==='click'?'contextmenu':("+n+")":"click"===n&&(n="contextmenu",delete r.right):r.middle&&(u?n="("+n+")==='click'?'mouseup':("+n+")":"click"===n&&(n="mouseup")),r.capture&&(delete r.capture,n=hr("!",n,u)),r.once&&(delete r.once,n=hr("~",n,u)),r.passive&&(delete r.passive,n=hr("&",n,u)),r.native?(delete r.native,c=e.nativeEvents||(e.nativeEvents={})):c=e.events||(e.events={});var l=Ar({value:i.trim(),dynamic:u},s);r!==t&&(l.modifiers=r);var d=c[n];Array.isArray(d)?o?d.unshift(l):d.push(l):c[n]=d?o?[l,d]:[d,l]:l,e.plain=!1}function mr(t,e){return t.rawAttrsMap[":"+e]||t.rawAttrsMap["v-bind:"+e]||t.rawAttrsMap[e]}function vr(t,e,n){var i=gr(t,":"+e)||gr(t,"v-bind:"+e);if(null!=i)return or(i);if(!1!==n){var r=gr(t,e);if(null!=r)return JSON.stringify(r)}}function gr(t,e,n){var i;if(null!=(i=t.attrsMap[e]))for(var r=t.attrsList,o=0,a=r.length;o<a;o++)if(r[o].name===e){r.splice(o,1);break}return n&&delete t.attrsMap[e],i}function yr(t,e){for(var n=t.attrsList,i=0,r=n.length;i<r;i++){var o=n[i];if(e.test(o.name))return n.splice(i,1),o}}function Ar(t,e){return e&&(null!=e.start&&(t.start=e.start),null!=e.end&&(t.end=e.end)),t}function Cr(t,e,n){var i=n||{},r=i.number,o="$$v",a=o;i.trim&&(a="(typeof $$v === 'string'? $$v.trim(): $$v)"),r&&(a="_n("+a+")");var s=Er(e,a);t.model={value:"("+e+")",expression:JSON.stringify(e),callback:"function ($$v) {"+s+"}"}}function Er(t,e){var n=function(t){if(t=t.trim(),Zi=t.length,t.indexOf("[")<0||t.lastIndexOf("]")<Zi-1)return(Qi=t.lastIndexOf("."))>-1?{exp:t.slice(0,Qi),key:'"'+t.slice(Qi+1)+'"'}:{exp:t,key:null};for(Yi=t,Qi=tr=er=0;!Dr();)Ir(Ji=br())?Tr(Ji):91===Ji&&_r(Ji);return{exp:t.slice(0,tr),key:t.slice(tr+1,er)}}(t);return null===n.key?t+"="+e:"$set("+n.exp+", "+n.key+", "+e+")"}function br(){return Yi.charCodeAt(++Qi)}function Dr(){return Qi>=Zi}function Ir(t){return 34===t||39===t}function _r(t){var e=1;for(tr=Qi;!Dr();)if(Ir(t=br()))Tr(t);else if(91===t&&e++,93===t&&e--,0===e){er=Qi;break}}function Tr(t){for(var e=t;!Dr()&&(t=br())!==e;);}var Sr,xr="__r";function Or(t,e,n){var i=Sr;return function r(){null!==e.apply(null,arguments)&&kr(t,r,n,i)}}var wr=le&&!(et&&Number(et[1])<=53);function Lr(t,e,n,i){if(wr){var r=Hn,o=e;e=o._wrapper=function(t){if(t.target===t.currentTarget||t.timeStamp>=r||t.timeStamp<=0||t.target.ownerDocument!==document)return o.apply(this,arguments)}}Sr.addEventListener(t,e,it?{capture:n,passive:i}:n)}function kr(t,e,n,i){(i||Sr).removeEventListener(t,e._wrapper||e,n)}function Fr(t,n){if(!e(t.data.on)||!e(n.data.on)){var r=n.data.on||{},o=t.data.on||{};Sr=n.elm,function(t){if(i(t.__r)){var e=Y?"change":"input";t[e]=[].concat(t.__r,t[e]||[]),delete t.__r}i(t.__c)&&(t.change=[].concat(t.__c,t.change||[]),delete t.__c)}(r),Fe(r,o,Lr,kr,Or,n.context),Sr=void 0}}var Rr,Nr={create:Fr,update:Fr};function Br(t,n){if(!e(t.data.domProps)||!e(n.data.domProps)){var r,o,a=n.elm,s=t.data.domProps||{},u=n.data.domProps||{};for(r in i(u.__ob__)&&(u=n.data.domProps=O({},u)),s)r in u||(a[r]="");for(r in u){if(o=u[r],"textContent"===r||"innerHTML"===r){if(n.children&&(n.children.length=0),o===s[r])continue;1===a.childNodes.length&&a.removeChild(a.childNodes[0])}if("value"===r&&"PROGRESS"!==a.tagName){a._value=o;var c=e(o)?"":String(o);Mr(a,c)&&(a.value=c)}else if("innerHTML"===r&&_i(a.tagName)&&e(a.innerHTML)){(Rr=Rr||document.createElement("div")).innerHTML="<svg>"+o+"</svg>";for(var l=Rr.firstChild;a.firstChild;)a.removeChild(a.firstChild);for(;l.firstChild;)a.appendChild(l.firstChild)}else if(o!==s[r])try{a[r]=o}catch(t){}}}}function Mr(t,e){return!t.composing&&("OPTION"===t.tagName||function(t,e){var n=!0;try{n=document.activeElement!==t}catch(t){}return n&&t.value!==e}(t,e)||function(t,e){var n=t.value,r=t._vModifiers;if(i(r)){if(r.number)return f(n)!==f(e);if(r.trim)return n.trim()!==e.trim()}return n!==e}(t,e))}var Pr={create:Br,update:Br},Hr=E((function(t){var e={},n=/:(.+)/;return t.split(/;(?![^(]*\))/g).forEach((function(t){if(t){var i=t.split(n);i.length>1&&(e[i[0].trim()]=i[1].trim())}})),e}));function jr(t){var e=$r(t.style);return t.staticStyle?O(t.staticStyle,e):e}function $r(t){return Array.isArray(t)?w(t):"string"==typeof t?Hr(t):t}var Vr,Ur=/^--/,qr=/\s*!important$/,zr=function(t,e,n){if(Ur.test(e))t.style.setProperty(e,n);else if(qr.test(n))t.style.setProperty(T(e),n.replace(qr,""),"important");else{var i=Gr(e);if(Array.isArray(n))for(var r=0,o=n.length;r<o;r++)t.style[i]=n[r];else t.style[i]=n}},Kr=["Webkit","Moz","ms"],Gr=E((function(t){if(Vr=Vr||document.createElement("div").style,"filter"!==(t=D(t))&&t in Vr)return t;for(var e=t.charAt(0).toUpperCase()+t.slice(1),n=0;n<Kr.length;n++){var i=Kr[n]+e;if(i in Vr)return i}}));function Xr(t,n){var r=n.data,o=t.data;if(!(e(r.staticStyle)&&e(r.style)&&e(o.staticStyle)&&e(o.style))){var a,s,u=n.elm,c=o.staticStyle,l=o.normalizedStyle||o.style||{},d=c||l,p=$r(n.data.style)||{};n.data.normalizedStyle=i(p.__ob__)?O({},p):p;var h=function(t,e){var n,i={};if(e)for(var r=t;r.componentInstance;)(r=r.componentInstance._vnode)&&r.data&&(n=jr(r.data))&&O(i,n);(n=jr(t.data))&&O(i,n);for(var o=t;o=o.parent;)o.data&&(n=jr(o.data))&&O(i,n);return i}(n,!0);for(s in d)e(h[s])&&zr(u,s,"");for(s in h)(a=h[s])!==d[s]&&zr(u,s,null==a?"":a)}}var Wr={create:Xr,update:Xr},Zr=/\s+/;function Yr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Zr).forEach((function(e){return t.classList.add(e)})):t.classList.add(e);else{var n=" "+(t.getAttribute("class")||"")+" ";n.indexOf(" "+e+" ")<0&&t.setAttribute("class",(n+e).trim())}}function Jr(t,e){if(e&&(e=e.trim()))if(t.classList)e.indexOf(" ")>-1?e.split(Zr).forEach((function(e){return t.classList.remove(e)})):t.classList.remove(e),t.classList.length||t.removeAttribute("class");else{for(var n=" "+(t.getAttribute("class")||"")+" ",i=" "+e+" ";n.indexOf(i)>=0;)n=n.replace(i," ");(n=n.trim())?t.setAttribute("class",n):t.removeAttribute("class")}}function Qr(t){if(t){if("object"==typeof t){var e={};return!1!==t.css&&O(e,to(t.name||"v")),O(e,t),e}return"string"==typeof t?to(t):void 0}}var to=E((function(t){return{enterClass:t+"-enter",enterToClass:t+"-enter-to",enterActiveClass:t+"-enter-active",leaveClass:t+"-leave",leaveToClass:t+"-leave-to",leaveActiveClass:t+"-leave-active"}})),eo=G&&!J,no="transition",io="animation",ro="transition",oo="transitionend",ao="animation",so="animationend";eo&&(void 0===window.ontransitionend&&void 0!==window.onwebkittransitionend&&(ro="WebkitTransition",oo="webkitTransitionEnd"),void 0===window.onanimationend&&void 0!==window.onwebkitanimationend&&(ao="WebkitAnimation",so="webkitAnimationEnd"));var uo=G?window.requestAnimationFrame?window.requestAnimationFrame.bind(window):setTimeout:function(t){return t()};function co(t){uo((function(){uo(t)}))}function lo(t,e){var n=t._transitionClasses||(t._transitionClasses=[]);n.indexOf(e)<0&&(n.push(e),Yr(t,e))}function po(t,e){t._transitionClasses&&y(t._transitionClasses,e),Jr(t,e)}function ho(t,e,n){var i=mo(t,e),r=i.type,o=i.timeout,a=i.propCount;if(!r)return n();var s=r===no?oo:so,u=0,c=function(){t.removeEventListener(s,l),n()},l=function(e){e.target===t&&++u>=a&&c()};setTimeout((function(){u<a&&c()}),o+1),t.addEventListener(s,l)}var fo=/\b(transform|all)(,|$)/;function mo(t,e){var n,i=window.getComputedStyle(t),r=(i[ro+"Delay"]||"").split(", "),o=(i[ro+"Duration"]||"").split(", "),a=vo(r,o),s=(i[ao+"Delay"]||"").split(", "),u=(i[ao+"Duration"]||"").split(", "),c=vo(s,u),l=0,d=0;return e===no?a>0&&(n=no,l=a,d=o.length):e===io?c>0&&(n=io,l=c,d=u.length):d=(n=(l=Math.max(a,c))>0?a>c?no:io:null)?n===no?o.length:u.length:0,{type:n,timeout:l,propCount:d,hasTransform:n===no&&fo.test(i[ro+"Property"])}}function vo(t,e){for(;t.length<e.length;)t=t.concat(t);return Math.max.apply(null,e.map((function(e,n){return go(e)+go(t[n])})))}function go(t){return 1e3*Number(t.slice(0,-1).replace(",","."))}function yo(t,n){var r=t.elm;i(r._leaveCb)&&(r._leaveCb.cancelled=!0,r._leaveCb());var o=Qr(t.data.transition);if(!e(o)&&!i(r._enterCb)&&1===r.nodeType){for(var s=o.css,u=o.type,c=o.enterClass,l=o.enterToClass,d=o.enterActiveClass,p=o.appearClass,h=o.appearToClass,m=o.appearActiveClass,v=o.beforeEnter,g=o.enter,y=o.afterEnter,A=o.enterCancelled,C=o.beforeAppear,E=o.appear,b=o.afterAppear,D=o.appearCancelled,I=o.duration,_=_n,T=_n.$vnode;T&&T.parent;)_=T.context,T=T.parent;var S=!_._isMounted||!t.isRootInsert;if(!S||E||""===E){var x=S&&p?p:c,O=S&&m?m:d,w=S&&h?h:l,L=S&&C||v,k=S&&"function"==typeof E?E:g,F=S&&b||y,R=S&&D||A,N=f(a(I)?I.enter:I);null!=N&&Co(N,"enter",t);var M=!1!==s&&!J,P=bo(k),H=r._enterCb=B((function(){M&&(po(r,w),po(r,O)),H.cancelled?(M&&po(r,x),R&&R(r)):F&&F(r),r._enterCb=null}));t.data.show||Re(t,"insert",(function(){var e=r.parentNode,n=e&&e._pending&&e._pending[t.key];n&&n.tag===t.tag&&n.elm._leaveCb&&n.elm._leaveCb(),k&&k(r,H)})),L&&L(r),M&&(lo(r,x),lo(r,O),co((function(){po(r,x),H.cancelled||(lo(r,w),P||(Eo(N)?setTimeout(H,N):ho(r,u,H)))}))),t.data.show&&(n&&n(),k&&k(r,H)),M||P||H()}}}function Ao(t,n){var r=t.elm;i(r._enterCb)&&(r._enterCb.cancelled=!0,r._enterCb());var o=Qr(t.data.transition);if(e(o)||1!==r.nodeType)return n();if(!i(r._leaveCb)){var s=o.css,u=o.type,c=o.leaveClass,l=o.leaveToClass,d=o.leaveActiveClass,p=o.beforeLeave,h=o.leave,m=o.afterLeave,v=o.leaveCancelled,g=o.delayLeave,y=o.duration,A=!1!==s&&!J,C=bo(h),E=f(a(y)?y.leave:y);i(E)&&Co(E,"leave",t);var b=r._leaveCb=B((function(){r.parentNode&&r.parentNode._pending&&(r.parentNode._pending[t.key]=null),A&&(po(r,l),po(r,d)),b.cancelled?(A&&po(r,c),v&&v(r)):(n(),m&&m(r)),r._leaveCb=null}));g?g(D):D()}function D(){b.cancelled||(!t.data.show&&r.parentNode&&((r.parentNode._pending||(r.parentNode._pending={}))[t.key]=t),p&&p(r),A&&(lo(r,c),lo(r,d),co((function(){po(r,c),b.cancelled||(lo(r,l),C||(Eo(E)?setTimeout(b,E):ho(r,u,b)))}))),h&&h(r,b),A||C||b())}}function Co(t,e,n){"number"!=typeof t?lt("<transition> explicit "+e+" duration is not a valid number - got "+JSON.stringify(t)+".",n.context):isNaN(t)&&lt("<transition> explicit "+e+" duration is NaN - the duration expression might be incorrect.",n.context)}function Eo(t){return"number"==typeof t&&!isNaN(t)}function bo(t){if(e(t))return!1;var n=t.fns;return i(n)?bo(Array.isArray(n)?n[0]:n):(t._length||t.length)>1}function Do(t,e){!0!==e.data.show&&yo(e)}var Io=function(t){var n,a,s={},u=t.modules,c=t.nodeOps;for(n=0;n<Ni.length;++n)for(s[Ni[n]]=[],a=0;a<u.length;++a)i(u[a][Ni[n]])&&s[Ni[n]].push(u[a][Ni[n]]);function d(t){var e=c.parentNode(t);i(e)&&c.removeChild(e,t)}function p(t,e){return!e&&!t.ns&&!(j.ignoredElements.length&&j.ignoredElements.some((function(e){return l(e)?e.test(t.tag):e===t.tag})))&&j.isUnknownElement(t.tag)}var h=0;function f(t,e,n,o,a,u,l){if(i(t.elm)&&i(u)&&(t=u[l]=_t(t)),t.isRootInsert=!a,!function(t,e,n,o){var a=t.data;if(i(a)){var u=i(t.componentInstance)&&a.keepAlive;if(i(a=a.hook)&&i(a=a.init)&&a(t,!1),i(t.componentInstance))return v(t,e),g(n,t.elm,o),r(u)&&function(t,e,n,r){for(var o,a=t;a.componentInstance;)if(i(o=(a=a.componentInstance._vnode).data)&&i(o=o.transition)){for(o=0;o<s.activate.length;++o)s.activate[o](Ri,a);e.push(a);break}g(n,t.elm,r)}(t,e,n,o),!0}}(t,e,n,o)){var d=t.data,f=t.children,m=t.tag;i(m)?(d&&d.pre&&h++,p(t,h)&&lt("Unknown custom element: <"+m+'> - did you register the component correctly? For recursive components, make sure to provide the "name" option.',t.context),t.elm=t.ns?c.createElementNS(t.ns,m):c.createElement(m,t),E(t),y(t,f,e),i(d)&&C(t,e),g(n,t.elm,o),d&&d.pre&&h--):r(t.isComment)?(t.elm=c.createComment(t.text),g(n,t.elm,o)):(t.elm=c.createTextNode(t.text),g(n,t.elm,o))}}function v(t,e){i(t.data.pendingInsert)&&(e.push.apply(e,t.data.pendingInsert),t.data.pendingInsert=null),t.elm=t.componentInstance.$el,A(t)?(C(t,e),E(t)):(Fi(t),e.push(t))}function g(t,e,n){i(t)&&(i(n)?c.parentNode(n)===t&&c.insertBefore(t,e,n):c.appendChild(t,e))}function y(t,e,n){if(Array.isArray(e)){T(e);for(var i=0;i<e.length;++i)f(e[i],n,t.elm,null,!0,e,i)}else o(t.text)&&c.appendChild(t.elm,c.createTextNode(String(t.text)))}function A(t){for(;t.componentInstance;)t=t.componentInstance._vnode;return i(t.tag)}function C(t,e){for(var r=0;r<s.create.length;++r)s.create[r](Ri,t);i(n=t.data.hook)&&(i(n.create)&&n.create(Ri,t),i(n.insert)&&e.push(t))}function E(t){var e;if(i(e=t.fnScopeId))c.setStyleScope(t.elm,e);else for(var n=t;n;)i(e=n.context)&&i(e=e.$options._scopeId)&&c.setStyleScope(t.elm,e),n=n.parent;i(e=_n)&&e!==t.context&&e!==t.fnContext&&i(e=e.$options._scopeId)&&c.setStyleScope(t.elm,e)}function b(t,e,n,i,r,o){for(;i<=r;++i)f(n[i],o,t,e,!1,n,i)}function D(t){var e,n,r=t.data;if(i(r))for(i(e=r.hook)&&i(e=e.destroy)&&e(t),e=0;e<s.destroy.length;++e)s.destroy[e](t);if(i(e=t.children))for(n=0;n<t.children.length;++n)D(t.children[n])}function I(t,e,n){for(;e<=n;++e){var r=t[e];i(r)&&(i(r.tag)?(_(r),D(r)):d(r.elm))}}function _(t,e){if(i(e)||i(t.data)){var n,r=s.remove.length+1;for(i(e)?e.listeners+=r:e=function(t,e){function n(){0==--n.listeners&&d(t)}return n.listeners=e,n}(t.elm,r),i(n=t.componentInstance)&&i(n=n._vnode)&&i(n.data)&&_(n,e),n=0;n<s.remove.length;++n)s.remove[n](t,e);i(n=t.data.hook)&&i(n=n.remove)?n(t,e):e()}else d(t.elm)}function T(t){for(var e={},n=0;n<t.length;n++){var r=t[n],o=r.key;i(o)&&(e[o]?lt("Duplicate keys detected: '"+o+"'. This may cause an update error.",r.context):e[o]=!0)}}function S(t,e,n,r){for(var o=n;o<r;o++){var a=e[o];if(i(a)&&Bi(t,a))return o}}function x(t,n,o,a,u,l){if(t!==n){i(n.elm)&&i(a)&&(n=a[u]=_t(n));var d=n.elm=t.elm;if(r(t.isAsyncPlaceholder))i(n.asyncFactory.resolved)?k(t.elm,n,o):n.isAsyncPlaceholder=!0;else if(r(n.isStatic)&&r(t.isStatic)&&n.key===t.key&&(r(n.isCloned)||r(n.isOnce)))n.componentInstance=t.componentInstance;else{var p,h=n.data;i(h)&&i(p=h.hook)&&i(p=p.prepatch)&&p(t,n);var m=t.children,v=n.children;if(i(h)&&A(n)){for(p=0;p<s.update.length;++p)s.update[p](t,n);i(p=h.hook)&&i(p=p.update)&&p(t,n)}e(n.text)?i(m)&&i(v)?m!==v&&function(t,n,r,o,a){var s,u,l,d=0,p=0,h=n.length-1,m=n[0],v=n[h],g=r.length-1,y=r[0],A=r[g],C=!a;for(T(r);d<=h&&p<=g;)e(m)?m=n[++d]:e(v)?v=n[--h]:Bi(m,y)?(x(m,y,o,r,p),m=n[++d],y=r[++p]):Bi(v,A)?(x(v,A,o,r,g),v=n[--h],A=r[--g]):Bi(m,A)?(x(m,A,o,r,g),C&&c.insertBefore(t,m.elm,c.nextSibling(v.elm)),m=n[++d],A=r[--g]):Bi(v,y)?(x(v,y,o,r,p),C&&c.insertBefore(t,v.elm,m.elm),v=n[--h],y=r[++p]):(e(s)&&(s=Mi(n,d,h)),e(u=i(y.key)?s[y.key]:S(y,n,d,h))?f(y,o,t,m.elm,!1,r,p):Bi(l=n[u],y)?(x(l,y,o,r,p),n[u]=void 0,C&&c.insertBefore(t,l.elm,m.elm)):f(y,o,t,m.elm,!1,r,p),y=r[++p]);d>h?b(t,e(r[g+1])?null:r[g+1].elm,r,p,g,o):p>g&&I(n,d,h)}(d,m,v,o,l):i(v)?(T(v),i(t.text)&&c.setTextContent(d,""),b(d,null,v,0,v.length-1,o)):i(m)?I(m,0,m.length-1):i(t.text)&&c.setTextContent(d,""):t.text!==n.text&&c.setTextContent(d,n.text),i(h)&&i(p=h.hook)&&i(p=p.postpatch)&&p(t,n)}}}function O(t,e,n){if(r(n)&&i(t.parent))t.parent.data.pendingInsert=e;else for(var o=0;o<e.length;++o)e[o].data.hook.insert(e[o])}var w=!1,L=m("attrs,class,staticClass,staticStyle,key");function k(t,e,n,o){var a,s=e.tag,u=e.data,c=e.children;if(o=o||u&&u.pre,e.elm=t,r(e.isComment)&&i(e.asyncFactory))return e.isAsyncPlaceholder=!0,!0;if(!function(t,e,n){return i(e.tag)?0===e.tag.indexOf("vue-component")||!p(e,n)&&e.tag.toLowerCase()===(t.tagName&&t.tagName.toLowerCase()):t.nodeType===(e.isComment?8:3)}(t,e,o))return!1;if(i(u)&&(i(a=u.hook)&&i(a=a.init)&&a(e,!0),i(a=e.componentInstance)))return v(e,n),!0;if(i(s)){if(i(c))if(t.hasChildNodes())if(i(a=u)&&i(a=a.domProps)&&i(a=a.innerHTML)){if(a!==t.innerHTML)return"undefined"==typeof console||w||(w=!0,console.warn("Parent: ",t),console.warn("server innerHTML: ",a),console.warn("client innerHTML: ",t.innerHTML)),!1}else{for(var l=!0,d=t.firstChild,h=0;h<c.length;h++){if(!d||!k(d,c[h],n,o)){l=!1;break}d=d.nextSibling}if(!l||d)return"undefined"==typeof console||w||(w=!0,console.warn("Parent: ",t),console.warn("Mismatching childNodes vs. VNodes: ",t.childNodes,c)),!1}else y(e,c,n);if(i(u)){var f=!1;for(var m in u)if(!L(m)){f=!0,C(e,n);break}!f&&u.class&&Oe(u.class)}}else t.data!==e.text&&(t.data=e.text);return!0}return function(t,n,o,a){if(!e(n)){var u=!1,l=[];if(e(t))u=!0,f(n,l);else{var d=i(t.nodeType);if(!d&&Bi(t,n))x(t,n,l,null,null,a);else{if(d){if(1===t.nodeType&&t.hasAttribute(M)&&(t.removeAttribute(M),o=!0),r(o)){if(k(t,n,l))return O(n,l,!0),t;lt("The client-side rendered virtual DOM tree is not matching server-rendered content. This is likely caused by incorrect HTML markup, for example nesting block-level elements inside <p>, or missing <tbody>. Bailing hydration and performing full client-side render.")}b=t,t=new Et(c.tagName(b).toLowerCase(),{},[],void 0,b)}var p=t.elm,h=c.parentNode(p);if(f(n,l,p._leaveCb?null:h,c.nextSibling(p)),i(n.parent))for(var m=n.parent,v=A(n);m;){for(var g=0;g<s.destroy.length;++g)s.destroy[g](m);if(m.elm=n.elm,v){for(var y=0;y<s.create.length;++y)s.create[y](Ri,m);var C=m.data.hook.insert;if(C.merged)for(var E=1;E<C.fns.length;E++)C.fns[E]()}else Fi(m);m=m.parent}i(h)?I([t],0,0):i(t.tag)&&D(t)}}return O(n,l,u),n.elm}var b;i(t)&&D(t)}}({nodeOps:Li,modules:[Xi,ir,Nr,Pr,Wr,G?{create:Do,activate:Do,remove:function(t,e){!0!==t.data.show?Ao(t,e):e()}}:{}].concat(qi)});J&&document.addEventListener("selectionchange",(function(){var t=document.activeElement;t&&t.vmodel&&ko(t,"input")}));var _o={inserted:function(t,e,n,i){"select"===n.tag?(i.elm&&!i.elm._vOptions?Re(n,"postpatch",(function(){_o.componentUpdated(t,e,n)})):To(t,e,n.context),t._vOptions=[].map.call(t.options,Oo)):("textarea"===n.tag||Oi(t.type))&&(t._vModifiers=e.modifiers,e.modifiers.lazy||(t.addEventListener("compositionstart",wo),t.addEventListener("compositionend",Lo),t.addEventListener("change",Lo),J&&(t.vmodel=!0)))},componentUpdated:function(t,e,n){if("select"===n.tag){To(t,e,n.context);var i=t._vOptions,r=t._vOptions=[].map.call(t.options,Oo);r.some((function(t,e){return!R(t,i[e])}))&&(t.multiple?e.value.some((function(t){return xo(t,r)})):e.value!==e.oldValue&&xo(e.value,r))&&ko(t,"change")}}};function To(t,e,n){So(t,e,n),(Y||Q)&&setTimeout((function(){So(t,e,n)}),0)}function So(t,e,n){var i=e.value,r=t.multiple;if(!r||Array.isArray(i)){for(var o,a,s=0,u=t.options.length;s<u;s++)if(a=t.options[s],r)o=N(i,Oo(a))>-1,a.selected!==o&&(a.selected=o);else if(R(Oo(a),i))return void(t.selectedIndex!==s&&(t.selectedIndex=s));r||(t.selectedIndex=-1)}else lt('<select multiple v-model="'+e.expression+'"> expects an Array value for its binding, but got '+Object.prototype.toString.call(i).slice(8,-1),n)}function xo(t,e){return e.every((function(e){return!R(e,t)}))}function Oo(t){return"_value"in t?t._value:t.value}function wo(t){t.target.composing=!0}function Lo(t){t.target.composing&&(t.target.composing=!1,ko(t.target,"input"))}function ko(t,e){var n=document.createEvent("HTMLEvents");n.initEvent(e,!0,!0),t.dispatchEvent(n)}function Fo(t){return!t.componentInstance||t.data&&t.data.transition?t:Fo(t.componentInstance._vnode)}var Ro={model:_o,show:{bind:function(t,e,n){var i=e.value,r=(n=Fo(n)).data&&n.data.transition,o=t.__vOriginalDisplay="none"===t.style.display?"":t.style.display;i&&r?(n.data.show=!0,yo(n,(function(){t.style.display=o}))):t.style.display=i?o:"none"},update:function(t,e,n){var i=e.value;!i!=!e.oldValue&&((n=Fo(n)).data&&n.data.transition?(n.data.show=!0,i?yo(n,(function(){t.style.display=t.__vOriginalDisplay})):Ao(n,(function(){t.style.display="none"}))):t.style.display=i?t.__vOriginalDisplay:"none")},unbind:function(t,e,n,i,r){r||(t.style.display=t.__vOriginalDisplay)}}},No={name:String,appear:Boolean,css:Boolean,mode:String,type:String,enterClass:String,leaveClass:String,enterToClass:String,leaveToClass:String,enterActiveClass:String,leaveActiveClass:String,appearClass:String,appearActiveClass:String,appearToClass:String,duration:[Number,String,Object]};function Bo(t){var e=t&&t.componentOptions;return e&&e.Ctor.options.abstract?Bo(Cn(e.children)):t}function Mo(t){var e={},n=t.$options;for(var i in n.propsData)e[i]=t[i];var r=n._parentListeners;for(var o in r)e[D(o)]=r[o];return e}function Po(t,e){if(/\d-keep-alive$/.test(e.tag))return t("keep-alive",{props:e.componentOptions.propsData})}var Ho=function(t){return t.tag||Ve(t)},jo=function(t){return"show"===t.name},$o={name:"transition",props:No,abstract:!0,render:function(t){var e=this,n=this.$slots.default;if(n&&(n=n.filter(Ho)).length){n.length>1&&lt("<transition> can only be used on a single element. Use <transition-group> for lists.",this.$parent);var i=this.mode;i&&"in-out"!==i&&"out-in"!==i&&lt("invalid <transition> mode: "+i,this.$parent);var r=n[0];if(function(t){for(;t=t.parent;)if(t.data.transition)return!0}(this.$vnode))return r;var a=Bo(r);if(!a)return r;if(this._leaving)return Po(t,r);var s="__transition-"+this._uid+"-";a.key=null==a.key?a.isComment?s+"comment":s+a.tag:o(a.key)?0===String(a.key).indexOf(s)?a.key:s+a.key:a.key;var u=(a.data||(a.data={})).transition=Mo(this),c=this._vnode,l=Bo(c);if(a.data.directives&&a.data.directives.some(jo)&&(a.data.show=!0),l&&l.data&&!function(t,e){return e.key===t.key&&e.tag===t.tag}(a,l)&&!Ve(l)&&(!l.componentInstance||!l.componentInstance._vnode.isComment)){var d=l.data.transition=O({},u);if("out-in"===i)return this._leaving=!0,Re(d,"afterLeave",(function(){e._leaving=!1,e.$forceUpdate()})),Po(t,r);if("in-out"===i){if(Ve(a))return c;var p,h=function(){p()};Re(u,"afterEnter",h),Re(u,"enterCancelled",h),Re(d,"delayLeave",(function(t){p=t}))}}return r}}},Vo=O({tag:String,moveClass:String},No);function Uo(t){t.elm._moveCb&&t.elm._moveCb(),t.elm._enterCb&&t.elm._enterCb()}function qo(t){t.data.newPos=t.elm.getBoundingClientRect()}function zo(t){var e=t.data.pos,n=t.data.newPos,i=e.left-n.left,r=e.top-n.top;if(i||r){t.data.moved=!0;var o=t.elm.style;o.transform=o.WebkitTransform="translate("+i+"px,"+r+"px)",o.transitionDuration="0s"}}delete Vo.mode;var Ko={Transition:$o,TransitionGroup:{props:Vo,beforeMount:function(){var t=this,e=this._update;this._update=function(n,i){var r=Sn(t);t.__patch__(t._vnode,t.kept,!1,!0),t._vnode=t.kept,r(),e.call(t,n,i)}},render:function(t){for(var e=this.tag||this.$vnode.data.tag||"span",n=Object.create(null),i=this.prevChildren=this.children,r=this.$slots.default||[],o=this.children=[],a=Mo(this),s=0;s<r.length;s++){var u=r[s];if(u.tag)if(null!=u.key&&0!==String(u.key).indexOf("__vlist"))o.push(u),n[u.key]=u,(u.data||(u.data={})).transition=a;else{var c=u.componentOptions,l=c?c.Ctor.options.name||c.tag||"":u.tag;lt("<transition-group> children must be keyed: <"+l+">")}}if(i){for(var d=[],p=[],h=0;h<i.length;h++){var f=i[h];f.data.transition=a,f.data.pos=f.elm.getBoundingClientRect(),n[f.key]?d.push(f):p.push(f)}this.kept=t(e,null,d),this.removed=p}return t(e,null,o)},updated:function(){var t=this.prevChildren,e=this.moveClass||(this.name||"v")+"-move";t.length&&this.hasMove(t[0].elm,e)&&(t.forEach(Uo),t.forEach(qo),t.forEach(zo),this._reflow=document.body.offsetHeight,t.forEach((function(t){if(t.data.moved){var n=t.elm,i=n.style;lo(n,e),i.transform=i.WebkitTransform=i.transitionDuration="",n.addEventListener(oo,n._moveCb=function t(i){i&&i.target!==n||i&&!/transform$/.test(i.propertyName)||(n.removeEventListener(oo,t),n._moveCb=null,po(n,e))})}})))},methods:{hasMove:function(t,e){if(!eo)return!1;if(this._hasMove)return this._hasMove;var n=t.cloneNode();t._transitionClasses&&t._transitionClasses.forEach((function(t){Jr(n,t)})),Yr(n,e),n.style.display="none",this.$el.appendChild(n);var i=mo(n);return this.$el.removeChild(n),this._hasMove=i.hasTransform}}}};ei.config.mustUseProp=di,ei.config.isReservedTag=Ti,ei.config.isReservedAttr=ci,ei.config.getTagNamespace=Si,ei.config.isUnknownElement=function(t){if(!G)return!0;if(Ti(t))return!1;if(t=t.toLowerCase(),null!=xi[t])return xi[t];var e=document.createElement(t);return t.indexOf("-")>-1?xi[t]=e.constructor===window.HTMLUnknownElement||e.constructor===window.HTMLElement:xi[t]=/HTMLUnknownElement/.test(e.toString())},O(ei.options.directives,Ro),O(ei.options.components,Ko),ei.prototype.__patch__=G?Io:L,ei.prototype.$mount=function(t,e){return function(t,e,n){var i;return t.$el=e,t.$options.render||(t.$options.render=Dt,t.$options.template&&"#"!==t.$options.template.charAt(0)||t.$options.el||e?lt("You are using the runtime-only build of Vue where the template compiler is not available. Either pre-compile the templates into render functions, or use the compiler-included build.",t):lt("Failed to mount component: template or render function not defined.",t)),Ln(t,"beforeMount"),i=j.performance&&ue?function(){var e=t._name,i=t._uid,r="vue-perf-start:"+i,o="vue-perf-end:"+i;ue(r);var a=t._render();ue(o),ce("vue "+e+" render",r,o),ue(r),t._update(a,n),ue(o),ce("vue "+e+" patch",r,o)}:function(){t._update(t._render(),n)},new qn(t,i,L,{before:function(){t._isMounted&&!t._isDestroyed&&Ln(t,"beforeUpdate")}},!0),n=!1,null==t.$vnode&&(t._isMounted=!0,Ln(t,"mounted")),t}(this,t=t&&G?wi(t):void 0,e)},G&&setTimeout((function(){j.devtools&&(at?at.emit("init",ei):console[console.info?"info":"log"]("Download the Vue Devtools extension for a better development experience:\nhttps://github.com/vuejs/vue-devtools")),!1!==j.productionTip&&"undefined"!=typeof console&&console[console.info?"info":"log"]("You are running Vue in development mode.\nMake sure to turn on production mode when deploying for production.\nSee more tips at https://vuejs.org/guide/deployment.html")}),0);var Go=/\{\{((?:.|\r?\n)+?)\}\}/g,Xo=/[-.*+?^${}()|[\]\/\\]/g,Wo=E((function(t){var e=t[0].replace(Xo,"\\$&"),n=t[1].replace(Xo,"\\$&");return new RegExp(e+"((?:.|\\n)+?)"+n,"g")}));function Zo(t,e){var n=e?Wo(e):Go;if(n.test(t)){for(var i,r,o,a=[],s=[],u=n.lastIndex=0;i=n.exec(t);){(r=i.index)>u&&(s.push(o=t.slice(u,r)),a.push(JSON.stringify(o)));var c=or(i[1].trim());a.push("_s("+c+")"),s.push({"@binding":c}),u=r+i[0].length}return u<t.length&&(s.push(o=t.slice(u)),a.push(JSON.stringify(o))),{expression:a.join("+"),tokens:s}}}var Yo={staticKeys:["staticClass"],transformNode:function(t,e){var n=e.warn||sr,i=gr(t,"class");i&&Zo(i,e.delimiters)&&n('class="'+i+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div class="{{ val }}">, use <div :class="val">.',t.rawAttrsMap.class),i&&(t.staticClass=JSON.stringify(i));var r=vr(t,"class",!1);r&&(t.classBinding=r)},genData:function(t){var e="";return t.staticClass&&(e+="staticClass:"+t.staticClass+","),t.classBinding&&(e+="class:"+t.classBinding+","),e}};var Jo,Qo={staticKeys:["staticStyle"],transformNode:function(t,e){var n=e.warn||sr,i=gr(t,"style");i&&(Zo(i,e.delimiters)&&n('style="'+i+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div style="{{ val }}">, use <div :style="val">.',t.rawAttrsMap.style),t.staticStyle=JSON.stringify(Hr(i)));var r=vr(t,"style",!1);r&&(t.styleBinding=r)},genData:function(t){var e="";return t.staticStyle&&(e+="staticStyle:"+t.staticStyle+","),t.styleBinding&&(e+="style:("+t.styleBinding+"),"),e}},ta=function(t){return(Jo=Jo||document.createElement("div")).innerHTML=t,Jo.textContent},ea=m("area,base,br,col,embed,frame,hr,img,input,isindex,keygen,link,meta,param,source,track,wbr"),na=m("colgroup,dd,dt,li,options,p,td,tfoot,th,thead,tr,source"),ia=m("address,article,aside,base,blockquote,body,caption,col,colgroup,dd,details,dialog,div,dl,dt,fieldset,figcaption,figure,footer,form,h1,h2,h3,h4,h5,h6,head,header,hgroup,hr,html,legend,li,menuitem,meta,optgroup,option,param,rp,rt,source,style,summary,tbody,td,tfoot,th,thead,title,tr,track"),ra=/^\s*([^\s"'<>\/=]+)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,oa=/^\s*((?:v-[\w-]+:|@|:|#)\[[^=]+?\][^\s"'<>\/=]*)(?:\s*(=)\s*(?:"([^"]*)"+|'([^']*)'+|([^\s"'=<>`]+)))?/,aa="[a-zA-Z_][\\-\\.0-9_a-zA-Z"+$.source+"]*",sa="((?:"+aa+"\\:)?"+aa+")",ua=new RegExp("^<"+sa),ca=/^\s*(\/?)>/,la=new RegExp("^<\\/"+sa+"[^>]*>"),da=/^<!DOCTYPE [^>]+>/i,pa=/^<!\--/,ha=/^<!\[/,fa=m("script,style,textarea",!0),ma={},va={"&lt;":"<","&gt;":">","&quot;":'"',"&amp;":"&","&#10;":"\n","&#9;":"\t","&#39;":"'"},ga=/&(?:lt|gt|quot|amp|#39);/g,ya=/&(?:lt|gt|quot|amp|#39|#10|#9);/g,Aa=m("pre,textarea",!0),Ca=function(t,e){return t&&Aa(t)&&"\n"===e[0]};function Ea(t,e){var n=e?ya:ga;return t.replace(n,(function(t){return va[t]}))}var ba,Da,Ia,_a,Ta,Sa,xa,Oa,wa,La=/^@|^v-on:/,ka=/^v-|^@|^:|^#/,Fa=/([\s\S]*?)\s+(?:in|of)\s+([\s\S]*)/,Ra=/,([^,\}\]]*)(?:,([^,\}\]]*))?$/,Na=/^\(|\)$/g,Ba=/^\[.*\]$/,Ma=/:(.*)$/,Pa=/^:|^\.|^v-bind:/,Ha=/\.[^.\]]+(?=[^\]]*$)/g,ja=/^v-slot(:|$)|^#/,$a=/[\r\n]/,Va=/[ \f\t\r\n]+/g,Ua=/[\s"'<>\/=]/,qa=E(ta),za="_empty_";function Ka(t,e,n){return{type:1,tag:t,attrsList:e,attrsMap:Qa(e),rawAttrsMap:{},parent:n,children:[]}}function Ga(t,e){ba=e.warn||sr,Sa=e.isPreTag||k,xa=e.mustUseProp||k,Oa=e.getTagNamespace||k;var n=e.isReservedTag||k;wa=function(t){return!(!(t.component||t.attrsMap[":is"]||t.attrsMap["v-bind:is"])&&(t.attrsMap.is?n(t.attrsMap.is):n(t.tag)))},Ia=ur(e.modules,"transformNode"),_a=ur(e.modules,"preTransformNode"),Ta=ur(e.modules,"postTransformNode"),Da=e.delimiters;var i,r,o=[],a=!1!==e.preserveWhitespace,s=e.whitespace,u=!1,c=!1,l=!1;function d(t,e){l||(l=!0,ba(t,e))}function p(t){if(h(t),u||t.processed||(t=Xa(t,e)),o.length||t===i||(i.if&&(t.elseif||t.else)?(f(t),Za(i,{exp:t.elseif,block:t})):d("Component template should contain exactly one root element. If you are using v-if on multiple elements, use v-else-if to chain them instead.",{start:t.start})),r&&!t.forbidden)if(t.elseif||t.else)a=t,(s=function(t){for(var e=t.length;e--;){if(1===t[e].type)return t[e];" "!==t[e].text&&ba('text "'+t[e].text.trim()+'" between v-if and v-else(-if) will be ignored.',t[e]),t.pop()}}(r.children))&&s.if?Za(s,{exp:a.elseif,block:a}):ba("v-"+(a.elseif?'else-if="'+a.elseif+'"':"else")+" used on element <"+a.tag+"> without corresponding v-if.",a.rawAttrsMap[a.elseif?"v-else-if":"v-else"]);else{if(t.slotScope){var n=t.slotTarget||'"default"';(r.scopedSlots||(r.scopedSlots={}))[n]=t}r.children.push(t),t.parent=r}var a,s;t.children=t.children.filter((function(t){return!t.slotScope})),h(t),t.pre&&(u=!1),Sa(t.tag)&&(c=!1);for(var l=0;l<Ta.length;l++)Ta[l](t,e)}function h(t){if(!c)for(var e;(e=t.children[t.children.length-1])&&3===e.type&&" "===e.text;)t.children.pop()}function f(t){"slot"!==t.tag&&"template"!==t.tag||d("Cannot use <"+t.tag+"> as component root element because it may contain multiple nodes.",{start:t.start}),t.attrsMap.hasOwnProperty("v-for")&&d("Cannot use v-for on stateful component root element because it renders multiple elements.",t.rawAttrsMap["v-for"])}return function(t,e){for(var n,i,r=[],o=e.expectHTML,a=e.isUnaryTag||k,s=e.canBeLeftOpenTag||k,u=0;t;){if(n=t,i&&fa(i)){var c=0,l=i.toLowerCase(),d=ma[l]||(ma[l]=new RegExp("([\\s\\S]*?)(</"+l+"[^>]*>)","i")),p=t.replace(d,(function(t,n,i){return c=i.length,fa(l)||"noscript"===l||(n=n.replace(/<!\--([\s\S]*?)-->/g,"$1").replace(/<!\[CDATA\[([\s\S]*?)]]>/g,"$1")),Ca(l,n)&&(n=n.slice(1)),e.chars&&e.chars(n),""}));u+=t.length-p.length,t=p,T(l,u-c,u)}else{var h=t.indexOf("<");if(0===h){if(pa.test(t)){var f=t.indexOf("--\x3e");if(f>=0){e.shouldKeepComment&&e.comment(t.substring(4,f),u,u+f+3),D(f+3);continue}}if(ha.test(t)){var m=t.indexOf("]>");if(m>=0){D(m+2);continue}}var v=t.match(da);if(v){D(v[0].length);continue}var g=t.match(la);if(g){var y=u;D(g[0].length),T(g[1],y,u);continue}var A=I();if(A){_(A),Ca(A.tagName,t)&&D(1);continue}}var C=void 0,E=void 0,b=void 0;if(h>=0){for(E=t.slice(h);!(la.test(E)||ua.test(E)||pa.test(E)||ha.test(E)||(b=E.indexOf("<",1))<0);)h+=b,E=t.slice(h);C=t.substring(0,h)}h<0&&(C=t),C&&D(C.length),e.chars&&C&&e.chars(C,u-C.length,u)}if(t===n){e.chars&&e.chars(t),!r.length&&e.warn&&e.warn('Mal-formatted tag at end of template: "'+t+'"',{start:u+t.length});break}}function D(e){u+=e,t=t.substring(e)}function I(){var e=t.match(ua);if(e){var n,i,r={tagName:e[1],attrs:[],start:u};for(D(e[0].length);!(n=t.match(ca))&&(i=t.match(oa)||t.match(ra));)i.start=u,D(i[0].length),i.end=u,r.attrs.push(i);if(n)return r.unarySlash=n[1],D(n[0].length),r.end=u,r}}function _(t){var n=t.tagName,u=t.unarySlash;o&&("p"===i&&ia(n)&&T(i),s(n)&&i===n&&T(n));for(var c=a(n)||!!u,l=t.attrs.length,d=new Array(l),p=0;p<l;p++){var h=t.attrs[p],f=h[3]||h[4]||h[5]||"",m="a"===n&&"href"===h[1]?e.shouldDecodeNewlinesForHref:e.shouldDecodeNewlines;d[p]={name:h[1],value:Ea(f,m)},e.outputSourceRange&&(d[p].start=h.start+h[0].match(/^\s*/).length,d[p].end=h.end)}c||(r.push({tag:n,lowerCasedTag:n.toLowerCase(),attrs:d,start:t.start,end:t.end}),i=n),e.start&&e.start(n,d,c,t.start,t.end)}function T(t,n,o){var a,s;if(null==n&&(n=u),null==o&&(o=u),t)for(s=t.toLowerCase(),a=r.length-1;a>=0&&r[a].lowerCasedTag!==s;a--);else a=0;if(a>=0){for(var c=r.length-1;c>=a;c--)(c>a||!t&&e.warn)&&e.warn("tag <"+r[c].tag+"> has no matching end tag.",{start:r[c].start,end:r[c].end}),e.end&&e.end(r[c].tag,n,o);r.length=a,i=a&&r[a-1].tag}else"br"===s?e.start&&e.start(t,[],!0,n,o):"p"===s&&(e.start&&e.start(t,[],!1,n,o),e.end&&e.end(t,n,o))}T()}(t,{warn:ba,expectHTML:e.expectHTML,isUnaryTag:e.isUnaryTag,canBeLeftOpenTag:e.canBeLeftOpenTag,shouldDecodeNewlines:e.shouldDecodeNewlines,shouldDecodeNewlinesForHref:e.shouldDecodeNewlinesForHref,shouldKeepComment:e.comments,outputSourceRange:e.outputSourceRange,start:function(t,n,a,s,l){var d=r&&r.ns||Oa(t);Y&&"svg"===d&&(n=function(t){for(var e=[],n=0;n<t.length;n++){var i=t[n];ts.test(i.name)||(i.name=i.name.replace(es,""),e.push(i))}return e}(n));var h,m=Ka(t,n,r);d&&(m.ns=d),e.outputSourceRange&&(m.start=s,m.end=l,m.rawAttrsMap=m.attrsList.reduce((function(t,e){return t[e.name]=e,t}),{})),n.forEach((function(t){Ua.test(t.name)&&ba("Invalid dynamic argument expression: attribute names cannot contain spaces, quotes, <, >, / or =.",{start:t.start+t.name.indexOf("["),end:t.start+t.name.length})})),!("style"!==(h=m).tag&&("script"!==h.tag||h.attrsMap.type&&"text/javascript"!==h.attrsMap.type)||ot())&&(m.forbidden=!0,ba("Templates should only be responsible for mapping the state to the UI. Avoid placing tags with side-effects in your templates, such as <"+t+">, as they will not be parsed.",{start:m.start}));for(var v=0;v<_a.length;v++)m=_a[v](m,e)||m;u||(function(t){null!=gr(t,"v-pre")&&(t.pre=!0)}(m),m.pre&&(u=!0)),Sa(m.tag)&&(c=!0),u?function(t){var e=t.attrsList,n=e.length;if(n)for(var i=t.attrs=new Array(n),r=0;r<n;r++)i[r]={name:e[r].name,value:JSON.stringify(e[r].value)},null!=e[r].start&&(i[r].start=e[r].start,i[r].end=e[r].end);else t.pre||(t.plain=!0)}(m):m.processed||(Wa(m),function(t){var e=gr(t,"v-if");if(e)t.if=e,Za(t,{exp:e,block:t});else{null!=gr(t,"v-else")&&(t.else=!0);var n=gr(t,"v-else-if");n&&(t.elseif=n)}}(m),function(t){null!=gr(t,"v-once")&&(t.once=!0)}(m)),i||f(i=m),a?p(m):(r=m,o.push(m))},end:function(t,n,i){var a=o[o.length-1];o.length-=1,r=o[o.length-1],e.outputSourceRange&&(a.end=i),p(a)},chars:function(n,i,o){if(r){if(!Y||"textarea"!==r.tag||r.attrsMap.placeholder!==n){var l,p,h=r.children;(n=c||n.trim()?"script"===(f=r).tag||"style"===f.tag?n:qa(n):h.length?s?"condense"===s&&$a.test(n)?"":" ":a?" ":"":"")&&(c||"condense"!==s||(n=n.replace(Va," ")),!u&&" "!==n&&(l=Zo(n,Da))?p={type:2,expression:l.expression,tokens:l.tokens,text:n}:" "===n&&h.length&&" "===h[h.length-1].text||(p={type:3,text:n}),p&&(e.outputSourceRange&&(p.start=i,p.end=o),h.push(p)))}}else n===t?d("Component template requires a root element, rather than just text.",{start:i}):(n=n.trim())&&d('text "'+n+'" outside root element will be ignored.',{start:i});var f},comment:function(t,n,i){if(r){var o={type:3,text:t,isComment:!0};e.outputSourceRange&&(o.start=n,o.end=i),r.children.push(o)}}}),i}function Xa(t,e){var n;(function(t){var e=vr(t,"key");if(e){if("template"===t.tag&&ba("<template> cannot be keyed. Place the key on real elements instead.",mr(t,"key")),t.for){var n=t.iterator2||t.iterator1,i=t.parent;n&&n===e&&i&&"transition-group"===i.tag&&ba("Do not use v-for index as key on <transition-group> children, this is the same as not using keys.",mr(t,"key"),!0)}t.key=e}})(t),t.plain=!t.key&&!t.scopedSlots&&!t.attrsList.length,function(t){var e=vr(t,"ref");e&&(t.ref=e,t.refInFor=function(t){for(var e=t;e;){if(void 0!==e.for)return!0;e=e.parent}return!1}(t))}(t),function(t){var e;"template"===t.tag?((e=gr(t,"scope"))&&ba('the "scope" attribute for scoped slots have been deprecated and replaced by "slot-scope" since 2.5. The new "slot-scope" attribute can also be used on plain elements in addition to <template> to denote scoped slots.',t.rawAttrsMap.scope,!0),t.slotScope=e||gr(t,"slot-scope")):(e=gr(t,"slot-scope"))&&(t.attrsMap["v-for"]&&ba("Ambiguous combined usage of slot-scope and v-for on <"+t.tag+"> (v-for takes higher priority). Use a wrapper <template> for the scoped slot to make it clearer.",t.rawAttrsMap["slot-scope"],!0),t.slotScope=e);var n=vr(t,"slot");if(n&&(t.slotTarget='""'===n?'"default"':n,t.slotTargetDynamic=!(!t.attrsMap[":slot"]&&!t.attrsMap["v-bind:slot"]),"template"===t.tag||t.slotScope||lr(t,"slot",n,mr(t,"slot"))),"template"===t.tag){var i=yr(t,ja);if(i){(t.slotTarget||t.slotScope)&&ba("Unexpected mixed usage of different slot syntaxes.",t),t.parent&&!wa(t.parent)&&ba("<template v-slot> can only appear at the root level inside the receiving component",t);var r=Ya(i),o=r.name,a=r.dynamic;t.slotTarget=o,t.slotTargetDynamic=a,t.slotScope=i.value||za}}else{var s=yr(t,ja);if(s){wa(t)||ba("v-slot can only be used on components or <template>.",s),(t.slotScope||t.slotTarget)&&ba("Unexpected mixed usage of different slot syntaxes.",t),t.scopedSlots&&ba("To avoid scope ambiguity, the default slot should also use <template> syntax when there are other named slots.",s);var u=t.scopedSlots||(t.scopedSlots={}),c=Ya(s),l=c.name,d=c.dynamic,p=u[l]=Ka("template",[],t);p.slotTarget=l,p.slotTargetDynamic=d,p.children=t.children.filter((function(t){if(!t.slotScope)return t.parent=p,!0})),p.slotScope=s.value||za,t.children=[],t.plain=!1}}}(t),"slot"===(n=t).tag&&(n.slotName=vr(n,"name"),n.key&&ba("`key` does not work on <slot> because slots are abstract outlets and can possibly expand into multiple elements. Use the key on a wrapping element instead.",mr(n,"key"))),function(t){var e;(e=vr(t,"is"))&&(t.component=e),null!=gr(t,"inline-template")&&(t.inlineTemplate=!0)}(t);for(var i=0;i<Ia.length;i++)t=Ia[i](t,e)||t;return function(t){var e,n,i,r,o,a,s,u,c=t.attrsList;for(e=0,n=c.length;e<n;e++)if(i=r=c[e].name,o=c[e].value,ka.test(i))if(t.hasBindings=!0,(a=Ja(i.replace(ka,"")))&&(i=i.replace(Ha,"")),Pa.test(i))i=i.replace(Pa,""),o=or(o),(u=Ba.test(i))&&(i=i.slice(1,-1)),0===o.trim().length&&ba('The value for a v-bind expression cannot be empty. Found in "v-bind:'+i+'"'),a&&(a.prop&&!u&&"innerHtml"===(i=D(i))&&(i="innerHTML"),a.camel&&!u&&(i=D(i)),a.sync&&(s=Er(o,"$event"),u?fr(t,'"update:"+('+i+")",s,null,!1,ba,c[e],!0):(fr(t,"update:"+D(i),s,null,!1,ba,c[e]),T(i)!==D(i)&&fr(t,"update:"+T(i),s,null,!1,ba,c[e])))),a&&a.prop||!t.component&&xa(t.tag,t.attrsMap.type,i)?cr(t,i,o,c[e],u):lr(t,i,o,c[e],u);else if(La.test(i))i=i.replace(La,""),(u=Ba.test(i))&&(i=i.slice(1,-1)),fr(t,i,o,a,!1,ba,c[e],u);else{var l=(i=i.replace(ka,"")).match(Ma),d=l&&l[1];u=!1,d&&(i=i.slice(0,-(d.length+1)),Ba.test(d)&&(d=d.slice(1,-1),u=!0)),pr(t,i,r,o,d,u,a,c[e]),"model"===i&&ns(t,o)}else Zo(o,Da)&&ba(i+'="'+o+'": Interpolation inside attributes has been removed. Use v-bind or the colon shorthand instead. For example, instead of <div id="{{ val }}">, use <div :id="val">.',c[e]),lr(t,i,JSON.stringify(o),c[e]),!t.component&&"muted"===i&&xa(t.tag,t.attrsMap.type,i)&&cr(t,i,"true",c[e])}(t),t}function Wa(t){var e;if(e=gr(t,"v-for")){var n=function(t){var e=t.match(Fa);if(e){var n={};n.for=e[2].trim();var i=e[1].trim().replace(Na,""),r=i.match(Ra);return r?(n.alias=i.replace(Ra,"").trim(),n.iterator1=r[1].trim(),r[2]&&(n.iterator2=r[2].trim())):n.alias=i,n}}(e);n?O(t,n):ba("Invalid v-for expression: "+e,t.rawAttrsMap["v-for"])}}function Za(t,e){t.ifConditions||(t.ifConditions=[]),t.ifConditions.push(e)}function Ya(t){var e=t.name.replace(ja,"");return e||("#"!==t.name[0]?e="default":ba("v-slot shorthand syntax requires a slot name.",t)),Ba.test(e)?{name:e.slice(1,-1),dynamic:!0}:{name:'"'+e+'"',dynamic:!1}}function Ja(t){var e=t.match(Ha);if(e){var n={};return e.forEach((function(t){n[t.slice(1)]=!0})),n}}function Qa(t){for(var e={},n=0,i=t.length;n<i;n++)!e[t[n].name]||Y||Q||ba("duplicate attribute: "+t[n].name,t[n]),e[t[n].name]=t[n].value;return e}var ts=/^xmlns:NS\d+/,es=/^NS\d+:/;function ns(t,e){for(var n=t;n;)n.for&&n.alias===e&&ba("<"+t.tag+' v-model="'+e+'">: You are binding v-model directly to a v-for iteration alias. This will not be able to modify the v-for source array because writing to the alias is like modifying a function local variable. Consider using an array of objects and use v-model on an object property instead.',t.rawAttrsMap["v-model"]),n=n.parent}function is(t){return Ka(t.tag,t.attrsList.slice(),t.parent)}var rs=[Yo,Qo,{preTransformNode:function(t,e){if("input"===t.tag){var n,i=t.attrsMap;if(!i["v-model"])return;if((i[":type"]||i["v-bind:type"])&&(n=vr(t,"type")),i.type||n||!i["v-bind"]||(n="("+i["v-bind"]+").type"),n){var r=gr(t,"v-if",!0),o=r?"&&("+r+")":"",a=null!=gr(t,"v-else",!0),s=gr(t,"v-else-if",!0),u=is(t);Wa(u),dr(u,"type","checkbox"),Xa(u,e),u.processed=!0,u.if="("+n+")==='checkbox'"+o,Za(u,{exp:u.if,block:u});var c=is(t);gr(c,"v-for",!0),dr(c,"type","radio"),Xa(c,e),Za(u,{exp:"("+n+")==='radio'"+o,block:c});var l=is(t);return gr(l,"v-for",!0),dr(l,":type",n),Xa(l,e),Za(u,{exp:r,block:l}),a?u.else=!0:s&&(u.elseif=s),u}}}}];var os,as,ss={expectHTML:!0,modules:rs,directives:{model:function(t,e,n){nr=n;var i=e.value,r=e.modifiers,o=t.tag,a=t.attrsMap.type;if("input"===o&&"file"===a&&nr("<"+t.tag+' v-model="'+i+'" type="file">:\nFile inputs are read only. Use a v-on:change listener instead.',t.rawAttrsMap["v-model"]),t.component)return Cr(t,i,r),!1;if("select"===o)!function(t,e,n){var i='var $$selectedVal = Array.prototype.filter.call($event.target.options,function(o){return o.selected}).map(function(o){var val = "_value" in o ? o._value : o.value;return '+(n&&n.number?"_n(val)":"val")+"});";fr(t,"change",i=i+" "+Er(e,"$event.target.multiple ? $$selectedVal : $$selectedVal[0]"),null,!0)}(t,i,r);else if("input"===o&&"checkbox"===a)!function(t,e,n){var i=n&&n.number,r=vr(t,"value")||"null",o=vr(t,"true-value")||"true",a=vr(t,"false-value")||"false";cr(t,"checked","Array.isArray("+e+")?_i("+e+","+r+")>-1"+("true"===o?":("+e+")":":_q("+e+","+o+")")),fr(t,"change","var $$a="+e+",$$el=$event.target,$$c=$$el.checked?("+o+"):("+a+");if(Array.isArray($$a)){var $$v="+(i?"_n("+r+")":r)+",$$i=_i($$a,$$v);if($$el.checked){$$i<0&&("+Er(e,"$$a.concat([$$v])")+")}else{$$i>-1&&("+Er(e,"$$a.slice(0,$$i).concat($$a.slice($$i+1))")+")}}else{"+Er(e,"$$c")+"}",null,!0)}(t,i,r);else if("input"===o&&"radio"===a)!function(t,e,n){var i=n&&n.number,r=vr(t,"value")||"null";cr(t,"checked","_q("+e+","+(r=i?"_n("+r+")":r)+")"),fr(t,"change",Er(e,r),null,!0)}(t,i,r);else if("input"===o||"textarea"===o)!function(t,e,n){var i=t.attrsMap.type,r=t.attrsMap["v-bind:value"]||t.attrsMap[":value"],o=t.attrsMap["v-bind:type"]||t.attrsMap[":type"];if(r&&!o){var a=t.attrsMap["v-bind:value"]?"v-bind:value":":value";nr(a+'="'+r+'" conflicts with v-model on the same element because the latter already expands to a value binding internally',t.rawAttrsMap[a])}var s=n||{},u=s.lazy,c=s.number,l=s.trim,d=!u&&"range"!==i,p=u?"change":"range"===i?xr:"input",h="$event.target.value";l&&(h="$event.target.value.trim()"),c&&(h="_n("+h+")");var f=Er(e,h);d&&(f="if($event.target.composing)return;"+f),cr(t,"value","("+e+")"),fr(t,p,f,null,!0),(l||c)&&fr(t,"blur","$forceUpdate()")}(t,i,r);else{if(!j.isReservedTag(o))return Cr(t,i,r),!1;nr("<"+t.tag+' v-model="'+i+"\">: v-model is not supported on this element type. If you are working with contenteditable, it's recommended to wrap a library dedicated for that purpose inside a custom component.",t.rawAttrsMap["v-model"])}return!0},text:function(t,e){e.value&&cr(t,"textContent","_s("+e.value+")",e)},html:function(t,e){e.value&&cr(t,"innerHTML","_s("+e.value+")",e)}},isPreTag:function(t){return"pre"===t},isUnaryTag:ea,mustUseProp:di,canBeLeftOpenTag:na,isReservedTag:Ti,getTagNamespace:Si,staticKeys:function(t){return t.reduce((function(t,e){return t.concat(e.staticKeys||[])}),[]).join(",")}(rs)},us=E((function(t){return m("type,tag,attrsList,attrsMap,plain,parent,children,attrs,start,end,rawAttrsMap"+(t?","+t:""))}));function cs(t,e){t&&(os=us(e.staticKeys||""),as=e.isReservedTag||k,ls(t),ds(t,!1))}function ls(t){if(t.static=function(t){return 2!==t.type&&(3===t.type||!(!t.pre&&(t.hasBindings||t.if||t.for||v(t.tag)||!as(t.tag)||function(t){for(;t.parent;){if("template"!==(t=t.parent).tag)return!1;if(t.for)return!0}return!1}(t)||!Object.keys(t).every(os))))}(t),1===t.type){if(!as(t.tag)&&"slot"!==t.tag&&null==t.attrsMap["inline-template"])return;for(var e=0,n=t.children.length;e<n;e++){var i=t.children[e];ls(i),i.static||(t.static=!1)}if(t.ifConditions)for(var r=1,o=t.ifConditions.length;r<o;r++){var a=t.ifConditions[r].block;ls(a),a.static||(t.static=!1)}}}function ds(t,e){if(1===t.type){if((t.static||t.once)&&(t.staticInFor=e),t.static&&t.children.length&&(1!==t.children.length||3!==t.children[0].type))return void(t.staticRoot=!0);if(t.staticRoot=!1,t.children)for(var n=0,i=t.children.length;n<i;n++)ds(t.children[n],e||!!t.for);if(t.ifConditions)for(var r=1,o=t.ifConditions.length;r<o;r++)ds(t.ifConditions[r].block,e)}}var ps=/^([\w$_]+|\([^)]*?\))\s*=>|^function(?:\s+[\w$]+)?\s*\(/,hs=/\([^)]*?\);*$/,fs=/^[A-Za-z_$][\w$]*(?:\.[A-Za-z_$][\w$]*|\['[^']*?']|\["[^"]*?"]|\[\d+]|\[[A-Za-z_$][\w$]*])*$/,ms={esc:27,tab:9,enter:13,space:32,up:38,left:37,right:39,down:40,delete:[8,46]},vs={esc:["Esc","Escape"],tab:"Tab",enter:"Enter",space:[" ","Spacebar"],up:["Up","ArrowUp"],left:["Left","ArrowLeft"],right:["Right","ArrowRight"],down:["Down","ArrowDown"],delete:["Backspace","Delete","Del"]},gs=function(t){return"if("+t+")return null;"},ys={stop:"$event.stopPropagation();",prevent:"$event.preventDefault();",self:gs("$event.target !== $event.currentTarget"),ctrl:gs("!$event.ctrlKey"),shift:gs("!$event.shiftKey"),alt:gs("!$event.altKey"),meta:gs("!$event.metaKey"),left:gs("'button' in $event && $event.button !== 0"),middle:gs("'button' in $event && $event.button !== 1"),right:gs("'button' in $event && $event.button !== 2")};function As(t,e){var n=e?"nativeOn:":"on:",i="",r="";for(var o in t){var a=Cs(t[o]);t[o]&&t[o].dynamic?r+=o+","+a+",":i+='"'+o+'":'+a+","}return i="{"+i.slice(0,-1)+"}",r?n+"_d("+i+",["+r.slice(0,-1)+"])":n+i}function Cs(t){if(!t)return"function(){}";if(Array.isArray(t))return"["+t.map((function(t){return Cs(t)})).join(",")+"]";var e=fs.test(t.value),n=ps.test(t.value),i=fs.test(t.value.replace(hs,""));if(t.modifiers){var r="",o="",a=[];for(var s in t.modifiers)if(ys[s])o+=ys[s],ms[s]&&a.push(s);else if("exact"===s){var u=t.modifiers;o+=gs(["ctrl","shift","alt","meta"].filter((function(t){return!u[t]})).map((function(t){return"$event."+t+"Key"})).join("||"))}else a.push(s);return a.length&&(r+=function(t){return"if(!$event.type.indexOf('key')&&"+t.map(Es).join("&&")+")return null;"}(a)),o&&(r+=o),"function($event){"+r+(e?"return "+t.value+".apply(null, arguments)":n?"return ("+t.value+").apply(null, arguments)":i?"return "+t.value:t.value)+"}"}return e||n?t.value:"function($event){"+(i?"return "+t.value:t.value)+"}"}function Es(t){var e=parseInt(t,10);if(e)return"$event.keyCode!=="+e;var n=ms[t],i=vs[t];return"_k($event.keyCode,"+JSON.stringify(t)+","+JSON.stringify(n)+",$event.key,"+JSON.stringify(i)+")"}var bs={on:function(t,e){e.modifiers&&lt("v-on without argument does not support modifiers."),t.wrapListeners=function(t){return"_g("+t+","+e.value+")"}},bind:function(t,e){t.wrapData=function(n){return"_b("+n+",'"+t.tag+"',"+e.value+","+(e.modifiers&&e.modifiers.prop?"true":"false")+(e.modifiers&&e.modifiers.sync?",true":"")+")"}},cloak:L},Ds=function(t){this.options=t,this.warn=t.warn||sr,this.transforms=ur(t.modules,"transformCode"),this.dataGenFns=ur(t.modules,"genData"),this.directives=O(O({},bs),t.directives);var e=t.isReservedTag||k;this.maybeComponent=function(t){return!!t.component||!e(t.tag)},this.onceId=0,this.staticRenderFns=[],this.pre=!1};function Is(t,e){var n=new Ds(e);return{render:"with(this){return "+(t?"script"===t.tag?"null":_s(t,n):'_c("div")')+"}",staticRenderFns:n.staticRenderFns}}function _s(t,e){if(t.parent&&(t.pre=t.pre||t.parent.pre),t.staticRoot&&!t.staticProcessed)return Ts(t,e);if(t.once&&!t.onceProcessed)return Ss(t,e);if(t.for&&!t.forProcessed)return ws(t,e);if(t.if&&!t.ifProcessed)return xs(t,e);if("template"!==t.tag||t.slotTarget||e.pre){if("slot"===t.tag)return function(t,e){var n=t.slotName||'"default"',i=Rs(t,e),r="_t("+n+(i?",function(){return "+i+"}":""),o=t.attrs||t.dynamicAttrs?Ms((t.attrs||[]).concat(t.dynamicAttrs||[]).map((function(t){return{name:D(t.name),value:t.value,dynamic:t.dynamic}}))):null,a=t.attrsMap["v-bind"];return!o&&!a||i||(r+=",null"),o&&(r+=","+o),a&&(r+=(o?"":",null")+","+a),r+")"}(t,e);var n;if(t.component)n=function(t,e,n){var i=e.inlineTemplate?null:Rs(e,n,!0);return"_c("+t+","+Ls(e,n)+(i?","+i:"")+")"}(t.component,t,e);else{var i;(!t.plain||t.pre&&e.maybeComponent(t))&&(i=Ls(t,e));var r=t.inlineTemplate?null:Rs(t,e,!0);n="_c('"+t.tag+"'"+(i?","+i:"")+(r?","+r:"")+")"}for(var o=0;o<e.transforms.length;o++)n=e.transforms[o](t,n);return n}return Rs(t,e)||"void 0"}function Ts(t,e){t.staticProcessed=!0;var n=e.pre;return t.pre&&(e.pre=t.pre),e.staticRenderFns.push("with(this){return "+_s(t,e)+"}"),e.pre=n,"_m("+(e.staticRenderFns.length-1)+(t.staticInFor?",true":"")+")"}function Ss(t,e){if(t.onceProcessed=!0,t.if&&!t.ifProcessed)return xs(t,e);if(t.staticInFor){for(var n="",i=t.parent;i;){if(i.for){n=i.key;break}i=i.parent}return n?"_o("+_s(t,e)+","+e.onceId+++","+n+")":(e.warn("v-once can only be used inside v-for that is keyed. ",t.rawAttrsMap["v-once"]),_s(t,e))}return Ts(t,e)}function xs(t,e,n,i){return t.ifProcessed=!0,Os(t.ifConditions.slice(),e,n,i)}function Os(t,e,n,i){if(!t.length)return i||"_e()";var r=t.shift();return r.exp?"("+r.exp+")?"+o(r.block)+":"+Os(t,e,n,i):""+o(r.block);function o(t){return n?n(t,e):t.once?Ss(t,e):_s(t,e)}}function ws(t,e,n,i){var r=t.for,o=t.alias,a=t.iterator1?","+t.iterator1:"",s=t.iterator2?","+t.iterator2:"";return e.maybeComponent(t)&&"slot"!==t.tag&&"template"!==t.tag&&!t.key&&e.warn("<"+t.tag+' v-for="'+o+" in "+r+'">: component lists rendered with v-for should have explicit keys. See https://vuejs.org/guide/list.html#key for more info.',t.rawAttrsMap["v-for"],!0),t.forProcessed=!0,(i||"_l")+"(("+r+"),function("+o+a+s+"){return "+(n||_s)(t,e)+"})"}function Ls(t,e){var n="{",i=function(t,e){var n=t.directives;if(n){var i,r,o,a,s="directives:[",u=!1;for(i=0,r=n.length;i<r;i++){o=n[i],a=!0;var c=e.directives[o.name];c&&(a=!!c(t,o,e.warn)),a&&(u=!0,s+='{name:"'+o.name+'",rawName:"'+o.rawName+'"'+(o.value?",value:("+o.value+"),expression:"+JSON.stringify(o.value):"")+(o.arg?",arg:"+(o.isDynamicArg?o.arg:'"'+o.arg+'"'):"")+(o.modifiers?",modifiers:"+JSON.stringify(o.modifiers):"")+"},")}return u?s.slice(0,-1)+"]":void 0}}(t,e);i&&(n+=i+","),t.key&&(n+="key:"+t.key+","),t.ref&&(n+="ref:"+t.ref+","),t.refInFor&&(n+="refInFor:true,"),t.pre&&(n+="pre:true,"),t.component&&(n+='tag:"'+t.tag+'",');for(var r=0;r<e.dataGenFns.length;r++)n+=e.dataGenFns[r](t);if(t.attrs&&(n+="attrs:"+Ms(t.attrs)+","),t.props&&(n+="domProps:"+Ms(t.props)+","),t.events&&(n+=As(t.events,!1)+","),t.nativeEvents&&(n+=As(t.nativeEvents,!0)+","),t.slotTarget&&!t.slotScope&&(n+="slot:"+t.slotTarget+","),t.scopedSlots&&(n+=function(t,e,n){var i=t.for||Object.keys(e).some((function(t){var n=e[t];return n.slotTargetDynamic||n.if||n.for||ks(n)})),r=!!t.if;if(!i)for(var o=t.parent;o;){if(o.slotScope&&o.slotScope!==za||o.for){i=!0;break}o.if&&(r=!0),o=o.parent}var a=Object.keys(e).map((function(t){return Fs(e[t],n)})).join(",");return"scopedSlots:_u(["+a+"]"+(i?",null,true":"")+(!i&&r?",null,false,"+function(t){for(var e=5381,n=t.length;n;)e=33*e^t.charCodeAt(--n);return e>>>0}(a):"")+")"}(t,t.scopedSlots,e)+","),t.model&&(n+="model:{value:"+t.model.value+",callback:"+t.model.callback+",expression:"+t.model.expression+"},"),t.inlineTemplate){var o=function(t,e){var n=t.children[0];if(1===t.children.length&&1===n.type||e.warn("Inline-template components must have exactly one child element.",{start:t.start}),n&&1===n.type){var i=Is(n,e.options);return"inlineTemplate:{render:function(){"+i.render+"},staticRenderFns:["+i.staticRenderFns.map((function(t){return"function(){"+t+"}"})).join(",")+"]}"}}(t,e);o&&(n+=o+",")}return n=n.replace(/,$/,"")+"}",t.dynamicAttrs&&(n="_b("+n+',"'+t.tag+'",'+Ms(t.dynamicAttrs)+")"),t.wrapData&&(n=t.wrapData(n)),t.wrapListeners&&(n=t.wrapListeners(n)),n}function ks(t){return 1===t.type&&("slot"===t.tag||t.children.some(ks))}function Fs(t,e){var n=t.attrsMap["slot-scope"];if(t.if&&!t.ifProcessed&&!n)return xs(t,e,Fs,"null");if(t.for&&!t.forProcessed)return ws(t,e,Fs);var i=t.slotScope===za?"":String(t.slotScope),r="function("+i+"){return "+("template"===t.tag?t.if&&n?"("+t.if+")?"+(Rs(t,e)||"undefined")+":undefined":Rs(t,e)||"undefined":_s(t,e))+"}",o=i?"":",proxy:true";return"{key:"+(t.slotTarget||'"default"')+",fn:"+r+o+"}"}function Rs(t,e,n,i,r){var o=t.children;if(o.length){var a=o[0];if(1===o.length&&a.for&&"template"!==a.tag&&"slot"!==a.tag){var s=n?e.maybeComponent(a)?",1":",0":"";return""+(i||_s)(a,e)+s}var u=n?function(t,e){for(var n=0,i=0;i<t.length;i++){var r=t[i];if(1===r.type){if(Ns(r)||r.ifConditions&&r.ifConditions.some((function(t){return Ns(t.block)}))){n=2;break}(e(r)||r.ifConditions&&r.ifConditions.some((function(t){return e(t.block)})))&&(n=1)}}return n}(o,e.maybeComponent):0,c=r||Bs;return"["+o.map((function(t){return c(t,e)})).join(",")+"]"+(u?","+u:"")}}function Ns(t){return void 0!==t.for||"template"===t.tag||"slot"===t.tag}function Bs(t,e){return 1===t.type?_s(t,e):3===t.type&&t.isComment?function(t){return"_e("+JSON.stringify(t.text)+")"}(t):function(t){return"_v("+(2===t.type?t.expression:Ps(JSON.stringify(t.text)))+")"}(t)}function Ms(t){for(var e="",n="",i=0;i<t.length;i++){var r=t[i],o=Ps(r.value);r.dynamic?n+=r.name+","+o+",":e+='"'+r.name+'":'+o+","}return e="{"+e.slice(0,-1)+"}",n?"_d("+e+",["+n.slice(0,-1)+"])":e}function Ps(t){return t.replace(/\u2028/g,"\\u2028").replace(/\u2029/g,"\\u2029")}var Hs=new RegExp("\\b"+"do,if,for,let,new,try,var,case,else,with,await,break,catch,class,const,super,throw,while,yield,delete,export,import,return,switch,default,extends,finally,continue,debugger,function,arguments".split(",").join("\\b|\\b")+"\\b"),js=new RegExp("\\b"+"delete,typeof,void".split(",").join("\\s*\\([^\\)]*\\)|\\b")+"\\s*\\([^\\)]*\\)"),$s=/'(?:[^'\\]|\\.)*'|"(?:[^"\\]|\\.)*"|`(?:[^`\\]|\\.)*\$\{|\}(?:[^`\\]|\\.)*`|`(?:[^`\\]|\\.)*`/g;function Vs(t,e){t&&Us(t,e)}function Us(t,e){if(1===t.type){for(var n in t.attrsMap)if(ka.test(n)){var i=t.attrsMap[n];if(i){var r=t.rawAttrsMap[n];"v-for"===n?zs(t,'v-for="'+i+'"',e,r):"v-slot"===n||"#"===n[0]?Xs(i,n+'="'+i+'"',e,r):La.test(n)?qs(i,n+'="'+i+'"',e,r):Gs(i,n+'="'+i+'"',e,r)}}if(t.children)for(var o=0;o<t.children.length;o++)Us(t.children[o],e)}else 2===t.type&&Gs(t.expression,t.text,e,t)}function qs(t,e,n,i){var r=t.replace($s,""),o=r.match(js);o&&"$"!==r.charAt(o.index-1)&&n('avoid using JavaScript unary operator as property name: "'+o[0]+'" in expression '+e.trim(),i),Gs(t,e,n,i)}function zs(t,e,n,i){Gs(t.for||"",e,n,i),Ks(t.alias,"v-for alias",e,n,i),Ks(t.iterator1,"v-for iterator",e,n,i),Ks(t.iterator2,"v-for iterator",e,n,i)}function Ks(t,e,n,i,r){if("string"==typeof t)try{new Function("var "+t+"=_")}catch(o){i("invalid "+e+' "'+t+'" in expression: '+n.trim(),r)}}function Gs(t,e,n,i){try{new Function("return "+t)}catch(o){var r=t.replace($s,"").match(Hs);n(r?'avoid using JavaScript keyword as property name: "'+r[0]+'"\n  Raw expression: '+e.trim():"invalid expression: "+o.message+" in\n\n    "+t+"\n\n  Raw expression: "+e.trim()+"\n",i)}}function Xs(t,e,n,i){try{new Function(t,"")}catch(r){n("invalid function parameter expression: "+r.message+" in\n\n    "+t+"\n\n  Raw expression: "+e.trim()+"\n",i)}}function Ws(t,e){var n="";if(e>0)for(;1&e&&(n+=t),!((e>>>=1)<=0);)t+=t;return n}function Zs(t,e){try{return new Function(t)}catch(n){return e.push({err:n,code:t}),L}}function Ys(t){var e=Object.create(null);return function(n,i,r){var o=(i=O({},i)).warn||lt;delete i.warn;try{new Function("return 1")}catch(t){t.toString().match(/unsafe-eval|CSP/)&&o("It seems you are using the standalone build of Vue.js in an environment with Content Security Policy that prohibits unsafe-eval. The template compiler cannot work in this environment. Consider relaxing the policy to allow unsafe-eval or pre-compiling your templates into render functions.")}var a=i.delimiters?String(i.delimiters)+n:n;if(e[a])return e[a];var s=t(n,i);s.errors&&s.errors.length&&(i.outputSourceRange?s.errors.forEach((function(t){o("Error compiling template:\n\n"+t.msg+"\n\n"+function(t,e,n){void 0===e&&(e=0),void 0===n&&(n=t.length);for(var i=t.split(/\r?\n/),r=0,o=[],a=0;a<i.length;a++)if((r+=i[a].length+1)>=e){for(var s=a-2;s<=a+2||n>r;s++)if(!(s<0||s>=i.length)){o.push(""+(s+1)+Ws(" ",3-String(s+1).length)+"|  "+i[s]);var u=i[s].length;if(s===a){var c=e-(r-u)+1,l=n>r?u-c:n-e;o.push("   |  "+Ws(" ",c)+Ws("^",l))}else if(s>a){if(n>r){var d=Math.min(n-r,u);o.push("   |  "+Ws("^",d))}r+=u+1}}break}return o.join("\n")}(n,t.start,t.end),r)})):o("Error compiling template:\n\n"+n+"\n\n"+s.errors.map((function(t){return"- "+t})).join("\n")+"\n",r)),s.tips&&s.tips.length&&(i.outputSourceRange?s.tips.forEach((function(t){return dt(t.msg,r)})):s.tips.forEach((function(t){return dt(t,r)})));var u={},c=[];return u.render=Zs(s.render,c),u.staticRenderFns=s.staticRenderFns.map((function(t){return Zs(t,c)})),s.errors&&s.errors.length||!c.length||o("Failed to generate render function:\n\n"+c.map((function(t){var e=t.err,n=t.code;return e.toString()+" in\n\n"+n+"\n"})).join("\n"),r),e[a]=u}}var Js,Qs,tu=(Qs=function(t,e){var n=Ga(t.trim(),e);!1!==e.optimize&&cs(n,e);var i=Is(n,e);return{ast:n,render:i.render,staticRenderFns:i.staticRenderFns}},function(t){function e(e,n){var i=Object.create(t),r=[],o=[],a=function(t,e,n){(n?o:r).push(t)};if(n){if(n.outputSourceRange){var s=e.match(/^\s*/)[0].length;a=function(t,e,n){var i={msg:t};e&&(null!=e.start&&(i.start=e.start+s),null!=e.end&&(i.end=e.end+s)),(n?o:r).push(i)}}for(var u in n.modules&&(i.modules=(t.modules||[]).concat(n.modules)),n.directives&&(i.directives=O(Object.create(t.directives||null),n.directives)),n)"modules"!==u&&"directives"!==u&&(i[u]=n[u])}i.warn=a;var c=Qs(e.trim(),i);return Vs(c.ast,a),c.errors=r,c.tips=o,c}return{compile:e,compileToFunctions:Ys(e)}})(ss),eu=(tu.compile,tu.compileToFunctions);function nu(t){return(Js=Js||document.createElement("div")).innerHTML=t?'<a href="\n"/>':'<div a="\n"/>',Js.innerHTML.indexOf("&#10;")>0}var iu=!!G&&nu(!1),ru=!!G&&nu(!0),ou=E((function(t){var e=wi(t);return e&&e.innerHTML})),au=ei.prototype.$mount;return ei.prototype.$mount=function(t,e){if((t=t&&wi(t))===document.body||t===document.documentElement)return lt("Do not mount Vue to <html> or <body> - mount to normal elements instead."),this;var n=this.$options;if(!n.render){var i=n.template;if(i)if("string"==typeof i)"#"===i.charAt(0)&&((i=ou(i))||lt("Template element not found or is empty: "+n.template,this));else{if(!i.nodeType)return lt("invalid template option:"+i,this),this;i=i.innerHTML}else t&&(i=function(t){if(t.outerHTML)return t.outerHTML;var e=document.createElement("div");return e.appendChild(t.cloneNode(!0)),e.innerHTML}(t));if(i){j.performance&&ue&&ue("compile");var r=eu(i,{outputSourceRange:!0,shouldDecodeNewlines:iu,shouldDecodeNewlinesForHref:ru,delimiters:n.delimiters,comments:n.comments},this),o=r.render,a=r.staticRenderFns;n.render=o,n.staticRenderFns=a,j.performance&&ue&&(ue("compile end"),ce("vue "+this._name+" compile","compile","compile end"))}}return au.call(this,t,e)},ei.compile=eu,ei}()},2281:t=>{"use strict";var e,n="0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz-_".split(""),i={},r=0,o=0;function a(t){var e="";do{e=n[t%64]+e,t=Math.floor(t/64)}while(t>0);return e}function s(){var t=a(+new Date);return t!==e?(r=0,e=t):t+"."+a(r++)}for(;o<64;o++)i[n[o]]=o;s.encode=a,s.decode=function(t){var e=0;for(o=0;o<t.length;o++)e=64*e+i[t.charAt(o)];return e},t.exports=s},6851:(t,e,n)=>{"undefined"==typeof Vue&&(Vue=n(1094)),null==window.mdc&&(MDCTopAppBar=n(990).tn,MDCRipple=n(7933).Fl,MDCSwitch=n(1567).CT,MDCCheckbox=n(5886).Bo,MDCFormField=n(9789).bm,MDCTextField=n(284).KX,MDCSelect=n(6286).H3,MDCDialog=n(3376).W5),Vue.component("mdc-top-app-bar",{data:function(){return{}},props:["title"],mounted:function(){null!=window.mdc&&(MDCTopAppBar=window.mdc.topAppBar.MDCTopAppBar),new MDCTopAppBar(this.$el);for(var t=0;t<this.$slots.end.length;t++)try{"mdc-icon-button"==this.$slots.end[t].componentOptions.tag&&(this.$slots.end[t].componentInstance.inTopAppBar=!0)}catch{}},template:'\n<header class="mdc-top-app-bar">\n    <div class="mdc-top-app-bar__row">\n        <section class="mdc-top-app-bar__section mdc-top-app-bar__section--align-start">\n            <span class="mdc-top-app-bar__title">{{title}}</span>\n        </section>\n        <section class="mdc-top-app-bar__section mdc-top-app-bar__section--align-end" role="toolbar">\n            <slot name="end"></slot>\n        </section>\n    </div>\n</header>\n'}),Vue.component("mdc-fab",{props:["icon","label"],mounted:function(){null!=window.mdc&&(MDCRipple=window.mdc.ripple.MDCRipple),new MDCRipple(this.$el)},template:'\n<button class="mdc-fab" :aria-label="label != null ? label : icon" @click="$emit(\'click\')">\n    <div class="mdc-fab__ripple"></div>\n    <span class="mdc-fab__icon material-icons">{{icon}}</span>\n</button>\n'}),Vue.component("mdc-icon-button",{data:function(){return{inTopAppBar:!1}},props:["icon"],mounted:function(){null!=window.mdc&&(MDCRipple=window.mdc.ripple.MDCRipple),new MDCRipple(this.$el).unbounded=!0},template:'<button class="mdc-icon-button material-icons" :class="{\'mdc-top-app-bar__action-item\': inTopAppBar}" @click="$emit(\'click\')"><div class="mdc-icon-button__ripple"></div>{{icon}}</button>'}),Vue.component("mdc-button",{data:function(){return{inDialog:!1}},props:["outlined","raised","unelevated","icon","disabled"],mounted:function(){null!=window.mdc&&(MDCRipple=window.mdc.ripple.MDCRipple),new MDCRipple(this.$el)},template:'\n<button class="mdc-button" :class="{\'mdc-dialog__button\': inDialog, \'mdc-button--outlined\': outlined, \'mdc-button--raised\': raised, \'mdc-button--unelevated\': unelevated}" @click="$emit(\'click\')" :disabled="disabled">\n    <div class="mdc-button__ripple"></div>\n    <i v-if="icon != null" class="material-icons mdc-button__icon" aria-hidden="true">{{icon}}</i>\n    <span class="mdc-button__label"><slot></slot></span>\n</button>\n'}),Vue.component("mdc-switch",{data:function(){return{switchControl:null}},props:["value","label","disabled"],mounted:function(){null!=window.mdc&&(MDCSwitch=window.mdc.switchControl.MDCSwitch),this.switchControl=new MDCSwitch(this.$el.childNodes[0])},template:'\n<div style="margin: 20px 0px;">\n    <div class="mdc-switch" :class="{\'mdc-switch--checked\': value, \'mdc-switch--disabled\': disabled}" style="margin-right:20px;">\n        <div class="mdc-switch__track"></div>\n        <div class="mdc-switch__thumb-underlay">\n            <div class="mdc-switch__thumb"></div>\n            <input type="checkbox" :id="\'switch\' + _uid" class="mdc-switch__native-control" role="switch" :aria-checked="value" :checked="value" @change="$emit(\'input\', $event.target.checked); $emit(\'change\', $event.target.checked)" :disabled="disabled">\n        </div>\n    </div>\n    <label v-if="label != null" :for="\'switch\' + _uid">{{label}}</label>\n</div>\n'}),Vue.component("mdc-checkbox",{props:["value","label","disabled"],mounted:function(){null!=window.mdc&&(MDCCheckbox=window.mdc.checkbox.MDCCheckbox),null!=window.mdc&&(MDCFormField=window.mdc.formField.MDCFormField);const t=new MDCCheckbox(this.$el.childNodes[0]);new MDCFormField(this.$el).input=t},template:'\n<div class="mdc-form-field">\n    <div class="mdc-checkbox">\n        <input :checked="value" type="checkbox" class="mdc-checkbox__native-control" :id="\'mdc-checkbox_\' + _uid" :disabled="disabled" @change="$emit(\'input\', $event.target.checked); $emit(\'change\', $event.target.checked)" />\n        <div class="mdc-checkbox__background">\n            <svg class="mdc-checkbox__checkmark" viewBox="0 0 24 24">\n                <path class="mdc-checkbox__checkmark-path" fill="none" d="M1.73,12.91 8.1,19.28 22.79,4.59" />\n            </svg>\n            <div class="mdc-checkbox__mixedmark"></div>\n        </div>\n        <div class="mdc-checkbox__ripple"></div>\n    </div>\n    <label :for="\'mdc-checkbox_\' + _uid" v-html="label"></label>\n</div>\n'}),Vue.component("mdc-text-field",{data:function(){return{textField:null,valid:!0}},props:["value","label","disabled","required","maxlength","type","min","max","outlined","helper","error"],watch:{error:function(t){null!=t?(this.textField.valid=!1,this.valid=!1):(this.textField.valid=!0,this.valid=!0)}},mounted:function(){null!=window.mdc&&(MDCTextField=window.mdc.textField.MDCTextField),this.textField=new MDCTextField(this.$el.firstChild),null!=this.error&&(this.textField.valid=!1,this.valid=!1)},template:'\n<div style="display: inline-block; vertical-align: top;">\n    <label :id="\'mdc-text-field-l_\' + _uid" class="mdc-text-field"\n        :class="{\'mdc-text-field--filled\': !outlined, \'mdc-text-field--outlined\': outlined}">\n        <span v-if="!outlined" class="mdc-text-field__ripple"></span>\n        <span v-if="outlined" class="mdc-notched-outline">\n            <span class="mdc-notched-outline__leading"></span>\n            <span class="mdc-notched-outline__notch">\n                <span class="mdc-floating-label" :id="\'mdc-text-field_\' + _uid">{{label}}</span>\n            </span>\n            <span class="mdc-notched-outline__trailing"></span>\n        </span>\n        <span v-if="!outlined" class="mdc-floating-label" :id="\'mdc-text-field_\' + _uid">{{label}}</span>\n        <input class="mdc-text-field__input" :type="type != null ? type : \'text\'"\n            :aria-labelledby="\'mdc-text-field_\' + _uid" :aria-controls="helper != null ? \'mdc-text-field-helper_\' + _uid : \'\'"\n            :aria-describedby="helper != null ? \'mdc-text-field-helper_\' + _uid : \'\'" @keyup="$emit(\'keyup\', $event)"\n            @input="$emit(\'input\', $event.target.value)" :required="required" :disabled="disabled"\n            :maxlength="maxlength" :value="value" :min="min" :max="max" @focusout="valid = true">\n        <span v-if="!outlined" class="mdc-line-ripple"></span>\n    </label>\n    <div class="mdc-text-field-helper-line" v-if="helper != null || !valid">\n        <div class="mdc-text-field-helper-text" :id="\'mdc-text-field-helper_\' + _uid" aria-hidden="true"\n            :style="!valid ? { color: \'var(--mdc-theme-error)\' } : null" :class="{ \'mdc-text-field-helper-text--persistent\': !valid }">{{valid ? helper : error}}</div>\n    </div>\n</div>\n'}),Vue.component("mdc-select",{data:function(){return{}},props:["value","label","disabled","required"],mounted:function(){var t=this.$el.querySelector(".mdc-select__menu.mdc-menu.mdc-menu-surface > ul > li.mdc-list-item--selected");if(t.getAttribute("data-value")!=this.value){var e=this.$el.querySelector('.mdc-select__menu.mdc-menu.mdc-menu-surface > ul > li[data-value="'+this.value+'"]');null!=e&&(t.classList.remove("mdc-list-item--selected"),e.classList.add("mdc-list-item--selected"),t.setAttribute("aria-selected","false"),e.setAttribute("aria-selected","true"))}null!=window.mdc&&(MDCSelect=window.mdc.select.MDCSelect);const n=new MDCSelect(this.$el);n.listen("MDCSelect:change",(()=>{this.$emit("input",n.value)}))},template:'\n<div class="mdc-select mdc-select--filled demo-width-class">\n    <div class="mdc-select__anchor" role="button" aria-haspopup="listbox" aria-expanded="false"\n        aria-labelledby="demo-label demo-selected-text">\n        <span class="mdc-select__ripple"></span>\n        <span id="demo-label" class="mdc-floating-label">{{label}}</span>\n        <span class="mdc-select__selected-text-container">\n            <span id="demo-selected-text" class="mdc-select__selected-text"></span>\n        </span>\n        <span class="mdc-select__dropdown-icon" style="right: 0; position: absolute;">\n            <svg class="mdc-select__dropdown-icon-graphic" viewBox="7 10 10 5" focusable="false">\n                <polygon class="mdc-select__dropdown-icon-inactive" stroke="none" fill-rule="evenodd"\n                    points="7 10 12 15 17 10">\n                </polygon>\n                <polygon class="mdc-select__dropdown-icon-active" stroke="none" fill-rule="evenodd"\n                    points="7 15 12 10 17 15">\n                </polygon>\n            </svg>\n        </span>\n        <span class="mdc-line-ripple"></span>\n    </div>\n\n    <div class="mdc-select__menu mdc-menu mdc-menu-surface mdc-menu-surface--fullwidth">\n        <ul class="mdc-list" role="listbox" aria-label="Food picker listbox">\n            <li class="mdc-list-item mdc-list-item--selected" aria-selected="true" data-value="" role="option">\n                <span class="mdc-list-item__ripple"></span>\n            </li>\n            <slot></slot>\n        </ul>\n    </div>\n</div>\n'}),Vue.component("mdc-select-option",{data:function(){return{}},props:["value","label","disabled"],template:'\n<li class="mdc-list-item" aria-selected="false" :data-value="value" role="option">\n    <span class="mdc-list-item__ripple"></span>\n    <span class="mdc-list-item__text">\n        {{label}}\n    </span>\n</li>\n'}),Vue.component("mdc-dialog",{data:function(){return{dialog:null}},props:["value","open","title","escapeKeyAction","scrimClickAction"],watch:{value:function(t){t&&this.dialog.open()},open:function(t){t&&this.dialog.open()},escapeKeyAction:function(t){this.dialog.escapeKeyAction=t},scrimClickAction:function(t){this.dialog.scrimClickAction=t}},mounted:function(){null!=window.mdc&&(MDCDialog=window.mdc.dialog.MDCDialog),this.dialog=new MDCDialog(this.$el),this.dialog.escapeKeyAction=this.escapeKeyAction,this.dialog.scrimClickAction=this.scrimClickAction,this.dialog.listen("MDCDialog:closed",(t=>{this.$emit("input",!1),this.$emit("closed",t.detail)})),this.dialog.listen("MDCDialog:opened",(e=>{const n=document.querySelectorAll("#mdc-dialog_"+this._uid+" .mdc-switch");for(t=0;t<n.length;++t)null!=n[t]&&mdc.switchControl.MDCSwitch.attachTo(n[t]).layout}));for(var t=0;t<this.$slots.actions.length;t++)try{"mdc-button"==this.$slots.actions[t].componentOptions.tag&&(this.$slots.actions[t].componentInstance.inDialog=!0)}catch{}},template:'\n<div class="mdc-dialog" :id="\'mdc-dialog_\' + _uid">\n    <div class="mdc-dialog__container">\n        <div class="mdc-dialog__surface" role="alertdialog" aria-modal="true" :aria-labelledby="\'dialog\' + _uid + \'-title\'"\n            aria-describedby="\'dialog\' + _uid + \'-content\'">\n            <slot name="header" />\n            <span class="mdc-typography--headline5 mdc-dialog__title" v-if="title != null" :id="\'dialog\' + _uid + \'-title\'">\n                {{title}}\n            </span>\n            <div class="mdc-dialog__content" :id="\'dialog\' + _uid + \'-content\'">\n                <slot></slot>\n            </div>\n            <div class="mdc-dialog__actions">\n                <slot name="actions"></slot>\n            </div>\n        </div>\n    </div>\n    <div class="mdc-dialog__scrim"></div>\n</div>\n'}),Vue.component("mdc-card",{template:'\n<div class="mdc-card">\n    <slot></slot>\n</div>\n'});for(var i=1;i<=6;i++)Vue.component(`mdc-h${i}`,{template:`\n    <h${i} class="mdc-typography--headline${i}">\n        <slot></slot>\n    </h${i}>\n    `});for(i=1;i<=2;i++)Vue.component(`mdc-subtitle${i}`,{template:`\n    <h6 class="mdc-typography--subtitle${i}">\n        <slot></slot>\n    </h6>\n    `}),Vue.component(`mdc-body${i}`,{template:`\n    <p class="mdc-typography--body${i}">\n        <slot></slot>\n    </p>\n    `});Vue.component("mdc-overline",{template:'\n<span class="mdc-typography--overline">\n    <slot></slot>\n</span>\n'}),Vue.component("mdc-caption",{template:'\n<span class="mdc-typography--caption">\n    <slot></slot>\n</span>\n'})}},e={};function n(i){var r=e[i];if(void 0!==r)return r.exports;var o=e[i]={id:i,exports:{}};return t[i].call(o.exports,o,o.exports,n),o.exports}n.m=t,n.n=t=>{var e=t&&t.__esModule?()=>t.default:()=>t;return n.d(e,{a:e}),e},n.d=(t,e)=>{for(var i in e)n.o(e,i)&&!n.o(t,i)&&Object.defineProperty(t,i,{enumerable:!0,get:e[i]})},n.g=function(){if("object"==typeof globalThis)return globalThis;try{return this||new Function("return this")()}catch(t){if("object"==typeof window)return window}}(),n.o=(t,e)=>Object.prototype.hasOwnProperty.call(t,e),(()=>{var t;n.g.importScripts&&(t=n.g.location+"");var e=n.g.document;if(!t&&e&&(e.currentScript&&(t=e.currentScript.src),!t)){var i=e.getElementsByTagName("script");i.length&&(t=i[i.length-1].src)}if(!t)throw new Error("Automatic publicPath is not supported in this browser");t=t.replace(/#.*$/,"").replace(/\?.*$/,"").replace(/\/[^\/]+$/,"/"),n.p=t})(),n.b=document.baseURI||self.location.href,(()=>{"use strict";var t=n(3379),e=n.n(t),i=n(7795),r=n.n(i),o=n(569),a=n.n(o),s=n(3565),u=n.n(s),c=n(9216),l=n.n(c),d=n(4589),p=n.n(d),h=n(8607),f={};f.styleTagTransform=p(),f.setAttributes=u(),f.insert=a().bind(null,"head"),f.domAPI=r(),f.insertStyleElement=l(),e()(h.Z,f),h.Z&&h.Z.locals&&h.Z.locals;var m=n(1094),v=n.n(m),g=(n(6851),n(751));g.Manager,g.Socket;const y=g;var A,C=n(5235);new(v())({el:"#app",data:{activationCode:"",activationCodeError:null,active:!1,currentContent:null,currentCaption:""},methods:{sendActivationCode:function(){this.activationCodeError=null,setTimeout((()=>{6==this.activationCode.length?A.emit("activate",this.activationCode):this.activationCodeError="The entered code is not valid."}),0)},activationCodeKeyup:function(t){13==t.keyCode&&this.sendActivationCode()}},computed:{contentStyle:function(){var t={};if(null!=this.currentContent)return"image"==this.currentContent.type&&(t["background-image"]=`url('${this.currentContent.url}')`),t},caption:function(){return""!=this.currentCaption?this.currentCaption:null==this.currentContent?"":"image"==this.currentContent.type?this.currentContent.caption:void 0}},mounted:function(){var t=this;(A=y()).on("disconnect",(t=>{console.log("disconnected: "+t),location.reload()})),A.on("activate",(function(e){if("unknown_code"!=e)return"active"==e?(t.active=!0,void A.on("message",(function(e){if("!clear"==e.content)return t.currentContent=null,void(t.currentCaption="");if("!clear text"!=e.content){var n,i=C.find(e.content);if(i.length>0)for(const t of i)e.content=e.content.replace(t.value,"");if(e.attachments.length>0)return t.currentContent={},t.currentContent.type="image",t.currentContent.url=e.attachments[0].proxyURL,t.currentContent.caption=e.content,void(t.currentCaption="");i.length>0&&(n=i[0].href,new Promise((function(t,e){var i,r=new Image;r.onerror=r.onabort=function(){clearTimeout(i),r=null,e("error")},r.onload=function(){clearTimeout(i),r=null,t("success")},i=setTimeout((function(){r.src="",r=null,e("timeout")}),5e3),r.src=n}))).then((()=>{t.currentContent={},t.currentContent.type="image",t.currentContent.url=i[0].href,t.currentContent.caption=""})),t.currentCaption=e.content}else t.currentCaption=" "}))):void(t.activationCodeError="Unknown response.");t.activationCodeError="The entered code is not valid."}))}})})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmJ1bmRsZS5qcyIsIm1hcHBpbmdzIjoiO2tFQXNCQSxJQUFJQSxFQUFxQixDQUNyQkMsVUFBVyxDQUNQQyxTQUFVLG9CQUNWQyxTQUFVLGFBRWRDLFVBQVcsQ0FDUEYsU0FBVSxvQkFDVkMsU0FBVSxhQUVkRSxXQUFZLENBQ1JILFNBQVUscUJBQ1ZDLFNBQVUsZUFHZEcsRUFBaUIsQ0FDakJDLGFBQWMsQ0FDVkMsWUFBYSxZQUNiTixTQUFVLHFCQUNWQyxTQUFVLGdCQUVkTSxtQkFBb0IsQ0FDaEJELFlBQWEsWUFDYk4sU0FBVSwyQkFDVkMsU0FBVSxzQkFFZE8sZUFBZ0IsQ0FDWkYsWUFBYSxZQUNiTixTQUFVLHVCQUNWQyxTQUFVLGtCQUVkUSxjQUFlLENBQ1hILFlBQWEsYUFDYk4sU0FBVSxzQkFDVkMsU0FBVSxrQkFHbEIsU0FBU1MsRUFBU0MsR0FDZCxPQUFPQyxRQUFRRCxFQUFVRSxXQUF5RCxtQkFBckNGLEVBQVVFLFNBQVNDLGNBRTdELFNBQVNDLEVBQXVCSixFQUFXTCxHQUM5QyxHQUFJSSxFQUFTQyxJQUFjTCxLQUFlUixFQUFvQixDQUMxRCxJQUFJa0IsRUFBS0wsRUFBVUUsU0FBU0MsY0FBYyxPQUN0Q0csRUFBS25CLEVBQW1CUSxHQUFjTCxFQUFXZ0IsRUFBR2hCLFNBQVVELEVBQVdpQixFQUFHakIsU0FFaEYsT0FEaUJDLEtBQVllLEVBQUdFLE1BQ1pqQixFQUFXRCxFQUVuQyxPQUFPTSxFQUVKLFNBQVNhLEVBQW9CUixFQUFXUyxHQUMzQyxHQUFJVixFQUFTQyxJQUFjUyxLQUFhaEIsRUFBZ0IsQ0FDcEQsSUFBSVksRUFBS0wsRUFBVUUsU0FBU0MsY0FBYyxPQUN0Q0csRUFBS2IsRUFBZWdCLEdBQVluQixFQUFXZ0IsRUFBR2hCLFNBQVVELEVBQVdpQixFQUFHakIsU0FFMUUsT0FGa0dpQixFQUFHWCxlQUNyRVUsRUFBR0UsTUFDZmpCLEVBQVdELEVBRW5DLE9BQU9vQix3RUNyRFBDLEVBQThCLFdBQzlCLFNBQVNBLEVBQWFDLEVBQU1DLEdBRXhCLElBREEsSUFBSUMsRUFBTyxHQUNGQyxFQUFLLEVBQUdBLEVBQUtDLFVBQVVDLE9BQVFGLElBQ3BDRCxFQUFLQyxFQUFLLEdBQUtDLFVBQVVELEdBRTdCRyxLQUFLTixLQUFPQSxFQUNaTSxLQUFLQyxXQUFXQyxNQUFNRixNQUFNLFFBQWMsSUFBSSxRQUFPSixLQUlyREksS0FBS0wsZ0JBQ2NRLElBQWZSLEVBQTJCSyxLQUFLSSx1QkFBeUJULEVBQzdESyxLQUFLTCxXQUFXVSxPQUNoQkwsS0FBS00scUJBNERULE9BMURBYixFQUFhYyxTQUFXLFNBQVViLEdBSzlCLE9BQU8sSUFBSUQsRUFBYUMsRUFBTSxJQUFJLElBQWMsTUFHcERELEVBQWFlLFVBQVVQLFdBQWEsV0FFaEMsSUFEQSxJQUFJUSxFQUFRLEdBQ0haLEVBQUssRUFBR0EsRUFBS0MsVUFBVUMsT0FBUUYsSUFDcENZLEVBQU1aLEdBQU1DLFVBQVVELElBTTlCSixFQUFhZSxVQUFVSixxQkFBdUIsV0FHMUMsTUFBTSxJQUFJTSxNQUFNLG1HQUdwQmpCLEVBQWFlLFVBQVVGLG1CQUFxQixhQU01Q2IsRUFBYWUsVUFBVUcsUUFBVSxXQUc3QlgsS0FBS0wsV0FBV2dCLFdBRXBCbEIsRUFBYWUsVUFBVUksT0FBUyxTQUFVQyxFQUFTQyxFQUFTQyxHQUN4RGYsS0FBS04sS0FBS3NCLGlCQUFpQkgsRUFBU0MsRUFBU0MsSUFFakR0QixFQUFhZSxVQUFVUyxTQUFXLFNBQVVKLEVBQVNDLEVBQVNDLEdBQzFEZixLQUFLTixLQUFLd0Isb0JBQW9CTCxFQUFTQyxFQUFTQyxJQUtwRHRCLEVBQWFlLFVBQVVXLEtBQU8sU0FBVU4sRUFBU08sRUFBU0MsR0FFdEQsSUFBSUMsT0FEaUIsSUFBakJELElBQTJCQSxHQUFlLEdBRW5CLG1CQUFoQkUsWUFDUEQsRUFBTSxJQUFJQyxZQUFZVixFQUFTLENBQzNCVyxRQUFTSCxFQUNUSSxPQUFRTCxLQUlaRSxFQUFNckMsU0FBU3lDLFlBQVksZ0JBQ3ZCQyxnQkFBZ0JkLEVBQVNRLEdBQWMsRUFBT0QsR0FFdERwQixLQUFLTixLQUFLa0MsY0FBY04sSUFFckI3QixFQTFFc0IsaURDRmpDLElBQUlvQyxFQUErQixXQUMvQixTQUFTQSxFQUFjQyxRQUNILElBQVpBLElBQXNCQSxFQUFVLElBQ3BDOUIsS0FBSzhCLFFBQVVBLEVBNkNuQixPQTNDQUMsT0FBT0MsZUFBZUgsRUFBZSxhQUFjLENBQy9DSSxJQUFLLFdBR0QsTUFBTyxJQUVYQyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVILEVBQWUsVUFBVyxDQUM1Q0ksSUFBSyxXQUdELE1BQU8sSUFFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlSCxFQUFlLFVBQVcsQ0FDNUNJLElBQUssV0FHRCxNQUFPLElBRVhDLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZUgsRUFBZSxpQkFBa0IsQ0FDbkRJLElBQUssV0FJRCxNQUFPLElBRVhDLFlBQVksRUFDWkMsY0FBYyxJQUVsQk4sRUFBY3JCLFVBQVVILEtBQU8sYUFHL0J3QixFQUFjckIsVUFBVUcsUUFBVSxhQUczQmtCLEVBaER1QiwySENBdkJPLEVBQWEsQ0FDcEJDLDJCQUE0QiwyQ0FDNUJDLHVCQUF3Qix1Q0FDeEJDLDJCQUE0QiwyQ0FDNUJDLDZCQUE4Qiw2Q0FDOUJDLHVCQUF3Qix1Q0FDeEJDLDZCQUE4Qiw2Q0FDOUJDLFdBQVksMkJBQ1pDLFFBQVMsd0JBQ1RDLFVBQVcsMEJBQ1hDLGVBQWdCLCtCQUNoQkMsU0FBVSx5QkFDVkMsY0FBZSw4QkFDZkMsVUFBVywwQkFDWEMsZUFBZ0IsK0JBQ2hCQyxLQUFNLGVBQ05DLFNBQVUseUJBQ1ZDLFNBQVUsMEJBRUhDLEVBQVUsQ0FDakJDLGtCQUFtQixlQUNuQkMsaUNBQWtDLFFBQ2xDQyx3QkFBeUIscUJBQ3pCQyx3QkFBeUIsZ0NBQ3pCQyx5QkFBMEIsVUFDMUJDLCtCQUFnQyxnQkFDaENDLHNCQUF1QixPQUN2QkMsMkJBQTRCLGFBRXJCQyxFQUFVLENBQ2pCQyxrQkFBbUIsS0MzQm5CQyxFQUF1QyxTQUFVQyxHQUVqRCxTQUFTRCxFQUFzQm5DLEdBQzNCLElBQUlxQyxFQUFRRCxFQUFPRSxLQUFLcEUsTUFBTSxTQUFTLFFBQVMsR0FBSWlFLEVBQXNCSSxnQkFBaUJ2QyxLQUFhOUIsS0FLeEcsT0FKQW1FLEVBQU1HLGtCQUFvQmhCLEVBQVFPLHNCQUNsQ00sRUFBTUksc0JBQXdCLEdBQzlCSixFQUFNSyxrQkFBb0IsRUFDMUJMLEVBQU1NLDJCQUE0QixFQUMzQk4sRUFzSlgsT0E3SkEsUUFBVUYsRUFBdUJDLEdBU2pDbkMsT0FBT0MsZUFBZWlDLEVBQXVCLGFBQWMsQ0FDdkRoQyxJQUFLLFdBQ0QsT0FBT0csR0FFWEYsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlaUMsRUFBdUIsVUFBVyxDQUNwRGhDLElBQUssV0FDRCxPQUFPcUIsR0FFWHBCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZWlDLEVBQXVCLFVBQVcsQ0FDcERoQyxJQUFLLFdBQ0QsT0FBTzhCLEdBRVg3QixZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVpQyxFQUF1QixpQkFBa0IsQ0FDM0RoQyxJQUFLLFdBQ0QsTUFBTyxDQUNIeUMsU0FBVSxhQUNWQyxZQUFhLGFBQ2JDLGlCQUFrQixXQUFjLE9BQU8sR0FDdkNDLGdCQUFpQixXQUFjLE9BQU8sR0FDdENDLFVBQVcsV0FBYyxPQUFPLEdBQ2hDQyxnQkFBaUIsV0FBYyxPQUFPLEdBQ3RDQyxZQUFhLGFBQ2JDLHdCQUF5QixhQUN6QkMscUJBQXNCLGFBQ3RCQyx5QkFBMEIsZUFHbENqRCxZQUFZLEVBQ1pDLGNBQWMsSUFFbEI4QixFQUFzQnpELFVBQVVILEtBQU8sV0FDbkNMLEtBQUtzRSxrQkFBb0J0RSxLQUFLb0Ysc0JBQzlCcEYsS0FBS3FGLG9CQUNMckYsS0FBSzhCLFFBQVE0QyxTQUFTdEMsRUFBV2lCLFdBRXJDWSxFQUFzQnpELFVBQVVHLFFBQVUsV0FDdEMyRSxhQUFhdEYsS0FBS3dFLG9CQUV0QlAsRUFBc0J6RCxVQUFVK0UsWUFBYyxTQUFVQyxHQUNwRHhGLEtBQUs4QixRQUFRcUQseUJBQXlCSyxHQUNsQ0EsRUFDQXhGLEtBQUs4QixRQUFRNEMsU0FBU3RDLEVBQVdXLFVBR2pDL0MsS0FBSzhCLFFBQVFrRCxZQUFZNUMsRUFBV1csV0FNNUNrQixFQUFzQnpELFVBQVVpRixtQkFBcUIsV0FDakQsSUFBSXRCLEVBQVFuRSxLQUNQQSxLQUFLeUUsNEJBR1ZhLGFBQWF0RixLQUFLd0UsbUJBQ2xCeEUsS0FBS3dFLGtCQUFvQmtCLFlBQVcsV0FDaEN2QixFQUFNckMsUUFBUWtELFlBQVliLEVBQU1JLHVCQUNoQ0osRUFBTU0sMkJBQTRCLElBQ25DVixFQUFRQyxxQkFLZkMsRUFBc0J6RCxVQUFVbUYsYUFBZSxXQUMzQzNGLEtBQUs0Rix3QkFFVDNCLEVBQXNCekQsVUFBVW9GLHFCQUF1QixXQUNuRCxHQUFLNUYsS0FBSzhCLFFBQVE4QyxtQkFBbEIsQ0FHQSxJQUFJaUIsRUFBVzdGLEtBQUtzRSxrQkFDaEJ3QixFQUFXOUYsS0FBS29GLHNCQUNwQixHQUFJUyxJQUFhQyxFQUFqQixDQUdBOUYsS0FBS3FGLG9CQUNMLElBQ0lqQyxFQUFXaEIsRUFBV2dCLFNBQ3RCMEMsSUFGNkJ4QyxFQUFRUSwyQkFHckM5RCxLQUFLOEIsUUFBUWtELFlBQVk1QixHQUd6QnBELEtBQUs4QixRQUFRNEMsU0FBU3RCLEdBSXRCcEQsS0FBS3VFLHNCQUFzQnhFLE9BQVMsSUFDcEN1RixhQUFhdEYsS0FBS3dFLG1CQUNsQnhFLEtBQUs4QixRQUFRNkMsY0FDYjNFLEtBQUs4QixRQUFRa0QsWUFBWWhGLEtBQUt1RSx3QkFFbEN2RSxLQUFLdUUsc0JBQ0R2RSxLQUFLK0YsNEJBQTRCRixFQUFVQyxHQUMvQzlGLEtBQUtzRSxrQkFBb0J3QixFQUdyQjlGLEtBQUs4QixRQUFRK0MsbUJBQ2I3RSxLQUFLdUUsc0JBQXNCeEUsT0FBUyxJQUNwQ0MsS0FBSzhCLFFBQVE0QyxTQUFTMUUsS0FBS3VFLHVCQUMzQnZFLEtBQUt5RSwyQkFBNEIsTUFHekNSLEVBQXNCekQsVUFBVTRFLG9CQUFzQixXQUNsRCxJQUFJeEIsRUFBaUNOLEVBQVFNLCtCQUFnQ0QsRUFBMkJMLEVBQVFLLHlCQUEwQkcsRUFBNkJSLEVBQVFRLDJCQUMvSyxPQUFJOUQsS0FBSzhCLFFBQVFpRCxrQkFDTm5CLEVBRUo1RCxLQUFLOEIsUUFBUWdELFlBQWNuQixFQUM5QkcsR0FFUkcsRUFBc0J6RCxVQUFVdUYsNEJBQThCLFNBQVVGLEVBQVVDLEdBQzlFLElBQUlqQyxFQUF3QlAsRUFBUU8sc0JBQXVCRixFQUEyQkwsRUFBUUsseUJBQTBCRyxFQUE2QlIsRUFBUVEsMkJBQ3pKekUsRUFBSzRFLEVBQXNCN0IsV0FBWUssRUFBeUJwRCxFQUFHb0QsdUJBQXdCQyxFQUErQnJELEVBQUdxRCw2QkFBOEJKLEVBQXlCakQsRUFBR2lELHVCQUF3QkQsRUFBNkJoRCxFQUFHZ0QsMkJBQTRCRSxFQUE2QmxELEVBQUdrRCwyQkFBNEJDLEVBQStCbkQsRUFBR21ELDZCQUM3VyxPQUFRcUQsR0FDSixLQUFLaEMsRUFDRCxPQUFJaUMsSUFBYWhDLEVBQ04sR0FFSmdDLElBQWFuQyxFQUEyQnBCLEVBQTZCQyxFQUNoRixLQUFLc0IsRUFDRCxPQUFPZ0MsSUFBYW5DLEVBQTJCbEIsRUFBeUJDLEVBQzVFLEtBQUtpQixFQUNELE9BQU9tQyxJQUFhaEMsRUFBNkJ4QixFQUF5QkQsRUFDOUUsUUFDSSxPQUFPeUQsSUFBYW5DLEVBQTJCcEIsRUFBNkJDLElBR3hGeUIsRUFBc0J6RCxVQUFVNkUsa0JBQW9CLFdBRTVDckYsS0FBSzhCLFFBQVFpRCxrQkFDYi9FLEtBQUs4QixRQUFRb0QscUJBQXFCNUIsRUFBUUMsa0JBQW1CRCxFQUFRRSxrQ0FLckV4RCxLQUFLOEIsUUFBUW1ELHdCQUF3QjNCLEVBQVFDLG9CQUc5Q1UsRUE5SitCLFNBK0p4QyxHQ3pKRStCLEVBQWlCLENBQUMsVUFBVyxpQkFDN0JDLEVBQTZCLFNBQVUvQixHQUV2QyxTQUFTK0IsSUFDTCxJQUFJOUIsRUFBbUIsT0FBWEQsR0FBbUJBLEVBQU9oRSxNQUFNRixLQUFNRixZQUFjRSxLQUVoRSxPQURBbUUsRUFBTStCLGNBQWdCL0IsRUFBTWdDLGVBQ3JCaEMsRUEwTFgsT0E5TEEsUUFBVThCLEVBQWEvQixHQU12QitCLEVBQVkxRixTQUFXLFNBQVViLEdBQzdCLE9BQU8sSUFBSXVHLEVBQVl2RyxJQUUzQnFDLE9BQU9DLGVBQWVpRSxFQUFZekYsVUFBVyxTQUFVLENBQ25EeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLa0csZUFFaEJoRSxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVpRSxFQUFZekYsVUFBVyxVQUFXLENBQ3BEeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLb0csbUJBQW1CQyxTQUVuQ0MsSUFBSyxTQUFVRCxHQUNYckcsS0FBS29HLG1CQUFtQkMsUUFBVUEsR0FFdENuRSxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVpRSxFQUFZekYsVUFBVyxnQkFBaUIsQ0FDMUR5QixJQUFLLFdBQ0QsT0FBT2pDLEtBQUtvRyxtQkFBbUJHLGVBRW5DRCxJQUFLLFNBQVVDLEdBQ1h2RyxLQUFLb0csbUJBQW1CRyxjQUFnQkEsR0FFNUNyRSxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVpRSxFQUFZekYsVUFBVyxXQUFZLENBQ3JEeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLb0csbUJBQW1CWixVQUVuQ2MsSUFBSyxTQUFVZCxHQUNYeEYsS0FBS0wsV0FBVzRGLFlBQVlDLElBRWhDdEQsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlaUUsRUFBWXpGLFVBQVcsUUFBUyxDQUNsRHlCLElBQUssV0FDRCxPQUFPakMsS0FBS29HLG1CQUFtQkksT0FFbkNGLElBQUssU0FBVUUsR0FDWHhHLEtBQUtvRyxtQkFBbUJJLE1BQVFBLEdBRXBDdEUsWUFBWSxFQUNaQyxjQUFjLElBRWxCOEQsRUFBWXpGLFVBQVVQLFdBQWEsV0FDL0IsSUFBSXdELEVBQTBCSCxFQUFRRyx3QkFDdEN6RCxLQUFLb0csbUJBQW1CRyxjQUVoQixTQURKdkcsS0FBS29HLG1CQUFtQkssYUFBYWhELEdBRXpDekQsS0FBS29HLG1CQUFtQk0sZ0JBQWdCakQsSUFFNUN3QyxFQUFZekYsVUFBVUYsbUJBQXFCLFdBQ3ZDLElBQUk2RCxFQUFRbkUsS0FDWkEsS0FBSzJGLGFBQWUsV0FDaEJ4QixFQUFNeEUsV0FBV2dHLGdCQUVyQjNGLEtBQUt5RixtQkFBcUIsV0FDdEJ0QixFQUFNeEUsV0FBVzhGLHNCQUVyQnpGLEtBQUtvRyxtQkFBbUJwRixpQkFBaUIsU0FBVWhCLEtBQUsyRixjQUN4RDNGLEtBQUtZLFFBQU8sT0FBb0IrRixPQUFRLGdCQUFpQjNHLEtBQUt5RixvQkFDOUR6RixLQUFLNEcsOEJBRVRYLEVBQVl6RixVQUFVRyxRQUFVLFdBQzVCWCxLQUFLa0csY0FBY3ZGLFVBQ25CWCxLQUFLb0csbUJBQW1CbEYsb0JBQW9CLFNBQVVsQixLQUFLMkYsY0FDM0QzRixLQUFLaUIsVUFBUyxPQUFvQjBGLE9BQVEsZ0JBQWlCM0csS0FBS3lGLG9CQUNoRXpGLEtBQUs2RywrQkFDTDNDLEVBQU8xRCxVQUFVRyxRQUFReUQsS0FBS3BFLE9BRWxDaUcsRUFBWXpGLFVBQVVKLHFCQUF1QixXQUN6QyxJQUFJK0QsRUFBUW5FLEtBdUJaLE9BQU8sSUFBSWlFLEVBcEJHLENBQ1ZTLFNBQVUsU0FBVW9DLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVUMsSUFBSUYsSUFDakVuQyxZQUFhLFdBQWMsT0FBT1IsRUFBTXpFLEtBQUt1SCxhQUM3Q3JDLGlCQUFrQixXQUFjLFFBQVNULEVBQU1pQyxvQkFDL0N2QixnQkFBaUIsV0FBYyxPQUFPN0YsUUFBUW1GLEVBQU16RSxLQUFLd0gsYUFDekRwQyxVQUFXLFdBQWMsT0FBT1gsRUFBTWtDLFNBQ3RDdEIsZ0JBQWlCLFdBQWMsT0FBT1osRUFBTW9DLGVBQzVDdkIsWUFBYSxTQUFVOEIsR0FDbkIzQyxFQUFNekUsS0FBS3FILFVBQVVJLE9BQU9MLElBRWhDN0Isd0JBQXlCLFNBQVVtQyxHQUMvQmpELEVBQU1pQyxtQkFBbUJNLGdCQUFnQlUsSUFFN0NsQyxxQkFBc0IsU0FBVWtDLEVBQU1aLEdBQ2xDckMsRUFBTWlDLG1CQUFtQmlCLGFBQWFELEVBQU1aLElBRWhEckIseUJBQTBCLFNBQVVLLEdBQ2hDckIsRUFBTWlDLG1CQUFtQlosU0FBV0EsTUFLaERTLEVBQVl6RixVQUFVMkYsYUFBZSxXQUNqQyxJQUFJaEMsRUFBUW5FLEtBR1I4QixHQUFVLFNBQVMsUUFBUyxHQUFJLGtCQUF3QjlCLE9BQVEsQ0FBRXNILDZCQUE4QixTQUFVekcsRUFBU0MsR0FDL0dxRCxFQUFNaUMsbUJBQW1CbEYsb0JBQW9CTCxFQUFTQyxHQUFTLFdBQ2hFeUcsZ0JBQWlCLFdBQWMsT0FBTyxRQUFRcEQsRUFBTWlDLG1CQUFvQixZQUFlb0IsWUFBYSxXQUFjLE9BQU8sR0FBU0MsMkJBQTRCLFNBQVU1RyxFQUFTQyxHQUNoTHFELEVBQU1pQyxtQkFBbUJwRixpQkFBaUJILEVBQVNDLEdBQVMsYUFFcEUsT0FBTyxJQUFJLElBQVVkLEtBQUtOLEtBQU0sSUFBSSxJQUFvQm9DLEtBRTVEbUUsRUFBWXpGLFVBQVVvRywyQkFBNkIsV0FDL0MsSUFBSWMsRUFBS3JJLEVBQ0w4RSxFQUFRbkUsS0FDUjJILEVBQVczSCxLQUFLb0csbUJBQ2hCd0IsRUFBVTdGLE9BQU84RixlQUFlRixHQUNoQ0csRUFBVSxTQUFVQyxHQUNwQixJQUFJQyxFQUFPakcsT0FBT2tHLHlCQUF5QkwsRUFBU0csR0FHcEQsSUFBS0csRUFBZ0JGLEdBQ2pCLE1BQU8sQ0FBRXhCLFdBQU8sR0FHcEIsSUFBSTJCLEVBQWVILEVBQUsvRixJQUNwQm1HLEVBQWUsQ0FDZmpHLGFBQWM2RixFQUFLN0YsYUFDbkJELFdBQVk4RixFQUFLOUYsV0FDakJELElBQUtrRyxFQUNMN0IsSUFBSyxTQUFVK0IsR0FDWEwsRUFBSzFCLElBQUlsQyxLQUFLdUQsRUFBVVUsR0FDeEJsRSxFQUFNeEUsV0FBV2dHLGlCQUd6QjVELE9BQU9DLGVBQWUyRixFQUFVSSxFQUFjSyxJQUVsRCxJQUNJLElBQUssSUFBSUUsR0FBbUIsUUFBU3RDLEdBQWlCdUMsRUFBcUJELEVBQWlCRSxRQUFTRCxFQUFtQkUsS0FBTUYsRUFBcUJELEVBQWlCRSxPQUFRLENBQ3hLLElBQ0lFLEVBQVVaLEVBREtTLEVBQW1CL0IsT0FFdEMsR0FBdUIsaUJBQVprQyxFQUNQLE9BQU9BLEVBQVFsQyxPQUczQixNQUFPbUMsR0FBU2pCLEVBQU0sQ0FBRWtCLE1BQU9ELEdBQy9CLFFBQ0ksSUFDUUosSUFBdUJBLEVBQW1CRSxPQUFTcEosRUFBS2lKLEVBQWlCTyxTQUFTeEosRUFBRytFLEtBQUtrRSxHQUVsRyxRQUFVLEdBQUlaLEVBQUssTUFBTUEsRUFBSWtCLFNBR3JDM0MsRUFBWXpGLFVBQVVxRyw2QkFBK0IsV0FDakQsSUFBSWlDLEVBQUt6SixFQUNMc0ksRUFBVzNILEtBQUtvRyxtQkFDaEJ3QixFQUFVN0YsT0FBTzhGLGVBQWVGLEdBQ3BDLElBQ0ksSUFBSyxJQUFJb0IsR0FBbUIsUUFBUy9DLEdBQWlCZ0QsRUFBcUJELEVBQWlCUCxRQUFTUSxFQUFtQlAsS0FBTU8sRUFBcUJELEVBQWlCUCxPQUFRLENBQ3hLLElBQUlULEVBQWVpQixFQUFtQnhDLE1BQ2xDd0IsRUFBT2pHLE9BQU9rRyx5QkFBeUJMLEVBQVNHLEdBQ3BELElBQUtHLEVBQWdCRixHQUNqQixPQUVKakcsT0FBT0MsZUFBZTJGLEVBQVVJLEVBQWNDLElBR3RELE1BQU9pQixHQUFTSCxFQUFNLENBQUVGLE1BQU9LLEdBQy9CLFFBQ0ksSUFDUUQsSUFBdUJBLEVBQW1CUCxPQUFTcEosRUFBSzBKLEVBQWlCRixTQUFTeEosRUFBRytFLEtBQUsyRSxHQUVsRyxRQUFVLEdBQUlELEVBQUssTUFBTUEsRUFBSUYsU0FHckMzQyxFQUFZekYsVUFBVTRGLGlCQUFtQixXQUNyQyxJQUFJMUMsRUFBMEJKLEVBQVFJLHdCQUNsQ3RFLEVBQUtZLEtBQUtOLEtBQUt3SixjQUFjeEYsR0FDakMsSUFBS3RFLEVBQ0QsTUFBTSxJQUFJc0IsTUFBTSxpQ0FBbUNnRCxFQUEwQixZQUVqRixPQUFPdEUsR0FFSjZHLEVBL0xxQixDQWdNOUIsS0FFRixTQUFTaUMsRUFBZ0JpQixHQUNyQixRQUFTQSxHQUE4QyxtQkFBdEJBLEVBQWM3Qyx3REN6TS9DOEMscUJDSkFDLEVBQXVCLHlCQVF2QkMsRUFBMkIsV0FDM0IsU0FBU0EsRUFBVTVKLEVBQU1xQixRQUNMLElBQVpBLElBQXNCQSxFQUFVLElBQ3BDZixLQUFLTixLQUFPQSxFQUNaTSxLQUFLZSxRQUFVQSxFQUVmZixLQUFLdUoseUJBQTJCLEtBZ0dwQyxPQTFGQUQsRUFBVTlJLFVBQVVnSixVQUFZLFdBQzVCLElBQUlDLEVBQWV6SixLQUFLMEoscUJBQXFCMUosS0FBS04sTUFDbEQsR0FBNEIsSUFBeEIrSixFQUFhMUosT0FDYixNQUFNLElBQUlXLE1BQU0sOERBRXBCVixLQUFLdUoseUJBQ0R0SyxTQUFTMEsseUJBQXlCQyxZQUFjM0ssU0FBUzBLLGNBQ3JELEtBQ1IzSixLQUFLNkosYUFBYTdKLEtBQUtOLE1BQ2xCTSxLQUFLZSxRQUFRK0ksa0JBQ2Q5SixLQUFLK0osb0JBQW9CTixFQUFjekosS0FBS2UsUUFBUWlKLGlCQU81RFYsRUFBVTlJLFVBQVV5SixhQUFlLFdBQy9CLEdBQUdDLE1BQU05RixLQUFLcEUsS0FBS04sS0FBS3lLLGlCQUFpQixJQUFNZCxJQUMxQ2UsU0FBUSxTQUFVQyxHQUNuQkEsRUFBV0MsY0FBY0MsWUFBWUYsT0FFcENySyxLQUFLZSxRQUFReUosa0JBQW9CeEssS0FBS3VKLDBCQUN2Q3ZKLEtBQUt1Six5QkFBeUJrQixTQVV0Q25CLEVBQVU5SSxVQUFVcUosYUFBZSxTQUFVekssR0FDekMsSUFBSStFLEVBQVFuRSxLQUNSMEssRUFBZ0IxSyxLQUFLMkssaUJBQ3JCQyxFQUFjNUssS0FBSzJLLGlCQUN2QkQsRUFBYzFKLGlCQUFpQixTQUFTLFdBQ3BDLElBQUl5SSxFQUFldEYsRUFBTXVGLHFCQUFxQnRLLEdBQzFDcUssRUFBYTFKLE9BQVMsR0FDdEIwSixFQUFhQSxFQUFhMUosT0FBUyxHQUFHMEssV0FHOUNHLEVBQVk1SixpQkFBaUIsU0FBUyxXQUNsQyxJQUFJeUksRUFBZXRGLEVBQU11RixxQkFBcUJ0SyxHQUMxQ3FLLEVBQWExSixPQUFTLEdBQ3RCMEosRUFBYSxHQUFHZ0IsV0FHeEJyTCxFQUFHeUwsYUFBYUgsRUFBZXRMLEVBQUcwTCxTQUFTLElBQzNDMUwsRUFBRzJMLFlBQVlILElBTW5CdEIsRUFBVTlJLFVBQVV1SixvQkFBc0IsU0FBVU4sRUFBY08sR0FDOUQsSUFBSWdCLEVBQWEsRUFDYmhCLElBQ0FnQixFQUFhQyxLQUFLQyxJQUFJekIsRUFBYTBCLFFBQVFuQixHQUFpQixJQUVoRVAsRUFBYXVCLEdBQVlQLFNBRTdCbkIsRUFBVTlJLFVBQVVrSixxQkFBdUIsU0FBVWhLLEdBRWpELE1BRG1CLEdBQUd3SyxNQUFNOUYsS0FBSzFFLEVBQUt5SyxpQkFBaUIsZ0VBQ25DaUIsUUFBTyxTQUFVaE0sR0FDakMsSUFBSWlNLEVBQTBELFNBQXJDak0sRUFBR3FILGFBQWEsa0JBQ04sTUFBL0JySCxFQUFHcUgsYUFBYSxhQUNhLE1BQTdCckgsRUFBR3FILGFBQWEsV0FDbUIsU0FBbkNySCxFQUFHcUgsYUFBYSxlQUNoQjZFLEVBQXVCbE0sRUFBR21NLFVBQVksR0FDdENuTSxFQUFHb00sd0JBQXdCQyxNQUFRLElBQ2xDck0sRUFBRzJILFVBQVUyRSxTQUFTckMsS0FBMEJnQyxFQUNqRE0sR0FBMkIsRUFDL0IsR0FBSUwsRUFBc0IsQ0FDdEIsSUFBSWhNLEVBQVFzTSxpQkFBaUJ4TSxHQUM3QnVNLEVBQ3NCLFNBQWxCck0sRUFBTXVNLFNBQTJDLFdBQXJCdk0sRUFBTXdNLFdBRTFDLE9BQU9SLElBQXlCSyxNQUd4Q3JDLEVBQVU5SSxVQUFVbUssZUFBaUIsV0FDakMsSUFBSW9CLEVBQVc5TSxTQUFTQyxjQUFjLE9BS3RDLE9BSkE2TSxFQUFTMUUsYUFBYSxXQUFZLEtBRWxDMEUsRUFBUzFFLGFBQWEsY0FBZSxRQUNyQzBFLEVBQVNoRixVQUFVQyxJQUFJcUMsR0FDaEIwQyxHQUVKekMsRUF0R21CLHVCQ0oxQjBDLEVBQWdDLFdBQ2hDLFNBQVNBLElBQ0xoTSxLQUFLaU0sT0FBUyxJQUFJQyxJQXNEdEIsT0EvQ0FGLEVBQWV4TCxVQUFVMkwsUUFBVSxTQUFVQyxFQUFLQyxHQUM5QyxJQUFJbEksRUFBUW5FLEtBQ1pBLEtBQUtzTSxPQUFPRixHQUNaLElBQUlHLEVBQVVDLHVCQUFzQixTQUFVQyxHQUMxQ3RJLEVBQU04SCxPQUFPUyxPQUFPTixHQUdwQkMsRUFBU0ksTUFFYnpNLEtBQUtpTSxPQUFPM0YsSUFBSThGLEVBQUtHLElBTXpCUCxFQUFleEwsVUFBVThMLE9BQVMsU0FBVUYsR0FDeEMsSUFBSU8sRUFBUTNNLEtBQUtpTSxPQUFPaEssSUFBSW1LLEdBQ3hCTyxJQUNBQyxxQkFBcUJELEdBQ3JCM00sS0FBS2lNLE9BQU9TLE9BQU9OLEtBTTNCSixFQUFleEwsVUFBVXFNLFVBQVksV0FDakMsSUFBSTFJLEVBQVFuRSxLQUlaQSxLQUFLaU0sT0FBTzdCLFNBQVEsU0FBVTBDLEVBQUdWLEdBQzdCakksRUFBTW1JLE9BQU9GLE9BTXJCSixFQUFleEwsVUFBVXVNLFNBQVcsV0FDaEMsSUFBSUMsRUFBUSxHQU9aLE9BSEFoTixLQUFLaU0sT0FBTzdCLFNBQVEsU0FBVTBDLEVBQUdWLEdBQzdCWSxFQUFNQyxLQUFLYixNQUVSWSxHQUVKaEIsRUF4RHdCLGFDSnhCNUosRUFBYSxDQUNwQjhLLFFBQVMsc0JBQ1RDLEtBQU0sbUJBQ05DLFFBQVMsc0JBQ1RDLFdBQVkseUJBQ1pDLFlBQWEseUJBQ2JDLFFBQVMsc0JBQ1RDLFdBQVkseUJBSVpDLHNCQUF1QixtQ0FJdkJDLHNCQUF1QixtQ0FRdkJDLG9CQUFxQixtQ0FFckJDLHNCQUF1QixxQ0FFdkJDLHFCQUFzQixvQ0FLdEJDLGFBQWMsNkJBRVB4SyxFQUFVLENBQ2pCeUssaUJBQWtCLHlCQUNsQkMseUJBQTBCLGlDQUMxQkMsZ0JBQWlCLHNCQUNqQkMsYUFBYyxtQkFDZEMsYUFBYyxRQUNkQyxjQUFlLG9CQUNmQyxtQkFBb0IseUJBQ3BCQyxpQkFBa0IsdUJBQ2xCQyxlQUFnQixVQUNoQkMsd0JBQXlCLGdDQUN6QkMsYUFBYyxtQkFDZEMsY0FBZSxvQkFDZkMsZUFBZ0IscUJBQ2hCQyxnQ0FBaUMsQ0FDN0IsV0FDQSwyQkFDQSx1Q0FDRkMsS0FBSyxNQUNQQyxpQkFBa0Isd0JBRVgvSyxFQUFVLENBQ2pCZ0wsK0JBQWdDLEdBQ2hDQyw4QkFBK0IsTUhwRG5DLFNBQVc1RixHQUNQQSxFQUErQixnQkFBSSx1QkFDbkNBLEVBQWtDLG1CQUFJLHFCQUYxQyxDQUdHQSxJQUFrQkEsRUFBZ0IsS0FDckMsSUFBSTZGLEVBQXFDLFNBQVUvSyxHQUUvQyxTQUFTK0ssRUFBb0JuTixHQUN6QixJQUFJcUMsRUFBUUQsRUFBT0UsS0FBS3BFLE1BQU0sU0FBUyxRQUFTLEdBQUlpUCxFQUFvQjVLLGdCQUFpQnZDLEtBQWE5QixLQW9CdEcsT0FuQkFtRSxFQUFNK0ssWUFBYSxFQUNuQi9LLEVBQU1nTCxjQUFlLEVBQ3JCaEwsRUFBTWlMLGVBQWlCLEVBQ3ZCakwsRUFBTWtMLGVBQWlCLEVBQ3ZCbEwsRUFBTW1MLGdCQUFrQmhNLEVBQVE2SyxhQUNoQ2hLLEVBQU1vTCxpQkFBbUJqTSxFQUFRNkssYUFDakNoSyxFQUFNcUwsa0JBQW1CLEVBQ3pCckwsRUFBTXNMLG1CQUFvQixFQUMxQnRMLEVBQU11TCw2QkFBK0JwTSxFQUFRc0wsZ0NBQzdDekssRUFBTXdMLFVBQVksSUFBSTNELEVBQ3RCN0gsRUFBTXlMLHFCQUF1QixXQUN6QnpMLEVBQU0wTCxxQkFFVjFMLEVBQU0yTCxvQkFBc0IsV0FDeEIzTCxFQUFNNEwsVUFFVjVMLEVBQU02TCwrQkFBaUMsV0FDbkM3TCxFQUFNNEwsVUFFSDVMLEVBbVVYLE9BelZBLFFBQVU4SyxFQUFxQi9LLEdBd0IvQm5DLE9BQU9DLGVBQWVpTixFQUFxQixhQUFjLENBQ3JEaE4sSUFBSyxXQUNELE9BQU9HLEdBRVhGLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZWlOLEVBQXFCLFVBQVcsQ0FDbERoTixJQUFLLFdBQ0QsT0FBT3FCLEdBRVhwQixZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVpTixFQUFxQixVQUFXLENBQ2xEaE4sSUFBSyxXQUNELE9BQU84QixHQUVYN0IsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlaU4sRUFBcUIsaUJBQWtCLENBQ3pEaE4sSUFBSyxXQUNELE1BQU8sQ0FDSGdPLGFBQWMsYUFDZHZMLFNBQVUsYUFDVitLLGtCQUFtQixXQUFjLE9BQU8sR0FDeENTLG1CQUFvQixhQUNwQkMsbUJBQW9CLFdBQWMsT0FBTyxHQUN6Q0MsbUJBQW9CLFdBQWMsTUFBTyxJQUN6Q0Msa0JBQW1CLFdBQWMsT0FBTyxNQUN4Q0MsU0FBVSxXQUFjLE9BQU8sR0FDL0JDLG9CQUFxQixXQUFjLE9BQU8sR0FDMUNDLGFBQWMsYUFDZEMsY0FBZSxhQUNmQyxhQUFjLGFBQ2RDLGNBQWUsYUFDZjFHLGFBQWMsYUFDZDJHLGdCQUFpQixhQUNqQjVMLFlBQWEsYUFDYjZMLGVBQWdCLGFBQ2hCckgsVUFBVyxhQUNYc0gsNEJBQTZCLGFBQzdCQyw4QkFBK0IsYUFDL0JDLHlCQUEwQixXQUFjLE9BQU8sR0FDL0NDLDRCQUE2QixXQUFjLE9BQU8sR0FDbERDLDJCQUE0QixhQUM1QkMsNkJBQThCLGVBR3RDalAsWUFBWSxFQUNaQyxjQUFjLElBRWxCOE0sRUFBb0J6TyxVQUFVSCxLQUFPLFdBQzdCTCxLQUFLOEIsUUFBUXdPLFNBQVNsTyxFQUFXbUwsVUFDakN2TixLQUFLb1IscUJBQW9CLEdBRTdCcFIsS0FBS21QLGFBQWVuUCxLQUFLOEIsUUFBUXdPLFNBQVNsTyxFQUFXb0wsYUFFekR5QixFQUFvQnpPLFVBQVVHLFFBQVUsV0FDaENYLEtBQUtxUCxpQkFDTC9KLGFBQWF0RixLQUFLcVAsZ0JBQ2xCclAsS0FBS3FSLDJCQUVMclIsS0FBS21QLGNBQ0xuUCxLQUFLOEIsUUFBUWlQLDhCQUE4QixTQUFVL1EsS0FBSzRQLHNCQUU5RDVQLEtBQUsyUCxVQUFVOUMsWUFDZjdNLEtBQUs4QixRQUFRcVAsNkJBQTZCLFNBQVVuUixLQUFLOFAscUJBQ3pEOVAsS0FBSzhCLFFBQVFxUCw2QkFBNkIsb0JBQXFCblIsS0FBS2dRLGlDQUV4RWYsRUFBb0J6TyxVQUFVOFEsS0FBTyxTQUFVQyxHQUMzQyxJQUFJcE4sRUFBUW5FLEtBQ1pBLEtBQUtrUCxZQUFhLEVBQ2xCbFAsS0FBSzhCLFFBQVE2TyxnQkFDYjNRLEtBQUs4QixRQUFRNEMsU0FBU3RDLEVBQVdnTCxTQUM3QnBOLEtBQUttUCxjQUlMblAsS0FBSzhCLFFBQVFnUCw0QkFBNEIsU0FBVTlRLEtBQUs0UCxzQkFFeEQyQixHQUFpQkEsRUFBY0MseUJBQy9CeFIsS0FBSzhCLFFBQVE0QyxTQUFTdEMsRUFBVzBMLGNBRXJDOU4sS0FBSzhCLFFBQVFvUCwyQkFBMkIsU0FBVWxSLEtBQUs4UCxxQkFDdkQ5UCxLQUFLOEIsUUFBUW9QLDJCQUEyQixvQkFBcUJsUixLQUFLZ1EsZ0NBR2xFaFEsS0FBS3lSLHVCQUFzQixXQUN2QnROLEVBQU1yQyxRQUFRNEMsU0FBU3RDLEVBQVcrSyxNQUNsQ2hKLEVBQU1yQyxRQUFRbU8sYUFBYTdOLEVBQVdrTCxhQUN0Q25KLEVBQU00TCxTQUNONUwsRUFBTWtMLGVBQWlCM0osWUFBVyxXQUM5QnZCLEVBQU1rTiwwQkFDTmxOLEVBQU1yQyxRQUFRMEgsVUFBVXJGLEVBQU1yQyxRQUFRdU8scUJBQ3RDbE0sRUFBTXJDLFFBQVE0TyxpQkFDZjNNLEVBQVFpTCxtQ0FHbkJDLEVBQW9Cek8sVUFBVWtSLE1BQVEsU0FBVUMsR0FDNUMsSUFBSXhOLEVBQVFuRSxVQUNHLElBQVgyUixJQUFxQkEsRUFBUyxJQUM3QjNSLEtBQUtrUCxhQUtWbFAsS0FBS2tQLFlBQWEsRUFDbEJsUCxLQUFLOEIsUUFBUTJPLGNBQWNrQixHQUMzQjNSLEtBQUs4QixRQUFRNEMsU0FBU3RDLEVBQVc4SyxTQUNqQ2xOLEtBQUs4QixRQUFRa0QsWUFBWTVDLEVBQVcrSyxNQUNwQ25OLEtBQUs4QixRQUFROE8sZ0JBQWdCeE8sRUFBV2tMLGFBQ3BDdE4sS0FBS21QLGNBQ0xuUCxLQUFLOEIsUUFBUWlQLDhCQUE4QixTQUFVL1EsS0FBSzRQLHNCQUU5RDVQLEtBQUs4QixRQUFRcVAsNkJBQTZCLFNBQVVuUixLQUFLOFAscUJBQ3pEOVAsS0FBSzhCLFFBQVFxUCw2QkFBNkIsb0JBQXFCblIsS0FBS2dRLGdDQUNwRXBELHFCQUFxQjVNLEtBQUtvUCxnQkFDMUJwUCxLQUFLb1AsZUFBaUIsRUFDdEI5SixhQUFhdEYsS0FBS3FQLGdCQUNsQnJQLEtBQUtxUCxlQUFpQjNKLFlBQVcsV0FDN0J2QixFQUFNckMsUUFBUW1JLGVBQ2Q5RixFQUFNa04sMEJBQ05sTixFQUFNckMsUUFBUTBPLGFBQWFtQixLQUM1QjVOLEVBQVFnTCxrQ0FNZkUsRUFBb0J6TyxVQUFVb1IsaUJBQW1CLFdBQzdDLElBQUl6TixFQUFRbkUsS0FDWkEsS0FBSzhCLFFBQVE0QyxTQUFTdEMsRUFBV3dMLHVCQUNqQzVOLEtBQUt5Uix1QkFBc0IsV0FDdkJ0TixFQUFNckMsUUFBUTRDLFNBQVN0QyxFQUFXdUwseUJBTzFDc0IsRUFBb0J6TyxVQUFVcVIsaUJBQW1CLFdBQzdDN1IsS0FBSzhCLFFBQVFrRCxZQUFZNUMsRUFBV3VMLHFCQUNwQzNOLEtBQUs4QixRQUFRNEMsU0FBU3RDLEVBQVd5TCx1QkFNckNvQixFQUFvQnpPLFVBQVVzUixnQ0FBa0MsV0FDNUQ5UixLQUFLOEIsUUFBUWtELFlBQVk1QyxFQUFXeUwsc0JBQ3BDN04sS0FBSzhCLFFBQVFrRCxZQUFZNUMsRUFBV3dMLHdCQUV4Q3FCLEVBQW9Cek8sVUFBVXVSLE9BQVMsV0FDbkMsT0FBTy9SLEtBQUtrUCxZQUVoQkQsRUFBb0J6TyxVQUFVd1IsbUJBQXFCLFdBQy9DLE9BQU9oUyxLQUFLc1AsaUJBRWhCTCxFQUFvQnpPLFVBQVV5UixtQkFBcUIsU0FBVU4sR0FDekQzUixLQUFLc1AsZ0JBQWtCcUMsR0FFM0IxQyxFQUFvQnpPLFVBQVUwUixvQkFBc0IsV0FDaEQsT0FBT2xTLEtBQUt1UCxrQkFFaEJOLEVBQW9Cek8sVUFBVTJSLG9CQUFzQixTQUFVUixHQUMxRDNSLEtBQUt1UCxpQkFBbUJvQyxHQUU1QjFDLEVBQW9Cek8sVUFBVTRSLG9CQUFzQixXQUNoRCxPQUFPcFMsS0FBS3dQLGtCQUVoQlAsRUFBb0J6TyxVQUFVNFEsb0JBQXNCLFNBQVVpQixHQUMxRHJTLEtBQUt3UCxpQkFBbUI2QyxHQUU1QnBELEVBQW9Cek8sVUFBVThSLGdDQUFrQyxXQUM1RCxPQUFPdFMsS0FBSzBQLDhCQUVoQlQsRUFBb0J6TyxVQUFVK1IsZ0NBQWtDLFNBQVVDLEdBQ3RFeFMsS0FBSzBQLDZCQUErQjhDLEdBRXhDdkQsRUFBb0J6TyxVQUFVdVAsT0FBUyxXQUNuQyxJQUFJNUwsRUFBUW5FLEtBQ1pBLEtBQUsyUCxVQUFVeEQsUUFBUS9DLEVBQWNxSixvQkFBb0IsV0FDckR0TyxFQUFNdU8scUJBSWR6RCxFQUFvQnpPLFVBQVVtUyxZQUFjLFNBQVVyUixHQUdsRCxHQUZjdEIsS0FBSzhCLFFBQVFxTyxtQkFBbUI3TyxFQUFJc1IsT0FBUXRQLEVBQVFxTCxpQkFFekIsS0FBMUIzTyxLQUFLdVAsaUJBQ2hCdlAsS0FBSzBSLE1BQU0xUixLQUFLdVAsc0JBRWYsQ0FDRCxJQUFJb0MsRUFBUzNSLEtBQUs4QixRQUFRc08sbUJBQW1COU8sR0FDekNxUSxHQUNBM1IsS0FBSzBSLE1BQU1DLEtBS3ZCMUMsRUFBb0J6TyxVQUFVcVMsY0FBZ0IsU0FBVXZSLEdBQ3BELElBQUl3UixFQUFzQixVQUFaeFIsRUFBSThLLEtBQW1DLEtBQWhCOUssRUFBSXlSLFFBQ3pDLEdBQUtELElBR1E5UyxLQUFLOEIsUUFBUXNPLG1CQUFtQjlPLEdBQzdDLENBa0JBLElBQUlzUixFQUFTdFIsRUFBSTBSLGFBQWUxUixFQUFJMFIsZUFBZSxHQUFLMVIsRUFBSXNSLE9BQ3hESyxHQUFZalQsS0FBSzBQLCtCQUNoQjFQLEtBQUs4QixRQUFRcU8sbUJBQW1CeUMsRUFBUTVTLEtBQUswUCw4QkFFOUNvRCxHQUFXRyxHQUNYalQsS0FBSzhCLFFBQVFvTyx1QkFJckJqQixFQUFvQnpPLFVBQVUwUyxzQkFBd0IsU0FBVTVSLElBQ2pDLFdBQVpBLEVBQUk4SyxLQUFvQyxLQUFoQjlLLEVBQUl5UixVQUNGLEtBQXpCL1MsS0FBS3NQLGlCQUNqQnRQLEtBQUswUixNQUFNMVIsS0FBS3NQLGtCQVF4QkwsRUFBb0J6TyxVQUFVcVAsa0JBQW9CLFdBQzlDLElBQUkxTCxFQUFRbkUsS0FHWkEsS0FBSzJQLFVBQVV4RCxRQUFRL0MsRUFBYytKLGlCQUFpQixXQUNsRGhQLEVBQU1pUCw0QkFDTmpQLEVBQU1rUCxnQ0FHZHBFLEVBQW9Cek8sVUFBVWtTLGVBQWlCLFdBQ3ZDMVMsS0FBS3dQLGtCQUNMeFAsS0FBS3NULHVCQUVUdFQsS0FBS3VULDJCQUVUdEUsRUFBb0J6TyxVQUFVNlEsd0JBQTBCLFdBQ3BEclIsS0FBS3FQLGVBQWlCLEVBQ3RCclAsS0FBSzhCLFFBQVFrRCxZQUFZNUMsRUFBV2dMLFNBQ3BDcE4sS0FBSzhCLFFBQVFrRCxZQUFZNUMsRUFBVzhLLFVBTXhDK0IsRUFBb0J6TyxVQUFVaVIsc0JBQXdCLFNBQVVwRixHQUM1RCxJQUFJbEksRUFBUW5FLEtBQ1o0TSxxQkFBcUI1TSxLQUFLb1AsZ0JBQzFCcFAsS0FBS29QLGVBQWlCNUMsdUJBQXNCLFdBQ3hDckksRUFBTWlMLGVBQWlCLEVBQ3ZCOUosYUFBYW5CLEVBQU1rTCxnQkFDbkJsTCxFQUFNa0wsZUFBaUIzSixXQUFXMkcsRUFBVSxPQUdwRDRDLEVBQW9Cek8sVUFBVThTLHFCQUF1QixXQUVqRHRULEtBQUs4QixRQUFRa0QsWUFBWTVDLEVBQVdtTCxTQUNwQyxJQUFJa0MsRUFBb0J6UCxLQUFLOEIsUUFBUTJOLG9CQUNqQ0EsR0FDQXpQLEtBQUs4QixRQUFRNEMsU0FBU3RDLEVBQVdtTCxTQUVqQ2tDLElBQXNCelAsS0FBS3lQLG9CQUMzQnpQLEtBQUs4QixRQUFRK08saUJBQ2I3USxLQUFLeVAsa0JBQW9CQSxJQUdqQ1IsRUFBb0J6TyxVQUFVK1Msd0JBQTBCLFdBR3BEdlQsS0FBSzhCLFFBQVFrRCxZQUFZNUMsRUFBV2lMLFlBQ2hDck4sS0FBSzhCLFFBQVF5Tyx3QkFDYnZRLEtBQUs4QixRQUFRNEMsU0FBU3RDLEVBQVdpTCxZQUM3QnJOLEtBQUttUCxlQUdMblAsS0FBS29ULDRCQUNMcFQsS0FBS3FULCtCQUlqQnBFLEVBQW9Cek8sVUFBVTRTLDBCQUE0QixXQUNqRHBULEtBQUs4QixRQUFRa1AsMkJBR1RoUixLQUFLOEIsUUFBUXdPLFNBQVNsTyxFQUFXcUwsd0JBQ3RDek4sS0FBSzhCLFFBQVFrRCxZQUFZNUMsRUFBV3FMLHVCQUhwQ3pOLEtBQUs4QixRQUFRNEMsU0FBU3RDLEVBQVdxTCx3QkFNekN3QixFQUFvQnpPLFVBQVU2UywwQkFBNEIsV0FDakRyVCxLQUFLOEIsUUFBUW1QLDhCQUdUalIsS0FBSzhCLFFBQVF3TyxTQUFTbE8sRUFBV3NMLHdCQUN0QzFOLEtBQUs4QixRQUFRa0QsWUFBWTVDLEVBQVdzTCx1QkFIcEMxTixLQUFLOEIsUUFBUTRDLFNBQVN0QyxFQUFXc0wsd0JBTWxDdUIsRUExVjZCLENBMlZ0QyxLSTdWRSxFQUFVQSxFQUFvQjNMLFFBQzlCa1EsRUFBMkIsU0FBVXRQLEdBRXJDLFNBQVNzUCxJQUNMLE9BQWtCLE9BQVh0UCxHQUFtQkEsRUFBT2hFLE1BQU1GLEtBQU1GLFlBQWNFLEtBc0wvRCxPQXhMQSxRQUFVd1QsRUFBV3RQLEdBSXJCbkMsT0FBT0MsZUFBZXdSLEVBQVVoVCxVQUFXLFNBQVUsQ0FDakR5QixJQUFLLFdBQ0QsT0FBT2pDLEtBQUtMLFdBQVdvUyxVQUUzQjdQLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXdSLEVBQVVoVCxVQUFXLGtCQUFtQixDQUMxRHlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsV0FBV3FTLHNCQUUzQjFMLElBQUssU0FBVXFMLEdBQ1gzUixLQUFLTCxXQUFXc1MsbUJBQW1CTixJQUV2Q3pQLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXdSLEVBQVVoVCxVQUFXLG1CQUFvQixDQUMzRHlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsV0FBV3VTLHVCQUUzQjVMLElBQUssU0FBVXFMLEdBQ1gzUixLQUFLTCxXQUFXd1Msb0JBQW9CUixJQUV4Q3pQLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXdSLEVBQVVoVCxVQUFXLG1CQUFvQixDQUMzRHlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsV0FBV3lTLHVCQUUzQjlMLElBQUssU0FBVStMLEdBQ1hyUyxLQUFLTCxXQUFXeVIsb0JBQW9CaUIsSUFFeENuUSxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJxUixFQUFValQsU0FBVyxTQUFVYixHQUMzQixPQUFPLElBQUk4VCxFQUFVOVQsSUFFekI4VCxFQUFVaFQsVUFBVVAsV0FBYSxTQUFVd1QsR0FDdkMsSUFBSS9MLEVBQUtySSxPQUNnQixJQUFyQm9VLElBQStCQSxFQUFtQixTQUFVclUsRUFBSXNVLEdBQWdCLE9BQU8sSUFBSXBLLEVBQVVsSyxFQUFJc1UsS0FDN0csSUFBSUMsRUFBWTNULEtBQUtOLEtBQUt3SixjQUFjLEVBQVFtRixvQkFDaEQsSUFBS3NGLEVBQ0QsTUFBTSxJQUFJalQsTUFBTSwrQkFBaUMsRUFBUTJOLG1CQUFxQixzQkFFbEZyTyxLQUFLMlQsVUFBWUEsRUFDakIzVCxLQUFLNFQsUUFDRDVULEtBQUtOLEtBQUt3SixjQUFjLEVBQVFvRixrQkFDcEN0TyxLQUFLNlQsUUFBVSxHQUFHM0osTUFBTTlGLEtBQUtwRSxLQUFLTixLQUFLeUssaUJBQWlCLEVBQVE4RCxrQkFDaEVqTyxLQUFLOFQsY0FBZ0I5VCxLQUFLTixLQUFLd0osY0FBYyxJQUFNLEVBQVE4RSx5QkFBMkIsS0FDdEZoTyxLQUFLeVQsaUJBQW1CQSxFQUN4QnpULEtBQUsrVCxjQUFnQixHQUNyQixJQUNJLElBQUssSUFBSUMsR0FBSyxRQUFTaFUsS0FBSzZULFNBQVVJLEVBQUtELEVBQUd4TCxRQUFTeUwsRUFBR3hMLEtBQU13TCxFQUFLRCxFQUFHeEwsT0FBUSxDQUM1RSxJQUFJMEwsRUFBV0QsRUFBR3pOLE1BQ2xCeEcsS0FBSytULGNBQWM5RyxLQUFLLElBQUksSUFBVWlILEtBRzlDLE1BQU92TCxHQUFTakIsRUFBTSxDQUFFa0IsTUFBT0QsR0FDL0IsUUFDSSxJQUNRc0wsSUFBT0EsRUFBR3hMLE9BQVNwSixFQUFLMlUsRUFBR25MLFNBQVN4SixFQUFHK0UsS0FBSzRQLEdBRXBELFFBQVUsR0FBSXRNLEVBQUssTUFBTUEsRUFBSWtCLFNBR3JDNEssRUFBVWhULFVBQVVGLG1CQUFxQixXQUNyQyxJQ2xGZ0M2VCxFRGtGNUJoUSxFQUFRbkUsS0FDWkEsS0FBS29VLFdDbkYyQkQsRURtRmNuVSxLQUFLMlQsV0FBbEMsRUFBNkMzVCxLQUFLeVQsa0JDbEYvQ1UsRUFBVyxDQUFFbkssZURrRm9EaEssS0FBS3FRLDBCQUF1QmxRLEtBQ2pISCxLQUFLMlMsWUFBYzNTLEtBQUtMLFdBQVdnVCxZQUFZMEIsS0FBS3JVLEtBQUtMLFlBQ3pESyxLQUFLNlMsY0FBZ0I3UyxLQUFLTCxXQUFXa1QsY0FBY3dCLEtBQUtyVSxLQUFLTCxZQUM3REssS0FBS2tULHNCQUNEbFQsS0FBS0wsV0FBV3VULHNCQUFzQm1CLEtBQUtyVSxLQUFLTCxZQUVwREssS0FBS3NVLGNBQWdCLFdBQ2pCclYsU0FBUytCLGlCQUFpQixVQUFXbUQsRUFBTStPLHdCQUUvQ2xULEtBQUt1VSxjQUFnQixXQUNqQnRWLFNBQVNpQyxvQkFBb0IsVUFBV2lELEVBQU0rTyx3QkFFbERsVCxLQUFLWSxPQUFPLFFBQVNaLEtBQUsyUyxhQUMxQjNTLEtBQUtZLE9BQU8sVUFBV1osS0FBSzZTLGVBQzVCN1MsS0FBS1ksT0FBTyxFQUFROE4sY0FBZTFPLEtBQUtzVSxlQUN4Q3RVLEtBQUtZLE9BQU8sRUFBUXdOLGNBQWVwTyxLQUFLdVUsZ0JBRTVDZixFQUFVaFQsVUFBVUcsUUFBVSxXQUMxQlgsS0FBS2lCLFNBQVMsUUFBU2pCLEtBQUsyUyxhQUM1QjNTLEtBQUtpQixTQUFTLFVBQVdqQixLQUFLNlMsZUFDOUI3UyxLQUFLaUIsU0FBUyxFQUFReU4sY0FBZTFPLEtBQUtzVSxlQUMxQ3RVLEtBQUtpQixTQUFTLEVBQVFtTixjQUFlcE8sS0FBS3VVLGVBQzFDdlUsS0FBS3VVLGdCQUNMdlUsS0FBSytULGNBQWMzSixTQUFRLFNBQVVvSyxHQUNqQ0EsRUFBTzdULGFBRVh1RCxFQUFPMUQsVUFBVUcsUUFBUXlELEtBQUtwRSxPQUVsQ3dULEVBQVVoVCxVQUFVdVAsT0FBUyxXQUN6Qi9QLEtBQUtMLFdBQVdvUSxVQUVwQnlELEVBQVVoVCxVQUFVOFEsS0FBTyxXQUN2QnRSLEtBQUtMLFdBQVcyUixRQUVwQmtDLEVBQVVoVCxVQUFVa1IsTUFBUSxTQUFVQyxRQUNuQixJQUFYQSxJQUFxQkEsRUFBUyxJQUNsQzNSLEtBQUtMLFdBQVcrUixNQUFNQyxJQUUxQjZCLEVBQVVoVCxVQUFVSixxQkFBdUIsV0FDdkMsSUFBSStELEVBQVFuRSxLQWtFWixPQUFPLElBQUlpUCxFQS9ERyxDQUNWZ0IsYUFBYyxTQUFVbkosR0FBYSxPQUFPN0gsU0FBU3dWLEtBQUsxTixVQUFVQyxJQUFJRixJQUN4RXBDLFNBQVUsU0FBVW9DLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVUMsSUFBSUYsSUFDakUySSxrQkFBbUIsV0FBYyxPQ3ZHWGlGLEVEdUd5Q3ZRLEVBQU0wUCxRQ3RHekVjLEVBQU8sSUFBSUMsSUFDZixHQUFHeEssUUFBUWhHLEtBQUtzUSxHQUFLLFNBQVV0VixHQUFNLE9BQU91VixFQUFLM04sSUFBSTVILEVBQUd5VixjQUNqREYsRUFBS0csS0FBTyxFQUhoQixJQUEyQkosRUFDMUJDLEdEdUdJekUsbUJBQW9CLFdBQ1ovTCxFQUFNMlAsZ0JBQWtCM1AsRUFBTTJQLGNBQWN0TyxVQUM1Q3JCLEVBQU0yUCxjQUFjaUIsU0FHNUI1RSxtQkFBb0IsU0FBVXlDLEVBQVFKLEdBQ2xDLFFBQU9JLElBQVMsUUFBUUEsRUFBUUosSUFFcENwQyxtQkFBb0IsU0FBVTlPLEdBQzFCLElBQUtBLEVBQUlzUixPQUNMLE1BQU8sR0FFWCxJQUFJb0MsR0FBVSxRQUFRMVQsRUFBSXNSLE9BQVEsSUFBTSxFQUFRN0UsaUJBQW1CLEtBQ25FLE9BQU9pSCxHQUFXQSxFQUFRdk8sYUFBYSxFQUFRc0gsbUJBRW5Ec0Msa0JBQW1CLFdBQWMsT0FBT2xNLEVBQU1rTSxxQkFDOUNDLFNBQVUsU0FBVXhKLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVTJFLFNBQVM1RSxJQUN0RXlKLG9CQUFxQixXQUFjLFNDL0lsQm5SLEVEK0kyQytFLEVBQU15UCxVQzlJOUR4VSxFQUFHNlYsYUFBZTdWLEVBQUc4VixhQUQ5QixJQUFzQjlWLEdEZ0pqQm9SLGFBQWMsU0FBVW1CLEdBQVUsT0FBT3hOLEVBQU1oRCxLQUFLLEVBQVErTSxhQUFjeUQsRUFBUyxDQUFFQSxPQUFRQSxHQUFXLEtBQ3hHbEIsY0FBZSxTQUFVa0IsR0FBVSxPQUFPeE4sRUFBTWhELEtBQUssRUFBUWlOLGNBQWV1RCxFQUFTLENBQUVBLE9BQVFBLEdBQVcsS0FDMUdqQixhQUFjLFdBQWMsT0FBT3ZNLEVBQU1oRCxLQUFLLEVBQVFzTixhQUFjLEtBQ3BFa0MsY0FBZSxXQUFjLE9BQU94TSxFQUFNaEQsS0FBSyxFQUFRdU4sY0FBZSxLQUN0RXpFLGFBQWMsV0FDVjlGLEVBQU1pUSxVQUFVbkssZ0JBRXBCMkcsZ0JBQWlCLFNBQVU5SixHQUFhLE9BQU83SCxTQUFTd1YsS0FBSzFOLFVBQVVJLE9BQU9MLElBQzlFOUIsWUFBYSxTQUFVOEIsR0FBYSxPQUFPM0MsRUFBTXpFLEtBQUtxSCxVQUFVSSxPQUFPTCxJQUN2RStKLGVBQWdCLFdBQ1oxTSxFQUFNMFAsUUFBUXNCLFVBQ2RoUixFQUFNMFAsUUFBUXpKLFNBQVEsU0FBVWdMLEdBQzVCQSxFQUFPOUssY0FBY1MsWUFBWXFLLE9BR3pDNUwsVUFBVyxXQUNQckYsRUFBTWlRLFVBQVU1SyxhQUVwQnNILDRCQUE2QixTQUFVeFAsRUFBS1IsR0FDcENxRCxFQUFNeVAsbUJBQW1CaEssYUFDekJ6RixFQUFNeVAsUUFBUTVTLGlCQUFpQk0sRUFBS1IsSUFHNUNpUSw4QkFBK0IsU0FBVXpQLEVBQUtSLEdBQ3RDcUQsRUFBTXlQLG1CQUFtQmhLLGFBQ3pCekYsRUFBTXlQLFFBQVExUyxvQkFBb0JJLEVBQUtSLElBRy9Da1EseUJBQTBCLFdBQ3RCLFNDcEtjNVIsRURvS1krRSxFQUFNeVAsVUNuS2YsSUFBakJ4VSxFQUFHaVcsVUFEWixJQUF1QmpXLEdEc0tsQjZSLDRCQUE2QixXQUN6QixTQzlKaUI3UixFRDhKWStFLEVBQU15UCxVQzdKbkMzSSxLQUFLcUssS0FBS2xXLEVBQUc2VixhQUFlN1YsRUFBR2lXLGFBQWVqVyxFQUFHbVcsYUFEMUQsSUFBMEJuVyxHRGdLckI4UiwyQkFBNEIsU0FBVTVQLEVBQUtSLEdBQ3ZDNkYsT0FBTzNGLGlCQUFpQk0sRUFBS1IsSUFFakNxUSw2QkFBOEIsU0FBVTdQLEVBQUtSLEdBQ3pDNkYsT0FBT3pGLG9CQUFvQkksRUFBS1IsT0FLNUMwUyxFQUFVaFQsVUFBVTZQLGtCQUFvQixXQUNwQyxPQUFPclEsS0FBS04sS0FBS3dKLGNBQWMsSUFBTSxFQUFRc0Ysd0JBQTBCLE1BRXBFZ0YsRUF6TG1CLENBMEw1QixrQ0U5TEssU0FBU2dDLEVBQWFDLEdBRXpCLFlBRGtCLElBQWRBLElBQXdCQSxFQUFZOU8sVUFLNUMsU0FBK0I4TyxRQUNULElBQWRBLElBQXdCQSxFQUFZOU8sUUFHeEMsSUFBSStPLEdBQW1CLEVBQ3ZCLElBQ0ksSUFBSTNVLEVBQVUsQ0FHVixjQUVJLE9BREEyVSxHQUFtQixHQUNaLElBR1g1VSxFQUFVLGFBQ2QyVSxFQUFVeFcsU0FBUytCLGlCQUFpQixPQUFRRixFQUFTQyxHQUNyRDBVLEVBQVV4VyxTQUFTaUMsb0JBQW9CLE9BQVFKLEVBQVNDLEdBRTVELE1BQU80VSxHQUNIRCxHQUFtQixFQUV2QixPQUFPQSxFQXpCQUUsQ0FBc0JILElBQ3pCLENBQUVJLFNBQVMsaURDSFosU0FBU0MsRUFBUWQsRUFBU3hDLEdBQzdCLEdBQUl3QyxFQUFRYyxRQUNSLE9BQU9kLEVBQVFjLFFBQVF0RCxHQUczQixJQURBLElBQUlwVCxFQUFLNFYsRUFDRjVWLEdBQUksQ0FDUCxHQUFJMlcsRUFBUTNXLEVBQUlvVCxHQUNaLE9BQU9wVCxFQUVYQSxFQUFLQSxFQUFHa0wsY0FFWixPQUFPLEtBRUosU0FBU3lMLEVBQVFmLEVBQVN4QyxHQUk3QixPQUhvQndDLEVBQVFlLFNBQ3JCZixFQUFRZ0IsdUJBQ1JoQixFQUFRaUIsbUJBQ003UixLQUFLNFEsRUFBU3hDLEdBVWhDLFNBQVMwRCxFQUFvQmxCLEdBS2hDLElBQUltQixFQUFTbkIsRUFDYixHQUE0QixPQUF4Qm1CLEVBQU9DLGFBQ1AsT0FBT0QsRUFBT0UsWUFFbEIsSUFBSUMsRUFBUUgsRUFBT0ksV0FBVSxHQUM3QkQsRUFBTWhYLE1BQU1rWCxZQUFZLFdBQVksWUFDcENGLEVBQU1oWCxNQUFNa1gsWUFBWSxZQUFhLCtCQUNyQ3ZYLFNBQVN3WCxnQkFBZ0IxTCxZQUFZdUwsR0FDckMsSUFBSUQsRUFBY0MsRUFBTUQsWUFFeEIsT0FEQXBYLFNBQVN3WCxnQkFBZ0JsTSxZQUFZK0wsR0FDOUJELCtIQzFDUEssRUFBa0MsU0FBVXhTLEdBRTVDLFNBQVN3UyxJQUNMLE9BQWtCLE9BQVh4UyxHQUFtQkEsRUFBT2hFLE1BQU1GLEtBQU1GLFlBQWNFLEtBZ0QvRCxPQWxEQSxRQUFVMFcsRUFBa0J4UyxHQUk1QndTLEVBQWlCblcsU0FBVyxTQUFVYixHQUNsQyxPQUFPLElBQUlnWCxFQUFpQmhYLElBTWhDZ1gsRUFBaUJsVyxVQUFVbVcsTUFBUSxTQUFVQyxHQUN6QzVXLEtBQUtMLFdBQVdnWCxNQUFNQyxJQU0xQkYsRUFBaUJsVyxVQUFVcVcsTUFBUSxTQUFVQyxHQUN6QzlXLEtBQUtMLFdBQVdrWCxNQUFNQyxJQU0xQkosRUFBaUJsVyxVQUFVdVcsWUFBYyxTQUFVQyxHQUMvQ2hYLEtBQUtMLFdBQVdvWCxZQUFZQyxJQUVoQ04sRUFBaUJsVyxVQUFVeVcsU0FBVyxXQUNsQyxPQUFPalgsS0FBS0wsV0FBV3NYLFlBRTNCUCxFQUFpQmxXLFVBQVVKLHFCQUF1QixXQUM5QyxJQUFJK0QsRUFBUW5FLEtBSVI4QixFQUFVLENBQ1Y0QyxTQUFVLFNBQVVvQyxHQUFhLE9BQU8zQyxFQUFNekUsS0FBS3FILFVBQVVDLElBQUlGLElBQ2pFOUIsWUFBYSxTQUFVOEIsR0FBYSxPQUFPM0MsRUFBTXpFLEtBQUtxSCxVQUFVSSxPQUFPTCxJQUN2RW1RLFNBQVUsV0FBYyxPQUFPLFFBQW9COVMsRUFBTXpFLE9BQ3pEK0gsMkJBQTRCLFNBQVU1RyxFQUFTQyxHQUMzQyxPQUFPcUQsRUFBTXZELE9BQU9DLEVBQVNDLElBRWpDd0csNkJBQThCLFNBQVV6RyxFQUFTQyxHQUM3QyxPQUFPcUQsRUFBTWxELFNBQVNKLEVBQVNDLEtBSXZDLE9BQU8sSUFBSSxJQUEyQmdCLElBRW5DNFUsRUFuRDBCLENBb0RuQywwRUN4RFN0VSxFQUFhLENBQ3BCOFUsa0JBQW1CLGtDQUNuQkMsZUFBZ0IsK0JBQ2hCQyxZQUFhLDRCQUNialUsS0FBTSxzQkNETmtVLEVBQTRDLFNBQVVuVCxHQUV0RCxTQUFTbVQsRUFBMkJ2VixHQUNoQyxJQUFJcUMsRUFBUUQsRUFBT0UsS0FBS3BFLE1BQU0sU0FBUyxRQUFTLEdBQUlxWCxFQUEyQmhULGdCQUFpQnZDLEtBQWE5QixLQUk3RyxPQUhBbUUsRUFBTW1ULHlCQUEyQixXQUM3Qm5ULEVBQU1vVCwyQkFFSHBULEVBbUZYLE9BekZBLFFBQVVrVCxFQUE0Qm5ULEdBUXRDbkMsT0FBT0MsZUFBZXFWLEVBQTRCLGFBQWMsQ0FDNURwVixJQUFLLFdBQ0QsT0FBT0csR0FFWEYsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlcVYsRUFBNEIsaUJBQWtCLENBSWhFcFYsSUFBSyxXQUVELE1BQU8sQ0FDSHlDLFNBQVUsYUFDVk0sWUFBYSxhQUNiaVMsU0FBVSxXQUFjLE9BQU8sR0FDL0J4UCwyQkFBNEIsYUFDNUJILDZCQUE4QixlQUl0Q3BGLFlBQVksRUFDWkMsY0FBYyxJQUVsQmtWLEVBQTJCN1csVUFBVUgsS0FBTyxXQUN4Q0wsS0FBSzhCLFFBQVEyRiwyQkFBMkIsZUFBZ0J6SCxLQUFLc1gsMkJBRWpFRCxFQUEyQjdXLFVBQVVHLFFBQVUsV0FDM0NYLEtBQUs4QixRQUFRd0YsNkJBQTZCLGVBQWdCdEgsS0FBS3NYLDJCQUtuRUQsRUFBMkI3VyxVQUFVeVcsU0FBVyxXQUM1QyxPQUFPalgsS0FBSzhCLFFBQVFtVixZQU14QkksRUFBMkI3VyxVQUFVbVcsTUFBUSxTQUFVQyxHQUNuRCxJQUFJUSxFQUFjQyxFQUEyQmpWLFdBQVdnVixZQUNwRFIsRUFDQTVXLEtBQUs4QixRQUFRNEMsU0FBUzBTLEdBR3RCcFgsS0FBSzhCLFFBQVFrRCxZQUFZb1MsSUFPakNDLEVBQTJCN1csVUFBVXFXLE1BQVEsU0FBVUMsR0FDbkQsSUFBSXpYLEVBQUtnWSxFQUEyQmpWLFdBQVk4VSxFQUFvQjdYLEVBQUc2WCxrQkFBbUJFLEVBQWMvWCxFQUFHK1gsWUFDdkdOLEVBQ0E5VyxLQUFLOEIsUUFBUTRDLFNBQVN3UyxJQUd0QmxYLEtBQUs4QixRQUFRa0QsWUFBWWtTLEdBQ3pCbFgsS0FBSzhCLFFBQVFrRCxZQUFZb1MsS0FPakNDLEVBQTJCN1csVUFBVXVXLFlBQWMsU0FBVUMsR0FDekQsSUFBSUcsRUFBaUJFLEVBQTJCalYsV0FBVytVLGVBQ3ZESCxFQUNBaFgsS0FBSzhCLFFBQVE0QyxTQUFTeVMsR0FHdEJuWCxLQUFLOEIsUUFBUWtELFlBQVltUyxJQUdqQ0UsRUFBMkI3VyxVQUFVK1csd0JBQTBCLFdBQzNELElBQUlILEVBQWNDLEVBQTJCalYsV0FBV2dWLFlBQ3hEcFgsS0FBSzhCLFFBQVFrRCxZQUFZb1MsSUFFdEJDLEVBMUZvQyxDQTJGN0MscUZDOUZTalYsRUFBYSxDQUNwQmUsS0FBTSxrQkFFQ0csRUFBVSxDQUNqQmtVLGVBQWdCLDJCQ0RoQkMsRUFBd0MsU0FBVXZULEdBRWxELFNBQVN1VCxFQUF1QjNWLEdBQzVCLElBQUlxQyxFQUFRRCxFQUFPRSxLQUFLcEUsTUFBTSxTQUFTLFFBQVMsR0FBSXlYLEVBQXVCcFQsZ0JBQWlCdkMsS0FBYTlCLEtBSXpHLE9BSEFtRSxFQUFNNFEsTUFBUSxXQUNWNVEsRUFBTXdPLGVBRUh4TyxFQXlDWCxPQS9DQSxRQUFVc1QsRUFBd0J2VCxHQVFsQ25DLE9BQU9DLGVBQWV5VixFQUF3QixhQUFjLENBQ3hEeFYsSUFBSyxXQUNELE9BQU9HLEdBRVhGLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXlWLEVBQXdCLFVBQVcsQ0FDckR4VixJQUFLLFdBQ0QsT0FBT3FCLEdBRVhwQixZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWV5VixFQUF3QixpQkFBa0IsQ0FDNUR4VixJQUFLLFdBQ0QsTUFBTyxDQUNIeVYsb0JBQXFCLGFBQ3JCQyxzQkFBdUIsYUFDdkJyUSw2QkFBOEIsYUFDOUJHLDJCQUE0QixlQUdwQ3ZGLFlBQVksRUFDWkMsY0FBYyxJQUVsQnNWLEVBQXVCalgsVUFBVUgsS0FBTyxXQUNwQ0wsS0FBSzhCLFFBQVEyRiwyQkFBMkIsUUFBU3pILEtBQUsrVSxRQUUxRDBDLEVBQXVCalgsVUFBVUcsUUFBVSxXQUN2Q1gsS0FBSzhCLFFBQVF3Riw2QkFBNkIsUUFBU3RILEtBQUsrVSxRQUU1RDBDLEVBQXVCalgsVUFBVW1TLFlBQWMsV0FDM0MsSUFBSXhPLEVBQVFuRSxLQUNaQSxLQUFLOEIsUUFBUTRWLHNCQUNibEwsdUJBQXNCLFdBQ2xCckksRUFBTXJDLFFBQVE2Viw0QkFHZkYsRUFoRGdDLENBaUR6QyxLQ2pERUcsRUFBOEIsU0FBVTFULEdBRXhDLFNBQVMwVCxJQUNMLE9BQWtCLE9BQVgxVCxHQUFtQkEsRUFBT2hFLE1BQU1GLEtBQU1GLFlBQWNFLEtBdUMvRCxPQXpDQSxRQUFVNFgsRUFBYzFULEdBSXhCMFQsRUFBYXJYLFNBQVcsU0FBVWIsR0FDOUIsT0FBTyxJQUFJa1ksRUFBYWxZLElBRTVCa1ksRUFBYXBYLFVBQVVxWCxRQUFVLFdBQzdCLElBQUlMLEVBQWlCQyxFQUF1Qm5VLFFBQVFrVSxlQUNwRCxPQUFPeFgsS0FBS04sS0FBS3dKLGNBQWNzTyxJQUVuQ0ksRUFBYXBYLFVBQVVKLHFCQUF1QixXQUMxQyxJQUFJK0QsRUFBUW5FLEtBMkJaLE9BQU8sSUFBSXlYLEVBeEJHLENBQ1ZDLG9CQUFxQixXQUNidlQsRUFBTTJULE9BQVMzVCxFQUFNMlQsTUFBTXRELFFBQzNCclEsRUFBTTJULE1BQU10RCxPQUFPdUQsWUFHM0JKLHNCQUF1QixXQUNmeFQsRUFBTTJULE9BQVMzVCxFQUFNMlQsTUFBTXRELFFBQzNCclEsRUFBTTJULE1BQU10RCxPQUFPd0QsY0FHM0IxUSw2QkFBOEIsU0FBVXpHLEVBQVNDLEdBQzdDLElBQUkrVyxFQUFVMVQsRUFBTTBULFVBQ2hCQSxHQUNBQSxFQUFRM1csb0JBQW9CTCxFQUFTQyxJQUc3QzJHLDJCQUE0QixTQUFVNUcsRUFBU0MsR0FDM0MsSUFBSStXLEVBQVUxVCxFQUFNMFQsVUFDaEJBLEdBQ0FBLEVBQVE3VyxpQkFBaUJILEVBQVNDLE9BTTNDOFcsRUExQ3NCLENBMkMvQixvRkM5Q0V4VixFQUFhLENBQ2I2VixtQkFBb0IsMEJBQ3BCQyx5QkFBMEIsaUNDQzFCQyxFQUF5QyxTQUFValUsR0FFbkQsU0FBU2lVLEVBQXdCclcsR0FDN0IsSUFBSXFDLEVBQVFELEVBQU9FLEtBQUtwRSxNQUFNLFNBQVMsUUFBUyxHQUFJbVksRUFBd0I5VCxnQkFBaUJ2QyxLQUFhOUIsS0FJMUcsT0FIQW1FLEVBQU1pVSxxQkFBdUIsU0FBVTlXLEdBQ25DNkMsRUFBTWtVLG9CQUFvQi9XLElBRXZCNkMsRUF1RFgsT0E3REEsUUFBVWdVLEVBQXlCalUsR0FRbkNuQyxPQUFPQyxlQUFlbVcsRUFBeUIsYUFBYyxDQUN6RGxXLElBQUssV0FDRCxPQUFPRyxHQUVYRixZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVtVyxFQUF5QixpQkFBa0IsQ0FJN0RsVyxJQUFLLFdBRUQsTUFBTyxDQUNIeUMsU0FBVSxhQUNWTSxZQUFhLGFBQ2JzTCxTQUFVLFdBQWMsT0FBTyxHQUMvQmdJLFNBQVUsYUFDVkMscUJBQXNCLGFBQ3RCQyx1QkFBd0IsZUFJaEN0VyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJnVyxFQUF3QjNYLFVBQVVILEtBQU8sV0FDckNMLEtBQUs4QixRQUFReVcscUJBQXFCLGdCQUFpQnZZLEtBQUtvWSx1QkFFNURELEVBQXdCM1gsVUFBVUcsUUFBVSxXQUN4Q1gsS0FBSzhCLFFBQVEwVyx1QkFBdUIsZ0JBQWlCeFksS0FBS29ZLHVCQUU5REQsRUFBd0IzWCxVQUFVdVgsU0FBVyxXQUN6Qy9YLEtBQUs4QixRQUFRa0QsWUFBWTVDLEVBQVc4ViwwQkFDcENsWSxLQUFLOEIsUUFBUTRDLFNBQVN0QyxFQUFXNlYscUJBRXJDRSxFQUF3QjNYLFVBQVVpWSxnQkFBa0IsU0FBVUMsR0FDMUQxWSxLQUFLOEIsUUFBUXdXLFNBQVMsbUJBQW9CSSxFQUFjLGNBRTVEUCxFQUF3QjNYLFVBQVV3WCxXQUFhLFdBQzNDaFksS0FBSzhCLFFBQVE0QyxTQUFTdEMsRUFBVzhWLDJCQUVyQ0MsRUFBd0IzWCxVQUFVNlgsb0JBQXNCLFNBQVUvVyxHQUc5RCxJQUFJcVgsRUFBaUIzWSxLQUFLOEIsUUFBUXdPLFNBQVNsTyxFQUFXOFYsMEJBQzdCLFlBQXJCNVcsRUFBSXNYLGNBQ0FELElBQ0EzWSxLQUFLOEIsUUFBUWtELFlBQVk1QyxFQUFXNlYsb0JBQ3BDalksS0FBSzhCLFFBQVFrRCxZQUFZNUMsRUFBVzhWLDRCQUl6Q0MsRUE5RGlDLENBK0QxQyxLQy9ERVUsRUFBK0IsU0FBVTNVLEdBRXpDLFNBQVMyVSxJQUNMLE9BQWtCLE9BQVgzVSxHQUFtQkEsRUFBT2hFLE1BQU1GLEtBQU1GLFlBQWNFLEtBd0MvRCxPQTFDQSxRQUFVNlksRUFBZTNVLEdBSXpCMlUsRUFBY3RZLFNBQVcsU0FBVWIsR0FDL0IsT0FBTyxJQUFJbVosRUFBY25aLElBSzdCbVosRUFBY3JZLFVBQVV1WCxTQUFXLFdBQy9CL1gsS0FBS0wsV0FBV29ZLFlBS3BCYyxFQUFjclksVUFBVXdYLFdBQWEsV0FDakNoWSxLQUFLTCxXQUFXcVksY0FNcEJhLEVBQWNyWSxVQUFVaVksZ0JBQWtCLFNBQVVDLEdBQ2hEMVksS0FBS0wsV0FBVzhZLGdCQUFnQkMsSUFFcENHLEVBQWNyWSxVQUFVSixxQkFBdUIsV0FDM0MsSUFBSStELEVBQVFuRSxLQWFaLE9BQU8sSUFBSW1ZLEVBVEcsQ0FDVnpULFNBQVUsU0FBVW9DLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVUMsSUFBSUYsSUFDakU5QixZQUFhLFNBQVU4QixHQUFhLE9BQU8zQyxFQUFNekUsS0FBS3FILFVBQVVJLE9BQU9MLElBQ3ZFd0osU0FBVSxTQUFVeEosR0FBYSxPQUFPM0MsRUFBTXpFLEtBQUtxSCxVQUFVMkUsU0FBUzVFLElBQ3RFd1IsU0FBVSxTQUFVTSxFQUFjcFMsR0FBUyxPQUFPckMsRUFBTXpFLEtBQUtKLE1BQU1rWCxZQUFZb0MsRUFBY3BTLElBQzdGK1IscUJBQXNCLFNBQVUxWCxFQUFTQyxHQUFXLE9BQU9xRCxFQUFNdkQsT0FBT0MsRUFBU0MsSUFDakYwWCx1QkFBd0IsU0FBVTNYLEVBQVNDLEdBQVcsT0FBT3FELEVBQU1sRCxTQUFTSixFQUFTQyxPQUt0RitYLEVBM0N1QixDQTRDaEMsb0ZDL0NFdlYsRUFBVSxDQUNWd1YsdUJBQXdCLCtCQUV4Qi9VLEVBQVUsQ0FFVmdWLHNCQUF1QixHQUV2QjNXLEVBQWEsQ0FDYjRXLFNBQVUsZ0NBQ1ZDLGdCQUFpQiwrQkFDakJDLGlCQUFrQixpQ0NQbEJDLEVBQTZDLFNBQVVqVixHQUV2RCxTQUFTaVYsRUFBNEJyWCxHQUNqQyxPQUFPb0MsRUFBT0UsS0FBS3BFLE1BQU0sU0FBUyxRQUFTLEdBQUltWixFQUE0QjlVLGdCQUFpQnZDLEtBQWE5QixLQTJEN0csT0E3REEsUUFBVW1aLEVBQTZCalYsR0FJdkNuQyxPQUFPQyxlQUFlbVgsRUFBNkIsVUFBVyxDQUMxRGxYLElBQUssV0FDRCxPQUFPcUIsR0FFWHBCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZW1YLEVBQTZCLGFBQWMsQ0FDN0RsWCxJQUFLLFdBQ0QsT0FBT0csR0FFWEYsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlbVgsRUFBNkIsVUFBVyxDQUMxRGxYLElBQUssV0FDRCxPQUFPOEIsR0FFWDdCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZW1YLEVBQTZCLGlCQUFrQixDQUlqRWxYLElBQUssV0FFRCxNQUFPLENBQ0h5QyxTQUFVLGFBQ1ZNLFlBQWEsYUFDYm9VLHNCQUF1QixhQUN2QkMseUJBQTBCLGVBSWxDblgsWUFBWSxFQUNaQyxjQUFjLElBS2xCZ1gsRUFBNEIzWSxVQUFVOFksTUFBUSxTQUFVQyxHQUNwRCxJQUFJTixFQUFrQkUsRUFBNEIvVyxXQUFXNlcsZ0JBQ3pETSxFQUFhLElBQ2JBLEdBQWN4VixFQUFRZ1YsdUJBRTFCL1ksS0FBSzhCLFFBQVFzWCxzQkFBc0JHLEdBQ25DdlosS0FBSzhCLFFBQVE0QyxTQUFTdVUsSUFLMUJFLEVBQTRCM1ksVUFBVWdaLFdBQWEsV0FDL0MsSUFBSVAsRUFBa0JFLEVBQTRCL1csV0FBVzZXLGdCQUM3RGpaLEtBQUs4QixRQUFRa0QsWUFBWWlVLEdBQ3pCalosS0FBSzhCLFFBQVF1WCw0QkFFVkYsRUE5RHFDLFNBK0Q5QyxHQzdERU0sRUFBbUMsU0FBVXZWLEdBRTdDLFNBQVN1VixJQUNMLE9BQWtCLE9BQVh2VixHQUFtQkEsRUFBT2hFLE1BQU1GLEtBQU1GLFlBQWNFLEtBbUQvRCxPQXJEQSxRQUFVeVosRUFBbUJ2VixHQUk3QnVWLEVBQWtCbFosU0FBVyxTQUFVYixHQUNuQyxPQUFPLElBQUkrWixFQUFrQi9aLElBRWpDK1osRUFBa0JqWixVQUFVRixtQkFBcUIsV0FDN0NOLEtBQUswWixhQUNEMVosS0FBS04sS0FBS3dKLGNBQWM1RixFQUFRd1Ysd0JBQ3BDLElBQUlhLEVBQVEzWixLQUFLTixLQUFLd0osY0FBYyxJQUFNLHFCQUN0Q3lRLEdBQ0FBLEVBQU1yYSxNQUFNc2EsbUJBQXFCLEtBQ2pDNVosS0FBS04sS0FBS3FILFVBQVVDLElBQUk1RSxFQUFXOFcsa0JBQ25DMU0sdUJBQXNCLFdBQ2xCbU4sRUFBTXJhLE1BQU1zYSxtQkFBcUIsT0FJckM1WixLQUFLTixLQUFLcUgsVUFBVUMsSUFBSTVFLEVBQVc0VyxXQU8zQ1MsRUFBa0JqWixVQUFVOFksTUFBUSxTQUFVQyxHQUMxQ3ZaLEtBQUtMLFdBQVcyWixNQUFNQyxJQUsxQkUsRUFBa0JqWixVQUFVZ1osV0FBYSxXQUNyQ3haLEtBQUtMLFdBQVc2WixjQUVwQkMsRUFBa0JqWixVQUFVSixxQkFBdUIsV0FDL0MsSUFBSStELEVBQVFuRSxLQWVaLE9BQU8sSUFBSW1aLEVBWEcsQ0FDVnpVLFNBQVUsU0FBVW9DLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVUMsSUFBSUYsSUFDakU5QixZQUFhLFNBQVU4QixHQUFhLE9BQU8zQyxFQUFNekUsS0FBS3FILFVBQVVJLE9BQU9MLElBQ3ZFc1Msc0JBQXVCLFNBQVUzTixHQUM3QnRILEVBQU11VixhQUFhcGEsTUFBTWtYLFlBQVksUUFBUy9LLEVBQVEsT0FFMUQ0Tix5QkFBMEIsV0FDdEJsVixFQUFNdVYsYUFBYXBhLE1BQU11YSxlQUFlLGFBTTdDSixFQXREMkIsQ0F1RHBDLGtIQ3RERUssRUFBMkIsU0FBVTVWLEdBRXJDLFNBQVM0VixJQUNMLElBQUkzVixFQUFtQixPQUFYRCxHQUFtQkEsRUFBT2hFLE1BQU1GLEtBQU1GLFlBQWNFLEtBRWhFLE9BREFtRSxFQUFNcUIsVUFBVyxFQUNWckIsRUFxRlgsT0F6RkEsUUFBVTJWLEVBQVc1VixHQU1yQjRWLEVBQVV2WixTQUFXLFNBQVViLEVBQU1xYSxRQUNwQixJQUFUQSxJQUFtQkEsRUFBTyxDQUFFdlMsaUJBQWFySCxJQUM3QyxJQUFJcVUsRUFBUyxJQUFJc0YsRUFBVXBhLEdBSzNCLFlBSHlCUyxJQUFyQjRaLEVBQUt2UyxjQUNMZ04sRUFBT3dGLFVBQVlELEVBQUt2UyxhQUVyQmdOLEdBRVhzRixFQUFVRyxjQUFnQixTQUFVQyxHQUNoQyxNQUFPLENBQ0h4VixTQUFVLFNBQVVvQyxHQUFhLE9BQU9vVCxFQUFTeGEsS0FBS3FILFVBQVVDLElBQUlGLElBQ3BFcVQsdUJBQXdCLFdBQWMsT0FBTyxJQUEwQnhULFNBQ3ZFeVQsb0JBQXFCLFdBQWMsT0FBT0YsRUFBU3hhLEtBQUs4TCx5QkFDeEQ2TyxvQkFBcUIsU0FBVXpILEdBQVUsT0FBT3NILEVBQVN4YSxLQUFLZ00sU0FBU2tILElBQ3ZFMEgscUNBQXNDLFNBQVV6WixFQUFTQyxHQUNyRCxPQUFPN0IsU0FBU3dYLGdCQUFnQnZWLG9CQUFvQkwsRUFBU0MsR0FBUyxXQUUxRXdHLDZCQUE4QixTQUFVekcsRUFBU0MsR0FDN0MsT0FBT29aLEVBQVN4YSxLQUNYd0Isb0JBQW9CTCxFQUFTQyxHQUFTLFdBRS9DeVosd0JBQXlCLFNBQVV6WixHQUMvQixPQUFPNkYsT0FBT3pGLG9CQUFvQixTQUFVSixJQUVoRDBaLG9CQUFxQixXQUNqQixNQUFPLENBQUdDLEVBQUc5VCxPQUFPK1QsWUFBYUMsRUFBR2hVLE9BQU9pVSxjQUUvQ3JULGdCQUFpQixXQUFjLE9BQU8sUUFBUTJTLEVBQVN4YSxLQUFNLFlBQzdEbWIsa0JBQW1CLFdBQWMsT0FBTzdiLFFBQVFrYixFQUFTMVUsV0FDekRnQyxZQUFhLFdBQWMsT0FBT3hJLFFBQVFrYixFQUFTRixZQUNuRGMsbUNBQW9DLFNBQVVqYSxFQUFTQyxHQUNuRCxPQUFPN0IsU0FBU3dYLGdCQUFnQnpWLGlCQUFpQkgsRUFBU0MsR0FBUyxXQUV2RTJHLDJCQUE0QixTQUFVNUcsRUFBU0MsR0FDM0MsT0FBT29aLEVBQVN4YSxLQUNYc0IsaUJBQWlCSCxFQUFTQyxHQUFTLFdBRTVDaWEsc0JBQXVCLFNBQVVqYSxHQUM3QixPQUFPNkYsT0FBTzNGLGlCQUFpQixTQUFVRixJQUU3Q2tFLFlBQWEsU0FBVThCLEdBQWEsT0FBT29ULEVBQVN4YSxLQUFLcUgsVUFBVUksT0FBT0wsSUFDMUVrVSxrQkFBbUIsU0FBVUMsRUFBU3pVLEdBQ2xDLE9BQU8wVCxFQUFTeGEsS0FBS0osTUFBTWtYLFlBQVl5RSxFQUFTelUsTUFJNUR6RSxPQUFPQyxlQUFlOFgsRUFBVXRaLFVBQVcsWUFBYSxDQUNwRHlCLElBQUssV0FDRCxPQUFPakQsUUFBUWdCLEtBQUt3SCxjQUV4QmxCLElBQUssU0FBVTBULEdBQ1hoYSxLQUFLd0gsWUFBY3hJLFFBQVFnYixHQUMzQmhhLEtBQUtrYixnQkFFVGhaLFlBQVksRUFDWkMsY0FBYyxJQUVsQjJYLEVBQVV0WixVQUFVdVgsU0FBVyxXQUMzQi9YLEtBQUtMLFdBQVdvWSxZQUVwQitCLEVBQVV0WixVQUFVd1gsV0FBYSxXQUM3QmhZLEtBQUtMLFdBQVdxWSxjQUVwQjhCLEVBQVV0WixVQUFVdVAsT0FBUyxXQUN6Qi9QLEtBQUtMLFdBQVdvUSxVQUVwQitKLEVBQVV0WixVQUFVSixxQkFBdUIsV0FDdkMsT0FBTyxJQUFJLElBQW9CMFosRUFBVUcsY0FBY2phLFFBRTNEOFosRUFBVXRaLFVBQVVGLG1CQUFxQixXQUNyQyxJQUFJWixFQUFPTSxLQUFLTixLQUNoQk0sS0FBS3dILFlBQWMseUJBQTBCOUgsRUFBS3liLFNBUXREckIsRUFBVXRaLFVBQVUwYSxhQUFlLFdBQy9CbGIsS0FBS0wsV0FBV3ViLGFBQWFsYyxRQUFRZ0IsS0FBS3dILGVBRXZDc1MsRUExRm1CLENBMkY1QiwwRUNqR1MxWCxFQUFhLENBSXBCZ1osV0FBWSwwQ0FDWkMsY0FBZSw2Q0FDZkMsZ0JBQWlCLCtDQUNqQm5ZLEtBQU0sc0JBQ05vWSxVQUFXLGtDQUVKalksRUFBVSxDQUNqQmtZLGFBQWMsd0JBQ2RDLFlBQWEsdUJBQ2JDLHFCQUFzQixnQ0FDdEJDLHVCQUF3QixrQ0FDeEJDLFNBQVUsb0JBQ1ZDLFFBQVMsb0JBRUY5WCxFQUFVLENBQ2pCK1gsd0JBQXlCLElBQ3pCQyxtQkFBb0IsSUFDcEJDLHFCQUFzQixHQUN0QkMsUUFBUyxHQUNUQyxhQUFjLGVDbEJkQyxFQUF5QixDQUN6QixhQUFjLGNBQWUsWUFBYSxXQUcxQ0MsRUFBbUMsQ0FDbkMsV0FBWSxZQUFhLFVBQVcsZUFHcENDLEVBQW1CLEdBQ25CQyxFQUFxQyxTQUFVcFksR0FFL0MsU0FBU29ZLEVBQW9CeGEsR0FDekIsSUFBSXFDLEVBQVFELEVBQU9FLEtBQUtwRSxNQUFNLFNBQVMsUUFBUyxHQUFJc2MsRUFBb0JqWSxnQkFBaUJ2QyxLQUFhOUIsS0E4QnRHLE9BN0JBbUUsRUFBTW9ZLDZCQUE4QixFQUNwQ3BZLEVBQU1xWSxnQkFBa0IsRUFDeEJyWSxFQUFNc1ksMkJBQTZCLEVBQ25DdFksRUFBTXVZLFFBQVUsSUFDaEJ2WSxFQUFNc0ksTUFBUSxDQUFFaEIsTUFBTyxFQUFHa1IsT0FBUSxHQUNsQ3hZLEVBQU15WSxZQUFjLEVBQ3BCelksRUFBTTBZLFlBQWMsRUFDcEIxWSxFQUFNMlksVUFBWSxFQUNsQjNZLEVBQU00WSxnQkFBa0IsQ0FBRUMsS0FBTSxFQUFHQyxJQUFLLEdBQ3hDOVksRUFBTStZLGdCQUFrQi9ZLEVBQU1nWix5QkFDOUJoWixFQUFNaVosd0JBQTBCLFdBQzVCalosRUFBTW9ZLDZCQUE4QixFQUNwQ3BZLEVBQU1rWixpQ0FFVmxaLEVBQU1tWixnQkFBa0IsU0FBVUMsR0FDOUJwWixFQUFNcVosYUFBYUQsSUFFdkJwWixFQUFNc1osa0JBQW9CLFdBQ3RCdFosRUFBTXVaLGtCQUVWdlosRUFBTXdaLGFBQWUsV0FDakJ4WixFQUFNeVosZUFFVnpaLEVBQU0wWixZQUFjLFdBQ2hCMVosRUFBTTJaLGNBRVYzWixFQUFNNFosY0FBZ0IsV0FDbEI1WixFQUFNNEwsVUFFSDVMLEVBK2JYLE9BL2RBLFFBQVVtWSxFQUFxQnBZLEdBa0MvQm5DLE9BQU9DLGVBQWVzYSxFQUFxQixhQUFjLENBQ3JEcmEsSUFBSyxXQUNELE9BQU9HLEdBRVhGLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXNhLEVBQXFCLFVBQVcsQ0FDbERyYSxJQUFLLFdBQ0QsT0FBT3FCLEdBRVhwQixZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVzYSxFQUFxQixVQUFXLENBQ2xEcmEsSUFBSyxXQUNELE9BQU84QixHQUVYN0IsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlc2EsRUFBcUIsaUJBQWtCLENBQ3pEcmEsSUFBSyxXQUNELE1BQU8sQ0FDSHlDLFNBQVUsYUFDVnlWLHVCQUF3QixXQUFjLE9BQU8sR0FDN0NDLG9CQUFxQixXQUFjLE1BQU8sQ0FBRzZDLElBQUssRUFBR2UsTUFBTyxFQUFHQyxPQUFRLEVBQUdqQixLQUFNLEVBQUd2UixNQUFPLEVBQUdrUixPQUFRLElBQ3JHdEMsb0JBQXFCLFdBQWMsT0FBTyxHQUMxQ0MscUNBQXNDLGFBQ3RDaFQsNkJBQThCLGFBQzlCaVQsd0JBQXlCLGFBQ3pCQyxvQkFBcUIsV0FBYyxNQUFPLENBQUdDLEVBQUcsRUFBR0UsRUFBRyxJQUN0RHBULGdCQUFpQixXQUFjLE9BQU8sR0FDdENzVCxrQkFBbUIsV0FBYyxPQUFPLEdBQ3hDclQsWUFBYSxXQUFjLE9BQU8sR0FDbENzVCxtQ0FBb0MsYUFDcENyVCwyQkFBNEIsYUFDNUJzVCxzQkFBdUIsYUFDdkIvVixZQUFhLGFBQ2JnVyxrQkFBbUIsZUFHM0I5WSxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJtYSxFQUFvQjliLFVBQVVILEtBQU8sV0FDakMsSUFBSThELEVBQVFuRSxLQUNSa2UsRUFBc0JsZSxLQUFLa2Usc0JBRS9CLEdBREFsZSxLQUFLbWUscUJBQXFCRCxHQUN0QkEsRUFBcUIsQ0FDckIsSUFBSTdlLEVBQUtpZCxFQUFvQmxhLFdBQVlnYyxFQUFTL2UsRUFBRzhELEtBQU1rYixFQUFjaGYsRUFBR2tjLFVBQzVFL08sdUJBQXNCLFdBQ2xCckksRUFBTXJDLFFBQVE0QyxTQUFTMFosR0FDbkJqYSxFQUFNckMsUUFBUTBGLGdCQUNkckQsRUFBTXJDLFFBQVE0QyxTQUFTMlosR0FFdkJsYSxFQUFNdU8sdUJBS3RCNEosRUFBb0I5YixVQUFVRyxRQUFVLFdBQ3BDLElBQUl3RCxFQUFRbkUsS0FDWixHQUFJQSxLQUFLa2Usc0JBQXVCLENBQ3hCbGUsS0FBS3djLGtCQUNMbFgsYUFBYXRGLEtBQUt3YyxpQkFDbEJ4YyxLQUFLd2MsZ0JBQWtCLEVBQ3ZCeGMsS0FBSzhCLFFBQVFrRCxZQUFZc1gsRUFBb0JsYSxXQUFXaVosZ0JBRXhEcmIsS0FBS3ljLDZCQUNMblgsYUFBYXRGLEtBQUt5Yyw0QkFDbEJ6YyxLQUFLeWMsMkJBQTZCLEVBQ2xDemMsS0FBSzhCLFFBQVFrRCxZQUFZc1gsRUFBb0JsYSxXQUFXa1osa0JBRTVELElBQUlqYyxFQUFLaWQsRUFBb0JsYSxXQUFZa2MsRUFBU2pmLEVBQUc4RCxLQUFNb2IsRUFBY2xmLEVBQUdrYyxVQUM1RS9PLHVCQUFzQixXQUNsQnJJLEVBQU1yQyxRQUFRa0QsWUFBWXNaLEdBQzFCbmEsRUFBTXJDLFFBQVFrRCxZQUFZdVosR0FDMUJwYSxFQUFNcWEsbUJBR2R4ZSxLQUFLeWUseUJBQ0x6ZSxLQUFLMGUsa0NBS1RwQyxFQUFvQjliLFVBQVV1WCxTQUFXLFNBQVV6VyxHQUMvQ3RCLEtBQUt3ZCxhQUFhbGMsSUFFdEJnYixFQUFvQjliLFVBQVV3WCxXQUFhLFdBQ3ZDaFksS0FBSzBkLGtCQUVUcEIsRUFBb0I5YixVQUFVdVAsT0FBUyxXQUNuQyxJQUFJNUwsRUFBUW5FLEtBQ1JBLEtBQUs2YyxhQUNMalEscUJBQXFCNU0sS0FBSzZjLGFBRTlCN2MsS0FBSzZjLFlBQWNyUSx1QkFBc0IsV0FDckNySSxFQUFNdU8saUJBQ052TyxFQUFNMFksWUFBYyxNQUc1QlAsRUFBb0I5YixVQUFVMGEsYUFBZSxTQUFVbEIsR0FDbkQsSUFBSXVCLEVBQVllLEVBQW9CbGEsV0FBV21aLFVBQzNDdkIsRUFDQWhhLEtBQUs4QixRQUFRNEMsU0FBUzZXLEdBR3RCdmIsS0FBSzhCLFFBQVFrRCxZQUFZdVcsSUFHakNlLEVBQW9COWIsVUFBVW9kLFlBQWMsV0FDeEMsSUFBSXpaLEVBQVFuRSxLQUNad00sdUJBQXNCLFdBQWMsT0FBT3JJLEVBQU1yQyxRQUFRNEMsU0FBUzRYLEVBQW9CbGEsV0FBV2daLGdCQUVyR2tCLEVBQW9COWIsVUFBVXNkLFdBQWEsV0FDdkMsSUFBSTNaLEVBQVFuRSxLQUNad00sdUJBQXNCLFdBQWMsT0FBT3JJLEVBQU1yQyxRQUFRa0QsWUFBWXNYLEVBQW9CbGEsV0FBV2daLGdCQVF4R2tCLEVBQW9COWIsVUFBVTBkLG9CQUFzQixXQUNoRCxPQUFPbGUsS0FBSzhCLFFBQVFxWSwwQkFFeEJtQyxFQUFvQjliLFVBQVUyYyx1QkFBeUIsV0FDbkQsTUFBTyxDQUNId0IscUJBQWlCeGUsRUFDakJ5ZSxzQkFBc0IsRUFDdEJDLGFBQWEsRUFDYkMsZ0JBQWdCLEVBQ2hCQyx1QkFBdUIsRUFDdkJDLHNCQUFzQixJQU05QjFDLEVBQW9COWIsVUFBVTJkLHFCQUF1QixTQUFVRCxHQUMzRCxJQUFJeFcsRUFBS3JJLEVBQ1QsR0FBSTZlLEVBQXFCLENBQ3JCLElBQ0ksSUFBSyxJQUFJZSxHQUEyQixRQUFTOUMsR0FBeUIrQyxFQUE2QkQsRUFBeUJ6VyxRQUFTMFcsRUFBMkJ6VyxLQUFNeVcsRUFBNkJELEVBQXlCelcsT0FBUSxDQUNoTyxJQUFJM0gsRUFBVXFlLEVBQTJCMVksTUFDekN4RyxLQUFLOEIsUUFBUTJGLDJCQUEyQjVHLEVBQVNiLEtBQUtzZCxrQkFHOUQsTUFBTzNVLEdBQVNqQixFQUFNLENBQUVrQixNQUFPRCxHQUMvQixRQUNJLElBQ1F1VyxJQUErQkEsRUFBMkJ6VyxPQUFTcEosRUFBSzRmLEVBQXlCcFcsU0FBU3hKLEVBQUcrRSxLQUFLNmEsR0FFMUgsUUFBVSxHQUFJdlgsRUFBSyxNQUFNQSxFQUFJa0IsT0FFN0I1SSxLQUFLOEIsUUFBUTBGLGVBQ2J4SCxLQUFLOEIsUUFBUWlaLHNCQUFzQi9hLEtBQUsrZCxlQUdoRC9kLEtBQUs4QixRQUFRMkYsMkJBQTJCLFFBQVN6SCxLQUFLMmQsY0FDdEQzZCxLQUFLOEIsUUFBUTJGLDJCQUEyQixPQUFRekgsS0FBSzZkLGNBRXpEdkIsRUFBb0I5YixVQUFVMmUsNkJBQStCLFNBQVU3ZCxHQUNuRSxJQUFJd0gsRUFBS3pKLEVBQ1QsR0FBaUIsWUFBYmlDLEVBQUk4ZCxLQUNKcGYsS0FBSzhCLFFBQVEyRiwyQkFBMkIsUUFBU3pILEtBQUt5ZCx3QkFHdEQsSUFDSSxJQUFLLElBQUk0QixHQUFxQyxRQUFTakQsR0FBbUNrRCxFQUF1Q0QsRUFBbUM3VyxRQUFTOFcsRUFBcUM3VyxLQUFNNlcsRUFBdUNELEVBQW1DN1csT0FBUSxDQUN0UyxJQUFJM0gsRUFBVXllLEVBQXFDOVksTUFDbkR4RyxLQUFLOEIsUUFBUWdaLG1DQUFtQ2phLEVBQVNiLEtBQUt5ZCxvQkFHdEUsTUFBT3hVLEdBQVNILEVBQU0sQ0FBRUYsTUFBT0ssR0FDL0IsUUFDSSxJQUNRcVcsSUFBeUNBLEVBQXFDN1csT0FBU3BKLEVBQUtnZ0IsRUFBbUN4VyxTQUFTeEosRUFBRytFLEtBQUtpYixHQUV4SixRQUFVLEdBQUl2VyxFQUFLLE1BQU1BLEVBQUlGLFNBSXpDMFQsRUFBb0I5YixVQUFVaWUsdUJBQXlCLFdBQ25ELElBQUljLEVBQUtsZ0IsRUFDVCxJQUNJLElBQUssSUFBSW1nQixHQUEyQixRQUFTckQsR0FBeUJzRCxFQUE2QkQsRUFBeUJoWCxRQUFTaVgsRUFBMkJoWCxLQUFNZ1gsRUFBNkJELEVBQXlCaFgsT0FBUSxDQUNoTyxJQUFJM0gsRUFBVTRlLEVBQTJCalosTUFDekN4RyxLQUFLOEIsUUFBUXdGLDZCQUE2QnpHLEVBQVNiLEtBQUtzZCxrQkFHaEUsTUFBT29DLEdBQVNILEVBQU0sQ0FBRTNXLE1BQU84VyxHQUMvQixRQUNJLElBQ1FELElBQStCQSxFQUEyQmhYLE9BQVNwSixFQUFLbWdCLEVBQXlCM1csU0FBU3hKLEVBQUcrRSxLQUFLb2IsR0FFMUgsUUFBVSxHQUFJRCxFQUFLLE1BQU1BLEVBQUkzVyxPQUVqQzVJLEtBQUs4QixRQUFRd0YsNkJBQTZCLFFBQVN0SCxLQUFLMmQsY0FDeEQzZCxLQUFLOEIsUUFBUXdGLDZCQUE2QixPQUFRdEgsS0FBSzZkLGFBQ25EN2QsS0FBSzhCLFFBQVEwRixlQUNieEgsS0FBSzhCLFFBQVF5WSx3QkFBd0J2YSxLQUFLK2QsZ0JBR2xEekIsRUFBb0I5YixVQUFVa2UsK0JBQWlDLFdBQzNELElBQUlpQixFQUFLdGdCLEVBQ1RXLEtBQUs4QixRQUFRd0YsNkJBQTZCLFFBQVN0SCxLQUFLeWQsbUJBQ3hELElBQ0ksSUFBSyxJQUFJbUMsR0FBcUMsUUFBU3hELEdBQW1DeUQsRUFBdUNELEVBQW1DcFgsUUFBU3FYLEVBQXFDcFgsS0FBTW9YLEVBQXVDRCxFQUFtQ3BYLE9BQVEsQ0FDdFMsSUFBSTNILEVBQVVnZixFQUFxQ3JaLE1BQ25EeEcsS0FBSzhCLFFBQVF3WSxxQ0FBcUN6WixFQUFTYixLQUFLeWQsb0JBR3hFLE1BQU9xQyxHQUFTSCxFQUFNLENBQUUvVyxNQUFPa1gsR0FDL0IsUUFDSSxJQUNRRCxJQUF5Q0EsRUFBcUNwWCxPQUFTcEosRUFBS3VnQixFQUFtQy9XLFNBQVN4SixFQUFHK0UsS0FBS3diLEdBRXhKLFFBQVUsR0FBSUQsRUFBSyxNQUFNQSxFQUFJL1csU0FHckMwVCxFQUFvQjliLFVBQVVnZSxjQUFnQixXQUMxQyxJQUFJcmEsRUFBUW5FLEtBQ1IrZixFQUFnQnpELEVBQW9CaFosUUFDN0J2QixPQUFPaWUsS0FBS0QsR0FDbEIzVixTQUFRLFNBQVVnQyxHQUNTLElBQXhCQSxFQUFJakIsUUFBUSxTQUNaaEgsRUFBTXJDLFFBQVFrWixrQkFBa0IrRSxFQUFjM1QsR0FBTSxVQUloRWtRLEVBQW9COWIsVUFBVWdkLGFBQWUsU0FBVWxjLEdBQ25ELElBQUk2QyxFQUFRbkUsS0FDWixJQUFJQSxLQUFLOEIsUUFBUStZLG9CQUFqQixDQUdBLElBQUlxQyxFQUFrQmxkLEtBQUtrZCxnQkFDM0IsSUFBSUEsRUFBZ0IyQixZQUFwQixDQUlBLElBQUlvQixFQUEwQmpnQixLQUFLaWdCLHdCQUNYQSxRQUFtQzlmLElBQVJtQixHQUFxQjJlLEVBQXdCYixPQUFTOWQsRUFBSThkLE9BSTdHbEMsRUFBZ0IyQixhQUFjLEVBQzlCM0IsRUFBZ0I0QixvQkFBeUIzZSxJQUFSbUIsRUFDakM0YixFQUFnQnlCLGdCQUFrQnJkLEVBQ2xDNGIsRUFBZ0I2Qix1QkFBd0I3QixFQUFnQjRCLHFCQUFpQzNlLElBQVJtQixJQUFtQyxjQUFiQSxFQUFJOGQsTUFBcUMsZUFBYjlkLEVBQUk4ZCxNQUFzQyxnQkFBYjlkLEVBQUk4ZCxXQUNwSWpmLElBQVJtQixHQUNwQithLEVBQWlCdGMsT0FBUyxHQUMxQnNjLEVBQWlCNkQsTUFBSyxTQUFVdE4sR0FBVSxPQUFPek8sRUFBTXJDLFFBQVF1WSxvQkFBb0J6SCxNQUduRjVTLEtBQUttZ0IsNkJBR0doZ0IsSUFBUm1CLElBQ0ErYSxFQUFpQnBQLEtBQUszTCxFQUFJc1IsUUFDMUI1UyxLQUFLbWYsNkJBQTZCN2QsSUFFdEM0YixFQUFnQjhCLHFCQUF1QmhmLEtBQUtvZ0IsdUJBQXVCOWUsR0FDL0Q0YixFQUFnQjhCLHNCQUNoQmhmLEtBQUtxZ0Isb0JBRVQ3VCx1QkFBc0IsV0FFbEI2UCxFQUFtQixHQUNkYSxFQUFnQjhCLDJCQUNON2UsSUFBUm1CLEdBQ2EsTUFBWkEsRUFBSThLLEtBQStCLEtBQWhCOUssRUFBSXlSLFVBTzNCbUssRUFBZ0I4QixxQkFBdUI3YSxFQUFNaWMsdUJBQXVCOWUsR0FDaEU0YixFQUFnQjhCLHNCQUNoQjdhLEVBQU1rYyxxQkFHVG5ELEVBQWdCOEIsdUJBRWpCN2EsRUFBTStZLGdCQUFrQi9ZLEVBQU1nWixrQ0FJMUNiLEVBQW9COWIsVUFBVTRmLHVCQUF5QixTQUFVOWUsR0FDN0QsWUFBZ0JuQixJQUFSbUIsR0FBa0MsWUFBYkEsRUFBSThkLE1BQzdCcGYsS0FBSzhCLFFBQVF5RixtQkFHckIrVSxFQUFvQjliLFVBQVU2ZixrQkFBb0IsV0FDOUMsSUFBSWxjLEVBQVFuRSxLQUNSWCxFQUFLaWQsRUFBb0JoWixRQUFTcVksRUFBeUJ0YyxFQUFHc2MsdUJBQXdCRCxFQUF1QnJjLEVBQUdxYyxxQkFDaEgxSCxFQUFLc0ksRUFBb0JsYSxXQUFZa1osRUFBa0J0SCxFQUFHc0gsZ0JBQWlCRCxFQUFnQnJILEVBQUdxSCxjQUM5RlMsRUFBMEJRLEVBQW9CdlksUUFBUStYLHdCQUMxRDliLEtBQUswUyxpQkFDTCxJQUFJNE4sRUFBaUIsR0FDakJDLEVBQWUsR0FDbkIsSUFBS3ZnQixLQUFLOEIsUUFBUTBGLGNBQWUsQ0FDN0IsSUFBSXlNLEVBQUtqVSxLQUFLd2dCLDhCQUErQkMsRUFBYXhNLEVBQUd3TSxXQUFZQyxFQUFXek0sRUFBR3lNLFNBQ3ZGSixFQUFpQkcsRUFBV2hHLEVBQUksT0FBU2dHLEVBQVc5RixFQUFJLEtBQ3hENEYsRUFBZUcsRUFBU2pHLEVBQUksT0FBU2lHLEVBQVMvRixFQUFJLEtBRXREM2EsS0FBSzhCLFFBQVFrWixrQkFBa0JXLEVBQXdCMkUsR0FDdkR0Z0IsS0FBSzhCLFFBQVFrWixrQkFBa0JVLEVBQXNCNkUsR0FFckRqYixhQUFhdEYsS0FBS3djLGlCQUNsQmxYLGFBQWF0RixLQUFLeWMsNEJBQ2xCemMsS0FBSzJnQiw2QkFDTDNnQixLQUFLOEIsUUFBUWtELFlBQVlzVyxHQUV6QnRiLEtBQUs4QixRQUFRc1ksc0JBQ2JwYSxLQUFLOEIsUUFBUTRDLFNBQVMyVyxHQUN0QnJiLEtBQUt3YyxnQkFBa0I5VyxZQUFXLFdBQzlCdkIsRUFBTWlaLDRCQUNQdEIsSUFFUFEsRUFBb0I5YixVQUFVZ2dCLDRCQUE4QixXQUN4RCxJQUNJQyxFQURBcGhCLEVBQUtXLEtBQUtrZCxnQkFBaUJ5QixFQUFrQnRmLEVBQUdzZixnQkFvQnBELE1BQU8sQ0FBRThCLFdBUlRBLEVBQWEsQ0FDVGhHLEdBVkFnRyxFQUh5RnBoQixFQUFHMGYsdUJBRy9FLE9BQXlCSixFQUFpQjNlLEtBQUs4QixRQUFRMFksc0JBQXVCeGEsS0FBSzhCLFFBQVFzWSx1QkFHM0YsQ0FDVEssRUFBR3phLEtBQUt5TSxNQUFNaEIsTUFBUSxFQUN0QmtQLEVBQUczYSxLQUFLeU0sTUFBTWtRLE9BQVMsSUFLYmxDLEVBQUt6YSxLQUFLNGMsWUFBYyxFQUN0Q2pDLEVBQUc4RixFQUFXOUYsRUFBSzNhLEtBQUs0YyxZQUFjLEdBTVQ4RCxTQUpsQixDQUNYakcsRUFBSXphLEtBQUt5TSxNQUFNaEIsTUFBUSxFQUFNekwsS0FBSzRjLFlBQWMsRUFDaERqQyxFQUFJM2EsS0FBS3lNLE1BQU1rUSxPQUFTLEVBQU0zYyxLQUFLNGMsWUFBYyxLQUl6RE4sRUFBb0I5YixVQUFVNmMsOEJBQWdDLFdBQzFELElBQUlsWixFQUFRbkUsS0FHUnNiLEVBQWtCZ0IsRUFBb0JsYSxXQUFXa1osZ0JBQ2pEamMsRUFBS1csS0FBS2tkLGdCQUFpQjBCLEVBQXVCdmYsRUFBR3VmLHFCQUFzQkMsRUFBY3hmLEVBQUd3ZixhQUN2RUQsSUFBeUJDLElBQ3hCN2UsS0FBS3VjLDhCQUMzQnZjLEtBQUsyZ0IsNkJBQ0wzZ0IsS0FBSzhCLFFBQVE0QyxTQUFTNFcsR0FDdEJ0YixLQUFLeWMsMkJBQTZCL1csWUFBVyxXQUN6Q3ZCLEVBQU1yQyxRQUFRa0QsWUFBWXNXLEtBQzNCdlgsRUFBUWdZLHNCQUduQk8sRUFBb0I5YixVQUFVbWdCLDJCQUE2QixXQUN2RCxJQUFJdEYsRUFBZ0JpQixFQUFvQmxhLFdBQVdpWixjQUNuRHJiLEtBQUs4QixRQUFRa0QsWUFBWXFXLEdBQ3pCcmIsS0FBS3VjLDZCQUE4QixFQUNuQ3ZjLEtBQUs4QixRQUFRc1ksdUJBRWpCa0MsRUFBb0I5YixVQUFVMmYscUJBQXVCLFdBQ2pELElBQUloYyxFQUFRbkUsS0FDWkEsS0FBS2lnQix3QkFBMEJqZ0IsS0FBS2tkLGdCQUFnQnlCLGdCQUNwRDNlLEtBQUtrZCxnQkFBa0JsZCxLQUFLbWQseUJBRzVCelgsWUFBVyxXQUFjLE9BQU92QixFQUFNOGIsNkJBQTBCOWYsSUFBY21jLEVBQW9CdlksUUFBUW1ZLGVBRTlHSSxFQUFvQjliLFVBQVVrZCxlQUFpQixXQUMzQyxJQUFJdlosRUFBUW5FLEtBQ1JrZCxFQUFrQmxkLEtBQUtrZCxnQkFFM0IsR0FBS0EsRUFBZ0IyQixZQUFyQixDQUdBLElBQUl4VyxHQUFRLFFBQVMsR0FBSTZVLEdBQ3JCQSxFQUFnQjRCLGdCQUNoQnRTLHVCQUFzQixXQUNsQnJJLEVBQU15YyxvQkFBb0J2WSxNQUU5QnJJLEtBQUttZ0IseUJBR0xuZ0IsS0FBSzBlLGlDQUNMbFMsdUJBQXNCLFdBQ2xCckksRUFBTStZLGdCQUFnQjBCLHNCQUF1QixFQUM3Q3phLEVBQU15YyxvQkFBb0J2WSxHQUMxQmxFLEVBQU1nYyw2QkFJbEI3RCxFQUFvQjliLFVBQVVvZ0Isb0JBQXNCLFNBQVV2aEIsR0FDMUQsSUFBSTBmLEVBQXdCMWYsRUFBRzBmLHNCQUF1QkMsRUFBdUIzZixFQUFHMmYsc0JBQzVFRCxHQUF5QkMsSUFDekJoZixLQUFLcWQsaUNBR2JmLEVBQW9COWIsVUFBVWtTLGVBQWlCLFdBRTNDMVMsS0FBS3lNLE1BQVF6TSxLQUFLOEIsUUFBUXNZLHNCQUMxQixJQUFJeUcsRUFBUzVWLEtBQUtDLElBQUlsTCxLQUFLeU0sTUFBTWtRLE9BQVEzYyxLQUFLeU0sTUFBTWhCLE9BV3BEekwsS0FBSzhjLFVBQVk5YyxLQUFLOEIsUUFBUTBGLGNBQWdCcVosRUFIekI1VixLQUFLNlYsS0FBSzdWLEtBQUs4VixJQVZ4Qi9nQixLQVVrQ3lNLE1BQU1oQixNQUFPLEdBQUtSLEtBQUs4VixJQVZ6RC9nQixLQVVtRXlNLE1BQU1rUSxPQUFRLElBQ3JFTCxFQUFvQnZZLFFBQVFrWSxRQUlwRCxJQUFJVyxFQUFjM1IsS0FBSytWLE1BQU1ILEVBQVN2RSxFQUFvQnZZLFFBQVFpWSxzQkFFOURoYyxLQUFLOEIsUUFBUTBGLGVBQWlCb1YsRUFBYyxHQUFNLEVBQ2xENWMsS0FBSzRjLFlBQWNBLEVBQWMsRUFHakM1YyxLQUFLNGMsWUFBY0EsRUFFdkI1YyxLQUFLMGMsUUFBVSxHQUFLMWMsS0FBSzhjLFVBQVk5YyxLQUFLNGMsWUFDMUM1YyxLQUFLaWhCLHVCQUVUM0UsRUFBb0I5YixVQUFVeWdCLG9CQUFzQixXQUNoRCxJQUFJNWhCLEVBQUtpZCxFQUFvQmhaLFFBQVNtWSxFQUFjcGMsRUFBR29jLFlBQWFHLEVBQVd2YyxFQUFHdWMsU0FBVUMsRUFBVXhjLEVBQUd3YyxRQUFTTCxFQUFlbmMsRUFBR21jLGFBQ3BJeGIsS0FBSzhCLFFBQVFrWixrQkFBa0JTLEVBQWF6YixLQUFLNGMsWUFBYyxNQUMvRDVjLEtBQUs4QixRQUFRa1osa0JBQWtCUSxFQUFjeGIsS0FBSzBjLFNBQzlDMWMsS0FBSzhCLFFBQVEwRixnQkFDYnhILEtBQUsrYyxnQkFBa0IsQ0FDbkJDLEtBQU0vUixLQUFLaVcsTUFBT2xoQixLQUFLeU0sTUFBTWhCLE1BQVEsRUFBTXpMLEtBQUs0YyxZQUFjLEdBQzlESyxJQUFLaFMsS0FBS2lXLE1BQU9saEIsS0FBS3lNLE1BQU1rUSxPQUFTLEVBQU0zYyxLQUFLNGMsWUFBYyxJQUVsRTVjLEtBQUs4QixRQUFRa1osa0JBQWtCWSxFQUFVNWIsS0FBSytjLGdCQUFnQkMsS0FBTyxNQUNyRWhkLEtBQUs4QixRQUFRa1osa0JBQWtCYSxFQUFTN2IsS0FBSytjLGdCQUFnQkUsSUFBTSxRQUdwRVgsRUFoZTZCLENBaWV0QyxpR0NqZ0JGLElBQUk2RSxFQUNHLFNBQVNDLEVBQXFCcmlCLEVBQVdzaUIsUUFDdkIsSUFBakJBLElBQTJCQSxHQUFlLEdBQzlDLElBQ0lDLEVBREFDLEVBQU14aUIsRUFBVXdpQixJQUVwQixHQUFxQyxrQkFBMUJKLElBQXdDRSxFQUMvQyxPQUFPRixFQUdYLElBRDhCSSxHQUErQixtQkFBakJBLEVBQUlDLFNBRTVDLE9BQU8sRUFFWCxJQUFJQyxFQUE0QkYsRUFBSUMsU0FBUyxhQUFjLE9BR3ZERSxFQUFxQ0gsRUFBSUMsU0FBUyxzQkFDbERELEVBQUlDLFNBQVMsUUFBUyxhQU0xQixPQUxBRixFQUNJRyxHQUE2QkMsRUFDNUJMLElBQ0RGLEVBQXdCRyxHQUVyQkEsRUFFSixTQUFTSyxFQUF5QnJnQixFQUFLc2dCLEVBQVlDLEdBQ3RELElBQUt2Z0IsRUFDRCxNQUFPLENBQUVtWixFQUFHLEVBQUdFLEVBQUcsR0FFdEIsSUFHSW1ILEVBQ0FDLEVBSkF0SCxFQUFJbUgsRUFBV25ILEVBQUdFLEVBQUlpSCxFQUFXakgsRUFDakNxSCxFQUFZdkgsRUFBSW9ILEVBQVc3RSxLQUMzQmlGLEVBQVl0SCxFQUFJa0gsRUFBVzVFLElBSS9CLEdBQWlCLGVBQWIzYixFQUFJOGQsS0FBdUIsQ0FDM0IsSUFBSThDLEVBQWE1Z0IsRUFDakJ3Z0IsRUFBY0ksRUFBV0MsZUFBZSxHQUFHQyxNQUFRSixFQUNuREQsRUFBY0csRUFBV0MsZUFBZSxHQUFHRSxNQUFRSixNQUVsRCxDQUNELElBQUlLLEVBQWFoaEIsRUFDakJ3Z0IsRUFBY1EsRUFBV0YsTUFBUUosRUFDakNELEVBQWNPLEVBQVdELE1BQVFKLEVBRXJDLE1BQU8sQ0FBRXhILEVBQUdxSCxFQUFhbkgsRUFBR29ILGdGQ3dCNUJRLEVBY0FDLHlDQWhFQXBnQixFQUFhLENBQ2JxZ0IsT0FBUSwyQkFDUkMsaUJBQWtCLHFDQUNsQkMsZUFBZ0IsbUNBQ2hCQyxNQUFPLDBCQUNQQyxjQUFlLGtDQUNmMVYsS0FBTSx5QkFDTmhLLEtBQU0sb0JBR05HLEVBQVUsQ0FDVjRLLGFBQWMsd0JBQ2RFLGNBQWUseUJBQ2ZLLGFBQWMsd0JBQ2RxVSxtQkFBb0IsQ0FDaEIsd0JBQ0EscUNBQ0EsdUJBQ0Esd0JBQ0EsMEJBQ0EsK0RBQ0ZqVSxLQUFLLE9BR1A5SyxFQUFVLENBRVZnZix5QkFBMEIsSUFFMUJDLDBCQUEyQixHQUszQkMsZUFBZ0IsR0FLaEJDLG1DQUFvQyxJQU9wQ0Msb0JBQXFCLEtBTXpCLFNBQVdaLEdBQ1BBLEVBQVVBLEVBQWtCLE9BQUksR0FBSyxTQUNyQ0EsRUFBVUEsRUFBa0IsT0FBSSxHQUFLLFNBQ3JDQSxFQUFVQSxFQUFpQixNQUFJLEdBQUssUUFDcENBLEVBQVVBLEVBQW9CLFNBQUksR0FBSyxXQUozQyxDQUtHQSxJQUFjQSxFQUFZLEtBUzdCLFNBQVdDLEdBQ1BBLEVBQU9BLEVBQWlCLFNBQUksR0FBSyxXQUNqQ0EsRUFBT0EsRUFBa0IsVUFBSSxHQUFLLFlBQ2xDQSxFQUFPQSxFQUFvQixZQUFJLEdBQUssY0FDcENBLEVBQU9BLEVBQXFCLGFBQUksR0FBSyxlQUNyQ0EsRUFBT0EsRUFBa0IsVUFBSSxHQUFLLFlBQ2xDQSxFQUFPQSxFQUFnQixRQUFJLElBQU0sVUFDakNBLEVBQU9BLEVBQXFCLGFBQUksR0FBSyxlQUNyQ0EsRUFBT0EsRUFBbUIsV0FBSSxJQUFNLGFBUnhDLENBU0dBLElBQVdBLEVBQVMsU0MxRW5CbmpCLEVBQUkyVSxZQUNKLEVBQWEsQ0FDYm9QLDBCQUEyQiwyQkFDM0JDLGdCQUFpQixnQkFDakJDLHlCQUEwQiwwQkFDMUJDLHlCQUEwQiwwQkFDMUJDLHFCQUFzQixzQkFDdEJDLDZCQUE4Qiw4QkFDOUJ0Z0IsS0FBTSxZQUVOdWdCLElBQXlCcmtCLEVBQUssSUFDM0IsR0FBSyxFQUFXK2pCLDJCQUE2QiwyQkFDaEQvakIsRUFBRyxHQUFLLEVBQVdna0IsaUJBQW1CLGdCQUN0Q2hrQixFQUFHLEdBQUssRUFBV2lrQiwwQkFBNEIsMEJBQy9DamtCLEVBQUcsR0FBSyxFQUFXa2tCLDBCQUE0QiwwQkFDL0Nsa0IsRUFBRyxHQUFLLEVBQVdva0IsOEJBQWdDLDhCQUNuRHBrQixFQUFHLEdBQUssRUFBVzhELE1BQVEsV0FDM0I5RCxHQUNBc2tCLElBQTBCM1AsRUFBSyxJQUM1QixHQUFLLEVBQVdvUCwyQkFBNkIsc0NBQ2hEcFAsRUFBRyxHQUFLLEVBQVdxUCxpQkFBbUIsMkJBQ3RDclAsRUFBRyxHQUFLLEVBQVdzUCwwQkFBNEIscUNBQy9DdFAsRUFBRyxHQUFLLEVBQVd1UCwwQkFBNEIscUNBQy9DdlAsRUFBRyxHQUFLLEVBQVd3UCxzQkFBd0IsaUNBQzNDeFAsRUFBRyxHQUFLLEVBQVd5UCw4QkFBZ0MseUNBQ25EelAsRUFBRyxHQUFLLEVBQVc3USxNQUFRLHNCQUMzQjZRLEdBQ0EsRUFBVSxDQUNWNFAsYUFBYyxpQkFDZEMsYUFBYyxlQUNkQywrQkFBZ0MseUNBQ2hDQyw0QkFBNkIsc0NBQzdCQyxhQUFjLGVBQ2RDLGNBQWUsZ0JBQ2ZDLGlCQUFrQixtQkFDbEJDLDRCQUE2QixhQUM3QkMsNEJBQTZCLG9CQUM3QkMsY0FBZSxnQkFDZkMsZ0NBQWlDLGtDQUNqQ0MsK0JBQWdDLGdDQUNoQ0Msd0JBQXlCLDhDQUN6QkMsa0JBQW1CLHlCQUNuQkMsa0NBQW1DLFVBQVksRUFBV3JCLGdCQUFrQixpQ0FBbUMsRUFBV0EsZ0JBQWtCLGFBQWVNLEVBQXVCLEVBQVdOLGlCQUFtQixpQ0FBbUNNLEVBQXVCLEVBQVdOLGlCQUFtQixTQUN4U3NCLG9CQUFxQix1QkFDckJDLHlCQUEwQixVQUFZLEVBQVd2QixnQkFBa0IsaUNBQW1DLEVBQVdBLGdCQUFrQixhQUFlLEVBQVdBLGdCQUFrQiw4Q0FBa0QsRUFBV0EsZ0JBQWtCLGlEQUFxRE0sRUFBdUIsRUFBV04saUJBQW1CLGlDQUFtQ00sRUFBdUIsRUFBV04saUJBQW1CLGFBQWVNLEVBQXVCLEVBQVdOLGlCQUFtQiw4Q0FBa0RNLEVBQXVCLEVBQVdOLGlCQUFtQiw2Q0FDM21Cd0IsZUFBZ0Isc0JBQ2hCQyx1QkFBd0IsaURBRXhCLEVBQVUsQ0FDVkMsYUFBYyxFQUNkQyxrQ0FBbUMsZUMvQzVCQyxFQUVJLFlBRkpBLEVBR0EsUUFIQUEsRUFJRyxXQUpIQSxFQUtFLFNBTEZBLEVBTUksV0FOSkEsRUFPRixNQVBFQSxFQVFELE9BUkNBLEVBU0ssWUFUTEEsRUFVRyxVQVZIQSxFQVdNLGFBWE5BLEVBWUssWUFaTEEsRUFhQyxTQWJEQSxFQWNDLFNBR1JDLEVBQWlCLElBQUl0USxJQUd6QnNRLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQUFJaWUsR0FDbkJDLEVBQWVsZSxJQWxCTixPQW1CVCxJQWdCSW1lLEVBQWlCLElBQUlqWixJQUd6QmlaLEVBQWU3ZSxJQWxCQSxFQWtCd0IyZSxHQUN2Q0UsRUFBZTdlLElBbEJKLEdBa0J3QjJlLEdBQ25DRSxFQUFlN2UsSUFsQkQsR0FrQndCMmUsR0FDdENFLEVBQWU3ZSxJQWxCRixHQWtCd0IyZSxHQUNyQ0UsRUFBZTdlLElBbEJBLEdBa0J3QjJlLEdBQ3ZDRSxFQUFlN2UsSUFsQk4sR0FrQndCMmUsR0FDakNFLEVBQWU3ZSxJQWxCTCxHQWtCd0IyZSxHQUNsQ0UsRUFBZTdlLElBbEJDLEdBa0J3QjJlLEdBQ3hDRSxFQUFlN2UsSUFsQkQsR0FrQndCMmUsR0FDdENFLEVBQWU3ZSxJQWxCRSxHQWtCd0IyZSxHQUN6Q0UsRUFBZTdlLElBbEJDLEdBa0J3QjJlLEdBQ3hDRSxFQUFlN2UsSUFsQkgsR0FrQndCMmUsR0FDcENFLEVBQWU3ZSxJQWxCSCxHQWtCd0IyZSxHQUNwQ0UsRUFBZTdlLElBbEJOLEVBakNBLE9Bb0RULElBQUk4ZSxFQUFpQixJQUFJeFEsSUFjbEIsU0FBU3lRLEVBQWEvakIsR0FDekIsSUFBSThLLEVBQU05SyxFQUFJOEssSUFFZCxPQUFJOFksRUFBZUksSUFBSWxaLEdBQ1pBLEVBR0srWSxFQUFlbGpCLElBQUlYLEVBQUl5UixVQXZGOUIsVUFxRWJxUyxFQUFlcGUsSUFBSWllLEdBQ25CRyxFQUFlcGUsSUFBSWllLEdBQ25CRyxFQUFlcGUsSUFBSWllLEdBQ25CRyxFQUFlcGUsSUFBSWllLEdBQ25CRyxFQUFlcGUsSUFBSWllLEdBQ25CRyxFQUFlcGUsSUFBSWllLEdBQ25CRyxFQUFlcGUsSUFBSWllLEdBQ25CRyxFQUFlcGUsSUFBSWllLEdDaEZuQixJQUFJTSxFQUEwQixDQUFDLFFBQVMsU0FBVSxXQUFZLFVBT25EQyxFQUFzQixTQUFVbGtCLEdBQ3ZDLElBQUlzUixFQUFTdFIsRUFBSXNSLE9BQ2pCLEdBQUtBLEVBQUwsQ0FHQSxJQUFJNlMsR0FBVyxHQUFLN1MsRUFBTzZTLFNBQVNDLGVBQ2MsSUFBOUNILEVBQXdCcGEsUUFBUXNhLElBQ2hDbmtCLEVBQUlxa0IsbUJDd0RMLFNBQVNDLEVBQVU3TCxFQUFNMVIsR0FDNUIsSUFNSXdkLEVBTkFDLEVBQVcvTCxFQUFLK0wsU0FBVUMsRUFBbUJoTSxFQUFLZ00saUJBQWtCQyxFQUF5QmpNLEVBQUtpTSx1QkFBd0JDLEVBQW1CbE0sRUFBS2tNLGlCQUFrQkMsRUFBWW5NLEVBQUttTSxVQUFXQyxFQUF3QnBNLEVBQUtvTSxzQkFnQmpPLE9BZkE3Z0IsYUFBYStDLEVBQU0rZCxvQkFDbkIvZCxFQUFNK2QsbUJBQXFCMWdCLFlBQVcsV0FDbEMyZ0IsRUFBWWhlLEtBQ2IscUNBQ0hBLEVBQU1pZSxnQkFBa0JqZSxFQUFNaWUsZ0JBQWtCUixHQVFqQyxLQUxYRCxFQURpQyxJQUFqQ3hkLEVBQU1pZSxnQkFBZ0J2bUIsT0FnQjlCLFNBQXdCaW1CLEVBQXdCQyxFQUFrQkUsRUFBdUI5ZCxHQUNyRixJQUFJa2UsRUFBWWxlLEVBQU1pZSxnQkFBZ0IsR0FDbENFLEVBQXlCUixFQUF1Qi9qQixJQUFJc2tCLEdBQ3hELElBQUtDLEVBQ0QsT0FBUSxFQUtaLEdBQUlELElBQWNsZSxFQUFNb2Usa0JBQ3BCRCxFQUF1Qm5lLEVBQU1xZSxtQkFBbUJiLFFBQzVDSSxFQUFrQixDQUN0QjVkLEVBQU1xZSxtQkFDRHJlLEVBQU1xZSxrQkFBb0IsR0FBS0YsRUFBdUJ6bUIsT0FDM0QsSUFBSTRtQixFQUFXSCxFQUF1Qm5lLEVBQU1xZSxtQkFBbUJiLE1BQy9ELElBQUtNLEVBQXNCUSxHQUN2QixPQUFPQSxFQU9mdGUsRUFBTW9lLGlCQUFtQkYsRUFDekIsSUFDSUssRUFEQUMsR0FBcUIsRUFHekIsSUFBS0QsRUFBaUIsRUFBR0EsRUFBaUJKLEVBQXVCem1CLE9BQVE2bUIsSUFDckUsSUFBS1QsRUFBc0JLLEVBQXVCSSxHQUFnQmYsT0FBUSxDQUN0RWdCLEVBQW9CRCxFQUNwQixNQU1SLEtBQU9BLEVBQWlCSixFQUF1QnptQixPQUFRNm1CLElBQ25ELEdBQUlKLEVBQXVCSSxHQUFnQmYsTUFBUUksSUFDOUNFLEVBQXNCSyxFQUF1QkksR0FBZ0JmLE9BQVEsQ0FDdEVnQixFQUFvQkQsRUFDcEIsTUFHUixPQUEyQixJQUF2QkMsR0FDQXhlLEVBQU1xZSxrQkFBb0JHLEVBQ25CTCxFQUF1Qm5lLEVBQU1xZSxtQkFBbUJiLFFBRW5ELEVBOURJaUIsQ0FBZWQsRUFBd0JDLEVBQWtCRSxFQUF1QjlkLEdBb0VoRyxTQUF1QjJkLEVBQXdCRyxFQUF1QjlkLEdBQ2xFLElBQUlrZSxFQUFZbGUsRUFBTWllLGdCQUFnQixHQUNsQ0UsRUFBeUJSLEVBQXVCL2pCLElBQUlza0IsR0FDeEQsSUFBS0MsRUFDRCxPQUFRLEVBR1osSUFBSU8sRUFBZVAsRUFBdUJuZSxFQUFNcWUsbUJBQ2hELEdBQWdFLElBQTVESyxFQUFhQyxLQUFLQyxZQUFZNWUsRUFBTWllLGdCQUFpQixLQUNwREgsRUFBc0JZLEVBQWFsQixPQUNwQyxPQUFPa0IsRUFBYWxCLE1BTXhCLElBRkEsSUFBSWUsR0FBa0J2ZSxFQUFNcWUsa0JBQW9CLEdBQUtGLEVBQXVCem1CLE9BQ3hFbW5CLEdBQXNCLEVBQ25CTixJQUFtQnZlLEVBQU1xZSxtQkFBbUIsQ0FDL0MsSUFBSVMsRUFBY1gsRUFBdUJJLEdBQ3JDN1EsRUFBcUUsSUFBM0RvUixFQUFZSCxLQUFLQyxZQUFZNWUsRUFBTWllLGdCQUFpQixHQUM5RGMsR0FBYWpCLEVBQXNCZ0IsRUFBWXRCLE9BQ25ELEdBQUk5UCxHQUFXcVIsRUFBVyxDQUN0QkYsRUFBcUJOLEVBQ3JCLE1BRUpBLEdBQWtCQSxFQUFpQixHQUFLSixFQUF1QnptQixPQUVuRSxPQUE0QixJQUF4Qm1uQixHQUNBN2UsRUFBTXFlLGtCQUFvQlEsRUFDbkJWLEVBQXVCbmUsRUFBTXFlLG1CQUFtQmIsUUFFbkQsRUEvRkl3QixDQUFjckIsRUFBd0JHLEVBQXVCOWQsS0FFcEQ2ZCxHQUNqQkgsRUFBaUJGLEdBRWRBLEVBaUdKLFNBQVN5QixFQUFtQmpmLEdBQy9CLE9BQU9BLEVBQU1pZSxnQkFBZ0J2bUIsT0FBUyxFQVFuQyxTQUFTc21CLEVBQVloZSxHQUN4QkEsRUFBTWllLGdCQUFrQixHQW1CckIsU0FBU3pULEVBQWNrSCxFQUFNMVIsR0FDaEMsSUFBSWtmLEVBQVF4TixFQUFLd04sTUFBT0MsRUFBbUJ6TixFQUFLeU4saUJBQWtCdkIsRUFBbUJsTSxFQUFLa00saUJBQWtCRixFQUFtQmhNLEVBQUtnTSxpQkFBa0JDLEVBQXlCak0sRUFBS2lNLHVCQUF3QkcsRUFBd0JwTSxFQUFLb00sc0JBQ3JPc0IsRUFBc0MsY0FBeEJwQyxFQUFha0MsR0FDM0JHLEVBQW9DLFlBQXhCckMsRUFBYWtDLEdBQ3pCSSxFQUF1QyxlQUF4QnRDLEVBQWFrQyxHQUM1QkssRUFBc0MsY0FBeEJ2QyxFQUFha0MsR0FDM0JNLEVBQWlDLFNBQXhCeEMsRUFBYWtDLEdBQ3RCTyxFQUFnQyxRQUF4QnpDLEVBQWFrQyxHQUNyQnpVLEVBQWtDLFVBQXhCdVMsRUFBYWtDLEdBQ3ZCUSxFQUFrQyxhQUF4QjFDLEVBQWFrQyxHQUMzQixPQUFJQSxFQUFNUyxTQUFXVCxFQUFNVSxTQUFXUixHQUFlQyxHQUNqREMsR0FBZ0JDLEdBQWVDLEdBQVVDLEdBQVNoVixHQUMxQyxFQUVVaVYsR0FBZ0MsSUFBckJSLEVBQU1uYixJQUFJck0sT0FhdENnb0IsR0FHRFAsR0FDQWhDLEVBQW9CK0IsR0FFRUMsR0FBb0JGLEVBQW1CamYsR0FXdER1ZCxFQVRhLENBQ2hCRyxpQkFBa0JBLEVBQ2xCRSxpQkFBa0JBLEVBQ2xCSCxTQUFVLElBQ1ZFLHVCQUF3QkEsRUFDeEJFLFdBQVcsRUFDWEMsc0JBQXVCQSxHQUdLOWQsSUFFNUIsSUFsQkksR0FaUm1kLEVBQW9CK0IsR0FTYjNCLEVBUmEsQ0FDaEJHLGlCQUFrQkEsRUFDbEJFLGlCQUFrQkEsRUFDbEJILFNBQVV5QixFQUFNbmIsSUFBSXNaLGNBQ3BCTSx1QkFBd0JBLEVBQ3hCRSxXQUFXLEVBQ1hDLHNCQUF1QkEsR0FFSzlkLElDck94QyxJQ01JNmYsRUROQUMsRUFBbUMsU0FBVWprQixHQUU3QyxTQUFTaWtCLEVBQWtCcm1CLEdBQ3ZCLElBQUlxQyxFQUFRRCxFQUFPRSxLQUFLcEUsTUFBTSxTQUFTLFFBQVMsR0FBSW1vQixFQUFrQjlqQixnQkFBaUJ2QyxLQUFhOUIsS0FlcEcsT0FkQW1FLEVBQU1pa0IsV0FBWSxFQUNsQmprQixFQUFNa2tCLFlBQWEsRUFDbkJsa0IsRUFBTW1rQix1QkFBd0IsRUFDOUJua0IsRUFBTW9rQixjQUFnQixjQUN0QnBrQixFQUFNOGhCLGlCQUFtQixjQUN6QjloQixFQUFNcWtCLG1CQUFvQixFQUMxQnJrQixFQUFNc2tCLGlCQUFrQixFQUN4QnRrQixFQUFNdWtCLHFCQUF1QixLQUM3QnZrQixFQUFNd2tCLGdCQUFpQixFQUN2QnhrQixFQUFNeWtCLGFBQWMsRUFDcEJ6a0IsRUFBTTBrQixjQUFlLEVBRXJCMWtCLEVBQU0ya0IsZURiRSxDQUNSMUMsbUJBQW9CLEVBQ3BCSyxpQkFBa0IsR0FDbEJDLGtCQUFtQixFQUNuQkosZ0JBQWlCLElDVWpCbmlCLEVBQU02aEIsdUJBQXlCLElBQUk5WixJQUM1Qi9ILEVBdW5CWCxPQXhvQkEsUUFBVWdrQixFQUFtQmprQixHQW1CN0JuQyxPQUFPQyxlQUFlbW1CLEVBQW1CLFVBQVcsQ0FDaERsbUIsSUFBSyxXQUNELE9BQU8sR0FFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlbW1CLEVBQW1CLGFBQWMsQ0FDbkRsbUIsSUFBSyxXQUNELE9BQU8sR0FFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlbW1CLEVBQW1CLFVBQVcsQ0FDaERsbUIsSUFBSyxXQUNELE9BQU8sR0FFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlbW1CLEVBQW1CLGlCQUFrQixDQUN2RGxtQixJQUFLLFdBQ0QsTUFBTyxDQUNIOG1CLHdCQUF5QixhQUN6QmhELGlCQUFrQixhQUNsQmlELDRCQUE2QixXQUFjLE9BQU8sTUFDbERDLHVCQUF3QixXQUFjLE9BQU8sR0FDN0NDLGlCQUFrQixXQUFjLE9BQU8sR0FDdkNDLG1CQUFvQixXQUFjLE9BQU8sR0FDekNDLGdCQUFpQixXQUFjLE9BQU8sR0FDdENDLHlCQUEwQixXQUFjLE9BQU8sR0FDL0NDLGtCQUFtQixXQUFjLE9BQU8sR0FDeENDLGNBQWUsV0FBYyxPQUFPLEdBQ3BDQyx3QkFBeUIsV0FBYyxPQUFPLEdBQzlDQyxhQUFjLGFBQ2RDLDJCQUE0QixhQUM1QkMsNEJBQTZCLGFBQzdCQyxpQ0FBa0MsYUFDbENDLCtCQUFnQyxhQUNoQ0Msc0JBQXVCLFdBQWMsTUFBTyxNQUdwRDVuQixZQUFZLEVBQ1pDLGNBQWMsSUFFbEJnbUIsRUFBa0IzbkIsVUFBVXVQLE9BQVMsV0FDTyxJQUFwQy9QLEtBQUs4QixRQUFRb25CLHFCQUlibHBCLEtBQUs4QixRQUFRcW5CLG1CQUFtQixHQUNoQ25wQixLQUFLMm9CLGdCQUFpQixFQUVqQjNvQixLQUFLOEIsUUFBUXNuQixnQkFBZ0IsR0FDbENwcEIsS0FBSzRvQixhQUFjLEVBR25CNW9CLEtBQUsrcEIsaUNBRUwvcEIsS0FBSzZvQixlQUNMN29CLEtBQUtnbUIsdUJBQXlCaG1CLEtBQUtncUIsOEJBSTNDN0IsRUFBa0IzbkIsVUFBVXlwQixvQkFBc0IsV0FDOUMsT0FBT2pxQixLQUFLaW1CLGtCQUdoQmtDLEVBQWtCM25CLFVBQVUwcEIsYUFBZSxTQUFVMWpCLEdBQ2pEeEcsS0FBS29vQixVQUFZNWhCLEdBTXJCMmhCLEVBQWtCM25CLFVBQVUycEIsdUJBQXlCLFNBQVUzakIsR0FDM0R4RyxLQUFLcW9CLFdBQWE3aEIsR0FHdEIyaEIsRUFBa0IzbkIsVUFBVTRwQixtQkFBcUIsU0FBVTVqQixHQUN2RHhHLEtBQUtzb0Isc0JBQXdCOWhCLEVBQ3pCQSxJQUNBeEcsS0FBSytwQixpQ0FDTC9wQixLQUFLdW9CLGNBQWdCdm9CLEtBQUtxcUIsNEJBT2xDbEMsRUFBa0IzbkIsVUFBVXVwQiwrQkFBaUMsV0FDekQsSUFBSU8sRUFBb0J0cUIsS0FBS3FxQiwwQkFDekJDLElBQXNCLGdCQUVGdHFCLEtBQUs4QixRQUFRMG5CLHdCQUF3QmMsRUFBbUIsOEJBRTVFdHFCLEtBQUt1cUIsc0JBQXFCLEdBRTlCdnFCLEtBQUtzb0IsdUJBQXdCLEVBQzdCdG9CLEtBQUt1b0IsY0FBZ0IrQixJQUd6Qm5DLEVBQWtCM25CLFVBQVU2cEIsd0JBQTBCLFdBR2xELElBRkEsSUFBSTlCLEVBQWdCLGNBQ2hCaUMsRUFBaUJ4cUIsS0FBSzhCLFFBQVFvbkIsbUJBQ3pCdUIsRUFBSSxFQUFHQSxFQUFJRCxFQUFnQkMsSUFBSyxDQUNyQyxJQUFJQyxFQUFtQjFxQixLQUFLOEIsUUFBUTBuQix3QkFBd0JpQixFQUFHLDRCQUMzREUsRUFBb0IzcUIsS0FBSzhCLFFBQVEwbkIsd0JBQXdCaUIsRUFBRyw2QkFDaEUsR0FBTUMsR0FBb0JDLEVBQTFCLENBR0FwQyxFQUFnQmtDLEVBQ2hCLE9BRUosT0FBT2xDLEdBTVhKLEVBQWtCM25CLFVBQVVvcUIsZ0JBQWtCLFNBQVUvQixHQUNwRDdvQixLQUFLNm9CLGFBQWVBLEVBQ2hCQSxJQUNBN29CLEtBQUtnbUIsdUJBQXlCaG1CLEtBQUtncUIsNkJBTTNDN0IsRUFBa0IzbkIsVUFBVXFxQixzQkFBd0IsV0FDaEQsT0FBTzdxQixLQUFLNm9CLGNBQ1IsRUFBNkI3b0IsS0FBSzhvQixpQkFHMUNYLEVBQWtCM25CLFVBQVUrcEIscUJBQXVCLFNBQVVPLEdBQ3pEOXFCLEtBQUt3b0Isa0JBQW9Cc0MsR0FNN0IzQyxFQUFrQjNuQixVQUFVdXFCLHdCQUEwQixTQUFVQyxHQUM1RGhyQixLQUFLeW9CLGdCQUFrQnVDLEdBRTNCN0MsRUFBa0IzbkIsVUFBVXlxQixpQkFBbUIsV0FDM0MsT0FBT2pyQixLQUFLdW9CLGVBRWhCSixFQUFrQjNuQixVQUFVMHFCLGlCQUFtQixTQUFVckYsRUFBT3htQixHQUM1RCxJQUFrQzhyQixRQUFsQixJQUFQOXJCLEVBQWdCLEdBQUtBLEdBQXFCOHJCLFlBQzlDbnJCLEtBQUtvckIsYUFBYXZGLEtBR25CN2xCLEtBQUsyb0IsZUFDTDNvQixLQUFLcXJCLG1CQUFtQnhGLEdBRW5CN2xCLEtBQUs0b0IsWUFDVjVvQixLQUFLc3JCLGdCQUFnQnpGLEdBR3JCN2xCLEtBQUt1ckIsMEJBQTBCMUYsRUFBTyxDQUFFc0YsWUFBYUEsTUFNN0RoRCxFQUFrQjNuQixVQUFVZ3JCLGNBQWdCLFNBQVVDLEdBQzlDQSxHQUFpQixJQUNqQnpyQixLQUFLaW1CLGlCQUFtQndGLEVBQ3hCenJCLEtBQUs4QixRQUFRNm5CLDRCQUE0QjhCLEVBQWUsV0FBWSxLQUNwRXpyQixLQUFLOEIsUUFBUStuQiwrQkFBK0I0QixFQUFlLE9BTW5FdEQsRUFBa0IzbkIsVUFBVWtyQixlQUFpQixTQUFVRCxHQUNuRCxJQUFJdG5CLEVBQVFuRSxLQUNSeXJCLEdBQWlCLElBQ2pCenJCLEtBQUs4QixRQUFRNm5CLDRCQUE0QjhCLEVBQWUsV0FBWSxNQUNwRXpyQixLQUFLOEIsUUFBUStuQiwrQkFBK0I0QixFQUFlLE9BTS9EL2xCLFlBQVcsV0FDRnZCLEVBQU1yQyxRQUFRd25CLHFCQUNmbmxCLEVBQU13bkIsNENBRVgsSUFLUHhELEVBQWtCM25CLFVBQVVxUyxjQUFnQixTQUFVMFUsRUFBT3FFLEVBQWdCSCxHQUN6RSxJQUFJdG5CLEVBQVFuRSxLQUNSeW5CLEVBQXNDLGNBQXhCcEMsRUFBYWtDLEdBQzNCRyxFQUFvQyxZQUF4QnJDLEVBQWFrQyxHQUN6QkksRUFBdUMsZUFBeEJ0QyxFQUFha0MsR0FDNUJLLEVBQXNDLGNBQXhCdkMsRUFBYWtDLEdBQzNCTSxFQUFpQyxTQUF4QnhDLEVBQWFrQyxHQUN0Qk8sRUFBZ0MsUUFBeEJ6QyxFQUFha0MsR0FDckJ6VSxFQUFrQyxVQUF4QnVTLEVBQWFrQyxHQUN2QlEsRUFBa0MsYUFBeEIxQyxFQUFha0MsR0FHdkJzRSxFQUEwQixNQUFkdEUsRUFBTW5iLEtBQTZCLE1BQWRtYixFQUFNbmIsSUFDM0MsR0FBSXBNLEtBQUs4QixRQUFReW5CLGdCQUNUN0IsR0FBYUksR0FDYlAsRUFBTTVCLGlCQUNOM2xCLEtBQUs4ckIscUJBRUFsRSxHQUFlQyxLQUNwQk4sRUFBTTVCLGlCQUNOM2xCLEtBQUsrckIscUJBRUwvckIsS0FBSzZvQixjQWFMLEVBWndCLENBQ3BCdEIsTUFBT0EsRUFDUHhCLGlCQUFrQixTQUFVRixHQUN4QjFoQixFQUFNNGhCLGlCQUFpQkYsSUFFM0JJLGtCQUFtQixFQUNuQnVCLGlCQUFrQm9FLEVBQ2xCNUYsdUJBQXdCaG1CLEtBQUtnbUIsdUJBQzdCRyxzQkFBdUIsU0FBVU4sR0FDN0IsT0FBTzFoQixFQUFNckMsUUFBUTBuQix3QkFBd0IzRCxFQUFPLDhCQUdqQjdsQixLQUFLOG9CLG9CQXRCeEQsQ0EwQkEsSUFBSWtELEVBQWVoc0IsS0FBSzhCLFFBQVFtbkIseUJBQ2hDLE1BQXNCLElBQWxCK0MsSUFDQUEsRUFBZVAsR0FDSSxHQUZ2QixDQVFBLEdBQUt6ckIsS0FBS3FvQixZQUFjVCxJQUNsQjVuQixLQUFLcW9CLFlBQWNWLEVBQ3JCbkMsRUFBb0IrQixHQUNwQnZuQixLQUFLaXNCLGlCQUFpQkQsUUFFckIsR0FBS2hzQixLQUFLcW9CLFlBQWNYLElBQWdCMW5CLEtBQUtxb0IsWUFBY1osRUFDNURqQyxFQUFvQitCLEdBQ3BCdm5CLEtBQUtrc0IsaUJBQWlCRixRQUVyQixHQUFJbkUsRUFDTHJDLEVBQW9CK0IsR0FDcEJ2bkIsS0FBSytyQix5QkFFSixHQUFJakUsRUFDTHRDLEVBQW9CK0IsR0FDcEJ2bkIsS0FBSzhyQix3QkFFSixHQUFJRCxHQUFhdEUsRUFBTVMsU0FBV2hvQixLQUFLMm9CLGVBQ3hDcEIsRUFBTTVCLGlCQUNOM2xCLEtBQUttc0IsVUFBVW5zQixLQUFLdW9CLGdCQUFrQixjQUNsQyxHQUNBdm9CLEtBQUt1b0Isb0JBRVIsSUFBSXpWLEdBQVdpVixJQUNaNkQsRUFBZ0IsQ0FHaEIsSUFBSWhaLEVBQVMyVSxFQUFNM1UsT0FDbkIsR0FBSUEsR0FBNkIsTUFBbkJBLEVBQU82UyxTQUFtQjNTLEVBQ3BDLE9BR0osR0FEQTBTLEVBQW9CK0IsR0FDaEJ2bkIsS0FBSzhCLFFBQVEwbkIsd0JBQXdCd0MsRUFBYyw0QkFDbkQsT0FFQ2hzQixLQUFLNnFCLDBCQUNGN3FCLEtBQUtvc0Isb0JBQ0xwc0IsS0FBS3FzQix5QkFBeUJMLEdBRWxDaHNCLEtBQUs4QixRQUFRMm5CLGFBQWF1QyxJQUlsQ2hzQixLQUFLNm9CLGNBV0wsRUFWd0IsQ0FDcEJ0QixNQUFPQSxFQUNQeEIsaUJBQWtCLFNBQVVGLEdBQ3hCMWhCLEVBQU00aEIsaUJBQWlCRixJQUUzQkksaUJBQWtCam1CLEtBQUtpbUIsaUJBQ3ZCdUIsaUJBQWtCb0UsRUFDbEI1Rix1QkFBd0JobUIsS0FBS2dtQix1QkFDN0JHLHNCQUF1QixTQUFVTixHQUFTLE9BQU8xaEIsRUFBTXJDLFFBQVEwbkIsd0JBQXdCM0QsRUFBTyw4QkFFdkQ3bEIsS0FBSzhvQixtQkFNeERYLEVBQWtCM25CLFVBQVVtUyxZQUFjLFNBQVVrVCxFQUFPeUcsR0FDbkR6RyxJQUFVLGdCQUdWN2xCLEtBQUs4QixRQUFRMG5CLHdCQUF3QjNELEVBQU8sOEJBRzVDN2xCLEtBQUtvc0Isb0JBQ0xwc0IsS0FBS3FzQix5QkFBeUJ4RyxFQUFPeUcsR0FFekN0c0IsS0FBSzhCLFFBQVEybkIsYUFBYTVELE1BSzlCc0MsRUFBa0IzbkIsVUFBVXlyQixpQkFBbUIsU0FBVXBHLEdBQ3JELElBQ0kwRyxFQUFZMUcsRUFBUSxFQUN4QixHQUFJMEcsR0FGUXZzQixLQUFLOEIsUUFBUW9uQixtQkFFRCxDQUNwQixJQUFJbHBCLEtBQUtvb0IsVUFLTCxPQUFPdkMsRUFKUDBHLEVBQVksRUFRcEIsT0FEQXZzQixLQUFLK2xCLGlCQUFpQndHLEdBQ2ZBLEdBS1hwRSxFQUFrQjNuQixVQUFVMHJCLGlCQUFtQixTQUFVckcsR0FDckQsSUFBSTJHLEVBQVkzRyxFQUFRLEVBQ3hCLEdBQUkyRyxFQUFZLEVBQUcsQ0FDZixJQUFJeHNCLEtBQUtvb0IsVUFLTCxPQUFPdkMsRUFKUDJHLEVBQVl4c0IsS0FBSzhCLFFBQVFvbkIsbUJBQXFCLEVBUXRELE9BREFscEIsS0FBSytsQixpQkFBaUJ5RyxHQUNmQSxHQUVYckUsRUFBa0IzbkIsVUFBVXVyQixrQkFBb0IsV0FFNUMsT0FEQS9yQixLQUFLK2xCLGlCQUFpQixHQUNmLEdBRVhvQyxFQUFrQjNuQixVQUFVc3JCLGlCQUFtQixXQUMzQyxJQUFJVyxFQUFZenNCLEtBQUs4QixRQUFRb25CLG1CQUFxQixFQUVsRCxPQURBbHBCLEtBQUsrbEIsaUJBQWlCMEcsR0FDZkEsR0FFWHRFLEVBQWtCM25CLFVBQVV1SixvQkFBc0IsV0FDOUMsSUFBSTJpQixFQUFlMXNCLEtBQUsyc0IscUNBRXhCLE9BREEzc0IsS0FBSytsQixpQkFBaUIyRyxHQUNmQSxHQU1YdkUsRUFBa0IzbkIsVUFBVW9zQixXQUFhLFNBQVVDLEVBQVd6RixHQUNyRHBuQixLQUFLb3JCLGFBQWF5QixLQUduQnpGLEdBQ0FwbkIsS0FBSzhCLFFBQVE0bkIsMkJBQTJCbUQsRUFBVyw0QkFDbkQ3c0IsS0FBSzhCLFFBQVE2bkIsNEJBQTRCa0QsRUFBVyxnQkFBdUIsV0FHM0U3c0IsS0FBSzhCLFFBQVFpbkIsd0JBQXdCOEQsRUFBVyw0QkFDaEQ3c0IsS0FBSzhCLFFBQVE2bkIsNEJBQTRCa0QsRUFBVyxnQkFBdUIsV0FHbkYxRSxFQUFrQjNuQixVQUFVK3FCLDBCQUE0QixTQUFVMUYsRUFBT3htQixHQUNyRSxJQUFrQzhyQixRQUFsQixJQUFQOXJCLEVBQWdCLEdBQUtBLEdBQXFCOHJCLFlBQ25ELEdBQUluckIsS0FBS3VvQixnQkFBa0IxQyxHQUFVc0YsRUFBckMsQ0FHQSxJQUFJMkIsRUFBb0IsMkJBQ3BCOXNCLEtBQUt3b0Isb0JBQ0xzRSxFQUFvQiw2QkFFcEI5c0IsS0FBS3VvQixnQkFBa0IsZUFDdkJ2b0IsS0FBSzhCLFFBQVE0bkIsMkJBQTJCMXBCLEtBQUt1b0IsY0FBZXVFLEdBRWhFOXNCLEtBQUsrc0IsaUNBQWlDbEgsR0FDdEM3bEIsS0FBS2d0QixtQkFBbUJuSCxHQUNwQkEsSUFBVSxlQUNWN2xCLEtBQUs4QixRQUFRaW5CLHdCQUF3QmxELEVBQU9pSCxHQUVoRDlzQixLQUFLdW9CLGNBQWdCMUMsSUFLekJzQyxFQUFrQjNuQixVQUFVdXNCLGlDQUFtQyxTQUFVbEgsR0FHakU3bEIsS0FBS3VvQixnQkFBa0IsZ0JBQ3ZCdm9CLEtBQUswb0IscUJBQ0Qxb0IsS0FBSzhCLFFBQVFrbkIsNEJBQTRCbkQsRUFBTyxpQkFFeEQsSUFBSW9ILEVBQThDLE9BQTlCanRCLEtBQUswb0IscUJBQ3JCd0UsRUFBZ0JELEVBQWdCLGVBQXVCLGdCQUkzRCxHQUhJanRCLEtBQUt1b0IsZ0JBQWtCLGVBQ3ZCdm9CLEtBQUs4QixRQUFRNm5CLDRCQUE0QjNwQixLQUFLdW9CLGNBQWUyRSxFQUFlLFNBRTVFckgsSUFBVSxjQUFxQixDQUMvQixJQUFJc0gsRUFBcUJGLEVBQWdCanRCLEtBQUswb0IscUJBQXVCLE9BQ3JFMW9CLEtBQUs4QixRQUFRNm5CLDRCQUE0QjlELEVBQU9xSCxFQUFlQyxLQU12RWhGLEVBQWtCM25CLFVBQVU0c0Isc0JBQXdCLFdBQ2hELE9BQU9wdEIsS0FBS3lvQixnQkFBa0IsZ0JBQXdCLGdCQU0xRE4sRUFBa0IzbkIsVUFBVThxQixnQkFBa0IsU0FBVXpGLEdBQ3BELElBQUl3SCxFQUFxQnJ0QixLQUFLb3RCLHdCQUM5QnB0QixLQUFLOEIsUUFBUThuQixpQ0FBaUMvRCxHQUFPLEdBQ2pEN2xCLEtBQUt1b0IsZ0JBQWtCLGVBQ3ZCdm9CLEtBQUs4QixRQUFRNm5CLDRCQUE0QjNwQixLQUFLdW9CLGNBQWU4RSxFQUFvQixTQUVyRnJ0QixLQUFLOEIsUUFBUTZuQiw0QkFBNEI5RCxFQUFPd0gsRUFBb0IsUUFDcEVydEIsS0FBS3VvQixjQUFnQjFDLEdBRXpCc0MsRUFBa0IzbkIsVUFBVTZxQixtQkFBcUIsU0FBVXhGLEdBRXZELElBREEsSUFBSXdILEVBQXFCcnRCLEtBQUtvdEIsd0JBQ3JCM0MsRUFBSSxFQUFHQSxFQUFJenFCLEtBQUs4QixRQUFRb25CLG1CQUFvQnVCLElBQUssQ0FDdEQsSUFBSTNsQixHQUFZLEVBQ1orZ0IsRUFBTTFhLFFBQVFzZixJQUFNLElBQ3BCM2xCLEdBQVksR0FFaEI5RSxLQUFLOEIsUUFBUThuQixpQ0FBaUNhLEVBQUczbEIsR0FDakQ5RSxLQUFLOEIsUUFBUTZuQiw0QkFBNEJjLEVBQUc0QyxFQUFvQnZvQixFQUFZLE9BQVMsU0FFekY5RSxLQUFLdW9CLGNBQWdCMUMsR0FFekJzQyxFQUFrQjNuQixVQUFVd3NCLG1CQUFxQixTQUFVbkgsR0FDbkQ3bEIsS0FBS2ltQixtQkFBcUIsZUFBaUMsSUFBVkosRUFJakQ3bEIsS0FBSzhCLFFBQVE2bkIsNEJBQTRCLEVBQUcsV0FBWSxNQUVuRDNwQixLQUFLaW1CLGtCQUFvQixHQUFLam1CLEtBQUtpbUIsbUJBQXFCSixHQUM3RDdsQixLQUFLOEIsUUFBUTZuQiw0QkFBNEIzcEIsS0FBS2ltQixpQkFBa0IsV0FBWSxNQUsxRWptQixLQUFLdW9CLHlCQUF5QitFLE9BQ2hDdHRCLEtBQUt1b0IsZ0JBQWtCMUMsR0FDdkI3bEIsS0FBSzhCLFFBQVE2bkIsNEJBQTRCM3BCLEtBQUt1b0IsY0FBZSxXQUFZLE1BRXpFMUMsSUFBVSxlQUNWN2xCLEtBQUs4QixRQUFRNm5CLDRCQUE0QjlELEVBQU8sV0FBWSxNQU9wRXNDLEVBQWtCM25CLFVBQVU0ckIsaUJBQW1CLFdBQzNDLE9BQU9wc0IsS0FBS3NvQix1QkFBeUJ0b0IsS0FBSzJvQixnQkFDdEMzb0IsS0FBSzRvQixhQUViVCxFQUFrQjNuQixVQUFVbXJCLHdDQUEwQyxXQUNsRSxJQUFJNEIsRUFBY3Z0QixLQUFLMnNCLHFDQUN2QjNzQixLQUFLZ3RCLG1CQUFtQk8sSUFFNUJwRixFQUFrQjNuQixVQUFVbXNCLG1DQUFxQyxXQUU3RCxPQUFLM3NCLEtBQUtvc0IsbUJBSXdCLGlCQUF2QnBzQixLQUFLdW9CLGVBQ1p2b0IsS0FBS3VvQixnQkFBa0IsY0FDaEJ2b0IsS0FBS3VvQixjQUdFdm9CLEtBQUt1b0IseUJBcmdCSytFLE9BcWdCYXR0QixLQUFLdW9CLGNBQWN4b0IsT0FBUyxFQUMxREMsS0FBS3VvQixjQUFjaUYsUUFBTyxTQUFVQyxFQUFVekIsR0FBZ0IsT0FBTy9nQixLQUFLeWlCLElBQUlELEVBQVV6QixNQUc1RixFQVpJL2dCLEtBQUtDLElBQUlsTCxLQUFLaW1CLGlCQUFrQixJQWMvQ2tDLEVBQWtCM25CLFVBQVU0cUIsYUFBZSxTQUFVdkYsR0FDakQsSUFBSTFoQixFQUFRbkUsS0FDWixHQUFJNmxCLGFBQWlCeUgsTUFBTyxDQUN4QixJQUFLdHRCLEtBQUsyb0IsZUFDTixNQUFNLElBQUlqb0IsTUFBTSwrRUFFcEIsT0FBcUIsSUFBakJtbEIsRUFBTTlsQixRQUlDOGxCLEVBQU0zRixNQUFLLFNBQVV1SyxHQUFLLE9BQU90bUIsRUFBTXdwQixlQUFlbEQsTUFHaEUsR0FBcUIsaUJBQVY1RSxFQUFvQixDQUNoQyxHQUFJN2xCLEtBQUsyb0IsZUFDTCxNQUFNLElBQUlqb0IsTUFBTSxzRkFBd0ZtbEIsR0FFNUcsT0FBTzdsQixLQUFLMnRCLGVBQWU5SCxJQUN2QjdsQixLQUFLc29CLHVCQUF5QnpDLElBQVUsY0FHNUMsT0FBTyxHQUdmc0MsRUFBa0IzbkIsVUFBVW10QixlQUFpQixTQUFVOUgsR0FDbkQsSUFBSStILEVBQVc1dEIsS0FBSzhCLFFBQVFvbkIsbUJBQzVCLE9BQU9yRCxHQUFTLEdBQUtBLEVBQVErSCxHQU9qQ3pGLEVBQWtCM25CLFVBQVU2ckIseUJBQTJCLFNBQVV4RyxFQUFPeUcsUUFDN0MsSUFBbkJBLElBQTZCQSxHQUFpQixHQUM5Q3RzQixLQUFLMm9CLGVBQ0wzb0IsS0FBSzZ0QixzQkFBc0JoSSxFQUFPeUcsR0FHbEN0c0IsS0FBS2tyQixpQkFBaUJyRixJQUc5QnNDLEVBQWtCM25CLFVBQVVxdEIsc0JBQXdCLFNBQVVoSSxFQUFPeUcsR0FDakUsSUFBSWUsRUFBcUJydEIsS0FBS290Qix3QkFDMUJ0b0IsRUFBWTlFLEtBQUs4QixRQUFRdW5CLHlCQUF5QnhELEdBQ2xEeUcsSUFDQXhuQixHQUFhQSxFQUNiOUUsS0FBSzhCLFFBQVE4bkIsaUNBQWlDL0QsRUFBTy9nQixJQUV6RDlFLEtBQUs4QixRQUFRNm5CLDRCQUE0QjlELEVBQU93SCxFQUFvQnZvQixFQUFZLE9BQVMsU0FHekYsSUFBSWdwQixFQUFrQjl0QixLQUFLdW9CLGdCQUFrQixjQUN6QyxHQUNBdm9CLEtBQUt1b0IsY0FBY3JlLFFBQ25CcEYsRUFDQWdwQixFQUFnQjdnQixLQUFLNFksR0FHckJpSSxFQUFrQkEsRUFBZ0IxaUIsUUFBTyxTQUFVcWYsR0FBSyxPQUFPQSxJQUFNNUUsS0FFekU3bEIsS0FBS3VvQixjQUFnQnVGLEdBRXpCM0YsRUFBa0IzbkIsVUFBVXVsQixpQkFBbUIsU0FBVUYsR0FDckQ3bEIsS0FBSzhCLFFBQVFpa0IsaUJBQWlCRixHQUM5QjdsQixLQUFLaW1CLGlCQUFtQkosR0FFNUJzQyxFQUFrQjNuQixVQUFVMnJCLFVBQVksU0FBVTRCLEdBQzlDLElBQUlDLEVBQVFodUIsS0FBSzhCLFFBQVFvbkIsbUJBRXpCLEdBQUk2RSxFQUF5Qmh1QixTQUFXaXVCLEVBQ3BDaHVCLEtBQUtxckIsbUJBQW1CLFFBRXZCLENBR0QsSUFEQSxJQUFJNEMsRUFBYSxHQUNSeEQsRUFBSSxFQUFHQSxFQUFJdUQsRUFBT3ZELE1BQ2xCenFCLEtBQUs4QixRQUFRMG5CLHdCQUF3QmlCLEVBQUcsNkJBQ3pDc0QsRUFBeUI1aUIsUUFBUXNmLElBQU0sSUFDdkN3RCxFQUFXaGhCLEtBQUt3ZCxHQUd4QnpxQixLQUFLcXJCLG1CQUFtQjRDLEtBZ0JoQzlGLEVBQWtCM25CLFVBQVUwdEIsbUJBQXFCLFNBQVVwSSxFQUFVcUksRUFBZWpJLEdBQ2hGLElBQUkvaEIsRUFBUW5FLEtBWVosWUFYa0IsSUFBZGttQixJQUF3QkEsR0FBWSxHQVdqQyxFQVZJLENBQ1BILGlCQUFrQixTQUFVRixHQUN4QjFoQixFQUFNNGhCLGlCQUFpQkYsSUFFM0JJLGlCQUFrQmtJLEdBQWdDbnVCLEtBQUtpbUIsaUJBQ3ZESCxTQUFVQSxFQUNWRSx1QkFBd0JobUIsS0FBS2dtQix1QkFDN0JFLFVBQVdBLEVBQ1hDLHNCQUF1QixTQUFVTixHQUFTLE9BQU8xaEIsRUFBTXJDLFFBQVEwbkIsd0JBQXdCM0QsRUFBTyw4QkFFakU3bEIsS0FBSzhvQixpQkFRMUNYLEVBQWtCM25CLFVBQVV3cEIseUJBQTJCLFdBQ25ELE9EM21CRCxTQUF5Qm9FLEVBQWVDLEdBRzNDLElBRkEsSUFBSXJJLEVBQXlCLElBQUk5WixJQUV4QnVlLEVBQUksRUFBR0EsRUFBSTJELEVBQWUzRCxJQUFLLENBQ3BDLElBQUk2RCxFQUFjRCxFQUEwQjVELEdBQUc4RCxPQUMvQyxHQUFLRCxFQUFMLENBR0EsSUFBSS9ILEVBQVkrSCxFQUFZLEdBQUc1SSxjQUMxQk0sRUFBdUJWLElBQUlpQixJQUM1QlAsRUFBdUIxZixJQUFJaWdCLEVBQVcsSUFFMUNQLEVBQXVCL2pCLElBQUlza0IsR0FBV3RaLEtBQUssQ0FBRStaLEtBQU1zSCxFQUFZNUksY0FBZUcsTUFBTzRFLEtBU3pGLE9BTEF6RSxFQUF1QjViLFNBQVEsU0FBVW9rQixHQUNyQ0EsRUFBT0MsTUFBSyxTQUFVQyxFQUFPQyxHQUN6QixPQUFPRCxFQUFNN0ksTUFBUThJLEVBQU85SSxZQUc3QkcsRUNzbEJJLENBQTBCaG1CLEtBQUs4QixRQUFRb25CLG1CQUFvQmxwQixLQUFLOEIsUUFBUWdvQix3QkFLbkYzQixFQUFrQjNuQixVQUFVb3VCLHFCQUF1QixXQUMvQyxFQUFzQjV1QixLQUFLOG9CLGlCQUV4QlgsRUF6b0IyQixDQTBvQnBDLEtFOW9CRTBHLEVBQXlCLFNBQVUzcUIsR0FFbkMsU0FBUzJxQixJQUNMLE9BQWtCLE9BQVgzcUIsR0FBbUJBLEVBQU9oRSxNQUFNRixLQUFNRixZQUFjRSxLQXlWL0QsT0EzVkEsUUFBVTZ1QixFQUFTM3FCLEdBSW5CbkMsT0FBT0MsZUFBZTZzQixFQUFRcnVCLFVBQVcsV0FBWSxDQUNqRDhGLElBQUssU0FBVUUsR0FDWHhHLEtBQUtMLFdBQVd3cUIsdUJBQXVCM2pCLElBRTNDdEUsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlNnNCLEVBQVFydUIsVUFBVyxlQUFnQixDQUNyRHlCLElBQUssV0FDRCxPQUFPcXJCLE1BQU13QixLQUFLOXVCLEtBQUtOLEtBQUt5SyxpQkFBaUIsSUFBTW5LLEtBQUsrdUIsYUFBYSxzQkFFekU3c0IsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlNnNCLEVBQVFydUIsVUFBVyxZQUFhLENBQ2xEOEYsSUFBSyxTQUFVRSxHQUNYeEcsS0FBS0wsV0FBV3VxQixhQUFhMWpCLElBRWpDdEUsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlNnNCLEVBQVFydUIsVUFBVyxzQkFBdUIsQ0FJNUR5QixJQUFLLFdBQ0QsT0FBT2pDLEtBQUtMLFdBQVdrckIseUJBRTNCM29CLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZzQixFQUFRcnVCLFVBQVcsZUFBZ0IsQ0FLckQ4RixJQUFLLFNBQVV1aUIsR0FDWDdvQixLQUFLTCxXQUFXaXJCLGdCQUFnQi9CLElBRXBDM21CLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZzQixFQUFRcnVCLFVBQVcsa0JBQW1CLENBQ3hEOEYsSUFBSyxTQUFVZ2lCLEdBQ1h0b0IsS0FBS0wsV0FBV3lxQixtQkFBbUI5QixJQUV2Q3BtQixZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWU2c0IsRUFBUXJ1QixVQUFXLGdCQUFpQixDQUN0RHlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsV0FBV3NyQixvQkFFM0Iza0IsSUFBSyxTQUFVdWYsR0FDWDdsQixLQUFLTCxXQUFXdXJCLGlCQUFpQnJGLElBRXJDM2pCLFlBQVksRUFDWkMsY0FBYyxJQUVsQjBzQixFQUFRdHVCLFNBQVcsU0FBVWIsR0FDekIsT0FBTyxJQUFJbXZCLEVBQVFudkIsSUFFdkJtdkIsRUFBUXJ1QixVQUFVRixtQkFBcUIsV0FDbkNOLEtBQUtndkIsbUJOckJZLGNNc0JTaHZCLEtBQUtOLEtBQUt5YixRQUNoQ25iLEtBQUtndkIsbUJBQ0xodkIsS0FBSyt1QixhQUFlckwsR0FFZixRQUFRMWpCLEtBQUtOLEtBQU0sdUJBQ3hCTSxLQUFLK3VCLGFBQWVwTCxFQUdwQjNqQixLQUFLK3VCLGFBQ0RodEIsT0FBT3lzQixPQUFPLEdBQ1RoQixRQUFPLFNBQVV5QixFQUFLbm9CLEdBRXZCLE9BREFtb0IsRUFBSW5vQixHQUFhQSxFQUNWbW9CLElBQ1IsSUFFWGp2QixLQUFLMlMsWUFBYzNTLEtBQUtrdkIsaUJBQWlCN2EsS0FBS3JVLE1BQzlDQSxLQUFLNlMsY0FBZ0I3UyxLQUFLbXZCLG1CQUFtQjlhLEtBQUtyVSxNQUNsREEsS0FBS292QixxQkFBdUJwdkIsS0FBS3F2QixtQkFBbUJoYixLQUFLclUsTUFDekRBLEtBQUtzdkIsc0JBQXdCdHZCLEtBQUt1dkIsb0JBQW9CbGIsS0FBS3JVLE1BQzNEQSxLQUFLWSxPQUFPLFVBQVdaLEtBQUs2UyxlQUM1QjdTLEtBQUtZLE9BQU8sUUFBU1osS0FBSzJTLGFBQzFCM1MsS0FBS1ksT0FBTyxVQUFXWixLQUFLb3ZCLHNCQUM1QnB2QixLQUFLWSxPQUFPLFdBQVlaLEtBQUtzdkIsdUJBQzdCdHZCLEtBQUsrUCxTQUNML1AsS0FBS3d2QixxQkFDTHh2QixLQUFLeXZCLG1CQUVUWixFQUFRcnVCLFVBQVVHLFFBQVUsV0FDeEJYLEtBQUtpQixTQUFTLFVBQVdqQixLQUFLNlMsZUFDOUI3UyxLQUFLaUIsU0FBUyxRQUFTakIsS0FBSzJTLGFBQzVCM1MsS0FBS2lCLFNBQVMsVUFBV2pCLEtBQUtvdkIsc0JBQzlCcHZCLEtBQUtpQixTQUFTLFdBQVlqQixLQUFLc3ZCLHdCQUVuQ1QsRUFBUXJ1QixVQUFVdVAsT0FBUyxXQUN2QixJQUFJMmYsRUFBWTF2QixLQUFLTixLQUFLK0csYUFBYSxvQkFDdkN6RyxLQUFLMnZCLFNBQVdELElBQWMsOEJBQzlCLElBQUlFLEVBQWUsSUFBTTV2QixLQUFLK3VCLGFBQWEsbUJBQThCLG1CQUNyRWMsRUFBZ0IsMkJBRWhCQyxFQUFVOXZCLEtBQUtOLEtBQUt5SyxpQkFBaUJ5bEIsR0FDckNFLEVBQVEvdkIsUUFDUnV0QixNQUFNOXNCLFVBQVU0SixRQUFRaEcsS0FBSzByQixHQUFTLFNBQVUxd0IsR0FDNUNBLEVBQUdpSSxhQUFhLFdBQVksU0FJcEMsSUFBSTBvQixFQUFvQi92QixLQUFLTixLQUFLeUssaUJBQWlCMGxCLEdBQy9DRSxFQUFrQmh3QixRQUNsQnV0QixNQUFNOXNCLFVBQVU0SixRQUFRaEcsS0FBSzJyQixHQUFtQixTQUFVM3dCLEdBQ3REQSxFQUFHaUksYUFBYSxXQUFZLFNBR2hDckgsS0FBS2d2QixvQkFDTGh2QixLQUFLTCxXQUFXb3JCLHlCQUF3QixHQUU1Qy9xQixLQUFLTCxXQUFXb1EsVUFPcEI4ZSxFQUFRcnVCLFVBQVV3dkIsZUFBaUIsU0FBVUMsR0FDekMsSUFBSTV3QixFQUNBaXZCLEVBQWMyQixFQUFLL21CLGNBQWMsSUFBTWxKLEtBQUsrdUIsYUFBYSxpQ0FDN0QsR0FBSS91QixLQUFLZ3ZCLG9CQUFzQlYsRUFDM0IsT0FBb0csUUFBNUZqdkIsRUFBS2l2QixNQUFBQSxPQUFpRCxFQUFTQSxFQUFZNEIsbUJBQWdDLElBQVA3d0IsRUFBZ0JBLEVBQUssR0FFckksSUFBSTh3QixFQUFpQkYsRUFBSy9tQixjQUFjLElBQU1sSixLQUFLK3VCLGFBQWEseUJBQ2hFLE9BQVFvQixHQUFrQkEsRUFBZUQsYUFBZ0IsSUFLN0RyQixFQUFRcnVCLFVBQVVndkIsbUJBQXFCLFdBQ25DLElBQUlyckIsRUFBUW5FLEtBR1osR0FGQUEsS0FBS293QixlQUNELFFBQVFwd0IsS0FBS04sS0FBTSxtQ0FDbkJNLEtBQUtndkIsb0JBQXNCaHZCLEtBQUtvd0IsY0FBcEMsQ0FDSSxJQUFJQyxFQUFZL0MsTUFBTXdCLEtBQUs5dUIsS0FBS04sS0FBS3lLLGlCQUFpQiwyQkFBaUMsU0FBVW1tQixHQUFZLE9BQU9uc0IsRUFBTW9zQixhQUFhcGxCLFFBQVFtbEIsT0FDM0ksUUFBUXR3QixLQUFLTixLQUFNLGtDQUNuQk0sS0FBS3VvQixjQUFnQjhILEVBRWhCQSxFQUFVdHdCLE9BQVMsSUFDeEJDLEtBQUt1b0IsY0FBZ0I4SCxFQUFVLFFBTnZDLENBVUEsSUFBSUcsRUFBb0J4d0IsS0FBS04sS0FBS3lLLGlCQUFpQiwrQkFDL0NzbUIsRUFBd0J6d0IsS0FBS04sS0FBS3dKLGNBQWMsK0JBQ3BELEdBQUlzbkIsRUFBa0J6d0IsT0FBUSxDQUMxQixJQUFJMndCLEVBQW1CMXdCLEtBQUtOLEtBQUt5SyxpQkFBaUIsa0NBQ2xEbkssS0FBS3VvQixjQUFnQitFLE1BQU13QixLQUFLNEIsR0FBa0IsU0FBVUosR0FBWSxPQUFPbnNCLEVBQU1vc0IsYUFBYXBsQixRQUFRbWxCLFdBRXJHRyxJQUNMendCLEtBQUt1b0IsY0FBZ0J2b0IsS0FBS3V3QixhQUFhcGxCLFFBQVFzbEIsTUFRdkQ1QixFQUFRcnVCLFVBQVVvc0IsV0FBYSxTQUFVQyxFQUFXekYsR0FDaERwbkIsS0FBS0wsV0FBV2l0QixXQUFXQyxFQUFXekYsSUFZMUN5SCxFQUFRcnVCLFVBQVUwdEIsbUJBQXFCLFNBQVVwSSxFQUFVcUksR0FDdkQsT0FBT251QixLQUFLTCxXQUFXdXVCLG1CQUFtQnBJLEVBQVVxSSxHQUFnQyxJQUV4RlUsRUFBUXJ1QixVQUFVSixxQkFBdUIsV0FDckMsSUFBSStELEVBQVFuRSxLQStFWixPQUFPLElBQUltb0IsRUEzRUcsQ0FDVlksd0JBQXlCLFNBQVVsRCxFQUFPL2UsR0FDdEMsSUFBSWtPLEVBQVU3USxFQUFNb3NCLGFBQWExSyxHQUM3QjdRLEdBQ0FBLEVBQVFqTyxVQUFVQyxJQUFJN0MsRUFBTTRxQixhQUFham9CLEtBR2pEaWYsaUJBQWtCLFNBQVVGLEdBQ3hCLElBQUk3USxFQUFVN1EsRUFBTW9zQixhQUFhMUssR0FDN0I3USxHQUNBQSxFQUFRdkssU0FHaEJ1ZSw0QkFBNkIsU0FBVW5ELEVBQU96ZSxHQUMxQyxPQUFPakQsRUFBTW9zQixhQUFhMUssR0FBT3BmLGFBQWFXLElBRWxENmhCLHVCQUF3QixXQUNwQixPQUFPOWtCLEVBQU1vc0IsYUFBYXBsQixRQUFRbE0sU0FBUzBLLGdCQUUvQ3VmLGlCQUFrQixXQUFjLE9BQU8va0IsRUFBTW9zQixhQUFheHdCLFFBQzFEK3BCLHNCQUF1QixTQUFVakUsR0FDN0IsT0FBTzFoQixFQUFNNnJCLGVBQWU3ckIsRUFBTW9zQixhQUFhMUssS0FFbkRzRCxtQkFBb0IsU0FBVXRELEdBRTFCLFFBRGUxaEIsRUFBTW9zQixhQUFhMUssR0FDaEIzYyxjQUFjLHNCQUVwQ2tnQixnQkFBaUIsU0FBVXZELEdBRXZCLFFBRGUxaEIsRUFBTW9zQixhQUFhMUssR0FDaEIzYyxjQUFjLG1CQUVwQ21nQix5QkFBMEIsU0FBVXhELEdBR2hDLE9BRmUxaEIsRUFBTW9zQixhQUFhMUssR0FDVjNjLGNBQWMscUJBQ3RCN0MsU0FFcEJpakIsa0JBQW1CLFdBQ2YsT0FBT25sQixFQUFNekUsT0FBU1QsU0FBUzBLLGVBQzNCeEYsRUFBTXpFLEtBQUtnTSxTQUFTek0sU0FBUzBLLGdCQUVyQzRmLGNBQWUsV0FBYyxPQUFPdHFCLFNBQVMwSyxnQkFBa0J4RixFQUFNekUsTUFDckU4cEIsd0JBQXlCLFNBQVUzRCxFQUFPL2UsR0FDdEMsT0FBTzNDLEVBQU1vc0IsYUFBYTFLLEdBQU85ZSxVQUFVMkUsU0FBU3ZILEVBQU00cUIsYUFBYWpvQixLQUUzRTJpQixhQUFjLFNBQVU1RCxHQUNwQjFoQixFQUFNaEQsS0FBSyxlQUFzQixDQUFFMGtCLE1BQU9BLElBQTZCLElBRTNFNkQsMkJBQTRCLFNBQVU3RCxFQUFPL2UsR0FDekMsSUFBSWtPLEVBQVU3USxFQUFNb3NCLGFBQWExSyxHQUM3QjdRLEdBQ0FBLEVBQVFqTyxVQUFVSSxPQUFPaEQsRUFBTTRxQixhQUFham9CLEtBR3BENmlCLDRCQUE2QixTQUFVOUQsRUFBT3plLEVBQU1aLEdBQ2hELElBQUl3TyxFQUFVN1EsRUFBTW9zQixhQUFhMUssR0FDN0I3USxHQUNBQSxFQUFRM04sYUFBYUQsRUFBTVosSUFHbkNvakIsaUNBQWtDLFNBQVUvRCxFQUFPL2dCLEdBQy9DLElBQ0k2ckIsRUFEV3hzQixFQUFNb3NCLGFBQWExSyxHQUNWM2MsY0FBYywyQkFDdEN5bkIsRUFBU3RxQixRQUFVdkIsRUFDbkIsSUFBSXlpQixFQUFRdG9CLFNBQVN5QyxZQUFZLFNBQ2pDNmxCLEVBQU1xSixVQUFVLFVBQVUsR0FBTSxHQUNoQ0QsRUFBUy91QixjQUFjMmxCLElBRTNCc0MsK0JBQWdDLFNBQVU0QixFQUFlb0YsR0FDckQsSUFBSTdiLEVBQVU3USxFQUFNb3NCLGFBQWE5RSxHQUM3QmpaLEVBQVcsb0NBQ2Y4YSxNQUFNOXNCLFVBQVU0SixRQUFRaEcsS0FBSzRRLEVBQVE3SyxpQkFBaUJxSSxJQUFXLFNBQVVwVCxHQUN2RUEsRUFBR2lJLGFBQWEsV0FBWXdwQixVQVU1Q2hDLEVBQVFydUIsVUFBVWl2QixnQkFBa0IsV0FDaEMsR0FBSXp2QixLQUFLZ3ZCLG9CQUFzQmh2QixLQUFLb3dCLGdCQUMzQnB3QixLQUFLTixLQUFLd0osY0FBYyxJQUFNbEosS0FBSyt1QixhQUFhLG1CQUE4QixrQkFBcUIsQ0FDcEcsSUFBSWxKLEVBQVE3bEIsS0FBSzh3QixxQkFDRixJQUFYakwsSUFDQTdsQixLQUFLdXdCLGFBQWExSyxHQUFPdGEsU0FBVyxLQUtwRHNqQixFQUFRcnVCLFVBQVVzd0Isa0JBQW9CLFdBQ2xDLEdBQUk5d0IsS0FBS3VvQix5QkFBeUIrRSxPQUFTdHRCLEtBQUt1b0IsY0FBY3hvQixPQUFTLEVBQ25FLE9BQU9DLEtBQUt1b0IsY0FBYyxHQUU5QixHQUFrQyxpQkFBdkJ2b0IsS0FBS3VvQixlQUNadm9CLEtBQUt1b0IsZ0JBQWtCLGNBQ3ZCLE9BQU92b0IsS0FBS3VvQixjQUVoQixJQUFJbnBCLEVBQUtZLEtBQUtOLEtBQUt3SixjQUFjLElBQU1sSixLQUFLK3VCLGFBQWEsbUJBQThCLFNBQVcvdUIsS0FBSyt1QixhQUFhLDRCQUF1QyxLQUMzSixPQUFXLE9BQVAzdkIsR0FDUSxFQUVMWSxLQUFLK3dCLGlCQUFpQjN4QixJQU1qQ3l2QixFQUFRcnVCLFVBQVV1d0IsaUJBQW1CLFNBQVUzeEIsR0FDM0MsSUFBSTR4QixHQUFnQixRQUFRNXhCLEVBQUksSUFBTVksS0FBSyt1QixhQUFhLG1CQUE4QixNQUFRL3VCLEtBQUsrdUIsYUFBYSxTQUVoSCxPQUFJaUMsSUFDQSxRQUFRQSxFQUFlLElBQU1oeEIsS0FBSyt1QixhQUFhLG9CQUN4Qy91QixLQUFLdXdCLGFBQWFwbEIsUUFBUTZsQixJQUU3QixHQU1abkMsRUFBUXJ1QixVQUFVNnVCLG1CQUFxQixTQUFVL3RCLEdBQzdDLElBQUl1a0IsRUFBUTdsQixLQUFLK3dCLGlCQUFpQnp2QixFQUFJc1IsUUFDdEM1UyxLQUFLTCxXQUFXNnJCLGNBQWMzRixJQU1sQ2dKLEVBQVFydUIsVUFBVSt1QixvQkFBc0IsU0FBVWp1QixHQUM5QyxJQUFJdWtCLEVBQVE3bEIsS0FBSyt3QixpQkFBaUJ6dkIsRUFBSXNSLFFBQ3RDNVMsS0FBS0wsV0FBVytyQixlQUFlN0YsSUFNbkNnSixFQUFRcnVCLFVBQVUydUIsbUJBQXFCLFNBQVU3dEIsR0FDN0MsSUFBSXVrQixFQUFRN2xCLEtBQUsrd0IsaUJBQWlCenZCLEVBQUlzUixRQUNsQ0EsRUFBU3RSLEVBQUlzUixPQUNqQjVTLEtBQUtMLFdBQVdrVCxjQUFjdlIsRUFBS3NSLEVBQU83TCxVQUFVMkUsU0FBUzFMLEtBQUsrdUIsYUFBYSxvQkFBOEJsSixJQU1qSGdKLEVBQVFydUIsVUFBVTB1QixpQkFBbUIsU0FBVTV0QixHQUMzQyxJQUFJdWtCLEVBQVE3bEIsS0FBSyt3QixpQkFBaUJ6dkIsRUFBSXNSLFFBQ2xDQSxFQUFTdFIsRUFBSXNSLE9BR2IwWixJQUFrQixRQUFRMVosRUFBUSwyQkFDdEM1UyxLQUFLTCxXQUFXZ1QsWUFBWWtULEVBQU95RyxJQUVoQ3VDLEVBNVZpQixDQTZWMUIsS0MvVkVvQyxFQUEwQyxTQUFVL3NCLEdBRXBELFNBQVMrc0IsRUFBeUJudkIsR0FDOUIsSUFBSXFDLEVBQVFELEVBQU9FLEtBQUtwRSxNQUFNLFNBQVMsUUFBUyxHQUFJaXhCLEVBQXlCNXNCLGdCQUFpQnZDLEtBQWE5QixLQTRCM0csT0EzQkFtRSxFQUFNK3NCLGVBQWdCLEVBQ3RCL3NCLEVBQU1ndEIsYUFBYyxFQUNwQmh0QixFQUFNaXRCLGtCQUFtQixFQUN6Qmp0QixFQUFNa3RCLGlCQUFrQixFQUN4Qmx0QixFQUFNbXRCLGtDQUFtQyxFQUN6Q250QixFQUFNb3RCLFVBQVksRUFDbEJwdEIsRUFBTXF0Qix3QkFBMEIsRUFDaENydEIsRUFBTXN0Qix5QkFBMkIsRUFDakN0dEIsRUFBTXV0QixtQkFBcUIsRUFDM0J2dEIsRUFBTXd0QixhQUFlblAsRUFBT29QLFVBZTVCenRCLEVBQU0wdEIsYUFBZXJQLEVBQU9vUCxVQUM1Qnp0QixFQUFNMnRCLGFBQWUsQ0FBRTdVLElBQUssRUFBR2UsTUFBTyxFQUFHQyxPQUFRLEVBQUdqQixLQUFNLEdBQzFEN1ksRUFBTTR0QixTQUFXLENBQUV0WCxFQUFHLEVBQUdFLEVBQUcsR0FDckJ4VyxFQTRmWCxPQTFoQkEsUUFBVThzQixFQUEwQi9zQixHQWdDcENuQyxPQUFPQyxlQUFlaXZCLEVBQTBCLGFBQWMsQ0FDMURodkIsSUFBSyxXQUNELE9BQU9HLEdBRVhGLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZWl2QixFQUEwQixVQUFXLENBQ3ZEaHZCLElBQUssV0FDRCxPQUFPcUIsR0FFWHBCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZWl2QixFQUEwQixVQUFXLENBQ3ZEaHZCLElBQUssV0FDRCxPQUFPOEIsR0FFWDdCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZWl2QixFQUEwQixTQUFVLENBQ3REaHZCLElBQUssV0FDRCxPQUFPdWdCLEdBRVh0Z0IsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlaXZCLEVBQTBCLGlCQUFrQixDQUk5RGh2QixJQUFLLFdBRUQsTUFBTyxDQUNIeUMsU0FBVSxhQUNWTSxZQUFhLGFBQ2JzTCxTQUFVLFdBQWMsT0FBTyxHQUMvQjBoQixVQUFXLFdBQWMsT0FBTyxHQUNoQ0MscUJBQXNCLFdBQWMsT0FBTyxHQUMzQ0MsVUFBVyxXQUFjLE9BQU8sR0FDaENDLE1BQU8sV0FBYyxPQUFPLEdBQzVCQyxtQkFBb0IsV0FBYyxNQUFPLENBQUd6VixPQUFRLEVBQUdsUixNQUFPLElBQzlENG1CLG9CQUFxQixXQUFjLE9BQU8sTUFDMUNDLG9CQUFxQixXQUFjLE1BQU8sQ0FBRzNWLE9BQVEsRUFBR2xSLE1BQU8sSUFDL0Q4bUIsa0JBQW1CLFdBQWMsTUFBTyxDQUFHNVYsT0FBUSxFQUFHbFIsTUFBTyxJQUM3RCttQixnQkFBaUIsV0FBYyxNQUFPLENBQUcvWCxFQUFHLEVBQUdFLEVBQUcsSUFDbEQ4WCxZQUFhLGFBQ2JDLGFBQWMsYUFDZEMsbUJBQW9CLGFBQ3BCQyxVQUFXLGFBQ1hDLGFBQWMsYUFDZEMsWUFBYSxhQUNiQyxXQUFZLGFBQ1p0aUIsY0FBZSxlQUl2QnZPLFlBQVksRUFDWkMsY0FBYyxJQUVsQjh1QixFQUF5Qnp3QixVQUFVSCxLQUFPLFdBQ3RDLElBQUloQixFQUFLNHhCLEVBQXlCN3VCLFdBQVllLEVBQU85RCxFQUFHOEQsS0FBTWdLLEVBQU85TixFQUFHOE4sS0FDeEUsSUFBS25OLEtBQUs4QixRQUFRd08sU0FBU25OLEdBQ3ZCLE1BQU0sSUFBSXpDLE1BQU15QyxFQUFPLG9DQUV2Qm5ELEtBQUs4QixRQUFRd08sU0FBU25ELEtBQ3RCbk4sS0FBS2t4QixlQUFnQixJQUc3QkQsRUFBeUJ6d0IsVUFBVUcsUUFBVSxXQUN6QzJFLGFBQWF0RixLQUFLd3hCLHlCQUNsQmxzQixhQUFhdEYsS0FBS3l4QiwwQkFFbEI3a0IscUJBQXFCNU0sS0FBSzB4QixxQkFLOUJULEVBQXlCendCLFVBQVV3eUIsZ0JBQWtCLFNBQVVDLEdBQzNEanpCLEtBQUsyeEIsYUFBZXNCLEdBS3hCaEMsRUFBeUJ6d0IsVUFBVTB5Qix1QkFBeUIsV0FDeERsekIsS0FBSzZ4QixhQUFlN3hCLEtBQUs2eEIsYUFBZXRQLEVBQVU0USxPQUt0RGxDLEVBQXlCendCLFVBQVU0eUIsZ0JBQWtCLFNBQVVDLEdBQzNEcnpCLEtBQUs4eEIsYUFBYTdVLElBQU1vVyxFQUFPcFcsS0FBTyxFQUN0Q2pkLEtBQUs4eEIsYUFBYTlULE1BQVFxVixFQUFPclYsT0FBUyxFQUMxQ2hlLEtBQUs4eEIsYUFBYTdULE9BQVNvVixFQUFPcFYsUUFBVSxFQUM1Q2plLEtBQUs4eEIsYUFBYTlVLEtBQU9xVyxFQUFPclcsTUFBUSxHQUc1Q2lVLEVBQXlCendCLFVBQVU4eUIsYUFBZSxTQUFVQyxHQUN4RHZ6QixLQUFLb3hCLGlCQUFtQm1DLEdBRzVCdEMsRUFBeUJ6d0IsVUFBVWd6QixpQkFBbUIsU0FBVW5DLEdBQzVEcnhCLEtBQUtxeEIsZ0JBQWtCQSxHQUczQkosRUFBeUJ6d0IsVUFBVWl6QixvQkFBc0IsU0FBVWhaLEVBQUdFLEdBQ2xFM2EsS0FBSyt4QixTQUFTdFgsRUFBSXphLEtBQUswekIsU0FBU2paLEdBQUtBLEVBQUksRUFDekN6YSxLQUFLK3hCLFNBQVNwWCxFQUFJM2EsS0FBSzB6QixTQUFTL1ksR0FBS0EsRUFBSSxHQUc3Q3NXLEVBQXlCendCLFVBQVVtekIsb0NBQXNDLFNBQVVDLEdBQy9FNXpCLEtBQUtzeEIsaUNBQW1Dc0MsR0FFNUMzQyxFQUF5Qnp3QixVQUFVcXpCLGFBQWUsU0FBVUMsR0FDeEQ5ekIsS0FBS214QixZQUFjMkMsR0FPdkI3QyxFQUF5Qnp3QixVQUFVa3lCLGFBQWUsU0FBVW5CLEdBQ3hEdnhCLEtBQUt1eEIsVUFBWUEsR0FFckJOLEVBQXlCendCLFVBQVV1UixPQUFTLFdBQ3hDLE9BQU8vUixLQUFLa3hCLGVBS2hCRCxFQUF5Qnp3QixVQUFVOFEsS0FBTyxXQUN0QyxJQUFJbk4sRUFBUW5FLEtBQ1JBLEtBQUtreEIsZ0JBR1RseEIsS0FBSzhCLFFBQVE4d0IsWUFDVDV5QixLQUFLbXhCLGFBQ0xueEIsS0FBS2t4QixlQUFnQixFQUNyQmx4QixLQUFLOEIsUUFBUTRDLFNBQVN1c0IsRUFBeUI3dUIsV0FBVytLLE1BQzFEbk4sS0FBSyt6QixXQUFhL3pCLEtBQUs4QixRQUFRc3dCLHFCQUMvQnB5QixLQUFLZzBCLGVBQ0xoMEIsS0FBSzhCLFFBQVFpeEIsZUFHYi95QixLQUFLOEIsUUFBUTRDLFNBQVN1c0IsRUFBeUI3dUIsV0FBV3VnQixnQkFDMUQzaUIsS0FBSzB4QixtQkFBcUJsbEIsdUJBQXNCLFdBQzVDckksRUFBTTR2QixXQUFhNXZCLEVBQU1yQyxRQUFRc3dCLHFCQUNqQ2p1QixFQUFNNnZCLGVBQ043dkIsRUFBTXJDLFFBQVE0QyxTQUFTdXNCLEVBQXlCN3VCLFdBQVcrSyxNQUMzRGhKLEVBQU1xdEIsd0JBQTBCOXJCLFlBQVcsV0FDdkN2QixFQUFNcXRCLHdCQUEwQixFQUNoQ3J0QixFQUFNckMsUUFBUWtELFlBQVlpc0IsRUFBeUI3dUIsV0FBV3VnQixnQkFDOUR4ZSxFQUFNckMsUUFBUWl4QixlQUNmaHZCLEVBQVFnZiw2QkFFZi9pQixLQUFLa3hCLGVBQWdCLEtBTTdCRCxFQUF5Qnp3QixVQUFVa1IsTUFBUSxTQUFVbEgsR0FDakQsSUFBSXJHLEVBQVFuRSxLQUVaLFFBRHlCLElBQXJCd0ssSUFBK0JBLEdBQW1CLEdBQ2pEeEssS0FBS2t4QixjQUFWLENBSUEsR0FEQWx4QixLQUFLOEIsUUFBUTJPLGdCQUNUelEsS0FBS214QixZQVFMLE9BUEFueEIsS0FBS2t4QixlQUFnQixFQUNoQjFtQixHQUNEeEssS0FBS2kwQixvQkFFVGowQixLQUFLOEIsUUFBUWtELFlBQVlpc0IsRUFBeUI3dUIsV0FBVytLLE1BQzdEbk4sS0FBSzhCLFFBQVFrRCxZQUFZaXNCLEVBQXlCN3VCLFdBQVd5Z0Isb0JBQzdEN2lCLEtBQUs4QixRQUFRZ3hCLGNBR2pCOXlCLEtBQUs4QixRQUFRNEMsU0FBU3VzQixFQUF5Qjd1QixXQUFXc2dCLGtCQUMxRGxXLHVCQUFzQixXQUNsQnJJLEVBQU1yQyxRQUFRa0QsWUFBWWlzQixFQUF5Qjd1QixXQUFXK0ssTUFDOURoSixFQUFNckMsUUFBUWtELFlBQVlpc0IsRUFBeUI3dUIsV0FBV3lnQixlQUM5RDFlLEVBQU1zdEIseUJBQTJCL3JCLFlBQVcsV0FDeEN2QixFQUFNc3RCLHlCQUEyQixFQUNqQ3R0QixFQUFNckMsUUFBUWtELFlBQVlpc0IsRUFBeUI3dUIsV0FBV3NnQixrQkFDOUR2ZSxFQUFNckMsUUFBUWd4QixnQkFDZi91QixFQUFRaWYsOEJBRWZoakIsS0FBS2t4QixlQUFnQixFQUNoQjFtQixHQUNEeEssS0FBS2kwQixzQkFJYmhELEVBQXlCendCLFVBQVUwekIsZ0JBQWtCLFNBQVU1eUIsR0FDM0QsSUFBSWxDLEVBQUtrQyxFQUFJc1IsT0FDVDVTLEtBQUs4QixRQUFRbXdCLHFCQUFxQjd5QixJQUd0Q1ksS0FBSzBSLFNBR1R1ZixFQUF5Qnp3QixVQUFVcVMsY0FBZ0IsU0FBVXZSLEdBQ3pELElBQUl5UixFQUFVelIsRUFBSXlSLFNBQ0ssV0FEVXpSLEVBQUk4SyxLQUNVLEtBQVoyRyxJQUUvQi9TLEtBQUswUixTQUdidWYsRUFBeUJ6d0IsVUFBVXd6QixhQUFlLFdBQzlDLElBQUkzMEIsRUFFSlcsS0FBS20wQixhQUFlbjBCLEtBQUtvMEIsNEJBQ3pCLElBQUluQixFQUFTanpCLEtBQUtxMEIsa0JBQ2RDLEVBQXVCdDBCLEtBQUt1MEIsd0JBQXdCdEIsR0FDcER1QixFQUFvQngwQixLQUFLeTBCLE9BQU94QixFQUFRMVEsRUFBVW1TLFFBQVUsU0FBVyxNQUN2RUMsRUFBc0IzMEIsS0FBS3kwQixPQUFPeEIsRUFBUTFRLEVBQVU0USxPQUFTLFFBQVUsT0FDdkV5QixFQUFtQjUwQixLQUFLNjBCLDBCQUEwQjVCLEdBQ2xENkIsRUFBaUI5MEIsS0FBSyswQix3QkFBd0I5QixHQUM5Q2pmLEVBQUtoVSxLQUFLbTBCLGFBQWNhLEVBQWFoaEIsRUFBR2doQixXQUFZQyxFQUFjamhCLEVBQUdpaEIsWUFDckVsRCxJQUFZMXlCLEVBQUssSUFDZHMxQixHQUF1QkMsRUFDMUJ2MUIsRUFBR20xQixHQUFxQk0sRUFDeEJ6MUIsR0FFQTIxQixFQUFXdnBCLE1BQVF3cEIsRUFBWXhwQixNQUFRMUgsRUFBUW1mLHFDQUMvQ3lSLEVBQXNCLFdBR3RCMzBCLEtBQUtveEIsa0JBQW9CcHhCLEtBQUtxeEIsa0JBQzlCcnhCLEtBQUtrMUIsZ0NBQWdDbkQsR0FFekMveEIsS0FBSzhCLFFBQVE2d0IsbUJBQW1CZ0MsRUFBc0IsSUFBTUgsR0FDNUR4MEIsS0FBSzhCLFFBQVEyd0IsWUFBWVYsR0FDekIveEIsS0FBSzhCLFFBQVE0d0IsYUFBYTRCLEVBQXVCQSxFQUF1QixLQUFPLElBRTFFdDBCLEtBQUt5MEIsT0FBT3hCLEVBQVExUSxFQUFVbVMsU0FDL0IxMEIsS0FBSzhCLFFBQVE0QyxTQUFTdXNCLEVBQXlCN3VCLFdBQVd5Z0IsZ0JBTWxFb08sRUFBeUJ6d0IsVUFBVTR6QiwwQkFBNEIsV0FDM0QsSUFBSWUsRUFBYW4xQixLQUFLOEIsUUFBUXV3QixzQkFDMUIrQyxFQUFXcDFCLEtBQUs4QixRQUFReXdCLG9CQUN4QjhDLEVBQWVyMUIsS0FBSzhCLFFBQVF3d0Isc0JBQzVCZ0QsRUFBZXQxQixLQUFLOEIsUUFBUTB3QixrQkFhaEMsT0FaSzJDLElBRURBLEVBQWEsQ0FDVGxZLElBQUtqZCxLQUFLK3hCLFNBQVNwWCxFQUNuQnFELE1BQU9oZSxLQUFLK3hCLFNBQVN0WCxFQUNyQndELE9BQVFqZSxLQUFLK3hCLFNBQVNwWCxFQUN0QnFDLEtBQU1oZCxLQUFLK3hCLFNBQVN0WCxFQUNwQmhQLE1BQU8sRUFDUGtSLE9BQVEsSUFJVCxDQUNIcVksV0FBWUcsRUFDWkMsU0FBVUEsRUFDVkgsWUFBYWoxQixLQUFLK3pCLFdBQ2xCd0IsaUJBQWtCLENBRWR0WSxJQUFLa1ksRUFBV2xZLElBQ2hCZSxNQUFPcVgsRUFBYTVwQixNQUFRMHBCLEVBQVduWCxNQUN2Q0MsT0FBUW9YLEVBQWExWSxPQUFTd1ksRUFBV2xYLE9BQ3pDakIsS0FBTW1ZLEVBQVduWSxNQUdyQnFZLGFBQWNBLEVBQ2RDLGFBQWNBLElBVXRCckUsRUFBeUJ6d0IsVUFBVTZ6QixnQkFBa0IsV0FDakQsSUFJSW1CLEVBQ0FDLEVBTEF4QyxFQUFTanpCLEtBQUs2eEIsYUFDZHh5QixFQUFLVyxLQUFLbTBCLGFBQWNvQixFQUFtQmwyQixFQUFHazJCLGlCQUFrQlAsRUFBYTMxQixFQUFHMjFCLFdBQVlDLEVBQWM1MUIsRUFBRzQxQixZQUM3R2hTLEVBQWlCZ08sRUFBeUJsdEIsUUFBUWtmLGVBQzdCampCLEtBQUt5MEIsT0FBT3owQixLQUFLMnhCLGFBQWNwUCxFQUFVbVMsU0FJOURjLEVBQ0lELEVBQWlCdFksSUFBTWdHLEVBQWlCampCLEtBQUs4eEIsYUFBYTdULE9BQzlEd1gsRUFDSUYsRUFBaUJ0WCxPQUFTZ0YsRUFBaUJqakIsS0FBSzh4QixhQUFhN1QsU0FHakV1WCxFQUNJRCxFQUFpQnRZLElBQU1nRyxFQUFpQmpqQixLQUFLOHhCLGFBQWE3VSxJQUM5RHdZLEVBQWtCRixFQUFpQnRYLE9BQVNnRixFQUN4QytSLEVBQVdyWSxPQUFTM2MsS0FBSzh4QixhQUFhN1UsT0FFdEJ3WSxFQUFrQlIsRUFBWXRZLE9BQVMsSUFDckM2WSxFQUFlQyxJQUVyQ3hDLEVBQVNqekIsS0FBSzAxQixPQUFPekMsRUFBUTFRLEVBQVVtUyxTQUUzQyxJQWNJaUIsRUFDQUMsRUFWQUMsRUFMQTFELEVBQVFueUIsS0FBSzhCLFFBQVFxd0IsUUFDckIyRCxFQUFZOTFCLEtBQUt5MEIsT0FBT3owQixLQUFLMnhCLGFBQWNwUCxFQUFVd1QsVUFDckRDLEVBQWNoMkIsS0FBS3kwQixPQUFPejBCLEtBQUsyeEIsYUFBY3BQLEVBQVU0USxRQUN2RG56QixLQUFLeTBCLE9BQU94QixFQUFRMVEsRUFBVTRRLFFBSzlCMEMsRUFEQTFELEdBQVMyRCxHQUNZRSxFQUlEQSxJQUtwQkwsRUFDSUosRUFBaUJ2WSxLQUFPZ1ksRUFBV3ZwQixNQUFRekwsS0FBSzh4QixhQUFhOVQsTUFDakU0WCxFQUFpQkwsRUFBaUJ2WCxNQUFRaGUsS0FBSzh4QixhQUFhOVQsUUFHNUQyWCxFQUFnQkosRUFBaUJ2WSxLQUFPaGQsS0FBSzh4QixhQUFhOVUsS0FDMUQ0WSxFQUNJTCxFQUFpQnZYLE1BQVFnWCxFQUFXdnBCLE1BQVF6TCxLQUFLOHhCLGFBQWE5VSxNQUV0RSxJQUFJaVosRUFBa0JOLEVBQWdCVixFQUFZeHBCLE1BQVEsRUFDdER5cUIsRUFBbUJOLEVBQWlCWCxFQUFZeHBCLE1BQVEsRUFDeEQwcUIsRUFBNkJuMkIsS0FBS3kwQixPQUFPeEIsRUFBUTFRLEVBQVV3VCxXQUMzRC8xQixLQUFLeTBCLE9BQU94QixFQUFRMVEsRUFBVTRRLE9BWWxDLE9BWEkrQyxHQUFvQkMsR0FBOEJoRSxJQUNqRDhELEdBQW1CRSxFQUVwQmxELEVBQVNqekIsS0FBS28yQixTQUFTbkQsRUFBUTFRLEVBQVU0USxRQUVwQzhDLEdBQW1CSixHQUFxQjFELEdBQzVDOEQsSUFBb0JKLEdBQXFCRyxJQUN4Q0UsR0FBb0JQLEdBQWlCQyxLQUV2QzNDLEVBQVNqekIsS0FBSzAxQixPQUFPekMsRUFBUTFRLEVBQVU0USxRQUVwQ0YsR0FNWGhDLEVBQXlCendCLFVBQVUrekIsd0JBQTBCLFNBQVV0QixHQUNuRSxHQUFJanpCLEtBQUt1eEIsVUFBWSxFQUNqQixPQUFPdnhCLEtBQUt1eEIsVUFFaEIsSUFBSWdFLEVBQW1CdjFCLEtBQUttMEIsYUFBYW9CLGlCQUNyQ2hFLEVBQVksRUFDWjhFLEVBQWtCcjJCLEtBQUt5MEIsT0FBT3hCLEVBQVExUSxFQUFVbVMsUUFDaEQ0QixFQUFtQnQyQixLQUFLeTBCLE9BQU96MEIsS0FBSzJ4QixhQUFjcFAsRUFBVW1TLFFBQzVEelIsRUFBaUJnTyxFQUF5Qmx0QixRQUFRa2YsZUFldEQsT0FiSW9ULEdBQ0E5RSxFQUFZZ0UsRUFBaUJ0WSxJQUFNamQsS0FBSzh4QixhQUFhN1UsSUFBTWdHLEVBQ3REcVQsSUFDRC9FLEdBQWF2eEIsS0FBS20wQixhQUFhYSxXQUFXclksVUFJOUM0VSxFQUFZZ0UsRUFBaUJ0WCxPQUFTamUsS0FBSzh4QixhQUFhN1QsT0FDcERqZSxLQUFLbTBCLGFBQWFhLFdBQVdyWSxPQUFTc0csRUFDdENxVCxJQUNBL0UsR0FBYXZ4QixLQUFLbTBCLGFBQWFhLFdBQVdyWSxTQUczQzRVLEdBTVhOLEVBQXlCendCLFVBQVVxMEIsMEJBQTRCLFNBQVU1QixHQUNyRSxJQUFJK0IsRUFBYWgxQixLQUFLbTBCLGFBQWFhLFdBRS9CdUIsRUFBaUJ2MkIsS0FBS3kwQixPQUFPeEIsRUFBUTFRLEVBQVU0USxPQUMvQ3FELEVBQXlCeDJCLEtBQUt5MEIsT0FBT3owQixLQUFLMnhCLGFBQWNwUCxFQUFVNFEsT0FDdEUsR0FBSW9ELEVBQWdCLENBQ2hCLElBQUlFLEVBQWNELEVBQ2R4QixFQUFXdnBCLE1BQVF6TCxLQUFLOHhCLGFBQWE5VSxLQUNyQ2hkLEtBQUs4eEIsYUFBYTlULE1BS3RCLE9BQUloZSxLQUFLb3hCLGtCQUFvQnB4QixLQUFLcXhCLGdCQUN2Qm9GLEdBQ0Z6MkIsS0FBS20wQixhQUFha0IsYUFBYTVwQixNQUM1QnpMLEtBQUttMEIsYUFBYWlCLFNBQVMzcEIsT0FFaENnckIsRUFFWCxPQUFPRCxFQUF5QnhCLEVBQVd2cEIsTUFBUXpMLEtBQUs4eEIsYUFBYTlULE1BQ2pFaGUsS0FBSzh4QixhQUFhOVUsTUFNMUJpVSxFQUF5Qnp3QixVQUFVdTBCLHdCQUEwQixTQUFVOUIsR0FDbkUsSUFBSStCLEVBQWFoMUIsS0FBS20wQixhQUFhYSxXQUMvQnFCLEVBQWtCcjJCLEtBQUt5MEIsT0FBT3hCLEVBQVExUSxFQUFVbVMsUUFDaERnQyxFQUF1QjEyQixLQUFLeTBCLE9BQU96MEIsS0FBSzJ4QixhQUFjcFAsRUFBVW1TLFFBV3BFLE9BVEkyQixFQUNJSyxFQUF1QjFCLEVBQVdyWSxPQUFTM2MsS0FBSzh4QixhQUFhN1UsS0FDNURqZCxLQUFLOHhCLGFBQWE3VCxPQUduQnlZLEVBQ0MxQixFQUFXclksT0FBUzNjLEtBQUs4eEIsYUFBYTdULE9BQ3ZDamUsS0FBSzh4QixhQUFhN1UsS0FLOUJnVSxFQUF5Qnp3QixVQUFVMDBCLGdDQUFrQyxTQUFVbkQsR0FDM0UsSUFBSXJxQixFQUFLckksRUFDTDJVLEVBQUtoVSxLQUFLbTBCLGFBQWNtQixFQUFldGhCLEVBQUdzaEIsYUFBY0MsRUFBbUJ2aEIsRUFBR3VoQixpQkFBa0JOLEVBQWNqaEIsRUFBR2loQixZQUFhSSxFQUFlcmhCLEVBQUdxaEIsYUFDaEpzQixFQUFRNTBCLE9BQU9pZSxLQUFLK1IsR0FDeEIsSUFDSSxJQUFLLElBQUk2RSxHQUFVLFFBQVNELEdBQVFFLEVBQVlELEVBQVFwdUIsUUFBU3F1QixFQUFVcHVCLEtBQU1vdUIsRUFBWUQsRUFBUXB1QixPQUFRLENBQ3pHLElBQUlzdUIsRUFBT0QsRUFBVXJ3QixNQUNqQkEsRUFBUXVyQixFQUFTK0UsSUFBUyxHQUMxQjkyQixLQUFLc3hCLGtDQUNLLFNBQVR3RixHQUE0QixVQUFUQSxHQU14QnR3QixHQUFTK3VCLEVBQWlCdUIsR0FHckI5MkIsS0FBS3F4QixrQkFDTyxRQUFUeUYsRUFDQXR3QixHQUFTOHVCLEVBQWEzYSxFQUVSLFdBQVRtYyxFQUNMdHdCLEdBQVM4dUIsRUFBYTNhLEVBRVIsU0FBVG1jLEVBQ0x0d0IsR0FBUzh1QixFQUFhN2EsRUFHdEJqVSxHQUFTOHVCLEVBQWE3YSxHQUc5QnNYLEVBQVMrRSxHQUFRdHdCLEdBdEJidXJCLEVBQVMrRSxJQUFTekIsRUFBYTVwQixNQUFRd3BCLEVBQVl4cEIsT0FBUyxHQXlCeEUsTUFBTzlDLEdBQVNqQixFQUFNLENBQUVrQixNQUFPRCxHQUMvQixRQUNJLElBQ1FrdUIsSUFBY0EsRUFBVXB1QixPQUFTcEosRUFBS3UzQixFQUFRL3RCLFNBQVN4SixFQUFHK0UsS0FBS3d5QixHQUV2RSxRQUFVLEdBQUlsdkIsRUFBSyxNQUFNQSxFQUFJa0IsU0FPckNxb0IsRUFBeUJ6d0IsVUFBVXl6QixrQkFBb0IsV0FDbkQsSUFBSTl2QixFQUFRbkUsS0FDUnVwQixFQUFnQnZwQixLQUFLOEIsUUFBUW93QixZQUM3QjZFLEVBQWdCOTNCLFNBQVMwSyxlQUN6QjNKLEtBQUs4QixRQUFRbXdCLHFCQUFxQmh6QixTQUFTMEssZ0JBQzNDNGYsR0FBaUJ3TixJQUtqQnJ4QixZQUFXLFdBQ1B2QixFQUFNckMsUUFBUSt3QixpQkFDZjl1QixFQUFRb2Ysc0JBR25COE4sRUFBeUJ6d0IsVUFBVWkwQixPQUFTLFNBQVV4QixFQUFRK0QsR0FDMUQsT0FBT2g0QixRQUFRaTBCLEVBQVMrRCxJQUU1Qi9GLEVBQXlCendCLFVBQVVrMUIsT0FBUyxTQUFVekMsRUFBUStELEdBQzFELE9BQU8vRCxFQUFTK0QsR0FFcEIvRixFQUF5Qnp3QixVQUFVNDFCLFNBQVcsU0FBVW5ELEVBQVErRCxHQUM1RCxPQUFPL0QsRUFBUytELEdBTXBCL0YsRUFBeUJ6d0IsVUFBVWt6QixTQUFXLFNBQVV1RCxHQUNwRCxNQUFzQixpQkFBUkEsR0FBb0J2RCxTQUFTdUQsSUFFeENoRyxFQTNoQmtDLENBNGhCM0MsZUMxaEJFaUcsRUFBZ0MsU0FBVWh6QixHQUUxQyxTQUFTZ3pCLElBQ0wsT0FBa0IsT0FBWGh6QixHQUFtQkEsRUFBT2hFLE1BQU1GLEtBQU1GLFlBQWNFLEtBNkovRCxPQS9KQSxRQUFVazNCLEVBQWdCaHpCLEdBSTFCZ3pCLEVBQWUzMkIsU0FBVyxTQUFVYixHQUNoQyxPQUFPLElBQUl3M0IsRUFBZXgzQixJQUU5QnczQixFQUFlMTJCLFVBQVVGLG1CQUFxQixXQUMxQyxJQUFJNkQsRUFBUW5FLEtBQ1JtM0IsRUFBV24zQixLQUFLTixLQUFLNEssY0FDekJ0SyxLQUFLbzNCLGNBQWdCRCxHQUFZQSxFQUFTcHdCLFVBQVUyRSxTQUFTdEosRUFBV3FnQixRQUFVMFUsRUFBVyxLQUN6Rm4zQixLQUFLTixLQUFLcUgsVUFBVTJFLFNBQVN0SixFQUFXd2dCLFFBQ3hDNWlCLEtBQUt3ekIsa0JBQWlCLEdBRTFCeHpCLEtBQUs2UyxjQUFnQixTQUFVMFUsR0FDM0JwakIsRUFBTXhFLFdBQVdrVCxjQUFjMFUsSUFFbkN2bkIsS0FBS2swQixnQkFBa0IsU0FBVTNNLEdBQzdCcGpCLEVBQU14RSxXQUFXdTBCLGdCQUFnQjNNLElBSXJDdm5CLEtBQUtxM0IsMEJBQTRCLFdBQzdCcDRCLFNBQVN3VixLQUFLelQsaUJBQWlCLFFBQVNtRCxFQUFNK3ZCLGdCQUFpQixDQUFFb0QsU0FBUyxLQUU5RXQzQixLQUFLdTNCLDRCQUE4QixXQUMvQnQ0QixTQUFTd1YsS0FBS3ZULG9CQUFvQixRQUFTaUQsRUFBTSt2QixnQkFBaUIsQ0FBRW9ELFNBQVMsS0FFakZ0M0IsS0FBS1ksT0FBTyxVQUFXWixLQUFLNlMsZUFDNUI3UyxLQUFLWSxPQUFPMEMsRUFBUW1MLGFBQWN6TyxLQUFLcTNCLDJCQUN2Q3IzQixLQUFLWSxPQUFPMEMsRUFBUTRLLGFBQWNsTyxLQUFLdTNCLDhCQUUzQ0wsRUFBZTEyQixVQUFVRyxRQUFVLFdBQy9CWCxLQUFLaUIsU0FBUyxVQUFXakIsS0FBSzZTLGVBQzlCN1MsS0FBS2lCLFNBQVNxQyxFQUFRbUwsYUFBY3pPLEtBQUtxM0IsMkJBQ3pDcjNCLEtBQUtpQixTQUFTcUMsRUFBUTRLLGFBQWNsTyxLQUFLdTNCLDZCQUN6Q3J6QixFQUFPMUQsVUFBVUcsUUFBUXlELEtBQUtwRSxPQUVsQ2szQixFQUFlMTJCLFVBQVV1UixPQUFTLFdBQzlCLE9BQU8vUixLQUFLTCxXQUFXb1MsVUFFM0JtbEIsRUFBZTEyQixVQUFVOFEsS0FBTyxXQUM1QnRSLEtBQUtMLFdBQVcyUixRQUVwQjRsQixFQUFlMTJCLFVBQVVrUixNQUFRLFNBQVVsSCxRQUNkLElBQXJCQSxJQUErQkEsR0FBbUIsR0FDdER4SyxLQUFLTCxXQUFXK1IsTUFBTWxILElBRTFCekksT0FBT0MsZUFBZWsxQixFQUFlMTJCLFVBQVcsWUFBYSxDQUN6RDhGLElBQUssU0FBVXd0QixHQUNYOXpCLEtBQUtMLFdBQVdrMEIsYUFBYUMsSUFFakM1eEIsWUFBWSxFQUNaQyxjQUFjLElBR2xCKzBCLEVBQWUxMkIsVUFBVTh5QixhQUFlLFNBQVVDLEdBQzlDdnpCLEtBQUtMLFdBQVcyekIsYUFBYUMsSUFHakMyRCxFQUFlMTJCLFVBQVVnM0IsNEJBQThCLFNBQVV4aUIsR0FDN0RoVixLQUFLbzNCLGNBQWdCcGlCLEdBR3pCa2lCLEVBQWUxMkIsVUFBVWd6QixpQkFBbUIsU0FBVWlFLEdBQzlDQSxFQUNBejNCLEtBQUtOLEtBQUtxSCxVQUFVQyxJQUFJNUUsRUFBV3dnQixPQUduQzVpQixLQUFLTixLQUFLcUgsVUFBVUksT0FBTy9FLEVBQVd3Z0IsT0FFMUM1aUIsS0FBS0wsV0FBVzZ6QixpQkFBaUJpRSxJQUdyQ1AsRUFBZTEyQixVQUFVaXpCLG9CQUFzQixTQUFVaFosRUFBR0UsR0FDeEQzYSxLQUFLTCxXQUFXOHpCLG9CQUFvQmhaLEVBQUdFLEdBQ3ZDM2EsS0FBS3N6QixjQUFhLElBS3RCNEQsRUFBZTEyQixVQUFVd3lCLGdCQUFrQixTQUFVQyxHQUNqRGp6QixLQUFLTCxXQUFXcXpCLGdCQUFnQkMsSUFFcENpRSxFQUFlMTJCLFVBQVU0eUIsZ0JBQWtCLFNBQVVDLEdBQ2pEcnpCLEtBQUtMLFdBQVd5ekIsZ0JBQWdCQyxJQUVwQzZELEVBQWUxMkIsVUFBVUoscUJBQXVCLFdBQzVDLElBQUkrRCxFQUFRbkUsS0FxRVosT0FBTyxJQUFJaXhCLEVBakVHLENBQ1Z2c0IsU0FBVSxTQUFVb0MsR0FBYSxPQUFPM0MsRUFBTXpFLEtBQUtxSCxVQUFVQyxJQUFJRixJQUNqRTlCLFlBQWEsU0FBVThCLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVUksT0FBT0wsSUFDdkV3SixTQUFVLFNBQVV4SixHQUFhLE9BQU8zQyxFQUFNekUsS0FBS3FILFVBQVUyRSxTQUFTNUUsSUFDdEVrckIsVUFBVyxXQUFjLFFBQVM3dEIsRUFBTWl6QixlQUN4Q3RFLFlBQWEsV0FDVCxPQUFPM3VCLEVBQU1oRCxLQUFLOHZCLEVBQXlCM3RCLFFBQVE0SyxhQUFjLEtBRXJFdUMsY0FBZSxXQUNYdE0sRUFBTWhELEtBQUs4dkIsRUFBeUIzdEIsUUFBUThLLGNBQWUsS0FFL0Qya0IsV0FBWSxXQUNSLE9BQU81dUIsRUFBTWhELEtBQUs4dkIsRUFBeUIzdEIsUUFBUW1MLGFBQWMsS0FFckV3akIscUJBQXNCLFNBQVU3eUIsR0FBTSxPQUFPK0UsRUFBTXpFLEtBQUtnTSxTQUFTdE0sSUFDakUreUIsTUFBTyxXQUNILE1BQXNFLFFBQS9Edm1CLGlCQUFpQnpILEVBQU16RSxNQUFNZzRCLGlCQUFpQixjQUV6RC9FLG1CQUFvQixTQUFVZ0YsR0FDMUIsSUFBSS9lLEdBQWUsT0FBdUJqUyxPQUFRLGFBQWUsVUFDakV4QyxFQUFNekUsS0FBS0osTUFBTWtYLFlBQVlvQyxFQUFjK2UsSUFFL0N6RixVQUFXLFdBQWMsT0FBT2p6QixTQUFTMEssZ0JBQWtCeEYsRUFBTXpFLE1BQ2pFa3pCLFVBQVcsV0FDUHp1QixFQUFNeXpCLGNBQ0YzNEIsU0FBUzBLLGVBRWpCa3BCLGFBQWMsV0FDTjF1QixFQUFNekUsS0FBS2dNLFNBQVN6TSxTQUFTMEssZ0JBQ3pCeEYsRUFBTXl6QixlQUFpQnp6QixFQUFNeXpCLGNBQWNudEIsT0FDM0N0RyxFQUFNeXpCLGNBQWNudEIsU0FJaEMybkIsbUJBQW9CLFdBQ2hCLE1BQU8sQ0FDSDNtQixNQUFPdEgsRUFBTXpFLEtBQUt1SCxZQUNsQjBWLE9BQVF4WSxFQUFNekUsS0FBS3dWLGVBRzNCbWQsb0JBQXFCLFdBQWMsT0FBT2x1QixFQUFNaXpCLGNBQzVDanpCLEVBQU1pekIsY0FBYzVyQix3QkFDcEIsTUFDSjhtQixvQkFBcUIsV0FDakIsTUFBTyxDQUFFN21CLE1BQU85RSxPQUFPa3hCLFdBQVlsYixPQUFRaFcsT0FBT214QixjQUV0RHZGLGtCQUFtQixXQUNmLE1BQU8sQ0FBRTltQixNQUFPeE0sU0FBU3dWLEtBQUtzakIsWUFBYXBiLE9BQVExZCxTQUFTd1YsS0FBS2MsZUFFckVpZCxnQkFBaUIsV0FDYixNQUFPLENBQUUvWCxFQUFHOVQsT0FBTytULFlBQWFDLEVBQUdoVSxPQUFPaVUsY0FFOUM2WCxZQUFhLFNBQVVWLEdBQ25CLElBQUlpRyxFQUFXN3pCLEVBQU16RSxLQUNyQnM0QixFQUFTMTRCLE1BQU0wZCxLQUFPLFNBQVUrVSxFQUFXQSxFQUFTL1UsS0FBTyxLQUFPLEdBQ2xFZ2IsRUFBUzE0QixNQUFNMGUsTUFBUSxVQUFXK1QsRUFBV0EsRUFBUy9ULE1BQVEsS0FBTyxHQUNyRWdhLEVBQVMxNEIsTUFBTTJkLElBQU0sUUFBUzhVLEVBQVdBLEVBQVM5VSxJQUFNLEtBQU8sR0FDL0QrYSxFQUFTMTRCLE1BQU0yZSxPQUNYLFdBQVk4VCxFQUFXQSxFQUFTOVQsT0FBUyxLQUFPLElBRXhEeVUsYUFBYyxTQUFVL1YsR0FDcEJ4WSxFQUFNekUsS0FBS0osTUFBTWl5QixVQUFZNVUsTUFNbEN1YSxFQWhLd0IsQ0FpS2pDLEtIdEtFLEVBQWEsQ0FDYmUsd0JBQXlCLDBCQUN6QkMscUJBQXNCLDRCQUN0Qi8wQixLQUFNLFlBRU4sRUFBVSxDQUNWSSxrQkFBbUIsZUFDbkI0MEIsbUJBQW9CLGdCQUNwQjFULGtCQUFtQix5QkFDbkIyVCxjQUFlLGlDQUNmQyxlQUFnQixvQkFFaEIsRUFBVSxDQUNWQyxrQkFBbUIsSUFHdkIsU0FBV3BRLEdBQ1BBLEVBQWtCQSxFQUF3QixLQUFJLEdBQUssT0FDbkRBLEVBQWtCQSxFQUE2QixVQUFJLEdBQUssWUFDeERBLEVBQWtCQSxFQUE4QixXQUFJLEdBQUssYUFDekRBLEVBQWtCQSxFQUE2QixVQUFJLEdBQUssWUFKNUQsQ0FLR0EsSUFBc0JBLEVBQW9CLEtJaEI3QyxJQUFJcVEsRUFBbUMsU0FBVXIwQixHQUU3QyxTQUFTcTBCLEVBQWtCejJCLEdBQ3ZCLElBQUlxQyxFQUFRRCxFQUFPRSxLQUFLcEUsTUFBTSxTQUFTLFFBQVMsR0FBSXU0QixFQUFrQmwwQixnQkFBaUJ2QyxLQUFhOUIsS0FJcEcsT0FIQW1FLEVBQU1zdEIseUJBQTJCLEVBQ2pDdHRCLEVBQU1xMEIsa0JBQW9CdFEsRUFBa0J1USxVQUM1Q3QwQixFQUFNb2tCLGVBQWlCLEVBQ2hCcGtCLEVBcUpYLE9BM0pBLFFBQVVvMEIsRUFBbUJyMEIsR0FRN0JuQyxPQUFPQyxlQUFldTJCLEVBQW1CLGFBQWMsQ0FDbkR0MkIsSUFBSyxXQUNELE9BQU8sR0FFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFldTJCLEVBQW1CLFVBQVcsQ0FDaER0MkIsSUFBSyxXQUNELE9BQU8sR0FFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFldTJCLEVBQW1CLFVBQVcsQ0FDaER0MkIsSUFBSyxXQUNELE9BQU8sR0FFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFldTJCLEVBQW1CLGlCQUFrQixDQUl2RHQyQixJQUFLLFdBRUQsTUFBTyxDQUNIeTJCLHlCQUEwQixhQUMxQkMsOEJBQStCLGFBQy9CQyw2QkFBOEIsYUFDOUJDLGtDQUFtQyxhQUNuQ0MscUJBQXNCLFdBQWMsT0FBTyxHQUMzQ0MsYUFBYyxhQUNkQyxnQkFBaUIsV0FBYyxPQUFRLEdBQ3ZDQyxlQUFnQixhQUNoQkMsaUJBQWtCLFdBQWMsT0FBTyxHQUN2Q25ULGlCQUFrQixhQUNsQm9ULGNBQWUsYUFDZkMsZ0NBQWlDLFdBQWMsT0FBUSxHQUN2REMsd0JBQXlCLFdBQWMsT0FBTyxLQUl0RG4zQixZQUFZLEVBQ1pDLGNBQWMsSUFFbEJvMkIsRUFBa0IvM0IsVUFBVUcsUUFBVSxXQUM5QlgsS0FBS3l4QiwwQkFDTG5zQixhQUFhdEYsS0FBS3l4QiwwQkFFdEJ6eEIsS0FBSzhCLFFBQVFpM0IsZ0JBRWpCUixFQUFrQi8zQixVQUFVcVMsY0FBZ0IsU0FBVXZSLEdBQ2xELElBQUk4SyxFQUFNOUssRUFBSThLLElBQUsyRyxFQUFVelIsRUFBSXlSLFNBQ2IsUUFBUjNHLEdBQTZCLElBQVoyRyxJQUV6Qi9TLEtBQUs4QixRQUFRaTNCLGNBQXFDLElBRzFEUixFQUFrQi8zQixVQUFVODRCLGlCQUFtQixTQUFVaEosR0FDckQsSUFBSW5zQixFQUFRbkUsS0FDUjZsQixFQUFRN2xCLEtBQUs4QixRQUFRazNCLGdCQUFnQjFJLEdBQ3JDekssRUFBUSxJQUdaN2xCLEtBQUs4QixRQUFRbTNCLGVBQWUsQ0FBRXBULE1BQU9BLElBQ3JDN2xCLEtBQUs4QixRQUFRaTNCLGVBRWIvNEIsS0FBS3l4Qix5QkFBMkIvckIsWUFBVyxXQUV2QyxJQUFJNnpCLEVBQWtCcDFCLEVBQU1yQyxRQUFRazNCLGdCQUFnQjFJLEdBQ2hEaUosR0FBbUIsR0FDbkJwMUIsRUFBTXJDLFFBQVF1M0Isd0JBQXdCRSxJQUN0Q3AxQixFQUFNK21CLGlCQUFpQnFPLEtBRTVCdEksRUFBeUJsdEIsUUFBUWlmLDZCQUV4Q3VWLEVBQWtCLzNCLFVBQVVnNUIsd0JBQTBCLFdBQ2xELE9BQVF4NUIsS0FBS3c0QixtQkFDVCxLQUFLdFEsRUFBa0J1UixXQUNuQno1QixLQUFLOEIsUUFBUWlrQixpQkFBaUIsR0FDOUIsTUFDSixLQUFLbUMsRUFBa0J3UixVQUNuQjE1QixLQUFLOEIsUUFBUWlrQixpQkFBaUIvbEIsS0FBSzhCLFFBQVFvM0IsbUJBQXFCLEdBQ2hFLE1BQ0osS0FBS2hSLEVBQWtCeVIsS0FFbkIsTUFDSixRQUNJMzVCLEtBQUs4QixRQUFRcTNCLGtCQVN6QlosRUFBa0IvM0IsVUFBVW81QixxQkFBdUIsU0FBVUMsR0FDekQ3NUIsS0FBS3c0QixrQkFBb0JxQixHQUc3QnRCLEVBQWtCLzNCLFVBQVV5cUIsaUJBQW1CLFdBQzNDLE9BQU9qckIsS0FBS3VvQixlQU1oQmdRLEVBQWtCLzNCLFVBQVUwcUIsaUJBQW1CLFNBQVVyRixHQUVyRCxHQURBN2xCLEtBQUs4NUIsZUFBZWpVLElBQ2Y3bEIsS0FBSzhCLFFBQVF1M0Isd0JBQXdCeFQsR0FDdEMsTUFBTSxJQUFJbmxCLE1BQU0sNkRBRXBCLElBQUlxNUIsRUFBb0IvNUIsS0FBSzhCLFFBQVFzM0IsZ0NBQWdDdlQsR0FDakVrVSxHQUFxQixJQUNyQi81QixLQUFLOEIsUUFBUSsyQixrQ0FBa0NrQixFQUFtQixxQkFDbEUvNUIsS0FBSzhCLFFBQVE2MkIsOEJBQThCb0IsRUFBbUIsNEJBRWxFLzVCLEtBQUs4QixRQUFRNDJCLHlCQUF5QjdTLEVBQU8sMkJBQzdDN2xCLEtBQUs4QixRQUFRODJCLDZCQUE2Qi9TLEVBQU8sb0JBQTJCLFFBQzVFN2xCLEtBQUt1b0IsY0FBZ0IxQyxHQU96QjBTLEVBQWtCLzNCLFVBQVVvc0IsV0FBYSxTQUFVL0csRUFBT3VCLEdBQ3REcG5CLEtBQUs4NUIsZUFBZWpVLEdBQ2hCdUIsR0FDQXBuQixLQUFLOEIsUUFBUTYyQiw4QkFBOEI5UyxFQUFPLDRCQUNsRDdsQixLQUFLOEIsUUFBUTgyQiw2QkFBNkIvUyxFQUFPLHFCQUE0QixXQUc3RTdsQixLQUFLOEIsUUFBUTQyQix5QkFBeUI3UyxFQUFPLDRCQUM3QzdsQixLQUFLOEIsUUFBUTgyQiw2QkFBNkIvUyxFQUFPLHFCQUE0QixVQUdyRjBTLEVBQWtCLzNCLFVBQVVzNUIsZUFBaUIsU0FBVWpVLEdBQ25ELElBQUltVSxFQUFXaDZCLEtBQUs4QixRQUFRbzNCLG1CQUU1QixLQURxQnJULEdBQVMsR0FBS0EsRUFBUW1VLEdBRXZDLE1BQU0sSUFBSXQ1QixNQUFNLHdEQUdqQjYzQixFQTVKMkIsQ0E2SnBDLEtDeEpFMEIsR0FBeUIsU0FBVS8xQixHQUVuQyxTQUFTKzFCLElBQ0wsT0FBa0IsT0FBWC8xQixHQUFtQkEsRUFBT2hFLE1BQU1GLEtBQU1GLFlBQWNFLEtBZ1QvRCxPQWxUQSxRQUFVaTZCLEVBQVMvMUIsR0FJbkIrMUIsRUFBUTE1QixTQUFXLFNBQVViLEdBQ3pCLE9BQU8sSUFBSXU2QixFQUFRdjZCLElBRXZCdTZCLEVBQVF6NUIsVUFBVVAsV0FBYSxTQUFVaTZCLEVBQW9CQyxRQUM5QixJQUF2QkQsSUFBaUNBLEVBQXFCLFNBQVU5NkIsR0FBTSxPQUFPLElBQUk4M0IsRUFBZTkzQixVQUNoRixJQUFoQis2QixJQUEwQkEsRUFBYyxTQUFVLzZCLEdBQU0sT0FBTyxJQUFJeXZCLEVBQVF6dkIsS0FDL0VZLEtBQUtrNkIsbUJBQXFCQSxFQUMxQmw2QixLQUFLbTZCLFlBQWNBLEdBRXZCRixFQUFRejVCLFVBQVVGLG1CQUFxQixXQUNuQyxJQUFJNkQsRUFBUW5FLEtBQ1pBLEtBQUtvNkIsWUFBY3A2QixLQUFLazZCLG1CQUFtQmw2QixLQUFLTixNQUNoRCxJQUFJMjZCLEVBQU9yNkIsS0FBS04sS0FBS3dKLGNBQWMsaUJBQy9CbXhCLEdBQ0FyNkIsS0FBS3E2QixLQUFPcjZCLEtBQUttNkIsWUFBWUUsR0FDN0JyNkIsS0FBS3E2QixLQUFLalMsV0FBWSxHQUd0QnBvQixLQUFLcTZCLEtBQU8sS0FFaEJyNkIsS0FBSzZTLGNBQWdCLFNBQVV2UixHQUMzQjZDLEVBQU14RSxXQUFXa1QsY0FBY3ZSLElBRW5DdEIsS0FBS3M1QixpQkFBbUIsU0FBVWg0QixHQUM5QjZDLEVBQU14RSxXQUFXMjVCLGlCQUFpQm4xQixFQUFNbTJCLE1BQU1oNUIsRUFBSUcsT0FBT29rQixTQUU3RDdsQixLQUFLdzVCLHdCQUEwQixXQUMzQnIxQixFQUFNeEUsV0FBVzY1QiwyQkFFckJ4NUIsS0FBS282QixZQUFZeDVCLE9BQU9xd0IsRUFBeUIzdEIsUUFBUW1MLGFBQWN6TyxLQUFLdzVCLHlCQUM1RXg1QixLQUFLWSxPQUFPLFVBQVdaLEtBQUs2UyxlQUM1QjdTLEtBQUtZLE9BQU91bkIsRUFBa0I3a0IsUUFBUXNnQixhQUFjNWpCLEtBQUtzNUIsbUJBRTdEVyxFQUFRejVCLFVBQVVHLFFBQVUsV0FDcEJYLEtBQUtxNkIsTUFDTHI2QixLQUFLcTZCLEtBQUsxNUIsVUFFZFgsS0FBS282QixZQUFZejVCLFVBQ2pCWCxLQUFLbzZCLFlBQVluNUIsU0FBU2d3QixFQUF5QjN0QixRQUFRbUwsYUFBY3pPLEtBQUt3NUIseUJBQzlFeDVCLEtBQUtpQixTQUFTLFVBQVdqQixLQUFLNlMsZUFDOUI3UyxLQUFLaUIsU0FBU2tuQixFQUFrQjdrQixRQUFRc2dCLGFBQWM1akIsS0FBS3M1QixrQkFDM0RwMUIsRUFBTzFELFVBQVVHLFFBQVF5RCxLQUFLcEUsT0FFbEMrQixPQUFPQyxlQUFlaTRCLEVBQVF6NUIsVUFBVyxPQUFRLENBQzdDeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLbzZCLFlBQVlyb0IsVUFFNUJ6TCxJQUFLLFNBQVVFLEdBQ1BBLEVBQ0F4RyxLQUFLbzZCLFlBQVk5b0IsT0FHakJ0UixLQUFLbzZCLFlBQVkxb0IsU0FHekJ4UCxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVpNEIsRUFBUXo1QixVQUFXLFlBQWEsQ0FDbER5QixJQUFLLFdBQ0QsUUFBT2pDLEtBQUtxNkIsTUFBT3I2QixLQUFLcTZCLEtBQUtqUyxXQUVqQzloQixJQUFLLFNBQVVFLEdBQ1B4RyxLQUFLcTZCLE9BQ0xyNkIsS0FBS3E2QixLQUFLalMsVUFBWTVoQixJQUc5QnRFLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZWk0QixFQUFRejVCLFVBQVcsZUFBZ0IsQ0FLckQ4RixJQUFLLFNBQVVFLEdBQ1B4RyxLQUFLcTZCLE9BQ0xyNkIsS0FBS3E2QixLQUFLeFIsYUFBZXJpQixJQUdqQ3RFLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZWk0QixFQUFRejVCLFVBQVcsc0JBQXVCLENBSTVEeUIsSUFBSyxXQUNELFFBQU9qQyxLQUFLcTZCLE1BQU9yNkIsS0FBS3E2QixLQUFLRSxxQkFFakNyNEIsWUFBWSxFQUNaQyxjQUFjLElBZWxCODNCLEVBQVF6NUIsVUFBVTB0QixtQkFBcUIsU0FBVXBJLEVBQVVxSSxHQUN2RCxPQUFJbnVCLEtBQUtxNkIsS0FDRXI2QixLQUFLcTZCLEtBQUtuTSxtQkFBbUJwSSxFQUFVcUksSUFFMUMsR0FNWjhMLEVBQVF6NUIsVUFBVXVQLE9BQVMsV0FDbkIvUCxLQUFLcTZCLE1BQ0xyNkIsS0FBS3E2QixLQUFLdHFCLFVBR2xCaE8sT0FBT0MsZUFBZWk0QixFQUFRejVCLFVBQVcsUUFBUyxDQU05Q3lCLElBQUssV0FDRCxPQUFPakMsS0FBS3E2QixLQUFPcjZCLEtBQUtxNkIsS0FBSzlKLGFBQWUsSUFFaERydUIsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlaTRCLEVBQVF6NUIsVUFBVyxrQkFBbUIsQ0FPeEQ4RixJQUFLLFNBQVVrMEIsR0FDUHg2QixLQUFLcTZCLE9BQ0xyNkIsS0FBS3E2QixLQUFLRyxnQkFBa0JBLElBR3BDdDRCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZWk0QixFQUFRejVCLFVBQVcsZ0JBQWlCLENBTXREeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLcTZCLEtBQU9yNkIsS0FBS3E2QixLQUFLOVIsY0FBZ0IsZUFPakRqaUIsSUFBSyxTQUFVdWYsR0FDUDdsQixLQUFLcTZCLE9BQ0xyNkIsS0FBS3E2QixLQUFLOVIsY0FBZ0IxQyxJQUdsQzNqQixZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVpNEIsRUFBUXo1QixVQUFXLFlBQWEsQ0FDbEQ4RixJQUFLLFNBQVV3dEIsR0FDWDl6QixLQUFLbzZCLFlBQVl0RyxVQUFZQSxHQUVqQzV4QixZQUFZLEVBQ1pDLGNBQWMsSUFRbEI4M0IsRUFBUXo1QixVQUFVbzVCLHFCQUF1QixTQUFVQyxHQUMvQzc1QixLQUFLTCxXQUFXaTZCLHFCQUFxQkMsSUFLekNJLEVBQVF6NUIsVUFBVXd5QixnQkFBa0IsU0FBVUMsR0FDMUNqekIsS0FBS282QixZQUFZcEgsZ0JBQWdCQyxJQUVyQ2dILEVBQVF6NUIsVUFBVTR5QixnQkFBa0IsU0FBVUMsR0FDMUNyekIsS0FBS282QixZQUFZaEgsZ0JBQWdCQyxJQU1yQzRHLEVBQVF6NUIsVUFBVTBxQixpQkFBbUIsU0FBVXJGLEdBQzNDN2xCLEtBQUtMLFdBQVd1ckIsaUJBQWlCckYsSUFPckNvVSxFQUFRejVCLFVBQVVvc0IsV0FBYSxTQUFVL0csRUFBT3VCLEdBQzVDcG5CLEtBQUtMLFdBQVdpdEIsV0FBVy9HLEVBQU91QixJQUt0QzZTLEVBQVF6NUIsVUFBVWk2QixpQkFBbUIsU0FBVTVVLEdBRTNDLE9BQUlBLEVBRFE3bEIsS0FBS3M2QixNQUNDdjZCLE9BQ1BDLEtBQUtzNkIsTUFBTXpVLEdBR1gsTUFPZm9VLEVBQVF6NUIsVUFBVXNwQixzQkFBd0IsU0FBVWpFLEdBQ2hELElBQUlvSyxFQUFPandCLEtBQUt5NkIsaUJBQWlCNVUsR0FDakMsT0FBSW9LLEdBQVFqd0IsS0FBS3E2QixNQUNOcjZCLEtBQUtxNkIsS0FBS3JLLGVBQWVDLElBRTdCLElBRVhnSyxFQUFRejVCLFVBQVVnekIsaUJBQW1CLFNBQVVpRSxHQUMzQ3ozQixLQUFLbzZCLFlBQVk1RyxpQkFBaUJpRSxJQUV0Q3dDLEVBQVF6NUIsVUFBVTh5QixhQUFlLFNBQVVDLEdBQ3ZDdnpCLEtBQUtvNkIsWUFBWTlHLGFBQWFDLElBRWxDMEcsRUFBUXo1QixVQUFVaXpCLG9CQUFzQixTQUFVaFosRUFBR0UsR0FDakQzYSxLQUFLbzZCLFlBQVkzRyxvQkFBb0JoWixFQUFHRSxJQUs1Q3NmLEVBQVF6NUIsVUFBVWs2QixpQkFBbUIsU0FBVTFsQixHQUMzQ2hWLEtBQUtvNkIsWUFBWWhELGNBQWdCcGlCLEdBRXJDaWxCLEVBQVF6NUIsVUFBVUoscUJBQXVCLFdBQ3JDLElBQUkrRCxFQUFRbkUsS0FtRFosT0FBTyxJQUFJdTRCLEVBL0NHLENBQ1ZHLHlCQUEwQixTQUFVN1MsRUFBTy9lLEdBQzVCM0MsRUFBTW0yQixNQUNaelUsR0FBTzllLFVBQVVDLElBQUlGLElBRTlCNnhCLDhCQUErQixTQUFVOVMsRUFBTy9lLEdBQ2pDM0MsRUFBTW0yQixNQUNaelUsR0FBTzllLFVBQVVJLE9BQU9MLElBRWpDOHhCLDZCQUE4QixTQUFVL1MsRUFBT3plLEVBQU1aLEdBQ3RDckMsRUFBTW0yQixNQUNaelUsR0FBT3hlLGFBQWFELEVBQU1aLElBRW5DcXlCLGtDQUFtQyxTQUFVaFQsRUFBT3plLEdBQ3JDakQsRUFBTW0yQixNQUNaelUsR0FBT25mLGdCQUFnQlUsSUFFaEMweEIscUJBQXNCLFNBQVU5akIsRUFBU2xPLEdBQ3JDLE9BQU9rTyxFQUFRak8sVUFBVTJFLFNBQVM1RSxJQUV0Q2l5QixhQUFjLFNBQVV2dUIsR0FDcEJyRyxFQUFNaTJCLFlBQVkxb0IsTUFBTWxILElBRTVCd3VCLGdCQUFpQixTQUFVaGtCLEdBQVcsT0FBTzdRLEVBQU1tMkIsTUFBTW52QixRQUFRNkosSUFDakVpa0IsZUFBZ0IsU0FBVTczQixHQUN0QitDLEVBQU1oRCxLQUFLLGlCQUF3QixDQUMvQjBrQixNQUFPemtCLEVBQVF5a0IsTUFDZm9LLEtBQU05ckIsRUFBTW0yQixNQUFNbDVCLEVBQVF5a0IsVUFHbENxVCxpQkFBa0IsV0FBYyxPQUFPLzBCLEVBQU1tMkIsTUFBTXY2QixRQUNuRGdtQixpQkFBa0IsU0FBVUYsR0FDeEIxaEIsRUFBTW0yQixNQUFNelUsR0FBT3BiLFNBRXZCMHVCLGNBQWUsV0FDWGgxQixFQUFNekUsS0FBS3dKLGNBQWMsaUJBQXVCdUIsU0FFcEQ0dUIsd0JBQXlCLFNBQVV4VCxHQUMvQixTQUFTLFFBQVExaEIsRUFBTW0yQixNQUFNelUsR0FBUSxJQUFNLHlCQUUvQ3VULGdDQUFpQyxTQUFVdlQsR0FDdkMsSUFDSThVLEdBRG1CLFFBQVF4MkIsRUFBTW0yQixNQUFNelUsR0FBUSxJQUFNLHdCQUNuQjNjLGNBQWMsSUFBTSwyQkFDMUQsT0FBT3l4QixFQUFpQngyQixFQUFNbTJCLE1BQU1udkIsUUFBUXd2QixJQUFtQixNQU1wRVYsRUFuVGlCLENBb1QxQixzQ0M5VEUsR0FBYSxDQUNiVyxVQUFXLHdCQUNYNzNCLFNBQVUsdUJBQ1Y4M0IsUUFBUyxzQkFDVEMsUUFBUyxzQkFDVEMsYUFBYyw0QkFDZEMsU0FBVSx1QkFDVkMsU0FBVSx1QkFDVjkzQixLQUFNLGFBQ04rM0Isa0JBQW1CLGlDQUVuQixHQUFVLENBQ1ZDLGNBQWUsZ0JBQ2ZDLGlCQUFrQixtQkFDbEJDLG1CQUFvQixnQkFDcEJDLGFBQWMsbUJBQ2RDLHNCQUF1Qix1QkFDdkIvakIsZUFBZ0Isc0JBQ2hCZ2tCLHNCQUF1QixvQkFDdkJDLHFCQUFzQixtQkFDdEJDLGNBQWUsb0JBQ2ZDLGlCQUFrQix1QkFDbEJDLHVCQUF3Qiw2QkFDeEJDLHVCQUF3QixzQkFDeEJDLFdBQVksY0FFWixHQUFVLENBQ1ZDLFlBQWEsSUFDYmhYLGFBQWMsRUFDZGlYLDBCQUEyQixLQ3hCM0JDLEdBQXFDLFNBQVUvM0IsR0FPL0MsU0FBUyszQixFQUFvQm42QixFQUFTbzZCLFFBQ1osSUFBbEJBLElBQTRCQSxFQUFnQixJQUNoRCxJQUFJLzNCLEVBQVFELEVBQU9FLEtBQUtwRSxNQUFNLFNBQVMsUUFBUyxHQUFJaThCLEVBQW9CNTNCLGdCQUFpQnZDLEtBQWE5QixLQWdCdEcsT0FkQW1FLEVBQU1xQixVQUFXLEVBS2pCckIsRUFBTWc0QixZQUFhLEVBRW5CaDRCLEVBQU1pNEIsc0JBQXVCLEVBQzdCajRCLEVBQU1rNEIsZ0JBQWlCLEVBQ3ZCbDRCLEVBQU1tNEIsa0JBQW9CLGVBQzFCbjRCLEVBQU1vNEIscUJBQXVCLEVBQzdCcDRCLEVBQU1xNEIsaUJBQWtCLEVBQ3hCcjRCLEVBQU1zNEIsWUFBY1AsRUFBY08sWUFDbEN0NEIsRUFBTXU0QixXQUFhUixFQUFjUSxXQUMxQnY0QixFQThZWCxPQXRhQSxRQUFVODNCLEVBQXFCLzNCLEdBMEIvQm5DLE9BQU9DLGVBQWVpNkIsRUFBcUIsYUFBYyxDQUNyRGg2QixJQUFLLFdBQ0QsT0FBTyxJQUVYQyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVpNkIsRUFBcUIsVUFBVyxDQUNsRGg2QixJQUFLLFdBQ0QsT0FBTyxJQUVYQyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVpNkIsRUFBcUIsVUFBVyxDQUNsRGg2QixJQUFLLFdBQ0QsT0FBTyxJQUVYQyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVpNkIsRUFBcUIsaUJBQWtCLENBSXpEaDZCLElBQUssV0FFRCxNQUFPLENBQ0h5QyxTQUFVLGFBQ1ZNLFlBQWEsYUFDYnNMLFNBQVUsV0FBYyxPQUFPLEdBQy9CcXNCLG1CQUFvQixhQUNwQkMscUJBQXNCLGFBQ3RCM1IsaUJBQWtCLFdBQWMsT0FBUSxHQUN4Q0MsaUJBQWtCLGFBQ2xCMlIsU0FBVSxXQUFjLE9BQU8sR0FDL0JDLFdBQVksYUFDWkMsY0FBZSxXQUFjLE9BQU8sR0FDcENDLGlCQUFrQixhQUNsQkMsV0FBWSxXQUFjLE9BQU8sR0FDakNDLGFBQWMsYUFDZEMsYUFBYyxhQUNkMWtCLGdCQUFpQixhQUNqQjJrQixhQUFjLGFBQ2RDLGdCQUFpQixhQUNqQkMsc0JBQXVCLFdBQWMsT0FBTyxHQUM1Q0Msb0JBQXFCLFdBQWMsTUFBTyxJQUMxQ0Msb0JBQXFCLGFBQ3JCQyx1QkFBd0IsYUFDeEJDLGFBQWMsYUFDZEMsZ0JBQWlCLGFBQ2pCQyxTQUFVLGFBQ1ZDLFVBQVcsYUFDWEMsaUJBQWtCLFdBQWMsT0FBTyxNQUN2Q0MscUJBQXNCLGFBQ3RCQyxvQkFBcUIsYUFDckJDLGlCQUFrQixhQUNsQkMscUJBQXNCLGFBQ3RCaEYsaUJBQWtCLFdBQWMsT0FBTyxHQUN2Q2lGLGtCQUFtQixXQUFjLE1BQU8sSUFDeENDLHVCQUF3QixXQUFjLE1BQU8sSUFDN0N2VCxzQkFBdUIsV0FBYyxPQUFPLEdBQzVDcUQsbUJBQW9CLFdBQWMsT0FBUSxLQUlsRGhzQixZQUFZLEVBQ1pDLGNBQWMsSUFHbEI4NUIsRUFBb0J6N0IsVUFBVXlxQixpQkFBbUIsV0FDN0MsT0FBT2pyQixLQUFLOEIsUUFBUW1wQixvQkFFeEJnUixFQUFvQno3QixVQUFVMHFCLGlCQUFtQixTQUFVckYsRUFBT2dZLEVBQVdRLFFBQ3ZELElBQWRSLElBQXdCQSxHQUFZLFFBQ3JCLElBQWZRLElBQXlCQSxHQUFhLEdBQ3RDeFksR0FBUzdsQixLQUFLOEIsUUFBUW8zQixxQkFHdEJyVCxJQUFVLGVBQ1Y3bEIsS0FBSzhCLFFBQVF1N0IsZ0JBQWdCLElBRzdCcjlCLEtBQUs4QixRQUFRdTdCLGdCQUFnQnI5QixLQUFLOEIsUUFBUXM4Qix1QkFBdUJ2WSxHQUFPMEksUUFFNUV2dUIsS0FBSzhCLFFBQVFvcEIsaUJBQWlCckYsR0FDMUJnWSxHQUNBNzlCLEtBQUs4QixRQUFRKzdCLFlBRVpRLEdBQWNyK0IsS0FBS3M4QixvQkFBc0J6VyxHQUMxQzdsQixLQUFLMkYsZUFFVDNGLEtBQUtzOEIsa0JBQW9CelcsSUFFN0JvVyxFQUFvQno3QixVQUFVODlCLFNBQVcsU0FBVTkzQixFQUFPNjNCLFFBQ25DLElBQWZBLElBQXlCQSxHQUFhLEdBQzFDLElBQUl4WSxFQUFRN2xCLEtBQUs4QixRQUFRcThCLG9CQUFvQmh6QixRQUFRM0UsR0FDckR4RyxLQUFLa3JCLGlCQUFpQnJGLEdBQXdCLEVBQU93WSxJQUV6RHBDLEVBQW9CejdCLFVBQVUrOUIsU0FBVyxXQUNyQyxJQUFJMVksRUFBUTdsQixLQUFLOEIsUUFBUW1wQixtQkFDckJ1VCxFQUFpQngrQixLQUFLOEIsUUFBUXE4QixvQkFDbEMsT0FBT3RZLElBQVUsZUFBc0IyWSxFQUFlM1ksR0FBUyxJQUVuRW9XLEVBQW9CejdCLFVBQVVpK0IsWUFBYyxXQUN4QyxPQUFPeitCLEtBQUt3RixVQUVoQnkyQixFQUFvQno3QixVQUFVK0UsWUFBYyxTQUFVbTVCLEdBQ2xEMStCLEtBQUt3RixTQUFXazVCLEVBQ1oxK0IsS0FBS3dGLFVBQ0x4RixLQUFLOEIsUUFBUTRDLFNBQVMsYUFDdEIxRSxLQUFLOEIsUUFBUSs3QixhQUdiNzlCLEtBQUs4QixRQUFRa0QsWUFBWSxhQUV6QmhGLEtBQUt5OEIsYUFDTHo4QixLQUFLeThCLFlBQVlsM0IsWUFBWXZGLEtBQUt3RixVQUVsQ3hGLEtBQUt3RixTQUdMeEYsS0FBSzhCLFFBQVEyN0IsdUJBQXVCLFlBR3BDejlCLEtBQUs4QixRQUFRMDdCLG9CQUFvQixXQUFZLEtBRWpEeDlCLEtBQUs4QixRQUFRMDdCLG9CQUFvQixnQkFBaUJ4OUIsS0FBS3dGLFNBQVNtNUIsYUFHcEUxQyxFQUFvQno3QixVQUFVbzlCLFNBQVcsV0FDckM1OUIsS0FBSzhCLFFBQVE0QyxTQUFTLGNBQ3RCMUUsS0FBSzhCLFFBQVE4N0IsV0FDYjU5QixLQUFLbThCLFlBQWEsRUFDbEJuOEIsS0FBSzhCLFFBQVEwN0Isb0JBQW9CLGdCQUFpQixTQUt0RHZCLEVBQW9CejdCLFVBQVVvK0IscUJBQXVCLFNBQVVockIsR0FDdkQ1VCxLQUFLMDhCLFlBQ0wxOEIsS0FBSzA4QixXQUFXbUMsV0FBV2pyQixJQU9uQ3FvQixFQUFvQno3QixVQUFVdVAsT0FBUyxXQUNuQyxHQUFJL1AsS0FBSzhCLFFBQVErNkIsV0FBWSxDQUN6QixJQUFJaUMsRUFBaUI5K0IsS0FBS3UrQixXQUFXeCtCLE9BQVMsRUFDMUNteUIsRUFBWWx5QixLQUFLOEIsUUFBUXdPLFNBQVMsWUFDbEN5dUIsRUFBc0JELEdBQWtCNU0sRUFDeENsYixFQUFhaFgsS0FBSzhCLFFBQVF3TyxTQUFTLGFBQ3ZDdFEsS0FBS2s5QixhQUFhNkIsR0FDbEIvK0IsS0FBSzhCLFFBQVFnN0IsV0FBV2lDLEdBQ3hCLytCLEtBQUs4QixRQUFRazdCLGlCQUFpQmhtQixLQU90Q2lsQixFQUFvQno3QixVQUFVdytCLGNBQWdCLFdBQzFDLElBQ0l6VyxFQURpQnZvQixLQUFLOEIsUUFBUXE4QixvQkFDQ2h6QixRQUFRbkwsS0FBS3UrQixZQUNoRHYrQixLQUFLa3JCLGlCQUFpQjNDLEdBQWdDLEdBQXlCLElBRW5GMFQsRUFBb0J6N0IsVUFBVXkrQixpQkFBbUIsV0FDN0MsR0FBZ0QsSUFBNUNqL0IsS0FBSzhCLFFBQVFxOEIsb0JBQW9CcCtCLE9BQXJDLENBSUEsSUFBSXdvQixFQUFnQnZvQixLQUFLaXJCLG1CQUNyQmlVLEVBQWlCM1csR0FBaUIsRUFBSUEsRUFBZ0IsRUFDMUR2b0IsS0FBSzhCLFFBQVFvOEIscUJBQXFCZ0IsS0FFdENqRCxFQUFvQno3QixVQUFVMitCLGtCQUFvQixXQUM5Q24vQixLQUFLOEIsUUFBUTA3QixvQkFBb0IsZ0JBQWlCLFVBRXREdkIsRUFBb0J6N0IsVUFBVTQrQixpQkFBbUIsV0FDN0NwL0IsS0FBSzhCLFFBQVFrRCxZQUFZLGNBQ3pCaEYsS0FBS204QixZQUFhLEVBRWJuOEIsS0FBSzhCLFFBQVF3N0IseUJBQ2R0OUIsS0FBS3EvQixRQU1icEQsRUFBb0J6N0IsVUFBVW1GLGFBQWUsV0FDekMzRixLQUFLK1AsU0FDTC9QLEtBQUs4QixRQUFRczdCLGFBQWFwOUIsS0FBS3UrQixZQUNkditCLEtBQUs4QixRQUFRd08sU0FBUyxjQUNyQnRRLEtBQUtvOEIsc0JBQ25CcDhCLEtBQUtzL0IsU0FBU3QvQixLQUFLdS9CLFlBRzNCdEQsRUFBb0J6N0IsVUFBVWcvQixxQkFBdUIsU0FBVTNaLEdBQzNEN2xCLEtBQUtrckIsaUJBQWlCckYsR0FBd0IsSUFLbERvVyxFQUFvQno3QixVQUFVb2QsWUFBYyxXQUN4QzVkLEtBQUs4QixRQUFRNEMsU0FBUyxZQUN0QjFFLEtBQUsrUCxTQUNML1AsS0FBSzhCLFFBQVE2NkIsc0JBS2pCVixFQUFvQno3QixVQUFVc2QsV0FBYSxXQUNuQzlkLEtBQUttOEIsWUFHVG44QixLQUFLcS9CLFFBRVRwRCxFQUFvQno3QixVQUFVbVMsWUFBYyxTQUFVbVAsR0FDOUM5aEIsS0FBS3dGLFVBQVl4RixLQUFLdzhCLGtCQUcxQng4QixLQUFLeS9CLDBCQUNEei9CLEtBQUttOEIsV0FDTG44QixLQUFLOEIsUUFBUSs3QixhQUdqQjc5QixLQUFLOEIsUUFBUTJXLGdCQUFnQnFKLEdBQzdCOWhCLEtBQUs0OUIsY0FNVDNCLEVBQW9CejdCLFVBQVVxUyxjQUFnQixTQUFVMFUsR0FDcEQsSUFBSXZuQixLQUFLbThCLFlBQWVuOEIsS0FBSzhCLFFBQVF3TyxTQUFTLFlBQTlDLENBR0EsSUFBSXdDLEVBQVV1UyxFQUFha0MsS0FBV3RDLEVBQ2xDOEMsRUFBVTFDLEVBQWFrQyxLQUFXdEMsRUFDbEN5YSxFQUFVcmEsRUFBYWtDLEtBQVd0QyxFQUNsQzBhLEVBQVl0YSxFQUFha0MsS0FBV3RDLEVBR3hDLElBRmlCc0MsRUFBTVMsVUFBV1QsRUFBTVUsV0FHbENGLEdBQVdSLEVBQU1uYixLQUE0QixJQUFyQm1iLEVBQU1uYixJQUFJck0sUUFDaENnb0IsR0FBVy9uQixLQUFLOEIsUUFBUStvQix5QkFBMEIsQ0FDdEQsSUFBSXplLEVBQU0yYixFQUFVLElBQU1SLEVBQU1uYixJQUM1Qnd6QixFQUFxQjUvQixLQUFLOEIsUUFBUW9zQixtQkFBbUI5aEIsRUFBS3BNLEtBQUtpckIsb0JBS25FLE9BSkkyVSxHQUFzQixHQUN0QjUvQixLQUFLa3JCLGlCQUFpQjBVLFFBRTFCclksRUFBTTVCLGtCQUdMN1MsR0FBWWlWLEdBQVkyWCxHQUFZQyxLQUlyQ0QsR0FBVzEvQixLQUFLaXJCLG1CQUFxQixFQUNyQ2pyQixLQUFLa3JCLGlCQUFpQmxyQixLQUFLaXJCLG1CQUFxQixHQUUzQzBVLEdBQ0wzL0IsS0FBS2lyQixtQkFBcUJqckIsS0FBSzhCLFFBQVFvM0IsbUJBQXFCLEdBQzVEbDVCLEtBQUtrckIsaUJBQWlCbHJCLEtBQUtpckIsbUJBQXFCLEdBRXBEanJCLEtBQUs0OUIsV0FDTHJXLEVBQU01QixvQkFLVnNXLEVBQW9CejdCLFVBQVUwOEIsYUFBZSxTQUFVMkMsR0FDbkQsR0FBSzcvQixLQUFLOEIsUUFBUW03QixhQUFsQixDQUdBLElBQUkvSyxFQUFZbHlCLEtBQUs4QixRQUFRd08sU0FBUyxZQUN0QyxHQUFJdXZCLEVBQVcsQ0FDWCxJQUFJQyxFQUFhLGVBQ2JDLEVBQWEvL0IsS0FBSzhCLFFBQVFpN0IsZ0JBQWtCK0MsRUFDaEQ5L0IsS0FBSzhCLFFBQVFvN0IsYUFBYTZDLFFBRXBCN04sR0FDTmx5QixLQUFLOEIsUUFBUXE3QixpQkFNckJsQixFQUFvQno3QixVQUFVdy9CLHdCQUEwQixTQUFVcm1CLEdBQzFEM1osS0FBS3k4QixhQUNMejhCLEtBQUt5OEIsWUFBWXdELGFBQWF0bUIsSUFNdENzaUIsRUFBb0J6N0IsVUFBVTAvQixzQkFBd0IsU0FBVXRzQixHQUN4RDVULEtBQUt5OEIsYUFDTHo4QixLQUFLeThCLFlBQVlvQyxXQUFXanJCLElBR3BDcW9CLEVBQW9CejdCLFVBQVUyL0Isd0JBQTBCLFdBQ3BELE9BQU9uZ0MsS0FBS284QixzQkFFaEJILEVBQW9CejdCLFVBQVU0L0Isd0JBQTBCLFNBQVVoRSxHQUM5RHA4QixLQUFLbzhCLHFCQUF1QkEsR0FFaENILEVBQW9CejdCLFVBQVU4K0IsU0FBVyxTQUFVQyxHQUMxQ3YvQixLQUFLbzhCLHVCQUNOcDhCLEtBQUtxOEIsZUFBaUJrRCxHQUUxQnYvQixLQUFLOEIsUUFBUTA3QixvQkFBb0IsaUJBQWtCK0IsR0FBU1osWUFDeERZLEdBQ0F2L0IsS0FBSzhCLFFBQVFrRCxZQUFZLFlBQ3pCaEYsS0FBSzhCLFFBQVE2N0IsZ0JBQWdCLG1CQUc3QjM5QixLQUFLOEIsUUFBUTRDLFNBQVMsWUFDdEIxRSxLQUFLOEIsUUFBUTQ3QixhQUFhLGtCQUU5QjE5QixLQUFLcWdDLHVCQUF1QmQsSUFFaEN0RCxFQUFvQno3QixVQUFVKytCLFFBQVUsV0FDcEMsT0FBSXYvQixLQUFLbzhCLHNCQUNMcDhCLEtBQUs4QixRQUFRd08sU0FBUyxlQUNyQnRRLEtBQUs4QixRQUFRd08sU0FBUyxhQUdoQnRRLEtBQUtpckIscUJBQXVCLGlCQUNGLElBQTVCanJCLEtBQUtpckIsb0JBQTRCanNCLFFBQVFnQixLQUFLdStCLGFBRWhEditCLEtBQUtxOEIsZ0JBRWhCSixFQUFvQno3QixVQUFVdVcsWUFBYyxTQUFVQyxHQUM5Q0EsRUFDQWhYLEtBQUs4QixRQUFRNEMsU0FBUyxhQUd0QjFFLEtBQUs4QixRQUFRa0QsWUFBWSxhQUU3QmhGLEtBQUs4QixRQUFRMDdCLG9CQUFvQixnQkFBaUJ4bUIsRUFBVzJuQixZQUM3RDMrQixLQUFLOEIsUUFBUWs3QixpQkFBaUJobUIsSUFFbENpbEIsRUFBb0J6N0IsVUFBVTgvQixZQUFjLFdBQ3hDLE1BQTZELFNBQXREdGdDLEtBQUs4QixRQUFReTdCLG9CQUFvQixrQkFFNUN0QixFQUFvQno3QixVQUFVSCxLQUFPLFdBQ2pDLElBQUlrZ0MsRUFBV3ZnQyxLQUFLOEIsUUFBUWc4QixtQkFDeEJ5QyxJQUNBdmdDLEtBQUs4QixRQUFRaThCLHFCQUFxQndDLEdBQ2xDdmdDLEtBQUs4QixRQUFRazhCLG9CQUFvQnhiLEVBQU9nZSxlQUU1Q3hnQyxLQUFLOEIsUUFBUW04QixrQkFBaUIsR0FDOUJqK0IsS0FBS3VGLFlBQVl2RixLQUFLOEIsUUFBUXdPLFNBQVMsY0FDdkN0USxLQUFLcWdDLHdCQUF3QnJnQyxLQUFLOEIsUUFBUXdPLFNBQVMsYUFDbkR0USxLQUFLK1AsU0FDTC9QLEtBQUtnL0IsaUJBS1QvQyxFQUFvQno3QixVQUFVNitCLEtBQU8sV0FDakNyL0IsS0FBSzhCLFFBQVFrRCxZQUFZLFlBQ3pCaEYsS0FBSytQLFNBQ0wvUCxLQUFLOEIsUUFBUTg2Qix1QkFDSTU4QixLQUFLOEIsUUFBUXdPLFNBQVMsY0FDckJ0USxLQUFLbzhCLHNCQUNuQnA4QixLQUFLcy9CLFNBQVN0L0IsS0FBS3UvQixZQUczQnRELEVBQW9CejdCLFVBQVU2L0IsdUJBQXlCLFNBQVVkLEdBQzdELEdBQUt2L0IsS0FBSzA4QixXQUFWLENBR0ExOEIsS0FBSzA4QixXQUFXK0QsWUFBWWxCLEdBQzVCLElBQUltQixFQUFvQjFnQyxLQUFLMDhCLFdBQVdpRSxZQUNwQ0MsRUFBZTVnQyxLQUFLMDhCLFdBQVdtRSxRQUMvQkgsR0FBcUJFLEVBQ3JCNWdDLEtBQUs4QixRQUFRMDdCLG9CQUFvQixvQkFBMEJvRCxHQUszRDVnQyxLQUFLOEIsUUFBUTI3Qix1QkFBdUIsdUJBRzVDeEIsRUFBb0J6N0IsVUFBVWkvQix3QkFBMEIsV0FDcEQsSUFBSXQ3QixFQUFRbkUsS0FDWnNGLGFBQWF0RixLQUFLdThCLHNCQUNsQnY4QixLQUFLdThCLHFCQUF1QjcyQixZQUFXLFdBQ25DdkIsRUFBTXE0QixpQkFBa0IsSUFDekIsOEJBQ0h4OEIsS0FBS3c4QixpQkFBa0IsR0FFcEJQLEVBdmE2QixDQXdhdEMsS0M3YUUsR0FBVSxDQUNWNkUsWUFBYSxjQUNiQyxLQUFNLFFBRU4sR0FBYSxDQUNiQywyQkFBNEIseUNBQzVCQyxzQ0FBdUMscURDSHZDQyxHQUErQyxTQUFVaDlCLEdBRXpELFNBQVNnOUIsRUFBOEJwL0IsR0FDbkMsT0FBT29DLEVBQU9FLEtBQUtwRSxNQUFNLFNBQVMsUUFBUyxHQUFJa2hDLEVBQThCNzhCLGdCQUFpQnZDLEtBQWE5QixLQThIL0csT0FoSUEsUUFBVWtoQyxFQUErQmg5QixHQUl6Q25DLE9BQU9DLGVBQWVrL0IsRUFBK0IsYUFBYyxDQUMvRGovQixJQUFLLFdBQ0QsT0FBTyxJQUVYQyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVrL0IsRUFBK0IsVUFBVyxDQUM1RGovQixJQUFLLFdBQ0QsT0FBTyxJQUVYQyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWVrL0IsRUFBK0IsaUJBQWtCLENBSW5Fai9CLElBQUssV0FFRCxNQUFPLENBQ0h5QyxTQUFVLGFBQ1ZNLFlBQWEsYUFDYnNMLFNBQVUsV0FBYyxPQUFPLEdBQy9CNndCLFFBQVMsYUFDVEMsUUFBUyxXQUFjLE9BQU8sTUFDOUJDLFdBQVksYUFDWnhDLFdBQVksZUFJcEIzOEIsWUFBWSxFQUNaQyxjQUFjLElBS2xCKytCLEVBQThCMWdDLFVBQVVxZ0MsTUFBUSxXQUM1QyxPQUFPN2dDLEtBQUs4QixRQUFRcy9CLFFBQVEsT0FLaENGLEVBQThCMWdDLFVBQVVtZ0MsVUFBWSxXQUNoRCxNQUFxRCxTQUE5QzNnQyxLQUFLOEIsUUFBUXMvQixRQUFRLGlCQUtoQ0YsRUFBOEIxZ0MsVUFBVXErQixXQUFhLFNBQVVqckIsR0FDM0Q1VCxLQUFLOEIsUUFBUSs4QixXQUFXanJCLElBVTVCc3RCLEVBQThCMWdDLFVBQVU4Z0MsY0FBZ0IsU0FBVUMsR0FDMURBLEVBQ0F2aEMsS0FBSzhCLFFBQVE0QyxTQUFTLCtCQUd0QjFFLEtBQUs4QixRQUFRa0QsWUFBWSxnQ0FRakNrOEIsRUFBOEIxZ0MsVUFBVWdoQywyQkFBNkIsU0FBVUMsR0FDdkVBLEVBQ0F6aEMsS0FBSzhCLFFBQVE0QyxTQUFTLDBDQUd0QjFFLEtBQUs4QixRQUFRa0QsWUFBWSwyQ0FPakNrOEIsRUFBOEIxZ0MsVUFBVWlnQyxZQUFjLFNBQVVpQixHQUU1RCxHQURzQjFoQyxLQUFLOEIsUUFBUXdPLFNBQVMsK0JBQzVDLENBS0EsSUFBSXF4QixFQUE0QjNoQyxLQUFLOEIsUUFBUXdPLFNBQVMsMENBSXRELElBRHdCb3hCLEdBQWlCQyxFQVdyQyxPQVRBM2hDLEtBQUs0aEMsMEJBR0FGLEVBSUQxaEMsS0FBSzhCLFFBQVF1L0IsV0FBVyxTQUh4QnJoQyxLQUFLOEIsUUFBUXEvQixRQUFRLFFBQWMsVUFRM0NuaEMsS0FBSzhCLFFBQVF1L0IsV0FBVyxTQUN4QnJoQyxLQUFLNmhDLFNBS1RYLEVBQThCMWdDLFVBQVVvaEMsbUJBQXFCLFdBQ3pENWhDLEtBQUs4QixRQUFRdS9CLFdBQVcsaUJBSzVCSCxFQUE4QjFnQyxVQUFVcWhDLEtBQU8sV0FDM0M3aEMsS0FBSzhCLFFBQVFxL0IsUUFBUSxlQUFxQixTQUV2Q0QsRUFqSXVDLENBa0loRCxLQ2xJRVksR0FBcUMsU0FBVTU5QixHQUUvQyxTQUFTNDlCLElBQ0wsT0FBa0IsT0FBWDU5QixHQUFtQkEsRUFBT2hFLE1BQU1GLEtBQU1GLFlBQWNFLEtBZ0MvRCxPQWxDQSxRQUFVOGhDLEVBQXFCNTlCLEdBSS9CNDlCLEVBQW9CdmhDLFNBQVcsU0FBVWIsR0FDckMsT0FBTyxJQUFJb2lDLEVBQW9CcGlDLElBRW5DcUMsT0FBT0MsZUFBZTgvQixFQUFvQnRoQyxVQUFXLHNCQUF1QixDQUV4RXlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsWUFFaEJ1QyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEIyL0IsRUFBb0J0aEMsVUFBVUoscUJBQXVCLFdBQ2pELElBQUkrRCxFQUFRbkUsS0FnQlosT0FBTyxJQUFJa2hDLEdBWkcsQ0FDVng4QixTQUFVLFNBQVVvQyxHQUFhLE9BQU8zQyxFQUFNekUsS0FBS3FILFVBQVVDLElBQUlGLElBQ2pFOUIsWUFBYSxTQUFVOEIsR0FBYSxPQUFPM0MsRUFBTXpFLEtBQUtxSCxVQUFVSSxPQUFPTCxJQUN2RXdKLFNBQVUsU0FBVXhKLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVTJFLFNBQVM1RSxJQUN0RXM2QixRQUFTLFNBQVVoNkIsR0FBUSxPQUFPakQsRUFBTXpFLEtBQUsrRyxhQUFhVyxJQUMxRCs1QixRQUFTLFNBQVUvNUIsRUFBTVosR0FBUyxPQUFPckMsRUFBTXpFLEtBQUsySCxhQUFhRCxFQUFNWixJQUN2RTY2QixXQUFZLFNBQVVqNkIsR0FBUSxPQUFPakQsRUFBTXpFLEtBQUtnSCxnQkFBZ0JVLElBQ2hFeTNCLFdBQVksU0FBVWpyQixHQUNsQnpQLEVBQU16RSxLQUFLd3dCLFlBQWN0YyxNQU05Qmt1QixFQW5DNkIsQ0FvQ3RDLEtDdkNFLEdBQVUsQ0FDVkMsV0FBWSxpQkFDWkMsVUFBVyxVQ0NYQyxHQUFxQixDQUFDLFFBQVMsV0FDL0JDLEdBQXlDLFNBQVVoK0IsR0FFbkQsU0FBU2crQixFQUF3QnBnQyxHQUM3QixJQUFJcUMsRUFBUUQsRUFBT0UsS0FBS3BFLE1BQU0sU0FBUyxRQUFTLEdBQUlraUMsRUFBd0I3OUIsZ0JBQWlCdkMsS0FBYTlCLEtBSzFHLE9BSkFtRSxFQUFNZytCLGNBQWdCLEtBQ3RCaCtCLEVBQU1pK0IsbUJBQXFCLFNBQVU5Z0MsR0FDakM2QyxFQUFNaytCLGtCQUFrQi9nQyxJQUVyQjZDLEVBdUZYLE9BOUZBLFFBQVUrOUIsRUFBeUJoK0IsR0FTbkNuQyxPQUFPQyxlQUFla2dDLEVBQXlCLFVBQVcsQ0FDdERqZ0MsSUFBSyxXQUNELE9BQU8sSUFFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFla2dDLEVBQXlCLGlCQUFrQixDQUk3RGpnQyxJQUFLLFdBRUQsTUFBTyxDQUNIbS9CLFFBQVMsV0FBYyxPQUFPLE1BQzlCRCxRQUFTLGFBQ1RFLFdBQVksYUFDWnhDLFdBQVksYUFDWnAzQiwyQkFBNEIsYUFDNUJILDZCQUE4QixhQUM5Qmc3QixpQkFBa0IsZUFJMUJwZ0MsWUFBWSxFQUNaQyxjQUFjLElBRWxCKy9CLEVBQXdCMWhDLFVBQVVILEtBQU8sV0FDckMsSUFBSXFILEVBQUtySSxFQUNUVyxLQUFLbWlDLGNBQWdCbmlDLEtBQUs4QixRQUFRcy9CLFFBQVEsWUFDMUMsSUFDSSxJQUFLLElBQUltQixHQUF1QixRQUFTTixJQUFxQk8sRUFBeUJELEVBQXFCLzVCLFFBQVNnNkIsRUFBdUIvNUIsS0FBTSs1QixFQUF5QkQsRUFBcUIvNUIsT0FBUSxDQUNwTSxJQUFJM0gsRUFBVTJoQyxFQUF1Qmg4QixNQUNyQ3hHLEtBQUs4QixRQUFRMkYsMkJBQTJCNUcsRUFBU2IsS0FBS29pQyxxQkFHOUQsTUFBT3o1QixHQUFTakIsRUFBTSxDQUFFa0IsTUFBT0QsR0FDL0IsUUFDSSxJQUNRNjVCLElBQTJCQSxFQUF1Qi81QixPQUFTcEosRUFBS2tqQyxFQUFxQjE1QixTQUFTeEosRUFBRytFLEtBQUttK0IsR0FFOUcsUUFBVSxHQUFJNzZCLEVBQUssTUFBTUEsRUFBSWtCLFNBR3JDczVCLEVBQXdCMWhDLFVBQVVHLFFBQVUsV0FDeEMsSUFBSW1JLEVBQUt6SixFQUNULElBQ0ksSUFBSyxJQUFJb2pDLEdBQXVCLFFBQVNSLElBQXFCUyxFQUF5QkQsRUFBcUJqNkIsUUFBU2s2QixFQUF1Qmo2QixLQUFNaTZCLEVBQXlCRCxFQUFxQmo2QixPQUFRLENBQ3BNLElBQUkzSCxFQUFVNmhDLEVBQXVCbDhCLE1BQ3JDeEcsS0FBSzhCLFFBQVF3Riw2QkFBNkJ6RyxFQUFTYixLQUFLb2lDLHFCQUdoRSxNQUFPbjVCLEdBQVNILEVBQU0sQ0FBRUYsTUFBT0ssR0FDL0IsUUFDSSxJQUNReTVCLElBQTJCQSxFQUF1Qmo2QixPQUFTcEosRUFBS29qQyxFQUFxQjU1QixTQUFTeEosRUFBRytFLEtBQUtxK0IsR0FFOUcsUUFBVSxHQUFJMzVCLEVBQUssTUFBTUEsRUFBSUYsU0FHckNzNUIsRUFBd0IxaEMsVUFBVStFLFlBQWMsU0FBVUMsR0FDakR4RixLQUFLbWlDLGdCQUdOMzhCLEdBQ0F4RixLQUFLOEIsUUFBUXEvQixRQUFRLFdBQVksTUFDakNuaEMsS0FBSzhCLFFBQVF1L0IsV0FBVyxVQUd4QnJoQyxLQUFLOEIsUUFBUXEvQixRQUFRLFdBQVluaEMsS0FBS21pQyxlQUN0Q25pQyxLQUFLOEIsUUFBUXEvQixRQUFRLE9BQVEsaUJBR3JDZSxFQUF3QjFoQyxVQUFVeS9CLGFBQWUsU0FBVXRtQixHQUN2RDNaLEtBQUs4QixRQUFRcS9CLFFBQVEsYUFBY3huQixJQUV2Q3VvQixFQUF3QjFoQyxVQUFVcStCLFdBQWEsU0FBVWpyQixHQUNyRDVULEtBQUs4QixRQUFRKzhCLFdBQVdqckIsSUFFNUJzdUIsRUFBd0IxaEMsVUFBVTZoQyxrQkFBb0IsU0FBVS9nQyxHQUM1RCxJQUFJcWhDLEVBQXlCLFVBQVpyaEMsRUFBSThLLEtBQW1DLEtBQWhCOUssRUFBSXlSLFNBQzNCLFVBQWJ6UixFQUFJOGQsTUFBb0J1akIsSUFDeEIzaUMsS0FBSzhCLFFBQVF3Z0Msb0JBR2RKLEVBL0ZpQyxDQWdHMUMsS0NqR0VVLEdBQStCLFNBQVUxK0IsR0FFekMsU0FBUzArQixJQUNMLE9BQWtCLE9BQVgxK0IsR0FBbUJBLEVBQU9oRSxNQUFNRixLQUFNRixZQUFjRSxLQW9DL0QsT0F0Q0EsUUFBVTRpQyxFQUFlMStCLEdBSXpCMCtCLEVBQWNyaUMsU0FBVyxTQUFVYixHQUMvQixPQUFPLElBQUlrakMsRUFBY2xqQyxJQUU3QnFDLE9BQU9DLGVBQWU0Z0MsRUFBY3BpQyxVQUFXLHNCQUF1QixDQUVsRXlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsWUFFaEJ1QyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJ5Z0MsRUFBY3BpQyxVQUFVSixxQkFBdUIsV0FDM0MsSUFBSStELEVBQVFuRSxLQW9CWixPQUFPLElBQUlraUMsR0FoQkcsQ0FDVmQsUUFBUyxTQUFVaDZCLEdBQVEsT0FBT2pELEVBQU16RSxLQUFLK0csYUFBYVcsSUFDMUQrNUIsUUFBUyxTQUFVLzVCLEVBQU1aLEdBQVMsT0FBT3JDLEVBQU16RSxLQUFLMkgsYUFBYUQsRUFBTVosSUFDdkU2NkIsV0FBWSxTQUFVajZCLEdBQVEsT0FBT2pELEVBQU16RSxLQUFLZ0gsZ0JBQWdCVSxJQUNoRXkzQixXQUFZLFNBQVVqckIsR0FDbEJ6UCxFQUFNekUsS0FBS3d3QixZQUFjdGMsR0FFN0JuTSwyQkFBNEIsU0FBVTVHLEVBQVNDLEdBQzNDLE9BQU9xRCxFQUFNdkQsT0FBT0MsRUFBU0MsSUFFakN3Ryw2QkFBOEIsU0FBVXpHLEVBQVNDLEdBQzdDLE9BQU9xRCxFQUFNbEQsU0FBU0osRUFBU0MsSUFFbkN3aEMsaUJBQWtCLFdBQWMsT0FBT24rQixFQUFNaEQsS0FBSytnQyxHQUF3QjUrQixRQUFReStCLFdBQVksSUFBa0IsT0FLakhhLEVBdkN1QixDQXdDaEMsS0M3QkVDLEdBQTJCLFNBQVUzK0IsR0FFckMsU0FBUzIrQixJQUNMLE9BQWtCLE9BQVgzK0IsR0FBbUJBLEVBQU9oRSxNQUFNRixLQUFNRixZQUFjRSxLQTZhL0QsT0EvYUEsUUFBVTZpQyxFQUFXMytCLEdBSXJCMitCLEVBQVV0aUMsU0FBVyxTQUFVYixHQUMzQixPQUFPLElBQUltakMsRUFBVW5qQyxJQUV6Qm1qQyxFQUFVcmlDLFVBQVVQLFdBQWEsU0FBVTZpQyxFQUFjQyxFQUFtQkMsRUFBZ0JDLEVBQWFDLEVBQWFDLEdBWWxILFFBWHFCLElBQWpCTCxJQUEyQkEsRUFBZSxTQUFVMWpDLEdBQU0sT0FBTyxJQUFJLElBQWlCQSxVQUNoRSxJQUF0QjJqQyxJQUFnQ0EsRUFBb0IsU0FBVTNqQyxHQUFNLE9BQU8sSUFBSSxJQUFjQSxVQUMxRSxJQUFuQjRqQyxJQUE2QkEsRUFBaUIsU0FBVTVqQyxHQUFNLE9BQU8sSUFBSSxLQUFrQkEsVUFDM0UsSUFBaEI2akMsSUFBMEJBLEVBQWMsU0FBVTdqQyxHQUFNLE9BQU8sSUFBSTY2QixHQUFRNzZCLFVBQzNELElBQWhCOGpDLElBQTBCQSxFQUFjLFNBQVU5akMsR0FBTSxPQUFPLElBQUl3akMsR0FBY3hqQyxVQUMzRCxJQUF0QitqQyxJQUFnQ0EsRUFBb0IsU0FBVS9qQyxHQUFNLE9BQU8sSUFBSTBpQyxHQUFvQjFpQyxLQUN2R1ksS0FBS29qQyxhQUNEcGpDLEtBQUtOLEtBQUt3SixjQUFjLDJCQUM1QmxKLEtBQUtxakMsYUFDRHJqQyxLQUFLTixLQUFLd0osY0FBYywyQkFDNUJsSixLQUFLc2pDLFlBQWN0akMsS0FBS04sS0FBS3dKLGNBQWMsMkJBQ3RDbEosS0FBS3FqQyxhQUNOLE1BQU0sSUFBSTNpQyxNQUFNLGlGQUNMLDBCQUFpQyxLQUVoRCxHQUFJVixLQUFLb2pDLGFBQWFHLGFBQWEsa0JBQXdCLENBQ3ZELElBQUlDLEVBQW9CdmtDLFNBQVN3a0MsZUFBZXpqQyxLQUFLb2pDLGFBQWEzOEIsYUFBYSxtQkFDM0UrOEIsSUFDQXhqQyxLQUFLMDhCLFdBQWF5RyxFQUFrQkssSUFHNUN4akMsS0FBSzBqQyxVQUFVVCxHQUNmLElBQUlVLEVBQWUzakMsS0FBS04sS0FBS3dKLGNBQWMsbUJBQzNDbEosS0FBSzJaLE1BQVFncUIsRUFBZWIsRUFBYWEsR0FBZ0IsS0FDekQsSUFBSUMsRUFBb0I1akMsS0FBS04sS0FBS3dKLGNBQWMseUJBQ2hEbEosS0FBSzZqQyxXQUNERCxFQUFvQmIsRUFBa0JhLEdBQXFCLEtBQy9ELElBQUlFLEVBQWlCOWpDLEtBQUtOLEtBQUt3SixjQUFjLHFCQUM3Q2xKLEtBQUsrakMsUUFBVUQsRUFBaUJkLEVBQWVjLEdBQWtCLEtBQ2pFLElBQUlySCxFQUFjejhCLEtBQUtOLEtBQUt3SixjQUFjLDBCQUN0Q3V6QixJQUNBejhCLEtBQUt5OEIsWUFBY3lHLEVBQVl6RyxJQUU5Qno4QixLQUFLTixLQUFLcUgsVUFBVTJFLFNBQVMsZUFDOUIxTCxLQUFLd1UsT0FBU3hVLEtBQUttRyxpQkFPM0IwOEIsRUFBVXJpQyxVQUFVRixtQkFBcUIsV0FDckMsSUFBSTZELEVBQVFuRSxLQWtDWixHQWpDQUEsS0FBSzRkLFlBQWMsV0FDZnpaLEVBQU14RSxXQUFXaWUsZUFFckI1ZCxLQUFLOGQsV0FBYSxXQUNkM1osRUFBTXhFLFdBQVdtZSxjQUVyQjlkLEtBQUsyUyxZQUFjLFNBQVVyUixHQUN6QjZDLEVBQU1pL0IsYUFBYTM0QixRQUNuQnRHLEVBQU14RSxXQUFXZ1QsWUFBWXhPLEVBQU02L0IseUJBQXlCMWlDLEtBRWhFdEIsS0FBSzZTLGNBQWdCLFNBQVV2UixHQUMzQjZDLEVBQU14RSxXQUFXa1QsY0FBY3ZSLElBRW5DdEIsS0FBS3cvQixxQkFBdUIsU0FBVWwrQixHQUNsQzZDLEVBQU14RSxXQUFXNi9CLHFCQUFxQmwrQixFQUFJRyxPQUFPb2tCLFFBRXJEN2xCLEtBQUtpL0IsaUJBQW1CLFdBQ3BCOTZCLEVBQU14RSxXQUFXcy9CLG9CQUVyQmovQixLQUFLby9CLGlCQUFtQixXQUNwQmo3QixFQUFNeEUsV0FBV3kvQixvQkFFckJwL0IsS0FBS20vQixrQkFBb0IsV0FDckJoN0IsRUFBTXhFLFdBQVd3L0IscUJBRXJCbi9CLEtBQUtvakMsYUFBYXBpQyxpQkFBaUIsUUFBU2hCLEtBQUs0ZCxhQUNqRDVkLEtBQUtvakMsYUFBYXBpQyxpQkFBaUIsT0FBUWhCLEtBQUs4ZCxZQUNoRDlkLEtBQUtvakMsYUFBYXBpQyxpQkFBaUIsUUFBU2hCLEtBQUsyUyxhQUNqRDNTLEtBQUtvakMsYUFBYXBpQyxpQkFBaUIsVUFBV2hCLEtBQUs2UyxlQUNuRDdTLEtBQUtpa0MsS0FBS3JqQyxPQUFPLGVBQTJDWixLQUFLby9CLGtCQUNqRXAvQixLQUFLaWtDLEtBQUtyakMsT0FBTyxnQkFBNENaLEtBQUttL0IsbUJBQ2xFbi9CLEtBQUtpa0MsS0FBS3JqQyxPQUFPLGVBQTJDWixLQUFLaS9CLGtCQUNqRWovQixLQUFLaWtDLEtBQUtyakMsT0FBTyxpQkFBc0NaLEtBQUt3L0Isc0JBQ3hEeC9CLEtBQUtzakMsWUFBYSxDQUNsQixHQUFJdGpDLEtBQUtzakMsWUFBWTk4QixNQU1qQixPQUZBeEcsS0FBS0wsV0FBVzIrQixTQUFTdCtCLEtBQUtzakMsWUFBWTk4QixPQUF5QixRQUNuRXhHLEtBQUtMLFdBQVdvUSxTQUdwQi9QLEtBQUtzakMsWUFBWTk4QixNQUFReEcsS0FBS3dHLFFBR3RDcThCLEVBQVVyaUMsVUFBVUcsUUFBVSxXQUMxQlgsS0FBS29qQyxhQUFhbGlDLG9CQUFvQixRQUFTbEIsS0FBSzRkLGFBQ3BENWQsS0FBS29qQyxhQUFhbGlDLG9CQUFvQixPQUFRbEIsS0FBSzhkLFlBQ25EOWQsS0FBS29qQyxhQUFhbGlDLG9CQUFvQixVQUFXbEIsS0FBSzZTLGVBQ3REN1MsS0FBS29qQyxhQUFhbGlDLG9CQUFvQixRQUFTbEIsS0FBSzJTLGFBQ3BEM1MsS0FBS2lrQyxLQUFLaGpDLFNBQVMsZUFBMkNqQixLQUFLby9CLGtCQUNuRXAvQixLQUFLaWtDLEtBQUtoakMsU0FBUyxlQUEyQ2pCLEtBQUtpL0Isa0JBQ25Fai9CLEtBQUtpa0MsS0FBS2hqQyxTQUFTLGlCQUFzQ2pCLEtBQUt3L0Isc0JBQzlEeC9CLEtBQUtpa0MsS0FBS3RqQyxVQUNOWCxLQUFLd1UsUUFDTHhVLEtBQUt3VSxPQUFPN1QsVUFFWlgsS0FBSytqQyxTQUNML2pDLEtBQUsrakMsUUFBUXBqQyxVQUViWCxLQUFLeThCLGFBQ0x6OEIsS0FBS3k4QixZQUFZOTdCLFVBRWpCWCxLQUFLMDhCLFlBQ0wxOEIsS0FBSzA4QixXQUFXLzdCLFVBRXBCdUQsRUFBTzFELFVBQVVHLFFBQVF5RCxLQUFLcEUsT0FFbEMrQixPQUFPQyxlQUFlNmdDLEVBQVVyaUMsVUFBVyxRQUFTLENBQ2hEeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLTCxXQUFXNCtCLFlBRTNCajRCLElBQUssU0FBVUUsR0FDWHhHLEtBQUtMLFdBQVcyK0IsU0FBUzkzQixJQUU3QnRFLFlBQVksRUFDWkMsY0FBYyxJQUVsQjBnQyxFQUFVcmlDLFVBQVU4OUIsU0FBVyxTQUFVOTNCLEVBQU82M0IsUUFDekIsSUFBZkEsSUFBeUJBLEdBQWEsR0FDMUNyK0IsS0FBS0wsV0FBVzIrQixTQUFTOTNCLEVBQU82M0IsSUFFcEN0OEIsT0FBT0MsZUFBZTZnQyxFQUFVcmlDLFVBQVcsZ0JBQWlCLENBQ3hEeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLTCxXQUFXc3JCLG9CQUUzQjNrQixJQUFLLFNBQVVpaUIsR0FDWHZvQixLQUFLTCxXQUFXdXJCLGlCQUFpQjNDLEdBQStCLElBRXBFcm1CLFlBQVksRUFDWkMsY0FBYyxJQUVsQjBnQyxFQUFVcmlDLFVBQVUwcUIsaUJBQW1CLFNBQVUzQyxFQUFlOFYsUUFDekMsSUFBZkEsSUFBeUJBLEdBQWEsR0FDMUNyK0IsS0FBS0wsV0FBV3VyQixpQkFBaUIzQyxHQUErQixFQUFNOFYsSUFFMUV0OEIsT0FBT0MsZUFBZTZnQyxFQUFVcmlDLFVBQVcsV0FBWSxDQUNuRHlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsV0FBVzgrQixlQUUzQm40QixJQUFLLFNBQVVkLEdBQ1h4RixLQUFLTCxXQUFXNEYsWUFBWUMsR0FDeEJ4RixLQUFLc2pDLGNBQ0x0akMsS0FBS3NqQyxZQUFZOTlCLFNBQVdBLElBR3BDdEQsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlNmdDLEVBQVVyaUMsVUFBVyx1QkFBd0IsQ0FDL0Q4RixJQUFLLFNBQVVxVCxHQUNYM1osS0FBS0wsV0FBV3FnQyx3QkFBd0JybUIsSUFFNUN6WCxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWU2Z0MsRUFBVXJpQyxVQUFXLHFCQUFzQixDQUk3RDhGLElBQUssU0FBVXNOLEdBQ1g1VCxLQUFLTCxXQUFXdWdDLHNCQUFzQnRzQixJQUUxQzFSLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZnQyxFQUFVcmlDLFVBQVcsb0JBQXFCLENBSTVEOEYsSUFBSyxTQUFVc04sR0FDWDVULEtBQUtMLFdBQVdpL0IscUJBQXFCaHJCLElBRXpDMVIsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlNmdDLEVBQVVyaUMsVUFBVyx1QkFBd0IsQ0FPL0Q4RixJQUFLLFNBQVU4MUIsR0FDWHA4QixLQUFLTCxXQUFXeWdDLHdCQUF3QmhFLElBRTVDbDZCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZnQyxFQUFVcmlDLFVBQVcsUUFBUyxDQUloRHlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsV0FBVzQvQixXQUszQmo1QixJQUFLLFNBQVVpNUIsR0FDWHYvQixLQUFLTCxXQUFXMi9CLFNBQVNDLElBRTdCcjlCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZnQyxFQUFVcmlDLFVBQVcsV0FBWSxDQUluRHlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsV0FBVzJnQyxlQUszQmg2QixJQUFLLFNBQVUwUSxHQUNYaFgsS0FBS0wsV0FBV29YLFlBQVlDLElBRWhDOVUsWUFBWSxFQUNaQyxjQUFjLElBTWxCMGdDLEVBQVVyaUMsVUFBVXVQLE9BQVMsV0FDekIvUCxLQUFLTCxXQUFXb1EsVUFNcEI4eUIsRUFBVXJpQyxVQUFVdytCLGNBQWdCLFdBQ2hDaC9CLEtBQUtMLFdBQVdxL0IsZ0JBQ2hCaC9CLEtBQUtpa0MsS0FBS2wwQixTQUVWL1AsS0FBS3crQixlQUNEeCtCLEtBQUtpa0MsS0FBSzNKLE1BQU00SixLQUFJLFNBQVU5a0MsR0FBTSxPQUFPQSxFQUFHcUgsYUFBYSxnQkFBdUIsTUFDbEZ6RyxLQUFLc2pDLGNBQ0x0akMsS0FBS3NqQyxZQUFZOThCLE1BQVF4RyxLQUFLd0csUUFHdENxOEIsRUFBVXJpQyxVQUFVSixxQkFBdUIsV0FHdkMsSUFBSTBCLEdBQVUsU0FBUyxTQUFTLFNBQVMsUUFBUyxHQUFJOUIsS0FBS21rQywyQkFBNEJua0MsS0FBS29rQywyQkFBNEJwa0MsS0FBS3FrQyw0QkFBNkJya0MsS0FBS3NrQywwQkFDL0osT0FBTyxJQUFJckksR0FBb0JuNkIsRUFBUzlCLEtBQUt1a0MscUJBS2pEMUIsRUFBVXJpQyxVQUFVa2pDLFVBQVksU0FBVVQsR0FDdENqakMsS0FBS3drQyxZQUFjeGtDLEtBQUtOLEtBQUt3SixjQUFjLGtCQUMzQ2xKLEtBQUtpa0MsS0FBT2hCLEVBQVlqakMsS0FBS3drQyxhQUM3QnhrQyxLQUFLaWtDLEtBQUtwYixjQUFlLEVBQ3pCN29CLEtBQUtpa0MsS0FBS3pKLGlCQUFrQixFQUM1Qng2QixLQUFLdytCLGVBQ0R4K0IsS0FBS2lrQyxLQUFLM0osTUFBTTRKLEtBQUksU0FBVTlrQyxHQUFNLE9BQU9BLEVBQUdxSCxhQUFhLGdCQUF1QixPQUUxRm84QixFQUFVcmlDLFVBQVUyRixhQUFlLFdBQy9CLElBQUloQyxFQUFRbkUsS0FJUjhCLEdBQVUsU0FBUyxRQUFTLEdBQUksbUJBQXdCLENBQUVwQyxLQUFNTSxLQUFLb2pDLGdCQUFrQixDQUFFMzdCLDJCQUE0QixTQUFVNUcsRUFBU0MsR0FDcElxRCxFQUFNaS9CLGFBQWFwaUMsaUJBQWlCSCxFQUFTQyxJQUM5Q3dHLDZCQUE4QixTQUFVekcsRUFBU0MsR0FDaERxRCxFQUFNaS9CLGFBQWFsaUMsb0JBQW9CTCxFQUFTQyxNQUd4RCxPQUFPLElBQUksS0FBVWQsS0FBS29qQyxhQUFjLElBQUksS0FBb0J0aEMsS0FFcEUrZ0MsRUFBVXJpQyxVQUFVMmpDLHdCQUEwQixXQUMxQyxJQUFJaGdDLEVBQVFuRSxLQUVaLE1BQU8sQ0FDSHlrQyxnQkFBaUIsU0FBVUMsRUFBVXQ5QixHQUNqQyxPQUFPczlCLEVBQVNqK0IsYUFBYVcsSUFFakNpMkIsZ0JBQWlCLFNBQVVyVyxHQUN2QjdpQixFQUFNay9CLGFBQWFuVCxZQUFjbEosR0FFckNzVyxzQkFBdUIsV0FBYyxPQUFPcitCLFNBQVMwSyxnQkFBa0J4RixFQUFNaS9CLGNBQzdFN0Ysb0JBQXFCLFNBQVVuMkIsR0FDM0IsT0FBT2pELEVBQU1pL0IsYUFBYTM4QixhQUFhVyxJQUUzQ28yQixvQkFBcUIsU0FBVXAyQixFQUFNWixHQUNqQ3JDLEVBQU1pL0IsYUFBYS83QixhQUFhRCxFQUFNWixJQUUxQ2kzQix1QkFBd0IsU0FBVXIyQixHQUM5QmpELEVBQU1pL0IsYUFBYTE4QixnQkFBZ0JVLElBRXZDczJCLGFBQWMsU0FBVTUyQixHQUNwQjNDLEVBQU1xZ0MsWUFBWXo5QixVQUFVQyxJQUFJRixJQUVwQzYyQixnQkFBaUIsU0FBVTcyQixHQUN2QjNDLEVBQU1xZ0MsWUFBWXo5QixVQUFVSSxPQUFPTCxJQUV2QzgyQixTQUFVLFdBQ056NUIsRUFBTTgvQixLQUFLM3lCLE1BQU8sR0FFdEJ1c0IsVUFBVyxXQUNQMTVCLEVBQU04L0IsS0FBSzN5QixNQUFPLEdBRXRCd3NCLGlCQUFrQixXQUNkLE9BQU8zNUIsRUFBTXpFLEtBQUt3SixjQUFjLDRCQUVwQzYwQixxQkFBc0IsU0FBVXdDLEdBQzVCcDhCLEVBQU04L0IsS0FBS3ZKLGlCQUFpQjZGLElBRWhDdkMsb0JBQXFCLFNBQVVyTSxHQUMzQnh0QixFQUFNOC9CLEtBQUtqUixnQkFBZ0JyQixJQUUvQnNNLGlCQUFrQixTQUFVN1YsR0FDeEJqa0IsRUFBTTgvQixLQUFLN2IsVUFBWUEsR0FFM0I2QyxpQkFBa0IsV0FDZCxJQUFJcEYsRUFBUTFoQixFQUFNOC9CLEtBQUsxYixjQUN2QixPQUFPMUMsYUFBaUJ5SCxNQUFRekgsRUFBTSxHQUFLQSxHQUUvQ3FGLGlCQUFrQixTQUFVckYsR0FDeEIxaEIsRUFBTTgvQixLQUFLMWIsY0FBZ0IxQyxHQUUvQnFZLHFCQUFzQixTQUFVclksR0FDNUIxaEIsRUFBTTgvQixLQUFLM0osTUFBTXpVLEdBQU9wYixTQUU1Qnl1QixpQkFBa0IsV0FBYyxPQUFPLzBCLEVBQU04L0IsS0FBSzNKLE1BQU12NkIsUUFFeERvK0Isa0JBQW1CLFdBQWMsT0FBT2g2QixFQUFNcTZCLGdCQUM5Q0osdUJBQXdCLFNBQVV2WSxHQUM5QixPQUFPMWhCLEVBQU04L0IsS0FBS25hLHNCQUFzQmpFLElBRTVDZ0Ysc0JBQXVCLFdBQWMsT0FBTzFtQixFQUFNOC9CLEtBQUsxSixxQkFDdkRyTSxtQkFBb0IsU0FBVXBJLEVBQVVxSSxHQUNwQyxPQUFPaHFCLEVBQU04L0IsS0FBSy9WLG1CQUFtQnBJLEVBQVVxSSxNQUszRDBVLEVBQVVyaUMsVUFBVTRqQyx3QkFBMEIsV0FDMUMsSUFBSWpnQyxFQUFRbkUsS0FFWixNQUFPLENBQ0gwRSxTQUFVLFNBQVVvQyxHQUNoQjNDLEVBQU16RSxLQUFLcUgsVUFBVUMsSUFBSUYsSUFFN0I5QixZQUFhLFNBQVU4QixHQUNuQjNDLEVBQU16RSxLQUFLcUgsVUFBVUksT0FBT0wsSUFFaEN3SixTQUFVLFNBQVV4SixHQUFhLE9BQU8zQyxFQUFNekUsS0FBS3FILFVBQVUyRSxTQUFTNUUsSUFDdEUyUixnQkFBaUIsU0FBVXFKLEdBQ3ZCM2QsRUFBTTAvQixZQUFjMS9CLEVBQU0wL0IsV0FBV3ByQixnQkFBZ0JxSixJQUV6RDZhLG1CQUFvQixXQUNoQng0QixFQUFNMC9CLFlBQWMxL0IsRUFBTTAvQixXQUFXOXJCLFlBRXpDNmtCLHFCQUFzQixXQUNsQno0QixFQUFNMC9CLFlBQWMxL0IsRUFBTTAvQixXQUFXN3JCLGNBRXpDb2xCLGFBQWMsU0FBVTUyQixHQUNoQnJDLEVBQU1tL0IsY0FDTm4vQixFQUFNbS9CLFlBQVk5OEIsTUFBUUEsR0FFOUIsSUFBSXFmLEVBQVExaEIsRUFBTW9rQixjQUNsQnBrQixFQUFNaEQsS0FBSyxnQkFBc0IsQ0FBRXFGLE1BQU9BLEVBQU9xZixNQUFPQSxJQUFTLE1BSzdFZ2QsRUFBVXJpQyxVQUFVNmpDLHlCQUEyQixXQUMzQyxJQUFJbGdDLEVBQVFuRSxLQUVaLE1BQU8sQ0FDSGk5QixXQUFZLFdBQWMsT0FBT2orQixRQUFRbUYsRUFBTTQvQixVQUMvQzdHLGFBQWMsU0FBVTZDLEdBQ3BCNTdCLEVBQU00L0IsU0FBVzUvQixFQUFNNC9CLFFBQVF6cUIsTUFBTXltQixJQUV6QzVDLGFBQWMsV0FDVmg1QixFQUFNNC9CLFNBQVc1L0IsRUFBTTQvQixRQUFRdnFCLGdCQUszQ3FwQixFQUFVcmlDLFVBQVU4akMsdUJBQXlCLFdBQ3pDLElBQUluZ0MsRUFBUW5FLEtBRVosTUFBTyxDQUNINjhCLFNBQVUsV0FBYyxRQUFTMTRCLEVBQU13VixPQUN2Q21qQixXQUFZLFNBQVVobUIsR0FDbEIzUyxFQUFNd1YsT0FBU3hWLEVBQU13VixNQUFNOUMsTUFBTUMsSUFFckNpbUIsY0FBZSxXQUFjLE9BQU81NEIsRUFBTXdWLE1BQVF4VixFQUFNd1YsTUFBTTFDLFdBQWEsR0FDM0UrbEIsaUJBQWtCLFNBQVVobUIsR0FDeEI3UyxFQUFNd1YsT0FBU3hWLEVBQU13VixNQUFNNUMsWUFBWUMsTUFRbkQ2ckIsRUFBVXJpQyxVQUFVd2pDLHlCQUEyQixTQUFVMWlDLEdBQ3JELElBQUlxakMsRUFBbUJyakMsRUFBSXNSLE9BQU9wSCx3QkFFbEMsT0FEa0J4TCxLQUFLNGtDLGFBQWF0akMsR0FBT0EsRUFBSXVqQyxRQUFRLEdBQUdDLFFBQVV4akMsRUFBSXdqQyxTQUNuREgsRUFBaUIzbkIsTUFFMUM2bEIsRUFBVXJpQyxVQUFVb2tDLGFBQWUsU0FBVXRqQyxHQUN6QyxPQUFPdEMsUUFBUXNDLEVBQUl1akMsVUFLdkJoQyxFQUFVcmlDLFVBQVUrakMsaUJBQW1CLFdBQ25DLE1BQU8sQ0FDSDdILFdBQVkxOEIsS0FBSzA4QixXQUFhMThCLEtBQUswOEIsV0FBV3FJLHlCQUMxQzVrQyxFQUNKczhCLFlBQWF6OEIsS0FBS3k4QixZQUFjejhCLEtBQUt5OEIsWUFBWXNJLHlCQUM3QzVrQyxJQUdMMGlDLEVBaGJtQixDQWliNUIsd0RDNWJTbUMsRUFTQUMsMENBUlgsU0FBV0QsR0FDUEEsRUFBdUIsV0FBSSx5QkFDM0JBLEVBQXFCLFNBQUksdUJBQ3pCQSxFQUF1QixXQUFJLHlCQUgvQixDQUlHQSxJQUFlQSxFQUFhLEtBSy9CLFNBQVdDLEdBQ1BBLEVBQWtCLE9BQUksc0JBRDFCLENBRUdBLElBQWNBLEVBQVksbUJDNkc3QixJQUFJQyxFQUFxQixJQUFJQyxRQ3pIN0IsSUNtRElDLEVBQTJDLFNBQVVsaEMsR0FFckQsU0FBU2toQyxJQUNMLE9BQWtCLE9BQVhsaEMsR0FBbUJBLEVBQU9oRSxNQUFNRixLQUFNRixZQUFjRSxLQW1EL0QsT0FyREEsUUFBVW9sQyxFQUEyQmxoQyxHQU9yQ2toQyxFQUEwQjVrQyxVQUFVSCxLQUFPLFdBQ3ZDNkQsRUFBTzFELFVBQVVILEtBQUsrRCxLQUFLcEUsTUFDM0JBLEtBQUtxbEMsUUFBUXJsQyxLQUFLOEIsUUFBUXVHLE1BQU8sQ0FDN0I3QyxTQUFVeEYsS0FBS3NsQyxpQkFDZkMsV0FBWXZsQyxLQUFLd2xDLG1CQUNqQkMsU0FBVXpsQyxLQUFLMGxDLG9CQVN2Qk4sRUFBMEI1a0MsVUFBVW1sQyxZQUFjLFdBRTlDM2xDLEtBQUs0bEMsb0JBQW9CNWxDLEtBQUs4QixRQUFRdUcsT0FBTyxHQUM3Q3JJLEtBQUs4QixRQUFRdUcsTUFBTW85QixTQUFXemxDLEtBQUs4QixRQUFRd08sU0FBUzAwQixFQUFXNWhDLFVBRS9EcEQsS0FBSzBsQyxtQkFDTDFsQyxLQUFLOEIsUUFBUXVHLE1BQU03QyxTQUFXeEYsS0FBSzhCLFFBQVE0OEIsYUFDM0MxK0IsS0FBSzhCLFFBQVF1RyxNQUFNazlCLFdBQ2Z2bEMsS0FBSzhCLFFBQVF3TyxTQUFTMDBCLEVBQVdhLFlBRXJDN2xDLEtBQUs0bEMsb0JBQW9CNWxDLEtBQUs4QixRQUFRdUcsT0FBTyxHQUM3Q3JJLEtBQUs4bEMsNEJBRVRWLEVBQTBCNWtDLFVBQVU4a0MsaUJBQW1CLFdBQ25EdGxDLEtBQUs4QixRQUFReUQsWUFBWXZGLEtBQUs4QixRQUFRdUcsTUFBTTdDLFdBRWhENC9CLEVBQTBCNWtDLFVBQVVnbEMsbUJBQXFCLFdBQ3JEeGxDLEtBQUsrbEMsWUFBWS9sQyxLQUFLOEIsUUFBUXVHLE1BQU1rOUIsV0FBWVAsRUFBV2EsYUFFL0RULEVBQTBCNWtDLFVBQVVrbEMsaUJBQW1CLFdBQ25EMWxDLEtBQUs4QixRQUFRa2tDLGVBQWVDLE9BQU9qbUMsS0FBSzhCLFFBQVF1RyxNQUFNbzlCLFdBQ3REemxDLEtBQUsrbEMsWUFBWS9sQyxLQUFLOEIsUUFBUXVHLE1BQU1vOUIsU0FBVVQsRUFBVzVoQyxVQUN6RHBELEtBQUsrbEMsYUFBYS9sQyxLQUFLOEIsUUFBUXVHLE1BQU1vOUIsU0FBVVQsRUFBV2tCLGFBRTlEZCxFQUEwQjVrQyxVQUFVdWxDLFlBQWMsU0FBVXJoQyxFQUFVb0MsR0FDOURwQyxFQUNBMUUsS0FBSzhCLFFBQVE0QyxTQUFTb0MsR0FHdEI5RyxLQUFLOEIsUUFBUWtELFlBQVk4QixJQUcxQnMrQixFQXREbUMsQ0E1Q0wsU0FBVWxoQyxHQUUvQyxTQUFTaWlDLEVBQW9CcmtDLEdBQ3pCLElBQUlxQyxFQUFRRCxFQUFPRSxLQUFLcEUsS0FBTThCLElBQVk5QixLQUUxQyxPQURBbUUsRUFBTXdPLFlBQWN4TyxFQUFNd08sWUFBWTBCLEtBQUtsUSxHQUNwQ0EsRUEwQlgsT0E5QkEsUUFBVWdpQyxFQUFxQmppQyxHQVMvQmlpQyxFQUFvQjNsQyxVQUFVSCxLQUFPLFdBQ2pDTCxLQUFLcWxDLFFBQVFybEMsS0FBSzhCLFFBQVF1RyxNQUFPLENBQzdCN0MsU0FBVXhGLEtBQUs4bEMseUJBQ2ZQLFdBQVl2bEMsS0FBSzhsQyw0QkFPekJLLEVBQW9CM2xDLFVBQVVtUyxZQUFjLFdBQ3BDM1MsS0FBSzhCLFFBQVF1RyxNQUFNN0MsV0FHdkJ4RixLQUFLOEIsUUFBUXVHLE1BQU1vOUIsVUFBWXpsQyxLQUFLOEIsUUFBUXVHLE1BQU1vOUIsV0FFdERVLEVBQW9CM2xDLFVBQVVzbEMseUJBQTJCLFdBQ2pEOWxDLEtBQUs4QixRQUFRdUcsTUFBTTdDLFdBQ25CeEYsS0FBSzhCLFFBQVF1RyxNQUFNazlCLFlBQWEsSUFHakNZLEVBL0I2QixDRFBHLFNBQVVqaUMsR0FFakQsU0FBU2tpQyxFQUFzQnRrQyxHQUMzQixJQUFJcUMsRUFBUUQsRUFBT0UsS0FBS3BFLEtBQU04QixJQUFZOUIsS0FHMUMsT0FEQW1FLEVBQU1raUMsV0FBYSxJQUFJenhCLElBQ2hCelEsRUEwR1gsT0EvR0EsUUFBVWlpQyxFQUF1QmxpQyxHQU9qQ2tpQyxFQUFzQjVsQyxVQUFVRyxRQUFVLFdBQ3RDdUQsRUFBTzFELFVBQVVHLFFBQVF5RCxLQUFLcEUsTUFDOUJBLEtBQUtzbUMsYUFjVEYsRUFBc0I1bEMsVUFBVTZrQyxRQUFVLFNBQVV6eUIsRUFBUTJ6QixHQUN4RCxJQUFJNytCLEVBQUtySSxFQUNMOEUsRUFBUW5FLEtBQ1J3bUMsRUFBVSxHQUNkLElBQ0ksSUFBSyxJQUFJeHlCLEdBQUssUUFBU2pTLE9BQU9pZSxLQUFLdW1CLElBQWF0eUIsRUFBS0QsRUFBR3hMLFFBQVN5TCxFQUFHeEwsS0FBTXdMLEVBQUtELEVBQUd4TCxPQUFRLENBQ3RGLElBQUlpK0IsRUFBV3h5QixFQUFHek4sTUFDZGtnQyxFQUFXSCxFQUFVRSxHQUFVcHlCLEtBQUtyVSxNQUN4Q3dtQyxFQUFRdjVCLEtBQUtqTixLQUFLMm1DLGdCQUFnQi96QixFQUFRNnpCLEVBQVVDLEtBRzVELE1BQU8vOUIsR0FBU2pCLEVBQU0sQ0FBRWtCLE1BQU9ELEdBQy9CLFFBQ0ksSUFDUXNMLElBQU9BLEVBQUd4TCxPQUFTcEosRUFBSzJVLEVBQUduTCxTQUFTeEosRUFBRytFLEtBQUs0UCxHQUVwRCxRQUFVLEdBQUl0TSxFQUFLLE1BQU1BLEVBQUlrQixPQUVqQyxJQUFJMDlCLEVBQVksV0FDWixJQUFJeDlCLEVBQUt6SixFQUNULElBQ0ksSUFBSyxJQUFJdW5DLEdBQVksUUFBU0osR0FBVUssRUFBY0QsRUFBVXArQixRQUFTcStCLEVBQVlwK0IsS0FBTW8rQixFQUFjRCxFQUFVcCtCLFFBRS9HcytCLEVBRGdCRCxFQUFZcmdDLFNBSXBDLE1BQU95QyxHQUFTSCxFQUFNLENBQUVGLE1BQU9LLEdBQy9CLFFBQ0ksSUFDUTQ5QixJQUFnQkEsRUFBWXArQixPQUFTcEosRUFBS3VuQyxFQUFVLzlCLFNBQVN4SixFQUFHK0UsS0FBS3dpQyxHQUU3RSxRQUFVLEdBQUk5OUIsRUFBSyxNQUFNQSxFQUFJRixPQUVqQ3pFLEVBQU1raUMsV0FBVzM1QixPQUFPNDVCLElBRzVCLE9BREF0bUMsS0FBS3FtQyxXQUFXci9CLElBQUlzL0IsR0FDYkEsR0FtQlhGLEVBQXNCNWxDLFVBQVVtbUMsZ0JBQWtCLFNBQVUvekIsRUFBUTZ6QixFQUFVQyxHQUMxRSxPRDhCRCxTQUF5Qjl6QixFQUFRNnpCLEVBQVVDLEdBQzlDLElBQ0lILEVBd0JSLFNBQXlCM3pCLEVBQVE2ekIsR0FDN0IsSUFBSU0sRUFBZSxJQUFJNzZCLElBQ2xCZzVCLEVBQW1CNWYsSUFBSTFTLElBQ3hCc3lCLEVBQW1CNStCLElBQUlzTSxFQUFRLENBQzNCd1UsV0FBVyxFQUNYNGYsYUFBYyxTQUFVNTZCLEdBQ3BCLElBQUltNkIsRUFBWVEsRUFBYTlrQyxJQUFJbUssSUFBUSxHQUl6QyxPQUhLMjZCLEVBQWF6aEIsSUFBSWxaLElBQ2xCMjZCLEVBQWF6Z0MsSUFBSThGLEVBQUttNkIsR0FFbkJBLEdBRVhVLG9CQUFxQixJQUFJcnlCLE1BR2pDLElBQUlzeUIsRUFBa0JoQyxFQUFtQmpqQyxJQUFJMlEsR0FDN0MsR0FBSXMwQixFQUFnQkQsb0JBQW9CM2hCLElBQUltaEIsR0FFeEMsT0FBT1MsRUFJWCxJQUFJQyxFQXVFRCxTQUF1QnYwQixFQUFRNnpCLEdBR2xDLElBRkEsSUFDSVUsRUFEQUMsRUFBbUJ4MEIsRUFFaEJ3MEIsS0FDSEQsRUFBYXBsQyxPQUFPa0cseUJBQXlCbS9CLEVBQWtCWCxLQU0vRFcsRUFBbUJybEMsT0FBTzhGLGVBQWV1L0IsR0FFN0MsT0FBT0QsRUFuRlVFLENBQWN6MEIsRUFBUTZ6QixJQUFhLENBQ2hEdGtDLGNBQWMsRUFDZEQsWUFBWSxFQUNac0UsTUFBT29NLEVBQU82ekIsR0FDZGEsVUFBVSxHQUdWQyxHQUFxQixRQUFTLEdBQUlKLEdBQ2xDSyxFQUFVTCxFQUFXbGxDLElBQUt3bEMsRUFBVU4sRUFBVzdnQyxJQUNuRCxHQUFJLFVBQVc2Z0MsRUFBWSxRQUtoQkksRUFBbUIvZ0MsYUFDbkIrZ0MsRUFBbUJELFNBRTFCLElBQUlJLEVBQVVQLEVBQVczZ0MsTUFDekJnaEMsRUFBVSxXQUFjLE9BQU9FLEdBRTNCUCxFQUFXRyxXQUNYRyxFQUFVLFNBQVVFLEdBQ2hCRCxFQUFVQyxJQW1DdEIsT0EvQklILElBQ0FELEVBQW1CdGxDLElBQU0sV0FFckIsT0FBT3VsQyxFQUFRcGpDLEtBQUtwRSxRQUd4QnluQyxJQUNBRixFQUFtQmpoQyxJQUFNLFNBQVVxaEMsR0FDL0IsSUFBSWhvQixFQUFLdGdCLEVBRUx1b0MsRUFBV0osRUFBVUEsRUFBUXBqQyxLQUFLcEUsTUFBUTJuQyxFQUU5QyxHQURBRixFQUFRcmpDLEtBQUtwRSxLQUFNMm5DLEdBQ2ZULEVBQWdCOWYsYUFBZW9nQixHQUFXRyxJQUFhQyxHQUN2RCxJQUNJLElBQUssSUFBSTV6QixHQUFLLFFBQVNrekIsRUFBZ0JGLGFBQWFQLElBQVl4eUIsRUFBS0QsRUFBR3hMLFFBQVN5TCxFQUFHeEwsS0FBTXdMLEVBQUtELEVBQUd4TCxRQUU5RmsrQixFQURlenlCLEVBQUd6TixPQUNUbWhDLEVBQVVDLEdBRzNCLE1BQU85bkIsR0FBU0gsRUFBTSxDQUFFL1csTUFBT2tYLEdBQy9CLFFBQ0ksSUFDUTdMLElBQU9BLEVBQUd4TCxPQUFTcEosRUFBSzJVLEVBQUduTCxTQUFTeEosRUFBRytFLEtBQUs0UCxHQUVwRCxRQUFVLEdBQUkyTCxFQUFLLE1BQU1BLEVBQUkvVyxVQUs3Q3MrQixFQUFnQkQsb0JBQW9CamdDLElBQUl5L0IsR0FDeEMxa0MsT0FBT0MsZUFBZTRRLEVBQVE2ekIsRUFBVWMsR0FDakNMLEVBeEdlVyxDQUFnQmoxQixFQUFRNnpCLEdBQ2RPLGFBQWFQLEdBRTdDLE9BREFGLEVBQVV0NUIsS0FBS3k1QixHQUNSLFdBQ0hILEVBQVV1QixPQUFPdkIsRUFBVXA3QixRQUFRdTdCLEdBQVcsSUNuQ3ZDQyxDQUFnQi96QixFQUFRNnpCLEVBQVVDLElBUzdDTixFQUFzQjVsQyxVQUFVb2xDLG9CQUFzQixTQUFVaHpCLEVBQVFtMUIsSURrS3JFLFNBQTZCbjFCLEVBQVFtMUIsR0FDeEMsSUFBSWIsRUFBa0JoQyxFQUFtQmpqQyxJQUFJMlEsR0FDekNzMEIsSUFDQUEsRUFBZ0I5ZixVQUFZMmdCLEdDcEs1Qm5DLENBQW9CaHpCLEVBQVFtMUIsSUFLaEMzQixFQUFzQjVsQyxVQUFVOGxDLFVBQVksV0FDeEMsSUFBSS9tQixFQUFLbGdCLEVBQ1QsSUFFSSxJQUFLLElBQUkyVSxHQUFLLFNBQVMsUUFBYyxJQUFJLFFBQU9oVSxLQUFLcW1DLGNBQWVweUIsRUFBS0QsRUFBR3hMLFFBQVN5TCxFQUFHeEwsS0FBTXdMLEVBQUtELEVBQUd4TCxRQUVsRzg5QixFQURnQnJ5QixFQUFHek4sU0FJM0IsTUFBT2taLEdBQVNILEVBQU0sQ0FBRTNXLE1BQU84VyxHQUMvQixRQUNJLElBQ1F6TCxJQUFPQSxFQUFHeEwsT0FBU3BKLEVBQUsyVSxFQUFHbkwsU0FBU3hKLEVBQUcrRSxLQUFLNFAsR0FFcEQsUUFBVSxHQUFJdUwsRUFBSyxNQUFNQSxFQUFJM1csU0FHOUJ3OUIsRUFoSCtCLENBaUh4QyxPRTNHRTRCLEVBQTJCLFNBQVU5akMsR0FFckMsU0FBUzhqQyxFQUFVdG9DLEVBQU1DLEdBQ3JCLElBQUl3RSxFQUFRRCxFQUFPRSxLQUFLcEUsS0FBTU4sRUFBTUMsSUFBZUssS0FFbkQsT0FEQW1FLEVBQU16RSxLQUFPQSxFQUNOeUUsRUF5RFgsT0E3REEsUUFBVTZqQyxFQUFXOWpDLEdBV3JCOGpDLEVBQVV6bkMsU0FBVyxTQUFVYixHQUMzQixPQUFPLElBQUlzb0MsRUFBVXRvQyxJQUV6QnNvQyxFQUFVeG5DLFVBQVVQLFdBQWEsV0FDN0JELEtBQUt3VSxPQUFTLElBQUksSUFBVXhVLEtBQUtOLEtBQU1NLEtBQUtpb0MsMkJBRWhERCxFQUFVeG5DLFVBQVVGLG1CQUFxQixXQUNyQyxJQUFJNG5DLEVBQWdCbG9DLEtBQUtOLEtBQUt3SixjQUFjKzdCLEVBQVVrRCxRQUN0RCxJQUFLRCxFQUNELE1BQU0sSUFBSXhuQyxNQUFNLFVBQVl1a0MsRUFBVWtELE9BQVMseUJBRW5Ebm9DLEtBQUtrb0MsY0FBZ0JBLEVBQ3JCbG9DLEtBQUtOLEtBQUtzQixpQkFBaUIsUUFBU2hCLEtBQUtMLFdBQVdnVCxhQUNwRDNTLEtBQUtMLFdBQVdnbUMsZUFFcEJxQyxFQUFVeG5DLFVBQVVHLFFBQVUsV0FDMUJ1RCxFQUFPMUQsVUFBVUcsUUFBUXlELEtBQUtwRSxNQUM5QkEsS0FBS3dVLE9BQU83VCxVQUNaWCxLQUFLTixLQUFLd0Isb0JBQW9CLFFBQVNsQixLQUFLTCxXQUFXZ1QsY0FFM0RxMUIsRUFBVXhuQyxVQUFVSixxQkFBdUIsV0FDdkMsT0FBTyxJQUFJZ2xDLEVBQTBCcGxDLEtBQUtpYSxrQkFFOUMrdEIsRUFBVXhuQyxVQUFVeVosY0FBZ0IsV0FDaEMsSUFBSTlWLEVBQVFuRSxLQUNaLE1BQU8sQ0FDSDBFLFNBQVUsU0FBVW9DLEdBQ2hCM0MsRUFBTXpFLEtBQUtxSCxVQUFVQyxJQUFJRixJQUU3QndKLFNBQVUsU0FBVXhKLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVTJFLFNBQVM1RSxJQUN0RTQzQixXQUFZLFdBQWMsT0FBT3Y2QixFQUFNekUsS0FBSzhGLFVBQzVDUixZQUFhLFNBQVU4QixHQUNuQjNDLEVBQU16RSxLQUFLcUgsVUFBVUksT0FBT0wsSUFFaENrL0IsZUFBZ0IsU0FBVW9DLEdBQ3RCLE9BQU9qa0MsRUFBTXpFLEtBQUsySCxhQUFhLGVBQWdCK2dDLElBRW5EN2lDLFlBQWEsU0FBVUMsR0FDbkJyQixFQUFNekUsS0FBSzhGLFNBQVdBLEdBRTFCNkMsTUFBT3JJLE9BR2Znb0MsRUFBVXhuQyxVQUFVeW5DLHVCQUF5QixXQUN6QyxPQUFPLElBQUksSUFBb0Jqb0MsS0FBS3FvQyx3QkFFeENMLEVBQVV4bkMsVUFBVTZuQyxvQkFBc0IsV0FDdEMsSUFBSWxrQyxFQUFRbkUsS0FDWixPQUFPLFNBQVMsUUFBUyxHQUFJLGtCQUF3QkEsT0FBUSxDQUFFb2Esb0JBQXFCLFdBQWMsT0FBT2pXLEVBQU0rakMsY0FBYzE4Qix5QkFBNEJoRSxZQUFhLFdBQWMsT0FBTyxNQUV4THdnQyxFQTlEbUIsQ0ErRDVCLDBKQ3hFRTVsQyxFQUFhLENBQ2JlLEtBQU0sb0NBRU5HLEVBQVUsQ0FDVmdsQyxjQUFlLElBQU1sbUMsRUFBV2UsTUNEaENvbEMsRUFBd0QsU0FBVXJrQyxHQUVsRSxTQUFTcWtDLEVBQXVDem1DLEdBQzVDLE9BQU9vQyxFQUFPRSxLQUFLcEUsTUFBTSxTQUFTLFFBQVMsR0FBSXVvQyxFQUF1Q2xrQyxnQkFBaUJ2QyxLQUFhOUIsS0FnQ3hILE9BbENBLFFBQVV1b0MsRUFBd0Nya0MsR0FJbERuQyxPQUFPQyxlQUFldW1DLEVBQXdDLGFBQWMsQ0FDeEV0bUMsSUFBSyxXQUNELE9BQU9HLEdBRVhGLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXVtQyxFQUF3QyxVQUFXLENBQ3JFdG1DLElBQUssV0FDRCxPQUFPcUIsR0FFWHBCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXVtQyxFQUF3QyxpQkFBa0IsQ0FJNUV0bUMsSUFBSyxXQUNELE1BQU8sQ0FDSDQ4QixXQUFZLGVBR3BCMzhCLFlBQVksRUFDWkMsY0FBYyxJQUVsQm9tQyxFQUF1Qy9uQyxVQUFVZ29DLGdCQUFrQixTQUFVQyxFQUFlQyxHQUN4RkQsRUFBZ0J4OUIsS0FBS3lpQixJQUFJK2EsRUFBZUMsR0FDeEMxb0MsS0FBSzhCLFFBQVErOEIsV0FBVzRKLEVBQWdCLE1BQVFDLElBRTdDSCxFQW5DZ0QsQ0FvQ3pELEtDcENFSSxFQUE4QyxTQUFVemtDLEdBRXhELFNBQVN5a0MsSUFDTCxPQUFrQixPQUFYemtDLEdBQW1CQSxFQUFPaEUsTUFBTUYsS0FBTUYsWUFBY0UsS0F3Qi9ELE9BMUJBLFFBQVUyb0MsRUFBOEJ6a0MsR0FJeEN5a0MsRUFBNkJwb0MsU0FBVyxTQUFVYixHQUM5QyxPQUFPLElBQUlpcEMsRUFBNkJqcEMsSUFFNUNxQyxPQUFPQyxlQUFlMm1DLEVBQTZCbm9DLFVBQVcseUJBQTBCLENBRXBGeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLTCxZQUVoQnVDLFlBQVksRUFDWkMsY0FBYyxJQUVsQndtQyxFQUE2Qm5vQyxVQUFVSixxQkFBdUIsV0FDMUQsSUFBSStELEVBQVFuRSxLQVFaLE9BQU8sSUFBSXVvQyxFQUxHLENBQ1YxSixXQUFZLFNBQVVqckIsR0FDbEJ6UCxFQUFNekUsS0FBS3d3QixZQUFjdGMsTUFLOUIrMEIsRUEzQnNDLENBNEIvQyxLQy9CRSxFQUFVLENBQ1Z4TixjQUFlLGdCQUNmQyxpQkFBa0IsbUJBQ2xCd04sZUFBZ0IseUJBQ2hCcHhCLGVBQWdCLHNCQUNoQmdrQixzQkFBdUIsaUNBQ3ZCQyxxQkFBc0IsbUJBQ3RCRSxpQkFBa0IsdUJBQ2xCa04sZ0JBQWlCLGlDQUNqQkMsZ0JBQWlCLGlDQUNqQkMsdUJBQXdCLG1DQUV4QixFQUFhLENBQ2JobUMsU0FBVSwyQkFDVjgzQixRQUFTLDBCQUNUbU8sWUFBYSw2QkFDYmxPLFFBQVMsMEJBQ1RtTyxlQUFnQixpQ0FDaEJqd0IsU0FBVSwyQkFDVmdpQixTQUFVLDJCQUNWNzNCLEtBQU0saUJBQ04rbEMsU0FBVSwyQkFDVmhPLGtCQUFtQixvQ0FDbkJpTyxtQkFBb0Isc0NBRXBCcGxDLEVBQVUsQ0FDVmc0QixZQUFhLEtBTWJxTixFQUE0QixDQUM1QixVQUFXLE1BQU8sTUFBTyxXQUFZLE9BQVEsWUFBYSxhQUsxREMsRUFBcUIsQ0FDckIsUUFBUyxPQUFRLGlCQUFrQixRQUFTLFFBQVMsT0FBUSxRQ3BDN0RDLEVBQXFCLENBQUMsWUFBYSxjQUNuQ3JILEVBQXFCLENBQUMsUUFBUyxXQUMvQnNILEVBQXdDLFNBQVVybEMsR0FNbEQsU0FBU3FsQyxFQUF1QnpuQyxFQUFTbzZCLFFBQ2YsSUFBbEJBLElBQTRCQSxFQUFnQixJQUNoRCxJQUFJLzNCLEVBQVFELEVBQU9FLEtBQUtwRSxNQUFNLFNBQVMsUUFBUyxHQUFJdXBDLEVBQXVCbGxDLGdCQUFpQnZDLEtBQWE5QixLQTRCekcsT0EzQkFtRSxFQUFNK3RCLFdBQVksRUFDbEIvdEIsRUFBTXFsQyxtQkFBb0IsRUFDMUJybEMsRUFBTXNsQyxPQUFRLEVBQ2R0bEMsRUFBTXVsQyxxQkFBc0IsRUFDNUJ2bEMsRUFBTXdsQyx1QkFBd0IsRUFDOUJ4bEMsRUFBTXU0QixXQUFhUixFQUFjUSxXQUNqQ3Y0QixFQUFNeWxDLGlCQUFtQjFOLEVBQWMwTixpQkFDdkN6bEMsRUFBTXM0QixZQUFjUCxFQUFjTyxZQUNsQ3Q0QixFQUFNMGxDLGFBQWUzTixFQUFjMk4sYUFDbkMxbEMsRUFBTTJsQyxrQkFBb0IsV0FDdEIzbEMsRUFBTTRsQyxpQkFFVjVsQyxFQUFNNmxDLGlCQUFtQixXQUNyQjdsQyxFQUFNOGxDLG1CQUVWOWxDLEVBQU0rbEMsa0JBQW9CLFdBQ3RCL2xDLEVBQU1nbUMsZUFFVmhtQyxFQUFNaW1DLGtCQUFvQixTQUFVOW9DLEdBQ2hDNkMsRUFBTXd1QixtQkFBbUJyeEIsSUFFN0I2QyxFQUFNa21DLDRCQUE4QixXQUNoQ2xtQyxFQUFNbW1DLDhCQUVWbm1DLEVBQU1vbUMsaUNBQW1DLFNBQVVDLEdBQy9Dcm1DLEVBQU1zbUMsZ0NBQWdDRCxJQUVuQ3JtQyxFQW1nQlgsT0F0aUJBLFFBQVVvbEMsRUFBd0JybEMsR0FxQ2xDbkMsT0FBT0MsZUFBZXVuQyxFQUF3QixhQUFjLENBQ3hEdG5DLElBQUssV0FDRCxPQUFPLEdBRVhDLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXVuQyxFQUF3QixVQUFXLENBQ3JEdG5DLElBQUssV0FDRCxPQUFPLEdBRVhDLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXVuQyxFQUF3QixVQUFXLENBQ3JEdG5DLElBQUssV0FDRCxPQUFPOEIsR0FFWDdCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXVuQyxFQUF1Qi9vQyxVQUFXLG9CQUFxQixDQUN6RXlCLElBQUssV0FDRCxJQUFJbWQsRUFBT3BmLEtBQUswcUMsaUJBQWlCdHJCLEtBQ2pDLE9BQU9pcUIsRUFBbUJsK0IsUUFBUWlVLElBQVMsR0FFL0NsZCxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWV1bkMsRUFBdUIvb0MsVUFBVyxjQUFlLENBQ25FeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLMnFDLG1CQUFxQjNxQyxLQUFLa3lCLGFBQWVseUIsS0FBS3UrQixZQUN0RHYrQixLQUFLNHFDLGNBRWIxb0MsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFldW5DLEVBQXVCL29DLFVBQVcsY0FBZSxDQUNuRXlCLElBQUssV0FDRCxPQUFRakMsS0FBS2t5QixZQUFjbHlCLEtBQUt1L0IsYUFBZXYvQixLQUFLdStCLFlBRXhEcjhCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXVuQyxFQUF3QixpQkFBa0IsQ0FLNUR0bkMsSUFBSyxXQUVELE1BQU8sQ0FDSHlDLFNBQVUsYUFDVk0sWUFBYSxhQUNic0wsU0FBVSxXQUFjLE9BQU8sR0FDL0J1NkIsYUFBYyxhQUNkQyxnQkFBaUIsYUFDakJDLG9DQUFxQyxhQUNyQ0Msc0NBQXVDLGFBQ3ZDQyxnQ0FBaUMsYUFDakNDLGtDQUFtQyxhQUNuQ0MseUNBQTBDLFdBQ3RDLE9BQU8sSUFBSUMsa0JBQWlCLGdCQUVoQ0MsMkNBQTRDLGFBQzVDWCxlQUFnQixXQUFjLE9BQU8sTUFDckN4WSxVQUFXLFdBQWMsT0FBTyxHQUNoQ29aLG1CQUFvQixhQUNwQkMscUJBQXNCLGFBQ3RCQyw2QkFBOEIsYUFDOUJDLFdBQVksYUFDWjNPLFdBQVksYUFDWkUsaUJBQWtCLGFBQ2xCSCxTQUFVLFdBQWMsT0FBTyxHQUMvQkUsY0FBZSxXQUFjLE9BQU8sR0FDcENFLFdBQVksV0FBYyxPQUFPLEdBQ2pDQyxhQUFjLGFBQ2RDLGFBQWMsZUFJdEJqN0IsWUFBWSxFQUNaQyxjQUFjLElBRWxCb25DLEVBQXVCL29DLFVBQVVILEtBQU8sV0FDcEMsSUFBSXFILEVBQUtySSxFQUFJeUosRUFBS2tMLEVBQ2RoVSxLQUFLOEIsUUFBUSs2QixZQUFjNzhCLEtBQUswcUMsaUJBQWlCZ0IsVUFDakQxckMsS0FBSzhCLFFBQVFrN0Isa0JBQWlCLEdBRTlCaDlCLEtBQUs4QixRQUFRb3dCLFlBQ2JseUIsS0FBSzhwQyxvQkFFQTlwQyxLQUFLOEIsUUFBUSs2QixZQUFjNzhCLEtBQUs4VyxjQUNyQzlXLEtBQUtrOUIsY0FBYSxHQUNsQmw5QixLQUFLOEIsUUFBUWc3QixZQUFXLEdBQ3hCOThCLEtBQUsyckMsZUFBYyxJQUV2QjNyQyxLQUFLOEIsUUFBUW1wQyxnQ0FBZ0MsUUFBU2pyQyxLQUFLOHBDLG1CQUMzRDlwQyxLQUFLOEIsUUFBUW1wQyxnQ0FBZ0MsT0FBUWpyQyxLQUFLZ3FDLGtCQUMxRGhxQyxLQUFLOEIsUUFBUW1wQyxnQ0FBZ0MsUUFBU2pyQyxLQUFLa3FDLG1CQUMzRCxJQUNJLElBQUssSUFBSTBCLEdBQXVCLFFBQVN0QyxHQUFxQnVDLEVBQXlCRCxFQUFxQnBqQyxRQUFTcWpDLEVBQXVCcGpDLEtBQU1vakMsRUFBeUJELEVBQXFCcGpDLE9BQVEsQ0FDcE0sSUFBSTNILEVBQVVnckMsRUFBdUJybEMsTUFDckN4RyxLQUFLOEIsUUFBUW1wQyxnQ0FBZ0NwcUMsRUFBU2IsS0FBS29xQyxvQkFHbkUsTUFBT3poQyxHQUFTakIsRUFBTSxDQUFFa0IsTUFBT0QsR0FDL0IsUUFDSSxJQUNRa2pDLElBQTJCQSxFQUF1QnBqQyxPQUFTcEosRUFBS3VzQyxFQUFxQi9pQyxTQUFTeEosRUFBRytFLEtBQUt3bkMsR0FFOUcsUUFBVSxHQUFJbGtDLEVBQUssTUFBTUEsRUFBSWtCLE9BRWpDLElBQ0ksSUFBSyxJQUFJMjVCLEdBQXVCLFFBQVNOLEdBQXFCTyxFQUF5QkQsRUFBcUIvNUIsUUFBU2c2QixFQUF1Qi81QixLQUFNKzVCLEVBQXlCRCxFQUFxQi81QixPQUN4TDNILEVBQVUyaEMsRUFBdUJoOEIsTUFDckN4RyxLQUFLOEIsUUFBUWlwQyxvQ0FBb0NscUMsRUFBU2IsS0FBS3FxQyw2QkFHdkUsTUFBT3BoQyxHQUFTSCxFQUFNLENBQUVGLE1BQU9LLEdBQy9CLFFBQ0ksSUFDUXU1QixJQUEyQkEsRUFBdUIvNUIsT0FBU3VMLEVBQUt1dUIsRUFBcUIxNUIsU0FBU21MLEVBQUc1UCxLQUFLbStCLEdBRTlHLFFBQVUsR0FBSXo1QixFQUFLLE1BQU1BLEVBQUlGLE9BRWpDNUksS0FBSzhyQyxtQkFDRDlyQyxLQUFLOEIsUUFBUXFwQyx5Q0FBeUNuckMsS0FBS3VxQyxrQ0FDL0R2cUMsS0FBSytyQyxvQkFBb0IvckMsS0FBS3UrQixXQUFXeCtCLFNBRTdDd3BDLEVBQXVCL29DLFVBQVVHLFFBQVUsV0FDdkMsSUFBSTRlLEVBQUtsZ0IsRUFBSXNnQixFQUFLM0wsRUFDbEJoVSxLQUFLOEIsUUFBUW9wQyxrQ0FBa0MsUUFBU2xyQyxLQUFLOHBDLG1CQUM3RDlwQyxLQUFLOEIsUUFBUW9wQyxrQ0FBa0MsT0FBUWxyQyxLQUFLZ3FDLGtCQUM1RGhxQyxLQUFLOEIsUUFBUW9wQyxrQ0FBa0MsUUFBU2xyQyxLQUFLa3FDLG1CQUM3RCxJQUNJLElBQUssSUFBSThCLEdBQXVCLFFBQVMxQyxHQUFxQjJDLEVBQXlCRCxFQUFxQnhqQyxRQUFTeWpDLEVBQXVCeGpDLEtBQU13akMsRUFBeUJELEVBQXFCeGpDLE9BQVEsQ0FDcE0sSUFBSTNILEVBQVVvckMsRUFBdUJ6bEMsTUFDckN4RyxLQUFLOEIsUUFBUW9wQyxrQ0FBa0NycUMsRUFBU2IsS0FBS29xQyxvQkFHckUsTUFBTzFxQixHQUFTSCxFQUFNLENBQUUzVyxNQUFPOFcsR0FDL0IsUUFDSSxJQUNRdXNCLElBQTJCQSxFQUF1QnhqQyxPQUFTcEosRUFBSzJzQyxFQUFxQm5qQyxTQUFTeEosRUFBRytFLEtBQUs0bkMsR0FFOUcsUUFBVSxHQUFJenNCLEVBQUssTUFBTUEsRUFBSTNXLE9BRWpDLElBQ0ksSUFBSyxJQUFJNjVCLEdBQXVCLFFBQVNSLEdBQXFCUyxFQUF5QkQsRUFBcUJqNkIsUUFBU2s2QixFQUF1Qmo2QixLQUFNaTZCLEVBQXlCRCxFQUFxQmo2QixPQUN4TDNILEVBQVU2aEMsRUFBdUJsOEIsTUFDckN4RyxLQUFLOEIsUUFBUWtwQyxzQ0FBc0NucUMsRUFBU2IsS0FBS3FxQyw2QkFHekUsTUFBT3ZxQixHQUFTSCxFQUFNLENBQUUvVyxNQUFPa1gsR0FDL0IsUUFDSSxJQUNRNGlCLElBQTJCQSxFQUF1Qmo2QixPQUFTdUwsRUFBS3l1QixFQUFxQjU1QixTQUFTbUwsRUFBRzVQLEtBQUtxK0IsR0FFOUcsUUFBVSxHQUFJOWlCLEVBQUssTUFBTUEsRUFBSS9XLE9BRWpDNUksS0FBSzhCLFFBQVF1cEMsMkNBQTJDcnJDLEtBQUs4ckMscUJBS2pFdkMsRUFBdUIvb0MsVUFBVThwQywyQkFBNkIsV0FDMUQsSUFBSTRCLEVBQWNsc0MsS0FBSzhCLFFBQVE0b0MsaUJBQzNCd0IsR0FBZUEsRUFBWTFtQyxXQUcvQnhGLEtBQUt3cEMsbUJBQW9CLElBSzdCRCxFQUF1Qi9vQyxVQUFVaXFDLGdDQUFrQyxTQUFVRCxHQUN6RSxJQUFJcm1DLEVBQVFuRSxLQUNad3FDLEVBQWV0cUIsTUFBSyxTQUFVaXNCLEdBQzFCLE9BQUkvQyxFQUEwQmorQixRQUFRZ2hDLElBQWtCLElBQ3BEaG9DLEVBQU1pb0MsZUFBYyxHQUNwQmpvQyxFQUFNckMsUUFBUWs3QixpQkFBaUI3NEIsRUFBTXVtQyxpQkFBaUJnQixXQUMvQyxNQUlYbEIsRUFBZXIvQixRQUFRLGNBQWdCLEdBQ3ZDbkwsS0FBSytyQyxvQkFBb0IvckMsS0FBS3UrQixXQUFXeCtCLFNBTWpEd3BDLEVBQXVCL29DLFVBQVUwOEIsYUFBZSxTQUFVMkMsR0FDdEQsR0FBSzcvQixLQUFLOEIsUUFBUW03QixjQUFpQmo5QixLQUFLOEIsUUFBUSs2QixXQUdoRCxHQUFJZ0QsRUFBVyxDQUNYLElBQUlFLEVBQWEvL0IsS0FBSzhCLFFBQVFpN0IsZ0JBQWtCaDVCLEVBQVFnNEIsWUFDeEQvN0IsS0FBSzhCLFFBQVFvN0IsYUFBYTZDLFFBRzFCLy9CLEtBQUs4QixRQUFRcTdCLGdCQU1yQm9NLEVBQXVCL29DLFVBQVV1cEMsY0FBZ0IsV0FDN0MvcEMsS0FBS2t5QixXQUFZLEVBQ2pCbHlCLEtBQUtxc0MsYUFBYXJzQyxLQUFLa3lCLFdBQ3ZCbHlCLEtBQUs4QixRQUFRd3BDLHFCQUNUdHJDLEtBQUs4QixRQUFRKzZCLGFBQ2I3OEIsS0FBS2s5QixhQUFhbDlCLEtBQUs4VyxhQUN2QjlXLEtBQUs4QixRQUFRZzdCLFdBQVc5OEIsS0FBSzhXLGFBQzdCOVcsS0FBSzJyQyxjQUFjM3JDLEtBQUs4VyxhQUN4QjlXLEtBQUs4QixRQUFRMnBDLFdBQVd6ckMsS0FBSzRXLGVBRTdCNVcsS0FBSzA4QixhQUNKMThCLEtBQUswOEIsV0FBVytFLGdCQUFtQnpoQyxLQUFLMDhCLFdBQVc2RSxnQkFDL0N2aEMsS0FBS3lwQyxPQUNWenBDLEtBQUswOEIsV0FBV2tGLHNCQU94QjJILEVBQXVCL29DLFVBQVVteUIsbUJBQXFCLFNBQVVyeEIsR0FDNUQsSUFBSXRCLEtBQUswK0IsZUFBZ0IxK0IsS0FBSzhCLFFBQVFtN0IsYUFBdEMsQ0FHQSxJQUFJNEgsRUFBVXZqQyxFQUFJdWpDLFFBQ2R5SCxFQUFjekgsRUFBVUEsRUFBUSxHQUFLdmpDLEVBQ3JDcWpDLEVBQW1CMkgsRUFBWTE1QixPQUFPcEgsd0JBQ3RDc1csRUFBY3dxQixFQUFZeEgsUUFBVUgsRUFBaUIzbkIsS0FDekRoZCxLQUFLOEIsUUFBUTBwQyw2QkFBNkIxcEIsS0FLOUN5bkIsRUFBdUIvb0MsVUFBVTJwQyxZQUFjLFdBQzNDbnFDLEtBQUt1c0Msb0JBQ0x2c0MsS0FBSytyQyxvQkFBb0IvckMsS0FBS3UrQixXQUFXeCtCLFNBTTdDd3BDLEVBQXVCL29DLFVBQVUrckMsa0JBQW9CLFdBQzVDdnNDLEtBQUt3cEMsbUJBQ054cEMsS0FBSytwQyxpQkFNYlIsRUFBdUIvb0MsVUFBVXlwQyxnQkFBa0IsV0FDL0NqcUMsS0FBS2t5QixXQUFZLEVBQ2pCbHlCLEtBQUs4QixRQUFReXBDLHVCQUNiLElBQUloTSxFQUFVdi9CLEtBQUt1L0IsVUFDbkJ2L0IsS0FBS29zQyxjQUFjN00sR0FDbkJ2L0IsS0FBS3FzQyxhQUFhcnNDLEtBQUtreUIsV0FDbkJseUIsS0FBSzhCLFFBQVErNkIsYUFDYjc4QixLQUFLazlCLGFBQWFsOUIsS0FBSzhXLGFBQ3ZCOVcsS0FBSzhCLFFBQVFnN0IsV0FBVzk4QixLQUFLOFcsYUFDN0I5VyxLQUFLMnJDLGNBQWMzckMsS0FBSzhXLGFBQ3hCOVcsS0FBSzhCLFFBQVEycEMsV0FBV3pyQyxLQUFLNFcsY0FFNUI1VyxLQUFLOFcsY0FDTjlXLEtBQUt3cEMsbUJBQW9CLElBR2pDRCxFQUF1Qi9vQyxVQUFVKzlCLFNBQVcsV0FDeEMsT0FBT3YrQixLQUFLMHFDLGlCQUFpQmxrQyxPQUtqQytpQyxFQUF1Qi9vQyxVQUFVODlCLFNBQVcsU0FBVTkzQixHQU9sRCxHQUpJeEcsS0FBS3UrQixhQUFlLzNCLElBQ3BCeEcsS0FBSzBxQyxpQkFBaUJsa0MsTUFBUUEsR0FFbEN4RyxLQUFLK3JDLG9CQUFvQnZsQyxFQUFNekcsUUFDM0JDLEtBQUsycEMsc0JBQXVCLENBQzVCLElBQUlwSyxFQUFVdi9CLEtBQUt1L0IsVUFDbkJ2L0IsS0FBS29zQyxjQUFjN00sR0FFbkJ2L0IsS0FBSzhCLFFBQVErNkIsYUFDYjc4QixLQUFLazlCLGFBQWFsOUIsS0FBSzhXLGFBQ3ZCOVcsS0FBSzhCLFFBQVFnN0IsV0FBVzk4QixLQUFLOFcsYUFDN0I5VyxLQUFLMnJDLGNBQWMzckMsS0FBSzhXLGFBQ3BCOVcsS0FBSzJwQyx1QkFDTDNwQyxLQUFLOEIsUUFBUTJwQyxXQUFXenJDLEtBQUs0VyxlQVF6QzJ5QixFQUF1Qi9vQyxVQUFVKytCLFFBQVUsV0FDdkMsT0FBT3YvQixLQUFLMHBDLG9CQUFzQjFwQyxLQUFLd3NDLHFCQUF1QnhzQyxLQUFLeXBDLE9BS3ZFRixFQUF1Qi9vQyxVQUFVOCtCLFNBQVcsU0FBVUMsR0FDbER2L0IsS0FBS3lwQyxNQUFRbEssRUFDYnYvQixLQUFLb3NDLGNBQWM3TSxHQUNuQixJQUFJM29CLEdBQWUyb0IsSUFBWXYvQixLQUFLa3lCLGFBQWVseUIsS0FBS3UrQixXQUNwRHYrQixLQUFLOEIsUUFBUSs2QixZQUNiNzhCLEtBQUs4QixRQUFRMnBDLFdBQVc3MEIsSUFPaEMyeUIsRUFBdUIvb0MsVUFBVWlzQyx5QkFBMkIsU0FBVUMsR0FDbEUxc0MsS0FBSzJwQyxzQkFBd0IrQyxHQU1qQ25ELEVBQXVCL29DLFVBQVVtc0MseUJBQTJCLFdBQ3hELE9BQU8zc0MsS0FBSzJwQyx1QkFRaEJKLEVBQXVCL29DLFVBQVVvc0MsdUJBQXlCLFNBQVVsRCxHQUNoRTFwQyxLQUFLMHBDLG9CQUFzQkEsR0FFL0JILEVBQXVCL29DLFVBQVVrK0IsV0FBYSxXQUMxQyxPQUFPMStCLEtBQUswcUMsaUJBQWlCbGxDLFVBS2pDK2pDLEVBQXVCL29DLFVBQVUrRSxZQUFjLFNBQVVDLEdBQ3JEeEYsS0FBSzBxQyxpQkFBaUJsbEMsU0FBV0EsRUFDakN4RixLQUFLNnNDLGNBQWNybkMsSUFLdkIrakMsRUFBdUIvb0MsVUFBVW8rQixxQkFBdUIsU0FBVWhyQixHQUMxRDVULEtBQUswOEIsWUFDTDE4QixLQUFLMDhCLFdBQVdtQyxXQUFXanJCLElBTW5DMjFCLEVBQXVCL29DLFVBQVV3L0Isd0JBQTBCLFNBQVVybUIsR0FDN0QzWixLQUFLeThCLGFBQ0x6OEIsS0FBS3k4QixZQUFZd0QsYUFBYXRtQixJQU10QzR2QixFQUF1Qi9vQyxVQUFVMC9CLHNCQUF3QixTQUFVdHNCLEdBQzNENVQsS0FBS3k4QixhQUNMejhCLEtBQUt5OEIsWUFBWW9DLFdBQVdqckIsSUFNcEMyMUIsRUFBdUIvb0MsVUFBVXNzQyx5QkFBMkIsU0FBVW56QixHQUM5RDNaLEtBQUs2cEMsY0FDTDdwQyxLQUFLNnBDLGFBQWE1SixhQUFhdG1CLElBTXZDNHZCLEVBQXVCL29DLFVBQVV1c0MsdUJBQXlCLFNBQVVuNUIsR0FDNUQ1VCxLQUFLNnBDLGNBQ0w3cEMsS0FBSzZwQyxhQUFhaEwsV0FBV2pyQixJQU9yQzIxQixFQUF1Qi9vQyxVQUFVdXJDLG9CQUFzQixTQUFVdEQsR0FDN0QsR0FBS3pvQyxLQUFLNHBDLGlCQUFWLENBR0EsSUFBSWxCLEVBQVkxb0MsS0FBSzBxQyxpQkFBaUJoQyxVQUN0QyxJQUFtQixJQUFmQSxFQUNBLE1BQU0sSUFBSWhvQyxNQUFNLHVGQUVwQlYsS0FBSzRwQyxpQkFBaUJwQixnQkFBZ0JDLEVBQWVDLEtBTXpEYSxFQUF1Qi9vQyxVQUFVb3FDLFdBQWEsV0FFMUMsT0FBTzVxQyxLQUFLMHFDLGlCQUFpQnNDLFNBQVNDLFdBQVksR0FLdEQxRCxFQUF1Qi9vQyxVQUFVZ3NDLG1CQUFxQixXQUNsRCxPQUFPeHNDLEtBQUswcUMsaUJBQWlCc0MsU0FBU3ZELE9BSzFDRixFQUF1Qi9vQyxVQUFVNHJDLGNBQWdCLFNBQVU3TSxHQUN2RCxJQUFJekUsRUFBVXlPLEVBQXVCbm5DLFdBQVcwNEIsUUFPaEQsR0FOSXlFLEVBQ0F2L0IsS0FBSzhCLFFBQVFrRCxZQUFZODFCLEdBR3pCOTZCLEtBQUs4QixRQUFRNEMsU0FBU28yQixHQUV0Qjk2QixLQUFLMDhCLFdBQVksQ0FLakIsR0FKQTE4QixLQUFLMDhCLFdBQVcrRCxZQUFZbEIsSUFHRHYvQixLQUFLMDhCLFdBQVc2RSxlQUV2QyxPQUVKLElBQUliLEVBQW9CMWdDLEtBQUswOEIsV0FBV2lFLFlBQ3BDQyxFQUFlNWdDLEtBQUswOEIsV0FBV21FLFFBQy9CSCxHQUFxQkUsRUFDckI1Z0MsS0FBSzhCLFFBQVErb0MsYUFBYSxtQkFBMEJqSyxHQUdwRDVnQyxLQUFLOEIsUUFBUWdwQyxnQkFBZ0Isc0JBT3pDdkIsRUFBdUIvb0MsVUFBVTZyQyxhQUFlLFNBQVVuYSxHQUN0RCxJQUFJMkksRUFBVTBPLEVBQXVCbm5DLFdBQVd5NEIsUUFDNUMzSSxFQUNBbHlCLEtBQUs4QixRQUFRNEMsU0FBU20yQixHQUd0Qjc2QixLQUFLOEIsUUFBUWtELFlBQVk2MUIsSUFNakMwTyxFQUF1Qi9vQyxVQUFVcXNDLGNBQWdCLFNBQVVuTyxHQUN2RCxJQUFJci9CLEVBQUtrcUMsRUFBdUJubkMsV0FBWVcsRUFBVzFELEVBQUcwRCxTQUFVKzNCLEVBQVV6N0IsRUFBR3k3QixRQUM3RTRELEdBQ0ExK0IsS0FBSzhCLFFBQVE0QyxTQUFTM0IsR0FDdEIvQyxLQUFLOEIsUUFBUWtELFlBQVk4MUIsSUFHekI5NkIsS0FBSzhCLFFBQVFrRCxZQUFZakMsR0FFekIvQyxLQUFLeThCLGFBQ0x6OEIsS0FBS3k4QixZQUFZbDNCLFlBQVltNUIsR0FFN0IxK0IsS0FBSzZwQyxjQUNMN3BDLEtBQUs2cEMsYUFBYXRrQyxZQUFZbTVCLElBTXRDNkssRUFBdUIvb0MsVUFBVW1yQyxjQUFnQixTQUFVdUIsR0FDdkQsSUFBSWpFLEVBQWlCTSxFQUF1Qm5uQyxXQUFXNm1DLGVBQ25EaUUsRUFDQWx0QyxLQUFLOEIsUUFBUTRDLFNBQVN1a0MsR0FHdEJqcEMsS0FBSzhCLFFBQVFrRCxZQUFZaWtDLElBT2pDTSxFQUF1Qi9vQyxVQUFVa3FDLGVBQWlCLFdBTzlDLE9BRGtCMXFDLEtBQUs4QixRQUFVOUIsS0FBSzhCLFFBQVE0b0MsaUJBQW1CLE9BQzNDLENBQ2xCbGxDLFVBQVUsRUFDVmtqQyxXQUFZLEVBQ1pnRCxVQUFVLEVBQ1Z0c0IsS0FBTSxRQUNONHRCLFNBQVUsQ0FDTkMsVUFBVSxFQUNWeEQsT0FBTyxHQUVYampDLE1BQU8sS0FHUitpQyxFQXZpQmdDLENBd2lCekMsS0M3aUJFLEVBQWEsQ0FDYjRELHVCQUF3Qix5Q0FDeEJuTSwyQkFBNEIsNkNBQzVCNzlCLEtBQU0sOEJBRU4sRUFBVSxDQUNWMjlCLFlBQWEsY0FDYkMsS0FBTSxPQUNOdUgsY0FBZSxJQUFNLEVBQVdubEMsTUNMaENpcUMsRUFBa0QsU0FBVWxwQyxHQUU1RCxTQUFTa3BDLEVBQWlDdHJDLEdBQ3RDLE9BQU9vQyxFQUFPRSxLQUFLcEUsTUFBTSxTQUFTLFFBQVMsR0FBSW90QyxFQUFpQy9vQyxnQkFBaUJ2QyxLQUFhOUIsS0EySGxILE9BN0hBLFFBQVVvdEMsRUFBa0NscEMsR0FJNUNuQyxPQUFPQyxlQUFlb3JDLEVBQWtDLGFBQWMsQ0FDbEVuckMsSUFBSyxXQUNELE9BQU8sR0FFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlb3JDLEVBQWtDLFVBQVcsQ0FDL0RuckMsSUFBSyxXQUNELE9BQU8sR0FFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlb3JDLEVBQWtDLGlCQUFrQixDQUl0RW5yQyxJQUFLLFdBRUQsTUFBTyxDQUNIeUMsU0FBVSxhQUNWTSxZQUFhLGFBQ2JzTCxTQUFVLFdBQWMsT0FBTyxHQUMvQjh3QixRQUFTLFdBQWMsT0FBTyxNQUM5QkQsUUFBUyxhQUNURSxXQUFZLGFBQ1p4QyxXQUFZLGVBSXBCMzhCLFlBQVksRUFDWkMsY0FBYyxJQUVsQmlyQyxFQUFpQzVzQyxVQUFVcWdDLE1BQVEsV0FDL0MsT0FBTzdnQyxLQUFLOEIsUUFBUXMvQixRQUFRLE9BRWhDZ00sRUFBaUM1c0MsVUFBVW1nQyxVQUFZLFdBQ25ELE1BQXFELFNBQTlDM2dDLEtBQUs4QixRQUFRcy9CLFFBQVEsZ0JBS2hDZ00sRUFBaUM1c0MsVUFBVXErQixXQUFhLFNBQVVqckIsR0FDOUQ1VCxLQUFLOEIsUUFBUSs4QixXQUFXanJCLElBRTVCdzVCLEVBQWlDNXNDLFVBQVVpaEMsYUFBZSxXQUN0RCxPQUFPemhDLEtBQUs4QixRQUFRd08sU0FBUywyQkFLakM4OEIsRUFBaUM1c0MsVUFBVTZzQyxjQUFnQixTQUFVNUwsR0FDN0RBLEVBQ0F6aEMsS0FBSzhCLFFBQVE0QyxTQUFTLDBCQUd0QjFFLEtBQUs4QixRQUFRa0QsWUFBWSwyQkFNakNvb0MsRUFBaUM1c0MsVUFBVStnQyxhQUFlLFdBQ3RELE9BQU92aEMsS0FBSzhCLFFBQVF3TyxTQUFTLCtCQUtqQzg4QixFQUFpQzVzQyxVQUFVOGdDLGNBQWdCLFNBQVVDLEdBQzdEQSxFQUNBdmhDLEtBQUs4QixRQUFRNEMsU0FBUyw4QkFHdEIxRSxLQUFLOEIsUUFBUWtELFlBQVksK0JBTWpDb29DLEVBQWlDNXNDLFVBQVVvaEMsbUJBQXFCLFdBQzVENWhDLEtBQUs4QixRQUFRdS9CLFdBQVcsZ0JBSzVCK0wsRUFBaUM1c0MsVUFBVWlnQyxZQUFjLFNBQVU2TSxHQUMvRCxJQUFJQyxFQUF5QnZ0QyxLQUFLOEIsUUFBUXdPLFNBQVMsMEJBRS9DazlCLEVBRDRCeHRDLEtBQUs4QixRQUFRd08sU0FBUyxnQ0FDUWc5QixFQUMxREUsR0FDQXh0QyxLQUFLNGhDLHFCQUdzQyxVQUF2QzVoQyxLQUFLOEIsUUFBUXMvQixRQUFRLFFBQ3JCcGhDLEtBQUt5dEMsbUJBR0x6dEMsS0FBSzhCLFFBQVFxL0IsUUFBUSxPQUFjLFVBSXZDbmhDLEtBQUs4QixRQUFRdS9CLFdBQVcsUUFFdkJrTSxHQUEyQkMsR0FDNUJ4dEMsS0FBSzZoQyxRQU1idUwsRUFBaUM1c0MsVUFBVXFoQyxLQUFPLFdBQzlDN2hDLEtBQUs4QixRQUFRcS9CLFFBQVEsY0FBcUIsU0FFOUNpTSxFQUFpQzVzQyxVQUFVaXRDLGlCQUFtQixXQUMxRCxJQUFJdHBDLEVBQVFuRSxLQUNaQSxLQUFLOEIsUUFBUXUvQixXQUFXLFFBQ3hCNzBCLHVCQUFzQixXQUNsQnJJLEVBQU1yQyxRQUFRcS9CLFFBQVEsT0FBYyxhQUdyQ2lNLEVBOUgwQyxDQStIbkQsS0MvSEVNLEVBQXdDLFNBQVV4cEMsR0FFbEQsU0FBU3dwQyxJQUNMLE9BQWtCLE9BQVh4cEMsR0FBbUJBLEVBQU9oRSxNQUFNRixLQUFNRixZQUFjRSxLQWdDL0QsT0FsQ0EsUUFBVTB0QyxFQUF3QnhwQyxHQUlsQ3dwQyxFQUF1Qm50QyxTQUFXLFNBQVViLEdBQ3hDLE9BQU8sSUFBSWd1QyxFQUF1Qmh1QyxJQUV0Q3FDLE9BQU9DLGVBQWUwckMsRUFBdUJsdEMsVUFBVyx5QkFBMEIsQ0FFOUV5QixJQUFLLFdBQ0QsT0FBT2pDLEtBQUtMLFlBRWhCdUMsWUFBWSxFQUNaQyxjQUFjLElBRWxCdXJDLEVBQXVCbHRDLFVBQVVKLHFCQUF1QixXQUNwRCxJQUFJK0QsRUFBUW5FLEtBZ0JaLE9BQU8sSUFBSW90QyxFQVpHLENBQ1Yxb0MsU0FBVSxTQUFVb0MsR0FBYSxPQUFPM0MsRUFBTXpFLEtBQUtxSCxVQUFVQyxJQUFJRixJQUNqRTlCLFlBQWEsU0FBVThCLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVUksT0FBT0wsSUFDdkV3SixTQUFVLFNBQVV4SixHQUFhLE9BQU8zQyxFQUFNekUsS0FBS3FILFVBQVUyRSxTQUFTNUUsSUFDdEVzNkIsUUFBUyxTQUFVaDZCLEdBQVEsT0FBT2pELEVBQU16RSxLQUFLK0csYUFBYVcsSUFDMUQrNUIsUUFBUyxTQUFVLzVCLEVBQU1aLEdBQVMsT0FBT3JDLEVBQU16RSxLQUFLMkgsYUFBYUQsRUFBTVosSUFDdkU2NkIsV0FBWSxTQUFVajZCLEdBQVEsT0FBT2pELEVBQU16RSxLQUFLZ0gsZ0JBQWdCVSxJQUNoRXkzQixXQUFZLFNBQVVqckIsR0FDbEJ6UCxFQUFNekUsS0FBS3d3QixZQUFjdGMsTUFNOUI4NUIsRUFuQ2dDLENBb0N6QyxLQ3ZDRSxFQUFVLENBQ1YzTCxXQUFZLG9CQUNaQyxVQUFXLFVBRVgsRUFBYSxDQUNiNytCLEtBQU0sd0JDRk4sRUFBcUIsQ0FBQyxRQUFTLFdBQy9Cd3FDLEVBQTRDLFNBQVV6cEMsR0FFdEQsU0FBU3lwQyxFQUEyQjdyQyxHQUNoQyxJQUFJcUMsRUFBUUQsRUFBT0UsS0FBS3BFLE1BQU0sU0FBUyxRQUFTLEdBQUkydEMsRUFBMkJ0cEMsZ0JBQWlCdkMsS0FBYTlCLEtBSzdHLE9BSkFtRSxFQUFNZytCLGNBQWdCLEtBQ3RCaCtCLEVBQU1pK0IsbUJBQXFCLFNBQVU5Z0MsR0FDakM2QyxFQUFNaytCLGtCQUFrQi9nQyxJQUVyQjZDLEVBZ0dYLE9BdkdBLFFBQVV3cEMsRUFBNEJ6cEMsR0FTdENuQyxPQUFPQyxlQUFlMnJDLEVBQTRCLFVBQVcsQ0FDekQxckMsSUFBSyxXQUNELE9BQU8sR0FFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlMnJDLEVBQTRCLGFBQWMsQ0FDNUQxckMsSUFBSyxXQUNELE9BQU8sR0FFWEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlMnJDLEVBQTRCLGlCQUFrQixDQUloRTFyQyxJQUFLLFdBRUQsTUFBTyxDQUNIbS9CLFFBQVMsV0FBYyxPQUFPLE1BQzlCRCxRQUFTLGFBQ1RFLFdBQVksYUFDWnhDLFdBQVksYUFDWnAzQiwyQkFBNEIsYUFDNUJILDZCQUE4QixhQUM5Qmc3QixpQkFBa0IsZUFJMUJwZ0MsWUFBWSxFQUNaQyxjQUFjLElBRWxCd3JDLEVBQTJCbnRDLFVBQVVILEtBQU8sV0FDeEMsSUFBSXFILEVBQUtySSxFQUNUVyxLQUFLbWlDLGNBQWdCbmlDLEtBQUs4QixRQUFRcy9CLFFBQVEsWUFDMUMsSUFDSSxJQUFLLElBQUltQixHQUF1QixRQUFTLEdBQXFCQyxFQUF5QkQsRUFBcUIvNUIsUUFBU2c2QixFQUF1Qi81QixLQUFNKzVCLEVBQXlCRCxFQUFxQi81QixPQUFRLENBQ3BNLElBQUkzSCxFQUFVMmhDLEVBQXVCaDhCLE1BQ3JDeEcsS0FBSzhCLFFBQVEyRiwyQkFBMkI1RyxFQUFTYixLQUFLb2lDLHFCQUc5RCxNQUFPejVCLEdBQVNqQixFQUFNLENBQUVrQixNQUFPRCxHQUMvQixRQUNJLElBQ1E2NUIsSUFBMkJBLEVBQXVCLzVCLE9BQVNwSixFQUFLa2pDLEVBQXFCMTVCLFNBQVN4SixFQUFHK0UsS0FBS20rQixHQUU5RyxRQUFVLEdBQUk3NkIsRUFBSyxNQUFNQSxFQUFJa0IsU0FHckMra0MsRUFBMkJudEMsVUFBVUcsUUFBVSxXQUMzQyxJQUFJbUksRUFBS3pKLEVBQ1QsSUFDSSxJQUFLLElBQUlvakMsR0FBdUIsUUFBUyxHQUFxQkMsRUFBeUJELEVBQXFCajZCLFFBQVNrNkIsRUFBdUJqNkIsS0FBTWk2QixFQUF5QkQsRUFBcUJqNkIsT0FBUSxDQUNwTSxJQUFJM0gsRUFBVTZoQyxFQUF1Qmw4QixNQUNyQ3hHLEtBQUs4QixRQUFRd0YsNkJBQTZCekcsRUFBU2IsS0FBS29pQyxxQkFHaEUsTUFBT241QixHQUFTSCxFQUFNLENBQUVGLE1BQU9LLEdBQy9CLFFBQ0ksSUFDUXk1QixJQUEyQkEsRUFBdUJqNkIsT0FBU3BKLEVBQUtvakMsRUFBcUI1NUIsU0FBU3hKLEVBQUcrRSxLQUFLcStCLEdBRTlHLFFBQVUsR0FBSTM1QixFQUFLLE1BQU1BLEVBQUlGLFNBR3JDK2tDLEVBQTJCbnRDLFVBQVUrRSxZQUFjLFNBQVVDLEdBQ3BEeEYsS0FBS21pQyxnQkFHTjM4QixHQUNBeEYsS0FBSzhCLFFBQVFxL0IsUUFBUSxXQUFZLE1BQ2pDbmhDLEtBQUs4QixRQUFRdS9CLFdBQVcsVUFHeEJyaEMsS0FBSzhCLFFBQVFxL0IsUUFBUSxXQUFZbmhDLEtBQUttaUMsZUFDdENuaUMsS0FBSzhCLFFBQVFxL0IsUUFBUSxPQUFRLGdCQUdyQ3dNLEVBQTJCbnRDLFVBQVV5L0IsYUFBZSxTQUFVdG1CLEdBQzFEM1osS0FBSzhCLFFBQVFxL0IsUUFBUSxhQUFjeG5CLElBRXZDZzBCLEVBQTJCbnRDLFVBQVVxK0IsV0FBYSxTQUFVanJCLEdBQ3hENVQsS0FBSzhCLFFBQVErOEIsV0FBV2pyQixJQUU1Qis1QixFQUEyQm50QyxVQUFVNmhDLGtCQUFvQixTQUFVL2dDLEdBQy9ELElBQUlxaEMsRUFBeUIsVUFBWnJoQyxFQUFJOEssS0FBbUMsS0FBaEI5SyxFQUFJeVIsU0FDM0IsVUFBYnpSLEVBQUk4ZCxNQUFvQnVqQixLQUN4QnJoQyxFQUFJcWtCLGlCQUVKM2xCLEtBQUs4QixRQUFRd2dDLHFCQUdkcUwsRUF4R29DLENBeUc3QyxLQzFHRUMsRUFBa0MsU0FBVTFwQyxHQUU1QyxTQUFTMHBDLElBQ0wsT0FBa0IsT0FBWDFwQyxHQUFtQkEsRUFBT2hFLE1BQU1GLEtBQU1GLFlBQWNFLEtBZ0MvRCxPQWxDQSxRQUFVNHRDLEVBQWtCMXBDLEdBSTVCMHBDLEVBQWlCcnRDLFNBQVcsU0FBVWIsR0FDbEMsT0FBTyxJQUFJa3VDLEVBQWlCbHVDLElBRWhDcUMsT0FBT0MsZUFBZTRyQyxFQUFpQnB0QyxVQUFXLHlCQUEwQixDQUV4RXlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsWUFFaEJ1QyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJ5ckMsRUFBaUJwdEMsVUFBVUoscUJBQXVCLFdBQzlDLElBQUkrRCxFQUFRbkUsS0FnQlosT0FBTyxJQUFJMnRDLEVBWkcsQ0FDVnZNLFFBQVMsU0FBVWg2QixHQUFRLE9BQU9qRCxFQUFNekUsS0FBSytHLGFBQWFXLElBQzFEKzVCLFFBQVMsU0FBVS81QixFQUFNWixHQUFTLE9BQU9yQyxFQUFNekUsS0FBSzJILGFBQWFELEVBQU1aLElBQ3ZFNjZCLFdBQVksU0FBVWo2QixHQUFRLE9BQU9qRCxFQUFNekUsS0FBS2dILGdCQUFnQlUsSUFDaEV5M0IsV0FBWSxTQUFVanJCLEdBQ2xCelAsRUFBTXpFLEtBQUt3d0IsWUFBY3RjLEdBRTdCbk0sMkJBQTRCLFNBQVU1RyxFQUFTQyxHQUFXLE9BQU9xRCxFQUFNdkQsT0FBT0MsRUFBU0MsSUFDdkZ3Ryw2QkFBOEIsU0FBVXpHLEVBQVNDLEdBQVcsT0FBT3FELEVBQU1sRCxTQUFTSixFQUFTQyxJQUMzRndoQyxpQkFBa0IsV0FBYyxPQUFPbitCLEVBQU1oRCxLQUFLd3NDLEVBQTJCcnFDLFFBQVF5K0IsV0FBWSxJQUFrQixPQUtwSDZMLEVBbkMwQixDQW9DbkMsS0N2QkVDLEVBQThCLFNBQVUzcEMsR0FFeEMsU0FBUzJwQyxJQUNMLE9BQWtCLE9BQVgzcEMsR0FBbUJBLEVBQU9oRSxNQUFNRixLQUFNRixZQUFjRSxLQXNkL0QsT0F4ZEEsUUFBVTZ0QyxFQUFjM3BDLEdBSXhCMnBDLEVBQWF0dEMsU0FBVyxTQUFVYixHQUM5QixPQUFPLElBQUltdUMsRUFBYW51QyxJQUU1Qm11QyxFQUFhcnRDLFVBQVVQLFdBQWEsU0FBVTZ0QyxFQUFlL0ssRUFBbUJJLEVBQW1CNEssRUFBeUI3SyxFQUFhSixFQUFjRSxRQUM3SCxJQUFsQjhLLElBQTRCQSxFQUFnQixTQUFVMXVDLEVBQUlPLEdBQWMsT0FBTyxJQUFJLElBQVVQLEVBQUlPLFVBQzNFLElBQXRCb2pDLElBQWdDQSxFQUFvQixTQUFVM2pDLEdBQU0sT0FBTyxJQUFJLElBQWNBLFVBQ3ZFLElBQXRCK2pDLElBQWdDQSxFQUFvQixTQUFVL2pDLEdBQU0sT0FBTyxJQUFJc3VDLEVBQXVCdHVDLFVBQzFFLElBQTVCMnVDLElBQXNDQSxFQUEwQixTQUFVM3VDLEdBQU0sT0FBTyxJQUFJdXBDLEVBQTZCdnBDLFVBQ3hHLElBQWhCOGpDLElBQTBCQSxFQUFjLFNBQVU5akMsR0FBTSxPQUFPLElBQUl3dUMsRUFBaUJ4dUMsVUFDbkUsSUFBakIwakMsSUFBMkJBLEVBQWUsU0FBVTFqQyxHQUFNLE9BQU8sSUFBSSxJQUFpQkEsVUFDbkUsSUFBbkI0akMsSUFBNkJBLEVBQWlCLFNBQVU1akMsR0FBTSxPQUFPLElBQUksSUFBa0JBLEtBQy9GWSxLQUFLOFgsTUFDRDlYLEtBQUtOLEtBQUt3SixjQUFjLGtCQUM1QixJQUFJeTZCLEVBQWUzakMsS0FBS04sS0FBS3dKLGNBQWMsa0JBQzNDbEosS0FBSzJaLE1BQVFncUIsRUFBZWIsRUFBYWEsR0FBZ0IsS0FDekQsSUFBSUMsRUFBb0I1akMsS0FBS04sS0FBS3dKLGNBQWMsd0JBQ2hEbEosS0FBSzZqQyxXQUNERCxFQUFvQmIsRUFBa0JhLEdBQXFCLEtBQy9ELElBQUlFLEVBQWlCOWpDLEtBQUtOLEtBQUt3SixjQUFjLG9CQUM3Q2xKLEtBQUsrakMsUUFBVUQsRUFBaUJkLEVBQWVjLEdBQWtCLEtBRWpFLElBQUlrSyxFQUFvQlosRUFBaUM5cEMsUUFDckQycUMsRUFBcUJqdUMsS0FBS04sS0FBS3V1QyxtQkFDL0JDLEVBQWlCRCxHQUFzQkEsRUFBbUJsbkMsVUFBVTJFLFNBQVMsZUFDN0V5aUMsRUFBZUQsR0FBaUJELEdBQXNCQSxFQUFtQi9rQyxjQUFjOGtDLEVBQWtCMUYsZUFDN0d0b0MsS0FBSzA4QixXQUFheVIsRUFBZWhMLEVBQWtCZ0wsR0FBZ0IsS0FFbkUsSUFBSUMsRUFBMEI3RixFQUF1Q2psQyxRQUNqRStxQyxFQUFxQnJ1QyxLQUFLTixLQUFLd0osY0FBY2tsQyxFQUF3QjlGLGdCQUVwRStGLEdBQXNCSCxHQUFpQkQsSUFDeENJLEVBQXFCSixFQUFtQi9rQyxjQUFja2xDLEVBQXdCOUYsZ0JBRWxGdG9DLEtBQUs0cEMsaUJBQ0R5RSxFQUFxQk4sRUFBd0JNLEdBQXNCLEtBRXZFLElBQUlDLEVBQWdCdHVDLEtBQUtOLEtBQUt3SixjQUFjLHlCQUM1Q2xKLEtBQUt5OEIsWUFBYzZSLEVBQWdCcEwsRUFBWW9MLEdBQWlCLEtBRWhFLElBQUlDLEVBQWlCdnVDLEtBQUtOLEtBQUt3SixjQUFjLDBCQUM3Q2xKLEtBQUs2cEMsYUFBZTBFLEVBQWlCckwsRUFBWXFMLEdBQWtCLEtBRW5FdnVDLEtBQUt3dUMsT0FBU3h1QyxLQUFLTixLQUFLd0osY0FBYyxtQkFDdENsSixLQUFLeXVDLE9BQVN6dUMsS0FBS04sS0FBS3dKLGNBQWMsbUJBQ3RDbEosS0FBS3dVLE9BQVN4VSxLQUFLbUcsYUFBYTJuQyxJQUVwQ0QsRUFBYXJ0QyxVQUFVRyxRQUFVLFdBQ3pCWCxLQUFLd1UsUUFDTHhVLEtBQUt3VSxPQUFPN1QsVUFFWlgsS0FBSzZqQyxZQUNMN2pDLEtBQUs2akMsV0FBV2xqQyxVQUVoQlgsS0FBSzA4QixZQUNMMThCLEtBQUswOEIsV0FBVy83QixVQUVoQlgsS0FBSzRwQyxrQkFDTDVwQyxLQUFLNHBDLGlCQUFpQmpwQyxVQUV0QlgsS0FBS3k4QixhQUNMejhCLEtBQUt5OEIsWUFBWTk3QixVQUVqQlgsS0FBSzZwQyxjQUNMN3BDLEtBQUs2cEMsYUFBYWxwQyxVQUVsQlgsS0FBSzJaLE9BQ0wzWixLQUFLMlosTUFBTWhaLFVBRVhYLEtBQUsrakMsU0FDTC9qQyxLQUFLK2pDLFFBQVFwakMsVUFFakJ1RCxFQUFPMUQsVUFBVUcsUUFBUXlELEtBQUtwRSxPQU1sQzZ0QyxFQUFhcnRDLFVBQVVGLG1CQUFxQixXQUN4Q04sS0FBS3dGLFNBQVd4RixLQUFLOFgsTUFBTXRTLFVBRS9CekQsT0FBT0MsZUFBZTZyQyxFQUFhcnRDLFVBQVcsUUFBUyxDQUNuRHlCLElBQUssV0FDRCxPQUFPakMsS0FBS0wsV0FBVzQrQixZQUszQmo0QixJQUFLLFNBQVVFLEdBQ1h4RyxLQUFLTCxXQUFXMitCLFNBQVM5M0IsSUFFN0J0RSxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWU2ckMsRUFBYXJ0QyxVQUFXLFdBQVksQ0FDdER5QixJQUFLLFdBQ0QsT0FBT2pDLEtBQUtMLFdBQVcrK0IsY0FLM0JwNEIsSUFBSyxTQUFVZCxHQUNYeEYsS0FBS0wsV0FBVzRGLFlBQVlDLElBRWhDdEQsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlNnJDLEVBQWFydEMsVUFBVyxRQUFTLENBQ25EeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLTCxXQUFXNC9CLFdBSzNCajVCLElBQUssU0FBVW1qQyxHQUNYenBDLEtBQUtMLFdBQVcyL0IsU0FBU21LLElBRTdCdm5DLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZyQyxFQUFhcnRDLFVBQVcsV0FBWSxDQUN0RHlCLElBQUssV0FDRCxPQUFPakMsS0FBSzhYLE1BQU00ekIsVUFLdEJwbEMsSUFBSyxTQUFVb2xDLEdBQ1gxckMsS0FBSzhYLE1BQU00ekIsU0FBV0EsR0FFMUJ4cEMsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlNnJDLEVBQWFydEMsVUFBVyxVQUFXLENBQ3JEeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLOFgsTUFBTTQyQixTQUt0QnBvQyxJQUFLLFNBQVVvb0MsR0FDWDF1QyxLQUFLOFgsTUFBTTQyQixRQUFVQSxHQUV6QnhzQyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWU2ckMsRUFBYXJ0QyxVQUFXLFlBQWEsQ0FDdkR5QixJQUFLLFdBQ0QsT0FBT2pDLEtBQUs4WCxNQUFNNjJCLFdBS3RCcm9DLElBQUssU0FBVXFvQyxHQUNYM3VDLEtBQUs4WCxNQUFNNjJCLFVBQVlBLEdBRTNCenNDLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZyQyxFQUFhcnRDLFVBQVcsWUFBYSxDQUN2RHlCLElBQUssV0FDRCxPQUFPakMsS0FBSzhYLE1BQU00d0IsV0FLdEJwaUMsSUFBSyxTQUFVb2lDLEdBRVBBLEVBQVksRUFDWjFvQyxLQUFLOFgsTUFBTXBSLGdCQUFnQixhQUczQjFHLEtBQUs4WCxNQUFNNHdCLFVBQVlBLEdBRy9CeG1DLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZyQyxFQUFhcnRDLFVBQVcsTUFBTyxDQUNqRHlCLElBQUssV0FDRCxPQUFPakMsS0FBSzhYLE1BQU00VixLQUt0QnBuQixJQUFLLFNBQVVvbkIsR0FDWDF0QixLQUFLOFgsTUFBTTRWLElBQU1BLEdBRXJCeHJCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZyQyxFQUFhcnRDLFVBQVcsTUFBTyxDQUNqRHlCLElBQUssV0FDRCxPQUFPakMsS0FBSzhYLE1BQU01TSxLQUt0QjVFLElBQUssU0FBVTRFLEdBQ1hsTCxLQUFLOFgsTUFBTTVNLElBQU1BLEdBRXJCaEosWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlNnJDLEVBQWFydEMsVUFBVyxPQUFRLENBQ2xEeUIsSUFBSyxXQUNELE9BQU9qQyxLQUFLOFgsTUFBTTgyQixNQUt0QnRvQyxJQUFLLFNBQVVzb0MsR0FDWDV1QyxLQUFLOFgsTUFBTTgyQixLQUFPQSxHQUV0QjFzQyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWU2ckMsRUFBYXJ0QyxVQUFXLG9CQUFxQixDQUkvRDhGLElBQUssU0FBVXNOLEdBQ1g1VCxLQUFLTCxXQUFXaS9CLHFCQUFxQmhyQixJQUV6QzFSLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZyQyxFQUFhcnRDLFVBQVcsdUJBQXdCLENBSWxFOEYsSUFBSyxTQUFVcVQsR0FDWDNaLEtBQUtMLFdBQVdxZ0Msd0JBQXdCcm1CLElBRTVDelgsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlNnJDLEVBQWFydEMsVUFBVyxxQkFBc0IsQ0FJaEU4RixJQUFLLFNBQVVzTixHQUNYNVQsS0FBS0wsV0FBV3VnQyxzQkFBc0J0c0IsSUFFMUMxUixZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWU2ckMsRUFBYXJ0QyxVQUFXLHdCQUF5QixDQUluRThGLElBQUssU0FBVXFULEdBQ1gzWixLQUFLTCxXQUFXbXRDLHlCQUF5Qm56QixJQUU3Q3pYLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZyQyxFQUFhcnRDLFVBQVcsc0JBQXVCLENBSWpFOEYsSUFBSyxTQUFVc04sR0FDWDVULEtBQUtMLFdBQVdvdEMsdUJBQXVCbjVCLElBRTNDMVIsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlNnJDLEVBQWFydEMsVUFBVyxzQkFBdUIsQ0FLakU4RixJQUFLLFNBQVVvakMsR0FDWDFwQyxLQUFLTCxXQUFXaXRDLHVCQUF1QmxELElBRTNDeG5DLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZTZyQyxFQUFhcnRDLFVBQVcsYUFBYyxDQUl4RHlCLElBQUssV0FDRCxPQUFPakMsS0FBS3d1QyxPQUFTeHVDLEtBQUt3dUMsT0FBT3RlLFlBQWMsTUFLbkQ1cEIsSUFBSyxTQUFVdW9DLEdBQ1A3dUMsS0FBS3d1QyxTQUNMeHVDLEtBQUt3dUMsT0FBT3RlLFlBQWMyZSxJQUdsQzNzQyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJKLE9BQU9DLGVBQWU2ckMsRUFBYXJ0QyxVQUFXLGFBQWMsQ0FJeER5QixJQUFLLFdBQ0QsT0FBT2pDLEtBQUt5dUMsT0FBU3p1QyxLQUFLeXVDLE9BQU92ZSxZQUFjLE1BS25ENXBCLElBQUssU0FBVXdvQyxHQUNQOXVDLEtBQUt5dUMsU0FDTHp1QyxLQUFLeXVDLE9BQU92ZSxZQUFjNGUsSUFHbEM1c0MsWUFBWSxFQUNaQyxjQUFjLElBS2xCMHJDLEVBQWFydEMsVUFBVWlLLE1BQVEsV0FDM0J6SyxLQUFLOFgsTUFBTXJOLFNBS2ZvakMsRUFBYXJ0QyxVQUFVdVAsT0FBUyxXQUM1QixJQUFJOHZCLEVBQVk3L0IsS0FBS0wsV0FBV21YLFlBQ2hDOVcsS0FBS0wsV0FBV3U5QixhQUFhMkMsSUFFakNnTyxFQUFhcnRDLFVBQVVKLHFCQUF1QixXQUkxQyxJQUFJMEIsR0FBVSxTQUFTLFNBQVMsU0FBUyxTQUFTLFFBQVMsR0FBSTlCLEtBQUsrdUMseUJBQTBCL3VDLEtBQUtndkMsMEJBQTJCaHZDLEtBQUtza0MsMEJBQTJCdGtDLEtBQUtpdkMsK0JBQWdDanZDLEtBQUtxa0MsNEJBRXhNLE9BQU8sSUFBSWtGLEVBQXVCem5DLEVBQVM5QixLQUFLdWtDLHFCQUVwRHNKLEVBQWFydEMsVUFBVXV1QyxzQkFBd0IsV0FDM0MsSUFBSTVxQyxFQUFRbkUsS0FFWixNQUFPLENBQ0gwRSxTQUFVLFNBQVVvQyxHQUFhLE9BQU8zQyxFQUFNekUsS0FBS3FILFVBQVVDLElBQUlGLElBQ2pFOUIsWUFBYSxTQUFVOEIsR0FBYSxPQUFPM0MsRUFBTXpFLEtBQUtxSCxVQUFVSSxPQUFPTCxJQUN2RXdKLFNBQVUsU0FBVXhKLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVTJFLFNBQVM1RSxJQUN0RWlrQyxvQ0FBcUMsU0FBVWxxQyxFQUFTQyxHQUNwRHFELEVBQU12RCxPQUFPQyxFQUFTQyxJQUUxQmtxQyxzQ0FBdUMsU0FBVW5xQyxFQUFTQyxHQUN0RHFELEVBQU1sRCxTQUFTSixFQUFTQyxJQUU1QnFxQyx5Q0FBMEMsU0FBVXJxQyxHQUNoRCxJQUtJNGxDLEVBQVcsSUFBSTBFLGtCQUFpQixTQUFVOEQsR0FBaUIsT0FBT3B1QyxFQUw5QyxTQUFVb3VDLEdBQzlCLE9BQU9BLEVBQ0ZoTCxLQUFJLFNBQVVpTCxHQUFZLE9BQU9BLEVBQVNoRCxpQkFDMUMvZ0MsUUFBTyxTQUFVK2dDLEdBQWlCLE9BQU9BLEtBRTRCaUQsQ0FBa0JGLE9BR2hHLE9BREF4SSxFQUFTckIsUUFBUWxoQyxFQUFNMlQsTUFEVixDQUFFdTNCLFlBQVksSUFFcEIzSSxHQUVYMkUsMkNBQTRDLFNBQVUzRSxHQUNsREEsRUFBUzRJLGdCQUtyQnpCLEVBQWFydEMsVUFBVXd1Qyx1QkFBeUIsV0FDNUMsSUFBSTdxQyxFQUFRbkUsS0FFWixNQUFPLENBQ0gwcUMsZUFBZ0IsV0FBYyxPQUFPdm1DLEVBQU0yVCxPQUMzQyt5QixhQUFjLFNBQVV6akMsRUFBTVosR0FDMUJyQyxFQUFNMlQsTUFBTXpRLGFBQWFELEVBQU1aLElBRW5Dc2tDLGdCQUFpQixTQUFVMWpDLEdBQ3ZCakQsRUFBTTJULE1BQU1wUixnQkFBZ0JVLElBRWhDOHFCLFVBQVcsV0FBYyxPQUFPanpCLFNBQVMwSyxnQkFBa0J4RixFQUFNMlQsT0FDakVtekIsZ0NBQWlDLFNBQVVwcUMsRUFBU0MsR0FDaERxRCxFQUFNMlQsTUFBTTlXLGlCQUFpQkgsRUFBU0MsR0FBUyxXQUVuRG9xQyxrQ0FBbUMsU0FBVXJxQyxFQUFTQyxHQUNsRHFELEVBQU0yVCxNQUFNNVcsb0JBQW9CTCxFQUFTQyxHQUFTLGFBSzlEK3NDLEVBQWFydEMsVUFBVThqQyx1QkFBeUIsV0FDNUMsSUFBSW5nQyxFQUFRbkUsS0FDWixNQUFPLENBQ0g4OEIsV0FBWSxTQUFVaG1CLEdBQ2xCM1MsRUFBTXdWLE9BQVN4VixFQUFNd1YsTUFBTTlDLE1BQU1DLElBRXJDaW1CLGNBQWUsV0FBYyxPQUFPNTRCLEVBQU13VixNQUFReFYsRUFBTXdWLE1BQU0xQyxXQUFhLEdBQzNFNGxCLFNBQVUsV0FBYyxPQUFPNzlCLFFBQVFtRixFQUFNd1YsUUFDN0M4eEIsV0FBWSxTQUFVNzBCLEdBQ2xCelMsRUFBTXdWLE9BQVN4VixFQUFNd1YsTUFBTWhELE1BQU1DLElBRXJDb21CLGlCQUFrQixTQUFVaG1CLEdBQ3hCN1MsRUFBTXdWLE9BQVN4VixFQUFNd1YsTUFBTTVDLFlBQVlDLE1BSW5ENjJCLEVBQWFydEMsVUFBVXl1Qyw0QkFBOEIsV0FDakQsSUFBSTlxQyxFQUFRbkUsS0FDWixNQUFPLENBQ0hzckMsbUJBQW9CLFdBQ1pubkMsRUFBTTAvQixZQUNOMS9CLEVBQU0wL0IsV0FBVzlyQixZQUd6Qnd6QixxQkFBc0IsV0FDZHBuQyxFQUFNMC9CLFlBQ04xL0IsRUFBTTAvQixXQUFXN3JCLGNBR3pCd3pCLDZCQUE4QixTQUFVMXBCLEdBQ2hDM2QsRUFBTTAvQixZQUNOMS9CLEVBQU0wL0IsV0FBV3ByQixnQkFBZ0JxSixNQUtqRCtyQixFQUFhcnRDLFVBQVU2akMseUJBQTJCLFdBQzlDLElBQUlsZ0MsRUFBUW5FLEtBQ1osTUFBTyxDQUNIbTlCLGFBQWMsV0FDVmg1QixFQUFNNC9CLFNBQVc1L0IsRUFBTTQvQixRQUFRdnFCLGNBRW5DeWpCLFdBQVksV0FBYyxPQUFPaitCLFFBQVFtRixFQUFNNC9CLFVBQy9DN0csYUFBYyxTQUFVNkMsR0FDcEI1N0IsRUFBTTQvQixTQUFXNS9CLEVBQU00L0IsUUFBUXpxQixNQUFNeW1CLE1BT2pEOE4sRUFBYXJ0QyxVQUFVK2pDLGlCQUFtQixXQUN0QyxNQUFPLENBQ0hxRixpQkFBa0I1cEMsS0FBSzRwQyxpQkFDbkI1cEMsS0FBSzRwQyxpQkFBaUIyRiw0QkFDdEJwdkMsRUFDSnU4QixXQUFZMThCLEtBQUswOEIsV0FBYTE4QixLQUFLMDhCLFdBQVc2Uyw0QkFDMUNwdkMsRUFDSnM4QixZQUFhejhCLEtBQUt5OEIsWUFBY3o4QixLQUFLeThCLFlBQVk4Uyw0QkFDN0NwdkMsRUFDSjBwQyxhQUFjN3BDLEtBQUs2cEMsYUFDZjdwQyxLQUFLNnBDLGFBQWEwRiw0QkFDbEJwdkMsSUFHWjB0QyxFQUFhcnRDLFVBQVUyRixhQUFlLFNBQVUybkMsR0FDNUMsSUFBSTNwQyxFQUFRbkUsS0FDUnd2QyxFQUFheHZDLEtBQUtOLEtBQUtxSCxVQUFVMkUsU0FBUyxZQUMxQytqQyxFQUFhenZDLEtBQUtOLEtBQUtxSCxVQUFVMkUsU0FBUyxZQUM5QyxHQUFJOGpDLEdBQWNDLEVBQ2QsT0FBTyxLQUtYLElBQUkzdEMsR0FBVSxTQUFTLFFBQVMsR0FBSSxrQkFBd0I5QixPQUFRLENBQUV1SCxnQkFBaUIsV0FBYyxPQUFPbW9DLEVBQUEsR0FBaUJ2ckMsRUFBTTJULE1BQU8sWUFBZXJRLDJCQUE0QixTQUFVNUcsRUFBU0MsR0FDaE1xRCxFQUFNMlQsTUFBTTlXLGlCQUFpQkgsRUFBU0MsR0FBUyxXQUNoRHdHLDZCQUE4QixTQUFVekcsRUFBU0MsR0FDaERxRCxFQUFNMlQsTUFBTTVXLG9CQUFvQkwsRUFBU0MsR0FBUyxhQUcxRCxPQUFPZ3RDLEVBQWM5dEMsS0FBS04sS0FBTSxJQUFJLElBQW9Cb0MsS0FFckQrckMsRUF6ZHNCLENBMGQvQixvRkMxZUV6ckMsRUFBYSxDQUNidXRDLFlBQWEseUJBQ2JDLHFCQUFzQixrQ0FDdEJDLFlBQWEseUJBQ2JDLHNCQUF1QixtQ0FDdkJDLDRCQUE2QiwwQ0FFN0Joc0MsRUFBVSxDQUNWaXNDLGlDQUFrQyxJQUNsQ0MsdUJBQXdCLEtBRXhCM3NDLEVBQVUsQ0FDVjRzQyxxQkFBc0IsZ0NBQ3RCQyxpQkFBa0IsbUJBQ2xCQyx5QkFBMEIsb0NBQzFCOUgsY0FBZSxtQkFDZitILGVBQWdCLDJCQ2JoQkMsRUFBNEMsU0FBVXBzQyxHQUd0RCxTQUFTb3NDLEVBQTJCeHVDLEdBQ2hDLE9BQU9vQyxFQUFPRSxLQUFLcEUsTUFBTSxTQUFTLFFBQVMsR0FBSXN3QyxFQUEyQmpzQyxnQkFBaUJ2QyxLQUFhOUIsS0FtRDVHLE9BdERBLFFBQVVzd0MsRUFBNEJwc0MsR0FLdENuQyxPQUFPQyxlQUFlc3VDLEVBQTRCLFVBQVcsQ0FDekRydUMsSUFBSyxXQUNELE9BQU9xQixHQUVYcEIsWUFBWSxFQUNaQyxjQUFjLElBRWxCSixPQUFPQyxlQUFlc3VDLEVBQTRCLGFBQWMsQ0FDNURydUMsSUFBSyxXQUNELE9BQU9HLEdBRVhGLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXN1QyxFQUE0QixVQUFXLENBQ3pEcnVDLElBQUssV0FDRCxPQUFPOEIsR0FFWDdCLFlBQVksRUFDWkMsY0FBYyxJQUVsQkosT0FBT0MsZUFBZXN1QyxFQUE0QixpQkFBa0IsQ0FJaEVydUMsSUFBSyxXQUVELE1BQU8sQ0FDSHlDLFNBQVUsYUFDVk0sWUFBYSxhQUNic0wsU0FBVSxXQUFjLE9BQU8sR0FDL0JnSSxTQUFVLGFBQ1ZpNEIsbUJBQW9CLFdBQWMsT0FBTyxHQUN6Q0MsNEJBQTZCLGFBQzdCQyxtQkFBb0IsV0FBYyxPQUFPLEdBQ3pDQyxvQkFBcUIsV0FBYyxPQUFPLEtBSWxEeHVDLFlBQVksRUFDWkMsY0FBYyxJQUdsQm11QyxFQUEyQjl2QyxVQUFVbXdDLG1CQUFxQixhQUUxREwsRUFBMkI5dkMsVUFBVW93QyxtQkFBcUIsYUFDMUROLEVBQTJCOXZDLFVBQVVxd0Msc0JBQXdCLFdBQ3pEN3dDLEtBQUs4QixRQUFRMHVDLCtCQUVWRixFQXZEb0MsU0F3RDdDLEdDdkRFUSxFQUF3QyxTQUFVNXNDLEdBR2xELFNBQVM0c0MsRUFBdUJodkMsR0FDNUIsSUFBSXFDLEVBQVFELEVBQU9FLEtBQUtwRSxLQUFNOEIsSUFBWTlCLEtBNEIxQyxPQXhCQW1FLEVBQU00c0MsV0FBWSxFQUlsQjVzQyxFQUFNNnNDLGlCQUFrQixFQUl4QjdzQyxFQUFNOHNDLHVCQUF5QixFQUkvQjlzQyxFQUFNK3NDLHlCQUEwQixFQUloQy9zQyxFQUFNZ3RDLGlCQXpCTSxFQThCWmh0QyxFQUFNaXRDLGlCQTlCTSxFQStCWmp0QyxFQUFNa3RDLG1CQUFxQmx0QyxFQUFNckMsUUFBUTJ1QyxxQkFDekN0c0MsRUFBTW10QyxnQkFBa0JudEMsRUFBTXJDLFFBQVF5dUMscUJBQy9CcHNDLEVBMEdYLE9BeklBLFFBQVUyc0MsRUFBd0I1c0MsR0FpQ2xDNHNDLEVBQXVCdHdDLFVBQVVHLFFBQVUsV0FDdkN1RCxFQUFPMUQsVUFBVUcsUUFBUXlELEtBQUtwRSxNQUM5QkEsS0FBSzhCLFFBQVF3VyxTQUFTLE1BQU8sS0FNakN3NEIsRUFBdUJ0d0MsVUFBVW13QyxtQkFBcUIsV0FDbEQsSUFBSVksRUFBd0J0bUMsS0FBS0MsSUFBSWxMLEtBQUs4QixRQUFRMnVDLHFCQUFzQixHQUNwRWUsRUFBT0QsRUFBd0J2eEMsS0FBS3F4QyxtQkFDeENyeEMsS0FBS3F4QyxtQkFBcUJFLEVBSXJCdnhDLEtBQUtreEMsMEJBQ05seEMsS0FBS2l4Qyx3QkFBMEJPLEVBQzNCeHhDLEtBQUtpeEMsdUJBQXlCLEVBQzlCanhDLEtBQUtpeEMsdUJBQXlCLEVBRXpCaG1DLEtBQUt3bUMsSUFBSXp4QyxLQUFLaXhDLHdCQUEwQmp4QyxLQUFLc3hDLGtCQUNsRHR4QyxLQUFLaXhDLHdCQUEwQmp4QyxLQUFLc3hDLGlCQUV4Q3R4QyxLQUFLMHhDLGtCQU9iWixFQUF1QnR3QyxVQUFVb3dDLG1CQUFxQixXQUNsRCxJQUFJenNDLEVBQVFuRSxLQUVQQSxLQUFLbXhDLG1CQUNObnhDLEtBQUtteEMsaUJBQW1CenJDLFlBQVcsV0FDL0J2QixFQUFNZ3RDLGlCQXRFRixFQXVFSmh0QyxFQUFNd3RDLDJCQUNQNXRDLEVBQVFpc0MsbUNBRWZod0MsS0FBS2t4Qyx5QkFBMEIsRUFDM0JseEMsS0FBS294QyxrQkFDTDlyQyxhQUFhdEYsS0FBS294QyxrQkFFdEJweEMsS0FBS294QyxpQkFBbUIxckMsWUFBVyxXQUMvQnZCLEVBQU13c0MscUJBQ054c0MsRUFBTStzQyx5QkFBMEIsRUFDaEMvc0MsRUFBTWl0QyxpQkFqRkUsSUFrRlRydEMsRUFBUWlzQyxtQ0FLZmMsRUFBdUJ0d0MsVUFBVW94QyxlQUFpQixXQUM5QyxJQUFJQyxHQUF3Qjd4QyxLQUFLc3hDLGdCQUM3QlEsRUFBd0I5eEMsS0FBS2l4Qyx1QkFBeUIsRUFDdERjLEVBQXVCL3hDLEtBQUtpeEMsdUJBQXlCWSxFQUNyREcsRUFBbUJGLEdBQXlCQyxFQUVoRCxHQUFJQyxFQUNBaHlDLEtBQUsrd0MsV0FBWSxNQUVoQixDQUVELElBQUsvd0MsS0FBSyt3QyxVQUVOLE9BREEvd0MsS0FBSyt3QyxXQUFZLEdBQ1YsRUFFTixHQUFJL3dDLEtBQUtneEMsa0JBQW9CZSxFQUU5QixPQURBL3hDLEtBQUtneEMsZ0JBQWtCZSxHQUNoQixFQUdmLE9BQU9DLEdBS1hsQixFQUF1QnR3QyxVQUFVa3hDLGNBQWdCLFdBQzdDLEdBQUkxeEMsS0FBSzR4QyxpQkFBa0IsQ0FHdkIsSUFBSUssRUFBU2p5QyxLQUFLaXhDLHVCQUNkaG1DLEtBQUt3bUMsSUFBSVEsSUFBV2p5QyxLQUFLc3hDLGtCQUN6QlcsR0FBVWx1QyxFQUFRa3NDLHdCQUV0Qmp3QyxLQUFLOEIsUUFBUXdXLFNBQVMsTUFBTzI1QixFQUFTLFFBTzlDbkIsRUFBdUJ0d0MsVUFBVW14Qyx1QkFBeUIsV0FDdEQsSUFBSU8sRUFBZ0JseUMsS0FBSzhCLFFBQVF5dUMscUJBQzdCdndDLEtBQUtzeEMsa0JBQW9CWSxJQUN6Qmx5QyxLQUFLK3dDLFdBQVksRUFJakIvd0MsS0FBS2l4Qyx3QkFBMEJqeEMsS0FBS3N4QyxnQkFBa0JZLEVBQ3REbHlDLEtBQUtzeEMsZ0JBQWtCWSxHQUUzQmx5QyxLQUFLMndDLHNCQUVGRyxFQTFJZ0MsQ0EySXpDUixHQzVJRTZCLEVBQTZDLFNBQVVqdUMsR0FFdkQsU0FBU2l1QyxJQUNMLElBQUlodUMsRUFBbUIsT0FBWEQsR0FBbUJBLEVBQU9oRSxNQUFNRixLQUFNRixZQUFjRSxLQUtoRSxPQURBbUUsRUFBTWl1QyxhQUFjLEVBQ2JqdUMsRUFxQlgsT0E1QkEsUUFBVWd1QyxFQUE2Qmp1QyxHQWF2Q2l1QyxFQUE0QjN4QyxVQUFVbXdDLG1CQUFxQixXQUNuQzN3QyxLQUFLOEIsUUFBUTJ1QyxzQkFDWixFQUNiendDLEtBQUtveUMsY0FDTHB5QyxLQUFLOEIsUUFBUWtELFlBQVk1QyxFQUFXd3RDLHNCQUNwQzV2QyxLQUFLb3lDLGFBQWMsR0FJbEJweUMsS0FBS295QyxjQUNOcHlDLEtBQUs4QixRQUFRNEMsU0FBU3RDLEVBQVd3dEMsc0JBQ2pDNXZDLEtBQUtveUMsYUFBYyxJQUl4QkQsRUE3QnFDLENBOEI5Q3JCLEdDOUJFdUIsRUFBNkMsU0FBVW51QyxHQUd2RCxTQUFTbXVDLEVBQTRCdndDLEdBQ2pDLElBQUlxQyxFQUFRRCxFQUFPRSxLQUFLcEUsS0FBTThCLElBQVk5QixLQUcxQyxPQUZBbUUsRUFBTW11QyxXQUFZLEVBQ2xCbnVDLEVBQU1vdUMsbUJBQW9CLEVBQ25CcHVDLEVBbUVYLE9BekVBLFFBQVVrdUMsRUFBNkJudUMsR0FRdkNuQyxPQUFPQyxlQUFlcXdDLEVBQTRCN3hDLFVBQVcsY0FBZSxDQUV4RXlCLElBQUssV0FDRCxPQUFPakMsS0FBS3N5QyxXQUVoQnB3QyxZQUFZLEVBQ1pDLGNBQWMsSUFFbEJrd0MsRUFBNEI3eEMsVUFBVUgsS0FBTyxXQUN6QzZELEVBQU8xRCxVQUFVSCxLQUFLK0QsS0FBS3BFLE1BQ3ZCQSxLQUFLOEIsUUFBUTR1QyxzQkFBd0IsR0FDckMxd0MsS0FBSzhCLFFBQVE0QyxTQUFTdEMsRUFBVzJ0Qyw2QkFHckMvdkMsS0FBS3d5QyxtQkFBbUJ4eUMsS0FBSzhCLFFBQVF3TyxTQUFTbE8sRUFBVzB0Qyx5QkFPN0R1QyxFQUE0Qjd4QyxVQUFVZ3lDLG1CQUFxQixTQUFVaHNDLEdBQ2pFeEcsS0FBS3V5QyxvQkFBc0IvckMsRUFDdkJ4RyxLQUFLdXlDLGtCQUNMdnlDLEtBQUt5eUMsV0FJTHp5QyxLQUFLMHlDLG9CQUdiTCxFQUE0Qjd4QyxVQUFVbXlDLG1CQUFxQixXQUN2RCxPQUFPM3lDLEtBQUt1eUMsbUJBTWhCRixFQUE0Qjd4QyxVQUFVbXdDLG1CQUFxQixXQUN2RDN3QyxLQUFLMHlDLG9CQUVUTCxFQUE0Qjd4QyxVQUFVa3lDLGlCQUFtQixXQUNqRDF5QyxLQUFLdXlDLG9CQUdXdnlDLEtBQUs4QixRQUFRMnVDLHNCQUNaLEVBQ2J6d0MsS0FBS3N5QyxXQUNMdHlDLEtBQUs0eUMsYUFJSjV5QyxLQUFLc3lDLFdBQ050eUMsS0FBS3l5QyxhQUlqQkosRUFBNEI3eEMsVUFBVW95QyxXQUFhLFdBQy9DNXlDLEtBQUs4QixRQUFRa0QsWUFBWTVDLEVBQVcwdEMsdUJBQ3BDOXZDLEtBQUtzeUMsV0FBWSxHQUVyQkQsRUFBNEI3eEMsVUFBVWl5QyxTQUFXLFdBQzdDenlDLEtBQUs4QixRQUFRNEMsU0FBU3RDLEVBQVcwdEMsdUJBQ2pDOXZDLEtBQUtzeUMsV0FBWSxHQUVkRCxFQTFFcUMsQ0EyRTlDL0IsR0N2RUV1QyxFQUE4QixTQUFVM3VDLEdBRXhDLFNBQVMydUMsSUFDTCxPQUFrQixPQUFYM3VDLEdBQW1CQSxFQUFPaEUsTUFBTUYsS0FBTUYsWUFBY0UsS0E4Ry9ELE9BaEhBLFFBQVU2eUMsRUFBYzN1QyxHQUl4QjJ1QyxFQUFhdHlDLFNBQVcsU0FBVWIsR0FDOUIsT0FBTyxJQUFJbXpDLEVBQWFuekMsSUFFNUJtekMsRUFBYXJ5QyxVQUFVUCxXQUFhLFNBQVU2dEMsUUFDcEIsSUFBbEJBLElBQTRCQSxFQUFnQixTQUFVMXVDLEdBQU0sT0FBTyxhQUFtQkEsS0FDMUZZLEtBQUs4eUMsUUFBVTl5QyxLQUFLTixLQUFLd0osY0FBYzVGLEVBQVE4c0MsMEJBRS9DLElBQUkyQyxFQUFRLEdBQUc3b0MsTUFBTTlGLEtBQUtwRSxLQUFLTixLQUFLeUssaUJBQWlCN0csRUFBUTRzQyx1QkFDekRsd0MsS0FBSzh5QyxTQUNMQyxFQUFNOWxDLEtBQUtqTixLQUFLOHlDLFNBRXBCOXlDLEtBQUtnekMsWUFBY0QsRUFBTTdPLEtBQUksU0FBVStPLEdBQ25DLElBQUl6K0IsRUFBU3M1QixFQUFjbUYsR0FFM0IsT0FEQXorQixFQUFPd0YsV0FBWSxFQUNaeEYsS0FFWHhVLEtBQUtrekMsYUFBZXZzQyxRQUV4QmtzQyxFQUFhcnlDLFVBQVVGLG1CQUFxQixXQUN4Q04sS0FBSzZ3QyxzQkFDRDd3QyxLQUFLTCxXQUFXa3hDLHNCQUFzQng4QixLQUFLclUsS0FBS0wsWUFDcERLLEtBQUs0d0MsbUJBQ0Q1d0MsS0FBS0wsV0FBV2l4QyxtQkFBbUJ2OEIsS0FBS3JVLEtBQUtMLFlBQ2pESyxLQUFLMndDLG1CQUNEM3dDLEtBQUtMLFdBQVdneEMsbUJBQW1CdDhCLEtBQUtyVSxLQUFLTCxZQUNqREssS0FBS2t6QyxhQUFhbHlDLGlCQUFpQixTQUFVaEIsS0FBSzJ3QyxvQkFDOUMzd0MsS0FBSzh5QyxTQUNMOXlDLEtBQUs4eUMsUUFBUTl4QyxpQkFBaUIsUUFBU2hCLEtBQUs2d0MsdUJBRWhELElBQUlwWixFQUFVejNCLEtBQUtOLEtBQUtxSCxVQUFVMkUsU0FBU3RKLEVBQVd1dEMsYUFDeEMzdkMsS0FBS04sS0FBS3FILFVBQVUyRSxTQUFTdEosRUFBV3l0QyxjQUNyQ3BZLEdBQ2I5d0IsT0FBTzNGLGlCQUFpQixTQUFVaEIsS0FBSzR3QyxxQkFHL0NpQyxFQUFhcnlDLFVBQVVHLFFBQVUsV0FDN0IsSUFBSStHLEVBQUtySSxFQUNULElBQ0ksSUFBSyxJQUFJMlUsR0FBSyxRQUFTaFUsS0FBS2d6QyxhQUFjLytCLEVBQUtELEVBQUd4TCxRQUFTeUwsRUFBR3hMLEtBQU13TCxFQUFLRCxFQUFHeEwsT0FDdkR5TCxFQUFHek4sTUFDVDdGLFVBR25CLE1BQU9nSSxHQUFTakIsRUFBTSxDQUFFa0IsTUFBT0QsR0FDL0IsUUFDSSxJQUNRc0wsSUFBT0EsRUFBR3hMLE9BQVNwSixFQUFLMlUsRUFBR25MLFNBQVN4SixFQUFHK0UsS0FBSzRQLEdBRXBELFFBQVUsR0FBSXRNLEVBQUssTUFBTUEsRUFBSWtCLE9BRWpDNUksS0FBS2t6QyxhQUFhaHlDLG9CQUFvQixTQUFVbEIsS0FBSzJ3QyxvQkFDakQzd0MsS0FBSzh5QyxTQUNMOXlDLEtBQUs4eUMsUUFBUTV4QyxvQkFBb0IsUUFBU2xCLEtBQUs2d0MsdUJBRW5ELElBQUlwWixFQUFVejNCLEtBQUtOLEtBQUtxSCxVQUFVMkUsU0FBU3RKLEVBQVd1dEMsYUFDeEMzdkMsS0FBS04sS0FBS3FILFVBQVUyRSxTQUFTdEosRUFBV3l0QyxjQUNyQ3BZLEdBQ2I5d0IsT0FBT3pGLG9CQUFvQixTQUFVbEIsS0FBSzR3QyxvQkFFOUMxc0MsRUFBTzFELFVBQVVHLFFBQVF5RCxLQUFLcEUsT0FFbEM2eUMsRUFBYXJ5QyxVQUFVMnlDLGdCQUFrQixTQUFVdmdDLEdBRS9DNVMsS0FBS2t6QyxhQUFhaHlDLG9CQUFvQixTQUFVbEIsS0FBSzJ3QyxvQkFDckQzd0MsS0FBS2t6QyxhQUFldGdDLEVBRXBCNVMsS0FBSzJ3QyxtQkFDRDN3QyxLQUFLTCxXQUFXZ3hDLG1CQUFtQnQ4QixLQUFLclUsS0FBS0wsWUFDakRLLEtBQUtrekMsYUFBYWx5QyxpQkFBaUIsU0FBVWhCLEtBQUsyd0MscUJBRXREa0MsRUFBYXJ5QyxVQUFVSixxQkFBdUIsV0FDMUMsSUFBSStELEVBQVFuRSxLQUlSOEIsRUFBVSxDQUNWd08sU0FBVSxTQUFVeEosR0FBYSxPQUFPM0MsRUFBTXpFLEtBQUtxSCxVQUFVMkUsU0FBUzVFLElBQ3RFcEMsU0FBVSxTQUFVb0MsR0FBYSxPQUFPM0MsRUFBTXpFLEtBQUtxSCxVQUFVQyxJQUFJRixJQUNqRTlCLFlBQWEsU0FBVThCLEdBQWEsT0FBTzNDLEVBQU16RSxLQUFLcUgsVUFBVUksT0FBT0wsSUFDdkV3UixTQUFVLFNBQVVtdUIsRUFBVWpnQyxHQUMxQixPQUFPckMsRUFBTXpFLEtBQUtKLE1BQU1rWCxZQUFZaXdCLEVBQVVqZ0MsSUFFbEQrcEMsbUJBQW9CLFdBQWMsT0FBT3BzQyxFQUFNekUsS0FBSzZWLGNBQ3BEaTdCLDRCQUE2QixXQUN6QixPQUFPcnNDLEVBQU1oRCxLQUFLbUMsRUFBUTZzQyxpQkFBa0IsS0FFaERNLG1CQUFvQixXQUNoQixJQUFJMkMsRUFBTWp2QyxFQUFNK3VDLGFBQ1o5ekMsRUFBSytFLEVBQU0rdUMsYUFDZixZQUEyQi95QyxJQUFwQml6QyxFQUFJeDRCLFlBQTRCdzRCLEVBQUl4NEIsWUFBY3hiLEVBQUdpVyxXQUVoRXE3QixvQkFBcUIsV0FDakIsT0FBT3ZzQyxFQUFNekUsS0FBS3lLLGlCQUFpQjdHLEVBQVE0c0Msc0JBQXNCbndDLFNBY3pFLE9BVElDLEtBQUtOLEtBQUtxSCxVQUFVMkUsU0FBU3RKLEVBQVd5dEMsYUFDM0IsSUFBSXdDLEVBQTRCdndDLEdBRXhDOUIsS0FBS04sS0FBS3FILFVBQVUyRSxTQUFTdEosRUFBV3V0QyxhQUNoQyxJQUFJd0MsRUFBNEJyd0MsR0FHaEMsSUFBSWd2QyxFQUF1Qmh2QyxJQUl6Qyt3QyxFQWpIc0IsQ0FrSC9CLGVDNUhGLFNBQVNRLEVBQVF0NUIsR0FDZkEsRUFBT0EsR0FBUSxHQUNmL1osS0FBS3N6QyxHQUFLdjVCLEVBQUsyVCxLQUFPLElBQ3RCMXRCLEtBQUtrTCxJQUFNNk8sRUFBSzdPLEtBQU8sSUFDdkJsTCxLQUFLdXpDLE9BQVN4NUIsRUFBS3c1QixRQUFVLEVBQzdCdnpDLEtBQUt3ekMsT0FBU3o1QixFQUFLeTVCLE9BQVMsR0FBS3o1QixFQUFLeTVCLFFBQVUsRUFBSXo1QixFQUFLeTVCLE9BQVMsRUFDbEV4ekMsS0FBS3l6QyxTQUFXLEVBcEJsQkMsRUFBT0MsUUFBVU4sRUE4QmpCQSxFQUFRN3lDLFVBQVVvekMsU0FBVyxXQUMzQixJQUFJTixFQUFLdHpDLEtBQUtzekMsR0FBS3JvQyxLQUFLOFYsSUFBSS9nQixLQUFLdXpDLE9BQVF2ekMsS0FBS3l6QyxZQUM5QyxHQUFJenpDLEtBQUt3ekMsT0FBUSxDQUNmLElBQUlLLEVBQVE1b0MsS0FBSzZvQyxTQUNiQyxFQUFZOW9DLEtBQUsrVixNQUFNNnlCLEVBQU83ekMsS0FBS3d6QyxPQUFTRixHQUNoREEsRUFBb0MsSUFBTixFQUF4QnJvQyxLQUFLK1YsTUFBYSxHQUFQNnlCLElBQXdCUCxFQUFLUyxFQUFZVCxFQUFLUyxFQUVqRSxPQUFnQyxFQUF6QjlvQyxLQUFLeWlCLElBQUk0bEIsRUFBSXR6QyxLQUFLa0wsTUFTM0Jtb0MsRUFBUTd5QyxVQUFVd3pDLE1BQVEsV0FDeEJoMEMsS0FBS3l6QyxTQUFXLEdBU2xCSixFQUFRN3lDLFVBQVV5ekMsT0FBUyxTQUFTdm1CLEdBQ2xDMXRCLEtBQUtzekMsR0FBSzVsQixHQVNaMmxCLEVBQVE3eUMsVUFBVTB6QyxPQUFTLFNBQVNocEMsR0FDbENsTCxLQUFLa0wsSUFBTUEsR0FTYm1vQyxFQUFRN3lDLFVBQVUyekMsVUFBWSxTQUFTWCxHQUNyQ3h6QyxLQUFLd3pDLE9BQVNBLGtCQzNFaEIsU0FBVVksR0FDUixhQUVBVCxFQUFRVSxPQUFTLFNBQVNDLEdBQ3hCLElBQ0E3cEIsRUFESThwQixFQUFRLElBQUlDLFdBQVdGLEdBQ3hCRyxFQUFNRixFQUFNeDBDLE9BQVEyMEMsRUFBUyxHQUVoQyxJQUFLanFCLEVBQUksRUFBR0EsRUFBSWdxQixFQUFLaHFCLEdBQUcsRUFDdEJpcUIsR0FBVU4sRUFBTUcsRUFBTTlwQixJQUFNLEdBQzVCaXFCLEdBQVVOLEdBQW1CLEVBQVhHLEVBQU05cEIsS0FBVyxFQUFNOHBCLEVBQU05cEIsRUFBSSxJQUFNLEdBQ3pEaXFCLEdBQVVOLEdBQXVCLEdBQWZHLEVBQU05cEIsRUFBSSxLQUFZLEVBQU04cEIsRUFBTTlwQixFQUFJLElBQU0sR0FDOURpcUIsR0FBVU4sRUFBcUIsR0FBZkcsRUFBTTlwQixFQUFJLElBUzVCLE9BTktncUIsRUFBTSxHQUFPLEVBQ2hCQyxFQUFTQSxFQUFPQyxVQUFVLEVBQUdELEVBQU8zMEMsT0FBUyxHQUFLLElBQ3pDMDBDLEVBQU0sR0FBTSxJQUNyQkMsRUFBU0EsRUFBT0MsVUFBVSxFQUFHRCxFQUFPMzBDLE9BQVMsR0FBSyxNQUc3QzIwQyxHQUdUZixFQUFRaUIsT0FBVSxTQUFTRixHQUN6QixJQUNxQmpxQixFQUNyQm9xQixFQUFVQyxFQUFVQyxFQUFVQyxFQUYxQkMsRUFBK0IsSUFBaEJQLEVBQU8zMEMsT0FDMUIwMEMsRUFBTUMsRUFBTzMwQyxPQUFXbTFDLEVBQUksRUFHTSxNQUE5QlIsRUFBT0EsRUFBTzMwQyxPQUFTLEtBQ3pCazFDLElBQ2tDLE1BQTlCUCxFQUFPQSxFQUFPMzBDLE9BQVMsSUFDekJrMUMsS0FJSixJQUFJWCxFQUFjLElBQUlhLFlBQVlGLEdBQ2xDVixFQUFRLElBQUlDLFdBQVdGLEdBRXZCLElBQUs3cEIsRUFBSSxFQUFHQSxFQUFJZ3FCLEVBQUtocUIsR0FBRyxFQUN0Qm9xQixFQUFXVCxFQUFNanBDLFFBQVF1cEMsRUFBT2pxQixJQUNoQ3FxQixFQUFXVixFQUFNanBDLFFBQVF1cEMsRUFBT2pxQixFQUFFLElBQ2xDc3FCLEVBQVdYLEVBQU1qcEMsUUFBUXVwQyxFQUFPanFCLEVBQUUsSUFDbEN1cUIsRUFBV1osRUFBTWpwQyxRQUFRdXBDLEVBQU9qcUIsRUFBRSxJQUVsQzhwQixFQUFNVyxLQUFRTCxHQUFZLEVBQU1DLEdBQVksRUFDNUNQLEVBQU1XLE1BQW9CLEdBQVhKLElBQWtCLEVBQU1DLEdBQVksRUFDbkRSLEVBQU1XLE1BQW9CLEVBQVhILElBQWlCLEVBQWlCLEdBQVhDLEVBR3hDLE9BQU9WLEdBakRYLENBbURHLDhFQzNDSCxTQUFTYyxFQUFRbm1CLEdBQ2YsR0FBSUEsRUFBSyxPQVdYLFNBQWVBLEdBQ2IsSUFBSyxJQUFJN2lCLEtBQU9ncEMsRUFBUTUwQyxVQUN0Qnl1QixFQUFJN2lCLEdBQU9ncEMsRUFBUTUwQyxVQUFVNEwsR0FFL0IsT0FBTzZpQixFQWZTb21CLENBQU1wbUIsR0FWdEJ5a0IsRUFBT0MsUUFBVXlCLEVBcUNuQkEsRUFBUTUwQyxVQUFVODBDLEdBQ2xCRixFQUFRNTBDLFVBQVVRLGlCQUFtQixTQUFTdW1CLEVBQU9ndUIsR0FJbkQsT0FIQXYxQyxLQUFLdzFDLFdBQWF4MUMsS0FBS3cxQyxZQUFjLElBQ3BDeDFDLEtBQUt3MUMsV0FBVyxJQUFNanVCLEdBQVN2bkIsS0FBS3cxQyxXQUFXLElBQU1qdUIsSUFBVSxJQUM3RHRhLEtBQUtzb0MsR0FDRHYxQyxNQWFUbzFDLEVBQVE1MEMsVUFBVWkxQyxLQUFPLFNBQVNsdUIsRUFBT2d1QixHQUN2QyxTQUFTRCxJQUNQdDFDLEtBQUswMUMsSUFBSW51QixFQUFPK3RCLEdBQ2hCQyxFQUFHcjFDLE1BQU1GLEtBQU1GLFdBS2pCLE9BRkF3MUMsRUFBR0MsR0FBS0EsRUFDUnYxQyxLQUFLczFDLEdBQUcvdEIsRUFBTyt0QixHQUNSdDFDLE1BYVRvMUMsRUFBUTUwQyxVQUFVazFDLElBQ2xCTixFQUFRNTBDLFVBQVVtMUMsZUFDbEJQLEVBQVE1MEMsVUFBVW8xQyxtQkFDbEJSLEVBQVE1MEMsVUFBVVUsb0JBQXNCLFNBQVNxbUIsRUFBT2d1QixHQUl0RCxHQUhBdjFDLEtBQUt3MUMsV0FBYXgxQyxLQUFLdzFDLFlBQWMsR0FHakMsR0FBSzExQyxVQUFVQyxPQUVqQixPQURBQyxLQUFLdzFDLFdBQWEsR0FDWHgxQyxLQUlULElBVUk2MUMsRUFWQUMsRUFBWTkxQyxLQUFLdzFDLFdBQVcsSUFBTWp1QixHQUN0QyxJQUFLdXVCLEVBQVcsT0FBTzkxQyxLQUd2QixHQUFJLEdBQUtGLFVBQVVDLE9BRWpCLGNBRE9DLEtBQUt3MUMsV0FBVyxJQUFNanVCLEdBQ3RCdm5CLEtBS1QsSUFBSyxJQUFJeXFCLEVBQUksRUFBR0EsRUFBSXFyQixFQUFVLzFDLE9BQVEwcUIsSUFFcEMsSUFEQW9yQixFQUFLQyxFQUFVcnJCLE1BQ0o4cUIsR0FBTU0sRUFBR04sS0FBT0EsRUFBSSxDQUM3Qk8sRUFBVWhPLE9BQU9yZCxFQUFHLEdBQ3BCLE1BVUosT0FKeUIsSUFBckJxckIsRUFBVS8xQyxlQUNMQyxLQUFLdzFDLFdBQVcsSUFBTWp1QixHQUd4QnZuQixNQVdUbzFDLEVBQVE1MEMsVUFBVVcsS0FBTyxTQUFTb21CLEdBQ2hDdm5CLEtBQUt3MUMsV0FBYXgxQyxLQUFLdzFDLFlBQWMsR0FLckMsSUFIQSxJQUFJNTFDLEVBQU8sSUFBSTB0QixNQUFNeHRCLFVBQVVDLE9BQVMsR0FDcEMrMUMsRUFBWTkxQyxLQUFLdzFDLFdBQVcsSUFBTWp1QixHQUU3QmtELEVBQUksRUFBR0EsRUFBSTNxQixVQUFVQyxPQUFRMHFCLElBQ3BDN3FCLEVBQUs2cUIsRUFBSSxHQUFLM3FCLFVBQVUycUIsR0FHMUIsR0FBSXFyQixFQUVHLENBQUlyckIsRUFBSSxFQUFiLElBQUssSUFBV2dxQixHQURoQnFCLEVBQVlBLEVBQVU1ckMsTUFBTSxJQUNJbkssT0FBUTBxQixFQUFJZ3FCLElBQU9ocUIsRUFDakRxckIsRUFBVXJyQixHQUFHdnFCLE1BQU1GLEtBQU1KLEdBSTdCLE9BQU9JLE1BV1RvMUMsRUFBUTUwQyxVQUFVdTFDLFVBQVksU0FBU3h1QixHQUVyQyxPQURBdm5CLEtBQUt3MUMsV0FBYXgxQyxLQUFLdzFDLFlBQWMsR0FDOUJ4MUMsS0FBS3cxQyxXQUFXLElBQU1qdUIsSUFBVSxJQVd6QzZ0QixFQUFRNTBDLFVBQVV3MUMsYUFBZSxTQUFTenVCLEdBQ3hDLFFBQVV2bkIsS0FBSysxQyxVQUFVeHVCLEdBQU94bkIsbUhDeks5QmsyQyxFQUFnQyxJQUFJQyxJQUFJLGFBQ3hDQyxFQUFnQyxJQUFJRCxJQUFJLGFBQ3hDRSxFQUFnQyxJQUFJRixJQUFJLGFBQ3hDRyxFQUFnQyxJQUFJSCxJQUFJLGFBQ3hDSSxFQUFnQyxJQUFJSixJQUFJLGFBQ3hDSyxFQUFnQyxJQUFJTCxJQUFJLGFBQ3hDTSxFQUFnQyxJQUFJTixJQUFJLGFBQ3hDTyxFQUFnQyxJQUFJUCxJQUFJLGFBQ3hDUSxFQUFnQyxJQUFJUixJQUFJLGFBQ3hDUyxFQUFnQyxJQUFJVCxJQUFJLGFBQ3hDVSxFQUEwQixJQUE0QixLQUN0REMsRUFBcUMsSUFBZ0NaLEdBQ3JFYSxFQUFxQyxJQUFnQ1gsR0FDckVZLEVBQXFDLElBQWdDWCxHQUNyRVksRUFBcUMsSUFBZ0NYLEdBQ3JFWSxFQUFxQyxJQUFnQ1gsR0FDckVZLEVBQXFDLElBQWdDWCxHQUNyRVksRUFBcUMsSUFBZ0NYLEdBQ3JFWSxFQUFxQyxJQUFnQ1gsR0FDckVZLEVBQXFDLElBQWdDWCxHQUNyRVksRUFBcUMsSUFBZ0NYLEdBRXpFQyxFQUF3QjNwQyxLQUFLLENBQUN5bUMsRUFBTzZELEdBQUksa0lBQXNJVixFQUFxQywwQkFBOEJDLEVBQXFDLHdsQkFBa21CQyxFQUFxQywwQkFBOEJDLEVBQXFDLHVtQkFBaW5CQyxFQUFxQywwQkFBOEJDLEVBQXFDLGltQkFBMm1CQyxFQUFxQywwQkFBOEJDLEVBQXFDLG9tQkFBOG1CQyxFQUFxQywwQkFBOEJDLEVBQXFDLGdlQUF1ZSxHQUFHLENBQUMsUUFBVSxFQUFFLFFBQVUsQ0FBQyx1RUFBdUUsTUFBUSxHQUFHLFNBQVcsaTFDQUFpMUMsZUFBaUIsQ0FBQyxrM0dBQXc3RyxXQUFhLE1BRTErUSxpQ0NwQkE1RCxFQUFPQyxRQUFVLFNBQVU2RCxHQUN6QixJQUFJbmQsRUFBTyxHQXVEWCxPQXJEQUEsRUFBS3NFLFNBQVcsV0FDZCxPQUFPMytCLEtBQUtra0MsS0FBSSxTQUFValUsR0FDeEIsSUFBSXJjLEVBQVU0akMsRUFBdUJ2bkIsR0FFckMsT0FBSUEsRUFBSyxHQUNBLFVBQVV3bkIsT0FBT3huQixFQUFLLEdBQUksTUFBTXduQixPQUFPN2pDLEVBQVMsS0FHbERBLEtBQ04vRSxLQUFLLEtBS1Z3ckIsRUFBSzVQLEVBQUksU0FBVWl0QixFQUFTQyxFQUFZQyxHQUNmLGlCQUFaRixJQUVUQSxFQUFVLENBQUMsQ0FBQyxLQUFNQSxFQUFTLE1BRzdCLElBQUlHLEVBQXlCLEdBRTdCLEdBQUlELEVBQ0YsSUFBSyxJQUFJbnRCLEVBQUksRUFBR0EsRUFBSXpxQixLQUFLRCxPQUFRMHFCLElBQUssQ0FFcEMsSUFBSThzQixFQUFLdjNDLEtBQUt5cUIsR0FBRyxHQUVQLE1BQU44c0IsSUFDRk0sRUFBdUJOLElBQU0sR0FLbkMsSUFBSyxJQUFJMTNDLEVBQUssRUFBR0EsRUFBSzYzQyxFQUFRMzNDLE9BQVFGLElBQU0sQ0FDMUMsSUFBSW93QixFQUFPLEdBQUd3bkIsT0FBT0MsRUFBUTczQyxJQUV6QiszQyxHQUFVQyxFQUF1QjVuQixFQUFLLE1BS3RDMG5CLElBQ0cxbkIsRUFBSyxHQUdSQSxFQUFLLEdBQUssR0FBR3duQixPQUFPRSxFQUFZLFNBQVNGLE9BQU94bkIsRUFBSyxJQUZyREEsRUFBSyxHQUFLMG5CLEdBTWR0ZCxFQUFLcHRCLEtBQUtnakIsTUFJUG9LLDBCQ3hEVCxTQUFTeWQsRUFBa0JDLEVBQUt0RCxJQUFrQixNQUFQQSxHQUFlQSxFQUFNc0QsRUFBSWg0QyxVQUFRMDBDLEVBQU1zRCxFQUFJaDRDLFFBQVEsSUFBSyxJQUFJMHFCLEVBQUksRUFBR3V0QixFQUFPLElBQUkxcUIsTUFBTW1uQixHQUFNaHFCLEVBQUlncUIsRUFBS2hxQixJQUFPdXRCLEVBQUt2dEIsR0FBS3N0QixFQUFJdHRCLEdBQU0sT0FBT3V0QixFQU1oTHRFLEVBQU9DLFFBQVUsU0FBZ0MxakIsR0FDL0MsSUFic0I4bkIsRUFBS3R0QixFQWF2Qnd0QixHQWJ1Qnh0QixFQWFNLEVBSG5DLFNBQXlCc3RCLEdBQU8sR0FBSXpxQixNQUFNNHFCLFFBQVFILEdBQU0sT0FBT0EsRUFWdEJJLENBQWpCSixFQWFLOW5CLElBTDdCLFNBQStCOG5CLEVBQUt0dEIsR0FBSyxJQUFJNXFCLEVBQVksTUFBUGs0QyxFQUFjLEtBQXlCLG9CQUFYSyxRQUEwQkwsRUFBSUssT0FBT0MsV0FBYU4sRUFBSSxjQUFlLEdBQVUsTUFBTmw0QyxFQUFKLENBQXdCLElBQWtEeTRDLEVBQUlDLEVBQWxEQyxFQUFPLEdBQVFDLEdBQUssRUFBVUMsR0FBSyxFQUFtQixJQUFNLElBQUs3NEMsRUFBS0EsRUFBR3VFLEtBQUsyekMsS0FBUVUsR0FBTUgsRUFBS3o0QyxFQUFHMkksUUFBUUMsUUFBb0IrdkMsRUFBS3ZyQyxLQUFLcXJDLEVBQUc5eEMsUUFBWWlrQixHQUFLK3RCLEVBQUt6NEMsU0FBVzBxQixHQUEzRGd1QixHQUFLLElBQW9FLE1BQU85aUMsR0FBTytpQyxHQUFLLEVBQU1ILEVBQUs1aUMsRUFBTyxRQUFVLElBQVc4aUMsR0FBc0IsTUFBaEI1NEMsRUFBVyxRQUFXQSxFQUFXLFNBQU8sUUFBVSxHQUFJNjRDLEVBQUksTUFBTUgsR0FBUSxPQUFPQyxHQVJ6YkcsQ0FBc0JaLEVBQUt0dEIsSUFJNUYsU0FBcUNtdUIsRUFBR0MsR0FBVSxHQUFLRCxFQUFMLENBQWdCLEdBQWlCLGlCQUFOQSxFQUFnQixPQUFPZCxFQUFrQmMsRUFBR0MsR0FBUyxJQUFJQyxFQUFJLzJDLE9BQU92QixVQUFVbStCLFNBQVN2NkIsS0FBS3cwQyxHQUFHMXVDLE1BQU0sR0FBSSxHQUFpRSxNQUFuRCxXQUFONHVDLEdBQWtCRixFQUFFRyxjQUFhRCxFQUFJRixFQUFFRyxZQUFZQyxNQUFnQixRQUFORixHQUFxQixRQUFOQSxFQUFvQnhyQixNQUFNd0IsS0FBSzhwQixHQUFjLGNBQU5FLEdBQXFCLDJDQUEyQ0csS0FBS0gsR0FBV2hCLEVBQWtCYyxFQUFHQyxRQUF6RyxHQUozTUssQ0FBNEJuQixFQUFLdHRCLElBRW5JLFdBQThCLE1BQU0sSUFBSTB1QixVQUFVLDZJQUZ1RkMsSUFjbkl4bEMsRUFBVXFrQyxFQUFNLEdBQ2hCb0IsRUFBYXBCLEVBQU0sR0FFdkIsSUFBS29CLEVBQ0gsT0FBT3psQyxFQUdULEdBQW9CLG1CQUFUMGxDLEtBQXFCLENBRTlCLElBQUk1RSxFQUFTNEUsS0FBS0MsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVTCxNQUN6RE0sRUFBTywrREFBK0RsQyxPQUFPL0MsR0FDN0VrRixFQUFnQixPQUFPbkMsT0FBT2tDLEVBQU0sT0FDcENFLEVBQWFSLEVBQVdTLFFBQVE1VixLQUFJLFNBQVU2VixHQUNoRCxNQUFPLGlCQUFpQnRDLE9BQU80QixFQUFXVyxZQUFjLElBQUl2QyxPQUFPc0MsRUFBUSxVQUU3RSxNQUFPLENBQUNubUMsR0FBUzZqQyxPQUFPb0MsR0FBWXBDLE9BQU8sQ0FBQ21DLElBQWdCL3FDLEtBQUssTUFHbkUsTUFBTyxDQUFDK0UsR0FBUy9FLEtBQUssOEJDaEN4QjZrQyxFQUFPQyxRQUFVLFNBQVVzRyxFQUFLbDVDLEdBTTlCLE9BTEtBLElBRUhBLEVBQVUsSUFHUGs1QyxHQUtMQSxFQUFNaFUsT0FBT2dVLEVBQUlDLFdBQWFELEVBQUlFLFFBQVVGLEdBRXhDLGVBQWVoQixLQUFLZ0IsS0FFdEJBLEVBQU1BLEVBQUkvdkMsTUFBTSxHQUFJLElBR2xCbkosRUFBUXE1QyxPQUVWSCxHQUFPbDVDLEVBQVFxNUMsTUFLYixvQkFBb0JuQixLQUFLZ0IsSUFBUWw1QyxFQUFRczVDLFdBQ3BDLElBQUs1QyxPQUFPd0MsRUFBSUssUUFBUSxLQUFNLE9BQU9BLFFBQVEsTUFBTyxPQUFRLEtBRzlETCxHQXRCRUEsbUJDSFh0RyxFQUFRNEcsV0EySVIsU0FBb0IzNkMsR0FRbkIsR0FQQUEsRUFBSyxJQUFNSSxLQUFLdzZDLFVBQVksS0FBTyxJQUNsQ3g2QyxLQUFLeTZDLFdBQ0p6NkMsS0FBS3c2QyxVQUFZLE1BQVEsS0FDMUI1NkMsRUFBSyxJQUNKSSxLQUFLdzZDLFVBQVksTUFBUSxLQUMxQixJQUFNOUcsRUFBT0MsUUFBUStHLFNBQVMxNkMsS0FBS3d4QyxPQUUvQnh4QyxLQUFLdzZDLFVBQ1QsT0FHRCxNQUFNRyxFQUFJLFVBQVkzNkMsS0FBSzQ2QyxNQUMzQmg3QyxFQUFLa29DLE9BQU8sRUFBRyxFQUFHNlMsRUFBRyxrQkFLckIsSUFBSTkwQixFQUFRLEVBQ1JnMUIsRUFBUSxFQUNaajdDLEVBQUssR0FBRzA2QyxRQUFRLGVBQWVRLElBQ2hCLE9BQVZBLElBR0pqMUIsSUFDYyxPQUFWaTFCLElBR0hELEVBQVFoMUIsT0FJVmptQixFQUFLa29DLE9BQU8rUyxFQUFPLEVBQUdGLElBMUt2QmhILEVBQVFvSCxLQTZMUixTQUFjQyxHQUNiLElBQ0tBLEVBQ0hySCxFQUFRc0gsUUFBUUMsUUFBUSxRQUFTRixHQUVqQ3JILEVBQVFzSCxRQUFRRSxXQUFXLFNBRTNCLE1BQU92eUMsTUFuTVYrcUMsRUFBUXlILEtBK01SLFdBQ0MsSUFBSUMsRUFDSixJQUNDQSxFQUFJMUgsRUFBUXNILFFBQVFLLFFBQVEsU0FDM0IsTUFBTzF5QyxJQVVULE9BSkt5eUMsR0FBd0Isb0JBQVpFLFNBQTJCLFFBQVNBLFVBQ3BERixFQUFJRSxRQUFRQyxJQUFJQyxPQUdWSixHQTVOUjFILEVBQVE2RyxVQXlHUixXQUlDLFFBQXNCLG9CQUFYN3pDLFNBQTBCQSxPQUFPNDBDLFNBQW9DLGFBQXhCNTBDLE9BQU80MEMsUUFBUW44QixPQUF1QnpZLE9BQU80MEMsUUFBUUcsVUFLcEYsb0JBQWRDLFlBQTZCQSxVQUFVQyxZQUFhRCxVQUFVQyxVQUFVbDJCLGNBQWNvMUIsTUFBTSw0QkFNM0Usb0JBQWI3N0MsVUFBNEJBLFNBQVN3WCxpQkFBbUJ4WCxTQUFTd1gsZ0JBQWdCblgsT0FBU0wsU0FBU3dYLGdCQUFnQm5YLE1BQU11OEMsa0JBRXBILG9CQUFYbDFDLFFBQTBCQSxPQUFPbTFDLFVBQVluMUMsT0FBT20xQyxRQUFRQyxTQUFZcDFDLE9BQU9tMUMsUUFBUUUsV0FBYXIxQyxPQUFPbTFDLFFBQVFHLFFBR3JHLG9CQUFkTixXQUE2QkEsVUFBVUMsV0FBYUQsVUFBVUMsVUFBVWwyQixjQUFjbzFCLE1BQU0sbUJBQXFCb0IsU0FBU0MsT0FBT0MsR0FBSSxLQUFPLElBRTlILG9CQUFkVCxXQUE2QkEsVUFBVUMsV0FBYUQsVUFBVUMsVUFBVWwyQixjQUFjbzFCLE1BQU0sd0JBOUh0R25ILEVBQVFzSCxRQXlPUixXQUNDLElBR0MsT0FBT29CLGFBQ04sTUFBT3p6QyxLQTlPUTB6QyxHQUNsQjNJLEVBQVFoekMsUUFBVSxNQUNqQixJQUFJNDdDLEdBQVMsRUFFYixNQUFPLEtBQ0RBLElBQ0pBLEdBQVMsRUFDVFQsUUFBUVUsS0FBSyw0SUFORSxHQWVsQjdJLEVBQVE4SSxPQUFTLENBQ2hCLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFVBQ0EsVUFDQSxVQUNBLFdBc0ZEOUksRUFBUStJLElBQU1aLFFBQVFhLE9BQVNiLFFBQVFZLEtBQU8sU0FrRTlDaEosRUFBT0MsUUFBVSxFQUFRLEtBQVIsQ0FBb0JBLEdBRXJDLE1BQU0sV0FBQ2lKLEdBQWNsSixFQUFPQyxRQU01QmlKLEVBQVdDLEVBQUksU0FBVUMsR0FDeEIsSUFDQyxPQUFPckQsS0FBS0MsVUFBVW9ELEdBQ3JCLE1BQU9sMEMsR0FDUixNQUFPLCtCQUFpQ0EsRUFBTW0wQywwQkNPaERySixFQUFPQyxRQTNRUCxTQUFlNkgsR0FxRGQsU0FBU3dCLEVBQVl2QyxHQUNwQixJQUFJd0MsRUFFQUMsRUFDQUMsRUFGQUMsRUFBaUIsS0FJckIsU0FBU1QsS0FBUy84QyxHQUVqQixJQUFLKzhDLEVBQU01VSxRQUNWLE9BR0QsTUFBTXNWLEVBQU9WLEVBR1BXLEVBQU9DLE9BQU8sSUFBSUMsTUFDbEJsSyxFQUFLZ0ssR0FBUUwsR0FBWUssR0FDL0JELEVBQUs3TCxLQUFPOEIsRUFDWitKLEVBQUtJLEtBQU9SLEVBQ1pJLEVBQUtDLEtBQU9BLEVBQ1pMLEVBQVdLLEVBRVgxOUMsRUFBSyxHQUFLbzlDLEVBQVlVLE9BQU85OUMsRUFBSyxJQUVYLGlCQUFaQSxFQUFLLElBRWZBLEVBQUsrOUMsUUFBUSxNQUlkLElBQUk5M0IsRUFBUSxFQUNaam1CLEVBQUssR0FBS0EsRUFBSyxHQUFHMDZDLFFBQVEsaUJBQWlCLENBQUNRLEVBQU84QyxLQUVsRCxHQUFjLE9BQVY5QyxFQUNILE1BQU8sSUFFUmoxQixJQUNBLE1BQU1nNEIsRUFBWWIsRUFBWUosV0FBV2dCLEdBQ3pDLEdBQXlCLG1CQUFkQyxFQUEwQixDQUNwQyxNQUFNQyxFQUFNbCtDLEVBQUtpbUIsR0FDakJpMUIsRUFBUStDLEVBQVV6NUMsS0FBS2k1QyxFQUFNUyxHQUc3QmwrQyxFQUFLa29DLE9BQU9qaUIsRUFBTyxHQUNuQkEsSUFFRCxPQUFPaTFCLEtBSVJrQyxFQUFZekMsV0FBV24yQyxLQUFLaTVDLEVBQU16OUMsSUFFcEJ5OUMsRUFBS1gsS0FBT00sRUFBWU4sS0FDaEN4OEMsTUFBTW05QyxFQUFNejlDLEdBaUNuQixPQTlCQSs4QyxFQUFNbEMsVUFBWUEsRUFDbEJrQyxFQUFNbkMsVUFBWXdDLEVBQVl4QyxZQUM5Qm1DLEVBQU0vQixNQUFRb0MsRUFBWWUsWUFBWXRELEdBQ3RDa0MsRUFBTXFCLE9BQVNBLEVBQ2ZyQixFQUFNaDhDLFFBQVVxOEMsRUFBWXI4QyxRQUU1Qm9CLE9BQU9DLGVBQWUyNkMsRUFBTyxVQUFXLENBQ3ZDejZDLFlBQVksRUFDWkMsY0FBYyxFQUNkRixJQUFLLElBQ21CLE9BQW5CbTdDLEVBQ0lBLEdBRUpGLElBQW9CRixFQUFZaEMsYUFDbkNrQyxFQUFrQkYsRUFBWWhDLFdBQzlCbUMsRUFBZUgsRUFBWWpWLFFBQVEwUyxJQUc3QjBDLEdBRVI3MkMsSUFBS3cyQyxJQUNKTSxFQUFpQk4sS0FLYSxtQkFBckJFLEVBQVkzOEMsTUFDdEIyOEMsRUFBWTM4QyxLQUFLczhDLEdBR1hBLEVBR1IsU0FBU3FCLEVBQU92RCxFQUFXd0QsR0FDMUIsTUFBTUMsRUFBV2xCLEVBQVloOUMsS0FBS3k2QyxnQkFBa0MsSUFBZHdELEVBQTRCLElBQU1BLEdBQWF4RCxHQUVyRyxPQURBeUQsRUFBU3hCLElBQU0xOEMsS0FBSzA4QyxJQUNid0IsRUF5RlIsU0FBU0MsRUFBWUMsR0FDcEIsT0FBT0EsRUFBT3pmLFdBQ1pnVyxVQUFVLEVBQUd5SixFQUFPemYsV0FBVzUrQixPQUFTLEdBQ3hDdTZDLFFBQVEsVUFBVyxLQTJCdEIsT0F2UUEwQyxFQUFZTCxNQUFRSyxFQUNwQkEsRUFBWTdDLFFBQVU2QyxFQUN0QkEsRUFBWVUsT0FvUFosU0FBZ0JJLEdBQ2YsT0FBSUEsYUFBZXA5QyxNQUNYbzlDLEVBQUlPLE9BQVNQLEVBQUlmLFFBRWxCZSxHQXZQUmQsRUFBWXNCLFFBd0xaLFdBQ0MsTUFBTXRELEVBQWEsSUFDZmdDLEVBQVl1QixNQUFNcmEsSUFBSWlhLE1BQ3RCbkIsRUFBWXdCLE1BQU10YSxJQUFJaWEsR0FBYWphLEtBQUl1VyxHQUFhLElBQU1BLEtBQzVENXJDLEtBQUssS0FFUCxPQURBbXVDLEVBQVl5QixPQUFPLElBQ1p6RCxHQTdMUmdDLEVBQVl5QixPQXNKWixTQUFnQnpELEdBT2YsSUFBSXZ3QixFQU5KdXlCLEVBQVlqQyxLQUFLQyxHQUNqQmdDLEVBQVloQyxXQUFhQSxFQUV6QmdDLEVBQVl1QixNQUFRLEdBQ3BCdkIsRUFBWXdCLE1BQVEsR0FHcEIsTUFBTUUsR0FBK0IsaUJBQWYxRCxFQUEwQkEsRUFBYSxJQUFJMEQsTUFBTSxVQUNqRWpLLEVBQU1pSyxFQUFNMytDLE9BRWxCLElBQUswcUIsRUFBSSxFQUFHQSxFQUFJZ3FCLEVBQUtocUIsSUFDZmkwQixFQUFNajBCLEtBT1csT0FGdEJ1d0IsRUFBYTBELEVBQU1qMEIsR0FBRzZ2QixRQUFRLE1BQU8sUUFFdEIsR0FDZDBDLEVBQVl3QixNQUFNdnhDLEtBQUssSUFBSWt2QyxPQUFPLElBQU1uQixFQUFXMkQsT0FBTyxHQUFLLE1BRS9EM0IsRUFBWXVCLE1BQU10eEMsS0FBSyxJQUFJa3ZDLE9BQU8sSUFBTW5CLEVBQWEsUUEzS3hEZ0MsRUFBWWpWLFFBc01aLFNBQWlCaVIsR0FDaEIsR0FBOEIsTUFBMUJBLEVBQUtBLEVBQUtqNUMsT0FBUyxHQUN0QixPQUFPLEVBR1IsSUFBSTBxQixFQUNBZ3FCLEVBRUosSUFBS2hxQixFQUFJLEVBQUdncUIsRUFBTXVJLEVBQVl3QixNQUFNeitDLE9BQVEwcUIsRUFBSWdxQixFQUFLaHFCLElBQ3BELEdBQUl1eUIsRUFBWXdCLE1BQU0vekIsR0FBR3d1QixLQUFLRCxHQUM3QixPQUFPLEVBSVQsSUFBS3Z1QixFQUFJLEVBQUdncUIsRUFBTXVJLEVBQVl1QixNQUFNeCtDLE9BQVEwcUIsRUFBSWdxQixFQUFLaHFCLElBQ3BELEdBQUl1eUIsRUFBWXVCLE1BQU05ekIsR0FBR3d1QixLQUFLRCxHQUM3QixPQUFPLEVBSVQsT0FBTyxHQXpOUmdFLEVBQVl0QyxTQUFXLEVBQVEsTUFDL0JzQyxFQUFZcjhDLFFBMFBaLFdBQ0NtN0MsUUFBUVUsS0FBSywwSUF6UGR6NkMsT0FBT2llLEtBQUt3N0IsR0FBS3B4QyxTQUFRZ0MsSUFDeEI0d0MsRUFBWTV3QyxHQUFPb3ZDLEVBQUlwdkMsTUFPeEI0d0MsRUFBWXVCLE1BQVEsR0FDcEJ2QixFQUFZd0IsTUFBUSxHQU9wQnhCLEVBQVlKLFdBQWEsR0FrQnpCSSxFQUFZZSxZQVZaLFNBQXFCdEQsR0FDcEIsSUFBSUwsRUFBTyxFQUVYLElBQUssSUFBSTN2QixFQUFJLEVBQUdBLEVBQUlnd0IsRUFBVTE2QyxPQUFRMHFCLElBQ3JDMnZCLEdBQVNBLEdBQVEsR0FBS0EsRUFBUUssRUFBVW1FLFdBQVduMEIsR0FDbkQydkIsR0FBUSxFQUdULE9BQU80QyxFQUFZUCxPQUFPeHhDLEtBQUt3bUMsSUFBSTJJLEdBQVE0QyxFQUFZUCxPQUFPMThDLFNBNE4vRGk5QyxFQUFZeUIsT0FBT3pCLEVBQVk1QixRQUV4QjRCLGFDOVFSdEosRUFBT0MsUUFDZSxvQkFBVDBKLEtBQ0ZBLEtBQ29CLG9CQUFYMTJDLE9BQ1RBLE9BRUFrNEMsU0FBUyxjQUFUQSxtQkNOWCxNQUFNQyxFQUFTLEVBQVEsTUFFdkJwTCxFQUFPQyxRQUFVLENBQUNvTCxFQUFLaGxDLElBQVMsSUFBSStrQyxFQUFPQyxFQUFLaGxDLEdBT2hEMjVCLEVBQU9DLFFBQVFtTCxPQUFTQSxFQUN4QnBMLEVBQU9DLFFBQVFxTCxTQUFXRixFQUFPRSxTQUNqQ3RMLEVBQU9DLFFBQVFzTCxVQUFZLEVBQTNCLE1BQ0F2TCxFQUFPQyxRQUFRdUwsV0FBYSxFQUE1QixNQUNBeEwsRUFBT0MsUUFBUXdMLE9BQVMsRUFBeEIsc0JDYkEsTUFBTUQsRUFBYSxFQUFRLE1BQ3JCOUosRUFBVSxFQUFRLE1BQ2xCdUgsRUFBUSxFQUFRLEtBQVIsQ0FBaUIsMkJBQ3pCd0MsRUFBUyxFQUFRLE1BQ2pCQyxFQUFXLEVBQVEsTUFDbkJDLEVBQVUsRUFBUSxNQUV4QixNQUFNUCxVQUFlMUosRUFRbkIyRCxZQUFZZ0csRUFBS2hsQyxFQUFPLElBQ3RCdWxDLFFBRUlQLEdBQU8saUJBQW9CQSxJQUM3QmhsQyxFQUFPZ2xDLEVBQ1BBLEVBQU0sTUFHSkEsR0FDRkEsRUFBTUssRUFBU0wsR0FDZmhsQyxFQUFLd2xDLFNBQVdSLEVBQUlTLEtBQ3BCemxDLEVBQUswbEMsT0FBMEIsVUFBakJWLEVBQUlDLFVBQXlDLFFBQWpCRCxFQUFJQyxTQUM5Q2psQyxFQUFLMmxDLEtBQU9YLEVBQUlXLEtBQ1pYLEVBQUlZLFFBQU81bEMsRUFBSzRsQyxNQUFRWixFQUFJWSxRQUN2QjVsQyxFQUFLeWxDLE9BQ2R6bEMsRUFBS3dsQyxTQUFXSCxFQUFTcmxDLEVBQUt5bEMsTUFBTUEsTUFHdEN4L0MsS0FBS3kvQyxPQUNILE1BQVExbEMsRUFBSzBsQyxPQUNUMWxDLEVBQUswbEMsT0FDZSxvQkFBYkcsVUFBNEIsV0FBYUEsU0FBU1osU0FFM0RqbEMsRUFBS3dsQyxXQUFheGxDLEVBQUsybEMsT0FFekIzbEMsRUFBSzJsQyxLQUFPMS9DLEtBQUt5L0MsT0FBUyxNQUFRLE1BR3BDei9DLEtBQUt1L0MsU0FDSHhsQyxFQUFLd2xDLFdBQ2dCLG9CQUFiSyxTQUEyQkEsU0FBU0wsU0FBVyxhQUN6RHYvQyxLQUFLMC9DLEtBQ0gzbEMsRUFBSzJsQyxPQUNnQixvQkFBYkUsVUFBNEJBLFNBQVNGLEtBQ3pDRSxTQUFTRixLQUNUMS9DLEtBQUt5L0MsT0FDTCxJQUNBLElBRU56L0MsS0FBS2svQyxXQUFhbmxDLEVBQUttbEMsWUFBYyxDQUFDLFVBQVcsYUFDakRsL0MsS0FBSzYvQyxXQUFhLEdBQ2xCNy9DLEtBQUs4L0MsWUFBYyxHQUNuQjkvQyxLQUFLKy9DLGNBQWdCLEVBRXJCLy9DLEtBQUsrWixLQUFPaFksT0FBT2krQyxPQUNqQixDQUNFQyxLQUFNLGFBQ05DLE9BQU8sRUFDUEMsaUJBQWlCLEVBQ2pCQyxTQUFTLEVBQ1RDLE9BQU8sRUFDUEMsZUFBZ0IsSUFDaEJDLGlCQUFpQixFQUNqQkMsb0JBQW9CLEVBQ3BCQyxrQkFBbUIsQ0FDakJDLFVBQVcsTUFFYkMsaUJBQWtCLEdBQ2xCQyxxQkFBcUIsR0FFdkI3bUMsR0FHRi9aLEtBQUsrWixLQUFLa21DLEtBQU9qZ0QsS0FBSytaLEtBQUtrbUMsS0FBSzNGLFFBQVEsTUFBTyxJQUFNLElBRXRCLGlCQUFwQnQ2QyxLQUFLK1osS0FBSzRsQyxRQUNuQjMvQyxLQUFLK1osS0FBSzRsQyxNQUFRTixFQUFRekssT0FBTzUwQyxLQUFLK1osS0FBSzRsQyxRQUk3QzMvQyxLQUFLdTNDLEdBQUssS0FDVnYzQyxLQUFLNmdELFNBQVcsS0FDaEI3Z0QsS0FBSzhnRCxhQUFlLEtBQ3BCOWdELEtBQUsrZ0QsWUFBYyxLQUduQi9nRCxLQUFLZ2hELGlCQUFtQixLQUVRLG1CQUFyQmhnRCxtQkFDTGhCLEtBQUsrWixLQUFLNm1DLHFCQUlaNS9DLGlCQUNFLGdCQUNBLEtBQ01oQixLQUFLaWhELFlBRVBqaEQsS0FBS2loRCxVQUFVckwscUJBQ2Y1MUMsS0FBS2loRCxVQUFVdnZDLFlBR25CLEdBR2tCLGNBQWxCMVIsS0FBS3UvQyxXQUNQdi9DLEtBQUtraEQscUJBQXVCLEtBQzFCbGhELEtBQUttaEQsUUFBUSxvQkFFZm5nRCxpQkFBaUIsVUFBV2hCLEtBQUtraEQsc0JBQXNCLEtBSTNEbGhELEtBQUtzUixPQVVQOHZDLGdCQUFnQnBJLEdBQ2QyRCxFQUFNLDBCQUEyQjNELEdBQ2pDLE1BQU0yRyxFQThoQlYsU0FBZTF3QixHQUNiLE1BQU0ycEIsRUFBSSxHQUNWLElBQUssSUFBSW51QixLQUFLd0UsRUFDUkEsRUFBSW95QixlQUFlNTJCLEtBQ3JCbXVCLEVBQUVudUIsR0FBS3dFLEVBQUl4RSxJQUdmLE9BQU9tdUIsRUFyaUJTdGlDLENBQU10VyxLQUFLK1osS0FBSzRsQyxPQUc5QkEsRUFBTTJCLElBQU1uQyxFQUFPSCxTQUduQlcsRUFBTXNCLFVBQVlqSSxFQUdkaDVDLEtBQUt1M0MsS0FBSW9JLEVBQU00QixJQUFNdmhELEtBQUt1M0MsSUFFOUIsTUFBTXg5QixFQUFPaFksT0FBT2krQyxPQUNsQixHQUNBaGdELEtBQUsrWixLQUFLNG1DLGlCQUFpQjNILEdBQzNCaDVDLEtBQUsrWixLQUNMLENBQ0U0bEMsTUFBQUEsRUFDQTZCLE9BQVF4aEQsS0FDUnUvQyxTQUFVdi9DLEtBQUt1L0MsU0FDZkUsT0FBUXovQyxLQUFLeS9DLE9BQ2JDLEtBQU0xL0MsS0FBSzAvQyxPQU1mLE9BRkEvQyxFQUFNLGNBQWU1aUMsR0FFZCxJQUFJbWxDLEVBQVdsRyxHQUFNai9CLEdBUTlCekksT0FDRSxJQUFJMnZDLEVBQ0osR0FDRWpoRCxLQUFLK1osS0FBS3dtQyxpQkFDVnpCLEVBQU8yQyx3QkFDbUMsSUFBMUN6aEQsS0FBS2svQyxXQUFXL3pDLFFBQVEsYUFFeEI4MUMsRUFBWSxnQkFDUCxJQUFJLElBQU1qaEQsS0FBS2svQyxXQUFXbi9DLE9BSy9CLFlBSEEyRixZQUFXLEtBQ1QxRixLQUFLbUIsS0FBSyxRQUFTLDZCQUNsQixHQUdIOC9DLEVBQVlqaEQsS0FBS2svQyxXQUFXLEdBRTlCbC9DLEtBQUs2L0MsV0FBYSxVQUdsQixJQUNFb0IsRUFBWWpoRCxLQUFLb2hELGdCQUFnQkgsR0FDakMsTUFBTzFqQyxHQUlQLE9BSEFvL0IsRUFBTSxxQ0FBc0NwL0IsR0FDNUN2ZCxLQUFLay9DLFdBQVd3QyxhQUNoQjFoRCxLQUFLc1IsT0FJUDJ2QyxFQUFVM3ZDLE9BQ1Z0UixLQUFLMmhELGFBQWFWLEdBUXBCVSxhQUFhVixHQUNYdEUsRUFBTSx1QkFBd0JzRSxFQUFVakksTUFFcENoNUMsS0FBS2loRCxZQUNQdEUsRUFBTSxpQ0FBa0MzOEMsS0FBS2loRCxVQUFVakksTUFDdkRoNUMsS0FBS2loRCxVQUFVckwsc0JBSWpCNTFDLEtBQUtpaEQsVUFBWUEsRUFHakJBLEVBQ0czTCxHQUFHLFFBQVN0MUMsS0FBSzRoRCxRQUFRdnRDLEtBQUtyVSxPQUM5QnMxQyxHQUFHLFNBQVV0MUMsS0FBSzZoRCxTQUFTeHRDLEtBQUtyVSxPQUNoQ3MxQyxHQUFHLFFBQVN0MUMsS0FBSzhoRCxRQUFRenRDLEtBQUtyVSxPQUM5QnMxQyxHQUFHLFNBQVMsS0FDWHQxQyxLQUFLbWhELFFBQVEsc0JBVW5CWSxNQUFNL0ksR0FDSjJELEVBQU0seUJBQTBCM0QsR0FDaEMsSUFBSWlJLEVBQVlqaEQsS0FBS29oRCxnQkFBZ0JwSSxFQUFNLENBQUUrSSxNQUFPLElBQ2hEQyxHQUFTLEVBRWJsRCxFQUFPMkMsdUJBQXdCLEVBRS9CLE1BQU1RLEVBQWtCLEtBQ2xCRCxJQUVKckYsRUFBTSw4QkFBK0IzRCxHQUNyQ2lJLEVBQVVpQixLQUFLLENBQUMsQ0FBRTlpQyxLQUFNLE9BQVF1NkIsS0FBTSxXQUN0Q3NILEVBQVV4TCxLQUFLLFVBQVUwTSxJQUN2QixJQUFJSCxFQUNKLEdBQUksU0FBV0csRUFBSS9pQyxNQUFRLFVBQVkraUMsRUFBSXhJLEtBQU0sQ0FJL0MsR0FIQWdELEVBQU0sNEJBQTZCM0QsR0FDbkNoNUMsS0FBS29pRCxXQUFZLEVBQ2pCcGlELEtBQUttQixLQUFLLFlBQWE4L0MsSUFDbEJBLEVBQVcsT0FDaEJuQyxFQUFPMkMsc0JBQXdCLGNBQWdCUixFQUFVakksS0FFekQyRCxFQUFNLGlDQUFrQzM4QyxLQUFLaWhELFVBQVVqSSxNQUN2RGg1QyxLQUFLaWhELFVBQVVvQixPQUFNLEtBQ2ZMLEdBQ0EsV0FBYWhpRCxLQUFLNi9DLGFBQ3RCbEQsRUFBTSxpREFFTm5XLElBRUF4bUMsS0FBSzJoRCxhQUFhVixHQUNsQkEsRUFBVWlCLEtBQUssQ0FBQyxDQUFFOWlDLEtBQU0sYUFDeEJwZixLQUFLbUIsS0FBSyxVQUFXOC9DLEdBQ3JCQSxFQUFZLEtBQ1pqaEQsS0FBS29pRCxXQUFZLEVBQ2pCcGlELEtBQUtzaUQsZ0JBRUYsQ0FDTDNGLEVBQU0sOEJBQStCM0QsR0FDckMsTUFBTXJqQyxFQUFNLElBQUlqVixNQUFNLGVBQ3RCaVYsRUFBSXNyQyxVQUFZQSxFQUFVakksS0FDMUJoNUMsS0FBS21CLEtBQUssZUFBZ0J3VSxTQUtoQyxTQUFTNHNDLElBQ0hQLElBR0pBLEdBQVMsRUFFVHhiLElBRUF5YSxFQUFVdnZDLFFBQ1Z1dkMsRUFBWSxNQUlkLE1BQU11QixFQUFVN3NDLElBQ2QsTUFBTS9NLEVBQVEsSUFBSWxJLE1BQU0sZ0JBQWtCaVYsR0FDMUMvTSxFQUFNcTRDLFVBQVlBLEVBQVVqSSxLQUU1QnVKLElBRUE1RixFQUFNLG1EQUFvRDNELEVBQU1yakMsR0FFaEUzVixLQUFLbUIsS0FBSyxlQUFnQnlILElBRzVCLFNBQVM2NUMsSUFDUEQsRUFBUSxvQkFJVixTQUFTRSxJQUNQRixFQUFRLGlCQUlWLFNBQVNHLEVBQVVDLEdBQ2IzQixHQUFhMkIsRUFBRzVKLE9BQVNpSSxFQUFVakksT0FDckMyRCxFQUFNLDZCQUE4QmlHLEVBQUc1SixLQUFNaUksRUFBVWpJLE1BQ3ZEdUosS0FLSixNQUFNL2IsRUFBVSxLQUNkeWEsRUFBVXRMLGVBQWUsT0FBUXNNLEdBQ2pDaEIsRUFBVXRMLGVBQWUsUUFBUzZNLEdBQ2xDdkIsRUFBVXRMLGVBQWUsUUFBUzhNLEdBQ2xDemlELEtBQUsyMUMsZUFBZSxRQUFTK00sR0FDN0IxaUQsS0FBSzIxQyxlQUFlLFlBQWFnTixJQUduQzFCLEVBQVV4TCxLQUFLLE9BQVF3TSxHQUN2QmhCLEVBQVV4TCxLQUFLLFFBQVMrTSxHQUN4QnZCLEVBQVV4TCxLQUFLLFFBQVNnTixHQUV4QnppRCxLQUFLeTFDLEtBQUssUUFBU2lOLEdBQ25CMWlELEtBQUt5MUMsS0FBSyxZQUFha04sR0FFdkIxQixFQUFVM3ZDLE9BUVp1eEMsU0FTRSxHQVJBbEcsRUFBTSxlQUNOMzhDLEtBQUs2L0MsV0FBYSxPQUNsQmYsRUFBTzJDLHNCQUF3QixjQUFnQnpoRCxLQUFLaWhELFVBQVVqSSxLQUM5RGg1QyxLQUFLbUIsS0FBSyxRQUNWbkIsS0FBS3NpRCxRQUtILFNBQVd0aUQsS0FBSzYvQyxZQUNoQjcvQyxLQUFLK1osS0FBS3FtQyxTQUNWcGdELEtBQUtpaEQsVUFBVW9CLE1BQ2YsQ0FDQTFGLEVBQU0sMkJBQ04sSUFBSWx5QixFQUFJLEVBQ1IsTUFBTXE0QixFQUFJOWlELEtBQUs2Z0QsU0FBUzlnRCxPQUN4QixLQUFPMHFCLEVBQUlxNEIsRUFBR3I0QixJQUNaenFCLEtBQUsraEQsTUFBTS9oRCxLQUFLNmdELFNBQVNwMkIsS0FVL0JvM0IsU0FBU2tCLEdBQ1AsR0FDRSxZQUFjL2lELEtBQUs2L0MsWUFDbkIsU0FBVzcvQyxLQUFLNi9DLFlBQ2hCLFlBQWM3L0MsS0FBSzYvQyxXQVNuQixPQVBBbEQsRUFBTSx1Q0FBd0NvRyxFQUFPM2pDLEtBQU0yakMsRUFBT3BKLE1BRWxFMzVDLEtBQUttQixLQUFLLFNBQVU0aEQsR0FHcEIvaUQsS0FBS21CLEtBQUssYUFFRjRoRCxFQUFPM2pDLE1BQ2IsSUFBSyxPQUNIcGYsS0FBS2dqRCxZQUFZdkosS0FBS3dKLE1BQU1GLEVBQU9wSixPQUNuQyxNQUVGLElBQUssT0FDSDM1QyxLQUFLa2pELG1CQUNMbGpELEtBQUttakQsV0FBVyxRQUNoQm5qRCxLQUFLbUIsS0FBSyxRQUNWbkIsS0FBS21CLEtBQUssUUFDVixNQUVGLElBQUssUUFDSCxNQUFNd1UsRUFBTSxJQUFJalYsTUFBTSxnQkFDdEJpVixFQUFJeXRDLEtBQU9MLEVBQU9wSixLQUNsQjM1QyxLQUFLOGhELFFBQVFuc0MsR0FDYixNQUVGLElBQUssVUFDSDNWLEtBQUttQixLQUFLLE9BQVE0aEQsRUFBT3BKLE1BQ3pCMzVDLEtBQUttQixLQUFLLFVBQVc0aEQsRUFBT3BKLFdBSWhDZ0QsRUFBTSw4Q0FBK0MzOEMsS0FBSzYvQyxZQVU5RG1ELFlBQVlySixHQUNWMzVDLEtBQUttQixLQUFLLFlBQWF3NEMsR0FDdkIzNUMsS0FBS3UzQyxHQUFLb0MsRUFBSzRILElBQ2Z2aEQsS0FBS2loRCxVQUFVdEIsTUFBTTRCLElBQU01SCxFQUFLNEgsSUFDaEN2aEQsS0FBSzZnRCxTQUFXN2dELEtBQUtxakQsZUFBZTFKLEVBQUtrSCxVQUN6QzdnRCxLQUFLOGdELGFBQWVuSCxFQUFLbUgsYUFDekI5Z0QsS0FBSytnRCxZQUFjcEgsRUFBS29ILFlBQ3hCL2dELEtBQUs2aUQsU0FFRCxXQUFhN2lELEtBQUs2L0MsWUFDdEI3L0MsS0FBS2tqRCxtQkFRUEEsbUJBQ0U1OUMsYUFBYXRGLEtBQUtnaEQsa0JBQ2xCaGhELEtBQUtnaEQsaUJBQW1CdDdDLFlBQVcsS0FDakMxRixLQUFLbWhELFFBQVEsa0JBQ1puaEQsS0FBSzhnRCxhQUFlOWdELEtBQUsrZ0QsYUFDeEIvZ0QsS0FBSytaLEtBQUt1cEMsV0FDWnRqRCxLQUFLZ2hELGlCQUFpQnVDLFFBUzFCM0IsVUFDRTVoRCxLQUFLOC9DLFlBQVloWSxPQUFPLEVBQUc5bkMsS0FBSysvQyxlQUtoQy8vQyxLQUFLKy9DLGNBQWdCLEVBRWpCLElBQU0vL0MsS0FBSzgvQyxZQUFZLy9DLE9BQ3pCQyxLQUFLbUIsS0FBSyxTQUVWbkIsS0FBS3NpRCxRQVNUQSxRQUVJLFdBQWF0aUQsS0FBSzYvQyxZQUNsQjcvQyxLQUFLaWhELFVBQVUzWixXQUNkdG5DLEtBQUtvaUQsV0FDTnBpRCxLQUFLOC9DLFlBQVkvL0MsU0FFakI0OEMsRUFBTSxnQ0FBaUMzOEMsS0FBSzgvQyxZQUFZLy9DLFFBQ3hEQyxLQUFLaWhELFVBQVVpQixLQUFLbGlELEtBQUs4L0MsYUFHekI5L0MsS0FBSysvQyxjQUFnQi8vQyxLQUFLOC9DLFlBQVkvL0MsT0FDdENDLEtBQUttQixLQUFLLFVBYWRxaUQsTUFBTXJCLEVBQUtwaEQsRUFBU3cwQyxHQUVsQixPQURBdjFDLEtBQUttakQsV0FBVyxVQUFXaEIsRUFBS3BoRCxFQUFTdzBDLEdBQ2xDdjFDLEtBR1RraUQsS0FBS0MsRUFBS3BoRCxFQUFTdzBDLEdBRWpCLE9BREF2MUMsS0FBS21qRCxXQUFXLFVBQVdoQixFQUFLcGhELEVBQVN3MEMsR0FDbEN2MUMsS0FZVG1qRCxXQUFXL2pDLEVBQU11NkIsRUFBTTU0QyxFQUFTdzBDLEdBVzlCLEdBVkksbUJBQXNCb0UsSUFDeEJwRSxFQUFLb0UsRUFDTEEsT0FBT3g1QyxHQUdMLG1CQUFzQlksSUFDeEJ3MEMsRUFBS3gwQyxFQUNMQSxFQUFVLE1BR1IsWUFBY2YsS0FBSzYvQyxZQUFjLFdBQWE3L0MsS0FBSzYvQyxXQUNyRCxRQUdGOStDLEVBQVVBLEdBQVcsSUFDYjBpRCxVQUFXLElBQVUxaUQsRUFBUTBpRCxTQUVyQyxNQUFNVixFQUFTLENBQ2IzakMsS0FBTUEsRUFDTnU2QixLQUFNQSxFQUNONTRDLFFBQVNBLEdBRVhmLEtBQUttQixLQUFLLGVBQWdCNGhELEdBQzFCL2lELEtBQUs4L0MsWUFBWTd5QyxLQUFLODFDLEdBQ2xCeE4sR0FBSXYxQyxLQUFLeTFDLEtBQUssUUFBU0YsR0FDM0J2MUMsS0FBS3NpRCxRQVFQNXdDLFFBQ0UsTUFBTUEsRUFBUSxLQUNaMVIsS0FBS21oRCxRQUFRLGdCQUNieEUsRUFBTSwrQ0FDTjM4QyxLQUFLaWhELFVBQVV2dkMsU0FHWGd5QyxFQUFrQixLQUN0QjFqRCxLQUFLMjFDLGVBQWUsVUFBVytOLEdBQy9CMWpELEtBQUsyMUMsZUFBZSxlQUFnQitOLEdBQ3BDaHlDLEtBR0lpeUMsRUFBaUIsS0FFckIzakQsS0FBS3kxQyxLQUFLLFVBQVdpTyxHQUNyQjFqRCxLQUFLeTFDLEtBQUssZUFBZ0JpTyxJQXFCNUIsTUFsQkksWUFBYzFqRCxLQUFLNi9DLFlBQWMsU0FBVzcvQyxLQUFLNi9DLGFBQ25ENy9DLEtBQUs2L0MsV0FBYSxVQUVkNy9DLEtBQUs4L0MsWUFBWS8vQyxPQUNuQkMsS0FBS3kxQyxLQUFLLFNBQVMsS0FDYnoxQyxLQUFLb2lELFVBQ1B1QixJQUVBanlDLE9BR0sxUixLQUFLb2lELFVBQ2R1QixJQUVBanlDLEtBSUcxUixLQVFUOGhELFFBQVFuc0MsR0FDTmduQyxFQUFNLGtCQUFtQmhuQyxHQUN6Qm1wQyxFQUFPMkMsdUJBQXdCLEVBQy9CemhELEtBQUttQixLQUFLLFFBQVN3VSxHQUNuQjNWLEtBQUttaEQsUUFBUSxrQkFBbUJ4ckMsR0FRbEN3ckMsUUFBUXlDLEVBQVE1N0MsR0FFWixZQUFjaEksS0FBSzYvQyxZQUNuQixTQUFXNy9DLEtBQUs2L0MsWUFDaEIsWUFBYzcvQyxLQUFLNi9DLGFBRW5CbEQsRUFBTSxpQ0FBa0NpSCxHQUd4Q3QrQyxhQUFhdEYsS0FBSzZqRCxtQkFDbEJ2K0MsYUFBYXRGLEtBQUtnaEQsa0JBR2xCaGhELEtBQUtpaEQsVUFBVXJMLG1CQUFtQixTQUdsQzUxQyxLQUFLaWhELFVBQVV2dkMsUUFHZjFSLEtBQUtpaEQsVUFBVXJMLHFCQUVvQixtQkFBeEIxMEMscUJBQ1RBLG9CQUFvQixVQUFXbEIsS0FBS2toRCxzQkFBc0IsR0FJNURsaEQsS0FBSzYvQyxXQUFhLFNBR2xCNy9DLEtBQUt1M0MsR0FBSyxLQUdWdjNDLEtBQUttQixLQUFLLFFBQVN5aUQsRUFBUTU3QyxHQUkzQmhJLEtBQUs4L0MsWUFBYyxHQUNuQjkvQyxLQUFLKy9DLGNBQWdCLEdBV3pCc0QsZUFBZXhDLEdBQ2IsTUFBTWlELEVBQW1CLEdBQ3pCLElBQUlyNUIsRUFBSSxFQUNSLE1BQU1veUIsRUFBSWdFLEVBQVM5Z0QsT0FDbkIsS0FBTzBxQixFQUFJb3lCLEVBQUdweUIsS0FDUHpxQixLQUFLay9DLFdBQVcvekMsUUFBUTAxQyxFQUFTcDJCLEtBQ3BDcTVCLEVBQWlCNzJDLEtBQUs0ekMsRUFBU3AyQixJQUVuQyxPQUFPcTVCLEdBSVhoRixFQUFPMkMsdUJBQXdCLEVBUS9CM0MsRUFBT0UsU0FBV0csRUFBT0gsU0FZekJ0TCxFQUFPQyxRQUFVbUwsa0JDMXFCakIsTUFBTUssRUFBUyxFQUFRLE1BQ2pCL0osRUFBVSxFQUFRLE1BQ2xCdUgsRUFBUSxFQUFRLEtBQVIsQ0FBaUIsOEJBb0gvQmpKLEVBQU9DLFFBbEhQLGNBQXdCeUIsRUFPdEIyRCxZQUFZaC9CLEdBQ1Z1bEMsUUFFQXQvQyxLQUFLK1osS0FBT0EsRUFDWi9aLEtBQUsyL0MsTUFBUTVsQyxFQUFLNGxDLE1BQ2xCMy9DLEtBQUs2L0MsV0FBYSxHQUNsQjcvQyxLQUFLd2hELE9BQVN6bkMsRUFBS3luQyxPQVVyQk0sUUFBUUssRUFBS242QyxHQUNYLE1BQU0yTixFQUFNLElBQUlqVixNQUFNeWhELEdBSXRCLE9BSEF4c0MsRUFBSXlKLEtBQU8saUJBQ1h6SixFQUFJb3VDLFlBQWMvN0MsRUFDbEJoSSxLQUFLbUIsS0FBSyxRQUFTd1UsR0FDWjNWLEtBUVRzUixPQU1FLE1BTEksV0FBYXRSLEtBQUs2L0MsWUFBYyxLQUFPNy9DLEtBQUs2L0MsYUFDOUM3L0MsS0FBSzYvQyxXQUFhLFVBQ2xCNy9DLEtBQUtna0QsVUFHQWhrRCxLQVFUMFIsUUFNRSxNQUxJLFlBQWMxUixLQUFLNi9DLFlBQWMsU0FBVzcvQyxLQUFLNi9DLGFBQ25ENy9DLEtBQUtpa0QsVUFDTGprRCxLQUFLbWhELFdBR0FuaEQsS0FTVGtpRCxLQUFLZ0MsR0FDQyxTQUFXbGtELEtBQUs2L0MsV0FDbEI3L0MsS0FBS3dqRCxNQUFNVSxHQUdYdkgsRUFBTSw2Q0FTVmtHLFNBQ0U3aUQsS0FBSzYvQyxXQUFhLE9BQ2xCNy9DLEtBQUtzbkMsVUFBVyxFQUNoQnRuQyxLQUFLbUIsS0FBSyxRQVNaZ2pELE9BQU94SyxHQUNMLE1BQU1vSixFQUFTNUQsRUFBT2lGLGFBQWF6SyxFQUFNMzVDLEtBQUt3aEQsT0FBTzZDLFlBQ3JEcmtELEtBQUs2aEQsU0FBU2tCLEdBTWhCbEIsU0FBU2tCLEdBQ1AvaUQsS0FBS21CLEtBQUssU0FBVTRoRCxHQVF0QjVCLFVBQ0VuaEQsS0FBSzYvQyxXQUFhLFNBQ2xCNy9DLEtBQUttQixLQUFLLDJCQ2xIZCxNQUFNbWpELEVBQWlCLEVBQVEsTUFDekJDLEVBQU0sRUFBUSxNQUNkQyxFQUFRLEVBQVEsTUFDaEJDLEVBQVksRUFBUSxNQUUxQjlRLEVBQVErUSxRQVVSLFNBQWlCM3FDLEdBQ2YsSUFBSTRxQyxFQUNBQyxHQUFLLEVBQ0xDLEdBQUssRUFDVCxNQUFNeEUsR0FBUSxJQUFVdG1DLEVBQUtzbUMsTUFFN0IsR0FBd0Isb0JBQWJULFNBQTBCLENBQ25DLE1BQU1rRixFQUFRLFdBQWFsRixTQUFTWixTQUNwQyxJQUFJVSxFQUFPRSxTQUFTRixLQUdmQSxJQUNIQSxFQUFPb0YsRUFBUSxJQUFNLElBR3ZCRixFQUFLN3FDLEVBQUt3bEMsV0FBYUssU0FBU0wsVUFBWUcsSUFBUzNsQyxFQUFLMmxDLEtBQzFEbUYsRUFBSzlxQyxFQUFLMGxDLFNBQVdxRixFQU92QixHQUpBL3FDLEVBQUtnckMsUUFBVUgsRUFDZjdxQyxFQUFLaXJDLFFBQVVILEVBQ2ZGLEVBQU0sSUFBSUwsRUFBZXZxQyxHQUVyQixTQUFVNHFDLElBQVE1cUMsRUFBS2tyQyxXQUN6QixPQUFPLElBQUlWLEVBQUl4cUMsR0FFZixJQUFLc21DLEVBQU8sTUFBTSxJQUFJMy9DLE1BQU0sa0JBQzVCLE9BQU8sSUFBSThqRCxFQUFNenFDLElBcENyQjQ1QixFQUFROFEsVUFBWUEsa0JDTnBCLE1BQU1TLEVBQVUsRUFBUSxNQUNsQkMsRUFBYSxFQUFRLE1BRXJCQyxFQUFXLE1BQ1hDLEVBQWtCLE9BTXhCLElBQUl2UCxFQXdMSnBDLEVBQU9DLFFBdExQLGNBQTJCdVIsRUFPekJuTSxZQUFZaC9CLEdBQ1Z1bEMsTUFBTXZsQyxHQUVOL1osS0FBSzIvQyxNQUFRMy9DLEtBQUsyL0MsT0FBUyxHQUl0QjdKLElBRUhBLEVBQVlxUCxFQUFXRyxPQUFTSCxFQUFXRyxRQUFVLElBSXZEdGxELEtBQUs2bEIsTUFBUWl3QixFQUFVLzFDLE9BR3ZCKzFDLEVBQVU3b0MsS0FBS2pOLEtBQUtta0QsT0FBTzl2QyxLQUFLclUsT0FHaENBLEtBQUsyL0MsTUFBTTlDLEVBQUk3OEMsS0FBSzZsQixNQU10QixxQkFDRSxPQUFPLEVBUVRvK0IsVUFDTWprRCxLQUFLdWxELFNBRVB2bEQsS0FBS3VsRCxPQUFPL0MsUUFBVSxPQUN0QnhpRCxLQUFLdWxELE9BQU9yK0MsV0FBV3FELFlBQVl2SyxLQUFLdWxELFFBQ3hDdmxELEtBQUt1bEQsT0FBUyxNQUdadmxELEtBQUt3bEQsT0FDUHhsRCxLQUFLd2xELEtBQUt0K0MsV0FBV3FELFlBQVl2SyxLQUFLd2xELE1BQ3RDeGxELEtBQUt3bEQsS0FBTyxLQUNaeGxELEtBQUt5bEQsT0FBUyxNQUdoQm5HLE1BQU0yRSxVQVFSeUIsU0FDRSxNQUFNSCxFQUFTdG1ELFNBQVNDLGNBQWMsVUFFbENjLEtBQUt1bEQsU0FDUHZsRCxLQUFLdWxELE9BQU9yK0MsV0FBV3FELFlBQVl2SyxLQUFLdWxELFFBQ3hDdmxELEtBQUt1bEQsT0FBUyxNQUdoQkEsRUFBT0ksT0FBUSxFQUNmSixFQUFPSyxJQUFNNWxELEtBQUsrK0MsTUFDbEJ3RyxFQUFPL0MsUUFBVWpsQyxJQUNmdmQsS0FBSzhoRCxRQUFRLG1CQUFvQnZrQyxJQUduQyxNQUFNc29DLEVBQVc1bUQsU0FBUzZtRCxxQkFBcUIsVUFBVSxHQUNyREQsRUFDRkEsRUFBUzMrQyxXQUFXMkQsYUFBYTA2QyxFQUFRTSxJQUV4QzVtRCxTQUFTOG1ELE1BQVE5bUQsU0FBU3dWLE1BQU0xSixZQUFZdzZDLEdBRS9DdmxELEtBQUt1bEQsT0FBU0EsRUFHWixvQkFBdUI1SixXQUFhLFNBQVMxQyxLQUFLMEMsVUFBVUMsWUFHNURsMkMsWUFBVyxXQUNULE1BQU0rL0MsRUFBU3htRCxTQUFTQyxjQUFjLFVBQ3RDRCxTQUFTd1YsS0FBSzFKLFlBQVkwNkMsR0FDMUJ4bUQsU0FBU3dWLEtBQUtsSyxZQUFZazdDLEtBQ3pCLEtBV1BPLFFBQVFyTSxFQUFNcEUsR0FDWixJQUFJa1EsRUFFSixJQUFLemxELEtBQUt3bEQsS0FBTSxDQUNkLE1BQU1BLEVBQU92bUQsU0FBU0MsY0FBYyxRQUM5QittRCxFQUFPaG5ELFNBQVNDLGNBQWMsWUFDOUJxNEMsRUFBTXYzQyxLQUFLa21ELFNBQVcsY0FBZ0JsbUQsS0FBSzZsQixNQUVqRDIvQixFQUFLMStDLFVBQVksV0FDakIwK0MsRUFBS2xtRCxNQUFNeXlCLFNBQVcsV0FDdEJ5ekIsRUFBS2xtRCxNQUFNMmQsSUFBTSxVQUNqQnVvQyxFQUFLbG1ELE1BQU0wZCxLQUFPLFVBQ2xCd29DLEVBQUs1eUMsT0FBUzJrQyxFQUNkaU8sRUFBS1csT0FBUyxPQUNkWCxFQUFLbitDLGFBQWEsaUJBQWtCLFNBQ3BDNCtDLEVBQUtqTixLQUFPLElBQ1p3TSxFQUFLejZDLFlBQVlrN0MsR0FDakJobkQsU0FBU3dWLEtBQUsxSixZQUFZeTZDLEdBRTFCeGxELEtBQUt3bEQsS0FBT0EsRUFDWnhsRCxLQUFLaW1ELEtBQU9BLEVBS2QsU0FBU0csSUFDUEMsSUFDQTlRLElBSkZ2MUMsS0FBS3dsRCxLQUFLN3pDLE9BQVMzUixLQUFLKytDLE1BT3hCLE1BQU1zSCxFQUFhLEtBQ2pCLEdBQUlybUQsS0FBS3lsRCxPQUNQLElBQ0V6bEQsS0FBS3dsRCxLQUFLajdDLFlBQVl2SyxLQUFLeWxELFFBQzNCLE1BQU9sb0MsR0FDUHZkLEtBQUs4aEQsUUFBUSxxQ0FBc0N2a0MsR0FJdkQsSUFFRSxNQUFNK29DLEVBQU8sb0NBQXNDdG1ELEtBQUtrbUQsU0FBVyxLQUNuRVQsRUFBU3htRCxTQUFTQyxjQUFjb25ELEdBQ2hDLE1BQU8vb0MsR0FDUGtvQyxFQUFTeG1ELFNBQVNDLGNBQWMsVUFDaEN1bUQsRUFBT3pNLEtBQU9oNUMsS0FBS2ttRCxTQUNuQlQsRUFBT0csSUFBTSxlQUdmSCxFQUFPbE8sR0FBS3YzQyxLQUFLa21ELFNBRWpCbG1ELEtBQUt3bEQsS0FBS3o2QyxZQUFZMDZDLEdBQ3RCemxELEtBQUt5bEQsT0FBU0EsR0FHaEJZLElBSUExTSxFQUFPQSxFQUFLVyxRQUFRK0ssRUFBaUIsUUFDckNybEQsS0FBS2ltRCxLQUFLei9DLE1BQVFtekMsRUFBS1csUUFBUThLLEVBQVUsT0FFekMsSUFDRXBsRCxLQUFLd2xELEtBQUtlLFNBQ1YsTUFBT2hwQyxJQUVMdmQsS0FBS3lsRCxPQUFPZSxZQUNkeG1ELEtBQUt5bEQsT0FBT2dCLG1CQUFxQixLQUNBLGFBQTNCem1ELEtBQUt5bEQsT0FBTzVGLFlBQ2R1RyxLQUlKcG1ELEtBQUt5bEQsT0FBT2lCLE9BQVNOLG9CQzNMM0IsTUFBTTlCLEVBQWlCLEVBQVEsTUFDekJZLEVBQVUsRUFBUSxNQUNsQjlQLEVBQVUsRUFBUSxPQUNsQixLQUFFdVIsR0FBUyxFQUFRLE1BQ25CeEIsRUFBYSxFQUFRLE1BRXJCeEksRUFBUSxFQUFRLEtBQVIsQ0FBaUIsZ0NBTS9CLFNBQVNpSyxLQUVULE1BQU1DLEVBRUcsTUFESyxJQUFJdkMsRUFBZSxDQUFFUyxTQUFTLElBQ3ZCK0IsYUFnRnJCLE1BQU1DLFVBQWdCM1IsRUFPcEIyRCxZQUFZZ0csRUFBS2hsQyxHQUNmdWxDLFFBQ0F0L0MsS0FBSytaLEtBQU9BLEVBRVovWixLQUFLbW1ELE9BQVNwc0MsRUFBS29zQyxRQUFVLE1BQzdCbm1ELEtBQUsrK0MsSUFBTUEsRUFDWC8rQyxLQUFLMmxELE9BQVEsSUFBVTVyQyxFQUFLNHJDLE1BQzVCM2xELEtBQUsyNUMsVUFBT3g1QyxJQUFjNFosRUFBSzQvQixLQUFPNS9CLEVBQUs0L0IsS0FBTyxLQUVsRDM1QyxLQUFLZ25ELFNBUVBBLFNBQ0UsTUFBTWp0QyxFQUFPNHNDLEVBQ1gzbUQsS0FBSytaLEtBQ0wsUUFDQSxhQUNBLE1BQ0EsTUFDQSxhQUNBLE9BQ0EsS0FDQSxVQUNBLHFCQUNBLGFBRUZBLEVBQUtnckMsVUFBWS9rRCxLQUFLK1osS0FBSzZxQyxHQUMzQjdxQyxFQUFLaXJDLFVBQVlobEQsS0FBSytaLEtBQUs4cUMsR0FFM0IsTUFBTUYsRUFBTzNrRCxLQUFLMmtELElBQU0sSUFBSUwsRUFBZXZxQyxHQUUzQyxJQUNFNGlDLEVBQU0sa0JBQW1CMzhDLEtBQUttbUQsT0FBUW5tRCxLQUFLKytDLEtBQzNDNEYsRUFBSXJ6QyxLQUFLdFIsS0FBS21tRCxPQUFRbm1ELEtBQUsrK0MsSUFBSy8rQyxLQUFLMmxELE9BQ3JDLElBQ0UsR0FBSTNsRCxLQUFLK1osS0FBS2t0QyxhQUFjLENBQzFCdEMsRUFBSXVDLHVCQUF5QnZDLEVBQUl1Qyx1QkFBc0IsR0FDdkQsSUFBSyxJQUFJejhCLEtBQUt6cUIsS0FBSytaLEtBQUtrdEMsYUFDbEJqbkQsS0FBSytaLEtBQUtrdEMsYUFBYTVGLGVBQWU1MkIsSUFDeENrNkIsRUFBSXdDLGlCQUFpQjE4QixFQUFHenFCLEtBQUsrWixLQUFLa3RDLGFBQWF4OEIsS0FJckQsTUFBT2xOLElBRVQsR0FBSSxTQUFXdmQsS0FBS21tRCxPQUNsQixJQUNFeEIsRUFBSXdDLGlCQUFpQixlQUFnQiw0QkFDckMsTUFBTzVwQyxJQUdYLElBQ0VvbkMsRUFBSXdDLGlCQUFpQixTQUFVLE9BQy9CLE1BQU81cEMsSUFHTCxvQkFBcUJvbkMsSUFDdkJBLEVBQUl4RSxnQkFBa0JuZ0QsS0FBSytaLEtBQUtvbUMsaUJBRzlCbmdELEtBQUsrWixLQUFLcXRDLGlCQUNaekMsRUFBSTBDLFFBQVVybkQsS0FBSytaLEtBQUtxdEMsZ0JBR3RCcG5ELEtBQUtzbkQsVUFDUDNDLEVBQUkrQixPQUFTLEtBQ1gxbUQsS0FBS3VuRCxVQUVQNUMsRUFBSW5DLFFBQVUsS0FDWnhpRCxLQUFLOGhELFFBQVE2QyxFQUFJNkMsZ0JBR25CN0MsRUFBSThCLG1CQUFxQixLQUNuQixJQUFNOUIsRUFBSTlFLGFBQ1YsTUFBUThFLEVBQUk4QyxRQUFVLE9BQVM5QyxFQUFJOEMsT0FDckN6bkQsS0FBS3VuRCxTQUlMN2hELFlBQVcsS0FDVDFGLEtBQUs4aEQsUUFBOEIsaUJBQWY2QyxFQUFJOEMsT0FBc0I5QyxFQUFJOEMsT0FBUyxLQUMxRCxLQUtUOUssRUFBTSxjQUFlMzhDLEtBQUsyNUMsTUFDMUJnTCxFQUFJekMsS0FBS2xpRCxLQUFLMjVDLE1BQ2QsTUFBT3A4QixHQU9QLFlBSEE3WCxZQUFXLEtBQ1QxRixLQUFLOGhELFFBQVF2a0MsS0FDWixHQUltQixvQkFBYnRlLFdBQ1RlLEtBQUs2bEIsTUFBUWtoQyxFQUFRVyxnQkFDckJYLEVBQVFZLFNBQVMzbkQsS0FBSzZsQixPQUFTN2xCLE1BU25DNG5ELFlBQ0U1bkQsS0FBS21CLEtBQUssV0FDVm5CLEtBQUt3bUMsVUFRUDJkLE9BQU94SyxHQUNMMzVDLEtBQUttQixLQUFLLE9BQVF3NEMsR0FDbEIzNUMsS0FBSzRuRCxZQVFQOUYsUUFBUW5zQyxHQUNOM1YsS0FBS21CLEtBQUssUUFBU3dVLEdBQ25CM1YsS0FBS3dtQyxTQUFRLEdBUWZBLFFBQVFxaEIsR0FDTixRQUFJLElBQXVCN25ELEtBQUsya0QsS0FBTyxPQUFTM2tELEtBQUsya0QsSUFBckQsQ0FVQSxHQU5JM2tELEtBQUtzbkQsU0FDUHRuRCxLQUFLMmtELElBQUkrQixPQUFTMW1ELEtBQUsya0QsSUFBSW5DLFFBQVVvRSxFQUVyQzVtRCxLQUFLMmtELElBQUk4QixtQkFBcUJHLEVBRzVCaUIsRUFDRixJQUNFN25ELEtBQUsya0QsSUFBSW1ELFFBQ1QsTUFBT3ZxQyxJQUdhLG9CQUFidGUsaUJBQ0Y4bkQsRUFBUVksU0FBUzNuRCxLQUFLNmxCLE9BRy9CN2xCLEtBQUsya0QsSUFBTSxNQVFiNEMsU0FDRSxNQUFNNU4sRUFBTzM1QyxLQUFLMmtELElBQUk2QyxhQUNULE9BQVQ3TixHQUNGMzVDLEtBQUtta0QsT0FBT3hLLEdBU2hCMk4sU0FDRSxNQUFpQyxvQkFBbkJTLGlCQUFtQy9uRCxLQUFLNmtELElBQU03a0QsS0FBS2dvRCxXQVFuRUYsUUFDRTluRCxLQUFLd21DLFdBc0JULFNBQVN5aEIsSUFDUCxJQUFLLElBQUl4OUIsS0FBS3M4QixFQUFRWSxTQUNoQlosRUFBUVksU0FBU3RHLGVBQWU1MkIsSUFDbENzOEIsRUFBUVksU0FBU2w5QixHQUFHcTlCLFFBZjFCZixFQUFRVyxjQUFnQixFQUN4QlgsRUFBUVksU0FBVyxHQUVLLG9CQUFiMW9ELFdBQ2tCLG1CQUFoQnVuRCxZQUNUQSxZQUFZLFdBQVl5QixHQUNhLG1CQUFyQmpuRCxrQkFFaEJBLGlCQUR5QixlQUFnQm1rRCxFQUFhLFdBQWEsU0FDaEM4QyxHQUFlLElBWXREdlUsRUFBT0MsUUFyVFAsY0FBa0J1UixFQU9oQm5NLFlBQVloL0IsR0FHVixHQUZBdWxDLE1BQU12bEMsR0FFa0Isb0JBQWI2bEMsU0FBMEIsQ0FDbkMsTUFBTWtGLEVBQVEsV0FBYWxGLFNBQVNaLFNBQ3BDLElBQUlVLEVBQU9FLFNBQVNGLEtBR2ZBLElBQ0hBLEVBQU9vRixFQUFRLElBQU0sSUFHdkI5a0QsS0FBSzRrRCxHQUNrQixvQkFBYmhGLFVBQ043bEMsRUFBS3dsQyxXQUFhSyxTQUFTTCxVQUM3QkcsSUFBUzNsQyxFQUFLMmxDLEtBQ2hCMS9DLEtBQUs2a0QsR0FBSzlxQyxFQUFLMGxDLFNBQVdxRixFQUs1QixNQUFNb0QsRUFBY251QyxHQUFRQSxFQUFLbXVDLFlBQ2pDbG9ELEtBQUttb0QsZUFBaUJ0QixJQUFZcUIsRUFTcEMvN0MsUUFBUTROLEVBQU8sSUFFYixPQURBaFksT0FBT2krQyxPQUFPam1DLEVBQU0sQ0FBRTZxQyxHQUFJNWtELEtBQUs0a0QsR0FBSUMsR0FBSTdrRCxLQUFLNmtELElBQU03a0QsS0FBSytaLE1BQ2hELElBQUlndEMsRUFBUS9tRCxLQUFLKytDLE1BQU9obEMsR0FVakNpc0MsUUFBUXJNLEVBQU1wRSxHQUNaLE1BQU02UyxFQUFNcG9ELEtBQUttTSxRQUFRLENBQ3ZCZzZDLE9BQVEsT0FDUnhNLEtBQU1BLElBRVJ5TyxFQUFJOVMsR0FBRyxVQUFXQyxHQUNsQjZTLEVBQUk5UyxHQUFHLFNBQVMzL0IsSUFDZDNWLEtBQUs4aEQsUUFBUSxpQkFBa0Juc0MsTUFTbkMrdkMsU0FDRS9JLEVBQU0sWUFDTixNQUFNeUwsRUFBTXBvRCxLQUFLbU0sVUFDakJpOEMsRUFBSTlTLEdBQUcsT0FBUXQxQyxLQUFLbWtELE9BQU85dkMsS0FBS3JVLE9BQ2hDb29ELEVBQUk5UyxHQUFHLFNBQVMzL0IsSUFDZDNWLEtBQUs4aEQsUUFBUSxpQkFBa0Juc0MsTUFFakMzVixLQUFLcW9ELFFBQVVELElBNk9uQjFVLEVBQU9DLFFBQVFvVCxRQUFVQSxrQkMzVXpCLE1BQU05SCxFQUFZLEVBQVEsTUFDcEJJLEVBQVUsRUFBUSxNQUNsQkYsRUFBUyxFQUFRLE1BQ2pCbUosRUFBUSxFQUFRLE1BRWhCM0wsRUFBUSxFQUFRLEtBQVIsQ0FBaUIsNEJBdU0vQmpKLEVBQU9DLFFBck1QLGNBQXNCc0wsRUFJcEIsV0FDRSxNQUFPLFVBU1QrRSxTQUNFaGtELEtBQUt1b0QsT0FTUGxHLE1BQU1tRyxHQUNKeG9ELEtBQUs2L0MsV0FBYSxVQUVsQixNQUFNd0MsRUFBUSxLQUNaMUYsRUFBTSxVQUNOMzhDLEtBQUs2L0MsV0FBYSxTQUNsQjJJLEtBR0YsR0FBSXhvRCxLQUFLMGtELFVBQVkxa0QsS0FBS3NuQyxTQUFVLENBQ2xDLElBQUltaEIsRUFBUSxFQUVSem9ELEtBQUswa0QsVUFDUC9ILEVBQU0sK0NBQ044TCxJQUNBem9ELEtBQUt5MUMsS0FBSyxnQkFBZ0IsV0FDeEJrSCxFQUFNLGdDQUNKOEwsR0FBU3BHLFFBSVZyaUQsS0FBS3NuQyxXQUNScVYsRUFBTSwrQ0FDTjhMLElBQ0F6b0QsS0FBS3kxQyxLQUFLLFNBQVMsV0FDakJrSCxFQUFNLGdDQUNKOEwsR0FBU3BHLGFBSWZBLElBU0prRyxPQUNFNUwsRUFBTSxXQUNOMzhDLEtBQUswa0QsU0FBVSxFQUNmMWtELEtBQUswbEQsU0FDTDFsRCxLQUFLbUIsS0FBSyxRQVFaZ2pELE9BQU94SyxHQUNMZ0QsRUFBTSxzQkFBdUJoRCxHQWtCN0J3RixFQUFPdUosY0FBYy9PLEVBQU0zNUMsS0FBS3doRCxPQUFPNkMsWUFBWWo2QyxTQWpCbEMyNEMsSUFPZixHQUxJLFlBQWMvaUQsS0FBSzYvQyxZQUE4QixTQUFoQmtELEVBQU8zakMsTUFDMUNwZixLQUFLNmlELFNBSUgsVUFBWUUsRUFBTzNqQyxLQUVyQixPQURBcGYsS0FBS21oRCxXQUNFLEVBSVRuaEQsS0FBSzZoRCxTQUFTa0IsTUFPWixXQUFhL2lELEtBQUs2L0MsYUFFcEI3L0MsS0FBSzBrRCxTQUFVLEVBQ2Yxa0QsS0FBS21CLEtBQUssZ0JBRU4sU0FBV25CLEtBQUs2L0MsV0FDbEI3L0MsS0FBS3VvRCxPQUVMNUwsRUFBTSx1Q0FBd0MzOEMsS0FBSzYvQyxhQVV6RG9FLFVBQ0UsTUFBTXZ5QyxFQUFRLEtBQ1ppckMsRUFBTSx3QkFDTjM4QyxLQUFLd2pELE1BQU0sQ0FBQyxDQUFFcGtDLEtBQU0sWUFHbEIsU0FBV3BmLEtBQUs2L0MsWUFDbEJsRCxFQUFNLDRCQUNOanJDLE1BSUFpckMsRUFBTSx3Q0FDTjM4QyxLQUFLeTFDLEtBQUssT0FBUS9qQyxJQVd0Qjh4QyxNQUFNVSxHQUNKbGtELEtBQUtzbkMsVUFBVyxFQUVoQjZYLEVBQU93SixjQUFjekUsR0FBU3ZLLElBQzVCMzVDLEtBQUtnbUQsUUFBUXJNLEdBQU0sS0FDakIzNUMsS0FBS3NuQyxVQUFXLEVBQ2hCdG5DLEtBQUttQixLQUFLLGVBVWhCNDlDLE1BQ0UsSUFBSVksRUFBUTMvQyxLQUFLMi9DLE9BQVMsR0FDMUIsTUFBTWlKLEVBQVM1b0QsS0FBSytaLEtBQUswbEMsT0FBUyxRQUFVLE9BQzVDLElBQUlDLEVBQU8sR0E0QlgsT0F6QkksSUFBVTEvQyxLQUFLK1osS0FBSzh1QyxvQkFDdEJsSixFQUFNMy9DLEtBQUsrWixLQUFLdW1DLGdCQUFrQmdJLEtBRy9CdG9ELEtBQUttb0QsZ0JBQW1CeEksRUFBTTRCLE1BQ2pDNUIsRUFBTW1KLElBQU0sR0FHZG5KLEVBQVFOLEVBQVFoTCxPQUFPc0wsR0FJckIzL0MsS0FBSytaLEtBQUsybEMsT0FDUixVQUFZa0osR0FBcUMsTUFBM0JyTCxPQUFPdjlDLEtBQUsrWixLQUFLMmxDLE9BQ3RDLFNBQVdrSixHQUFxQyxLQUEzQnJMLE9BQU92OUMsS0FBSytaLEtBQUsybEMsU0FFekNBLEVBQU8sSUFBTTEvQyxLQUFLK1osS0FBSzJsQyxNQUlyQkMsRUFBTTUvQyxTQUNSNC9DLEVBQVEsSUFBTUEsR0FLZGlKLEVBQ0EsUUFIZ0QsSUFBckM1b0QsS0FBSytaLEtBQUt3bEMsU0FBU3AwQyxRQUFRLEtBSTlCLElBQU1uTCxLQUFLK1osS0FBS3dsQyxTQUFXLElBQU12L0MsS0FBSytaLEtBQUt3bEMsVUFDbkRHLEVBQ0ExL0MsS0FBSytaLEtBQUtrbUMsS0FDVk4sbUJDdk1OLE1BQU13RixFQUFhLEVBQVEsTUFDckI0RCxFQUVpQixtQkFBWkMsU0FBcUQsbUJBQXBCQSxRQUFRQyxRQUV6Q3BULEdBQU1tVCxRQUFRQyxVQUFVQyxLQUFLclQsR0FFN0JBLEdBQU1ud0MsV0FBV213QyxFQUFJLEdBSWhDbkMsRUFBT0MsUUFBVSxDQUNmd1YsVUFBV2hFLEVBQVdnRSxXQUFhaEUsRUFBV2lFLGFBQzlDQyx1QkFBdUIsRUFDdkJDLGtCQUFtQixjQUNuQlAsU0FBQUEsbUJDZkYsTUFBTTlKLEVBQVksRUFBUSxNQUNwQkUsRUFBUyxFQUFRLE1BQ2pCRSxFQUFVLEVBQVEsTUFDbEJpSixFQUFRLEVBQVEsT0FDaEIsS0FBRTNCLEdBQVMsRUFBUSxPQUNuQixVQUNKd0MsRUFBUyxzQkFDVEUsRUFBcUIsa0JBQ3JCQyxFQUFpQixTQUNqQlAsR0FDRSxFQUFRLEtBRU5wTSxFQUFRLEVBQVEsS0FBUixDQUFpQiw4QkFHekI0TSxFQUNpQixvQkFBZDVOLFdBQ3NCLGlCQUF0QkEsVUFBVTZOLFNBQ21CLGdCQUFwQzdOLFVBQVU2TixRQUFROWpDLGNBRXBCLE1BQU0rakMsVUFBV3hLLEVBT2ZsRyxZQUFZaC9CLEdBQ1Z1bEMsTUFBTXZsQyxHQUVOL1osS0FBS21vRCxnQkFBa0JwdUMsRUFBS211QyxZQVE5QixXQUNFLE1BQU8sWUFRVGxFLFNBQ0UsSUFBS2hrRCxLQUFLMHBELFFBRVIsT0FHRixNQUFNM0ssRUFBTS8rQyxLQUFLKytDLE1BQ1g0SyxFQUFZM3BELEtBQUsrWixLQUFLNHZDLFVBR3RCNXZDLEVBQU93dkMsRUFDVCxHQUNBNUMsRUFDRTNtRCxLQUFLK1osS0FDTCxRQUNBLG9CQUNBLE1BQ0EsTUFDQSxhQUNBLE9BQ0EsS0FDQSxVQUNBLHFCQUNBLGVBQ0Esa0JBQ0EsU0FDQSxhQUNBLFNBQ0EsdUJBR0YvWixLQUFLK1osS0FBS2t0QyxlQUNabHRDLEVBQUs2dkMsUUFBVTVwRCxLQUFLK1osS0FBS2t0QyxjQUczQixJQUNFam5ELEtBQUs2cEQsR0FDSFIsSUFBMEJFLEVBQ3RCSSxFQUNFLElBQUlSLEVBQVVwSyxFQUFLNEssR0FDbkIsSUFBSVIsRUFBVXBLLEdBQ2hCLElBQUlvSyxFQUFVcEssRUFBSzRLLEVBQVc1dkMsR0FDcEMsTUFBT3BFLEdBQ1AsT0FBTzNWLEtBQUttQixLQUFLLFFBQVN3VSxHQUc1QjNWLEtBQUs2cEQsR0FBR3hGLFdBQWFya0QsS0FBS3doRCxPQUFPNkMsWUFBY2lGLEVBRS9DdHBELEtBQUs4cEQsb0JBUVBBLG9CQUNFOXBELEtBQUs2cEQsR0FBR0UsT0FBUyxLQUNYL3BELEtBQUsrWixLQUFLdXBDLFdBQ1p0akQsS0FBSzZwRCxHQUFHRyxRQUFRekcsUUFFbEJ2akQsS0FBSzZpRCxVQUVQN2lELEtBQUs2cEQsR0FBR25ILFFBQVUxaUQsS0FBS21oRCxRQUFROXNDLEtBQUtyVSxNQUNwQ0EsS0FBSzZwRCxHQUFHSSxVQUFZQyxHQUFNbHFELEtBQUtta0QsT0FBTytGLEVBQUd2USxNQUN6QzM1QyxLQUFLNnBELEdBQUdySCxRQUFVamxDLEdBQUt2ZCxLQUFLOGhELFFBQVEsa0JBQW1CdmtDLEdBU3pEaW1DLE1BQU1VLEdBQ0psa0QsS0FBS3NuQyxVQUFXLEVBSWhCLElBQUssSUFBSTdjLEVBQUksRUFBR0EsRUFBSXk1QixFQUFRbmtELE9BQVEwcUIsSUFBSyxDQUN2QyxNQUFNczRCLEVBQVNtQixFQUFRejVCLEdBQ2pCMC9CLEVBQWExL0IsSUFBTXk1QixFQUFRbmtELE9BQVMsRUFFMUNvL0MsRUFBT2lMLGFBQWFySCxFQUFRL2lELEtBQUttb0QsZ0JBQWdCeE8sSUFFL0MsTUFBTTUvQixFQUFPLElBQ1JzdkMsSUFDQ3RHLEVBQU9oaUQsVUFDVGdaLEVBQUswcEMsU0FBV1YsRUFBT2hpRCxRQUFRMGlELFVBRzdCempELEtBQUsrWixLQUFLMG1DLHFCQUVWLGlCQUFvQjlHLEVBQU8wUSxPQUFPQyxXQUFXM1EsR0FBUUEsRUFBSzU1QyxRQUNsREMsS0FBSytaLEtBQUswbUMsa0JBQWtCQyxZQUNwQzNtQyxFQUFLMHBDLFVBQVcsR0FRdEIsSUFDTTRGLEVBRUZycEQsS0FBSzZwRCxHQUFHM0gsS0FBS3ZJLEdBRWIzNUMsS0FBSzZwRCxHQUFHM0gsS0FBS3ZJLEVBQU01L0IsR0FFckIsTUFBT3dELEdBQ1BvL0IsRUFBTSx5Q0FHSndOLEdBR0ZwQixHQUFTLEtBQ1Avb0QsS0FBS3NuQyxVQUFXLEVBQ2hCdG5DLEtBQUttQixLQUFLLGdCQVlwQmdnRCxVQUNFbEMsRUFBVXorQyxVQUFVMmdELFFBQVEvOEMsS0FBS3BFLE1BUW5DaWtELGVBQ3lCLElBQVpqa0QsS0FBSzZwRCxLQUNkN3BELEtBQUs2cEQsR0FBR240QyxRQUNSMVIsS0FBSzZwRCxHQUFLLE1BU2Q5SyxNQUNFLElBQUlZLEVBQVEzL0MsS0FBSzIvQyxPQUFTLEdBQzFCLE1BQU1pSixFQUFTNW9ELEtBQUsrWixLQUFLMGxDLE9BQVMsTUFBUSxLQUMxQyxJQUFJQyxFQUFPLEdBNkJYLE9BekJFMS9DLEtBQUsrWixLQUFLMmxDLE9BQ1IsUUFBVWtKLEdBQXFDLE1BQTNCckwsT0FBT3Y5QyxLQUFLK1osS0FBSzJsQyxPQUNwQyxPQUFTa0osR0FBcUMsS0FBM0JyTCxPQUFPdjlDLEtBQUsrWixLQUFLMmxDLFNBRXZDQSxFQUFPLElBQU0xL0MsS0FBSytaLEtBQUsybEMsTUFJckIxL0MsS0FBSytaLEtBQUs4dUMsb0JBQ1psSixFQUFNMy9DLEtBQUsrWixLQUFLdW1DLGdCQUFrQmdJLEtBSS9CdG9ELEtBQUttb0QsaUJBQ1J4SSxFQUFNbUosSUFBTSxHQUdkbkosRUFBUU4sRUFBUWhMLE9BQU9zTCxHQUduQkEsRUFBTTUvQyxTQUNSNC9DLEVBQVEsSUFBTUEsR0FLZGlKLEVBQ0EsUUFIZ0QsSUFBckM1b0QsS0FBSytaLEtBQUt3bEMsU0FBU3AwQyxRQUFRLEtBSTlCLElBQU1uTCxLQUFLK1osS0FBS3dsQyxTQUFXLElBQU12L0MsS0FBSytaLEtBQUt3bEMsVUFDbkRHLEVBQ0ExL0MsS0FBSytaLEtBQUtrbUMsS0FDVk4sRUFVSitKLFFBQ0UsU0FDSVAsR0FDQSxpQkFBa0JBLEdBQWFucEQsS0FBS2c1QyxPQUFTeVEsRUFBR2pwRCxVQUFVdzRDLE9BS2xFdEYsRUFBT0MsUUFBVThWLFlDL1BqQi9WLEVBQU9DLFFBQVFnVCxLQUFPLENBQUMxM0IsS0FBUTduQixJQUN0QkEsRUFBS29tQixRQUFPLENBQUMrOEIsRUFBS0MsS0FDbkJ2N0IsRUFBSW95QixlQUFlbUosS0FDckJELEVBQUlDLEdBQUt2N0IsRUFBSXU3QixJQUVSRCxJQUNOLG9CQ0pMLE1BQU1FLEVBQVUsRUFBUSxNQUNsQnRGLEVBQWEsRUFBUSxNQUUzQnpSLEVBQU9DLFFBQVUsU0FBUzU1QixHQUN4QixNQUFNZ3JDLEVBQVVockMsRUFBS2dyQyxRQUlmQyxFQUFVanJDLEVBQUtpckMsUUFJZmdELEVBQWFqdUMsRUFBS2l1QyxXQUd4QixJQUNFLEdBQUksb0JBQXVCMUQsa0JBQW9CUyxHQUFXMEYsR0FDeEQsT0FBTyxJQUFJbkcsZUFFYixNQUFPL21DLElBS1QsSUFDRSxHQUFJLG9CQUF1QndxQyxpQkFBbUIvQyxHQUFXZ0QsRUFDdkQsT0FBTyxJQUFJRCxlQUViLE1BQU94cUMsSUFFVCxJQUFLd25DLEVBQ0gsSUFDRSxPQUFPLElBQUlJLEVBQVcsQ0FBQyxVQUFVMU4sT0FBTyxVQUFVNW9DLEtBQUssT0FDckQscUJBRUYsTUFBTzBPLGdCQ3JDYixNQUFNbXRDLEVBQWUzb0QsT0FBT2lsRCxPQUFPLE1BQ25DMEQsRUFBbUIsS0FBSSxJQUN2QkEsRUFBb0IsTUFBSSxJQUN4QkEsRUFBbUIsS0FBSSxJQUN2QkEsRUFBbUIsS0FBSSxJQUN2QkEsRUFBc0IsUUFBSSxJQUMxQkEsRUFBc0IsUUFBSSxJQUMxQkEsRUFBbUIsS0FBSSxJQUV2QixNQUFNQyxFQUF1QjVvRCxPQUFPaWxELE9BQU8sTUFDM0NqbEQsT0FBT2llLEtBQUswcUMsR0FBY3RnRCxTQUFRZ0MsSUFDaEN1K0MsRUFBcUJELEVBQWF0K0MsSUFBUUEsS0FLNUNzbkMsRUFBT0MsUUFBVSxDQUNmK1csYUFBQUEsRUFDQUMscUJBQUFBLEVBQ0FDLGFBTG1CLENBQUV4ckMsS0FBTSxRQUFTdTZCLEtBQU0saUNDZDVDLE1BQU0scUJBQUVnUixFQUFvQixhQUFFQyxHQUFpQixFQUFRLE1BSXZELElBQUlDLEVBRmlELG1CQUFoQjFWLGNBSW5DMFYsRUFBZ0IsRUFBUSxPQUcxQixNQTRCTUMsRUFBcUIsQ0FBQ25SLEVBQU0wSyxLQUNoQyxHQUFJd0csRUFBZSxDQUNqQixNQUFNRSxFQUFVRixFQUFjalcsT0FBTytFLEdBQ3JDLE9BQU9xUixFQUFVRCxFQUFTMUcsR0FFMUIsTUFBTyxDQUFFM1AsUUFBUSxFQUFNaUYsS0FBQUEsSUFJckJxUixFQUFZLENBQUNyUixFQUFNMEssS0FDdkIsT0FBUUEsR0FDTixJQUFLLE9BQ0gsT0FBTzFLLGFBQWdCeEUsWUFBYyxJQUFJOFYsS0FBSyxDQUFDdFIsSUFBU0EsRUFDMUQsSUFBSyxjQUNMLFFBQ0UsT0FBT0EsSUFJYmpHLEVBQU9DLFFBL0NjLENBQUN1WCxFQUFlN0csS0FDbkMsR0FBNkIsaUJBQWxCNkcsRUFDVCxNQUFPLENBQ0w5ckMsS0FBTSxVQUNOdTZCLEtBQU1xUixFQUFVRSxFQUFlN0csSUFHbkMsTUFBTWpsQyxFQUFPOHJDLEVBQWNDLE9BQU8sR0FDbEMsTUFBYSxNQUFUL3JDLEVBQ0ssQ0FDTEEsS0FBTSxVQUNOdTZCLEtBQU1tUixFQUFtQkksRUFBY3ZXLFVBQVUsR0FBSTBQLElBR3RDc0csRUFBcUJ2ckMsR0FJakM4ckMsRUFBY25yRCxPQUFTLEVBQzFCLENBQ0VxZixLQUFNdXJDLEVBQXFCdnJDLEdBQzNCdTZCLEtBQU11UixFQUFjdlcsVUFBVSxJQUVoQyxDQUNFdjFCLEtBQU11ckMsRUFBcUJ2ckMsSUFSeEJ3ckMsbUJDekJYLE1BQU0sYUFBRUYsR0FBaUIsRUFBUSxNQUUzQlUsRUFDWSxtQkFBVEgsTUFDVSxvQkFBVEEsTUFDbUMsNkJBQXpDbHBELE9BQU92QixVQUFVbStCLFNBQVN2NkIsS0FBSzZtRCxNQUM3QkksRUFBK0MsbUJBQWhCbFcsWUE4Qi9CbVcsRUFBcUIsQ0FBQzNSLEVBQU10dEMsS0FDaEMsTUFBTWsvQyxFQUFhLElBQUlDLFdBS3ZCLE9BSkFELEVBQVc3RSxPQUFTLFdBQ2xCLE1BQU05eUMsRUFBVTIzQyxFQUFXRSxPQUFPL00sTUFBTSxLQUFLLEdBQzdDcnlDLEVBQVMsSUFBTXVILElBRVYyM0MsRUFBV0csY0FBYy9SLElBR2xDakcsRUFBT0MsUUE5QmMsRUFBR3YwQixLQUFBQSxFQUFNdTZCLEtBQUFBLEdBQVF3TyxFQUFnQjk3QyxLQUNwRCxPQUFJKytDLEdBQWtCelIsYUFBZ0JzUixLQUNoQzlDLEVBQ0s5N0MsRUFBU3N0QyxHQUVUMlIsRUFBbUIzUixFQUFNdHRDLEdBR2xDZy9DLElBQ0MxUixhQUFnQnhFLGNBZk5sbUIsRUFlNEIwcUIsRUFkSixtQkFBdkJ4RSxZQUFZd1csT0FDdEJ4VyxZQUFZd1csT0FBTzE4QixHQUNuQkEsR0FBT0EsRUFBSTI4QixrQkFBa0J6VyxjQWMzQmdULEVBQ0s5N0MsRUFBU3N0QyxhQUFnQnhFLFlBQWN3RSxFQUFPQSxFQUFLaVMsUUFFbkROLEVBQW1CLElBQUlMLEtBQUssQ0FBQ3RSLElBQVF0dEMsR0FJekNBLEVBQVNxK0MsRUFBYXRyQyxJQUFTdTZCLEdBQVEsS0F4QmpDMXFCLElBQUFBLG1CQ1RmLE1BQU1tN0IsRUFBZSxFQUFRLE1BQ3ZCaEcsRUFBZSxFQUFRLE1BRXZCeUgsRUFBWTVsQixPQUFPNmxCLGFBQWEsSUFnQ3RDcFksRUFBT0MsUUFBVSxDQUNmcUwsU0FBVSxFQUNWb0wsYUFBQUEsRUFDQXpCLGNBakNvQixDQUFDekUsRUFBUzczQyxLQUU5QixNQUFNdE0sRUFBU21rRCxFQUFRbmtELE9BQ2pCZ3NELEVBQWlCLElBQUl6K0IsTUFBTXZ0QixHQUNqQyxJQUFJaXVCLEVBQVEsRUFFWmsyQixFQUFROTVDLFNBQVEsQ0FBQzI0QyxFQUFRdDRCLEtBRXZCMi9CLEVBQWFySCxHQUFRLEdBQU9tSSxJQUMxQmEsRUFBZXRoQyxHQUFLeWdDLElBQ2RsOUIsSUFBVWp1QixHQUNkc00sRUFBUzAvQyxFQUFlbDlDLEtBQUtnOUMsV0F1Qm5DekgsYUFBQUEsRUFDQXNFLGNBbEJvQixDQUFDc0QsRUFBZ0IzSCxLQUNyQyxNQUFNMEgsRUFBaUJDLEVBQWV0TixNQUFNbU4sR0FDdEMzSCxFQUFVLEdBQ2hCLElBQUssSUFBSXo1QixFQUFJLEVBQUdBLEVBQUlzaEMsRUFBZWhzRCxPQUFRMHFCLElBQUssQ0FDOUMsTUFBTXdoQyxFQUFnQjdILEVBQWEySCxFQUFldGhDLEdBQUk0NUIsR0FFdEQsR0FEQUgsRUFBUWozQyxLQUFLZy9DLEdBQ2MsVUFBdkJBLEVBQWM3c0MsS0FDaEIsTUFHSixPQUFPOGtDLGNDdkJULElBQ0V4USxFQUFPQyxRQUFvQyxvQkFBbkIyUSxnQkFDdEIsb0JBQXFCLElBQUlBLGVBQzNCLE1BQU8zdUMsR0FHUCs5QixFQUFPQyxTQUFVLG1CQ2ZuQkQsRUFBT0MsUUFBVSxFQUFqQixpQ0NlQSxTQUFTdVksRUFBTUMsR0FDYm5zRCxLQUFLNjhDLEVBQUksR0FHVDc4QyxLQUFLb3NELEdBQUssR0FDVnBzRCxLQUFLcXNELEdBQUssS0FDVnJzRCxLQUFLc3NELEVBQUlILEVBV1hELEVBQU0xckQsVUFBWSxDQUloQityRCxRQUFTLFdBQ1AsUUFBU3ZzRCxLQUFLc3NELEdBdUJoQkUsR0FBSSxTQUFZMTBDLEVBQU8yMEMsR0FDckIsR0FBSUEsR0FBZ0JBLEVBQWE1UCxFQUcvQixPQURBNzhDLEtBQUs2OEMsRUFBRS9rQyxHQUFTMjBDLEVBQ1RBLEVBSVQsSUFBSU4sRUFBUU0sRUFDUkMsRUFBWTFzRCxLQUFLNjhDLEVBQUUva0MsR0FFdkIsR0FBSTQwQyxFQU1GLE9BTElQLElBQ0ZPLEVBQVVKLEVBQUlILEdBSVRPLEVBSVRBLEVBQVlDLElBRVosSUFBSUMsRUFBZ0JDLEVBQU03c0QsS0FBTThYLEdBYWhDLE9BWEk4MEMsR0FFRjdxRCxPQUFPaStDLE9BQU8wTSxFQUFVN1AsRUFBRytQLEVBQWMvUCxHQUN6QzZQLEVBQVVOLEdBQUdVLE9BQU9GLEVBQWNSLElBQ2xDTSxFQUFVTixHQUFLUSxFQUFjUCxHQUM3QkssRUFBVUosRUFBSUgsR0FBU1MsRUFBY04sR0FFckNJLEVBQVVKLEVBQUlILEVBR2hCbnNELEtBQUs2OEMsRUFBRS9rQyxHQUFTNDBDLEVBQ1RBLElBUVgsSUFBSUMsRUFBWSxXQUNkLE9BQU8sSUFBSVQsR0FPVGEsRUFBcUIsU0FBNEJaLEdBQ25ELE9BQU8sSUFBSUQsRUFBTUMsSUFTZmEsRUFBUSxTQUFlQyxFQUFZbjFDLEVBQU80MEMsR0FFdkNPLEVBQVdwUSxFQUFFL2tDLEtBQ2hCbTFDLEVBQVdwUSxFQUFFL2tDLEdBQVM0MEMsSUFZdEJRLEVBQWEsU0FBb0JELEVBQVlFLEVBQU9ULEdBQ3RETyxFQUFXYixHQUFHbi9DLEtBQUssQ0FBQ2tnRCxFQUFPVCxLQVN6QkcsRUFBUSxTQUFleGtELEVBQU95UCxHQUVoQyxJQUFJNDBDLEVBQVlya0QsRUFBTXcwQyxFQUFFL2tDLEdBRXhCLEdBQUk0MEMsRUFDRixPQUFPQSxFQVVULElBQUssSUFBSWppQyxFQUFJLEVBQUdBLEVBQUlwaUIsRUFBTStqRCxHQUFHcnNELE9BQVEwcUIsSUFBSyxDQUN4QyxJQUFJMGlDLEVBQVE5a0QsRUFBTStqRCxHQUFHM2hDLEdBQUcsR0FDcEIyaUMsRUFBYS9rRCxFQUFNK2pELEdBQUczaEMsR0FBRyxHQUU3QixHQUFJMGlDLEVBQU1sVSxLQUFLbmhDLEdBQ2IsT0FBT3MxQyxFQUtYLE9BQU8va0QsRUFBTWdrRCxJQVVYZ0IsRUFBYSxTQUFvQkosRUFBWTdZLEVBQU9zWSxHQUN0RCxJQUFLLElBQUlqaUMsRUFBSSxFQUFHQSxFQUFJMnBCLEVBQU1yMEMsT0FBUTBxQixJQUNoQ3VpQyxFQUFNQyxFQUFZN1ksRUFBTTNwQixHQUFJaWlDLElBVzVCWSxFQUFhLFNBQW9CTCxFQUFZTSxHQUMvQyxJQUFLLElBQUk5aUMsRUFBSSxFQUFHQSxFQUFJOGlDLEVBQVl4dEQsT0FBUTBxQixJQUFLLENBQzNDLElBQUkzUyxFQUFReTFDLEVBQVk5aUMsR0FBRyxHQUN2QmlpQyxFQUFZYSxFQUFZOWlDLEdBQUcsR0FDL0J1aUMsRUFBTUMsRUFBWW4xQyxFQUFPNDBDLEtBa0J6QmMsRUFBYSxTQUFvQm5sRCxFQUFPb2xELEVBQUtDLEVBQVVDLEdBS3pELElBSkEsSUFFSWpCLEVBRkFqaUMsRUFBSSxFQUNKZ3FCLEVBQU1nWixFQUFJMXRELE9BR1AwcUIsRUFBSWdxQixJQUFRaVksRUFBWXJrRCxFQUFNdzBDLEVBQUU0USxFQUFJaGpDLE1BQ3pDcGlCLEVBQVFxa0QsRUFDUmppQyxJQUdGLEdBQUlBLEdBQUtncUIsRUFDUCxNQUFPLEdBSVQsS0FBT2hxQixFQUFJZ3FCLEVBQU0sR0FDZmlZLEVBQVlpQixJQUNaWCxFQUFNM2tELEVBQU9vbEQsRUFBSWhqQyxHQUFJaWlDLEdBQ3JCcmtELEVBQVFxa0QsRUFDUmppQyxJQUdGdWlDLEVBQU0za0QsRUFBT29sRCxFQUFJaFosRUFBTSxHQUFJaVosSUFRekJFLEVBQVMsU0FDVEMsRUFBWSxZQUdaQyxFQUFNLE1BRU5DLEVBQUssS0FFTEMsRUFBUSxRQUVSQyxFQUFNLE1BSU5DLEVBQWMsY0FFZEMsRUFBSyxLQUdMQyxFQUFNLE1BRU5DLEVBQU8sT0FFUEMsRUFBUSxRQUVSQyxFQUFRLFFBRVJDLEVBQVEsUUFFUkMsRUFBYSxhQU9iQyxFQUFXLFdBRVhDLEVBQVMsU0FHVGxGLEVBQUssS0FFTG1GLEVBQVksWUFFWkMsRUFBYyxjQUVkQyxFQUFtQixtQkFFbkJDLEVBQVksWUFFWkMsRUFBYSxhQUViQyxFQUFlLGVBRWZDLEVBQW9CLG9CQUVwQkMsRUFBYSxhQUViQyxFQUFZLFlBR1pDLEVBQU0sTUFFTnJvQyxFQUFvQmpsQixPQUFPdXRELE9BQU8sQ0FDckNDLFVBQVcsS0FDWDNCLE9BQVFBLEVBQ1JDLFVBQVdBLEVBQ1hDLElBQUtBLEVBQ0xDLEdBQUlBLEVBQ0pDLE1BQU9BLEVBQ1BDLElBQUtBLEVBQ0xDLFlBQWFBLEVBQ2JDLEdBQUlBLEVBQ0pDLElBQUtBLEVBQ0xDLEtBQU1BLEVBQ05DLE1BQU9BLEVBQ1BDLE1BQU9BLEVBQ1BDLE1BQU9BLEVBQ1BDLFdBQVlBLEVBQ1pDLFNBQVVBLEVBQ1ZDLE9BQVFBLEVBQ1JsRixHQUFJQSxFQUNKbUYsVUFBV0EsRUFDWEMsWUFBYUEsRUFDYkMsaUJBQWtCQSxFQUNsQkMsVUFBV0EsRUFDWEMsV0FBWUEsRUFDWkMsYUFBY0EsRUFDZEMsa0JBQW1CQSxFQUNuQkMsV0FBWUEsRUFDWkMsVUFBV0EsRUFDWEMsSUFBS0EsSUFTRkcsRUFBTyx1bFJBODlDUDlRLE1BQU0sS0FXTitRLEVBQVMsNjBPQUVUQyxFQUFRLCs4Q0FFUkMsRUFBUSxLQUNSQyxFQUFRLEtBTVosU0FBU0MsSUFDUCxJQUFJQyxFQUFrQmh3RCxVQUFVQyxPQUFTLFFBQXNCSSxJQUFqQkwsVUFBVSxHQUFtQkEsVUFBVSxHQUFLLEdBRXRGaXdELEVBQVVwRCxJQUNWcUQsRUFBUWpELEVBQW1CcUIsR0FDM0I2QixFQUFXbEQsRUFBbUJhLEdBQzlCc0MsRUFBa0J2RCxJQUVsQndELEVBQU9wRCxFQUFtQnRELEdBQzFCMkcsRUFBMkIsQ0FBQyxDQUFDVCxFQUFPTSxHQUFXLENBQUNSLEVBQVFRLEdBQVcsQ0FBQ1AsRUFBT08sSUFFM0VJLEVBQWtCLFdBQ3BCLElBQUlob0QsRUFBUTBrRCxFQUFtQmEsR0FLL0IsT0FKQXZsRCxFQUFNdzBDLEVBQUksQ0FDUixJQUFLcVQsR0FFUDduRCxFQUFNK2pELEdBQUssR0FBRzNVLE9BQU8yWSxHQUNkL25ELEdBS0xpb0QsRUFBc0IsU0FBNkJuRSxHQUNyRCxJQUFJOWpELEVBQVFnb0QsSUFFWixPQURBaG9ELEVBQU1pa0QsRUFBSUgsRUFDSDlqRCxHQUlUaWxELEVBQVd5QyxFQUFTLENBQUMsQ0FBQyxJQUFLaEQsRUFBbUJnQixJQUFNLENBQUMsSUFBS2hCLEVBQW1Ca0IsSUFBTyxDQUFDLElBQUtsQixFQUFtQnNCLElBQVEsQ0FBQyxJQUFLdEIsRUFBbUJ1QixJQUFTLENBQUMsSUFBS3ZCLEVBQW1Cd0IsSUFBUyxDQUFDLElBQUt4QixFQUFtQnlCLElBQVMsQ0FBQyxJQUFLekIsRUFBbUIwQixJQUFjLENBQUMsSUFBSzFCLEVBQW1CaUIsSUFBUyxDQUFDLElBQUtqQixFQUFtQjZCLElBQWEsQ0FBQyxJQUFLN0IsRUFBbUI4QixJQUFlLENBQUMsSUFBSzlCLEVBQW1CK0IsSUFBb0IsQ0FBQyxJQUFLL0IsRUFBbUJnQyxJQUFhLENBQUMsSUFBS2hDLEVBQW1CaUMsSUFBYyxDQUFDLElBQUtqQyxFQUFtQmtDLElBQWdCLENBQUMsSUFBS2xDLEVBQW1CbUMsSUFBcUIsQ0FBQyxJQUFLbkMsRUFBbUJvQyxJQUFjLENBQUMsSUFBS3BDLEVBQW1CcUMsTUFDbm9CL0IsRUFBVzBDLEVBQVMsQ0FBQyxJQUFLLElBQUssSUFBSyxJQUFLLEtBQU9oRCxFQUFtQm1CLElBR25FbEIsRUFBTStDLEVBQVMsS0FBTWhELEVBQW1Cb0IsSUFDeENqQixFQUFXNkMsRUFBU0gsRUFBT08sR0FFM0JuRCxFQUFNbUQsRUFBTSxLQUFNeEQsS0FFbEJPLEVBQVdpRCxFQUFNUCxFQUFPTyxHQUd4QixJQUFLLElBQUkxbEMsRUFBSSxFQUFHQSxFQUFJK2tDLEVBQUt6dkQsT0FBUTBxQixJQUMvQitpQyxFQUFXdUMsRUFBU1AsRUFBSy9rQyxHQUFJNmxDLEVBQW9CeEMsR0FBTXVDLEdBSXpELElBQUlFLEVBQWtCRixJQUNsQkcsRUFBaUJILElBQ2pCSSxFQUFrQkosSUFDbEJLLEVBQVdMLElBQ2Y3QyxFQUFXdUMsRUFBUyxPQUFRUSxFQUFpQkYsR0FDN0M3QyxFQUFXdUMsRUFBUyxNQUFPUyxFQUFnQkgsR0FDM0M3QyxFQUFXdUMsRUFBUyxPQUFRVSxFQUFpQkosR0FDN0M3QyxFQUFXdUMsRUFBUyxTQUFVVyxFQUFVTCxHQUV4QyxJQUFJTSxFQUFvQk4sSUFDcEJPLEdBQWtCN0QsRUFBbUIyQixHQUVyQ21DLEdBQWdCOUQsRUFBbUI0QixHQUd2QzNCLEVBQU13RCxFQUFnQixJQUFLRyxHQUMzQjNELEVBQU13RCxFQUFnQixJQUFLSSxJQUMzQjVELEVBQU15RCxFQUFpQixJQUFLRSxHQUM1QjNELEVBQU15RCxFQUFpQixJQUFLRyxJQUU1QjVELEVBQU11RCxFQUFpQixJQUFLSyxJQUM1QjVELEVBQU0yRCxFQUFtQixJQUFLQyxJQUM5QjVELEVBQU0wRCxFQUFVLElBQUtHLElBSXJCLElBRkEsSUFBSUMsR0FBb0JULElBRWZ4d0QsR0FBSyxFQUFHQSxHQUFLaXdELEVBQWdCL3ZELE9BQVFGLEtBQzVDMnRELEVBQVd1QyxFQUFTRCxFQUFnQmp3RCxJQUFLaXhELEdBQW1CVCxHQTZCOUQsT0ExQkFyRCxFQUFNOEQsR0FBbUIsSUFBS0YsSUFFOUJwRCxFQUFXdUMsRUFBUyxZQUFhTyxFQUFvQnpDLEdBQVl3QyxHQUlqRW5ELEVBQVc2QyxFQUFTSixFQUFPSyxHQUMzQjlDLEVBQVc2QyxFQUFTTixFQUFRUSxHQUM1Qi9DLEVBQVc2QyxFQUFTTCxFQUFPTyxHQUMzQi9DLEVBQVc4QyxFQUFPTCxFQUFPSyxHQUN6QjlDLEVBQVc4QyxFQUFPUCxFQUFRUSxHQUUxQi9DLEVBQVc4QyxFQUFPTixFQUFPTyxHQUV6QmpELEVBQU1nRCxFQUFPLElBQUtFLEdBRWxCbEQsRUFBTWlELEVBQVUsSUFBS0MsR0FDckJsRCxFQUFNa0QsRUFBaUIsSUFBS0EsR0FDNUJoRCxFQUFXK0MsRUFBVU4sRUFBT00sR0FDNUIvQyxFQUFXK0MsRUFBVVIsRUFBUVEsR0FDN0IvQyxFQUFXK0MsRUFBVVAsRUFBT08sR0FDNUIvQyxFQUFXZ0QsRUFBaUJQLEVBQU9NLEdBQ25DL0MsRUFBV2dELEVBQWlCVCxFQUFRUSxHQUNwQy9DLEVBQVdnRCxFQUFpQlIsRUFBT08sR0FFbkNGLEVBQVExRCxHQUFLVSxFQUFtQnNDLEdBQ3pCVSxFQWtGVCxTQUFTZ0IsRUFBUTloQyxHQWFmLE9BVEU4aEMsRUFEb0IsbUJBQVgzWSxRQUFvRCxpQkFBcEJBLE9BQU9DLFNBQ3RDLFNBQVVwcEIsR0FDbEIsY0FBY0EsR0FHTixTQUFVQSxHQUNsQixPQUFPQSxHQUF5QixtQkFBWG1wQixRQUF5Qm5wQixFQUFJOHBCLGNBQWdCWCxRQUFVbnBCLElBQVFtcEIsT0FBTzUzQyxVQUFZLGdCQUFrQnl1QixJQUk5R0EsR0FHakIsSUFBSStoQyxFQUFXLENBQ2JDLGdCQUFpQixPQUNqQkMsT0FBUSxLQUNSdFQsT0FBUXVULEVBQ1JDLFdBQVlELEVBQ1pFLE9BQU8sRUFDUDVyQyxRQUFTLElBQ1Q3UyxPQUFRLEtBQ1IwK0MsSUFBSyxLQUNMQyxVQUFVLEVBQ1ZDLFNBQVUsRUFDVjFxRCxVQUFXLEtBQ1h1b0MsV0FBWSxLQUNab2lCLFdBQVksSUFFZCxTQUFTQyxFQUFRMzNDLEdBQ2ZBLEVBQU9BLEdBQVEsR0FDZi9aLEtBQUtpeEQsZ0JBQWtCLG9CQUFxQmwzQyxFQUFPQSxFQUFLazNDLGdCQUFrQkQsRUFBU0MsZ0JBQ25GanhELEtBQUtreEQsT0FBUyxXQUFZbjNDLEVBQU9BLEVBQUttM0MsT0FBU0YsRUFBU0UsT0FDeERseEQsS0FBSzQ5QyxPQUFTLFdBQVk3akMsRUFBT0EsRUFBSzZqQyxPQUFTb1QsRUFBU3BULE9BQ3hENTlDLEtBQUtveEQsV0FBYSxlQUFnQnIzQyxFQUFPQSxFQUFLcTNDLFdBQWFKLEVBQVNJLFdBQ3BFcHhELEtBQUtxeEQsTUFBUSxVQUFXdDNDLEVBQU9BLEVBQUtzM0MsTUFBUUwsRUFBU0ssTUFDckRyeEQsS0FBS3lsQixRQUFVLFlBQWExTCxFQUFPQSxFQUFLMEwsUUFBVXVyQyxFQUFTdnJDLFFBQzNEemxCLEtBQUs0UyxPQUFTLFdBQVltSCxFQUFPQSxFQUFLbkgsT0FBU28rQyxFQUFTcCtDLE9BQ3hENVMsS0FBS3N4RCxJQUFNLFFBQVN2M0MsRUFBT0EsRUFBS3UzQyxJQUFNTixFQUFTTSxJQUMvQ3R4RCxLQUFLdXhELFNBQVcsYUFBY3gzQyxFQUFPQSxFQUFLdzNDLFNBQVdQLEVBQVNPLFNBQzlEdnhELEtBQUt3eEQsU0FBVyxhQUFjejNDLEVBQU9BLEVBQUt5M0MsU0FBV1IsRUFBU1EsU0FDOUR4eEQsS0FBSzhHLFVBQVksY0FBZWlULEVBQU9BLEVBQUtqVCxVQUFZa3FELEVBQVNscUQsVUFDakU5RyxLQUFLcXZDLFdBQWF0MUIsRUFBS3MxQixZQUFjMmhCLEVBQVMzaEIsV0FDOUNydkMsS0FBS3l4RCxXQUFhLEdBSWxCLElBRkEsSUFBSUUsR0FBYyxlQUFnQjUzQyxFQUFPQSxFQUFLMDNDLFdBQWFULEVBQVNTLFlBRTNEaG5DLEVBQUksRUFBR0EsRUFBSWtuQyxFQUFZNXhELE9BQVEwcUIsSUFDdEN6cUIsS0FBS3l4RCxXQUFXeGtELEtBQUswa0QsRUFBWWxuQyxHQUFHbW5DLGVBZ0V4QyxTQUFTVCxFQUFLclQsR0FDWixPQUFPQSxFQTlEVDRULEVBQVFseEQsVUFBWSxDQUlsQnlvRCxRQUFTLFNBQWlCa0QsR0FDeEIsSUFBSTBGLEVBQU8xRixFQUFNMkYsT0FBTzl4RCxLQUFLaXhELGlCQUM3QixNQUFPLENBQ0xjLFVBQVcveEQsS0FBS2lDLElBQUksU0FBVWtxRCxFQUFNeHRCLFdBQVl3dEIsR0FDaEQ2RixjQUFlaHlELEtBQUtpQyxJQUFJLGFBQWM0dkQsRUFBTTFGLEdBQzVDMW1DLFFBQVN6bEIsS0FBS2lDLElBQUksVUFBVzR2RCxFQUFNMUYsR0FDbkNybEQsVUFBVzlHLEtBQUtpQyxJQUFJLFlBQWE0dkQsRUFBTTFGLEdBQ3ZDdjVDLE9BQVE1UyxLQUFLaUMsSUFBSSxTQUFVNHZELEVBQU0xRixHQUNqQ21GLElBQUt0eEQsS0FBS2lDLElBQUksTUFBTzR2RCxFQUFNMUYsR0FDM0IrRSxPQUFRbHhELEtBQUtpeUQsVUFBVSxTQUFVSixFQUFNMUYsR0FDdkM5YyxXQUFZcnZDLEtBQUtpeUQsVUFBVSxhQUFjSixFQUFNMUYsR0FDL0NxRixTQUFVeHhELEtBQUtpQyxJQUFJLFdBQVk0dkQsRUFBTTFGLEtBUXpDekMsTUFBTyxTQUFleUMsR0FDcEIsT0FBT25zRCxLQUFLaUMsSUFBSSxXQUFZa3FELEVBQU14dEIsV0FBWXd0QixJQVdoRGxxRCxJQUFLLFNBQWFtSyxFQUFLOGxELEVBQVUvRixHQUMvQixJQU1JZ0csRUFOQUMsRUFBU3B5RCxLQUFLb00sR0FFbEIsSUFBS2dtRCxFQUNILE9BQU9BLEVBS1QsT0FBUXJCLEVBQVFxQixJQUNkLElBQUssV0FDSCxPQUFPQSxFQUFPRixFQUFVL0YsRUFBTUcsR0FFaEMsSUFBSyxTQUVILE1BQThCLG1CQUQ5QjZGLEVBQWNoRyxFQUFNRyxLQUFLOEYsRUFBU0EsRUFBT2pHLEVBQU1HLEdBQUswRSxFQUFTNWtELElBQ2xCK2xELEVBQVlELEVBQVUvRixFQUFNRyxHQUFLNkYsRUFHaEYsT0FBT0MsR0FFVEgsVUFBVyxTQUFtQjdsRCxFQUFLOGxELEVBQVUvRixHQUMzQyxJQUFJaUcsRUFBU3B5RCxLQUFLb00sR0FDbEIsTUFBeUIsbUJBQVhnbUQsRUFBd0JBLEVBQU9GLEVBQVUvRixFQUFNRyxHQUFLOEYsSUErQ3RFLFNBQVNDLEVBQVdqekMsRUFBTTVZLEVBQU84ckQsR0FDL0J0eUQsS0FBS3NzRCxFQUFJbHRDLEVBQ1RwZixLQUFLODhDLEVBQUl0MkMsRUFDVHhHLEtBQUt1eUQsR0FBS0QsRUFDVnR5RCxLQUFLd3lELFFBQVMsRUFrRmhCLFNBQVNDLEVBQWlCcnpDLEVBQU11WCxHQUM5QixTQUFTKzdCLEVBQU1sc0QsRUFBTzhyRCxHQUNwQnR5RCxLQUFLc3NELEVBQUlsdEMsRUFDVHBmLEtBQUs4OEMsRUFBSXQyQyxFQUNUeEcsS0FBS3V5RCxHQUFLRCxFQUlaLE9BMUhGLFNBQWtCSyxFQUFRQyxHQUN4QixJQUFJajhCLEVBQVE3MkIsVUFBVUMsT0FBUyxRQUFzQkksSUFBakJMLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxHQUM1RSt5RCxFQUFXOXdELE9BQU9pbEQsT0FBTzJMLEVBQU9ueUQsV0FFcEMsSUFBSyxJQUFJMDBDLEtBQUt2ZSxFQUNaazhCLEVBQVMzZCxHQUFLdmUsRUFBTXVlLEdBR3RCMmQsRUFBUzlaLFlBQWM2WixFQUN2QkEsRUFBTXB5RCxVQUFZcXlELEVBZ0hsQkMsQ0FBU1QsRUFBWUssRUFBTy83QixHQUNyQis3QixFQXhGVEwsRUFBVzd4RCxVQUFZLENBTXJCOHJELEVBQUcsUUFPSGtHLFFBQVEsRUFPUjd6QixTQUFVLFdBQ1IsT0FBTzMrQixLQUFLODhDLEdBU2RnVixPQUFRLFdBQ04sT0FBTzl4RCxLQUFLMitCLFlBT2RvMEIsV0FBWSxXQUNWLE9BQU8veUQsS0FBS3V5RCxHQUFHLEdBQUdTLEdBUXBCQyxTQUFVLFdBQ1IsT0FBT2p6RCxLQUFLdXlELEdBQUd2eUQsS0FBS3V5RCxHQUFHeHlELE9BQVMsR0FBR3dkLEdBYXJDMjFDLFNBQVUsV0FDUixJQUFJbFUsRUFBV2wvQyxVQUFVQyxPQUFTLFFBQXNCSSxJQUFqQkwsVUFBVSxHQUFtQkEsVUFBVSxHQUFLa3hELEVBQVNDLGdCQUM1RixNQUFPLENBQ0w3eEMsS0FBTXBmLEtBQUtzc0QsRUFDWDlsRCxNQUFPeEcsS0FBSzg4QyxFQUNaMFYsT0FBUXh5RCxLQUFLd3lELE9BQ2JYLEtBQU03eEQsS0FBSzh4RCxPQUFPOVMsR0FDbEJtVSxNQUFPbnpELEtBQUsreUQsYUFDWkssSUFBS3B6RCxLQUFLaXpELGNBMkJoQixJQUFJSSxFQUFjWixFQUFpQixRQUFTLENBQzFDRCxRQUFRLElBUU5jLEVBQVFiLEVBQWlCLFFBQVMsQ0FDcENELFFBQVEsRUFDUlYsT0FBUSxXQUNOLE1BQU8sVUFBWTl4RCxLQUFLMitCLGNBU3hCNDBCLEVBQU9kLEVBQWlCLFFBT3hCZSxHQUFLZixFQUFpQixNQU90QmdCLEdBQU1oQixFQUFpQixNQUFPLENBQ2hDRCxRQUFRLEVBVVJWLE9BQVEsV0FTTixJQVJBLElBQUk5UyxFQUFXbC9DLFVBQVVDLE9BQVMsUUFBc0JJLElBQWpCTCxVQUFVLEdBQW1CQSxVQUFVLEdBQUtreEQsRUFBU0MsZ0JBQ3hGcUIsRUFBU3R5RCxLQUFLdXlELEdBQ2RtQixHQUFjLEVBQ2RDLEdBQWdCLEVBQ2hCbEksRUFBUyxHQUNUaGhDLEVBQUksRUFHRDZuQyxFQUFPN25DLEdBQUc2aEMsSUFBTW9DLEdBQ3JCZ0YsR0FBYyxFQUNkakksRUFBT3grQyxLQUFLcWxELEVBQU83bkMsR0FBR3F5QixHQUN0QnJ5QixJQUlGLEtBQU82bkMsRUFBTzduQyxHQUFHNmhDLElBQU1rQyxHQUNyQm1GLEdBQWdCLEVBQ2hCbEksRUFBT3grQyxLQUFLcWxELEVBQU83bkMsR0FBR3F5QixHQUN0QnJ5QixJQUlGLEtBQU9BLEVBQUk2bkMsRUFBT3Z5RCxPQUFRMHFCLElBQ3hCZ2hDLEVBQU94K0MsS0FBS3FsRCxFQUFPN25DLEdBQUdxeUIsR0FTeEIsT0FOQTJPLEVBQVNBLEVBQU81OEMsS0FBSyxJQUVmNmtELEdBQWVDLElBQ25CbEksRUFBUyxHQUFHaFUsT0FBT3VILEVBQVUsT0FBT3ZILE9BQU9nVSxJQUd0Q0EsR0FFVGlJLFlBQWEsV0FDWCxPQUFPMXpELEtBQUt1eUQsR0FBRyxHQUFHakcsSUFBTW9DLEtBSXhCa0YsR0FBcUI3eEQsT0FBT3V0RCxPQUFPLENBQ3RDQyxVQUFXLEtBQ1g4QyxXQUFZQSxFQUNad0IsS0FBTXhCLEVBQ05JLGlCQUFrQkEsRUFDbEJZLFlBQWFBLEVBQ2JDLE1BQU9BLEVBQ1BDLEtBQU1BLEVBQ05DLEdBQUlBLEdBQ0pDLElBQUtBLEtBc0JOLFNBQVNLLEtBRVAsSUFBSS9ELEVBQVVwRCxJQUdWb0gsRUFBYXBILElBRWIrRCxFQUFXL0QsSUFFWHFILEVBQW1CckgsSUFFbkJzSCxFQUF5QnRILElBRXpCc0QsRUFBV3RELElBRVh1SCxFQUFldkgsSUFFZndILEVBQVFwSCxFQUFtQjBHLElBRTNCVyxFQUFjekgsSUFFZDBILEVBQWF0SCxFQUFtQjBHLElBRWhDYSxFQUFRdkgsRUFBbUIwRyxJQUUzQmMsRUFBc0I1SCxJQUV0QjZILEVBQWtCN0gsSUFFbEI4SCxFQUFvQjlILElBRXBCK0gsRUFBeUIvSCxJQUV6QmdJLEVBQWtCaEksSUFFbEJpSSxFQUFvQjdILEVBQW1CMEcsSUFFdkNvQixFQUFzQjlILEVBQW1CMEcsSUFFekNxQixFQUEyQi9ILEVBQW1CMEcsSUFFOUNzQixFQUFvQmhJLEVBQW1CMEcsSUFFdkN1QixFQUF1QnJJLElBRXZCc0ksRUFBeUJ0SSxJQUV6QnVJLEdBQThCdkksSUFFOUJ3SSxHQUF1QnhJLElBRXZCeUksR0FBaUJ6SSxJQUVqQjBJLEdBQXFCMUksSUFFckIySSxHQUFVdkksRUFBbUJ1RyxHQUU3QmlDLEdBQWdCNUksSUFFaEI2SSxHQUFlekksRUFBbUJ1RyxHQUVsQ21DLEdBQWlCMUksRUFBbUJzRyxHQUVwQ3FDLEdBQStCL0ksSUFFL0JnSixHQUFjaEosSUFFZGlKLEdBQWlCakosSUFFakJrSixHQUFrQmxKLElBRWxCbUosR0FBTy9JLEVBQW1CeUcsSUFHOUJ4RyxFQUFNK0MsRUFBUzVCLEVBQUkySCxJQUNuQjlJLEVBQU0rQyxFQUFTckIsRUFBVXFGLEdBQ3pCL0csRUFBTStDLEVBQVNwQixFQUFRK0IsR0FDdkIxRCxFQUFNK0csRUFBWXZGLEVBQU93RixHQUN6QmhILEVBQU1nSCxFQUFrQnhGLEVBQU95RixHQUUvQmpILEVBQU0rQyxFQUFTakMsRUFBS21DLEdBQ3BCakQsRUFBTStDLEVBQVNuQyxFQUFRcUMsR0FDdkJqRCxFQUFNK0MsRUFBU2xDLEVBQVdzRyxHQUMxQm5ILEVBQU0rQyxFQUFTM0IsRUFBSzZCLEdBRXBCakQsRUFBTWlILEVBQXdCbkcsRUFBS3dHLEdBQ25DdEgsRUFBTWlILEVBQXdCckcsRUFBUTBHLEdBQ3RDdEgsRUFBTWlILEVBQXdCN0YsRUFBS2tHLEdBQ25DdEgsRUFBTWlILEVBQXdCcEcsRUFBV3lHLEdBR3pDdEgsRUFBTWlELEVBQVVoQyxFQUFLaUcsR0FDckJsSCxFQUFNb0ksR0FBZ0JuSCxFQUFLb0gsSUFHM0JySSxFQUFNa0gsRUFBY3BHLEVBQUtxRyxHQUN6Qm5ILEVBQU1rSCxFQUFjdEcsRUFBUXFDLEdBQzVCakQsRUFBTWtILEVBQWM5RixFQUFLNkIsR0FDekJqRCxFQUFNa0gsRUFBY3JHLEVBQVdvQyxHQUMvQmpELEVBQU1xSSxHQUFvQnZILEVBQUt3SCxJQUMvQnRJLEVBQU1xSSxHQUFvQnpILEVBQVF3SCxJQUNsQ3BJLEVBQU1xSSxHQUFvQmpILEVBQUtnSCxJQUMvQnBJLEVBQU1xSSxHQUFvQnhILEVBQVd1SCxJQUdyQ3BJLEVBQU1tSCxFQUFPbEcsRUFBS2lHLEdBQ2xCbEgsRUFBTXNJLEdBQVNySCxFQUFLb0gsSUFHcEJySSxFQUFNbUgsRUFBT25HLEVBQU9vRyxHQUNwQnBILEVBQU1tSCxFQUFPM0YsRUFBTzhGLEdBQ3BCdEgsRUFBTW9ILEVBQWFoRyxFQUFLaUcsR0FDeEJySCxFQUFNcUgsRUFBWTdGLEVBQU84RixHQUN6QnRILEVBQU1zSSxHQUFTdEgsRUFBT3VILElBQ3RCdkksRUFBTXVJLEdBQWVuSCxFQUFLb0gsSUFFMUIsSUFBSU8sR0FBYyxDQUFDbkksRUFBUUcsRUFBSUYsRUFBV08sRUFBS0MsRUFBTUMsRUFBT0ksRUFBVUYsRUFBT1YsRUFBS1csRUFBWVksRUFBS0QsR0FJL0Y0RyxHQUFpQixDQUFDaEksRUFBT0MsRUFBS00sRUFBT0wsRUFBYWMsRUFBWUMsRUFBY0MsRUFBbUJDLEVBQVlQLEVBQVdDLEVBQWFDLEVBQWtCQyxHQUl6Si9CLEVBQU1zSCxFQUFPMUYsRUFBVzRGLEdBQ3hCeEgsRUFBTXNILEVBQU96RixFQUFhNEYsR0FDMUJ6SCxFQUFNc0gsRUFBT3hGLEVBQWtCNEYsR0FDL0IxSCxFQUFNc0gsRUFBT3ZGLEVBQVc0RixHQUV4QjNILEVBQU11SCxFQUFxQjNGLEVBQVc0RixHQUN0Q3hILEVBQU11SCxFQUFxQjFGLEVBQWE0RixHQUN4Q3pILEVBQU11SCxFQUFxQnpGLEVBQWtCNEYsR0FDN0MxSCxFQUFNdUgsRUFBcUJ4RixFQUFXNEYsR0FFdEMzSCxFQUFNd0gsRUFBaUJ4RixFQUFZc0YsR0FDbkN0SCxFQUFNeUgsRUFBbUJ4RixFQUFjcUYsR0FDdkN0SCxFQUFNMEgsRUFBd0J4RixFQUFtQm9GLEdBQ2pEdEgsRUFBTTJILEVBQWlCeEYsRUFBWW1GLEdBQ25DdEgsRUFBTTRILEVBQW1CNUYsRUFBWXNGLEdBQ3JDdEgsRUFBTTZILEVBQXFCNUYsRUFBY3FGLEdBQ3pDdEgsRUFBTThILEVBQTBCNUYsRUFBbUJvRixHQUNuRHRILEVBQU0rSCxFQUFtQjVGLEVBQVltRixHQUNyQ3RILEVBQU1nSSxFQUFzQmhHLEVBQVlzRixHQUN4Q3RILEVBQU1pSSxFQUF3QmhHLEVBQWNxRixHQUM1Q3RILEVBQU1rSSxHQUE2QmhHLEVBQW1Cb0YsR0FDdER0SCxFQUFNbUksR0FBc0JoRyxFQUFZbUYsR0FJeENqSCxFQUFXbUgsRUFBaUJ1QixHQUFhbkIsR0FDekN2SCxFQUFXb0gsRUFBbUJzQixHQUFhbEIsR0FDM0N4SCxFQUFXcUgsRUFBd0JxQixHQUFhakIsR0FDaER6SCxFQUFXc0gsRUFBaUJvQixHQUFhaEIsR0FDekMxSCxFQUFXbUgsRUFBaUJ3QixHQUFnQmhCLEdBQzVDM0gsRUFBV29ILEVBQW1CdUIsR0FBZ0JmLEdBQzlDNUgsRUFBV3FILEVBQXdCc0IsR0FBZ0JkLElBQ25EN0gsRUFBV3NILEVBQWlCcUIsR0FBZ0JiLElBRTVDOUgsRUFBV3VILEVBQW1CbUIsR0FBYW5CLEdBQzNDdkgsRUFBV3dILEVBQXFCa0IsR0FBYWxCLEdBQzdDeEgsRUFBV3lILEVBQTBCaUIsR0FBYWpCLEdBQ2xEekgsRUFBVzBILEVBQW1CZ0IsR0FBYWhCLEdBQzNDMUgsRUFBV3VILEVBQW1Cb0IsR0FBZ0JwQixHQUM5Q3ZILEVBQVd3SCxFQUFxQm1CLEdBQWdCbkIsR0FDaER4SCxFQUFXeUgsRUFBMEJrQixHQUFnQmxCLEdBQ3JEekgsRUFBVzBILEVBQW1CaUIsR0FBZ0JqQixHQUM5QzFILEVBQVcySCxFQUFzQmUsR0FBYW5CLEdBQzlDdkgsRUFBVzRILEVBQXdCYyxHQUFhbEIsR0FDaER4SCxFQUFXNkgsR0FBNkJhLEdBQWFqQixHQUNyRHpILEVBQVc4SCxHQUFzQlksR0FBYWhCLEdBQzlDMUgsRUFBVzJILEVBQXNCZ0IsR0FBZ0JoQixHQUNqRDNILEVBQVc0SCxFQUF3QmUsR0FBZ0JmLEdBQ25ENUgsRUFBVzZILEdBQTZCYyxHQUFnQmQsSUFDeEQ3SCxFQUFXOEgsR0FBc0JhLEdBQWdCYixJQUVqRDlILEVBQVdpSCxFQUFPeUIsR0FBYXpCLEdBQy9CakgsRUFBV2tILEVBQXFCd0IsR0FBYXpCLEdBQzdDakgsRUFBV2lILEVBQU8wQixHQUFnQnpCLEdBQ2xDbEgsRUFBV2tILEVBQXFCeUIsR0FBZ0J6QixHQU1oRHZILEVBQU0wRCxFQUFVNUMsRUFBSzJILElBQ3JCekksRUFBTTBELEVBQVU5QyxFQUFRNkgsSUFDeEJ6SSxFQUFNMEQsRUFBVXRDLEVBQUtxSCxJQUNyQnpJLEVBQU0wRCxFQUFVN0MsRUFBVzRILElBRTNCcEksRUFBV29JLEdBQWdCTSxHQUFhTixJQUN4Q3BJLEVBQVdvSSxHQUFnQk8sR0FBZ0JOLElBQzNDckksRUFBV3FJLEdBQThCSyxHQUFhTixJQUN0RHBJLEVBQVdxSSxHQUE4Qk0sR0FBZ0JOLElBR3pELElBQUlPLEdBQXFCLENBQUNySSxFQUFRUSxFQUFLQyxFQUFNQyxFQUFPQyxFQUFPRSxFQUFZWSxFQUFLRCxFQUFXdEIsR0FvQnZGLE9BakJBVCxFQUFXNEMsRUFBVWdHLEdBQW9CTixJQUN6QzNJLEVBQU1pRCxFQUFVbEMsRUFBSTZILElBQ3BCdkksRUFBVzhHLEVBQU84QixHQUFvQk4sSUFDdEMzSSxFQUFNbUgsRUFBT3BHLEVBQUk2SCxJQUNqQnZJLEVBQVc2RyxFQUFjK0IsR0FBb0JOLElBRzdDdEksRUFBV3NJLEdBQWFNLEdBQW9CTixJQUM1QzNJLEVBQU0ySSxHQUFhNUgsRUFBSTZILElBRXZCNUksRUFBTTJJLEdBQWExSCxFQUFLNEgsSUFDeEJ4SSxFQUFXd0ksR0FBaUJJLEdBQW9CTixJQUNoRDNJLEVBQU00SSxHQUFnQjlILEVBQUtzSCxJQUMzQnBJLEVBQU00SSxHQUFnQmhJLEVBQVF3SCxJQUM5QnBJLEVBQU00SSxHQUFnQnhILEVBQUtnSCxJQUMzQnBJLEVBQU00SSxHQUFnQi9ILEVBQVd5SCxJQUUxQnZGLEVBeUZULFNBQVNtRyxHQUF1QkMsRUFBT3IrQyxFQUFPdzZDLEdBQzVDLElBQUk4RCxFQUFXOUQsRUFBTyxHQUFHVSxFQUNyQnFELEVBQVMvRCxFQUFPQSxFQUFPdnlELE9BQVMsR0FBR3dkLEVBRXZDLE9BQU8sSUFBSTQ0QyxFQURDcitDLEVBQU02bUMsT0FBT3lYLEVBQVVDLEVBQVNELEdBQ3BCOUQsR0FHSSxvQkFBWnhXLFNBQTJCQSxTQUFXQSxRQUFRVSxLQUFoRSxJQUdJOFosR0FBTyxDQUNUQyxRQUFTLEtBQ1RwWCxPQUFRLEtBQ1JxWCxZQUFhLEdBQ2IxRyxnQkFBaUIsR0FDakIyRyxhQUFhLEdBd0ZmLFNBQVNDLEdBQVNqSixHQUtoQixPQUpLNkksR0FBS0csYUEvQlosV0FFRUgsR0FBS0MsUUFBVSxDQUNicEQsTUFBT3RELEVBQU95RyxHQUFLeEcsaUJBQ25Cd0MsT0FBUXRyQyxHQUVWc3ZDLEdBQUtuWCxPQUFTLENBQ1pnVSxNQUFPVyxLQUNQeEIsT0FBUXNCLElBTVYsSUFKQSxJQUFJK0MsRUFBUSxDQUNWbEUsaUJBQWtCQSxHQUdYaG9DLEVBQUksRUFBR0EsRUFBSTZyQyxHQUFLRSxZQUFZejJELE9BQVEwcUIsSUFDM0M2ckMsR0FBS0UsWUFBWS9yQyxHQUFHLEdBQUcsQ0FDckI4ckMsUUFBU0QsR0FBS0MsUUFDZHBYLE9BQVFtWCxHQUFLblgsT0FDYndYLE1BQU9BLElBSVhMLEdBQUtHLGFBQWMsRUFVakJwMkQsR0FyTEosU0FBYTh5RCxFQUFPcjdDLEVBQU93NkMsR0FNekIsSUFMQSxJQUFJN2QsRUFBTTZkLEVBQU92eUQsT0FDYjYyRCxFQUFTLEVBQ1RDLEVBQVMsR0FDVEMsRUFBYSxHQUVWRixFQUFTbmlCLEdBQUssQ0FRbkIsSUFQQSxJQUFJcHNDLEVBQVE4cUQsRUFDUjRELEVBQWMsS0FDZHJLLEVBQVksS0FDWnNLLEVBQWMsRUFDZEMsRUFBa0IsS0FDbEJDLEdBQWdCLEVBRWJOLEVBQVNuaUIsS0FBU3NpQixFQUFjbEssRUFBTXhrRCxFQUFPaXFELEVBQU9zRSxHQUFRdEssS0FHakV3SyxFQUFXN3BELEtBQUtxbEQsRUFBT3NFLE1BR3pCLEtBQU9BLEVBQVNuaUIsSUFBUWlZLEVBQVlxSyxHQUFlbEssRUFBTXhrRCxFQUFPaXFELEVBQU9zRSxHQUFRdEssS0FFN0V5SyxFQUFjLE1BQ2QxdUQsRUFBUXFrRCxHQUVFSCxXQUNSMkssRUFBZSxFQUNmRCxFQUFrQjV1RCxHQUNUNnVELEdBQWdCLEdBQ3pCQSxJQUdGTixJQUNBSSxJQUdGLEdBQUlFLEVBQWUsRUFHakIsSUFBSyxJQUFJenNDLEVBQUltc0MsRUFBU0ksRUFBYXZzQyxFQUFJbXNDLEVBQVFuc0MsSUFDN0Nxc0MsRUFBVzdwRCxLQUFLcWxELEVBQU83bkMsUUFFcEIsQ0FHRHFzQyxFQUFXLzJELE9BQVMsSUFDdEI4MkQsRUFBTzVwRCxLQUFLaXBELEdBQXVCM0MsRUFBTXo3QyxFQUFPZy9DLElBQ2hEQSxFQUFhLElBSWZGLEdBQVVNLEVBQ1ZGLEdBQWVFLEVBRWYsSUFBSWYsRUFBUWMsRUFBZ0IzSyxFQUN4QjZLLEVBQVk3RSxFQUFPcG9ELE1BQU0wc0QsRUFBU0ksRUFBYUosR0FDbkRDLEVBQU81cEQsS0FBS2lwRCxHQUF1QkMsRUFBT3IrQyxFQUFPcS9DLEtBU3JELE9BSklMLEVBQVcvMkQsT0FBUyxHQUN0QjgyRCxFQUFPNXBELEtBQUtpcEQsR0FBdUIzQyxFQUFNejdDLEVBQU9nL0MsSUFHM0NELEVBdUhBTyxDQUFJZCxHQUFLblgsT0FBT2dVLE1BQU8xRixFQTExQmhDLFNBQWUwRixFQUFPMUYsR0FtQnBCLElBYkEsSUFBSTRKLEVBQVcvcEMsTUFBTXdCLEtBQUsyK0IsRUFBSW5ULFFBQVEsVUFBVSxTQUFVSyxHQUN4RCxPQUFPQSxFQUFFajFCLGtCQUVQNHhDLEVBQVlELEVBQVN0M0QsT0FFckJ1eUQsRUFBUyxHQUlUc0UsRUFBUyxFQUVUVyxFQUFhLEVBRVZBLEVBQWFELEdBQVcsQ0FRN0IsSUFQQSxJQUFJanZELEVBQVE4cUQsRUFDUnpHLEVBQVksS0FDWjhLLEVBQWMsRUFDZFAsRUFBa0IsS0FDbEJDLEdBQWdCLEVBQ2hCTyxHQUFxQixFQUVsQkYsRUFBYUQsSUFBYzVLLEVBQVlHLEVBQU14a0QsRUFBT2d2RCxFQUFTRSxPQUNsRWx2RCxFQUFRcWtELEdBRUVILFdBQ1IySyxFQUFlLEVBQ2ZPLEVBQW9CLEVBQ3BCUixFQUFrQjV1RCxHQUNUNnVELEdBQWdCLElBQ3pCQSxHQUFnQkcsRUFBU0UsR0FBWXgzRCxPQUNyQzAzRCxLQUdGRCxHQUFlSCxFQUFTRSxHQUFZeDNELE9BQ3BDNjJELEdBQVVTLEVBQVNFLEdBQVl4M0QsT0FDL0J3M0QsSUFHRUwsRUFBZSxJQU1uQk4sR0FBVU0sRUFDVkssR0FBY0UsRUFDZEQsR0FBZU4sRUFHZjVFLEVBQU9ybEQsS0FBSyxDQUNWcS9DLEVBQUcySyxFQUFnQjNLLEVBRW5CeFAsRUFBRzJRLEVBQUk5TyxPQUFPaVksRUFBU1ksRUFBYUEsR0FFcEN4RSxFQUFHNEQsRUFBU1ksRUFFWmo2QyxFQUFHcTVDLEtBS1AsT0FBT3RFLEVBdXhCNEJvRixDQUFNcEIsR0FBS0MsUUFBUXBELE1BQU8xRixJQStDL0Q5WixFQUFRZ2tCLEtBdENSLFNBQWNsSyxHQUtaLElBSkEsSUFBSXJ1QyxFQUFPdGYsVUFBVUMsT0FBUyxRQUFzQkksSUFBakJMLFVBQVUsR0FBbUJBLFVBQVUsR0FBSyxLQUMzRXd5RCxFQUFTb0UsR0FBU2pKLEdBQ2xCbUssRUFBVyxHQUVObnRDLEVBQUksRUFBR0EsRUFBSTZuQyxFQUFPdnlELE9BQVEwcUIsSUFBSyxDQUN0QyxJQUFJMGhDLEVBQVFtRyxFQUFPN25DLElBRWYwaEMsRUFBTXFHLFFBQVlwekMsR0FBUStzQyxFQUFNRyxJQUFNbHRDLEdBQ3hDdzRDLEVBQVMzcUQsS0FBS2svQyxFQUFNK0csWUFJeEIsT0FBTzBFLHd0QkM5eUZULElBQUk1RSxFQUFJLElBQ0o2RSxFQUFRLEdBQUo3RSxFQUNKOEUsRUFBUSxHQUFKRCxFQUNKRSxFQUFRLEdBQUpELEVBdUpSLFNBQVNFLEVBQU8xa0IsRUFBSTJrQixFQUFPbmYsRUFBR0UsR0FDNUIsSUFBSWtmLEVBQVdELEdBQWEsSUFBSm5mLEVBQ3hCLE9BQU83dEMsS0FBS2lXLE1BQU1veUIsRUFBS3dGLEdBQUssSUFBTUUsR0FBUWtmLEVBQVcsSUFBTSxJQXZJN0R4a0IsRUFBT0MsUUFBVSxTQUFTbUssRUFBSy84QyxHQUM3QkEsRUFBVUEsR0FBVyxHQUNyQixJQThHZXV5QyxFQUNYMmtCLEVBL0dBNzRDLFNBQWMwK0IsRUFDbEIsR0FBYSxXQUFUMStCLEdBQXFCMCtCLEVBQUkvOUMsT0FBUyxFQUNwQyxPQWtCSixTQUFlMHRELEdBRWIsTUFEQUEsRUFBTXhuQixPQUFPd25CLElBQ0wxdEQsT0FBUyxLQUFqQixDQUdBLElBQUkrNkMsRUFBUSxtSUFBbUlxZCxLQUM3STFLLEdBRUYsR0FBSzNTLEVBQUwsQ0FHQSxJQUFJaEMsRUFBSXNmLFdBQVd0ZCxFQUFNLElBRXpCLFFBRFlBLEVBQU0sSUFBTSxNQUFNcDFCLGVBRTVCLElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxNQUNMLElBQUssS0FDTCxJQUFLLElBQ0gsT0F6REVxeUMsU0F5REtqZixFQUNULElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxJQUNILE9BOURFaWYsT0E4REtqZixFQUNULElBQUssT0FDTCxJQUFLLE1BQ0wsSUFBSyxJQUNILE9BQU9BLEVBQUlpZixFQUNiLElBQUssUUFDTCxJQUFLLE9BQ0wsSUFBSyxNQUNMLElBQUssS0FDTCxJQUFLLElBQ0gsT0FBT2pmLEVBQUlnZixFQUNiLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLElBQ0gsT0FBT2hmLEVBQUkrZSxFQUNiLElBQUssVUFDTCxJQUFLLFNBQ0wsSUFBSyxPQUNMLElBQUssTUFDTCxJQUFLLElBQ0gsT0FBTy9lLEVBQUlrYSxFQUNiLElBQUssZUFDTCxJQUFLLGNBQ0wsSUFBSyxRQUNMLElBQUssT0FDTCxJQUFLLEtBQ0gsT0FBT2xhLEVBQ1QsUUFDRSxVQXZFS21LLENBQU1uRixHQUNSLEdBQWEsV0FBVDErQixHQUFxQnNVLFNBQVNvcUIsR0FDdkMsT0FBTy84QyxFQUFRczNELE1BMEdGL2tCLEVBMUdpQndLLEdBMkc1Qm1hLEVBQVFodEQsS0FBS3dtQyxJQUFJNkIsS0FDUnlrQixFQUNKQyxFQUFPMWtCLEVBQUkya0IsRUFBT0YsRUFBRyxPQUUxQkUsR0FBU0gsRUFDSkUsRUFBTzFrQixFQUFJMmtCLEVBQU9ILEVBQUcsUUFFMUJHLEdBQVNKLEVBQ0pHLEVBQU8xa0IsRUFBSTJrQixFQUFPSixFQUFHLFVBRTFCSSxHQUFTakYsRUFDSmdGLEVBQU8xa0IsRUFBSTJrQixFQUFPakYsRUFBRyxVQUV2QjFmLEVBQUssT0F2Q2QsU0FBa0JBLEdBQ2hCLElBQUkya0IsRUFBUWh0RCxLQUFLd21DLElBQUk2QixHQUNyQixPQUFJMmtCLEdBQVNGLEVBQ0o5c0QsS0FBS2lXLE1BQU1veUIsRUFBS3lrQixHQUFLLElBRTFCRSxHQUFTSCxFQUNKN3NELEtBQUtpVyxNQUFNb3lCLEVBQUt3a0IsR0FBSyxJQUUxQkcsR0FBU0osRUFDSjVzRCxLQUFLaVcsTUFBTW95QixFQUFLdWtCLEdBQUssSUFFMUJJLEdBQVNqRixFQUNKL25ELEtBQUtpVyxNQUFNb3lCLEVBQUswZixHQUFLLElBRXZCMWYsRUFBSyxLQS9GMkJnbEIsQ0FBU3hhLEdBRWhELE1BQU0sSUFBSXA5QyxNQUNSLHdEQUNFKzRDLEtBQUtDLFVBQVVvRSxtQkMzQnJCbkssRUFBUVUsT0FBUyxTQUFVcGxCLEdBQ3pCLElBQUl3K0IsRUFBTSxHQUVWLElBQUssSUFBSWhqQyxLQUFLd0UsRUFDUkEsRUFBSW95QixlQUFlNTJCLEtBQ2pCZ2pDLEVBQUkxdEQsU0FBUTB0RCxHQUFPLEtBQ3ZCQSxHQUFPalUsbUJBQW1CL3VCLEdBQUssSUFBTSt1QixtQkFBbUJ2cUIsRUFBSXhFLEtBSWhFLE9BQU9nakMsR0FVVDlaLEVBQVFpQixPQUFTLFNBQVMyakIsR0FHeEIsSUFGQSxJQUFJQyxFQUFNLEdBQ05DLEVBQVFGLEVBQUc3WixNQUFNLEtBQ1pqMEIsRUFBSSxFQUFHcTRCLEVBQUkyVixFQUFNMTRELE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQUssQ0FDNUMsSUFBSWl1QyxFQUFPRCxFQUFNaHVDLEdBQUdpMEIsTUFBTSxLQUMxQjhaLEVBQUlHLG1CQUFtQkQsRUFBSyxLQUFPQyxtQkFBbUJELEVBQUssSUFFN0QsT0FBT0YsYUM1QlQsSUFBSUksRUFBSywwT0FFTEMsRUFBUSxDQUNSLFNBQVUsV0FBWSxZQUFhLFdBQVksT0FBUSxXQUFZLE9BQVEsT0FBUSxXQUFZLE9BQVEsWUFBYSxPQUFRLFFBQVMsVUFHeklubEIsRUFBT0MsUUFBVSxTQUFrQjhaLEdBQy9CLElBNkJvQnhOLEVBRWhCMUIsRUEvQkFxSCxFQUFNNkgsRUFDTnFMLEVBQUlyTCxFQUFJdGlELFFBQVEsS0FDaEJvUyxFQUFJa3dDLEVBQUl0aUQsUUFBUSxNQUVWLEdBQU4ydEQsSUFBaUIsR0FBTnY3QyxJQUNYa3dDLEVBQU1BLEVBQUk5WSxVQUFVLEVBQUdta0IsR0FBS3JMLEVBQUk5WSxVQUFVbWtCLEVBQUd2N0MsR0FBRys4QixRQUFRLEtBQU0sS0FBT21ULEVBQUk5WSxVQUFVcDNCLEVBQUdrd0MsRUFBSTF0RCxTQU85RixJQUpBLElBbUNtQjQvQyxFQUNmaEcsRUFwQ0FrZSxFQUFJZSxFQUFHVCxLQUFLMUssR0FBTyxJQUNuQjFPLEVBQU0sR0FDTnQwQixFQUFJLEdBRURBLEtBQ0hzMEIsRUFBSThaLEVBQU1wdUMsSUFBTW90QyxFQUFFcHRDLElBQU0sR0FhNUIsT0FWVSxHQUFOcXVDLElBQWlCLEdBQU52N0MsSUFDWHdoQyxFQUFJaEYsT0FBUzZMLEVBQ2I3RyxFQUFJUyxLQUFPVCxFQUFJUyxLQUFLN0ssVUFBVSxFQUFHb0ssRUFBSVMsS0FBS3ovQyxPQUFTLEdBQUd1NkMsUUFBUSxLQUFNLEtBQ3BFeUUsRUFBSWdhLFVBQVloYSxFQUFJZ2EsVUFBVXplLFFBQVEsSUFBSyxJQUFJQSxRQUFRLElBQUssSUFBSUEsUUFBUSxLQUFNLEtBQzlFeUUsRUFBSWlhLFNBQVUsR0FHbEJqYSxFQUFJa2EsV0FNZ0JoWixFQU5XbEIsRUFBVSxLQVFyQ1IsRUFBUTBCLEVBQUszRixRQUROLFdBQ29CLEtBQUtvRSxNQUFNLEtBRWpCLEtBQXJCdUIsRUFBS3RCLE9BQU8sRUFBRyxJQUE2QixJQUFoQnNCLEVBQUtsZ0QsUUFDakN3K0MsRUFBTXpXLE9BQU8sRUFBRyxHQUVtQixLQUFuQ21ZLEVBQUt0QixPQUFPc0IsRUFBS2xnRCxPQUFTLEVBQUcsSUFDN0J3K0MsRUFBTXpXLE9BQU95VyxFQUFNeCtDLE9BQVMsRUFBRyxHQUc1QncrQyxHQWhCUFEsRUFBSW1hLFVBbUJldlosRUFuQlVaLEVBQVcsTUFvQnBDcEYsRUFBTyxHQUVYZ0csRUFBTXJGLFFBQVEsNkJBQTZCLFNBQVU2ZSxFQUFJL2MsRUFBSWdkLEdBQ3JEaGQsSUFDQXpDLEVBQUt5QyxHQUFNZ2QsTUFJWnpmLEdBMUJBb0YsK0JDdkNYaDlDLE9BQU9DLGVBQWUyeEMsRUFBUyxhQUFjLENBQUVudEMsT0FBTyxJQUN0RG10QyxFQUFRMGxCLEdBQUsxbEIsRUFBUW1MLE9BQVNuTCxFQUFRMmxCLFFBQVUzbEIsRUFBUXFMLGNBQVcsRUFDbkUsTUFBTXVhLEVBQVEsRUFBUSxNQUNoQkMsRUFBWSxFQUFRLE1BQ3BCN2MsRUFBUSxFQUFRLEtBQVIsQ0FBaUIsb0JBSS9CakosRUFBT0MsUUFBVUEsRUFBVThsQixFQUkzQixNQUFNQyxFQUFTL2xCLEVBQVFnbUIsU0FBVyxHQUNsQyxTQUFTRixFQUFPMWEsRUFBS2hsQyxHQUNFLGlCQUFSZ2xDLElBQ1BobEMsRUFBT2dsQyxFQUNQQSxPQUFNNStDLEdBRVY0WixFQUFPQSxHQUFRLEdBQ2YsTUFBTTYvQyxFQUFTTCxFQUFNdGYsSUFBSThFLEVBQUtobEMsRUFBS2ttQyxNQUFRLGNBQ3JDbEcsRUFBUzZmLEVBQU83ZixPQUNoQnhDLEVBQUtxaUIsRUFBT3JpQixHQUNaMEksRUFBTzJaLEVBQU8zWixLQUNkNFosRUFBZ0JILEVBQU1uaUIsSUFBTzBJLEtBQVF5WixFQUFNbmlCLEdBQVUsS0FLM0QsSUFBSThoQixFQWVKLE9BbkJzQnQvQyxFQUFLKy9DLFVBQ3ZCLy9DLEVBQUssMEJBQ0wsSUFBVUEsRUFBS2dnRCxXQUNmRixHQUdBbGQsRUFBTSwrQkFBZ0M1QyxHQUN0Q3NmLEVBQUssSUFBSUcsRUFBVUYsUUFBUXZmLEVBQVFoZ0MsS0FHOUIyL0MsRUFBTW5pQixLQUNQb0YsRUFBTSx5QkFBMEI1QyxHQUNoQzJmLEVBQU1uaUIsR0FBTSxJQUFJaWlCLEVBQVVGLFFBQVF2ZixFQUFRaGdDLElBRTlDcy9DLEVBQUtLLEVBQU1uaUIsSUFFWHFpQixFQUFPamEsUUFBVTVsQyxFQUFLNGxDLFFBQ3RCNWxDLEVBQUs0bEMsTUFBUWlhLEVBQU9WLFVBRWpCRyxFQUFHN1gsT0FBT29ZLEVBQU8zWixLQUFNbG1DLEdBRWxDNDVCLEVBQVEwbEIsR0FBS0ksRUFNYixJQUFJTyxFQUFxQixFQUFRLE1BQ2pDajRELE9BQU9DLGVBQWUyeEMsRUFBUyxXQUFZLENBQUV6eEMsWUFBWSxFQUFNRCxJQUFLLFdBQWMsT0FBTyszRCxFQUFtQmhiLFlBTzVHckwsRUFBUXNtQixRQUFVUixFQU1sQixJQUFJUyxFQUFZLEVBQVEsTUFDeEJuNEQsT0FBT0MsZUFBZTJ4QyxFQUFTLFVBQVcsQ0FBRXp4QyxZQUFZLEVBQU1ELElBQUssV0FBYyxPQUFPaTRELEVBQVVaLFdBQ2xHLElBQUlhLEVBQVcsRUFBUSxNQUN2QnA0RCxPQUFPQyxlQUFlMnhDLEVBQVMsU0FBVSxDQUFFenhDLFlBQVksRUFBTUQsSUFBSyxXQUFjLE9BQU9rNEQsRUFBU3JiLFVBQ2hHbkwsRUFBUXdHLFFBQVVzZiwrQkNyRWxCMTNELE9BQU9DLGVBQWUyeEMsRUFBUyxhQUFjLENBQUVudEMsT0FBTyxJQUN0RG10QyxFQUFRMmxCLGFBQVUsRUFDbEIsTUFBTWMsRUFBTSxFQUFRLE1BQ2RELEVBQVcsRUFBUSxNQUNuQmhiLEVBQVMsRUFBUSxNQUNqQmtiLEVBQU8sRUFBUSxNQUNmaG5CLEVBQVUsRUFBUSxNQUNsQmluQixFQUFpQixFQUFRLE1BQ3pCM2QsRUFBUSxFQUFRLEtBQVIsQ0FBaUIsNEJBQy9CLE1BQU0yYyxVQUFnQmdCLEVBQWVDLG1CQUNqQ3hoQixZQUFZZ0csRUFBS2hsQyxHQUNidWxDLFFBQ0F0L0MsS0FBS3c2RCxLQUFPLEdBQ1p4NkQsS0FBS3k2RCxLQUFPLEdBQ1IxYixHQUFPLGlCQUFvQkEsSUFDM0JobEMsRUFBT2dsQyxFQUNQQSxPQUFNNStDLElBRVY0WixFQUFPQSxHQUFRLElBQ1ZrbUMsS0FBT2xtQyxFQUFLa21DLE1BQVEsYUFDekJqZ0QsS0FBSytaLEtBQU9BLEVBQ1ovWixLQUFLMDZELGNBQW1DLElBQXRCM2dELEVBQUsyZ0QsY0FDdkIxNkQsS0FBSzI2RCxxQkFBcUI1Z0QsRUFBSzRnRCxzQkFBd0JDLEVBQUFBLEdBQ3ZENTZELEtBQUs2NkQsa0JBQWtCOWdELEVBQUs4Z0QsbUJBQXFCLEtBQ2pENzZELEtBQUs4NkQscUJBQXFCL2dELEVBQUsrZ0Qsc0JBQXdCLEtBQ3ZEOTZELEtBQUsrNkQsb0JBQW9CaGhELEVBQUtnaEQscUJBQXVCLElBQ3JELzZELEtBQUtnN0QsUUFBVSxJQUFJM25CLEVBQVEsQ0FDdkIzbEIsSUFBSzF0QixLQUFLNjZELG9CQUNWM3ZELElBQUtsTCxLQUFLODZELHVCQUNWdG5CLE9BQVF4ekMsS0FBSys2RCx3QkFFakIvNkQsS0FBS3FuRCxRQUFRLE1BQVF0dEMsRUFBS3N0QyxRQUFVLElBQVF0dEMsRUFBS3N0QyxTQUNqRHJuRCxLQUFLaTdELFlBQWMsU0FDbkJqN0QsS0FBSysrQyxJQUFNQSxFQUNYLE1BQU1tYyxFQUFVbmhELEVBQUtvbEMsUUFBVUEsRUFDL0JuL0MsS0FBS203RCxRQUFVLElBQUlELEVBQVFFLFFBQzNCcDdELEtBQUtxN0QsUUFBVSxJQUFJSCxFQUFRSSxRQUMzQnQ3RCxLQUFLdTdELGNBQW9DLElBQXJCeGhELEVBQUt5aEQsWUFDckJ4N0QsS0FBS3U3RCxjQUNMdjdELEtBQUtzUixPQUVib3BELGFBQWE1ZCxHQUNULE9BQUtoOUMsVUFBVUMsUUFFZkMsS0FBS3k3RCxnQkFBa0IzZSxFQUNoQjk4QyxNQUZJQSxLQUFLeTdELGNBSXBCZCxxQkFBcUI3ZCxHQUNqQixZQUFVMzhDLElBQU4yOEMsRUFDTzk4QyxLQUFLMDdELHVCQUNoQjE3RCxLQUFLMDdELHNCQUF3QjVlLEVBQ3RCOThDLE1BRVg2NkQsa0JBQWtCL2QsR0FDZCxJQUFJejlDLEVBQ0osWUFBVWMsSUFBTjI4QyxFQUNPOThDLEtBQUsyN0Qsb0JBQ2hCMzdELEtBQUsyN0QsbUJBQXFCN2UsRUFDRixRQUF2Qno5QyxFQUFLVyxLQUFLZzdELGVBQTRCLElBQVAzN0QsR0FBeUJBLEVBQUc0MEMsT0FBTzZJLEdBQzVEOThDLE1BRVgrNkQsb0JBQW9CamUsR0FDaEIsSUFBSXo5QyxFQUNKLFlBQVVjLElBQU4yOEMsRUFDTzk4QyxLQUFLNDdELHNCQUNoQjU3RCxLQUFLNDdELHFCQUF1QjllLEVBQ0osUUFBdkJ6OUMsRUFBS1csS0FBS2c3RCxlQUE0QixJQUFQMzdELEdBQXlCQSxFQUFHODBDLFVBQVUySSxHQUMvRDk4QyxNQUVYODZELHFCQUFxQmhlLEdBQ2pCLElBQUl6OUMsRUFDSixZQUFVYyxJQUFOMjhDLEVBQ085OEMsS0FBSzY3RCx1QkFDaEI3N0QsS0FBSzY3RCxzQkFBd0IvZSxFQUNMLFFBQXZCejlDLEVBQUtXLEtBQUtnN0QsZUFBNEIsSUFBUDM3RCxHQUF5QkEsRUFBRzYwQyxPQUFPNEksR0FDNUQ5OEMsTUFFWHFuRCxRQUFRdkssR0FDSixPQUFLaDlDLFVBQVVDLFFBRWZDLEtBQUs4N0QsU0FBV2hmLEVBQ1Q5OEMsTUFGSUEsS0FBSzg3RCxTQVVwQkMsd0JBRVMvN0QsS0FBS2c4RCxlQUNOaDhELEtBQUt5N0QsZUFDcUIsSUFBMUJ6N0QsS0FBS2c3RCxRQUFRdm5CLFVBRWJ6ekMsS0FBS2k4RCxZQVViM3FELEtBQUtpa0MsR0FFRCxHQURBb0gsRUFBTSxnQkFBaUIzOEMsS0FBS2k3RCxjQUN2Qmo3RCxLQUFLaTdELFlBQVk5dkQsUUFBUSxRQUMxQixPQUFPbkwsS0FDWDI4QyxFQUFNLGFBQWMzOEMsS0FBSysrQyxLQUN6Qi8rQyxLQUFLazhELE9BQVM5QixFQUFJcDZELEtBQUsrK0MsSUFBSy8rQyxLQUFLK1osTUFDakMsTUFBTXluQyxFQUFTeGhELEtBQUtrOEQsT0FDZDdlLEVBQU9yOUMsS0FDYkEsS0FBS2k3RCxZQUFjLFVBQ25CajdELEtBQUttOEQsZUFBZ0IsRUFFckIsTUFBTUMsRUFBaUIvQixFQUFLL2tCLEdBQUdrTSxFQUFRLFFBQVEsV0FDM0NuRSxFQUFLME0sU0FDTHhVLEdBQU1BLE9BR0o4bUIsRUFBV2hDLEVBQUsva0IsR0FBR2tNLEVBQVEsU0FBVTdyQyxJQUN2Q2duQyxFQUFNLFNBQ05VLEVBQUs3VyxVQUNMNlcsRUFBSzRkLFlBQWMsU0FDbkJqN0QsS0FBS3M4RCxhQUFhLFFBQVMzbUQsR0FDdkI0L0IsRUFDQUEsRUFBRzUvQixHQUlIMG5DLEVBQUswZSwwQkFHYixJQUFJLElBQVUvN0QsS0FBSzg3RCxTQUFVLENBQ3pCLE1BQU16VSxFQUFVcm5ELEtBQUs4N0QsU0FDckJuZixFQUFNLHdDQUF5QzBLLEdBQy9CLElBQVpBLEdBQ0ErVSxJQUdKLE1BQU1HLEVBQVE3MkQsWUFBVyxLQUNyQmkzQyxFQUFNLHFDQUFzQzBLLEdBQzVDK1UsSUFDQTVhLEVBQU85dkMsUUFDUDh2QyxFQUFPcmdELEtBQUssUUFBUyxJQUFJVCxNQUFNLGNBQ2hDMm1ELEdBQ0NybkQsS0FBSytaLEtBQUt1cEMsV0FDVmlaLEVBQU1oWixRQUVWdmpELEtBQUt5NkQsS0FBS3h0RCxNQUFLLFdBQ1gzSCxhQUFhaTNELE1BS3JCLE9BRkF2OEQsS0FBS3k2RCxLQUFLeHRELEtBQUttdkQsR0FDZnA4RCxLQUFLeTZELEtBQUt4dEQsS0FBS292RCxHQUNScjhELEtBUVhpNkQsUUFBUTFrQixHQUNKLE9BQU92MUMsS0FBS3NSLEtBQUtpa0MsR0FPckJ3VSxTQUNJcE4sRUFBTSxRQUVOMzhDLEtBQUt3bUMsVUFFTHhtQyxLQUFLaTdELFlBQWMsT0FDbkJqN0QsS0FBS3M4RCxhQUFhLFFBRWxCLE1BQU05YSxFQUFTeGhELEtBQUtrOEQsT0FDcEJsOEQsS0FBS3k2RCxLQUFLeHRELEtBQUtvdEQsRUFBSy9rQixHQUFHa00sRUFBUSxPQUFReGhELEtBQUt3OEQsT0FBT25vRCxLQUFLclUsT0FBUXE2RCxFQUFLL2tCLEdBQUdrTSxFQUFRLE9BQVF4aEQsS0FBS3k4RCxPQUFPcG9ELEtBQUtyVSxPQUFRcTZELEVBQUsva0IsR0FBR2tNLEVBQVEsUUFBU3hoRCxLQUFLd2lELFFBQVFudUMsS0FBS3JVLE9BQVFxNkQsRUFBSy9rQixHQUFHa00sRUFBUSxRQUFTeGhELEtBQUswaUQsUUFBUXJ1QyxLQUFLclUsT0FBUXE2RCxFQUFLL2tCLEdBQUd0MUMsS0FBS3E3RCxRQUFTLFVBQVdyN0QsS0FBSzA4RCxVQUFVcm9ELEtBQUtyVSxRQU9oUnc4RCxTQUNJeDhELEtBQUtzOEQsYUFBYSxRQU90QkcsT0FBTzlpQixHQUNIMzVDLEtBQUtxN0QsUUFBUXIwRCxJQUFJMnlDLEdBT3JCK2lCLFVBQVUzWixHQUNOL2lELEtBQUtzOEQsYUFBYSxTQUFVdlosR0FPaENQLFFBQVE3c0MsR0FDSmduQyxFQUFNLFFBQVNobkMsR0FDZjNWLEtBQUtzOEQsYUFBYSxRQUFTM21ELEdBUS9CNnJDLE9BQU9tYixFQUFLNWlELEdBQ1IsSUFBSXluQyxFQUFTeGhELEtBQUt3NkQsS0FBS21DLEdBS3ZCLE9BSktuYixJQUNEQSxFQUFTLElBQUkyWSxFQUFTcmIsT0FBTzkrQyxLQUFNMjhELEVBQUs1aUQsR0FDeEMvWixLQUFLdzZELEtBQUttQyxHQUFPbmIsR0FFZEEsRUFRWG9iLFNBQVNwYixHQUNMLE1BQU1nWixFQUFPejRELE9BQU9pZSxLQUFLaGdCLEtBQUt3NkQsTUFDOUIsSUFBSyxNQUFNbUMsS0FBT25DLEVBRWQsR0FEZXg2RCxLQUFLdzZELEtBQUttQyxHQUNkRSxPQUVQLFlBREFsZ0IsRUFBTSw0Q0FBNkNnZ0IsR0FJM0QzOEQsS0FBSzg4RCxTQVFUQyxRQUFRaGEsR0FDSnBHLEVBQU0sb0JBQXFCb0csR0FDM0IsTUFBTWdKLEVBQWlCL3JELEtBQUttN0QsUUFBUTltQixPQUFPME8sR0FDM0MsSUFBSyxJQUFJdDRCLEVBQUksRUFBR0EsRUFBSXNoQyxFQUFlaHNELE9BQVEwcUIsSUFDdkN6cUIsS0FBS2s4RCxPQUFPMVksTUFBTXVJLEVBQWV0aEMsR0FBSXM0QixFQUFPaGlELFNBUXBEeWxDLFVBQ0ltVyxFQUFNLFdBQ04zOEMsS0FBS3k2RCxLQUFLcndELFNBQVM0eUQsR0FBZUEsTUFDbENoOUQsS0FBS3k2RCxLQUFLMTZELE9BQVMsRUFDbkJDLEtBQUtxN0QsUUFBUTE2RCxVQU9qQm04RCxTQUNJbmdCLEVBQU0sY0FDTjM4QyxLQUFLbThELGVBQWdCLEVBQ3JCbjhELEtBQUtnOEQsZUFBZ0IsRUFDakIsWUFBY2g4RCxLQUFLaTdELGFBR25CajdELEtBQUt3bUMsVUFFVHhtQyxLQUFLZzdELFFBQVFobkIsUUFDYmgwQyxLQUFLaTdELFlBQWMsU0FDZmo3RCxLQUFLazhELFFBQ0xsOEQsS0FBS2s4RCxPQUFPeHFELFFBT3BCNDlCLGFBQ0ksT0FBT3R2QyxLQUFLODhELFNBT2hCcGEsUUFBUWtCLEdBQ0pqSCxFQUFNLFdBQ04zOEMsS0FBS3dtQyxVQUNMeG1DLEtBQUtnN0QsUUFBUWhuQixRQUNiaDBDLEtBQUtpN0QsWUFBYyxTQUNuQmo3RCxLQUFLczhELGFBQWEsUUFBUzFZLEdBQ3ZCNWpELEtBQUt5N0QsZ0JBQWtCejdELEtBQUttOEQsZUFDNUJuOEQsS0FBS2k4RCxZQVFiQSxZQUNJLEdBQUlqOEQsS0FBS2c4RCxlQUFpQmg4RCxLQUFLbThELGNBQzNCLE9BQU9uOEQsS0FDWCxNQUFNcTlDLEVBQU9yOUMsS0FDYixHQUFJQSxLQUFLZzdELFFBQVF2bkIsVUFBWXp6QyxLQUFLMDdELHNCQUM5Qi9lLEVBQU0sb0JBQ04zOEMsS0FBS2c3RCxRQUFRaG5CLFFBQ2JoMEMsS0FBS3M4RCxhQUFhLG9CQUNsQnQ4RCxLQUFLZzhELGVBQWdCLE1BRXBCLENBQ0QsTUFBTWlCLEVBQVFqOUQsS0FBS2c3RCxRQUFRcG5CLFdBQzNCK0ksRUFBTSwwQ0FBMkNzZ0IsR0FDakRqOUQsS0FBS2c4RCxlQUFnQixFQUNyQixNQUFNTyxFQUFRNzJELFlBQVcsS0FDakIyM0MsRUFBSzhlLGdCQUVUeGYsRUFBTSx3QkFDTjM4QyxLQUFLczhELGFBQWEsb0JBQXFCamYsRUFBSzJkLFFBQVF2bkIsVUFFaEQ0SixFQUFLOGUsZUFFVDllLEVBQUsvckMsTUFBTXFFLElBQ0hBLEdBQ0FnbkMsRUFBTSwyQkFDTlUsRUFBSzJlLGVBQWdCLEVBQ3JCM2UsRUFBSzRlLFlBQ0xqOEQsS0FBS3M4RCxhQUFhLGtCQUFtQjNtRCxLQUdyQ2duQyxFQUFNLHFCQUNOVSxFQUFLNmYscUJBR2RELEdBQ0NqOUQsS0FBSytaLEtBQUt1cEMsV0FDVmlaLEVBQU1oWixRQUVWdmpELEtBQUt5NkQsS0FBS3h0RCxNQUFLLFdBQ1gzSCxhQUFhaTNELE9BU3pCVyxjQUNJLE1BQU1DLEVBQVVuOUQsS0FBS2c3RCxRQUFRdm5CLFNBQzdCenpDLEtBQUtnOEQsZUFBZ0IsRUFDckJoOEQsS0FBS2c3RCxRQUFRaG5CLFFBQ2JoMEMsS0FBS3M4RCxhQUFhLFlBQWFhLElBR3ZDeHBCLEVBQVEybEIsUUFBVUEsNkJDclhsQnYzRCxPQUFPQyxlQUFlMnhDLEVBQVMsYUFBYyxDQUFFbnRDLE9BQU8sSUFDdERtdEMsRUFBUTJCLFFBQUssRUFPYjNCLEVBQVEyQixHQU5SLFNBQVlybUIsRUFBS2k3QixFQUFJM1UsR0FFakIsT0FEQXRtQixFQUFJcW1CLEdBQUc0VSxFQUFJM1UsR0FDSixXQUNIdG1CLEVBQUl5bUIsSUFBSXdVLEVBQUkzVSxrQ0NMcEJ4ekMsT0FBT0MsZUFBZTJ4QyxFQUFTLGFBQWMsQ0FBRW50QyxPQUFPLElBQ3REbXRDLEVBQVFtTCxZQUFTLEVBQ2pCLE1BQU1rYixFQUFxQixFQUFRLE1BQzdCSyxFQUFPLEVBQVEsTUFDZkMsRUFBaUIsRUFBUSxNQUN6QjNkLEVBQVEsRUFBUSxLQUFSLENBQWlCLDJCQUt6QnlnQixFQUFrQnI3RCxPQUFPdXRELE9BQU8sQ0FDbEMySyxRQUFTLEVBQ1RvRCxjQUFlLEVBQ2YvdEIsV0FBWSxFQUNaZ3VCLGNBQWUsRUFFZkMsWUFBYSxFQUNiNW5CLGVBQWdCLElBRXBCLE1BQU1tSixVQUFld2IsRUFBZUMsbUJBTWhDeGhCLFlBQVlzZ0IsRUFBSXNELEVBQUs1aUQsR0FDakJ1bEMsUUFDQXQvQyxLQUFLdzlELGNBQWdCLEdBQ3JCeDlELEtBQUt5OUQsV0FBYSxHQUNsQno5RCxLQUFLMDlELElBQU0sRUFDWDE5RCxLQUFLMjlELEtBQU8sR0FDWjM5RCxLQUFLNDlELE1BQVEsR0FDYjU5RCxLQUFLcTVELEdBQUtBLEVBQ1ZyNUQsS0FBSzI4RCxJQUFNQSxFQUNYMzhELEtBQUswOUQsSUFBTSxFQUNYMTlELEtBQUsyOUQsS0FBTyxHQUNaMzlELEtBQUt3OUQsY0FBZ0IsR0FDckJ4OUQsS0FBS3k5RCxXQUFhLEdBQ2xCejlELEtBQUs2OUQsV0FBWSxFQUNqQjc5RCxLQUFLODlELGNBQWUsRUFDcEI5OUQsS0FBSzQ5RCxNQUFRLEdBQ1Q3akQsR0FBUUEsRUFBS2drRCxPQUNiLzlELEtBQUsrOUQsS0FBT2hrRCxFQUFLZ2tELE1BRWpCLzlELEtBQUtxNUQsR0FBR2tDLGNBQ1J2N0QsS0FBS3NSLE9BT2Iwc0QsWUFDSSxHQUFJaCtELEtBQUt5NkQsS0FDTCxPQUNKLE1BQU1wQixFQUFLcjVELEtBQUtxNUQsR0FDaEJyNUQsS0FBS3k2RCxLQUFPLENBQ1JKLEVBQUsva0IsR0FBRytqQixFQUFJLE9BQVFyNUQsS0FBSytwRCxPQUFPMTFDLEtBQUtyVSxPQUNyQ3E2RCxFQUFLL2tCLEdBQUcrakIsRUFBSSxTQUFVcjVELEtBQUtpK0QsU0FBUzVwRCxLQUFLclUsT0FDekNxNkQsRUFBSy9rQixHQUFHK2pCLEVBQUksUUFBU3I1RCxLQUFLd2lELFFBQVFudUMsS0FBS3JVLE9BQ3ZDcTZELEVBQUsva0IsR0FBRytqQixFQUFJLFFBQVNyNUQsS0FBSzBpRCxRQUFRcnVDLEtBQUtyVSxRQU0vQyxhQUNJLFFBQVNBLEtBQUt5NkQsS0FPbEJSLFVBQ0ksT0FBSWo2RCxLQUFLNjlELFlBRVQ3OUQsS0FBS2crRCxZQUNBaCtELEtBQUtxNUQsR0FBa0IsZUFDeEJyNUQsS0FBS3E1RCxHQUFHL25ELE9BQ1IsU0FBV3RSLEtBQUtxNUQsR0FBRzRCLGFBQ25CajdELEtBQUsrcEQsVUFMRS9wRCxLQVdmc1IsT0FDSSxPQUFPdFIsS0FBS2k2RCxVQVFoQi9YLFFBQVF0aUQsR0FHSixPQUZBQSxFQUFLKzlDLFFBQVEsV0FDYjM5QyxLQUFLbUIsS0FBS2pCLE1BQU1GLEtBQU1KLEdBQ2ZJLEtBU1htQixLQUFLK29ELEtBQU90cUQsR0FDUixHQUFJdzlELEVBQWdCL2IsZUFBZTZJLEdBQy9CLE1BQU0sSUFBSXhwRCxNQUFNLElBQU13cEQsRUFBSyw4QkFFL0J0cUQsRUFBSys5QyxRQUFRdU0sR0FDYixNQUFNbkgsRUFBUyxDQUNYM2pDLEtBQU00NkMsRUFBbUJrRSxXQUFXQyxNQUNwQ3hrQixLQUFNLzVDLEVBRVYsUUFBaUIsSUFDakJtakQsRUFBT2hpRCxRQUFRMGlELFVBQW1DLElBQXhCempELEtBQUs0OUQsTUFBTW5hLFNBRWpDLG1CQUFzQjdqRCxFQUFLQSxFQUFLRyxPQUFTLEtBQ3pDNDhDLEVBQU0saUNBQWtDMzhDLEtBQUswOUQsS0FDN0MxOUQsS0FBSzI5RCxLQUFLMzlELEtBQUswOUQsS0FBTzk5RCxFQUFLdytELE1BQzNCcmIsRUFBT3hMLEdBQUt2M0MsS0FBSzA5RCxPQUVyQixNQUFNVyxFQUFzQnIrRCxLQUFLcTVELEdBQUc2QyxRQUNoQ2w4RCxLQUFLcTVELEdBQUc2QyxPQUFPamIsV0FDZmpoRCxLQUFLcTVELEdBQUc2QyxPQUFPamIsVUFBVTNaLFNBWTdCLE9BWHNCdG5DLEtBQUs0OUQsTUFBTVUsVUFBY0QsR0FBd0JyK0QsS0FBSzY5RCxVQUluRTc5RCxLQUFLNjlELFVBQ1Y3OUQsS0FBSytpRCxPQUFPQSxHQUdaL2lELEtBQUt5OUQsV0FBV3h3RCxLQUFLODFDLEdBTnJCcEcsRUFBTSw2REFRVjM4QyxLQUFLNDlELE1BQVEsR0FDTjU5RCxLQVFYK2lELE9BQU9BLEdBQ0hBLEVBQU80WixJQUFNMzhELEtBQUsyOEQsSUFDbEIzOEQsS0FBS3E1RCxHQUFHMEQsUUFBUWhhLEdBT3BCZ0gsU0FDSXBOLEVBQU0sa0NBQ2tCLG1CQUFiMzhDLEtBQUsrOUQsS0FDWi85RCxLQUFLKzlELE1BQU1wa0IsSUFDUDM1QyxLQUFLK2lELE9BQU8sQ0FBRTNqQyxLQUFNNDZDLEVBQW1Ca0UsV0FBV0ssUUFBUzVrQixLQUFBQSxPQUkvRDM1QyxLQUFLK2lELE9BQU8sQ0FBRTNqQyxLQUFNNDZDLEVBQW1Ca0UsV0FBV0ssUUFBUzVrQixLQUFNMzVDLEtBQUsrOUQsT0FTOUV2YixRQUFRN3NDLEdBQ0MzVixLQUFLNjlELFdBQ043OUQsS0FBS3M4RCxhQUFhLGdCQUFpQjNtRCxHQVMzQytzQyxRQUFRa0IsR0FDSmpILEVBQU0sYUFBY2lILEdBQ3BCNWpELEtBQUs2OUQsV0FBWSxFQUNqQjc5RCxLQUFLODlELGNBQWUsU0FDYjk5RCxLQUFLdTNDLEdBQ1p2M0MsS0FBS3M4RCxhQUFhLGFBQWMxWSxHQVFwQ3FhLFNBQVNsYixHQUVMLEdBRHNCQSxFQUFPNFosTUFBUTM4RCxLQUFLMjhELElBRzFDLE9BQVE1WixFQUFPM2pDLE1BQ1gsS0FBSzQ2QyxFQUFtQmtFLFdBQVdLLFFBQy9CLEdBQUl4YixFQUFPcEosTUFBUW9KLEVBQU9wSixLQUFLNEgsSUFBSyxDQUNoQyxNQUFNaEssRUFBS3dMLEVBQU9wSixLQUFLNEgsSUFDdkJ2aEQsS0FBS3crRCxVQUFVam5CLFFBR2Z2M0MsS0FBS3M4RCxhQUFhLGdCQUFpQixJQUFJNTdELE1BQU0sOExBRWpELE1BQ0osS0FBS3M1RCxFQUFtQmtFLFdBQVdDLE1BR25DLEtBQUtuRSxFQUFtQmtFLFdBQVdPLGFBQy9CeitELEtBQUswK0QsUUFBUTNiLEdBQ2IsTUFDSixLQUFLaVgsRUFBbUJrRSxXQUFXUyxJQUduQyxLQUFLM0UsRUFBbUJrRSxXQUFXVSxXQUMvQjUrRCxLQUFLNitELE1BQU05YixHQUNYLE1BQ0osS0FBS2lYLEVBQW1Ca0UsV0FBV1ksV0FDL0I5K0QsS0FBSysrRCxlQUNMLE1BQ0osS0FBSy9FLEVBQW1Ca0UsV0FBV2MsY0FDL0IsTUFBTXJwRCxFQUFNLElBQUlqVixNQUFNcWlELEVBQU9wSixLQUFLb0QsU0FFbENwbkMsRUFBSWdrQyxLQUFPb0osRUFBT3BKLEtBQUtBLEtBQ3ZCMzVDLEtBQUtzOEQsYUFBYSxnQkFBaUIzbUQsSUFVL0Mrb0QsUUFBUTNiLEdBQ0osTUFBTW5qRCxFQUFPbWpELEVBQU9wSixNQUFRLEdBQzVCZ0QsRUFBTSxvQkFBcUIvOEMsR0FDdkIsTUFBUW1qRCxFQUFPeEwsS0FDZm9GLEVBQU0sbUNBQ04vOEMsRUFBS3FOLEtBQUtqTixLQUFLaS9ELElBQUlsYyxFQUFPeEwsTUFFMUJ2M0MsS0FBSzY5RCxVQUNMNzlELEtBQUtrL0QsVUFBVXQvRCxHQUdmSSxLQUFLdzlELGNBQWN2d0QsS0FBS2xMLE9BQU91dEQsT0FBTzF2RCxJQUc5Q3MvRCxVQUFVdC9ELEdBQ04sR0FBSUksS0FBS20vRCxlQUFpQm4vRCxLQUFLbS9ELGNBQWNwL0QsT0FBUSxDQUNqRCxNQUFNZzJDLEVBQVkvMUMsS0FBS20vRCxjQUFjajFELFFBQ3JDLElBQUssTUFBTWsxRCxLQUFZcnBCLEVBQ25CcXBCLEVBQVNsL0QsTUFBTUYsS0FBTUosR0FHN0IwL0MsTUFBTW4rQyxLQUFLakIsTUFBTUYsS0FBTUosR0FPM0JxL0QsSUFBSTFuQixHQUNBLE1BQU04RixFQUFPcjlDLEtBQ2IsSUFBSXEvRCxHQUFPLEVBQ1gsT0FBTyxZQUFhei9ELEdBRVp5L0QsSUFFSkEsR0FBTyxFQUNQMWlCLEVBQU0saUJBQWtCLzhDLEdBQ3hCeTlDLEVBQUswRixPQUFPLENBQ1IzakMsS0FBTTQ2QyxFQUFtQmtFLFdBQVdTLElBQ3BDcG5CLEdBQUlBLEVBQ0pvQyxLQUFNLzVDLE1BVWxCaS9ELE1BQU05YixHQUNGLE1BQU1rYyxFQUFNai9ELEtBQUsyOUQsS0FBSzVhLEVBQU94TCxJQUN6QixtQkFBc0IwbkIsR0FDdEJ0aUIsRUFBTSx5QkFBMEJvRyxFQUFPeEwsR0FBSXdMLEVBQU9wSixNQUNsRHNsQixFQUFJLytELE1BQU1GLEtBQU0raUQsRUFBT3BKLGFBQ2hCMzVDLEtBQUsyOUQsS0FBSzVhLEVBQU94TCxLQUd4Qm9GLEVBQU0sYUFBY29HLEVBQU94TCxJQVFuQ2luQixVQUFVam5CLEdBQ05vRixFQUFNLDhCQUErQnBGLEdBQ3JDdjNDLEtBQUt1M0MsR0FBS0EsRUFDVnYzQyxLQUFLNjlELFdBQVksRUFDakI3OUQsS0FBSzg5RCxjQUFlLEVBQ3BCOTlELEtBQUtzL0QsZUFDTHQvRCxLQUFLczhELGFBQWEsV0FPdEJnRCxlQUNJdC9ELEtBQUt3OUQsY0FBY3B6RCxTQUFTeEssR0FBU0ksS0FBS2svRCxVQUFVdC9ELEtBQ3BESSxLQUFLdzlELGNBQWdCLEdBQ3JCeDlELEtBQUt5OUQsV0FBV3J6RCxTQUFTMjRDLEdBQVcvaUQsS0FBSytpRCxPQUFPQSxLQUNoRC9pRCxLQUFLeTlELFdBQWEsR0FPdEJzQixlQUNJcGlCLEVBQU0seUJBQTBCMzhDLEtBQUsyOEQsS0FDckMzOEQsS0FBS1csVUFDTFgsS0FBSzBpRCxRQUFRLHdCQVNqQi9oRCxVQUNRWCxLQUFLeTZELE9BRUx6NkQsS0FBS3k2RCxLQUFLcndELFNBQVM0eUQsR0FBZUEsTUFDbENoOUQsS0FBS3k2RCxVQUFPdDZELEdBRWhCSCxLQUFLcTVELEdBQWEsU0FBRXI1RCxNQVF4QnN2QyxhQVdJLE9BVkl0dkMsS0FBSzY5RCxZQUNMbGhCLEVBQU0sNkJBQThCMzhDLEtBQUsyOEQsS0FDekMzOEQsS0FBSytpRCxPQUFPLENBQUUzakMsS0FBTTQ2QyxFQUFtQmtFLFdBQVdZLGNBR3REOStELEtBQUtXLFVBQ0RYLEtBQUs2OUQsV0FFTDc5RCxLQUFLMGlELFFBQVEsd0JBRVYxaUQsS0FRWDBSLFFBQ0ksT0FBTzFSLEtBQUtzdkMsYUFTaEJtVSxTQUFTQSxHQUVMLE9BREF6akQsS0FBSzQ5RCxNQUFNbmEsU0FBV0EsRUFDZnpqRCxLQVNYLGVBRUksT0FEQUEsS0FBSzQ5RCxNQUFNVSxVQUFXLEVBQ2Z0K0QsS0FTWHUvRCxNQUFNSCxHQUdGLE9BRkFwL0QsS0FBS20vRCxjQUFnQm4vRCxLQUFLbS9ELGVBQWlCLEdBQzNDbi9ELEtBQUttL0QsY0FBY2x5RCxLQUFLbXlELEdBQ2pCcC9ELEtBU1h3L0QsV0FBV0osR0FHUCxPQUZBcC9ELEtBQUttL0QsY0FBZ0JuL0QsS0FBS20vRCxlQUFpQixHQUMzQ24vRCxLQUFLbS9ELGNBQWN4aEIsUUFBUXloQixHQUNwQnAvRCxLQVFYeS9ELE9BQU9MLEdBQ0gsSUFBS3AvRCxLQUFLbS9ELGNBQ04sT0FBT24vRCxLQUVYLEdBQUlvL0QsRUFBVSxDQUNWLE1BQU1ycEIsRUFBWS8xQyxLQUFLbS9ELGNBQ3ZCLElBQUssSUFBSTEwQyxFQUFJLEVBQUdBLEVBQUlzckIsRUFBVWgyQyxPQUFRMHFCLElBQ2xDLEdBQUkyMEMsSUFBYXJwQixFQUFVdHJCLEdBRXZCLE9BREFzckIsRUFBVWpPLE9BQU9yZCxFQUFHLEdBQ2J6cUIsVUFLZkEsS0FBS20vRCxjQUFnQixHQUV6QixPQUFPbi9ELEtBUVgwL0QsZUFDSSxPQUFPMS9ELEtBQUttL0QsZUFBaUIsSUFHckN4ckIsRUFBUW1MLE9BQVNBLCtCQzFjakIvOEMsT0FBT0MsZUFBZTJ4QyxFQUFTLGFBQWMsQ0FBRW50QyxPQUFPLElBQ3REbXRDLEVBQVE0bUIsd0JBQXFCLEVBQzdCLE1BQU1ubEIsRUFBVSxFQUFRLE1Bb0V4QnpCLEVBQVE0bUIsbUJBdERSLGNBQWlDbmxCLEVBTzdCRSxHQUFHNFUsRUFBSWtWLEdBRUgsT0FEQTlmLE1BQU1oSyxHQUFHNFUsRUFBSWtWLEdBQ05wL0QsS0FRWHkxQyxLQUFLeVUsRUFBSWtWLEdBRUwsT0FEQTlmLE1BQU03SixLQUFLeVUsRUFBSWtWLEdBQ1JwL0QsS0FRWG1CLEtBQUsrb0QsS0FBT3RxRCxHQUVSLE9BREEwL0MsTUFBTW4rQyxLQUFLK29ELEtBQU90cUQsR0FDWEksS0FXWHM4RCxhQUFhcFMsS0FBT3RxRCxHQUVoQixPQURBMC9DLE1BQU1uK0MsS0FBSytvRCxLQUFPdHFELEdBQ1hJLEtBUVgrMUMsVUFBVXh1QixHQUNOLE9BQU8rM0IsTUFBTXZKLFVBQVV4dUIsa0NDbkUvQnhsQixPQUFPQyxlQUFlMnhDLEVBQVMsYUFBYyxDQUFFbnRDLE9BQU8sSUFDdERtdEMsRUFBUXNHLFNBQU0sRUFDZCxNQUFNbUYsRUFBVyxFQUFRLE1BQ25CekMsRUFBUSxFQUFRLEtBQVIsQ0FBaUIsd0JBNkQvQmhKLEVBQVFzRyxJQW5EUixTQUFhOEUsRUFBS2tCLEVBQU8sR0FBSTBmLEdBQ3pCLElBQUkxd0MsRUFBTTh2QixFQUVWNGdCLEVBQU1BLEdBQTRCLG9CQUFiL2YsVUFBNEJBLFNBQzdDLE1BQVFiLElBQ1JBLEVBQU00Z0IsRUFBSTNnQixTQUFXLEtBQU8yZ0IsRUFBSW5nQixNQUVqQixpQkFBUlQsSUFDSCxNQUFRQSxFQUFJb00sT0FBTyxLQUVmcE0sRUFEQSxNQUFRQSxFQUFJb00sT0FBTyxHQUNid1UsRUFBSTNnQixTQUFXRCxFQUdmNGdCLEVBQUluZ0IsS0FBT1QsR0FHcEIsc0JBQXNCOUYsS0FBSzhGLEtBQzVCcEMsRUFBTSx1QkFBd0JvQyxHQUUxQkEsT0FEQSxJQUF1QjRnQixFQUNqQkEsRUFBSTNnQixTQUFXLEtBQU9ELEVBR3RCLFdBQWFBLEdBSTNCcEMsRUFBTSxXQUFZb0MsR0FDbEI5dkIsRUFBTW13QixFQUFTTCxJQUdkOXZCLEVBQUl5d0IsT0FDRCxjQUFjekcsS0FBS2hxQixFQUFJK3ZCLFVBQ3ZCL3ZCLEVBQUl5d0IsS0FBTyxLQUVOLGVBQWV6RyxLQUFLaHFCLEVBQUkrdkIsWUFDN0IvdkIsRUFBSXl3QixLQUFPLFFBR25CendCLEVBQUlneEIsS0FBT2h4QixFQUFJZ3hCLE1BQVEsSUFDdkIsTUFDTVQsR0FEa0MsSUFBM0J2d0IsRUFBSXV3QixLQUFLcjBDLFFBQVEsS0FDVixJQUFNOGpCLEVBQUl1d0IsS0FBTyxJQUFNdndCLEVBQUl1d0IsS0FTL0MsT0FQQXZ3QixFQUFJc29CLEdBQUt0b0IsRUFBSSt2QixTQUFXLE1BQVFRLEVBQU8sSUFBTXZ3QixFQUFJeXdCLEtBQU9PLEVBRXhEaHhCLEVBQUk0aUMsS0FDQTVpQyxFQUFJK3ZCLFNBQ0EsTUFDQVEsR0FDQ21nQixHQUFPQSxFQUFJamdCLE9BQVN6d0IsRUFBSXl3QixLQUFPLEdBQUssSUFBTXp3QixFQUFJeXdCLE1BQ2hEendCLGdDQzlEWGx0QixPQUFPQyxlQUFlMnhDLEVBQVMsYUFBYyxDQUFFbnRDLE9BQU8sSUFDdERtdEMsRUFBUWlzQixrQkFBb0Jqc0IsRUFBUWtzQix1QkFBb0IsRUFDeEQsTUFBTUMsRUFBYyxFQUFRLE1BaUI1QixTQUFTQyxFQUFtQnBtQixFQUFNcW1CLEdBQzlCLElBQUtybUIsRUFDRCxPQUFPQSxFQUNYLEdBQUltbUIsRUFBWUcsU0FBU3RtQixHQUFPLENBQzVCLE1BQU11bUIsRUFBYyxDQUFFQyxjQUFjLEVBQU1scEMsSUFBSytvQyxFQUFRamdFLFFBRXZELE9BREFpZ0UsRUFBUS95RCxLQUFLMHNDLEdBQ051bUIsRUFFTixHQUFJNXlDLE1BQU00cUIsUUFBUXlCLEdBQU8sQ0FDMUIsTUFBTXltQixFQUFVLElBQUk5eUMsTUFBTXFzQixFQUFLNTVDLFFBQy9CLElBQUssSUFBSTBxQixFQUFJLEVBQUdBLEVBQUlrdkIsRUFBSzU1QyxPQUFRMHFCLElBQzdCMjFDLEVBQVEzMUMsR0FBS3MxQyxFQUFtQnBtQixFQUFLbHZCLEdBQUl1MUMsR0FFN0MsT0FBT0ksRUFFTixHQUFvQixpQkFBVHptQixLQUF1QkEsYUFBZ0I2RCxNQUFPLENBQzFELE1BQU00aUIsRUFBVSxHQUNoQixJQUFLLE1BQU1oMEQsS0FBT3V0QyxFQUNWQSxFQUFLMEgsZUFBZWoxQyxLQUNwQmcwRCxFQUFRaDBELEdBQU8yekQsRUFBbUJwbUIsRUFBS3Z0QyxHQUFNNHpELElBR3JELE9BQU9JLEVBRVgsT0FBT3ptQixFQWdCWCxTQUFTMG1CLEVBQW1CMW1CLEVBQU1xbUIsR0FDOUIsSUFBS3JtQixFQUNELE9BQU9BLEVBQ1gsR0FBSUEsR0FBUUEsRUFBS3dtQixhQUNiLE9BQU9ILEVBQVFybUIsRUFBSzFpQixLQUVuQixHQUFJM0osTUFBTTRxQixRQUFReUIsR0FDbkIsSUFBSyxJQUFJbHZCLEVBQUksRUFBR0EsRUFBSWt2QixFQUFLNTVDLE9BQVEwcUIsSUFDN0JrdkIsRUFBS2x2QixHQUFLNDFDLEVBQW1CMW1CLEVBQUtsdkIsR0FBSXUxQyxRQUd6QyxHQUFvQixpQkFBVHJtQixFQUNaLElBQUssTUFBTXZ0QyxLQUFPdXRDLEVBQ1ZBLEVBQUswSCxlQUFlajFDLEtBQ3BCdXRDLEVBQUt2dEMsR0FBT2kwRCxFQUFtQjFtQixFQUFLdnRDLEdBQU00ekQsSUFJdEQsT0FBT3JtQixFQTNEWGhHLEVBQVFrc0Isa0JBUlIsU0FBMkI5YyxHQUN2QixNQUFNaWQsRUFBVSxHQUNWTSxFQUFhdmQsRUFBT3BKLEtBQ3BCNG1CLEVBQU94ZCxFQUdiLE9BRkF3ZCxFQUFLNW1CLEtBQU9vbUIsRUFBbUJPLEVBQVlOLEdBQzNDTyxFQUFLQyxZQUFjUixFQUFRamdFLE9BQ3BCLENBQUVnakQsT0FBUXdkLEVBQU1QLFFBQVNBLElBMENwQ3JzQixFQUFRaXNCLGtCQUxSLFNBQTJCN2MsRUFBUWlkLEdBRy9CLE9BRkFqZCxFQUFPcEosS0FBTzBtQixFQUFtQnRkLEVBQU9wSixLQUFNcW1CLEdBQzlDamQsRUFBT3lkLGlCQUFjcmdFLEVBQ2Q0aUQsZ0NDeERYaGhELE9BQU9DLGVBQWUyeEMsRUFBUyxhQUFjLENBQUVudEMsT0FBTyxJQUN0RG10QyxFQUFRMm5CLFFBQVUzbkIsRUFBUXluQixRQUFVem5CLEVBQVF1cUIsV0FBYXZxQixFQUFRcUwsY0FBVyxFQUM1RSxNQUFNNUosRUFBVSxFQUFRLE1BQ2xCcXJCLEVBQVcsRUFBUSxNQUNuQlgsRUFBYyxFQUFRLE1BQ3RCbmpCLEVBQVEsRUFBUSxLQUFSLENBQWlCLG9CQU8vQixJQUFJdWhCLEVBREp2cUIsRUFBUXFMLFNBQVcsRUFFbkIsU0FBV2tmLEdBQ1BBLEVBQVdBLEVBQW9CLFFBQUksR0FBSyxVQUN4Q0EsRUFBV0EsRUFBdUIsV0FBSSxHQUFLLGFBQzNDQSxFQUFXQSxFQUFrQixNQUFJLEdBQUssUUFDdENBLEVBQVdBLEVBQWdCLElBQUksR0FBSyxNQUNwQ0EsRUFBV0EsRUFBMEIsY0FBSSxHQUFLLGdCQUM5Q0EsRUFBV0EsRUFBeUIsYUFBSSxHQUFLLGVBQzdDQSxFQUFXQSxFQUF1QixXQUFJLEdBQUssYUFQL0MsQ0FRR0EsRUFBYXZxQixFQUFRdXFCLGFBQWV2cUIsRUFBUXVxQixXQUFhLEtBZ0U1RHZxQixFQUFReW5CLFFBNURSLE1BT0kvbUIsT0FBT3BsQixHQUVILE9BREEwdEIsRUFBTSxxQkFBc0IxdEIsR0FDeEJBLEVBQUk3UCxPQUFTOCtDLEVBQVdDLE9BQVNsdkMsRUFBSTdQLE9BQVM4K0MsRUFBV1MsTUFDckRtQixFQUFZWSxVQUFVenhDLEdBUXZCLENBQUNqdkIsS0FBSzJnRSxlQUFlMXhDLEtBUHBCQSxFQUFJN1AsS0FDQTZQLEVBQUk3UCxPQUFTOCtDLEVBQVdDLE1BQ2xCRCxFQUFXTyxhQUNYUCxFQUFXVSxXQUNkNStELEtBQUs0Z0UsZUFBZTN4QyxJQVF2QzB4QyxlQUFlMXhDLEdBRVgsSUFBSXcrQixFQUFNLEdBQUt4K0IsRUFBSTdQLEtBb0JuQixPQWxCSTZQLEVBQUk3UCxPQUFTOCtDLEVBQVdPLGNBQ3hCeHZDLEVBQUk3UCxPQUFTOCtDLEVBQVdVLGFBQ3hCblIsR0FBT3grQixFQUFJdXhDLFlBQWMsS0FJekJ2eEMsRUFBSTB0QyxLQUFPLE1BQVExdEMsRUFBSTB0QyxNQUN2QmxQLEdBQU94K0IsRUFBSTB0QyxJQUFNLEtBR2pCLE1BQVExdEMsRUFBSXNvQixLQUNaa1csR0FBT3grQixFQUFJc29CLElBR1gsTUFBUXRvQixFQUFJMHFCLE9BQ1o4VCxHQUFPaFUsS0FBS0MsVUFBVXpxQixFQUFJMHFCLE9BRTlCZ0QsRUFBTSxtQkFBb0IxdEIsRUFBS3crQixHQUN4QkEsRUFPWG1ULGVBQWUzeEMsR0FDWCxNQUFNNHhDLEVBQWlCSixFQUFTWixrQkFBa0I1d0MsR0FDNUNzeEMsRUFBT3ZnRSxLQUFLMmdFLGVBQWVFLEVBQWU5ZCxRQUMxQ2lkLEVBQVVhLEVBQWViLFFBRS9CLE9BREFBLEVBQVFyaUIsUUFBUTRpQixHQUNUUCxJQVNmLE1BQU0xRSxVQUFnQmxtQixFQUNsQjJELGNBQ0l1RyxRQU9KdDRDLElBQUlpb0IsR0FDQSxJQUFJOHpCLEVBQ0osR0FBbUIsaUJBQVI5ekIsRUFDUDh6QixFQUFTL2lELEtBQUs4Z0UsYUFBYTd4QyxHQUN2Qjh6QixFQUFPM2pDLE9BQVM4K0MsRUFBV08sY0FDM0IxYixFQUFPM2pDLE9BQVM4K0MsRUFBV1UsWUFFM0I1K0QsS0FBSytnRSxjQUFnQixJQUFJQyxFQUFvQmplLEdBRWxCLElBQXZCQSxFQUFPeWQsYUFDUGxoQixNQUFNbitDLEtBQUssVUFBVzRoRCxJQUsxQnpELE1BQU1uK0MsS0FBSyxVQUFXNGhELE9BR3pCLEtBQUkrYyxFQUFZRyxTQUFTaHhDLEtBQVFBLEVBQUl5bEIsT0FldEMsTUFBTSxJQUFJaDBDLE1BQU0saUJBQW1CdXVCLEdBYm5DLElBQUtqdkIsS0FBSytnRSxjQUNOLE1BQU0sSUFBSXJnRSxNQUFNLG9EQUdoQnFpRCxFQUFTL2lELEtBQUsrZ0UsY0FBY0UsZUFBZWh5QyxHQUN2Qzh6QixJQUVBL2lELEtBQUsrZ0UsY0FBZ0IsS0FDckJ6aEIsTUFBTW4rQyxLQUFLLFVBQVc0aEQsS0FjdEMrZCxhQUFhclQsR0FDVCxJQUFJaGpDLEVBQUksRUFFUixNQUFNeXFCLEVBQUksQ0FDTjkxQixLQUFNbStCLE9BQU9rUSxFQUFJdEMsT0FBTyxLQUU1QixRQUEyQmhyRCxJQUF2Qis5RCxFQUFXaHBCLEVBQUU5MUIsTUFDYixNQUFNLElBQUkxZSxNQUFNLHVCQUF5QncwQyxFQUFFOTFCLE1BRy9DLEdBQUk4MUIsRUFBRTkxQixPQUFTOCtDLEVBQVdPLGNBQ3RCdnBCLEVBQUU5MUIsT0FBUzgrQyxFQUFXVSxXQUFZLENBQ2xDLE1BQU16TCxFQUFRMW9DLEVBQUksRUFDbEIsS0FBMkIsTUFBcEJnakMsRUFBSXRDLFNBQVMxZ0MsSUFBY0EsR0FBS2dqQyxFQUFJMXRELFNBQzNDLE1BQU1taEUsRUFBTXpULEVBQUk5WSxVQUFVd2UsRUFBTzFvQyxHQUNqQyxHQUFJeTJDLEdBQU8zakIsT0FBTzJqQixJQUEwQixNQUFsQnpULEVBQUl0QyxPQUFPMWdDLEdBQ2pDLE1BQU0sSUFBSS9wQixNQUFNLHVCQUVwQncwQyxFQUFFc3JCLFlBQWNqakIsT0FBTzJqQixHQUczQixHQUFJLE1BQVF6VCxFQUFJdEMsT0FBTzFnQyxFQUFJLEdBQUksQ0FDM0IsTUFBTTBvQyxFQUFRMW9DLEVBQUksRUFDbEIsT0FBU0EsR0FFRCxNQURNZ2pDLEVBQUl0QyxPQUFPMWdDLElBR2pCQSxJQUFNZ2pDLEVBQUkxdEQsU0FHbEJtMUMsRUFBRXluQixJQUFNbFAsRUFBSTlZLFVBQVV3ZSxFQUFPMW9DLFFBRzdCeXFCLEVBQUV5bkIsSUFBTSxJQUdaLE1BQU1uMEQsRUFBT2lsRCxFQUFJdEMsT0FBTzFnQyxFQUFJLEdBQzVCLEdBQUksS0FBT2ppQixHQUFRKzBDLE9BQU8vMEMsSUFBU0EsRUFBTSxDQUNyQyxNQUFNMnFELEVBQVExb0MsRUFBSSxFQUNsQixPQUFTQSxHQUFHLENBQ1IsTUFBTWt3QixFQUFJOFMsRUFBSXRDLE9BQU8xZ0MsR0FDckIsR0FBSSxNQUFRa3dCLEdBQUs0QyxPQUFPNUMsSUFBTUEsRUFBRyxHQUMzQmx3QixFQUNGLE1BRUosR0FBSUEsSUFBTWdqQyxFQUFJMXRELE9BQ1YsTUFFUm0xQyxFQUFFcUMsR0FBS2dHLE9BQU9rUSxFQUFJOVksVUFBVXdlLEVBQU8xb0MsRUFBSSxJQUczQyxHQUFJZ2pDLEVBQUl0QyxTQUFTMWdDLEdBQUksQ0FDakIsTUFBTTAyQyxFQXFDbEIsU0FBa0IxVCxHQUNkLElBQ0ksT0FBT2hVLEtBQUt3SixNQUFNd0ssR0FFdEIsTUFBT2x3QyxHQUNILE9BQU8sR0ExQ2E2akQsQ0FBUzNULEVBQUk5TyxPQUFPbDBCLElBQ3BDLElBQUk2d0MsRUFBUStGLGVBQWVuc0IsRUFBRTkxQixLQUFNK2hELEdBSS9CLE1BQU0sSUFBSXpnRSxNQUFNLG1CQUhoQncwQyxFQUFFeUUsS0FBT3duQixFQU9qQixPQURBeGtCLEVBQU0sbUJBQW9COFEsRUFBS3ZZLEdBQ3hCQSxFQUVYLHNCQUFzQjkxQixFQUFNK2hELEdBQ3hCLE9BQVEvaEQsR0FDSixLQUFLOCtDLEVBQVdLLFFBQ1osTUFBMEIsaUJBQVo0QyxFQUNsQixLQUFLakQsRUFBV1ksV0FDWixZQUFtQjMrRCxJQUFaZ2hFLEVBQ1gsS0FBS2pELEVBQVdjLGNBQ1osTUFBMEIsaUJBQVptQyxHQUEyQyxpQkFBWkEsRUFDakQsS0FBS2pELEVBQVdDLE1BQ2hCLEtBQUtELEVBQVdPLGFBQ1osT0FBT254QyxNQUFNNHFCLFFBQVFpcEIsSUFBWUEsRUFBUXBoRSxPQUFTLEVBQ3RELEtBQUttK0QsRUFBV1MsSUFDaEIsS0FBS1QsRUFBV1UsV0FDWixPQUFPdHhDLE1BQU00cUIsUUFBUWlwQixJQU1qQ3hnRSxVQUNRWCxLQUFLK2dFLGVBQ0wvZ0UsS0FBSytnRSxjQUFjTywwQkFJL0IzdEIsRUFBUTJuQixRQUFVQSxFQWlCbEIsTUFBTTBGLEVBQ0Zqb0IsWUFBWWdLLEdBQ1IvaUQsS0FBSytpRCxPQUFTQSxFQUNkL2lELEtBQUtnZ0UsUUFBVSxHQUNmaGdFLEtBQUt1aEUsVUFBWXhlLEVBVXJCa2UsZUFBZU8sR0FFWCxHQURBeGhFLEtBQUtnZ0UsUUFBUS95RCxLQUFLdTBELEdBQ2R4aEUsS0FBS2dnRSxRQUFRamdFLFNBQVdDLEtBQUt1aEUsVUFBVWYsWUFBYSxDQUVwRCxNQUFNemQsRUFBUzBkLEVBQVNiLGtCQUFrQjUvRCxLQUFLdWhFLFVBQVd2aEUsS0FBS2dnRSxTQUUvRCxPQURBaGdFLEtBQUtzaEUseUJBQ0V2ZSxFQUVYLE9BQU8sS0FLWHVlLHlCQUNJdGhFLEtBQUt1aEUsVUFBWSxLQUNqQnZoRSxLQUFLZ2dFLFFBQVUsZ0NDcFJ2QmorRCxPQUFPQyxlQUFlMnhDLEVBQVMsYUFBYyxDQUFFbnRDLE9BQU8sSUFDdERtdEMsRUFBUStzQixVQUFZL3NCLEVBQVFzc0IsY0FBVyxFQUN2QyxNQUFNNVUsRUFBK0MsbUJBQWhCbFcsWUFNL0J4VyxFQUFXNThCLE9BQU92QixVQUFVbStCLFNBQzVCeXNCLEVBQWlDLG1CQUFUSCxNQUNULG9CQUFUQSxNQUNvQiw2QkFBeEJ0c0IsRUFBU3Y2QixLQUFLNm1ELE1BQ2hCd1csRUFBaUMsbUJBQVRDLE1BQ1Qsb0JBQVRBLE1BQ29CLDZCQUF4Qi9pQyxFQUFTdjZCLEtBQUtzOUQsTUFNdEIsU0FBU3pCLEVBQVNoeEMsR0FDZCxPQUFTbzhCLElBQTBCcDhCLGFBQWVrbUIsYUFsQnZDLENBQUNsbUIsR0FDeUIsbUJBQXZCa21CLFlBQVl3VyxPQUNwQnhXLFlBQVl3VyxPQUFPMThCLEdBQ25CQSxFQUFJMjhCLGtCQUFrQnpXLFlBZXFDd1csQ0FBTzE4QixLQUNuRW04QixHQUFrQm44QixhQUFlZzhCLE1BQ2pDd1csR0FBa0J4eUMsYUFBZXl5QyxLQUUxQy90QixFQUFRc3NCLFNBQVdBLEVBNEJuQnRzQixFQUFRK3NCLFVBM0JSLFNBQVNBLEVBQVV6eEMsRUFBSzB5QyxHQUNwQixJQUFLMXlDLEdBQXNCLGlCQUFSQSxFQUNmLE9BQU8sRUFFWCxHQUFJM0IsTUFBTTRxQixRQUFRanBCLEdBQU0sQ0FDcEIsSUFBSyxJQUFJeEUsRUFBSSxFQUFHcTRCLEVBQUk3ekIsRUFBSWx2QixPQUFRMHFCLEVBQUlxNEIsRUFBR3I0QixJQUNuQyxHQUFJaTJDLEVBQVV6eEMsRUFBSXhFLElBQ2QsT0FBTyxFQUdmLE9BQU8sRUFFWCxHQUFJdzFDLEVBQVNoeEMsR0FDVCxPQUFPLEVBRVgsR0FBSUEsRUFBSTB5QyxRQUNrQixtQkFBZjF5QyxFQUFJMHlDLFFBQ1UsSUFBckI3aEUsVUFBVUMsT0FDVixPQUFPMmdFLEVBQVV6eEMsRUFBSTB5QyxVQUFVLEdBRW5DLElBQUssTUFBTXYxRCxLQUFPNmlCLEVBQ2QsR0FBSWx0QixPQUFPdkIsVUFBVTZnRCxlQUFlajlDLEtBQUs2cUIsRUFBSzdpQixJQUFRczBELEVBQVV6eEMsRUFBSTdpQixJQUNoRSxPQUFPLEVBR2YsT0FBTywwQkNsRFgsSUFBSXcxRCxFQUFjLEdBRWxCLFNBQVNDLEVBQXFCQyxHQUc1QixJQUZBLElBQUlyVyxHQUFVLEVBRUxoaEMsRUFBSSxFQUFHQSxFQUFJbTNDLEVBQVk3aEUsT0FBUTBxQixJQUN0QyxHQUFJbTNDLEVBQVluM0MsR0FBR3EzQyxhQUFlQSxFQUFZLENBQzVDclcsRUFBU2hoQyxFQUNULE1BSUosT0FBT2doQyxFQUdULFNBQVNzVyxFQUFhMW5DLEVBQU10NUIsR0FJMUIsSUFIQSxJQUFJaWhFLEVBQWEsR0FDYkMsRUFBYyxHQUVUeDNDLEVBQUksRUFBR0EsRUFBSTRQLEVBQUt0NkIsT0FBUTBxQixJQUFLLENBQ3BDLElBQUl3RixFQUFPb0ssRUFBSzVQLEdBQ1o4c0IsRUFBS3gyQyxFQUFRbWhFLEtBQU9qeUMsRUFBSyxHQUFLbHZCLEVBQVFtaEUsS0FBT2p5QyxFQUFLLEdBQ2xEakMsRUFBUWcwQyxFQUFXenFCLElBQU8sRUFDMUJ1cUIsRUFBYSxHQUFHcnFCLE9BQU9GLEVBQUksS0FBS0UsT0FBT3pwQixHQUMzQ2cwQyxFQUFXenFCLEdBQU12cEIsRUFBUSxFQUN6QixJQUFJbkksRUFBUWc4QyxFQUFxQkMsR0FDN0I3eUMsRUFBTSxDQUNSa3pDLElBQUtseUMsRUFBSyxHQUNWbXlDLE1BQU9ueUMsRUFBSyxHQUNab3lDLFVBQVdweUMsRUFBSyxLQUdILElBQVhwSyxHQUNGKzdDLEVBQVkvN0MsR0FBT3k4QyxhQUNuQlYsRUFBWS83QyxHQUFPMDhDLFFBQVF0ekMsSUFFM0IyeUMsRUFBWTMwRCxLQUFLLENBQ2Y2MEQsV0FBWUEsRUFDWlMsUUFBU0MsRUFBU3Z6QyxFQUFLbHVCLEdBQ3ZCdWhFLFdBQVksSUFJaEJMLEVBQVloMUQsS0FBSzYwRCxHQUduQixPQUFPRyxFQUdULFNBQVNPLEVBQVN2ekMsRUFBS2x1QixHQUNyQixJQUFJMGhFLEVBQU0xaEUsRUFBUTJoRSxPQUFPM2hFLEdBRXpCLE9BREEwaEUsRUFBSUUsT0FBTzF6QyxHQUNKLFNBQXFCMnpDLEdBQzFCLEdBQUlBLEVBQVEsQ0FDVixHQUFJQSxFQUFPVCxNQUFRbHpDLEVBQUlrekMsS0FBT1MsRUFBT1IsUUFBVW56QyxFQUFJbXpDLE9BQVNRLEVBQU9QLFlBQWNwekMsRUFBSW96QyxVQUNuRixPQUdGSSxFQUFJRSxPQUFPMXpDLEVBQU0yekMsUUFFakJILEVBQUl0N0QsVUFLVnVzQyxFQUFPQyxRQUFVLFNBQVV0WixFQUFNdDVCLEdBRy9CLElBQUk4aEUsRUFBa0JkLEVBRHRCMW5DLEVBQU9BLEdBQVEsR0FEZnQ1QixFQUFVQSxHQUFXLElBR3JCLE9BQU8sU0FBZ0IraEUsR0FDckJBLEVBQVVBLEdBQVcsR0FFckIsSUFBSyxJQUFJcjRDLEVBQUksRUFBR0EsRUFBSW80QyxFQUFnQjlpRSxPQUFRMHFCLElBQUssQ0FDL0MsSUFDSTVFLEVBQVFnOEMsRUFES2dCLEVBQWdCcDRDLElBRWpDbTNDLEVBQVkvN0MsR0FBT3k4QyxhQUtyQixJQUZBLElBQUlTLEVBQXFCaEIsRUFBYWUsRUFBUy9oRSxHQUV0Q2xCLEVBQUssRUFBR0EsRUFBS2dqRSxFQUFnQjlpRSxPQUFRRixJQUFNLENBQ2xELElBRUltakUsRUFBU25CLEVBRktnQixFQUFnQmhqRSxJQUlLLElBQW5DK2hFLEVBQVlvQixHQUFRVixhQUN0QlYsRUFBWW9CLEdBQVFULFVBRXBCWCxFQUFZOTVCLE9BQU9rN0IsRUFBUSxJQUkvQkgsRUFBa0JFLDBCQzVGdEIsSUFBSUUsRUFBTyxHQW9DWHZ2QixFQUFPQyxRQVZQLFNBQTBCdXZCLEVBQVE1akUsR0FDaEMsSUFBSXNULEVBeEJOLFNBQW1CQSxHQUNqQixRQUE0QixJQUFqQnF3RCxFQUFLcndELEdBQXlCLENBQ3ZDLElBQUl1d0QsRUFBY2xrRSxTQUFTaUssY0FBYzBKLEdBRXpDLEdBQUlqTSxPQUFPeThELG1CQUFxQkQsYUFBdUJ4OEQsT0FBT3k4RCxrQkFDNUQsSUFHRUQsRUFBY0EsRUFBWUUsZ0JBQWdCdGQsS0FDMUMsTUFBT3hvQyxHQUVQNGxELEVBQWMsS0FJbEJGLEVBQUtyd0QsR0FBVXV3RCxFQUdqQixPQUFPRixFQUFLcndELEdBTUMwd0QsQ0FBVUosR0FFdkIsSUFBS3R3RCxFQUNILE1BQU0sSUFBSWxTLE1BQU0sMkdBR2xCa1MsRUFBTzdILFlBQVl6TCwyQkN6QnJCbzBDLEVBQU9DLFFBUFAsU0FBNEI1eUMsR0FDMUIsSUFBSXpCLEVBQVFMLFNBQVNDLGNBQWMsU0FHbkMsT0FGQTZCLEVBQVF3aUUsY0FBY2prRSxFQUFPeUIsRUFBUXN1QyxZQUNyQ3R1QyxFQUFRbWlFLE9BQU81akUsR0FDUkEsZ0NDSVRvMEMsRUFBT0MsUUFSUCxTQUF3Q3IwQyxHQUN0QyxJQUFJa2tFLEVBQW1ELEtBRW5EQSxHQUNGbGtFLEVBQU0rSCxhQUFhLFFBQVNtOEQsMkJDd0NoQzl2QixFQUFPQyxRQVpQLFNBQWdCNXlDLEdBQ2QsSUFBSXpCLEVBQVF5QixFQUFRMGlFLG1CQUFtQjFpRSxHQUN2QyxNQUFPLENBQ0w0aEUsT0FBUSxTQUFnQjF6QyxJQW5DNUIsU0FBZTN2QixFQUFPeUIsRUFBU2t1QixHQUM3QixJQUFJa3pDLEVBQU1sekMsRUFBSWt6QyxJQUNWQyxFQUFRbnpDLEVBQUltekMsTUFDWkMsRUFBWXB6QyxFQUFJb3pDLFVBRWhCRCxFQUNGOWlFLEVBQU0rSCxhQUFhLFFBQVMrNkQsR0FFNUI5aUUsRUFBTW9ILGdCQUFnQixTQUdwQjI3RCxHQUE2QixvQkFBVC9vQixPQUN0QjZvQixHQUFPLHVEQUF1RDFxQixPQUFPNkIsS0FBS0MsU0FBU0MsbUJBQW1CQyxLQUFLQyxVQUFVMm9CLE1BQWUsUUFNdEl0aEUsRUFBUTJpRSxrQkFBa0J2QixFQUFLN2lFLEdBa0IzQlksQ0FBTVosRUFBT3lCLEVBQVNrdUIsSUFFeEI5bkIsT0FBUSxZQWpCWixTQUE0QjdILEdBRTFCLEdBQXlCLE9BQXJCQSxFQUFNNEgsV0FDUixPQUFPLEVBR1Q1SCxFQUFNNEgsV0FBV3FELFlBQVlqTCxHQVl6QnFrRSxDQUFtQnJrRSw2QkMzQnpCbzBDLEVBQU9DLFFBWlAsU0FBMkJ3dUIsRUFBSzdpRSxHQUM5QixHQUFJQSxFQUFNc2tFLFdBQ1J0a0UsRUFBTXNrRSxXQUFXQyxRQUFVMUIsTUFDdEIsQ0FDTCxLQUFPN2lFLEVBQU13a0UsWUFDWHhrRSxFQUFNaUwsWUFBWWpMLEVBQU13a0UsWUFHMUJ4a0UsRUFBTXlMLFlBQVk5TCxTQUFTOGtFLGVBQWU1Qix3RkNLOUMsSUFBSTZCLEVBQWdCLFNBQVNqTSxFQUFHZSxHQUk1QixPQUhBa0wsRUFBZ0JqaUUsT0FBT2tpRSxnQkFDbEIsQ0FBRTFVLFVBQVcsY0FBZ0JqaUMsT0FBUyxTQUFVeXFDLEVBQUdlLEdBQUtmLEVBQUV4SSxVQUFZdUosSUFDdkUsU0FBVWYsRUFBR2UsR0FBSyxJQUFLLElBQUk1akIsS0FBSzRqQixFQUFPLzJELE9BQU92QixVQUFVNmdELGVBQWVqOUMsS0FBSzAwRCxFQUFHNWpCLEtBQUk2aUIsRUFBRTdpQixHQUFLNGpCLEVBQUU1akIsTUFDM0U2aUIsRUFBR2UsSUFHckIsU0FBU29MLEVBQVVuTSxFQUFHZSxHQUN6QixHQUFpQixtQkFBTkEsR0FBMEIsT0FBTkEsRUFDM0IsTUFBTSxJQUFJM2YsVUFBVSx1QkFBeUJsVCxPQUFPNnlCLEdBQUssaUNBRTdELFNBQVNxTCxJQUFPbmtFLEtBQUsrNEMsWUFBY2dmLEVBRG5DaU0sRUFBY2pNLEVBQUdlLEdBRWpCZixFQUFFdjNELFVBQWtCLE9BQU5zNEQsRUFBYS8yRCxPQUFPaWxELE9BQU84UixJQUFNcUwsRUFBRzNqRSxVQUFZczRELEVBQUV0NEQsVUFBVyxJQUFJMmpFLEdBRzVFLElBQUlDLEVBQVcsV0FRbEIsT0FQQUEsRUFBV3JpRSxPQUFPaStDLFFBQVUsU0FBa0JzTSxHQUMxQyxJQUFLLElBQUkwRyxFQUFHdm9DLEVBQUksRUFBR3F1QixFQUFJaDVDLFVBQVVDLE9BQVEwcUIsRUFBSXF1QixFQUFHcnVCLElBRTVDLElBQUssSUFBSXlxQixLQURUOGQsRUFBSWx6RCxVQUFVMnFCLEdBQ08xb0IsT0FBT3ZCLFVBQVU2Z0QsZUFBZWo5QyxLQUFLNHVELEVBQUc5ZCxLQUFJb1gsRUFBRXBYLEdBQUs4ZCxFQUFFOWQsSUFFOUUsT0FBT29YLElBRUtwc0QsTUFBTUYsS0FBTUYsWUFnRnpCLFNBQVN1a0UsRUFBU3pyQixHQUNyQixJQUFJb2EsRUFBc0IsbUJBQVg1YSxRQUF5QkEsT0FBT0MsU0FBVXdmLEVBQUk3RSxHQUFLcGEsRUFBRW9hLEdBQUl2b0MsRUFBSSxFQUM1RSxHQUFJb3RDLEVBQUcsT0FBT0EsRUFBRXp6RCxLQUFLdzBDLEdBQ3JCLEdBQUlBLEdBQXlCLGlCQUFiQSxFQUFFNzRDLE9BQXFCLE1BQU8sQ0FDMUN5SSxLQUFNLFdBRUYsT0FESW93QyxHQUFLbnVCLEdBQUttdUIsRUFBRTc0QyxTQUFRNjRDLE9BQUksR0FDckIsQ0FBRXB5QyxNQUFPb3lDLEdBQUtBLEVBQUVudUIsS0FBTWhpQixNQUFPbXdDLEtBRzVDLE1BQU0sSUFBSU8sVUFBVTZaLEVBQUksMEJBQTRCLG1DQUdqRCxTQUFTc1IsRUFBTzFyQixFQUFHRSxHQUN0QixJQUFJK2UsRUFBc0IsbUJBQVh6ZixRQUF5QlEsRUFBRVIsT0FBT0MsVUFDakQsSUFBS3dmLEVBQUcsT0FBT2pmLEVBQ2YsSUFBbUJ5QyxFQUFZOTlCLEVBQTNCa04sRUFBSW90QyxFQUFFenpELEtBQUt3MEMsR0FBTzJyQixFQUFLLEdBQzNCLElBQ0ksV0FBYyxJQUFOenJCLEdBQWdCQSxLQUFNLE1BQVF1QyxFQUFJNXdCLEVBQUVqaUIsUUFBUUMsTUFBTTg3RCxFQUFHdDNELEtBQUtvdUMsRUFBRTcwQyxPQUV4RSxNQUFPb0MsR0FBUzJVLEVBQUksQ0FBRTNVLE1BQU9BLEdBQzdCLFFBQ0ksSUFDUXl5QyxJQUFNQSxFQUFFNXlDLE9BQVNvdkQsRUFBSXB0QyxFQUFVLFNBQUlvdEMsRUFBRXp6RCxLQUFLcW1CLEdBRWxELFFBQVUsR0FBSWxOLEVBQUcsTUFBTUEsRUFBRTNVLE9BRTdCLE9BQU8yN0QsRUFtQkosU0FBU0MsRUFBYzVoQixFQUFJOXpCLEVBQU15eEMsR0FDcEMsR0FBSUEsR0FBNkIsSUFBckJ6Z0UsVUFBVUMsT0FBYyxJQUFLLElBQTRCd2tFLEVBQXhCOTVDLEVBQUksRUFBR3E0QixFQUFJaDBCLEVBQUsvdUIsT0FBWTBxQixFQUFJcTRCLEVBQUdyNEIsS0FDeEU4NUMsR0FBUTk1QyxLQUFLcUUsSUFDUnkxQyxJQUFJQSxFQUFLajNDLE1BQU05c0IsVUFBVTBKLE1BQU05RixLQUFLMHFCLEVBQU0sRUFBR3JFLElBQ2xEODVDLEVBQUc5NUMsR0FBS3FFLEVBQUtyRSxJQUdyQixPQUFPbTRCLEVBQUduTCxPQUFPOHNCLEdBQU16MUMsR0FoRUUvc0IsT0FBT2lsRCxPQXNHWGpsRCxPQUFPaWxELDZCQzNNaUN0VCxFQUFPQyxRQUdoRSxXQUFjLGFBSXBCLElBQUk4d0IsRUFBYzFpRSxPQUFPdXRELE9BQU8sSUFJaEMsU0FBU29WLEVBQVM1bkIsR0FDaEIsT0FBT0EsTUFBQUEsRUFHVCxTQUFTNm5CLEVBQU83bkIsR0FDZCxPQUFPQSxNQUFBQSxFQUdULFNBQVM4bkIsRUFBUTluQixHQUNmLE9BQWEsSUFBTkEsRUFVVCxTQUFTK25CLEVBQWFyK0QsR0FDcEIsTUFDbUIsaUJBQVZBLEdBQ1UsaUJBQVZBLEdBRVUsaUJBQVZBLEdBQ1Usa0JBQVZBLEVBU1gsU0FBU3MrRCxFQUFVNzFDLEdBQ2pCLE9BQWUsT0FBUkEsR0FBK0IsaUJBQVJBLEVBTWhDLElBQUk4MUMsRUFBWWhqRSxPQUFPdkIsVUFBVW0rQixTQUVqQyxTQUFTcW1DLEVBQVd4K0QsR0FDbEIsT0FBT3UrRCxFQUFVM2dFLEtBQUtvQyxHQUFPMEQsTUFBTSxHQUFJLEdBT3pDLFNBQVMrNkQsRUFBZWgyQyxHQUN0QixNQUErQixvQkFBeEI4MUMsRUFBVTNnRSxLQUFLNnFCLEdBR3hCLFNBQVNpMkMsRUFBVXBvQixHQUNqQixNQUE2QixvQkFBdEJpb0IsRUFBVTNnRSxLQUFLMDRDLEdBTXhCLFNBQVNxb0IsRUFBbUJybkIsR0FDMUIsSUFBSWhGLEVBQUlzZixXQUFXbnlCLE9BQU82WCxJQUMxQixPQUFPaEYsR0FBSyxHQUFLN3RDLEtBQUsrVixNQUFNODNCLEtBQU9BLEdBQUtwbEIsU0FBU29xQixHQUduRCxTQUFTc25CLEVBQVd0bkIsR0FDbEIsT0FDRTZtQixFQUFNN21CLElBQ2MsbUJBQWJBLEVBQUlvTCxNQUNVLG1CQUFkcEwsRUFBSXVuQixNQU9mLFNBQVMxbUMsRUFBVW1mLEdBQ2pCLE9BQWMsTUFBUEEsRUFDSCxHQUNBeHdCLE1BQU00cUIsUUFBUTRGLElBQVNtbkIsRUFBY25uQixJQUFRQSxFQUFJbmYsV0FBYW9tQyxFQUM1RHRyQixLQUFLQyxVQUFVb0UsRUFBSyxLQUFNLEdBQzFCN1gsT0FBTzZYLEdBT2YsU0FBU3duQixFQUFVeG5CLEdBQ2pCLElBQUloRixFQUFJc2YsV0FBV3RhLEdBQ25CLE9BQU95bkIsTUFBTXpzQixHQUFLZ0YsRUFBTWhGLEVBTzFCLFNBQVMwc0IsRUFDUC9YLEVBQ0FnWSxHQUlBLElBRkEsSUFBSXZoQyxFQUFNbmlDLE9BQU9pbEQsT0FBTyxNQUNwQjNzQixFQUFPb3pCLEVBQUkvTyxNQUFNLEtBQ1pqMEIsRUFBSSxFQUFHQSxFQUFJNFAsRUFBS3Q2QixPQUFRMHFCLElBQy9CeVosRUFBSTdKLEVBQUs1UCxLQUFNLEVBRWpCLE9BQU9nN0MsRUFDSCxTQUFVM25CLEdBQU8sT0FBTzVaLEVBQUk0WixFQUFJcDRCLGdCQUNoQyxTQUFVbzRCLEdBQU8sT0FBTzVaLEVBQUk0WixJQU1sQyxJQUFJNG5CLEVBQWVGLEVBQVEsa0JBQWtCLEdBS3pDRyxFQUFzQkgsRUFBUSw4QkFLbEMsU0FBU3IrRCxFQUFRNHdDLEVBQUs5bkIsR0FDcEIsR0FBSThuQixFQUFJaDRDLE9BQVEsQ0FDZCxJQUFJOGxCLEVBQVFreUIsRUFBSTVzQyxRQUFROGtCLEdBQ3hCLEdBQUlwSyxHQUFTLEVBQ1gsT0FBT2t5QixFQUFJalEsT0FBT2ppQixFQUFPLElBUS9CLElBQUl3N0IsRUFBaUJ0L0MsT0FBT3ZCLFVBQVU2Z0QsZUFDdEMsU0FBU3VrQixFQUFRMzJDLEVBQUs3aUIsR0FDcEIsT0FBT2kxQyxFQUFlajlDLEtBQUs2cUIsRUFBSzdpQixHQU1sQyxTQUFTeTVELEVBQVF0d0IsR0FDZixJQUFJbWtCLEVBQVEzM0QsT0FBT2lsRCxPQUFPLE1BQzFCLE9BQU8sU0FBb0J5RyxHQUV6QixPQURVaU0sRUFBTWpNLEtBQ0RpTSxFQUFNak0sR0FBT2xZLEVBQUdrWSxLQU9uQyxJQUFJcVksRUFBYSxTQUNiQyxFQUFXRixHQUFPLFNBQVVwWSxHQUM5QixPQUFPQSxFQUFJblQsUUFBUXdyQixHQUFZLFNBQVVoNUQsRUFBRzZ0QyxHQUFLLE9BQU9BLEVBQUlBLEVBQUVpWCxjQUFnQixTQU01RW9VLEVBQWFILEdBQU8sU0FBVXBZLEdBQ2hDLE9BQU9BLEVBQUl0QyxPQUFPLEdBQUd5RyxjQUFnQm5FLEVBQUl2akQsTUFBTSxNQU03Qys3RCxFQUFjLGFBQ2RDLEVBQVlMLEdBQU8sU0FBVXBZLEdBQy9CLE9BQU9BLEVBQUluVCxRQUFRMnJCLEVBQWEsT0FBT3ZnRCxpQkE4QnpDLElBQUlyUixFQUFPd3FDLFNBQVNyK0MsVUFBVTZULEtBSjlCLFNBQXFCa2hDLEVBQUk0d0IsR0FDdkIsT0FBTzV3QixFQUFHbGhDLEtBQUs4eEQsSUFmakIsU0FBdUI1d0IsRUFBSTR3QixHQUN6QixTQUFTQyxFQUFTQyxHQUNoQixJQUFJdmpCLEVBQUloakQsVUFBVUMsT0FDbEIsT0FBTytpRCxFQUNIQSxFQUFJLEVBQ0Z2TixFQUFHcjFDLE1BQU1pbUUsRUFBS3JtRSxXQUNkeTFDLEVBQUdueEMsS0FBSytoRSxFQUFLRSxHQUNmOXdCLEVBQUdueEMsS0FBSytoRSxHQUlkLE9BREFDLEVBQVFFLFFBQVUvd0IsRUFBR3gxQyxPQUNkcW1FLEdBY1QsU0FBU0csRUFBU2xzQyxFQUFNODRCLEdBQ3RCQSxFQUFRQSxHQUFTLEVBR2pCLElBRkEsSUFBSTFvQyxFQUFJNFAsRUFBS3Q2QixPQUFTb3pELEVBQ2xCcVQsRUFBTSxJQUFJbDVDLE1BQU03QyxHQUNiQSxLQUNMKzdDLEVBQUkvN0MsR0FBSzRQLEVBQUs1UCxFQUFJMG9DLEdBRXBCLE9BQU9xVCxFQU1ULFNBQVN4b0IsRUFBUTRFLEVBQUk2akIsR0FDbkIsSUFBSyxJQUFJcjZELEtBQU9xNkQsRUFDZDdqQixFQUFHeDJDLEdBQU9xNkQsRUFBTXI2RCxHQUVsQixPQUFPdzJDLEVBTVQsU0FBU3NRLEVBQVVuYixHQUVqQixJQURBLElBQUkydUIsRUFBTSxHQUNEajhDLEVBQUksRUFBR0EsRUFBSXN0QixFQUFJaDRDLE9BQVEwcUIsSUFDMUJzdEIsRUFBSXR0QixJQUNOdXpCLEVBQU8wb0IsRUFBSzN1QixFQUFJdHRCLElBR3BCLE9BQU9pOEMsRUFVVCxTQUFTdlYsRUFBTWtWLEVBQUd2TixFQUFHbmUsSUFLckIsSUFBSWdzQixFQUFLLFNBQVVOLEVBQUd2TixFQUFHbmUsR0FBSyxPQUFPLEdBT2pDaXNCLEVBQVcsU0FBVTk1RCxHQUFLLE9BQU9BLEdBZXJDLFNBQVMrNUQsRUFBWVIsRUFBR3ZOLEdBQ3RCLEdBQUl1TixJQUFNdk4sRUFBSyxPQUFPLEVBQ3RCLElBQUlnTyxFQUFZaEMsRUFBU3VCLEdBQ3JCVSxFQUFZakMsRUFBU2hNLEdBQ3pCLElBQUlnTyxJQUFhQyxFQXdCVixPQUFLRCxJQUFjQyxHQUNqQjlnQyxPQUFPb2dDLEtBQU9wZ0MsT0FBTzZ5QixHQXhCNUIsSUFDRSxJQUFJa08sRUFBVzE1QyxNQUFNNHFCLFFBQVFtdUIsR0FDekJZLEVBQVczNUMsTUFBTTRxQixRQUFRNGdCLEdBQzdCLEdBQUlrTyxHQUFZQyxFQUNkLE9BQU9aLEVBQUV0bUUsU0FBVys0RCxFQUFFLzRELFFBQVVzbUUsRUFBRWEsT0FBTSxTQUFVM3BELEVBQUdrTixHQUNuRCxPQUFPbzhDLEVBQVd0cEQsRUFBR3U3QyxFQUFFcnVDLE9BRXBCLEdBQUk0N0MsYUFBYTdvQixNQUFRc2IsYUFBYXRiLEtBQzNDLE9BQU82b0IsRUFBRWMsWUFBY3JPLEVBQUVxTyxVQUNwQixHQUFLSCxHQUFhQyxFQVF2QixPQUFPLEVBUFAsSUFBSUcsRUFBUXJsRSxPQUFPaWUsS0FBS3FtRCxHQUNwQmdCLEVBQVF0bEUsT0FBT2llLEtBQUs4NEMsR0FDeEIsT0FBT3NPLEVBQU1ybkUsU0FBV3NuRSxFQUFNdG5FLFFBQVVxbkUsRUFBTUYsT0FBTSxTQUFVOTZELEdBQzVELE9BQU95NkQsRUFBV1IsRUFBRWo2RCxHQUFNMHNELEVBQUUxc0QsT0FNaEMsTUFBT21SLEdBRVAsT0FBTyxHQWNiLFNBQVMrcEQsRUFBY3Z2QixFQUFLK0YsR0FDMUIsSUFBSyxJQUFJcnpCLEVBQUksRUFBR0EsRUFBSXN0QixFQUFJaDRDLE9BQVEwcUIsSUFDOUIsR0FBSW84QyxFQUFXOXVCLEVBQUl0dEIsR0FBSXF6QixHQUFRLE9BQU9yekIsRUFFeEMsT0FBUSxFQU1WLFNBQVNnckIsRUFBTUYsR0FDYixJQUFJZ3lCLEdBQVMsRUFDYixPQUFPLFdBQ0FBLElBQ0hBLEdBQVMsRUFDVGh5QixFQUFHcjFDLE1BQU1GLEtBQU1GLGFBS3JCLElBQUkwbkUsRUFBVyx1QkFFWEMsRUFBYyxDQUNoQixZQUNBLFlBQ0EsVUFHRUMsRUFBa0IsQ0FDcEIsZUFDQSxVQUNBLGNBQ0EsVUFDQSxlQUNBLFVBQ0EsZ0JBQ0EsWUFDQSxZQUNBLGNBQ0EsZ0JBQ0Esa0JBT0VDLEVBQVMsQ0FLWEMsc0JBQXVCN2xFLE9BQU9pbEQsT0FBTyxNQUtyQzZnQixRQUFRLEVBS1JDLGVBQWUsRUFLZkMsVUFBVSxFQUtWQyxhQUFhLEVBS2JDLGFBQWMsS0FLZEMsWUFBYSxLQUtiQyxnQkFBaUIsR0FNakJDLFNBQVVybUUsT0FBT2lsRCxPQUFPLE1BTXhCcWhCLGNBQWUxQixFQU1mMkIsZUFBZ0IzQixFQU1oQjRCLGlCQUFrQjVCLEVBS2xCNkIsZ0JBQWlCclgsRUFLakJzWCxxQkFBc0I3QixFQU10QjhCLFlBQWEvQixFQU1iaGhCLE9BQU8sRUFLUGdqQixnQkFBaUJqQixHQVVma0IsRUFBZ0IsOEpBS3BCLFNBQVNDLEVBQVlwYixHQUNuQixJQUFJOVMsR0FBSzhTLEVBQU0sSUFBSTdPLFdBQVcsR0FDOUIsT0FBYSxLQUFOakUsR0FBb0IsS0FBTkEsRUFNdkIsU0FBU211QixFQUFLNzVDLEVBQUs3aUIsRUFBSzB4QyxFQUFLNTdDLEdBQzNCSCxPQUFPQyxlQUFlaXRCLEVBQUs3aUIsRUFBSyxDQUM5QjVGLE1BQU9zM0MsRUFDUDU3QyxhQUFjQSxFQUNkb2xDLFVBQVUsRUFDVm5sQyxjQUFjLElBT2xCLElBQUk0bUUsRUFBUyxJQUFJNXNCLE9BQVEsS0FBUXlzQixFQUFvQixPQUFJLFdBa0J6RCxJQW1DSUksRUFuQ0FDLEVBQVcsYUFBZSxHQUcxQkMsRUFBOEIsb0JBQVh2aUUsT0FDbkJ3aUUsRUFBa0Msb0JBQWxCQyxpQkFBbUNBLGNBQWNDLFNBQ2pFQyxFQUFlSCxHQUFVQyxjQUFjQyxTQUFTM2pELGNBQ2hENmpELEVBQUtMLEdBQWF2aUUsT0FBT2cxQyxVQUFVQyxVQUFVbDJCLGNBQzdDOGpELEVBQU9ELEdBQU0sZUFBZXR3QixLQUFLc3dCLEdBQ2pDRSxFQUFRRixHQUFNQSxFQUFHcCtELFFBQVEsWUFBYyxFQUN2Q3UrRCxFQUFTSCxHQUFNQSxFQUFHcCtELFFBQVEsU0FBVyxFQUVyQ3crRCxJQURhSixHQUFNQSxFQUFHcCtELFFBQVEsV0FDckJvK0QsR0FBTSx1QkFBdUJ0d0IsS0FBS3N3QixJQUEwQixRQUFqQkQsR0FHcERNLElBRldMLEdBQU0sY0FBY3R3QixLQUFLc3dCLEdBQ3RCQSxHQUFNLFlBQVl0d0IsS0FBS3N3QixHQUM5QkEsR0FBTUEsRUFBR3p1QixNQUFNLG1CQUd0Qit1QixHQUFjLEdBQUtDLE1BRW5CQyxJQUFrQixFQUN0QixHQUFJYixFQUNGLElBQ0UsSUFBSW52RCxHQUFPLEdBQ1hoWSxPQUFPQyxlQUFlK1gsR0FBTSxVQUFXLENBQ3JDOVgsSUFBSyxXQUVIOG5FLElBQWtCLEtBR3RCcGpFLE9BQU8zRixpQkFBaUIsZUFBZ0IsS0FBTStZLElBQzlDLE1BQU93RCxJQU1YLElBQUl5c0QsR0FBb0IsV0FXdEIsWUFWa0I3cEUsSUFBZDZvRSxJQU9BQSxHQUxHRSxJQUFjQyxRQUE0QixJQUFYLEVBQUFjLEdBR3RCLEVBQUFBLEVBQWdCLFNBQXVDLFdBQWxDLEVBQUFBLEVBQWdCLFFBQUV6dUIsSUFBSTB1QixTQUtwRGxCLEdBSUxqQixHQUFXbUIsR0FBYXZpRSxPQUFPd2pFLDZCQUduQyxTQUFTQyxHQUFVQyxHQUNqQixNQUF1QixtQkFBVEEsR0FBdUIsY0FBY3B4QixLQUFLb3hCLEVBQUsxckMsWUFHL0QsSUFJSTJyQyxHQUpBQyxHQUNnQixvQkFBWG55QixRQUEwQmd5QixHQUFTaHlCLFNBQ3ZCLG9CQUFab3lCLFNBQTJCSixHQUFTSSxRQUFRQyxTQU1uREgsR0FGaUIsb0JBQVIxMUQsS0FBdUJ3MUQsR0FBU3gxRCxLQUVsQ0EsSUFHYyxXQUNuQixTQUFTQSxJQUNQNVUsS0FBS3NHLElBQU12RSxPQUFPaWxELE9BQU8sTUFZM0IsT0FWQXB5QyxFQUFJcFUsVUFBVThrQixJQUFNLFNBQWNsWixHQUNoQyxPQUF5QixJQUFsQnBNLEtBQUtzRyxJQUFJOEYsSUFFbEJ3SSxFQUFJcFUsVUFBVXdHLElBQU0sU0FBY29GLEdBQ2hDcE0sS0FBS3NHLElBQUk4RixJQUFPLEdBRWxCd0ksRUFBSXBVLFVBQVVrcUUsTUFBUSxXQUNwQjFxRSxLQUFLc0csSUFBTXZFLE9BQU9pbEQsT0FBTyxPQUdwQnB5QyxFQWRXLEdBb0J0QixJQUFJNG5DLEdBQ0FtdUIsR0FFQUMsR0FEQUMsR0FBeUIsRUFJdkJDLEdBQWdDLG9CQUFaaHZCLFFBQ3BCaXZCLEdBQWEsa0JBS2pCdnVCLEdBQU8sU0FBVTJGLEVBQUs2b0IsR0FDcEIsSUFBSUMsRUFBUUQsRUFBS0gsR0FBdUJHLEdBQU0sR0FFMUNyRCxFQUFPTyxZQUNUUCxFQUFPTyxZQUFZOWpFLEtBQUssS0FBTSs5QyxFQUFLNm9CLEVBQUlDLEdBQzlCSCxLQUFnQm5ELEVBQU9FLFFBQ2hDL3JCLFFBQVFsekMsTUFBTyxlQUFpQnU1QyxFQUFNOG9CLElBSTFDTixHQUFNLFNBQVV4b0IsRUFBSzZvQixHQUNmRixLQUFnQm5ELEVBQU9FLFFBQ3pCL3JCLFFBQVFVLEtBQUssY0FBZ0IyRixHQUMzQjZvQixFQUFLSCxHQUF1QkcsR0FBTSxNQUt4Q0osR0FBc0IsU0FBVUksRUFBSUUsR0FDbEMsR0FBSUYsRUFBR0csUUFBVUgsRUFDZixNQUFPLFNBRVQsSUFBSWpxRSxFQUF3QixtQkFBUGlxRSxHQUErQixNQUFWQSxFQUFHSSxJQUN6Q0osRUFBR2pxRSxRQUNIaXFFLEVBQUdLLE9BQ0RMLEVBQUdNLFVBQVlOLEVBQUdqeUIsWUFBWWg0QyxRQUM5QmlxRSxFQUNGaHlCLEVBQU9qNEMsRUFBUWk0QyxNQUFRajRDLEVBQVF3cUUsY0FDL0JDLEVBQU96cUUsRUFBUTBxRSxPQUNuQixJQUFLenlCLEdBQVF3eUIsRUFBTSxDQUNqQixJQUFJMXdCLEVBQVEwd0IsRUFBSzF3QixNQUFNLG1CQUN2QjlCLEVBQU84QixHQUFTQSxFQUFNLEdBR3hCLE9BQ0c5QixFQUFRLElBdkNFLFNBQVV5VSxHQUFPLE9BQU9BLEVBQ3BDblQsUUFBUXl3QixJQUFZLFNBQVVwd0IsR0FBSyxPQUFPQSxFQUFFaVgsaUJBQzVDdFgsUUFBUSxRQUFTLElBcUNELENBQVV0QixHQUFTLElBQU8sZ0JBQ3hDd3lCLElBQXdCLElBQWhCTixFQUF5QixPQUFTTSxFQUFRLEtBY3ZEWCxHQUF5QixTQUFVRyxHQUNqQyxHQUFJQSxFQUFHSyxRQUFVTCxFQUFHVSxRQUFTLENBRzNCLElBRkEsSUFBSUMsRUFBTyxHQUNQQyxFQUEyQixFQUN4QlosR0FBSSxDQUNULEdBQUlXLEVBQUs1ckUsT0FBUyxFQUFHLENBQ25CLElBQUk4ckUsRUFBT0YsRUFBS0EsRUFBSzVyRSxPQUFTLEdBQzlCLEdBQUk4ckUsRUFBSzl5QixjQUFnQml5QixFQUFHanlCLFlBQWEsQ0FDdkM2eUIsSUFDQVosRUFBS0EsRUFBR1UsUUFDUixTQUNTRSxFQUEyQixJQUNwQ0QsRUFBS0EsRUFBSzVyRSxPQUFTLEdBQUssQ0FBQzhyRSxFQUFNRCxHQUMvQkEsRUFBMkIsR0FHL0JELEVBQUsxK0QsS0FBSys5RCxHQUNWQSxFQUFLQSxFQUFHVSxRQUVWLE1BQU8sbUJBQXFCQyxFQUN6QnpuQyxLQUFJLFNBQVU4bUMsRUFBSXZnRCxHQUFLLE1BQVEsSUFBWSxJQUFOQSxFQUFVLFdBOUJ6QyxTQUFVZ2pDLEVBQUszVSxHQUUxQixJQURBLElBQUk0dEIsRUFBTSxHQUNINXRCLEdBQ0RBLEVBQUksR0FBTSxJQUFLNHRCLEdBQU9qWixHQUN0QjNVLEVBQUksSUFBSzJVLEdBQU9BLEdBQ3BCM1UsSUFBTSxFQUVSLE9BQU80dEIsRUF1QnVEb0YsQ0FBTyxJQUFLLEVBQVEsRUFBSnJoRCxLQUFXNkMsTUFBTTRxQixRQUFROHlCLEdBQzNGSixHQUFvQkksRUFBRyxJQUFPLFFBQVdBLEVBQUcsR0FBTSxvQkFDcERKLEdBQW9CSSxPQUN6Qm44RCxLQUFLLE1BRVIsTUFBUSxpQkFBb0IrN0QsR0FBb0JJLEdBQU8sS0FPN0QsSUFBSWUsR0FBTSxFQU1OQyxHQUFNLFdBQ1Joc0UsS0FBS3UzQyxHQUFLdzBCLEtBQ1YvckUsS0FBS3k2RCxLQUFPLElBR2R1UixHQUFJeHJFLFVBQVV5ckUsT0FBUyxTQUFpQkMsR0FDdENsc0UsS0FBS3k2RCxLQUFLeHRELEtBQUtpL0QsSUFHakJGLEdBQUl4ckUsVUFBVTJyRSxVQUFZLFNBQW9CRCxHQUM1Qy9rRSxFQUFPbkgsS0FBS3k2RCxLQUFNeVIsSUFHcEJGLEdBQUl4ckUsVUFBVTRyRSxPQUFTLFdBQ2pCSixHQUFJcDVELFFBQ05vNUQsR0FBSXA1RCxPQUFPeTVELE9BQU9yc0UsT0FJdEJnc0UsR0FBSXhyRSxVQUFVOHJFLE9BQVMsV0FFckIsSUFBSTdSLEVBQU96NkQsS0FBS3k2RCxLQUFLdndELFFBQ2hCeTlELEVBQU9oaUIsT0FJVjhVLEVBQUtoc0MsTUFBSyxTQUFVNDNDLEVBQUd2TixHQUFLLE9BQU91TixFQUFFOXVCLEdBQUt1aEIsRUFBRXZoQixNQUU5QyxJQUFLLElBQUk5c0IsRUFBSSxFQUFHcTRCLEVBQUkyWCxFQUFLMTZELE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQ3RDZ3dDLEVBQUtod0MsR0FBR2s0QyxVQU9acUosR0FBSXA1RCxPQUFTLEtBQ2IsSUFBSTI1RCxHQUFjLEdBRWxCLFNBQVNDLEdBQVk1NUQsR0FDbkIyNUQsR0FBWXQvRCxLQUFLMkYsR0FDakJvNUQsR0FBSXA1RCxPQUFTQSxFQUdmLFNBQVM2NUQsS0FDUEYsR0FBWW5PLE1BQ1o0TixHQUFJcDVELE9BQVMyNUQsR0FBWUEsR0FBWXhzRSxPQUFTLEdBS2hELElBQUkyc0UsR0FBUSxTQUNWQyxFQUNBaHpCLEVBQ0E3dUMsRUFDQWtjLEVBQ0E0bEQsRUFDQUMsRUFDQUMsRUFDQUMsR0FFQS9zRSxLQUFLMnNFLElBQU1BLEVBQ1gzc0UsS0FBSzI1QyxLQUFPQSxFQUNaMzVDLEtBQUs4SyxTQUFXQSxFQUNoQjlLLEtBQUtnbkIsS0FBT0EsRUFDWmhuQixLQUFLNHNFLElBQU1BLEVBQ1g1c0UsS0FBS2d0RSxRQUFLN3NFLEVBQ1ZILEtBQUs2c0UsUUFBVUEsRUFDZjdzRSxLQUFLaXRFLGVBQVk5c0UsRUFDakJILEtBQUtrdEUsZUFBWS9zRSxFQUNqQkgsS0FBS210RSxlQUFZaHRFLEVBQ2pCSCxLQUFLb00sSUFBTXV0QyxHQUFRQSxFQUFLdnRDLElBQ3hCcE0sS0FBSzhzRSxpQkFBbUJBLEVBQ3hCOXNFLEtBQUtvdEUsdUJBQW9CanRFLEVBQ3pCSCxLQUFLMnlELFlBQVN4eUQsRUFDZEgsS0FBS3F0RSxLQUFNLEVBQ1hydEUsS0FBS3N0RSxVQUFXLEVBQ2hCdHRFLEtBQUt1dEUsY0FBZSxFQUNwQnZ0RSxLQUFLd3RFLFdBQVksRUFDakJ4dEUsS0FBS3l0RSxVQUFXLEVBQ2hCenRFLEtBQUswdEUsUUFBUyxFQUNkMXRFLEtBQUsrc0UsYUFBZUEsRUFDcEIvc0UsS0FBSzJ0RSxlQUFZeHRFLEVBQ2pCSCxLQUFLNHRFLG9CQUFxQixHQUd4QkMsR0FBcUIsQ0FBRWpiLE1BQU8sQ0FBRXp3RCxjQUFjLElBSWxEMHJFLEdBQW1CamIsTUFBTTN3RCxJQUFNLFdBQzdCLE9BQU9qQyxLQUFLb3RFLG1CQUdkcnJFLE9BQU8rckUsaUJBQWtCcEIsR0FBTWxzRSxVQUFXcXRFLElBRTFDLElBQUlFLEdBQW1CLFNBQVUvbUQsUUFDakIsSUFBVEEsSUFBa0JBLEVBQU8sSUFFOUIsSUFBSWduRCxFQUFPLElBQUl0QixHQUdmLE9BRkFzQixFQUFLaG5ELEtBQU9BLEVBQ1pnbkQsRUFBS1IsV0FBWSxFQUNWUSxHQUdULFNBQVNDLEdBQWlCbndCLEdBQ3hCLE9BQU8sSUFBSTR1QixRQUFNdnNFLE9BQVdBLE9BQVdBLEVBQVc4bEMsT0FBTzZYLElBTzNELFNBQVNvd0IsR0FBWUMsR0FDbkIsSUFBSUMsRUFBUyxJQUFJMUIsR0FDZnlCLEVBQU14QixJQUNOd0IsRUFBTXgwQixLQUlOdzBCLEVBQU1yakUsVUFBWXFqRSxFQUFNcmpFLFNBQVNaLFFBQ2pDaWtFLEVBQU1ubkQsS0FDTm1uRCxFQUFNdkIsSUFDTnVCLEVBQU10QixRQUNOc0IsRUFBTXJCLGlCQUNOcUIsRUFBTXBCLGNBV1IsT0FUQXFCLEVBQU9wQixHQUFLbUIsRUFBTW5CLEdBQ2xCb0IsRUFBT2QsU0FBV2EsRUFBTWIsU0FDeEJjLEVBQU9oaUUsSUFBTStoRSxFQUFNL2hFLElBQ25CZ2lFLEVBQU9aLFVBQVlXLEVBQU1YLFVBQ3pCWSxFQUFPbkIsVUFBWWtCLEVBQU1sQixVQUN6Qm1CLEVBQU9sQixVQUFZaUIsRUFBTWpCLFVBQ3pCa0IsRUFBT2pCLFVBQVlnQixFQUFNaEIsVUFDekJpQixFQUFPVCxVQUFZUSxFQUFNUixVQUN6QlMsRUFBT1gsVUFBVyxFQUNYVyxFQVFULElBQUlDLEdBQWEvZ0QsTUFBTTlzQixVQUNuQjh0RSxHQUFldnNFLE9BQU9pbEQsT0FBT3FuQixJQUVaLENBQ25CLE9BQ0EsTUFDQSxRQUNBLFVBQ0EsU0FDQSxPQUNBLFdBTWFqa0UsU0FBUSxTQUFVKzdDLEdBRS9CLElBQUlvb0IsRUFBV0YsR0FBV2xvQixHQUMxQjJpQixFQUFJd0YsR0FBY25vQixHQUFRLFdBRXhCLElBREEsSUFBSXZtRCxFQUFPLEdBQUk2MEMsRUFBTTMwQyxVQUFVQyxPQUN2QjAwQyxLQUFRNzBDLEVBQU02MEMsR0FBUTMwQyxVQUFXMjBDLEdBRXpDLElBRUkrNUIsRUFGQS9pQixFQUFTOGlCLEVBQVNydUUsTUFBTUYsS0FBTUosR0FDOUI2dUUsRUFBS3p1RSxLQUFLMHVFLE9BRWQsT0FBUXZvQixHQUNOLElBQUssT0FDTCxJQUFLLFVBQ0hxb0IsRUFBVzV1RSxFQUNYLE1BQ0YsSUFBSyxTQUNINHVFLEVBQVc1dUUsRUFBS3NLLE1BQU0sR0FNMUIsT0FISXNrRSxHQUFZQyxFQUFHRSxhQUFhSCxHQUVoQ0MsRUFBR0csSUFBSXRDLFNBQ0E3Z0IsUUFNWCxJQUFJb2pCLEdBQVk5c0UsT0FBTytzRSxvQkFBb0JSLElBTXZDUyxJQUFnQixFQUVwQixTQUFTQyxHQUFpQnhvRSxHQUN4QnVvRSxHQUFnQnZvRSxFQVNsQixJQUFJeW9FLEdBQVcsU0FBbUJ6b0UsR0FDaEN4RyxLQUFLd0csTUFBUUEsRUFDYnhHLEtBQUs0dUUsSUFBTSxJQUFJNUMsR0FDZmhzRSxLQUFLa3ZFLFFBQVUsRUFDZnBHLEVBQUl0aUUsRUFBTyxTQUFVeEcsTUFDakJzdEIsTUFBTTRxQixRQUFRMXhDLElBQ1p5aUUsRUFzQ1IsU0FBdUJyMkQsRUFBUWd6QyxHQUU3Qmh6QyxFQUFPMjhDLFVBQVkzSixFQXZDZnVwQixDQUFhM29FLEVBQU84bkUsSUFnRDFCLFNBQXNCMTdELEVBQVFnekMsRUFBSzVsQyxHQUNqQyxJQUFLLElBQUl5SyxFQUFJLEVBQUdxNEIsRUFBSTlpQyxFQUFLamdCLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQUssQ0FDM0MsSUFBSXJlLEVBQU00VCxFQUFLeUssR0FDZnErQyxFQUFJbDJELEVBQVF4RyxFQUFLdzVDLEVBQUl4NUMsS0FqRG5CZ2pFLENBQVk1b0UsRUFBTzhuRSxHQUFjTyxJQUVuQzd1RSxLQUFLMnVFLGFBQWFub0UsSUFFbEJ4RyxLQUFLcXZFLEtBQUs3b0UsSUFzRGQsU0FBUzYrQixHQUFTNytCLEVBQU84b0UsR0FJdkIsSUFBSWIsRUFISixHQUFLM0osRUFBU3QrRCxNQUFVQSxhQUFpQmttRSxJQWtCekMsT0FkSTlHLEVBQU9wL0QsRUFBTyxXQUFhQSxFQUFNa29FLGtCQUFrQk8sR0FDckRSLEVBQUtqb0UsRUFBTWtvRSxPQUVYSyxLQUNDL0UsT0FDQTE4QyxNQUFNNHFCLFFBQVExeEMsSUFBVXkrRCxFQUFjeitELEtBQ3ZDekUsT0FBT3d0RSxhQUFhL29FLEtBQ25CQSxFQUFNNmtFLFNBRVBvRCxFQUFLLElBQUlRLEdBQVN6b0UsSUFFaEI4b0UsR0FBY2IsR0FDaEJBLEVBQUdTLFVBRUVULEVBTVQsU0FBU2UsR0FDUHZnRCxFQUNBN2lCLEVBQ0EweEMsRUFDQTJ4QixFQUNBQyxHQUVBLElBQUlkLEVBQU0sSUFBSTVDLEdBRVZ2bEMsRUFBVzFrQyxPQUFPa0cseUJBQXlCZ25CLEVBQUs3aUIsR0FDcEQsSUFBSXE2QixJQUFzQyxJQUExQkEsRUFBU3RrQyxhQUF6QixDQUtBLElBQUl3dEUsRUFBU2xwQyxHQUFZQSxFQUFTeGtDLElBQzlCMnRFLEVBQVNucEMsR0FBWUEsRUFBU25nQyxJQUM1QnFwRSxJQUFVQyxHQUFnQyxJQUFyQjl2RSxVQUFVQyxTQUNuQys5QyxFQUFNN3VCLEVBQUk3aUIsSUFHWixJQUFJeWpFLEdBQVdILEdBQVdycUMsR0FBUXlZLEdBQ2xDLzdDLE9BQU9DLGVBQWVpdEIsRUFBSzdpQixFQUFLLENBQzlCbEssWUFBWSxFQUNaQyxjQUFjLEVBQ2RGLElBQUssV0FDSCxJQUFJdUUsRUFBUW1wRSxFQUFTQSxFQUFPdnJFLEtBQUs2cUIsR0FBTzZ1QixFQVV4QyxPQVRJa3VCLEdBQUlwNUQsU0FDTmc4RCxFQUFJeEMsU0FDQXlELElBQ0ZBLEVBQVFqQixJQUFJeEMsU0FDUjkrQyxNQUFNNHFCLFFBQVExeEMsSUFDaEJzcEUsR0FBWXRwRSxLQUlYQSxHQUVURixJQUFLLFNBQXlCeXBFLEdBQzVCLElBQUl2cEUsRUFBUW1wRSxFQUFTQSxFQUFPdnJFLEtBQUs2cUIsR0FBTzZ1QixFQUVwQ2l5QixJQUFXdnBFLEdBQVV1cEUsR0FBV0EsR0FBVXZwRSxHQUFVQSxJQUlwRGlwRSxHQUNGQSxJQUdFRSxJQUFXQyxJQUNYQSxFQUNGQSxFQUFPeHJFLEtBQUs2cUIsRUFBSzhnRCxHQUVqQmp5QixFQUFNaXlCLEVBRVJGLEdBQVdILEdBQVdycUMsR0FBUTBxQyxHQUM5Qm5CLEVBQUl0QyxlQVVWLFNBQVNobUUsR0FBS3NNLEVBQVF4RyxFQUFLMHhDLEdBS3pCLElBSkk0bUIsRUFBUTl4RCxJQUFXaXlELEVBQVlqeUQsS0FFakM0cEMsR0FBTSx3RUFBMEUsR0FFOUVsdkIsTUFBTTRxQixRQUFRdGxDLElBQVd1eUQsRUFBa0IvNEQsR0FHN0MsT0FGQXdHLEVBQU83UyxPQUFTa0wsS0FBS0MsSUFBSTBILEVBQU83UyxPQUFRcU0sR0FDeEN3RyxFQUFPazFCLE9BQU8xN0IsRUFBSyxFQUFHMHhDLEdBQ2ZBLEVBRVQsR0FBSTF4QyxLQUFPd0csS0FBWXhHLEtBQU9ySyxPQUFPdkIsV0FFbkMsT0FEQW9TLEVBQU94RyxHQUFPMHhDLEVBQ1BBLEVBRVQsSUFBSTJ3QixFQUFLLEVBQVNDLE9BQ2xCLE9BQUk5N0QsRUFBT3k0RCxRQUFXb0QsR0FBTUEsRUFBR1MsU0FDN0IxeUIsR0FDRSw0SEFHS3NCLEdBRUoyd0IsR0FJTGUsR0FBa0JmLEVBQUdqb0UsTUFBTzRGLEVBQUsweEMsR0FDakMyd0IsRUFBR0csSUFBSXRDLFNBQ0F4dUIsSUFMTGxyQyxFQUFPeEcsR0FBTzB4QyxFQUNQQSxHQVVYLFNBQVNreUIsR0FBS3A5RCxFQUFReEcsR0FLcEIsSUFKSXM0RCxFQUFROXhELElBQVdpeUQsRUFBWWp5RCxLQUVqQzRwQyxHQUFNLDJFQUE2RSxHQUVqRmx2QixNQUFNNHFCLFFBQVF0bEMsSUFBV3V5RCxFQUFrQi80RCxHQUM3Q3dHLEVBQU9rMUIsT0FBTzE3QixFQUFLLE9BRHJCLENBSUEsSUFBSXFpRSxFQUFLLEVBQVNDLE9BQ2Q5N0QsRUFBT3k0RCxRQUFXb0QsR0FBTUEsRUFBR1MsUUFDN0IxeUIsR0FDRSx3RkFLQ29wQixFQUFPaHpELEVBQVF4RyxZQUdid0csRUFBT3hHLEdBQ1RxaUUsR0FHTEEsRUFBR0csSUFBSXRDLFdBT1QsU0FBU3dELEdBQWF0cEUsR0FDcEIsSUFBSyxJQUFJK1csT0FBSSxFQUFVa04sRUFBSSxFQUFHcTRCLEVBQUl0OEMsRUFBTXpHLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLEtBQ3JEbE4sRUFBSS9XLEVBQU1pa0IsS0FDTGxOLEVBQUVteEQsUUFBVW54RCxFQUFFbXhELE9BQU9FLElBQUl4QyxTQUMxQjkrQyxNQUFNNHFCLFFBQVEzNkIsSUFDaEJ1eUQsR0FBWXZ5RCxHQTlNbEIweEQsR0FBU3p1RSxVQUFVNnVFLEtBQU8sU0FBZXBnRCxHQUV2QyxJQURBLElBQUlqUCxFQUFPamUsT0FBT2llLEtBQUtpUCxHQUNkeEUsRUFBSSxFQUFHQSxFQUFJekssRUFBS2pnQixPQUFRMHFCLElBQy9CK2tELEdBQWtCdmdELEVBQUtqUCxFQUFLeUssS0FPaEN3a0QsR0FBU3p1RSxVQUFVbXVFLGFBQWUsU0FBdUJyMEMsR0FDdkQsSUFBSyxJQUFJN1AsRUFBSSxFQUFHcTRCLEVBQUl4b0IsRUFBTXY2QixPQUFRMHFCLEVBQUlxNEIsRUFBR3I0QixJQUN2QzRhLEdBQVEvSyxFQUFNN1AsS0E4TWxCLElBQUl3bEQsR0FBU3RJLEVBQU9DLHNCQW9CcEIsU0FBU3NJLEdBQVd0dEIsRUFBSTl6QixHQUN0QixJQUFLQSxFQUFRLE9BQU84ekIsRUFPcEIsSUFOQSxJQUFJeDJDLEVBQUsrakUsRUFBT0MsRUFFWnB3RCxFQUFPdXFELEdBQ1BDLFFBQVFDLFFBQVEzN0MsR0FDaEIvc0IsT0FBT2llLEtBQUs4TyxHQUVQckUsRUFBSSxFQUFHQSxFQUFJekssRUFBS2pnQixPQUFRMHFCLElBR25CLFlBRlpyZSxFQUFNNFQsRUFBS3lLLE1BR1gwbEQsRUFBUXZ0QixFQUFHeDJDLEdBQ1hna0UsRUFBVXRoRCxFQUFLMWlCLEdBQ1Z3NUQsRUFBT2hqQixFQUFJeDJDLEdBR2QrakUsSUFBVUMsR0FDVm5MLEVBQWNrTCxJQUNkbEwsRUFBY21MLElBRWRGLEdBQVVDLEVBQU9DLEdBTmpCOXBFLEdBQUlzOEMsRUFBSXgyQyxFQUFLZ2tFLElBU2pCLE9BQU94dEIsRUFNVCxTQUFTeXRCLEdBQ1BDLEVBQ0FDLEVBQ0F2RixHQUVBLE9BQUtBLEVBb0JJLFdBRUwsSUFBSXdGLEVBQW1DLG1CQUFiRCxFQUN0QkEsRUFBU25zRSxLQUFLNG1FLEVBQUlBLEdBQ2xCdUYsRUFDQUUsRUFBbUMsbUJBQWRILEVBQ3JCQSxFQUFVbHNFLEtBQUs0bUUsRUFBSUEsR0FDbkJzRixFQUNKLE9BQUlFLEVBQ0tOLEdBQVVNLEVBQWNDLEdBRXhCQSxHQTdCTkYsRUFHQUQsRUFRRSxXQUNMLE9BQU9KLEdBQ2UsbUJBQWJLLEVBQTBCQSxFQUFTbnNFLEtBQUtwRSxLQUFNQSxNQUFRdXdFLEVBQ3hDLG1CQUFkRCxFQUEyQkEsRUFBVWxzRSxLQUFLcEUsS0FBTUEsTUFBUXN3RSxJQVYxREMsRUFIQUQsRUEyRGIsU0FBU0ksR0FDUEosRUFDQUMsR0FFQSxJQUFJN0osRUFBTTZKLEVBQ05ELEVBQ0VBLEVBQVU3NEIsT0FBTzg0QixHQUNqQmpqRCxNQUFNNHFCLFFBQVFxNEIsR0FDWkEsRUFDQSxDQUFDQSxHQUNMRCxFQUNKLE9BQU81SixFQUtULFNBQXNCaUssR0FFcEIsSUFEQSxJQUFJakssRUFBTSxHQUNEajhDLEVBQUksRUFBR0EsRUFBSWttRCxFQUFNNXdFLE9BQVEwcUIsS0FDRCxJQUEzQmk4QyxFQUFJdjdELFFBQVF3bEUsRUFBTWxtRCxLQUNwQmk4QyxFQUFJejVELEtBQUswakUsRUFBTWxtRCxJQUduQixPQUFPaThDLEVBWEhrSyxDQUFZbEssR0FDWkEsRUF3Qk4sU0FBU21LLEdBQ1BQLEVBQ0FDLEVBQ0F2RixFQUNBNStELEdBRUEsSUFBSXM2RCxFQUFNM2tFLE9BQU9pbEQsT0FBT3NwQixHQUFhLE1BQ3JDLE9BQUlDLEdBQ0ZPLEdBQWlCMWtFLEVBQUtta0UsRUFBVXZGLEdBQ3pCaHRCLEVBQU8wb0IsRUFBSzZKLElBRVo3SixFQS9KVHVKLEdBQU83d0UsR0FBSzZ3RSxHQUFPYyxVQUFZLFNBQVVwZSxFQUFRQyxFQUFPb1ksRUFBSTUrRCxHQU8xRCxPQU5LNCtELEdBQ0h4dUIsR0FDRSxXQUFjcHdDLEVBQWQsdUVBSUc0a0UsR0FBYXJlLEVBQVFDLElBK0VoQ3FkLEdBQU90MkIsS0FBTyxTQUNaMjJCLEVBQ0FDLEVBQ0F2RixHQUVBLE9BQUtBLEVBY0VxRixHQUFjQyxFQUFXQyxFQUFVdkYsR0FicEN1RixHQUFnQyxtQkFBYkEsR0FDckIvekIsR0FDRSxxR0FHQXd1QixHQUdLc0YsR0FFRkQsR0FBY0MsRUFBV0MsSUFtQ3BDN0ksRUFBZ0J0OUQsU0FBUSxTQUFVNm1FLEdBQ2hDaEIsR0FBT2dCLEdBQVFQLE1BeUJqQmpKLEVBQVlyOUQsU0FBUSxTQUFVZ1YsR0FDNUI2d0QsR0FBTzd3RCxFQUFPLEtBQU95eEQsTUFTdkJaLEdBQU9uRyxNQUFRLFNBQ2J3RyxFQUNBQyxFQUNBdkYsRUFDQTUrRCxHQU1BLEdBSElra0UsSUFBY3pHLEtBQWV5RyxPQUFZbndFLEdBQ3pDb3dFLElBQWExRyxLQUFlMEcsT0FBV3B3RSxJQUV0Q293RSxFQUFZLE9BQU94dUUsT0FBT2lsRCxPQUFPc3BCLEdBQWEsTUFJbkQsR0FGRVEsR0FBaUIxa0UsRUFBS21rRSxFQUFVdkYsSUFFN0JzRixFQUFhLE9BQU9DLEVBQ3pCLElBQUkvSixFQUFNLEdBRVYsSUFBSyxJQUFJMEssS0FEVGx6QixFQUFPd29CLEVBQUs4SixHQUNNQyxFQUFVLENBQzFCLElBQUk1ZCxFQUFTNlQsRUFBSTBLLEdBQ2J0ZSxFQUFRMmQsRUFBU1csR0FDakJ2ZSxJQUFXcmxDLE1BQU00cUIsUUFBUXlhLEtBQzNCQSxFQUFTLENBQUNBLElBRVo2VCxFQUFJMEssR0FBU3ZlLEVBQ1RBLEVBQU9sYixPQUFPbWIsR0FDZHRsQyxNQUFNNHFCLFFBQVEwYSxHQUFTQSxFQUFRLENBQUNBLEdBRXRDLE9BQU80VCxHQU1UeUosR0FBT3Q1QyxNQUNQczVDLEdBQU9rQixRQUNQbEIsR0FBT21CLE9BQ1BuQixHQUFPb0IsU0FBVyxTQUNoQmYsRUFDQUMsRUFDQXZGLEVBQ0E1K0QsR0FLQSxHQUhJbWtFLEdBQ0ZPLEdBQWlCMWtFLEVBQUtta0UsRUFBVXZGLElBRTdCc0YsRUFBYSxPQUFPQyxFQUN6QixJQUFJL0osRUFBTXprRSxPQUFPaWxELE9BQU8sTUFHeEIsT0FGQWhKLEVBQU93b0IsRUFBSzhKLEdBQ1JDLEdBQVl2eUIsRUFBT3dvQixFQUFLK0osR0FDckIvSixHQUVUeUosR0FBT3FCLFFBQVVqQixHQUtqQixJQUFJVyxHQUFlLFNBQVVWLEVBQVdDLEdBQ3RDLFlBQW9CcHdFLElBQWJvd0UsRUFDSEQsRUFDQUMsR0FZTixTQUFTZ0IsR0FBdUJ2NEIsR0FDekIsSUFBSW1ELE9BQVEsdUJBQTBCeXNCLEVBQW9CLE9BQUksT0FBUTN2QixLQUFLRCxJQUM5RXdELEdBQ0UsNEJBQThCeEQsRUFBOUIsMkZBSUEwc0IsRUFBYTFzQixJQUFTMnVCLEVBQU9VLGNBQWNydkIsS0FDN0N3RCxHQUNFLGtFQUNTeEQsR0FxRmYsU0FBUzgzQixHQUFrQjkzQixFQUFNeHlDLEVBQU93a0UsR0FDakMvRixFQUFjeitELElBQ2pCZzJDLEdBQ0UsNkJBQWdDeEQsRUFBaEMsa0NBQ2Nnc0IsRUFBVXgrRCxHQUFVLElBQ2xDd2tFLEdBU04sU0FBU3dHLEdBQ1A3ZSxFQUNBQyxFQUNBb1ksR0FrQkEsR0F4SUYsU0FBMEJqcUUsR0FDeEIsSUFBSyxJQUFJcUwsS0FBT3JMLEVBQVEwd0UsV0FDdEJGLEdBQXNCbmxFLEdBdUh0QnNsRSxDQUFnQjllLEdBR0csbUJBQVZBLElBQ1RBLEVBQVFBLEVBQU03eEQsU0FwR2xCLFNBQXlCQSxFQUFTaXFFLEdBQ2hDLElBQUlyMEMsRUFBUTUxQixFQUFRNDFCLE1BQ3BCLEdBQUtBLEVBQUwsQ0FDQSxJQUNJbE0sRUFBR3F6QixFQURING9CLEVBQU0sR0FFVixHQUFJcDVDLE1BQU00cUIsUUFBUXZoQixHQUVoQixJQURBbE0sRUFBSWtNLEVBQU01MkIsT0FDSDBxQixLQUVjLGlCQURuQnF6QixFQUFNbm5CLEVBQU1sTSxJQUdWaThDLEVBRE9YLEVBQVNqb0IsSUFDSixDQUFFMStCLEtBQU0sTUFFcEJvOUIsR0FBSyx1REFHSixHQUFJeW9CLEVBQWN0dUMsR0FDdkIsSUFBSyxJQUFJdnFCLEtBQU91cUIsRUFDZG1uQixFQUFNbm5CLEVBQU12cUIsR0FFWnM2RCxFQURPWCxFQUFTMzVELElBQ0o2NEQsRUFBY25uQixHQUN0QkEsRUFDQSxDQUFFMStCLEtBQU0wK0IsUUFHZHRCLEdBQ0UsNkVBQ2N3b0IsRUFBVXJ1QyxHQUFVLElBQ2xDcTBDLEdBR0pqcUUsRUFBUTQxQixNQUFRK3ZDLEdBd0VoQmlMLENBQWUvZSxFQUFPb1ksR0FsRXhCLFNBQTBCanFFLEVBQVNpcUUsR0FDakMsSUFBSW9HLEVBQVNyd0UsRUFBUXF3RSxPQUNyQixHQUFLQSxFQUFMLENBQ0EsSUFBSVEsRUFBYTd3RSxFQUFRcXdFLE9BQVMsR0FDbEMsR0FBSTlqRCxNQUFNNHFCLFFBQVFrNUIsR0FDaEIsSUFBSyxJQUFJM21ELEVBQUksRUFBR0EsRUFBSTJtRCxFQUFPcnhFLE9BQVEwcUIsSUFDakNtbkQsRUFBV1IsRUFBTzNtRCxJQUFNLENBQUVxRSxLQUFNc2lELEVBQU8zbUQsU0FFcEMsR0FBSXc2QyxFQUFjbU0sR0FDdkIsSUFBSyxJQUFJaGxFLEtBQU9nbEUsRUFBUSxDQUN0QixJQUFJdHpCLEVBQU1zekIsRUFBT2hsRSxHQUNqQndsRSxFQUFXeGxFLEdBQU82NEQsRUFBY25uQixHQUM1QkUsRUFBTyxDQUFFbHZCLEtBQU0xaUIsR0FBTzB4QyxHQUN0QixDQUFFaHZCLEtBQU1ndkIsUUFHZHRCLEdBQ0UsOEVBQ2N3b0IsRUFBVW9NLEdBQVcsSUFDbkNwRyxJQWdESjZHLENBQWdCamYsRUFBT29ZLEdBeEN6QixTQUE4QmpxRSxHQUM1QixJQUFJK3dFLEVBQU8vd0UsRUFBUWd4RSxXQUNuQixHQUFJRCxFQUNGLElBQUssSUFBSTFsRSxLQUFPMGxFLEVBQU0sQ0FDcEIsSUFBSUUsRUFBU0YsRUFBSzFsRSxHQUNJLG1CQUFYNGxFLElBQ1RGLEVBQUsxbEUsR0FBTyxDQUFFaUksS0FBTTI5RCxFQUFRclAsT0FBUXFQLEtBbUMxQ0MsQ0FBb0JyZixJQU1mQSxFQUFNc2YsUUFDTHRmLEVBQU11ZixVQUNSeGYsRUFBUzZlLEdBQWE3ZSxFQUFRQyxFQUFNdWYsUUFBU25ILElBRTNDcFksRUFBTXdmLFFBQ1IsSUFBSyxJQUFJM25ELEVBQUksRUFBR3E0QixFQUFJOFAsRUFBTXdmLE9BQU9yeUUsT0FBUTBxQixFQUFJcTRCLEVBQUdyNEIsSUFDOUNrb0MsRUFBUzZlLEdBQWE3ZSxFQUFRQyxFQUFNd2YsT0FBTzNuRCxHQUFJdWdELEdBS3JELElBQ0k1K0QsRUFEQXJMLEVBQVUsR0FFZCxJQUFLcUwsS0FBT3VtRCxFQUNWMGYsRUFBV2ptRSxHQUViLElBQUtBLEtBQU93bUQsRUFDTGdULEVBQU9qVCxFQUFRdm1ELElBQ2xCaW1FLEVBQVdqbUUsR0FHZixTQUFTaW1FLEVBQVlqbUUsR0FDbkIsSUFBSWttRSxFQUFRckMsR0FBTzdqRSxJQUFRNGtFLEdBQzNCandFLEVBQVFxTCxHQUFPa21FLEVBQU0zZixFQUFPdm1ELEdBQU13bUQsRUFBTXhtRCxHQUFNNCtELEVBQUk1K0QsR0FFcEQsT0FBT3JMLEVBUVQsU0FBU3d4RSxHQUNQeHhFLEVBQ0FxZSxFQUNBbTRCLEVBQ0FpN0IsR0FHQSxHQUFrQixpQkFBUGo3QixFQUFYLENBR0EsSUFBSWs3QixFQUFTMXhFLEVBQVFxZSxHQUVyQixHQUFJd21ELEVBQU82TSxFQUFRbDdCLEdBQU8sT0FBT2s3QixFQUFPbDdCLEdBQ3hDLElBQUltN0IsRUFBYzNNLEVBQVN4dUIsR0FDM0IsR0FBSXF1QixFQUFPNk0sRUFBUUMsR0FBZ0IsT0FBT0QsRUFBT0MsR0FDakQsSUFBSUMsRUFBZTNNLEVBQVcwTSxHQUM5QixHQUFJOU0sRUFBTzZNLEVBQVFFLEdBQWlCLE9BQU9GLEVBQU9FLEdBRWxELElBQUlqTSxFQUFNK0wsRUFBT2w3QixJQUFPazdCLEVBQU9DLElBQWdCRCxFQUFPRSxHQU90RCxPQU5JSCxJQUFnQjlMLEdBQ2xCbHFCLEdBQ0UscUJBQXVCcDlCLEVBQUtsVixNQUFNLEdBQUksR0FBSyxLQUFPcXRDLEVBQ2xEeDJDLEdBR0cybEUsR0FPVCxTQUFTa00sR0FDUHhtRSxFQUNBeW1FLEVBQ0E5QixFQUNBL0YsR0FFQSxJQUFJbDBDLEVBQU8rN0MsRUFBWXptRSxHQUNuQjBtRSxHQUFVbE4sRUFBT21MLEVBQVcza0UsR0FDNUI1RixFQUFRdXFFLEVBQVUza0UsR0FFbEIybUUsRUFBZUMsR0FBYWgwRSxRQUFTODNCLEVBQUsxWCxNQUM5QyxHQUFJMnpELEdBQWdCLEVBQ2xCLEdBQUlELElBQVdsTixFQUFPOXVDLEVBQU0sV0FDMUJ0d0IsR0FBUSxPQUNILEdBQWMsS0FBVkEsR0FBZ0JBLElBQVUwL0QsRUFBVTk1RCxHQUFNLENBR25ELElBQUk2bUUsRUFBY0QsR0FBYS9zQyxPQUFRblAsRUFBSzFYLE9BQ3hDNnpELEVBQWMsR0FBS0YsRUFBZUUsS0FDcEN6c0UsR0FBUSxHQUtkLFFBQWNyRyxJQUFWcUcsRUFBcUIsQ0FDdkJBLEVBaUJKLFNBQThCd2tFLEVBQUlsMEMsRUFBTTFxQixHQUV0QyxHQUFLdzVELEVBQU85dUMsRUFBTSxXQUFsQixDQUdBLElBQUlneUMsRUFBTWh5QyxFQUFLcWpCLFFBWWYsT0FWSTJxQixFQUFTZ0UsSUFDWHRzQixHQUNFLG1DQUFxQ3B3QyxFQUFyQywyRkFHQTQrRCxHQUtBQSxHQUFNQSxFQUFHTSxTQUFTeUYsZ0JBQ1c1d0UsSUFBL0I2cUUsRUFBR00sU0FBU3lGLFVBQVUza0UsU0FDSGpNLElBQW5CNnFFLEVBQUdrSSxPQUFPOW1FLEdBRUg0K0QsRUFBR2tJLE9BQU85bUUsR0FJRyxtQkFBUjA4RCxHQUE2QyxhQUF2QnFLLEdBQVFyOEMsRUFBSzFYLE1BQzdDMHBELEVBQUkxa0UsS0FBSzRtRSxHQUNUbEMsR0E1Q01zSyxDQUFvQnBJLEVBQUlsMEMsRUFBTTFxQixHQUd0QyxJQUFJaW5FLEVBQW9CdEUsR0FDeEJDLElBQWdCLEdBQ2hCM3BDLEdBQVE3K0IsR0FDUndvRSxHQUFnQnFFLEdBS2xCLE9BdUNGLFNBQ0V2OEMsRUFDQWtpQixFQUNBeHlDLEVBQ0F3a0UsRUFDQThILEdBRUEsR0FBSWg4QyxFQUFLNFUsVUFBWW9uQyxFQUNuQnQyQixHQUNFLDJCQUE2QnhELEVBQU8sSUFDcENneUIsUUFJSixHQUFhLE1BQVR4a0UsR0FBa0Jzd0IsRUFBSzRVLFNBQTNCLENBR0EsSUFBSXRzQixFQUFPMFgsRUFBSzFYLEtBQ1pxcUIsR0FBU3JxQixJQUFpQixJQUFUQSxFQUNqQmswRCxFQUFnQixHQUNwQixHQUFJbDBELEVBQU0sQ0FDSGtPLE1BQU00cUIsUUFBUTk0QixLQUNqQkEsRUFBTyxDQUFDQSxJQUVWLElBQUssSUFBSXFMLEVBQUksRUFBR0EsRUFBSXJMLEVBQUtyZixTQUFXMHBDLEVBQU9oZixJQUFLLENBQzlDLElBQUk4b0QsRUFBZUMsR0FBV2h0RSxFQUFPNFksRUFBS3FMLEdBQUl1Z0QsR0FDOUNzSSxFQUFjcm1FLEtBQUtzbUUsRUFBYUUsY0FBZ0IsSUFDaERocUMsRUFBUThwQyxFQUFhOXBDLE9BSXpCLElBQUlpcUMsRUFBb0JKLEVBQWNwekQsTUFBSyxTQUFVb3NDLEdBQUssT0FBT0EsS0FDakUsR0FBSzdpQixJQUFTaXFDLEVBQWQsQ0FPQSxJQUFJQyxFQUFZNzhDLEVBQUs2OEMsVUFDakJBLElBQ0dBLEVBQVVudEUsSUFDYmcyQyxHQUNFLHlEQUEyRHhELEVBQU8sS0FDbEVneUIsU0FYSnh1QixHQTJFSixTQUFnQ3hELEVBQU14eUMsRUFBTzhzRSxHQUMzQyxJQUFJdjJCLEVBQVUsNkNBQWdEL0QsRUFBaEQsZUFDSXM2QixFQUFjcHZDLElBQUk4aEMsR0FBWW4zRCxLQUFLLE1BQ2pENGtFLEVBQWVILEVBQWMsR0FDN0JNLEVBQWU1TyxFQUFVeCtELEdBZTdCLE9BWjJCLElBQXpCOHNFLEVBQWN2ekUsUUFDZDh6RSxHQUFhSixJQUNiSSxVQUFvQnJ0RSxLQTRCeEIsV0FFRSxJQURBLElBQUk1RyxFQUFPLEdBQUk2MEMsRUFBTTMwQyxVQUFVQyxPQUN2QjAwQyxLQUFRNzBDLEVBQU02MEMsR0FBUTMwQyxVQUFXMjBDLEdBRXpDLE9BQU83MEMsRUFBS3NnQixNQUFLLFNBQVU0ekQsR0FBUSxNQUE4QixZQUF2QkEsRUFBS3B1RCxpQkEvQjVDcXVELENBQVVOLEVBQWNHLEtBRXpCNzJCLEdBQVcsZUFBa0JpM0IsR0FBV3h0RSxFQUFPaXRFLElBRWpEMTJCLEdBQVcsU0FBVzYyQixFQUFlLElBRWpDQyxHQUFhRCxLQUNmNzJCLEdBQVcsY0FBaUJpM0IsR0FBV3h0RSxFQUFPb3RFLEdBQWlCLEtBRTFENzJCLEVBN0ZIazNCLENBQXNCajdCLEVBQU14eUMsRUFBTzhzRSxHQUNuQ3RJLElBNUVGa0osQ0FBV3A5QyxFQUFNMXFCLEVBQUs1RixFQUFPd2tFLEVBQUk4SCxHQUU1QnRzRSxFQXlGVCxJQUFJMnRFLEdBQWdCLG1EQUVwQixTQUFTWCxHQUFZaHRFLEVBQU80WSxFQUFNNHJELEdBQ2hDLElBQUl2aEMsRUFDQWdxQyxFQUFlTixHQUFRL3pELEdBQzNCLEdBQUkrMEQsR0FBY2w3QixLQUFLdzZCLEdBQWUsQ0FDcEMsSUFBSW5uQixTQUFXOWxELEdBQ2ZpakMsRUFBUTZpQixJQUFNbW5CLEVBQWEvdEQsZ0JBRVAsV0FBTjRtQyxJQUNaN2lCLEVBQVFqakMsYUFBaUI0WSxRQUV0QixHQUFxQixXQUFqQnEwRCxFQUNUaHFDLEVBQVF3N0IsRUFBY3orRCxRQUNqQixHQUFxQixVQUFqQml0RSxFQUNUaHFDLEVBQVFuYyxNQUFNNHFCLFFBQVExeEMsUUFFdEIsSUFDRWlqQyxFQUFRampDLGFBQWlCNFksRUFDekIsTUFBTzdCLEdBQ1BpL0IsR0FBSyx1QkFBeUJ2VyxPQUFPN21CLEdBQVEseUJBQTBCNHJELEdBQ3ZFdmhDLEdBQVEsRUFHWixNQUFPLENBQ0xBLE1BQU9BLEVBQ1BncUMsYUFBY0EsR0FJbEIsSUFBSVcsR0FBc0IscUJBTzFCLFNBQVNqQixHQUFTNTlCLEdBQ2hCLElBQUl1RixFQUFRdkYsR0FBTUEsRUFBRzVXLFdBQVdtYyxNQUFNczVCLElBQ3RDLE9BQU90NUIsRUFBUUEsRUFBTSxHQUFLLEdBRzVCLFNBQVN1NUIsR0FBWWhPLEVBQUd2TixHQUN0QixPQUFPcWEsR0FBUTlNLEtBQU84TSxHQUFRcmEsR0FHaEMsU0FBU2thLEdBQWM1ekQsRUFBTWswRCxHQUMzQixJQUFLaG1ELE1BQU00cUIsUUFBUW83QixHQUNqQixPQUFPZSxHQUFXZixFQUFlbDBELEdBQVEsR0FBSyxFQUVoRCxJQUFLLElBQUlxTCxFQUFJLEVBQUdncUIsRUFBTTYrQixFQUFjdnpFLE9BQVEwcUIsRUFBSWdxQixFQUFLaHFCLElBQ25ELEdBQUk0cEQsR0FBV2YsRUFBYzdvRCxHQUFJckwsR0FDL0IsT0FBT3FMLEVBR1gsT0FBUSxFQXlCVixTQUFTdXBELEdBQVl4dEUsRUFBTzRZLEdBQzFCLE1BQWEsV0FBVEEsRUFDTSxJQUFPNVksRUFBUSxJQUNMLFdBQVQ0WSxFQUNELEdBQU1tK0IsT0FBTy8yQyxHQUViLEdBQUtBLEVBSWpCLElBQUk4dEUsR0FBbUIsQ0FBQyxTQUFVLFNBQVUsV0FDNUMsU0FBU1QsR0FBY3J0RSxHQUNyQixPQUFPOHRFLEdBQWlCcDBELE1BQUssU0FBVTR6RCxHQUFRLE9BQU90dEUsRUFBTWtmLGdCQUFrQm91RCxLQVloRixTQUFTUyxHQUFhNStELEVBQUtxMUQsRUFBSXdKLEdBRzdCaEksS0FDQSxJQUNFLEdBQUl4QixFQUVGLElBREEsSUFBSXlKLEVBQU16SixFQUNGeUosRUFBTUEsRUFBSS9JLFNBQVUsQ0FDMUIsSUFBSWlGLEVBQVE4RCxFQUFJbkosU0FBU29KLGNBQ3pCLEdBQUkvRCxFQUNGLElBQUssSUFBSWxtRCxFQUFJLEVBQUdBLEVBQUlrbUQsRUFBTTV3RSxPQUFRMHFCLElBQ2hDLElBRUUsSUFEb0QsSUFBdENrbUQsRUFBTWxtRCxHQUFHcm1CLEtBQUtxd0UsRUFBSzkrRCxFQUFLcTFELEVBQUl3SixHQUMzQixPQUNmLE1BQU9qM0QsR0FDUG8zRCxHQUFrQnAzRCxFQUFHazNELEVBQUssdUJBTXBDRSxHQUFrQmgvRCxFQUFLcTFELEVBQUl3SixHQUMzQixRQUNBL0gsTUFJSixTQUFTbUksR0FDUDl6RSxFQUNBK3JFLEVBQ0FqdEUsRUFDQW9yRSxFQUNBd0osR0FFQSxJQUFJOU4sRUFDSixLQUNFQSxFQUFNOW1FLEVBQU9rQixFQUFRWixNQUFNMnNFLEVBQVNqdEUsR0FBUWtCLEVBQVFzRCxLQUFLeW9FLE1BQzdDbkcsRUFBSTJFLFFBQVVqRyxFQUFVc0IsS0FBU0EsRUFBSW1PLFdBQy9Dbk8sRUFBSXJCLE9BQU0sU0FBVTluRCxHQUFLLE9BQU9nM0QsR0FBWWgzRCxFQUFHeXRELEVBQUl3SixFQUFPLHVCQUcxRDlOLEVBQUltTyxVQUFXLEdBRWpCLE1BQU90M0QsR0FDUGczRCxHQUFZaDNELEVBQUd5dEQsRUFBSXdKLEdBRXJCLE9BQU85TixFQUdULFNBQVNpTyxHQUFtQmgvRCxFQUFLcTFELEVBQUl3SixHQUNuQyxHQUFJN00sRUFBT00sYUFDVCxJQUNFLE9BQU9OLEVBQU9NLGFBQWE3akUsS0FBSyxLQUFNdVIsRUFBS3ExRCxFQUFJd0osR0FDL0MsTUFBT2ozRCxHQUdIQSxJQUFNNUgsR0FDUm0vRCxHQUFTdjNELEVBQUcsS0FBTSx1QkFJeEJ1M0QsR0FBU24vRCxFQUFLcTFELEVBQUl3SixHQUdwQixTQUFTTSxHQUFVbi9ELEVBQUtxMUQsRUFBSXdKLEdBSzFCLEdBSEVoNEIsR0FBTSxZQUFjZzRCLEVBQU8sTUFBVTcrRCxFQUFJZ3BCLFdBQWMsSUFBT3FzQyxJQUczRDlCLElBQWFDLEdBQThCLG9CQUFacnRCLFFBR2xDLE1BQU1ubUMsRUFGTm1tQyxRQUFRbHpDLE1BQU0rTSxHQVFsQixJQXlCSW8vRCxHQWlGQUMsR0FDQUMsR0EzR0FDLElBQW1CLEVBRW5CcC9CLEdBQVksR0FDWnEvQixJQUFVLEVBRWQsU0FBU0MsS0FDUEQsSUFBVSxFQUNWLElBQUlFLEVBQVN2L0IsR0FBVTVyQyxNQUFNLEdBQzdCNHJDLEdBQVUvMUMsT0FBUyxFQUNuQixJQUFLLElBQUkwcUIsRUFBSSxFQUFHQSxFQUFJNHFELEVBQU90MUUsT0FBUTBxQixJQUNqQzRxRCxFQUFPNXFELEtBd0JYLEdBQXVCLG9CQUFadStCLFNBQTJCb2hCLEdBQVNwaEIsU0FBVSxDQUN2RCxJQUFJOVQsR0FBSThULFFBQVFDLFVBQ2hCOHJCLEdBQVksV0FDVjcvQixHQUFFZ1UsS0FBS2tzQixJQU1IekwsSUFBU2prRSxXQUFXeXJELElBRTFCK2pCLElBQW1CLE9BQ2QsR0FBSzFMLEdBQW9DLG9CQUFyQnArQixtQkFDekJnL0IsR0FBU2gvQixtQkFFdUIseUNBQWhDQSxpQkFBaUJ6TSxXQW9CakJvMkMsR0FKaUMsb0JBQWpCTyxjQUFnQ2xMLEdBQVNrTCxjQUk3QyxXQUNWQSxhQUFhRixLQUlILFdBQ1YxdkUsV0FBVzB2RSxHQUFnQixRQXpCNUIsQ0FJRCxJQUFJRyxHQUFVLEVBQ1Y3dUMsR0FBVyxJQUFJMEUsaUJBQWlCZ3FDLElBQ2hDSSxHQUFXdjJFLFNBQVM4a0UsZUFBZTk5QixPQUFPc3ZDLEtBQzlDN3VDLEdBQVNyQixRQUFRbXdDLEdBQVUsQ0FDekJDLGVBQWUsSUFFakJWLEdBQVksV0FDVlEsSUFBV0EsR0FBVSxHQUFLLEVBQzFCQyxHQUFTNzdCLEtBQU8xVCxPQUFPc3ZDLEtBRXpCTCxJQUFtQixFQWVyQixTQUFTbnNCLEdBQVVsVCxFQUFJc3dCLEdBQ3JCLElBQUl1UCxFQWlCSixHQWhCQTUvQixHQUFVN29DLE1BQUssV0FDYixHQUFJNG9DLEVBQ0YsSUFDRUEsRUFBR3p4QyxLQUFLK2hFLEdBQ1IsTUFBTzVvRCxHQUNQZzNELEdBQVloM0QsRUFBRzRvRCxFQUFLLGlCQUVidVAsR0FDVEEsRUFBU3ZQLE1BR1JnUCxLQUNIQSxJQUFVLEVBQ1ZKLE9BR0dsL0IsR0FBeUIsb0JBQVptVCxRQUNoQixPQUFPLElBQUlBLFNBQVEsU0FBVUMsR0FDM0J5c0IsRUFBV3pzQixLQVdmLElBcUJFMHNCLEdBckJFQyxHQUFPMU0sR0FBYXZpRSxPQUFPcWhFLFlBRzdCNE4sSUFDQUEsR0FBS1osTUFDTFksR0FBS1gsU0FDTFcsR0FBS0MsWUFDTEQsR0FBS0UsZ0JBRUxkLEdBQU8sU0FBVXJJLEdBQU8sT0FBT2lKLEdBQUtaLEtBQUtySSxJQUN6Q3NJLEdBQVUsU0FBVWo4QixFQUFNKzhCLEVBQVVDLEdBQ2xDSixHQUFLWCxRQUFRajhCLEVBQU0rOEIsRUFBVUMsR0FDN0JKLEdBQUtDLFdBQVdFLEdBQ2hCSCxHQUFLQyxXQUFXRyxLQVdwQixJQUFJQyxHQUFpQnpRLEVBQ25CLDRNQU1FMFEsR0FBaUIsU0FBVXRqRSxFQUFReEcsR0FDckNvd0MsR0FDRSx1QkFBMEJwd0MsRUFBMUIsa1JBS0F3RyxJQUlBdWpFLEdBQXFCLFNBQVV2akUsRUFBUXhHLEdBQ3pDb3dDLEdBQ0UsYUFBZ0Jwd0MsRUFBTSxrQ0FBc0NBLEVBQTVELGlLQUlBd0csSUFJQXdqRSxHQUNlLG9CQUFWQyxPQUF5QmpNLEdBQVNpTSxPQUUzQyxHQUFJRCxHQUFVLENBQ1osSUFBSUUsR0FBb0I5USxFQUFRLCtDQUNoQ21DLEVBQU9TLFNBQVcsSUFBSWlPLE1BQU0xTyxFQUFPUyxTQUFVLENBQzNDOWhFLElBQUssU0FBY3NNLEVBQVF4RyxFQUFLNUYsR0FDOUIsT0FBSTh2RSxHQUFrQmxxRSxJQUNwQm93QyxHQUFNLDREQUE4RHB3QyxJQUM3RCxJQUVQd0csRUFBT3hHLEdBQU81RixHQUNQLE1BTWYsSUFBSSt2RSxHQUFhLENBQ2ZqeEQsSUFBSyxTQUFjMVMsRUFBUXhHLEdBQ3pCLElBQUlrWixFQUFNbFosS0FBT3dHLEVBQ2I0akUsRUFBWVAsR0FBZTdwRSxJQUNiLGlCQUFSQSxHQUFzQyxNQUFsQkEsRUFBSSsrQyxPQUFPLE1BQWdCLytDLEtBQU93RyxFQUFPNmpFLE9BS3ZFLE9BSktueEQsR0FBUWt4RCxJQUNQcHFFLEtBQU93RyxFQUFPNmpFLE1BQVNOLEdBQW1CdmpFLEVBQVF4RyxHQUMvQzhwRSxHQUFldGpFLEVBQVF4RyxJQUV6QmtaLElBQVFreEQsSUFJZkUsR0FBYSxDQUNmejBFLElBQUssU0FBYzJRLEVBQVF4RyxHQUt6QixNQUptQixpQkFBUkEsR0FBc0JBLEtBQU93RyxJQUNsQ3hHLEtBQU93RyxFQUFPNmpFLE1BQVNOLEdBQW1CdmpFLEVBQVF4RyxHQUMvQzhwRSxHQUFldGpFLEVBQVF4RyxJQUV6QndHLEVBQU94RyxLQUlsQnVwRSxHQUFZLFNBQW9CM0ssR0FDOUIsR0FBSW9MLEdBQVUsQ0FFWixJQUFJcjFFLEVBQVVpcUUsRUFBR00sU0FDYnFMLEVBQVc1MUUsRUFBUTYxRSxRQUFVNzFFLEVBQVE2MUUsT0FBT0MsY0FDNUNILEdBQ0FILEdBQ0p2TCxFQUFHOEwsYUFBZSxJQUFJVCxNQUFNckwsRUFBSTJMLFFBRWhDM0wsRUFBRzhMLGFBQWU5TCxHQU94QixJQUFJK0wsR0FBYyxJQUFJek0sR0FPdEIsU0FBUzBNLEdBQVVsNUIsR0FDakJtNUIsR0FBVW41QixFQUFLaTVCLElBQ2ZBLEdBQVlyTSxRQUdkLFNBQVN1TSxHQUFXbjVCLEVBQUtvNUIsR0FDdkIsSUFBSXpzRCxFQUFHekssRUFDSG0zRCxFQUFNN3BELE1BQU00cUIsUUFBUTRGLEdBQ3hCLE1BQU1xNUIsSUFBUXJTLEVBQVNobkIsSUFBUy83QyxPQUFPcTFFLFNBQVN0NUIsSUFBUUEsYUFBZTR1QixJQUF2RSxDQUdBLEdBQUk1dUIsRUFBSTR3QixPQUFRLENBQ2QsSUFBSTJJLEVBQVF2NUIsRUFBSTR3QixPQUFPRSxJQUFJcjNCLEdBQzNCLEdBQUkyL0IsRUFBSzV4RCxJQUFJK3hELEdBQ1gsT0FFRkgsRUFBS2x3RSxJQUFJcXdFLEdBRVgsR0FBSUYsRUFFRixJQURBMXNELEVBQUlxekIsRUFBSS85QyxPQUNEMHFCLEtBQU93c0QsR0FBVW41QixFQUFJcnpCLEdBQUl5c0QsUUFJaEMsSUFEQXpzRCxHQURBekssRUFBT2plLE9BQU9pZSxLQUFLODlCLElBQ1YvOUMsT0FDRjBxQixLQUFPd3NELEdBQVVuNUIsRUFBSTk5QixFQUFLeUssSUFBS3lzRCxJQU0xQyxJQUFJSSxHQUFpQnpSLEdBQU8sU0FBVTdzQixHQUNwQyxJQUFJbmpDLEVBQTZCLE1BQW5CbWpDLEVBQUttUyxPQUFPLEdBRXRCb3NCLEVBQTZCLE9BRGpDditCLEVBQU9uakMsRUFBVW1qQyxFQUFLOXVDLE1BQU0sR0FBSzh1QyxHQUNkbVMsT0FBTyxHQUV0Qjd6QixFQUE2QixPQURqQzBoQixFQUFPdStCLEVBQVV2K0IsRUFBSzl1QyxNQUFNLEdBQUs4dUMsR0FDZG1TLE9BQU8sR0FFMUIsTUFBTyxDQUNMblMsS0FGRkEsRUFBTzFoQixFQUFVMGhCLEVBQUs5dUMsTUFBTSxHQUFLOHVDLEVBRy9CdkQsS0FBTThoQyxFQUNOamdELFFBQVNBLEVBQ1R6aEIsUUFBU0EsTUFJYixTQUFTMmhFLEdBQWlCQyxFQUFLek0sR0FDN0IsU0FBUzBNLElBQ1AsSUFBSUMsRUFBYzczRSxVQUVkMjNFLEVBQU1DLEVBQVFELElBQ2xCLElBQUlucUQsTUFBTTRxQixRQUFRdS9CLEdBT2hCLE9BQU83QyxHQUF3QjZDLEVBQUssS0FBTTMzRSxVQUFXa3JFLEVBQUksZ0JBTHpELElBREEsSUFBSW9ELEVBQVNxSixFQUFJdnRFLFFBQ1J1Z0IsRUFBSSxFQUFHQSxFQUFJMmpELEVBQU9ydUUsT0FBUTBxQixJQUNqQ21xRCxHQUF3QnhHLEVBQU8zakQsR0FBSSxLQUFNa3RELEVBQWEzTSxFQUFJLGdCQVFoRSxPQURBME0sRUFBUUQsSUFBTUEsRUFDUEMsRUFHVCxTQUFTRSxHQUNQdGlDLEVBQ0F1aUMsRUFDQTd3RSxFQUNBOHdFLEVBQ0FDLEVBQ0EvTSxHQUVBLElBQUloeUIsRUFBY3k3QixFQUFLdUQsRUFBS3p3RCxFQUM1QixJQUFLeXhCLEtBQVExRCxFQUNGbS9CLEVBQU1uL0IsRUFBRzBELEdBQ2xCZy9CLEVBQU1ILEVBQU03K0IsR0FDWnp4QixFQUFRK3ZELEdBQWV0K0IsR0FDbkIwckIsRUFBUStQLEdBQ1ZqNEIsR0FDRSw4QkFBa0NqMUIsRUFBVSxLQUFJLFVBQWEwZSxPQUFPd3VDLEdBQ3BFekosR0FFT3RHLEVBQVFzVCxJQUNidFQsRUFBUStQLEVBQUlnRCxPQUNkaEQsRUFBTW4vQixFQUFHMEQsR0FBUXcrQixHQUFnQi9DLEVBQUt6SixJQUVwQ3BHLEVBQU9yOUMsRUFBTWt1QixRQUNmZy9CLEVBQU1uL0IsRUFBRzBELEdBQVErK0IsRUFBa0J4d0QsRUFBTXl4QixLQUFNeTdCLEVBQUtsdEQsRUFBTStQLFVBRTVEdHdCLEVBQUl1Z0IsRUFBTXl4QixLQUFNeTdCLEVBQUtsdEQsRUFBTStQLFFBQVMvUCxFQUFNMVIsUUFBUzBSLEVBQU0wd0QsU0FDaER4RCxJQUFRdUQsSUFDakJBLEVBQUlQLElBQU1oRCxFQUNWbi9CLEVBQUcwRCxHQUFRZy9CLEdBR2YsSUFBS2gvQixLQUFRNitCLEVBQ1BuVCxFQUFRcHZCLEVBQUcwRCxLQUViOCtCLEdBREF2d0QsRUFBUSt2RCxHQUFldCtCLElBQ1BBLEtBQU02K0IsRUFBTTcrQixHQUFPenhCLEVBQU0rUCxTQU8vQyxTQUFTNGdELEdBQWdCcFAsRUFBS3FQLEVBQVNsSCxHQUlyQyxJQUFJeUcsRUFIQTVPLGFBQWU0RCxLQUNqQjVELEVBQU1BLEVBQUludkIsS0FBS3MzQixPQUFTbkksRUFBSW52QixLQUFLczNCLEtBQU8sS0FHMUMsSUFBSW1ILEVBQVV0UCxFQUFJcVAsR0FFbEIsU0FBU0UsSUFDUHBILEVBQUsvd0UsTUFBTUYsS0FBTUYsV0FHakJxSCxFQUFPdXdFLEVBQVFELElBQUtZLEdBR2xCM1QsRUFBUTBULEdBRVZWLEVBQVVGLEdBQWdCLENBQUNhLElBR3ZCMVQsRUFBTXlULEVBQVFYLE1BQVE3UyxFQUFPd1QsRUFBUUUsU0FFdkNaLEVBQVVVLEdBQ0ZYLElBQUl4cUUsS0FBS29yRSxHQUdqQlgsRUFBVUYsR0FBZ0IsQ0FBQ1ksRUFBU0MsSUFJeENYLEVBQVFZLFFBQVMsRUFDakJ4UCxFQUFJcVAsR0FBV1QsRUE4Q2pCLFNBQVNhLEdBQ1A3UixFQUNBdHNCLEVBQ0FodUMsRUFDQW9zRSxFQUNBQyxHQUVBLEdBQUk5VCxFQUFNdnFCLEdBQU8sQ0FDZixHQUFJd3JCLEVBQU94ckIsRUFBTWh1QyxHQUtmLE9BSkFzNkQsRUFBSXQ2RCxHQUFPZ3VDLEVBQUtodUMsR0FDWHFzRSxVQUNJcitCLEVBQUtodUMsSUFFUCxFQUNGLEdBQUl3NUQsRUFBT3hyQixFQUFNbytCLEdBS3RCLE9BSkE5UixFQUFJdDZELEdBQU9ndUMsRUFBS28rQixHQUNYQyxVQUNJcitCLEVBQUtvK0IsSUFFUCxFQUdYLE9BQU8sRUE4QlQsU0FBU0UsR0FBbUI1dEUsR0FDMUIsT0FBTys1RCxFQUFZLzVELEdBQ2YsQ0FBQ21qRSxHQUFnQm5qRSxJQUNqQndpQixNQUFNNHFCLFFBQVFwdEMsR0FDWjZ0RSxHQUF1Qjd0RSxRQUN2QjNLLEVBR1IsU0FBU3k0RSxHQUFZNUssR0FDbkIsT0FBT3JKLEVBQU1xSixJQUFTckosRUFBTXFKLEVBQUtobkQsUUEveUVwQixJQSt5RXFDZ25ELEVBQUtSLFVBR3pELFNBQVNtTCxHQUF3Qjd0RSxFQUFVK3RFLEdBQ3pDLElBQ0lwdUQsRUFBR2t3QixFQUFHbHVCLEVBQVdvL0MsRUFEakJuRixFQUFNLEdBRVYsSUFBS2o4QyxFQUFJLEVBQUdBLEVBQUkzZixFQUFTL0ssT0FBUTBxQixJQUUzQmk2QyxFQURKL3BCLEVBQUk3dkMsRUFBUzJmLEtBQ2tCLGtCQUFOa3dCLElBRXpCa3hCLEVBQU9uRixFQURQajZDLEVBQVlpNkMsRUFBSTNtRSxPQUFTLEdBR3JCdXRCLE1BQU00cUIsUUFBUXlDLEdBQ1pBLEVBQUU1NkMsT0FBUyxJQUdUNjRFLElBRkpqK0IsRUFBSWcrQixHQUF1QmgrQixHQUFLaytCLEdBQWUsSUFBTSxJQUFNcHVELElBRTFDLEtBQU9tdUQsR0FBVy9NLEtBQ2pDbkYsRUFBSWo2QyxHQUFhd2hELEdBQWdCcEMsRUFBSzdrRCxLQUFRMnpCLEVBQUUsR0FBSTN6QixNQUNwRDJ6QixFQUFFK0csU0FFSmdsQixFQUFJejVELEtBQUsvTSxNQUFNd21FLEVBQUsvckIsSUFFYmtxQixFQUFZbHFCLEdBQ2pCaStCLEdBQVcvTSxHQUlibkYsRUFBSWo2QyxHQUFhd2hELEdBQWdCcEMsRUFBSzdrRCxLQUFPMnpCLEdBQzlCLEtBQU5BLEdBRVQrckIsRUFBSXo1RCxLQUFLZ2hFLEdBQWdCdHpCLElBR3ZCaStCLEdBQVdqK0IsSUFBTWkrQixHQUFXL00sR0FFOUJuRixFQUFJajZDLEdBQWF3aEQsR0FBZ0JwQyxFQUFLN2tELEtBQU8yekIsRUFBRTN6QixPQUczQzQ5QyxFQUFPOTVELEVBQVNndUUsV0FDbEJuVSxFQUFNaHFCLEVBQUVneUIsTUFDUmpJLEVBQVEvcEIsRUFBRXZ1QyxNQUNWdTRELEVBQU1rVSxLQUNObCtCLEVBQUV2dUMsSUFBTSxVQUFZeXNFLEVBQWMsSUFBTXB1RCxFQUFJLE1BRTlDaThDLEVBQUl6NUQsS0FBSzB0QyxLQUlmLE9BQU8rckIsRUFtQ1QsU0FBU3FTLEdBQWUzSCxFQUFRcEcsR0FDOUIsR0FBSW9HLEVBQVEsQ0FPVixJQUxBLElBQUkzbEIsRUFBUzFwRCxPQUFPaWxELE9BQU8sTUFDdkJobkMsRUFBT3VxRCxHQUNQQyxRQUFRQyxRQUFRMkcsR0FDaEJydkUsT0FBT2llLEtBQUtveEQsR0FFUDNtRCxFQUFJLEVBQUdBLEVBQUl6SyxFQUFLamdCLE9BQVEwcUIsSUFBSyxDQUNwQyxJQUFJcmUsRUFBTTRULEVBQUt5SyxHQUVmLEdBQVksV0FBUnJlLEVBQUosQ0FHQSxJQUZBLElBQUk0c0UsRUFBYTVILEVBQU9obEUsR0FBSzBpQixLQUN6QmlyQixFQUFTaXhCLEVBQ05qeEIsR0FBUSxDQUNiLEdBQUlBLEVBQU9rL0IsV0FBYXJULEVBQU83ckIsRUFBT2svQixVQUFXRCxHQUFhLENBQzVEdnRCLEVBQU9yL0MsR0FBTzJ0QyxFQUFPay9CLFVBQVVELEdBQy9CLE1BRUZqL0IsRUFBU0EsRUFBTzJ4QixRQUVsQixJQUFLM3hCLEVBQ0gsR0FBSSxZQUFhcTNCLEVBQU9obEUsR0FBTSxDQUM1QixJQUFJOHNFLEVBQWlCOUgsRUFBT2hsRSxHQUFLK3RDLFFBQ2pDc1IsRUFBT3IvQyxHQUFpQyxtQkFBbkI4c0UsRUFDakJBLEVBQWU5MEUsS0FBSzRtRSxHQUNwQmtPLE9BRUoxOEIsR0FBTSxjQUFpQnB3QyxFQUFNLGNBQWlCNCtELElBSXBELE9BQU92ZixHQVdYLFNBQVMwdEIsR0FDUHJ1RSxFQUNBK2hFLEdBRUEsSUFBSy9oRSxJQUFhQSxFQUFTL0ssT0FDekIsTUFBTyxHQUdULElBREEsSUFBSXE1RSxFQUFRLEdBQ0gzdUQsRUFBSSxFQUFHcTRCLEVBQUloNEMsRUFBUy9LLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQUssQ0FDL0MsSUFBSW1vQyxFQUFROW5ELEVBQVMyZixHQUNqQmt2QixFQUFPaVosRUFBTWpaLEtBT2pCLEdBTElBLEdBQVFBLEVBQUswL0IsT0FBUzEvQixFQUFLMC9CLE1BQU1DLGFBQzVCMy9CLEVBQUswL0IsTUFBTUMsS0FJZjFtQixFQUFNaWEsVUFBWUEsR0FBV2phLEVBQU1xYSxZQUFjSixJQUNwRGx6QixHQUFxQixNQUFiQSxFQUFLMi9CLE1BVVpGLEVBQU1qL0IsVUFBWWkvQixFQUFNai9CLFFBQVUsS0FBS2x0QyxLQUFLMmxELE9BVDdDLENBQ0EsSUFBSTVaLEVBQU9XLEVBQUsyL0IsS0FDWkEsRUFBUUYsRUFBTXBnQyxLQUFVb2dDLEVBQU1wZ0MsR0FBUSxJQUN4QixhQUFkNFosRUFBTStaLElBQ1IyTSxFQUFLcnNFLEtBQUsvTSxNQUFNbzVFLEVBQU0xbUIsRUFBTTluRCxVQUFZLElBRXhDd3VFLEVBQUtyc0UsS0FBSzJsRCxJQU9oQixJQUFLLElBQUkybUIsS0FBVUgsRUFDYkEsRUFBTUcsR0FBUXJTLE1BQU1zUyxZQUNmSixFQUFNRyxHQUdqQixPQUFPSCxFQUdULFNBQVNJLEdBQWN4TCxHQUNyQixPQUFRQSxFQUFLUixZQUFjUSxFQUFLakIsY0FBK0IsTUFBZGlCLEVBQUtobkQsS0FLeEQsU0FBUzRtRCxHQUFvQkksR0FDM0IsT0FBT0EsRUFBS1IsV0FBYVEsRUFBS2pCLGFBS2hDLFNBQVMwTSxHQUNQTCxFQUNBTSxFQUNBQyxHQUVBLElBQUlqVCxFQUNBa1QsRUFBaUI3M0UsT0FBT2llLEtBQUswNUQsR0FBYTM1RSxPQUFTLEVBQ25EODVFLEVBQVdULElBQVVBLEVBQU1VLFNBQVdGLEVBQ3RDeHRFLEVBQU1ndEUsR0FBU0EsRUFBTVcsS0FDekIsR0FBS1gsRUFFRSxJQUFJQSxFQUFNWSxZQUVmLE9BQU9aLEVBQU1ZLFlBQ1IsR0FDTEgsR0FDQUYsR0FDQUEsSUFBY2xWLEdBQ2RyNEQsSUFBUXV0RSxFQUFVSSxPQUNqQkgsSUFDQUQsRUFBVU0sV0FJWCxPQUFPTixFQUdQLElBQUssSUFBSXpJLEtBRFR4SyxFQUFNLEdBQ1kwUyxFQUNaQSxFQUFNbEksSUFBdUIsTUFBYkEsRUFBTSxLQUN4QnhLLEVBQUl3SyxHQUFTZ0osR0FBb0JSLEVBQWF4SSxFQUFPa0ksRUFBTWxJLFVBbkIvRHhLLEVBQU0sR0F3QlIsSUFBSyxJQUFJeVQsS0FBU1QsRUFDVlMsS0FBU3pULElBQ2JBLEVBQUl5VCxHQUFTQyxHQUFnQlYsRUFBYVMsSUFXOUMsT0FOSWYsR0FBU3IzRSxPQUFPd3RFLGFBQWE2SixLQUMvQixFQUFRWSxZQUFjdFQsR0FFeEJvQyxFQUFJcEMsRUFBSyxVQUFXbVQsR0FDcEIvUSxFQUFJcEMsRUFBSyxPQUFRdDZELEdBQ2pCMDhELEVBQUlwQyxFQUFLLGFBQWNrVCxHQUNoQmxULEVBR1QsU0FBU3dULEdBQW9CUixFQUFhdHRFLEVBQUttcEMsR0FDN0MsSUFBSXE4QixFQUFhLFdBQ2YsSUFBSWxMLEVBQU01bUUsVUFBVUMsT0FBU3cxQyxFQUFHcjFDLE1BQU0sS0FBTUosV0FBYXkxQyxFQUFHLElBSXhENDRCLEdBSEp6SCxFQUFNQSxHQUFzQixpQkFBUkEsSUFBcUJwNUMsTUFBTTRxQixRQUFRd3VCLEdBQ25ELENBQUNBLEdBQ0RnUyxHQUFrQmhTLEtBQ0hBLEVBQUksR0FDdkIsT0FBT0EsS0FDSnlILEdBQ2UsSUFBZnpILEVBQUkzbUUsUUFBZ0JvdUUsRUFBTVgsWUFBY0ksR0FBbUJPLFNBQzFEaHVFLEVBQ0F1bUUsR0FZTixPQVBJbnhCLEVBQUc4a0MsT0FDTHQ0RSxPQUFPQyxlQUFlMDNFLEVBQWF0dEUsRUFBSyxDQUN0Q25LLElBQUsydkUsRUFDTDF2RSxZQUFZLEVBQ1pDLGNBQWMsSUFHWHl2RSxFQUdULFNBQVN3SSxHQUFnQmhCLEVBQU9odEUsR0FDOUIsT0FBTyxXQUFjLE9BQU9ndEUsRUFBTWh0RSxJQVFwQyxTQUFTa3VFLEdBQ1B4OEIsRUFDQTg0QixHQUVBLElBQUlwUSxFQUFLLzdDLEVBQUdxNEIsRUFBRzlpQyxFQUFNNVQsRUFDckIsR0FBSWtoQixNQUFNNHFCLFFBQVE0RixJQUF1QixpQkFBUkEsRUFFL0IsSUFEQTBvQixFQUFNLElBQUlsNUMsTUFBTXd3QixFQUFJLzlDLFFBQ2YwcUIsRUFBSSxFQUFHcTRCLEVBQUloRixFQUFJLzlDLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQ2pDKzdDLEVBQUkvN0MsR0FBS21zRCxFQUFPOTRCLEVBQUlyekIsR0FBSUEsUUFFckIsR0FBbUIsaUJBQVJxekIsRUFFaEIsSUFEQTBvQixFQUFNLElBQUlsNUMsTUFBTXd3QixHQUNYcnpCLEVBQUksRUFBR0EsRUFBSXF6QixFQUFLcnpCLElBQ25CKzdDLEVBQUkvN0MsR0FBS21zRCxFQUFPbnNELEVBQUksRUFBR0EsUUFFcEIsR0FBSXE2QyxFQUFTaG5CLEdBQ2xCLEdBQUl5c0IsSUFBYXpzQixFQUFJMUYsT0FBT0MsVUFBVyxDQUNyQ211QixFQUFNLEdBR04sSUFGQSxJQUFJbnVCLEVBQVd5RixFQUFJMUYsT0FBT0MsWUFDdEJvVCxFQUFTcFQsRUFBUzd2QyxRQUNkaWpELEVBQU9oakQsTUFDYis5RCxFQUFJdjVELEtBQUsycEUsRUFBT25yQixFQUFPamxELE1BQU9nZ0UsRUFBSXptRSxTQUNsQzByRCxFQUFTcFQsRUFBUzd2QyxZQUtwQixJQUZBd1gsRUFBT2plLE9BQU9pZSxLQUFLODlCLEdBQ25CMG9CLEVBQU0sSUFBSWw1QyxNQUFNdE4sRUFBS2pnQixRQUNoQjBxQixFQUFJLEVBQUdxNEIsRUFBSTlpQyxFQUFLamdCLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQ2xDcmUsRUFBTTRULEVBQUt5SyxHQUNYKzdDLEVBQUkvN0MsR0FBS21zRCxFQUFPOTRCLEVBQUkxeEMsR0FBTUEsRUFBS3FlLEdBUXJDLE9BSktrNkMsRUFBTTZCLEtBQ1RBLEVBQU0sSUFFUixFQUFNc1MsVUFBVyxFQUNWdFMsRUFRVCxTQUFTK1QsR0FDUHZoQyxFQUNBd2hDLEVBQ0E3akQsRUFDQThqRCxHQUVBLElBQ0lDLEVBREFDLEVBQWUzNkUsS0FBSzQ2RSxhQUFhNWhDLEdBRWpDMmhDLEdBRUZoa0QsRUFBUUEsR0FBUyxHQUNiOGpELElBQ0czVixFQUFTMlYsSUFDWmorQixHQUFLLGlEQUFrRHg4QyxNQUV6RDIyQixFQUFRcW5CLEVBQU9BLEVBQU8sR0FBSXk4QixHQUFhOWpELElBRXpDK2pELEVBQ0VDLEVBQWFoa0QsS0FDYyxtQkFBbkI2akQsRUFBZ0NBLElBQW1CQSxJQUU3REUsRUFDRTE2RSxLQUFLNjZFLE9BQU83aEMsS0FDZSxtQkFBbkJ3aEMsRUFBZ0NBLElBQW1CQSxHQUcvRCxJQUFJNW5FLEVBQVMrakIsR0FBU0EsRUFBTTJpRCxLQUM1QixPQUFJMW1FLEVBQ0s1UyxLQUFLODZFLGVBQWUsV0FBWSxDQUFFeEIsS0FBTTFtRSxHQUFVOG5FLEdBRWxEQSxFQVNYLFNBQVNLLEdBQWV4akMsR0FDdEIsT0FBT2c3QixHQUFhdnlFLEtBQUtzckUsU0FBVSxVQUFXL3pCLEdBQUksSUFBU3F2QixFQUs3RCxTQUFTb1UsR0FBZUMsRUFBUUMsR0FDOUIsT0FBSTV0RCxNQUFNNHFCLFFBQVEraUMsSUFDbUIsSUFBNUJBLEVBQU85dkUsUUFBUSt2RSxHQUVmRCxJQUFXQyxFQVN0QixTQUFTQyxHQUNQQyxFQUNBaHZFLEVBQ0FpdkUsRUFDQUMsRUFDQUMsR0FFQSxJQUFJQyxFQUFnQjdULEVBQU9TLFNBQVNoOEQsSUFBUWl2RSxFQUM1QyxPQUFJRSxHQUFrQkQsSUFBaUIzVCxFQUFPUyxTQUFTaDhELEdBQzlDNHVFLEdBQWNPLEVBQWdCRCxHQUM1QkUsRUFDRlIsR0FBY1EsRUFBZUosR0FDM0JFLEVBQ0ZwVixFQUFVb1YsS0FBa0JsdkUsT0FFYmpNLElBQWpCaTdFLEVBUVQsU0FBU0ssR0FDUDloQyxFQUNBZ3pCLEVBQ0FubUUsRUFDQWsxRSxFQUNBQyxHQUVBLEdBQUluMUUsRUFDRixHQUFLcytELEVBQVN0K0QsR0FLUCxDQUlMLElBQUk0ekMsRUFIQTlzQixNQUFNNHFCLFFBQVExeEMsS0FDaEJBLEVBQVEwc0QsRUFBUzFzRCxJQUduQixJQUFJbzFFLEVBQU8sU0FBV3h2RSxHQUNwQixHQUNVLFVBQVJBLEdBQ1EsVUFBUkEsR0FDQXU1RCxFQUFvQnY1RCxHQUVwQmd1QyxFQUFPVCxNQUNGLENBQ0wsSUFBSXY2QixFQUFPdTZCLEVBQUswL0IsT0FBUzEvQixFQUFLMC9CLE1BQU1qNkQsS0FDcENnN0IsRUFBT3NoQyxHQUFVL1QsRUFBT2UsWUFBWWlFLEVBQUt2dEQsRUFBTWhULEdBQzNDdXRDLEVBQUtraUMsV0FBYWxpQyxFQUFLa2lDLFNBQVcsSUFDbENsaUMsRUFBSzAvQixRQUFVMS9CLEVBQUswL0IsTUFBUSxJQUVsQyxJQUFJeUMsRUFBZS9WLEVBQVMzNUQsR0FDeEIydkUsRUFBZ0I3VixFQUFVOTVELEdBQ3hCMHZFLEtBQWdCMWhDLEdBQVcyaEMsS0FBaUIzaEMsSUFDaERBLEVBQUtodUMsR0FBTzVGLEVBQU00RixHQUVkdXZFLEtBQ09oaUMsRUFBS3JFLEtBQU9xRSxFQUFLckUsR0FBSyxLQUMzQixVQUFZbHBDLEdBQVEsU0FBVTR2RSxHQUNoQ3gxRSxFQUFNNEYsR0FBTzR2RSxNQU1yQixJQUFLLElBQUk1dkUsS0FBTzVGLEVBQU9vMUUsRUFBTXh2RSxRQXBDN0Jvd0MsR0FDRSwyREFDQXg4QyxNQXFDTixPQUFPMjVDLEVBUVQsU0FBU3NpQyxHQUNQcDJELEVBQ0FxMkQsR0FFQSxJQUFJclcsRUFBUzdsRSxLQUFLbThFLGVBQWlCbjhFLEtBQUttOEUsYUFBZSxJQUNuRHhRLEVBQU85RixFQUFPaGdELEdBR2xCLE9BQUk4bEQsSUFBU3VRLEdBU2JFLEdBTEF6USxFQUFPOUYsRUFBT2hnRCxHQUFTN2xCLEtBQUtzckUsU0FBUytRLGdCQUFnQngyRCxHQUFPemhCLEtBQzFEcEUsS0FBSzgyRSxhQUNMLEtBQ0E5MkUsTUFFZ0IsYUFBZTZsQixHQUFRLEdBUmhDOGxELEVBZ0JYLFNBQVMyUSxHQUNQM1EsRUFDQTlsRCxFQUNBelosR0FHQSxPQURBZ3dFLEdBQVd6USxFQUFPLFdBQWE5bEQsR0FBU3paLEVBQU8sSUFBTUEsRUFBTyxLQUFNLEdBQzNEdS9ELEVBR1QsU0FBU3lRLEdBQ1B6USxFQUNBdi9ELEVBQ0FzaEUsR0FFQSxHQUFJcGdELE1BQU00cUIsUUFBUXl6QixHQUNoQixJQUFLLElBQUlsaEQsRUFBSSxFQUFHQSxFQUFJa2hELEVBQUs1ckUsT0FBUTBxQixJQUMzQmtoRCxFQUFLbGhELElBQXlCLGlCQUFaa2hELEVBQUtsaEQsSUFDekI4eEQsR0FBZTVRLEVBQUtsaEQsR0FBS3JlLEVBQU0sSUFBTXFlLEVBQUlpakQsUUFJN0M2TyxHQUFlNVEsRUFBTXYvRCxFQUFLc2hFLEdBSTlCLFNBQVM2TyxHQUFnQnZPLEVBQU01aEUsRUFBS3NoRSxHQUNsQ00sRUFBS1YsVUFBVyxFQUNoQlUsRUFBSzVoRSxJQUFNQSxFQUNYNGhFLEVBQUtOLE9BQVNBLEVBS2hCLFNBQVM4TyxHQUFxQjdpQyxFQUFNbnpDLEdBQ2xDLEdBQUlBLEVBQ0YsR0FBS3krRCxFQUFjeitELEdBS1osQ0FDTCxJQUFJOHVDLEVBQUtxRSxFQUFLckUsR0FBS3FFLEVBQUtyRSxHQUFLMEksRUFBTyxHQUFJckUsRUFBS3JFLElBQU0sR0FDbkQsSUFBSyxJQUFJbHBDLEtBQU81RixFQUFPLENBQ3JCLElBQUlpMkUsRUFBV25uQyxFQUFHbHBDLEdBQ2Rzd0UsRUFBT2wyRSxFQUFNNEYsR0FDakJrcEMsRUFBR2xwQyxHQUFPcXdFLEVBQVcsR0FBR2hsQyxPQUFPZ2xDLEVBQVVDLEdBQVFBLFFBVG5EbGdDLEdBQ0UsZ0RBQ0F4OEMsTUFXTixPQUFPMjVDLEVBS1QsU0FBU2dqQyxHQUNQbEYsRUFDQS9RLEVBRUFrVyxFQUNBQyxHQUVBblcsRUFBTUEsR0FBTyxDQUFFb1QsU0FBVThDLEdBQ3pCLElBQUssSUFBSW55RCxFQUFJLEVBQUdBLEVBQUlndEQsRUFBSTEzRSxPQUFRMHFCLElBQUssQ0FDbkMsSUFBSTZ1RCxFQUFPN0IsRUFBSWh0RCxHQUNYNkMsTUFBTTRxQixRQUFRb2hDLEdBQ2hCcUQsR0FBbUJyRCxFQUFNNVMsRUFBS2tXLEdBQ3JCdEQsSUFFTEEsRUFBS2UsUUFDUGYsRUFBSy9qQyxHQUFHOGtDLE9BQVEsR0FFbEIzVCxFQUFJNFMsRUFBS2x0RSxLQUFPa3RFLEVBQUsvakMsSUFNekIsT0FISXNuQyxJQUNGLEVBQU05QyxLQUFPOEMsR0FFUm5XLEVBS1QsU0FBU29XLEdBQWlCQyxFQUFTdnVELEdBQ2pDLElBQUssSUFBSS9ELEVBQUksRUFBR0EsRUFBSStELEVBQU96dUIsT0FBUTBxQixHQUFLLEVBQUcsQ0FDekMsSUFBSXJlLEVBQU1vaUIsRUFBTy9ELEdBQ0UsaUJBQVJyZSxHQUFvQkEsRUFDN0Iyd0UsRUFBUXZ1RCxFQUFPL0QsSUFBTStELEVBQU8vRCxFQUFJLEdBQ2YsS0FBUnJlLEdBQXNCLE9BQVJBLEdBRXZCb3dDLEdBQ0csMkVBQTZFcHdDLEVBQzlFcE0sTUFJTixPQUFPKzhFLEVBTVQsU0FBU0MsR0FBaUJ4MkUsRUFBT3kyRSxHQUMvQixNQUF3QixpQkFBVnoyRSxFQUFxQnkyRSxFQUFTejJFLEVBQVFBLEVBS3RELFNBQVMwMkUsR0FBc0J0cUUsR0FDN0JBLEVBQU91cUUsR0FBS2IsR0FDWjFwRSxFQUFPNmxDLEdBQUs2c0IsRUFDWjF5RCxFQUFPMGxDLEdBQUszWixFQUNaL3JCLEVBQU93cUUsR0FBSzlDLEdBQ1oxbkUsRUFBT3lxRSxHQUFLOUMsR0FDWjNuRSxFQUFPMHFFLEdBQUt6VyxFQUNaajBELEVBQU8vUyxHQUFLeW5FLEVBQ1oxMEQsRUFBTzJxRSxHQUFLdEIsR0FDWnJwRSxFQUFPNHFFLEdBQUt6QyxHQUNabm9FLEVBQU82cUUsR0FBS3RDLEdBQ1p2b0UsRUFBT29CLEdBQUt5bkUsR0FDWjdvRSxFQUFPOHFFLEdBQUt6UCxHQUNacjdELEVBQU8ybEMsR0FBS3cxQixHQUNabjdELEVBQU8rcUUsR0FBS2hCLEdBQ1ovcEUsRUFBT2dyRSxHQUFLcEIsR0FDWjVwRSxFQUFPOGxDLEdBQUtva0MsR0FDWmxxRSxFQUFPaXJFLEdBQUtiLEdBS2QsU0FBU2MsR0FDUG5rQyxFQUNBaGpCLEVBQ0E3ckIsRUFDQTZuRCxFQUNBMFgsR0FFQSxJQUtJMFQsRUFMQUMsRUFBU2grRSxLQUVUZSxFQUFVc3BFLEVBQUt0cEUsUUFJZjZrRSxFQUFPalQsRUFBUSxTQUNqQm9yQixFQUFZaDhFLE9BQU9pbEQsT0FBTzJMLElBRWhCc3JCLFVBQVl0ckIsR0FLdEJvckIsRUFBWXByQixFQUVaQSxFQUFTQSxFQUFPc3JCLFdBRWxCLElBQUlDLEVBQWF0WixFQUFPN2pFLEVBQVFvOUUsV0FDNUJDLEdBQXFCRixFQUV6QmwrRSxLQUFLMjVDLEtBQU9BLEVBQ1ozNUMsS0FBSzIyQixNQUFRQSxFQUNiMzJCLEtBQUs4SyxTQUFXQSxFQUNoQjlLLEtBQUsyeUQsT0FBU0EsRUFDZDN5RCxLQUFLKzFDLFVBQVk0RCxFQUFLckUsSUFBTW12QixFQUM1QnprRSxLQUFLcStFLFdBQWF0RixHQUFjaDRFLEVBQVFxd0UsT0FBUXplLEdBQ2hEM3lELEtBQUtvNUUsTUFBUSxXQU9YLE9BTks0RSxFQUFPbkQsUUFDVnBCLEdBQ0U5L0IsRUFBSzJrQyxZQUNMTixFQUFPbkQsT0FBUzFCLEdBQWFydUUsRUFBVTZuRCxJQUdwQ3FyQixFQUFPbkQsUUFHaEI5NEUsT0FBT0MsZUFBZWhDLEtBQU0sY0FBZSxDQUN6Q2tDLFlBQVksRUFDWkQsSUFBSyxXQUNILE9BQU93M0UsR0FBcUI5L0IsRUFBSzJrQyxZQUFhdCtFLEtBQUtvNUUsWUFLbkQ4RSxJQUVGbCtFLEtBQUtzckUsU0FBV3ZxRSxFQUVoQmYsS0FBSzY2RSxPQUFTNzZFLEtBQUtvNUUsUUFDbkJwNUUsS0FBSzQ2RSxhQUFlbkIsR0FBcUI5L0IsRUFBSzJrQyxZQUFhdCtFLEtBQUs2NkUsU0FHOUQ5NUUsRUFBUXc5RSxTQUNWditFLEtBQUtpVSxHQUFLLFNBQVVveUQsRUFBR3ZOLEVBQUduZSxFQUFHb2QsR0FDM0IsSUFBSW9XLEVBQVFqdkUsR0FBYzYrRSxFQUFXMVgsRUFBR3ZOLEVBQUduZSxFQUFHb2QsRUFBR3FtQixHQUtqRCxPQUpJalEsSUFBVTdnRCxNQUFNNHFCLFFBQVFpMkIsS0FDMUJBLEVBQU1oQixVQUFZcHNFLEVBQVF3OUUsU0FDMUJwUSxFQUFNbEIsVUFBWXRhLEdBRWJ3YixHQUdUbnVFLEtBQUtpVSxHQUFLLFNBQVVveUQsRUFBR3ZOLEVBQUduZSxFQUFHb2QsR0FBSyxPQUFPNzRELEdBQWM2K0UsRUFBVzFYLEVBQUd2TixFQUFHbmUsRUFBR29kLEVBQUdxbUIsSUErQ2xGLFNBQVNJLEdBQThCclEsRUFBT3gwQixFQUFNb2tDLEVBQVdoOUUsRUFBUzA5RSxHQUl0RSxJQUFJbm9FLEVBQVE0M0QsR0FBV0MsR0FTdkIsT0FSQTczRCxFQUFNMjJELFVBQVk4USxFQUNsQnpuRSxFQUFNNDJELFVBQVluc0UsR0FFZnVWLEVBQU1vb0UsYUFBZXBvRSxFQUFNb29FLGNBQWdCLElBQUlELGNBQWdCQSxFQUU5RDlrQyxFQUFLMi9CLFFBQ05oakUsRUFBTXFqQyxPQUFTcmpDLEVBQU1xakMsS0FBTyxLQUFLMi9CLEtBQU8zL0IsRUFBSzIvQixNQUV6Q2hqRSxFQUdULFNBQVNxb0UsR0FBWS83QixFQUFJOXpCLEdBQ3ZCLElBQUssSUFBSTFpQixLQUFPMGlCLEVBQ2Q4ekIsRUFBR21qQixFQUFTMzVELElBQVEwaUIsRUFBSzFpQixHQTdEN0I4d0UsR0FBcUJZLEdBQXdCdDlFLFdBMEU3QyxJQUFJbytFLEdBQXNCLENBQ3hCditFLEtBQU0sU0FBZTh0RSxFQUFPMFEsR0FDMUIsR0FDRTFRLEVBQU1mLG9CQUNMZSxFQUFNZixrQkFBa0IwUixjQUN6QjNRLEVBQU14MEIsS0FBS29sQyxVQUNYLENBRUEsSUFBSUMsRUFBYzdRLEVBQ2xCeVEsR0FBb0JLLFNBQVNELEVBQWFBLFFBRTlCN1EsRUFBTWYsa0JBMEp4QixTQUVFZSxFQUVBeGIsR0FFQSxJQUFJNXhELEVBQVUsQ0FDWm0rRSxjQUFjLEVBQ2RDLGFBQWNoUixFQUNkeGIsT0FBUUEsR0FHTnlzQixFQUFpQmpSLEVBQU14MEIsS0FBS3lsQyxlQUtoQyxPQUpJemEsRUFBTXlhLEtBQ1JyK0UsRUFBUTYxRSxPQUFTd0ksRUFBZXhJLE9BQ2hDNzFFLEVBQVFzN0UsZ0JBQWtCK0MsRUFBZS9DLGlCQUVwQyxJQUFJbE8sRUFBTXJCLGlCQUFpQnpDLEtBQUt0cEUsR0EzS0dzK0UsQ0FDcENsUixFQUNBbVIsS0FFSUMsT0FBT1YsRUFBWTFRLEVBQU12QixTQUFNenNFLEVBQVcwK0UsSUFJcERJLFNBQVUsU0FBbUJPLEVBQVVyUixHQUNyQyxJQUFJcHRFLEVBQVVvdEUsRUFBTXJCLGtCQTg3QnhCLFNBQ0U5QixFQUNBK0YsRUFDQWg3QixFQUNBMHBDLEVBQ0FDLEdBR0VDLElBQTJCLEVBUzdCLElBQUlDLEVBQWlCSCxFQUFZOWxDLEtBQUsya0MsWUFDbEN1QixFQUFpQjdVLEVBQUc0UCxhQUNwQmtGLEtBQ0RGLElBQW1CQSxFQUFlOUYsU0FDbEMrRixJQUFtQnBiLElBQWdCb2IsRUFBZS9GLFNBQ2xEOEYsR0FBa0I1VSxFQUFHNFAsYUFBYWIsT0FBUzZGLEVBQWU3RixPQUN6RDZGLEdBQWtCNVUsRUFBRzRQLGFBQWFiLE1BTWxDZ0csS0FDRkwsR0FDQTFVLEVBQUdNLFNBQVMwVSxpQkFDWkYsR0FrQkYsR0FmQTlVLEVBQUdNLFNBQVM2VCxhQUFlTSxFQUMzQnpVLEVBQUdpVixPQUFTUixFQUVSelUsRUFBR2tWLFNBQ0xsVixFQUFHa1YsT0FBT3Z0QixPQUFTOHNCLEdBRXJCelUsRUFBR00sU0FBUzBVLGdCQUFrQk4sRUFLOUIxVSxFQUFHbVYsT0FBU1YsRUFBWTlsQyxLQUFLMC9CLE9BQVM1VSxFQUN0Q3VHLEVBQUdvVixXQUFhcnFDLEdBQWEwdUIsRUFHekJzTSxHQUFhL0YsRUFBR00sU0FBUzMwQyxNQUFPLENBQ2xDcTRDLElBQWdCLEdBR2hCLElBRkEsSUFBSXI0QyxFQUFRcTBDLEVBQUdrSSxPQUNYbU4sRUFBV3JWLEVBQUdNLFNBQVNnVixXQUFhLEdBQy9CNzFELEVBQUksRUFBR0EsRUFBSTQxRCxFQUFTdGdGLE9BQVEwcUIsSUFBSyxDQUN4QyxJQUFJcmUsRUFBTWkwRSxFQUFTNTFELEdBQ2Zvb0QsRUFBYzdILEVBQUdNLFNBQVMzMEMsTUFDOUJBLEVBQU12cUIsR0FBT3dtRSxHQUFheG1FLEVBQUt5bUUsRUFBYTlCLEVBQVcvRixHQUV6RGdFLElBQWdCLEdBRWhCaEUsRUFBR00sU0FBU3lGLFVBQVlBLEVBSTFCaDdCLEVBQVlBLEdBQWEwdUIsRUFDekIsSUFBSThiLEVBQWV2VixFQUFHTSxTQUFTa1YsaUJBQy9CeFYsRUFBR00sU0FBU2tWLGlCQUFtQnpxQyxFQUMvQjBxQyxHQUF5QnpWLEVBQUlqMUIsRUFBV3dxQyxHQUdwQ1IsSUFDRi9VLEVBQUc2UCxPQUFTMUIsR0FBYXVHLEVBQWdCRCxFQUFZNVMsU0FDckQ3QixFQUFHMFYsZ0JBSUhmLElBQTJCLEVBemdDM0JnQixDQURZeFMsRUFBTWYsa0JBQW9Cb1MsRUFBU3BTLGtCQUc3Q3JzRSxFQUFRZ3dFLFVBQ1Jod0UsRUFBUWcxQyxVQUNSbzRCLEVBQ0FwdEUsRUFBUStKLFdBSVpvNEQsT0FBUSxTQUFpQmlMLEdBQ3ZCLElBZ3NDOEJuRCxFQWhzQzFCNkIsRUFBVXNCLEVBQU10QixRQUNoQk8sRUFBb0JlLEVBQU1mLGtCQUN6QkEsRUFBa0J3VCxhQUNyQnhULEVBQWtCd1QsWUFBYSxFQUMvQkMsR0FBU3pULEVBQW1CLFlBRTFCZSxFQUFNeDBCLEtBQUtvbEMsWUFDVGxTLEVBQVErVCxhQXlyQ2dCNVYsRUFuckNGb0MsR0FzckMzQjBULFdBQVksRUFDZkMsR0FBa0I5ekUsS0FBSys5RCxJQXJyQ2pCZ1csR0FBdUI1VCxHQUFtQixLQUtoRHpzRSxRQUFTLFNBQWtCd3RFLEdBQ3pCLElBQUlmLEVBQW9CZSxFQUFNZixrQkFDekJBLEVBQWtCMFIsZUFDaEIzUSxFQUFNeDBCLEtBQUtvbEMsVUFHZGtDLEdBQXlCN1QsR0FBbUIsR0FGNUNBLEVBQWtCOFQsY0FRdEJDLEdBQWVwL0UsT0FBT2llLEtBQUs0K0QsSUFFL0IsU0FBU3dDLEdBQ1AvVyxFQUNBMXdCLEVBQ0FrekIsRUFDQS9oRSxFQUNBNmhFLEdBRUEsSUFBSWpJLEVBQVEyRixHQUFaLENBSUEsSUFBSWdYLEVBQVd4VSxFQUFRdkIsU0FBUzRHLE1BU2hDLEdBTklwTixFQUFTdUYsS0FDWEEsRUFBT2dYLEVBQVNyakMsT0FBT3FzQixJQUtMLG1CQUFUQSxFQUFYLENBUUEsSUFBSTBDLEVBQ0osR0FBSXJJLEVBQVEyRixFQUFLZSxXQUdGanJFLEtBRGJrcUUsRUE2WkosU0FDRWlYLEVBQ0FELEdBRUEsR0FBSXpjLEVBQU8wYyxFQUFRMTRFLFFBQVUrN0QsRUFBTTJjLEVBQVFDLFdBQ3pDLE9BQU9ELEVBQVFDLFVBR2pCLEdBQUk1YyxFQUFNMmMsRUFBUUUsVUFDaEIsT0FBT0YsRUFBUUUsU0FHakIsSUFBSUMsRUFBUUMsR0FNWixHQUxJRCxHQUFTOWMsRUFBTTJjLEVBQVFLLFVBQThDLElBQW5DTCxFQUFRSyxPQUFPeDJFLFFBQVFzMkUsSUFFM0RILEVBQVFLLE9BQU8xMEUsS0FBS3cwRSxHQUdsQjdjLEVBQU8wYyxFQUFRTSxVQUFZamQsRUFBTTJjLEVBQVFPLGFBQzNDLE9BQU9QLEVBQVFPLFlBR2pCLEdBQUlKLElBQVU5YyxFQUFNMmMsRUFBUUssUUFBUyxDQUNuQyxJQUFJQSxFQUFTTCxFQUFRSyxPQUFTLENBQUNGLEdBQzNCSyxHQUFPLEVBQ1BDLEVBQWUsS0FDZkMsRUFBZSxLQUVsQixFQUFRQyxJQUFJLGtCQUFrQixXQUFjLE9BQU85NkUsRUFBT3c2RSxFQUFRRixNQUVuRSxJQUFJUyxFQUFjLFNBQVVDLEdBQzFCLElBQUssSUFBSTEzRCxFQUFJLEVBQUdxNEIsRUFBSTYrQixFQUFPNWhGLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQ3ZDazNELEVBQU9sM0QsR0FBSWkyRCxlQUdWeUIsSUFDRlIsRUFBTzVoRixPQUFTLEVBQ0ssT0FBakJnaUYsSUFDRno4RSxhQUFheThFLEdBQ2JBLEVBQWUsTUFFSSxPQUFqQkMsSUFDRjE4RSxhQUFhMDhFLEdBQ2JBLEVBQWUsUUFLakIvNEIsRUFBVXhULEdBQUssU0FBVWl4QixHQUUzQjRhLEVBQVFFLFNBQVdZLEdBQVcxYixFQUFLMmEsR0FHOUJTLEVBR0hILEVBQU81aEYsT0FBUyxFQUZoQm1pRixHQUFZLE1BTVpHLEVBQVM1c0MsR0FBSyxTQUFVbU8sR0FDMUJwSCxHQUNFLHNDQUF5Q3ZXLE9BQU9xN0MsSUFDL0MxOUIsRUFBVSxhQUFlQSxFQUFVLEtBRWxDK2dCLEVBQU0yYyxFQUFRQyxhQUNoQkQsRUFBUTE0RSxPQUFRLEVBQ2hCczVFLEdBQVksT0FJWnhiLEVBQU00YSxFQUFRcjRCLEVBQVNvNUIsR0E2QzNCLE9BM0NJdmQsRUFBUzRCLEtBQ1B0QixFQUFVc0IsR0FFUmhDLEVBQVE0YyxFQUFRRSxXQUNsQjlhLEVBQUl4ZCxLQUFLRCxFQUFTbzVCLEdBRVhqZCxFQUFVc0IsRUFBSTRiLGFBQ3ZCNWIsRUFBSTRiLFVBQVVwNUIsS0FBS0QsRUFBU281QixHQUV4QjFkLEVBQU0rQixFQUFJOTlELFNBQ1owNEUsRUFBUUMsVUFBWWEsR0FBVzFiLEVBQUk5OUQsTUFBT3k0RSxJQUd4QzFjLEVBQU0rQixFQUFJa2IsV0FDWk4sRUFBUU8sWUFBY08sR0FBVzFiLEVBQUlrYixRQUFTUCxHQUM1QixJQUFkM2EsRUFBSXpKLE1BQ05xa0IsRUFBUU0sU0FBVSxFQUVsQkcsRUFBZXI4RSxZQUFXLFdBQ3hCcThFLEVBQWUsS0FDWHJkLEVBQVE0YyxFQUFRRSxXQUFhOWMsRUFBUTRjLEVBQVExNEUsU0FDL0MwNEUsRUFBUU0sU0FBVSxFQUNsQk0sR0FBWSxNQUVieGIsRUFBSXpKLE9BQVMsTUFJaEIwSCxFQUFNK0IsRUFBSXJmLFdBQ1oyNkIsRUFBZXQ4RSxZQUFXLFdBQ3hCczhFLEVBQWUsS0FDWHRkLEVBQVE0YyxFQUFRRSxXQUNsQmEsRUFDRSxZQUFlM2IsRUFBVyxRQUFJLFNBR2pDQSxFQUFJcmYsWUFLYnk2QixHQUFPLEVBRUFSLEVBQVFNLFFBQ1hOLEVBQVFPLFlBQ1JQLEVBQVFFLFVBbmhCTGUsQ0FEUHhWLEVBQWUxQyxFQUM0QmdYLElBS3pDLE9BMllOLFNBQ0VDLEVBQ0EzbkMsRUFDQWt6QixFQUNBL2hFLEVBQ0E2aEUsR0FFQSxJQUFJcUIsRUFBT0QsS0FHWCxPQUZBQyxFQUFLakIsYUFBZXVVLEVBQ3BCdFQsRUFBS0wsVUFBWSxDQUFFaDBCLEtBQU1BLEVBQU1rekIsUUFBU0EsRUFBUy9oRSxTQUFVQSxFQUFVNmhFLElBQUtBLEdBQ25FcUIsRUFyWkl3VSxDQUNMelYsRUFDQXB6QixFQUNBa3pCLEVBQ0EvaEUsRUFDQTZoRSxHQUtOaHpCLEVBQU9BLEdBQVEsR0FJZjhvQyxHQUEwQnBZLEdBR3RCMUYsRUFBTWhyQixFQUFLK29DLFFBMEZqQixTQUF5QjNoRixFQUFTNDRDLEdBQ2hDLElBQUk3aUIsRUFBUS8xQixFQUFRMmhGLE9BQVMzaEYsRUFBUTJoRixNQUFNNXJELE1BQVMsUUFDaER2UCxFQUFTeG1CLEVBQVEyaEYsT0FBUzNoRixFQUFRMmhGLE1BQU1uN0QsT0FBVSxTQUNwRG95QixFQUFLMC9CLFFBQVUxL0IsRUFBSzAvQixNQUFRLEtBQUt2aUQsR0FBUTZpQixFQUFLK29DLE1BQU1sOEUsTUFDdEQsSUFBSTh1QyxFQUFLcUUsRUFBS3JFLEtBQU9xRSxFQUFLckUsR0FBSyxJQUMzQm1uQyxFQUFXbm5DLEVBQUcvdEIsR0FDZGxiLEVBQVdzdEMsRUFBSytvQyxNQUFNcjJFLFNBQ3RCczRELEVBQU04WCxJQUVObnZELE1BQU00cUIsUUFBUXVrQyxJQUNzQixJQUFoQ0EsRUFBU3R4RSxRQUFRa0IsR0FDakJvd0UsSUFBYXB3RSxLQUVqQmlwQyxFQUFHL3RCLEdBQVMsQ0FBQ2xiLEdBQVVvckMsT0FBT2dsQyxJQUdoQ25uQyxFQUFHL3RCLEdBQVNsYixFQXpHWnMyRSxDQUFldFksRUFBS3RwRSxRQUFTNDRDLEdBSS9CLElBQUlvM0IsRUE3OEJOLFNBQ0VwM0IsRUFDQTB3QixFQUNBc0MsR0FLQSxJQUFJa0csRUFBY3hJLEVBQUt0cEUsUUFBUTQxQixNQUMvQixJQUFJK3RDLEVBQVFtTyxHQUFaLENBR0EsSUFBSW5NLEVBQU0sR0FDTjJTLEVBQVExL0IsRUFBSzAvQixNQUNiMWlELEVBQVFnakIsRUFBS2hqQixNQUNqQixHQUFJZ3VDLEVBQU0wVSxJQUFVMVUsRUFBTWh1QyxHQUN4QixJQUFLLElBQUl2cUIsS0FBT3ltRSxFQUFhLENBQzNCLElBQUkyRixFQUFTdFMsRUFBVTk1RCxHQUVqQncyRSxFQUFpQngyRSxFQUFJc1osY0FFdkJ0WixJQUFRdzJFLEdBQ1J2SixHQUFTelQsRUFBT3lULEVBQU91SixJQUV2QmpZLEdBQ0UsU0FBWWlZLEVBQWlCLDRCQUM1QmhZLEdBQW9CK0IsR0FBT3RDLEdBRDVCLG9DQUVRaitELEVBRlIseUtBSzBDb3NFLEVBQVMsaUJBQXFCcHNFLEVBQU0sTUFJcEZtc0UsR0FBVTdSLEVBQUsvdkMsRUFBT3ZxQixFQUFLb3NFLEdBQVEsSUFDbkNELEdBQVU3UixFQUFLMlMsRUFBT2p0RSxFQUFLb3NFLEdBQVEsR0FHdkMsT0FBTzlSLEdBdTZCU21jLENBQTBCbHBDLEVBQU0wd0IsRUFBTXNDLEdBR3RELEdBQUkvSCxFQUFPeUYsRUFBS3RwRSxRQUFRK2hGLFlBQ3RCLE9BeE1KLFNBQ0V6WSxFQUNBMEcsRUFDQXAzQixFQUNBb2tDLEVBQ0FqekUsR0FFQSxJQUFJL0osRUFBVXNwRSxFQUFLdHBFLFFBQ2Y0MUIsRUFBUSxHQUNSazhDLEVBQWM5eEUsRUFBUTQxQixNQUMxQixHQUFJZ3VDLEVBQU1rTyxHQUNSLElBQUssSUFBSXptRSxLQUFPeW1FLEVBQ2RsOEMsRUFBTXZxQixHQUFPd21FLEdBQWF4bUUsRUFBS3ltRSxFQUFhOUIsR0FBYXRNLFFBR3ZERSxFQUFNaHJCLEVBQUswL0IsUUFBVXNGLEdBQVdob0QsRUFBT2dqQixFQUFLMC9CLE9BQzVDMVUsRUFBTWhyQixFQUFLaGpCLFFBQVVnb0QsR0FBV2hvRCxFQUFPZ2pCLEVBQUtoakIsT0FHbEQsSUFBSThuRCxFQUFnQixJQUFJWCxHQUN0Qm5rQyxFQUNBaGpCLEVBQ0E3ckIsRUFDQWl6RSxFQUNBMVQsR0FHRThELEVBQVFwdEUsRUFBUTYxRSxPQUFPeHlFLEtBQUssS0FBTXE2RSxFQUFjeHFFLEdBQUl3cUUsR0FFeEQsR0FBSXRRLGFBQWlCekIsR0FDbkIsT0FBTzhSLEdBQTZCclEsRUFBT3gwQixFQUFNOGtDLEVBQWM5ckIsT0FBUTV4RCxFQUFTMDlFLEdBQzNFLEdBQUlueEQsTUFBTTRxQixRQUFRaTJCLEdBQVEsQ0FHL0IsSUFGQSxJQUFJNFUsRUFBU3JLLEdBQWtCdkssSUFBVSxHQUNyQ3pILEVBQU0sSUFBSXA1QyxNQUFNeTFELEVBQU9oakYsUUFDbEIwcUIsRUFBSSxFQUFHQSxFQUFJczRELEVBQU9oakYsT0FBUTBxQixJQUNqQ2k4QyxFQUFJajhDLEdBQUsrekQsR0FBNkJ1RSxFQUFPdDRELEdBQUlrdkIsRUFBTThrQyxFQUFjOXJCLE9BQVE1eEQsRUFBUzA5RSxHQUV4RixPQUFPL1gsR0FtS0FzYyxDQUEwQjNZLEVBQU0wRyxFQUFXcDNCLEVBQU1rekIsRUFBUy9oRSxHQUtuRSxJQUFJaXJDLEVBQVk0RCxFQUFLckUsR0FLckIsR0FGQXFFLEVBQUtyRSxHQUFLcUUsRUFBS3NwQyxTQUVYcmUsRUFBT3lGLEVBQUt0cEUsUUFBUW1pRixVQUFXLENBS2pDLElBQUk1SixFQUFPMy9CLEVBQUsyL0IsS0FDaEIzL0IsRUFBTyxHQUNIMi9CLElBQ0YzL0IsRUFBSzIvQixLQUFPQSxJQXVDbEIsU0FBZ0MzL0IsR0FFOUIsSUFEQSxJQUFJZzNCLEVBQVFoM0IsRUFBS3MzQixPQUFTdDNCLEVBQUtzM0IsS0FBTyxJQUM3QnhtRCxFQUFJLEVBQUdBLEVBQUkwMkQsR0FBYXBoRixPQUFRMHFCLElBQUssQ0FDNUMsSUFBSXJlLEVBQU0rMEUsR0FBYTEyRCxHQUNuQmd5RCxFQUFXOUwsRUFBTXZrRSxHQUNqQisyRSxFQUFVdkUsR0FBb0J4eUUsR0FDOUJxd0UsSUFBYTBHLEdBQWExRyxHQUFZQSxFQUFTMkcsVUFDakR6UyxFQUFNdmtFLEdBQU9xd0UsRUFBVzRHLEdBQVlGLEVBQVMxRyxHQUFZMEcsSUF6QzdERyxDQUFzQjNwQyxHQUd0QixJQUFJWCxFQUFPcXhCLEVBQUt0cEUsUUFBUWk0QyxNQUFRMnpCLEVBUWhDLE9BUFksSUFBSUQsR0FDYixpQkFBb0JyQyxFQUFRLEtBQUtyeEIsRUFBUSxJQUFNQSxFQUFRLElBQ3hEVyxPQUFNeDVDLE9BQVdBLE9BQVdBLEVBQVcwc0UsRUFDdkMsQ0FBRXhDLEtBQU1BLEVBQU0wRyxVQUFXQSxFQUFXaDdCLFVBQVdBLEVBQVc0MkIsSUFBS0EsRUFBSzdoRSxTQUFVQSxHQUM5RWlpRSxHQXZFRXZ3QixHQUFNLGlDQUFvQ3ZXLE9BQU9va0MsR0FBU3dDLElBNkdoRSxTQUFTd1csR0FBYUUsRUFBSUMsR0FDeEIsSUFBSWxMLEVBQVMsU0FBVWpTLEVBQUd2TixHQUV4QnlxQixFQUFHbGQsRUFBR3ZOLEdBQ04wcUIsRUFBR25kLEVBQUd2TixJQUdSLE9BREF3ZixFQUFPOEssU0FBVSxFQUNWOUssRUFnQ1QsU0FBU3A1RSxHQUNQMnRFLEVBQ0FGLEVBQ0FoekIsRUFDQTd1QyxFQUNBMjRFLEVBQ0FDLEdBVUEsT0FSSXAyRCxNQUFNNHFCLFFBQVF5QixJQUFTa3JCLEVBQVlsckIsTUFDckM4cEMsRUFBb0IzNEUsRUFDcEJBLEVBQVc2dUMsRUFDWEEsT0FBT3g1QyxHQUVMeWtFLEVBQU84ZSxLQUNURCxFQWxCbUIsR0F1QnZCLFNBQ0U1VyxFQUNBRixFQUNBaHpCLEVBQ0E3dUMsRUFDQTI0RSxHQUVBLE9BQUk5ZSxFQUFNaHJCLElBQVNnckIsRUFBTSxFQUFPK0osU0FDOUJseUIsR0FDRSxtREFBc0QvQyxLQUFLQyxVQUFVQyxHQUFyRSwyREFFQWt6QixHQUVLa0IsT0FHTHBKLEVBQU1ockIsSUFBU2dyQixFQUFNaHJCLEVBQUtncUMsTUFDNUJoWCxFQUFNaHpCLEVBQUtncUMsSUFFUmhYLEdBS0RoSSxFQUFNaHJCLElBQVNnckIsRUFBTWhyQixFQUFLdnRDLE9BQVN5NEQsRUFBWWxyQixFQUFLdnRDLE1BR3BEb3dDLEdBQ0UsMkVBRUFxd0IsR0FLRnYvQyxNQUFNNHFCLFFBQVFwdEMsSUFDTyxtQkFBaEJBLEVBQVMsTUFFaEI2dUMsRUFBT0EsR0FBUSxJQUNWMmtDLFlBQWMsQ0FBRW5rQyxRQUFTcnZDLEVBQVMsSUFDdkNBLEVBQVMvSyxPQUFTLEdBL0RDLElBaUVqQjBqRixFQUNGMzRFLEVBQVc0dEUsR0FBa0I1dEUsR0FuRVYsSUFvRVYyNEUsSUFDVDM0RSxFQTdpQ0osU0FBa0NBLEdBQ2hDLElBQUssSUFBSTJmLEVBQUksRUFBR0EsRUFBSTNmLEVBQVMvSyxPQUFRMHFCLElBQ25DLEdBQUk2QyxNQUFNNHFCLFFBQVFwdEMsRUFBUzJmLElBQ3pCLE9BQU82QyxNQUFNOXNCLFVBQVVpM0MsT0FBT3YzQyxNQUFNLEdBQUk0SyxHQUc1QyxPQUFPQSxFQXVpQ004NEUsQ0FBd0I5NEUsSUFHbEIsaUJBQVI2aEUsR0FFVEssRUFBTUgsRUFBUW9ULFFBQVVwVCxFQUFRb1QsT0FBT2pULElBQU9yRixFQUFPYSxnQkFBZ0JtRSxHQUNqRWhGLEVBQU9VLGNBQWNzRSxJQUVuQmhJLEVBQU1ockIsSUFBU2dyQixFQUFNaHJCLEVBQUtzcEMsV0FBMEIsY0FBYnRwQyxFQUFLZ3pCLEtBQzlDbndCLEdBQ0csaUZBQW1GbXdCLEVBQU0sS0FDMUZFLEdBR0pzQixFQUFRLElBQUl6QixHQUNWL0UsRUFBT2MscUJBQXFCa0UsR0FBTWh6QixFQUFNN3VDLE9BQ3hDM0ssT0FBV0EsRUFBVzBzRSxJQVN4QnNCLEVBUFd4MEIsR0FBU0EsRUFBS2txQyxNQUFRbGYsRUFBTTBGLEVBQU9rSSxHQUFhMUYsRUFBUXZCLFNBQVUsYUFBY3FCLElBT25GLElBQUlELEdBQ1ZDLEVBQUtoekIsRUFBTTd1QyxPQUNYM0ssT0FBV0EsRUFBVzBzRSxHQVBoQnVVLEdBQWdCL1csRUFBTTF3QixFQUFNa3pCLEVBQVMvaEUsRUFBVTZoRSxJQVl6RHdCLEVBQVFpVCxHQUFnQnpVLEVBQUtoekIsRUFBTWt6QixFQUFTL2hFLEdBRTFDd2lCLE1BQU00cUIsUUFBUWkyQixHQUNUQSxFQUNFeEosRUFBTXdKLElBQ1h4SixFQUFNcUksSUFBTzhXLEdBQVEzVixFQUFPbkIsR0FDNUJySSxFQUFNaHJCLElBNEJkLFNBQStCQSxHQUN6Qm1yQixFQUFTbnJCLEVBQUtyNkMsUUFDaEIwM0UsR0FBU3I5QixFQUFLcjZDLE9BRVp3bEUsRUFBU25yQixFQUFLb3FDLFFBQ2hCL00sR0FBU3I5QixFQUFLb3FDLE9BakNLQyxDQUFxQnJxQyxHQUNqQ3cwQixHQUVBSixNQWpFQUEsTUEwQlQsSUFBSUksRUFBT25CLEVBRUwzQyxFQXBEQzRaLENBQWVwWCxFQUFTRixFQUFLaHpCLEVBQU03dUMsRUFBVTI0RSxHQTZGdEQsU0FBU0ssR0FBUzNWLEVBQU9uQixFQUFJa1gsR0FPM0IsR0FOQS9WLEVBQU1uQixHQUFLQSxFQUNPLGtCQUFkbUIsRUFBTXhCLE1BRVJLLE9BQUs3c0UsRUFDTCtqRixHQUFRLEdBRU52ZixFQUFNd0osRUFBTXJqRSxVQUNkLElBQUssSUFBSTJmLEVBQUksRUFBR3E0QixFQUFJcXJCLEVBQU1yakUsU0FBUy9LLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQUssQ0FDckQsSUFBSW1vQyxFQUFRdWIsRUFBTXJqRSxTQUFTMmYsR0FDdkJrNkMsRUFBTS9SLEVBQU0rWixPQUNkakksRUFBUTlSLEVBQU1vYSxLQUFRcEksRUFBT3NmLElBQXdCLFFBQWR0eEIsRUFBTStaLE1BQzdDbVgsR0FBUWx4QixFQUFPb2EsRUFBSWtYLElBb0QzQixJQTBQSXR4RSxHQTFQQTh1RSxHQUEyQixLQTRFL0IsU0FBU1UsR0FBWStCLEVBQU1qaUIsR0FPekIsT0FMRWlpQixFQUFLanFDLFlBQ0pxd0IsSUFBMEMsV0FBN0I0WixFQUFLL3JDLE9BQU9nc0MsZ0JBRTFCRCxFQUFPQSxFQUFLaHFDLFNBRVAycUIsRUFBU3FmLEdBQ1pqaUIsRUFBS2xrQixPQUFPbW1DLEdBQ1pBLEVBNElOLFNBQVNFLEdBQXdCdjVFLEdBQy9CLEdBQUl3aUIsTUFBTTRxQixRQUFRcHRDLEdBQ2hCLElBQUssSUFBSTJmLEVBQUksRUFBR0EsRUFBSTNmLEVBQVMvSyxPQUFRMHFCLElBQUssQ0FDeEMsSUFBSWt3QixFQUFJN3ZDLEVBQVMyZixHQUNqQixHQUFJazZDLEVBQU1ocUIsS0FBT2dxQixFQUFNaHFCLEVBQUVteUIsbUJBQXFCYyxHQUFtQmp6QixJQUMvRCxPQUFPQSxHQXNCZixTQUFTM3pDLEdBQUt1Z0IsRUFBT2d1QixHQUNuQjNpQyxHQUFPcXZFLElBQUkxNkQsRUFBT2d1QixHQUdwQixTQUFTK3VDLEdBQVUvOEQsRUFBT2d1QixHQUN4QjNpQyxHQUFPMnhFLEtBQUtoOUQsRUFBT2d1QixHQUdyQixTQUFTd2lDLEdBQW1CeHdELEVBQU9ndUIsR0FDakMsSUFBSWl2QyxFQUFVNXhFLEdBQ2QsT0FBTyxTQUFTNnhFLElBRUYsT0FERmx2QyxFQUFHcjFDLE1BQU0sS0FBTUosWUFFdkIwa0YsRUFBUUQsS0FBS2g5RCxFQUFPazlELElBSzFCLFNBQVNoRSxHQUNQelYsRUFDQWoxQixFQUNBd3FDLEdBRUEzdEUsR0FBU280RCxFQUNUNE0sR0FBZ0I3aEMsRUFBV3dxQyxHQUFnQixHQUFJdjVFLEdBQUtzOUUsR0FBVXZNLEdBQW1CL00sR0FDakZwNEQsUUFBU3pTLEVBa0dYLElBQUltL0UsR0FBaUIsS0FDakJLLElBQTJCLEVBRS9CLFNBQVMrRSxHQUFrQjFaLEdBQ3pCLElBQUkyWixFQUFxQnJGLEdBRXpCLE9BREFBLEdBQWlCdFUsRUFDVixXQUNMc1UsR0FBaUJxRixHQTRRckIsU0FBU0MsR0FBa0I1WixHQUN6QixLQUFPQSxJQUFPQSxFQUFLQSxFQUFHVSxVQUNwQixHQUFJVixFQUFHOFYsVUFBYSxPQUFPLEVBRTdCLE9BQU8sRUFHVCxTQUFTRSxHQUF3QmhXLEVBQUk2WixHQUNuQyxHQUFJQSxHQUVGLEdBREE3WixFQUFHOFosaUJBQWtCLEVBQ2pCRixHQUFpQjVaLEdBQ25CLFlBRUcsR0FBSUEsRUFBRzhaLGdCQUNaLE9BRUYsR0FBSTlaLEVBQUc4VixXQUE4QixPQUFqQjlWLEVBQUc4VixVQUFvQixDQUN6QzlWLEVBQUc4VixXQUFZLEVBQ2YsSUFBSyxJQUFJcjJELEVBQUksRUFBR0EsRUFBSXVnRCxFQUFHK1osVUFBVWhsRixPQUFRMHFCLElBQ3ZDdTJELEdBQXVCaFcsRUFBRytaLFVBQVV0NkQsSUFFdENvMkQsR0FBUzdWLEVBQUksY0FJakIsU0FBU2lXLEdBQTBCalcsRUFBSTZaLEdBQ3JDLEtBQUlBLElBQ0Y3WixFQUFHOFosaUJBQWtCLEVBQ2pCRixHQUFpQjVaLEtBSWxCQSxFQUFHOFYsV0FBVyxDQUNqQjlWLEVBQUc4VixXQUFZLEVBQ2YsSUFBSyxJQUFJcjJELEVBQUksRUFBR0EsRUFBSXVnRCxFQUFHK1osVUFBVWhsRixPQUFRMHFCLElBQ3ZDdzJELEdBQXlCalcsRUFBRytaLFVBQVV0NkQsSUFFeENvMkQsR0FBUzdWLEVBQUksZ0JBSWpCLFNBQVM2VixHQUFVN1YsRUFBSWlHLEdBRXJCekUsS0FDQSxJQUFJbUssRUFBVzNMLEVBQUdNLFNBQVMyRixHQUN2QnVELEVBQU92RCxFQUFPLFFBQ2xCLEdBQUkwRixFQUNGLElBQUssSUFBSWxzRCxFQUFJLEVBQUdveUIsRUFBSTg1QixFQUFTNTJFLE9BQVEwcUIsRUFBSW95QixFQUFHcHlCLElBQzFDbXFELEdBQXdCK0IsRUFBU2xzRCxHQUFJdWdELEVBQUksS0FBTUEsRUFBSXdKLEdBR25EeEosRUFBR2dhLGVBQ0xoYSxFQUFHaWEsTUFBTSxRQUFVaFUsR0FFckJ4RSxLQUtGLElBRUl6L0QsR0FBUSxHQUNSK3pFLEdBQW9CLEdBQ3BCejdELEdBQU0sR0FDTjQvRCxHQUFXLEdBQ1hDLElBQVUsRUFDVkMsSUFBVyxFQUNYdi9ELEdBQVEsRUFtQlosSUFBSXcvRCxHQUF3QixFQUd4QkMsR0FBUzluQyxLQUFLK25DLElBUWxCLEdBQUlyYyxJQUFjTSxFQUFNLENBQ3RCLElBQUl4QixHQUFjcmhFLE9BQU9xaEUsWUFFdkJBLElBQzJCLG1CQUFwQkEsR0FBWXVkLEtBQ25CRCxLQUFXcm1GLFNBQVN5QyxZQUFZLFNBQVM4akYsWUFNekNGLEdBQVMsV0FBYyxPQUFPdGQsR0FBWXVkLFFBTzlDLFNBQVNFLEtBR1AsSUFBSUMsRUFBU251QyxFQWNiLElBaEJBOHRDLEdBQXdCQyxLQUN4QkYsSUFBVyxFQVdYcDRFLEdBQU15aEIsTUFBSyxTQUFVNDNDLEVBQUd2TixHQUFLLE9BQU91TixFQUFFOXVCLEdBQUt1aEIsRUFBRXZoQixNQUl4QzF4QixHQUFRLEVBQUdBLEdBQVE3WSxHQUFNak4sT0FBUThsQixLQVNwQyxJQVJBNi9ELEVBQVUxNEUsR0FBTTZZLEtBQ0o4L0QsUUFDVkQsRUFBUUMsU0FFVnB1QyxFQUFLbXVDLEVBQVFudUMsR0FDYmp5QixHQUFJaXlCLEdBQU0sS0FDVm11QyxFQUFRdHVCLE1BRU8sTUFBWDl4QyxHQUFJaXlCLEtBQ04ydEMsR0FBUzN0QyxJQUFPMnRDLEdBQVMzdEMsSUFBTyxHQUFLLEVBQ2pDMnRDLEdBQVMzdEMsR0FwRkksS0FvRm9CLENBQ25DaUYsR0FDRSx5Q0FDRWtwQyxFQUFRRSxLQUNILCtCQUFtQ0YsRUFBa0IsV0FBSSxJQUMxRCxtQ0FFTkEsRUFBUTFhLElBRVYsTUFNTixJQUFJNmEsRUFBaUI5RSxHQUFrQjcyRSxRQUNuQzQ3RSxFQUFlOTRFLEdBQU05QyxRQXRGekIyYixHQUFRN1ksR0FBTWpOLE9BQVNnaEYsR0FBa0JoaEYsT0FBUyxFQUNsRHVsQixHQUFNLEdBRUo0L0QsR0FBVyxHQUViQyxHQUFVQyxJQUFXLEVBc0h2QixTQUE2QnA0RSxHQUMzQixJQUFLLElBQUl5ZCxFQUFJLEVBQUdBLEVBQUl6ZCxFQUFNak4sT0FBUTBxQixJQUNoQ3pkLEVBQU15ZCxHQUFHcTJELFdBQVksRUFDckJFLEdBQXVCaDBFLEVBQU15ZCxJQUFJLEdBbkNuQ3M3RCxDQUFtQkYsR0FVckIsU0FBMkI3NEUsR0FFekIsSUFEQSxJQUFJeWQsRUFBSXpkLEVBQU1qTixPQUNQMHFCLEtBQUssQ0FDVixJQUFJaTdELEVBQVUxNEUsRUFBTXlkLEdBQ2hCdWdELEVBQUswYSxFQUFRMWEsR0FDYkEsRUFBR2diLFdBQWFOLEdBQVcxYSxFQUFHNFYsYUFBZTVWLEVBQUc4VCxjQUNsRCtCLEdBQVM3VixFQUFJLFlBZmpCaWIsQ0FBaUJILEdBSWIvZCxJQUFZSixFQUFPSSxVQUNyQkEsR0FBUzVtRSxLQUFLLFNBc0VsQixJQUFJK2tGLEdBQVEsRUFPUkMsR0FBVSxTQUNabmIsRUFDQW9iLEVBQ0F2d0MsRUFDQTkwQyxFQUNBc2xGLEdBRUFybUYsS0FBS2dyRSxHQUFLQSxFQUNOcWIsSUFDRnJiLEVBQUdnYixTQUFXaG1GLE1BRWhCZ3JFLEVBQUdzYixVQUFVcjVFLEtBQUtqTixNQUVkZSxHQUNGZixLQUFLdW1GLE9BQVN4bEYsRUFBUXdsRixLQUN0QnZtRixLQUFLNGxGLE9BQVM3a0YsRUFBUTZrRixLQUN0QjVsRixLQUFLd21GLE9BQVN6bEYsRUFBUXlsRixLQUN0QnhtRixLQUFLOGhGLE9BQVMvZ0YsRUFBUStnRixLQUN0QjloRixLQUFLMmxGLE9BQVM1a0YsRUFBUTRrRixRQUV0QjNsRixLQUFLdW1GLEtBQU92bUYsS0FBSzRsRixLQUFPNWxGLEtBQUt3bUYsS0FBT3htRixLQUFLOGhGLE1BQU8sRUFFbEQ5aEYsS0FBSzYxQyxHQUFLQSxFQUNWNzFDLEtBQUt1M0MsS0FBTzJ1QyxHQUNabG1GLEtBQUs2OEQsUUFBUyxFQUNkNzhELEtBQUt5bUYsTUFBUXptRixLQUFLd21GLEtBQ2xCeG1GLEtBQUswbUYsS0FBTyxHQUNaMW1GLEtBQUsybUYsUUFBVSxHQUNmM21GLEtBQUs0bUYsT0FBUyxJQUFJdGMsR0FDbEJ0cUUsS0FBSzZtRixVQUFZLElBQUl2YyxHQUNyQnRxRSxLQUFLOG1GLFdBQWFWLEVBQVF6bkQsV0FFSCxtQkFBWnluRCxFQUNUcG1GLEtBQUsydkUsT0FBU3lXLEdBRWRwbUYsS0FBSzJ2RSxPQXgzSFQsU0FBb0IxdkIsR0FDbEIsSUFBSThvQixFQUFPOXZCLEtBQUtnSCxHQUFoQixDQUdBLElBQUk4bUMsRUFBVzltQyxFQUFLdkIsTUFBTSxLQUMxQixPQUFPLFNBQVV6dkIsR0FDZixJQUFLLElBQUl4RSxFQUFJLEVBQUdBLEVBQUlzOEQsRUFBU2huRixPQUFRMHFCLElBQUssQ0FDeEMsSUFBS3dFLEVBQU8sT0FDWkEsRUFBTUEsRUFBSTgzRCxFQUFTdDhELElBRXJCLE9BQU93RSxJQTgySE8rM0QsQ0FBVVosR0FDbkJwbUYsS0FBSzJ2RSxTQUNSM3ZFLEtBQUsydkUsT0FBU3hlLEVBQ2QzVSxHQUNFLDBCQUE2QjRwQyxFQUE3QiwrRkFHQXBiLEtBSU5ockUsS0FBS3dHLE1BQVF4RyxLQUFLd21GLFVBQ2RybUYsRUFDQUgsS0FBS2lDLE9BTVhra0YsR0FBUTNsRixVQUFVeUIsSUFBTSxXQUV0QixJQUFJdUUsRUFESmdtRSxHQUFXeHNFLE1BRVgsSUFBSWdyRSxFQUFLaHJFLEtBQUtnckUsR0FDZCxJQUNFeGtFLEVBQVF4RyxLQUFLMnZFLE9BQU92ckUsS0FBSzRtRSxFQUFJQSxHQUM3QixNQUFPenRELEdBQ1AsSUFBSXZkLEtBQUs0bEYsS0FHUCxNQUFNcm9FLEVBRk5nM0QsR0FBWWgzRCxFQUFHeXRELEVBQUssdUJBQTJCaHJFLEtBQWUsV0FBSSxLQUlwRSxRQUdJQSxLQUFLdW1GLE1BQ1B2UCxHQUFTeHdFLEdBRVhpbUUsS0FDQXpzRSxLQUFLaW5GLGNBRVAsT0FBT3pnRixHQU1UMi9FLEdBQVEzbEYsVUFBVTZyRSxPQUFTLFNBQWlCdUMsR0FDMUMsSUFBSXIzQixFQUFLcTNCLEVBQUlyM0IsR0FDUnYzQyxLQUFLNm1GLFVBQVV2aEUsSUFBSWl5QixLQUN0QnYzQyxLQUFLNm1GLFVBQVU3L0UsSUFBSXV3QyxHQUNuQnYzQyxLQUFLMm1GLFFBQVExNUUsS0FBSzJoRSxHQUNiNXVFLEtBQUs0bUYsT0FBT3RoRSxJQUFJaXlCLElBQ25CcTNCLEVBQUkzQyxPQUFPanNFLFFBUWpCbW1GLEdBQVEzbEYsVUFBVXltRixZQUFjLFdBRTlCLElBREEsSUFBSXg4RCxFQUFJenFCLEtBQUswbUYsS0FBSzNtRixPQUNYMHFCLEtBQUssQ0FDVixJQUFJbWtELEVBQU01dUUsS0FBSzBtRixLQUFLajhELEdBQ2Z6cUIsS0FBSzZtRixVQUFVdmhFLElBQUlzcEQsRUFBSXIzQixLQUMxQnEzQixFQUFJekMsVUFBVW5zRSxNQUdsQixJQUFJa25GLEVBQU1sbkYsS0FBSzRtRixPQUNmNW1GLEtBQUs0bUYsT0FBUzVtRixLQUFLNm1GLFVBQ25CN21GLEtBQUs2bUYsVUFBWUssRUFDakJsbkYsS0FBSzZtRixVQUFVbmMsUUFDZndjLEVBQU1sbkYsS0FBSzBtRixLQUNYMW1GLEtBQUswbUYsS0FBTzFtRixLQUFLMm1GLFFBQ2pCM21GLEtBQUsybUYsUUFBVU8sRUFDZmxuRixLQUFLMm1GLFFBQVE1bUYsT0FBUyxHQU94Qm9tRixHQUFRM2xGLFVBQVVtaUUsT0FBUyxXQUVyQjNpRSxLQUFLd21GLEtBQ1B4bUYsS0FBS3ltRixPQUFRLEVBQ0p6bUYsS0FBSzhoRixLQUNkOWhGLEtBQUtvM0QsTUFqS1QsU0FBdUJzdUIsR0FDckIsSUFBSW51QyxFQUFLbXVDLEVBQVFudUMsR0FDakIsR0FBZSxNQUFYanlCLEdBQUlpeUIsR0FBYSxDQUVuQixHQURBanlCLEdBQUlpeUIsSUFBTSxFQUNMNnRDLEdBRUUsQ0FJTCxJQURBLElBQUkzNkQsRUFBSXpkLEdBQU1qTixPQUFTLEVBQ2hCMHFCLEVBQUk1RSxJQUFTN1ksR0FBTXlkLEdBQUc4c0IsR0FBS211QyxFQUFRbnVDLElBQ3hDOXNCLElBRUZ6ZCxHQUFNODZCLE9BQU9yZCxFQUFJLEVBQUcsRUFBR2k3RCxRQVJ2QjE0RSxHQUFNQyxLQUFLeTRFLEdBV2IsSUFBS1AsR0FBUyxDQUdaLEdBRkFBLElBQVUsR0FFTHhkLEVBQU9oaUIsTUFFVixZQURBOC9CLEtBR0YxOEIsR0FBUzA4QixNQTRJWDBCLENBQWFubkYsT0FRakJtbUYsR0FBUTNsRixVQUFVNDJELElBQU0sV0FDdEIsR0FBSXAzRCxLQUFLNjhELE9BQVEsQ0FDZixJQUFJcjJELEVBQVF4RyxLQUFLaUMsTUFDakIsR0FDRXVFLElBQVV4RyxLQUFLd0csT0FJZnMrRCxFQUFTdCtELElBQ1R4RyxLQUFLdW1GLEtBQ0wsQ0FFQSxJQUFJYSxFQUFXcG5GLEtBQUt3RyxNQUVwQixHQURBeEcsS0FBS3dHLE1BQVFBLEVBQ1R4RyxLQUFLNGxGLEtBQU0sQ0FDYixJQUFJcFIsRUFBTyx5QkFBNkJ4MEUsS0FBZSxXQUFJLElBQzNENDBFLEdBQXdCNTBFLEtBQUs2MUMsR0FBSTcxQyxLQUFLZ3JFLEdBQUksQ0FBQ3hrRSxFQUFPNGdGLEdBQVdwbkYsS0FBS2dyRSxHQUFJd0osUUFFdEV4MEUsS0FBSzYxQyxHQUFHenhDLEtBQUtwRSxLQUFLZ3JFLEdBQUl4a0UsRUFBTzRnRixNQVVyQ2pCLEdBQVEzbEYsVUFBVTZtRixTQUFXLFdBQzNCcm5GLEtBQUt3RyxNQUFReEcsS0FBS2lDLE1BQ2xCakMsS0FBS3ltRixPQUFRLEdBTWZOLEdBQVEzbEYsVUFBVTRyRSxPQUFTLFdBRXpCLElBREEsSUFBSTNoRCxFQUFJenFCLEtBQUswbUYsS0FBSzNtRixPQUNYMHFCLEtBQ0x6cUIsS0FBSzBtRixLQUFLajhELEdBQUcyaEQsVUFPakIrWixHQUFRM2xGLFVBQVU4bUYsU0FBVyxXQUMzQixHQUFJdG5GLEtBQUs2OEQsT0FBUSxDQUlWNzhELEtBQUtnckUsR0FBR3VjLG1CQUNYcGdGLEVBQU9uSCxLQUFLZ3JFLEdBQUdzYixVQUFXdG1GLE1BRzVCLElBREEsSUFBSXlxQixFQUFJenFCLEtBQUswbUYsS0FBSzNtRixPQUNYMHFCLEtBQ0x6cUIsS0FBSzBtRixLQUFLajhELEdBQUcwaEQsVUFBVW5zRSxNQUV6QkEsS0FBSzY4RCxRQUFTLElBTWxCLElBQUkycUIsR0FBMkIsQ0FDN0J0bEYsWUFBWSxFQUNaQyxjQUFjLEVBQ2RGLElBQUtrdkQsRUFDTDdxRCxJQUFLNnFELEdBR1AsU0FBU2twQixHQUFPem5FLEVBQVE2MEUsRUFBV3I3RSxHQUNqQ283RSxHQUF5QnZsRixJQUFNLFdBQzdCLE9BQU9qQyxLQUFLeW5GLEdBQVdyN0UsSUFFekJvN0UsR0FBeUJsaEYsSUFBTSxTQUFzQnczQyxHQUNuRDk5QyxLQUFLeW5GLEdBQVdyN0UsR0FBTzB4QyxHQUV6Qi83QyxPQUFPQyxlQUFlNFEsRUFBUXhHLEVBQUtvN0UsSUFHckMsU0FBU0UsR0FBVzFjLEdBQ2xCQSxFQUFHc2IsVUFBWSxHQUNmLElBQUl2c0UsRUFBT2l4RCxFQUFHTSxTQUNWdnhELEVBQUs0YyxPQWFYLFNBQW9CcTBDLEVBQUkyYyxHQUN0QixJQUFJNVcsRUFBWS9GLEVBQUdNLFNBQVN5RixXQUFhLEdBQ3JDcDZDLEVBQVFxMEMsRUFBR2tJLE9BQVMsR0FHcEJsekQsRUFBT2dyRCxFQUFHTSxTQUFTZ1YsVUFBWSxHQUMvQnNILEdBQVU1YyxFQUFHVSxRQUVaa2MsR0FDSDVZLElBQWdCLEdBRWxCLElBQUk0TSxFQUFPLFNBQVd4dkUsR0FDcEI0VCxFQUFLL1MsS0FBS2IsR0FDVixJQUFJNUYsRUFBUW9zRSxHQUFheG1FLEVBQUt1N0UsRUFBYzVXLEVBQVcvRixHQUdqRCtRLEVBQWdCN1YsRUFBVTk1RCxJQUMxQnU1RCxFQUFvQm9XLElBQ3BCcFUsRUFBT1csZUFBZXlULEtBQ3hCdi9CLEdBQ0csSUFBT3UvQixFQUFnQixrRUFDeEIvUSxHQUdKd0UsR0FBa0I3NEMsRUFBT3ZxQixFQUFLNUYsR0FBTyxXQUM5Qm9oRixHQUFXakksSUFDZG5qQyxHQUNFLDBNQUdrQ3B3QyxFQUFNLElBQ3hDNCtELE1BUUY1K0QsS0FBTzQrRCxHQUNYcVAsR0FBTXJQLEVBQUksU0FBVTUrRCxJQUl4QixJQUFLLElBQUlBLEtBQU91N0UsRUFBYy9MLEVBQU14dkUsR0FDcEM0aUUsSUFBZ0IsR0ExREU2WSxDQUFVN2MsRUFBSWp4RCxFQUFLNGMsT0FDakM1YyxFQUFLbzNELFNBbU5YLFNBQXNCbkcsRUFBSW1HLEdBQ3hCLElBQUl4NkMsRUFBUXEwQyxFQUFHTSxTQUFTMzBDLE1BQ3hCLElBQUssSUFBSXZxQixLQUFPK2tFLEVBRWdCLG1CQUFqQkEsRUFBUS9rRSxJQUNqQm93QyxHQUNFLFdBQWNwd0MsRUFBTSxzQkFBMkIra0UsRUFBUS9rRSxHQUF2RCwyRUFFQTQrRCxHQUdBcjBDLEdBQVNpdkMsRUFBT2p2QyxFQUFPdnFCLElBQ3pCb3dDLEdBQ0csV0FBY3B3QyxFQUFNLHdDQUNyQjQrRCxHQUdDNStELEtBQU80K0QsR0FBT25DLEVBQVd6OEQsSUFDNUJvd0MsR0FDRSxXQUFjcHdDLEVBQWQsOEdBS040K0QsRUFBRzUrRCxHQUErQixtQkFBakIra0UsRUFBUS9rRSxHQUFzQitrRCxFQUFPOThDLEVBQUs4OEQsRUFBUS9rRSxHQUFNNCtELEdBM092RDhjLENBQVk5YyxFQUFJanhELEVBQUtvM0QsU0FDckNwM0QsRUFBSzQvQixLQTJEWCxTQUFtQnF4QixHQUNqQixJQUFJcnhCLEVBQU9xeEIsRUFBR00sU0FBUzN4QixLQUlsQnNyQixFQUhMdHJCLEVBQU9xeEIsRUFBRytjLE1BQXdCLG1CQUFUcHVDLEVBd0MzQixTQUFrQkEsRUFBTXF4QixHQUV0QndCLEtBQ0EsSUFDRSxPQUFPN3lCLEVBQUt2MUMsS0FBSzRtRSxFQUFJQSxHQUNyQixNQUFPenRELEdBRVAsT0FEQWczRCxHQUFZaDNELEVBQUd5dEQsRUFBSSxVQUNaLEdBQ1AsUUFDQXlCLE1BaERFdWIsQ0FBUXJ1QyxFQUFNcXhCLEdBQ2RyeEIsR0FBUSxNQUVWQSxFQUFPLEdBQ1A2QyxHQUNFLDhHQUVBd3VCLElBUUosSUFKQSxJQUFJaHJELEVBQU9qZSxPQUFPaWUsS0FBSzI1QixHQUNuQmhqQixFQUFRcTBDLEVBQUdNLFNBQVMzMEMsTUFDcEJ3NkMsRUFBVW5HLEVBQUdNLFNBQVM2RixRQUN0QjFtRCxFQUFJekssRUFBS2pnQixPQUNOMHFCLEtBQUssQ0FDVixJQUFJcmUsRUFBTTRULEVBQUt5SyxHQUVUMG1ELEdBQVd2TCxFQUFPdUwsRUFBUy9rRSxJQUM3Qm93QyxHQUNHLFdBQWNwd0MsRUFBTSxpREFDckI0K0QsR0FJRnIwQyxHQUFTaXZDLEVBQU9qdkMsRUFBT3ZxQixHQUN6Qm93QyxHQUNFLHNCQUF5QnB3QyxFQUF6QixtRUFFQTQrRCxHQUVRbkMsRUFBV3o4RCxJQUNyQml1RSxHQUFNclAsRUFBSSxRQUFTNStELEdBSXZCaTVCLEdBQVFzVSxHQUFNLEdBakdac3VDLENBQVNqZCxHQUVUM2xDLEdBQVEybEMsRUFBRytjLE1BQVEsSUFBSSxHQUVyQmh1RSxFQUFLczNELFVBK0dYLFNBQXVCckcsRUFBSXFHLEdBRXpCLElBQUk2VyxFQUFXbGQsRUFBR21kLGtCQUFvQnBtRixPQUFPaWxELE9BQU8sTUFFaERvaEMsRUFBUXBlLEtBRVosSUFBSyxJQUFJNTlELEtBQU9pbEUsRUFBVSxDQUN4QixJQUFJZ1gsRUFBVWhYLEVBQVNqbEUsR0FDbkJ1akUsRUFBNEIsbUJBQVowWSxFQUF5QkEsRUFBVUEsRUFBUXBtRixJQUNqRCxNQUFWMHRFLEdBQ0ZuekIsR0FDRyw0Q0FBK0Nwd0MsRUFBTSxLQUN0RDQrRCxHQUlDb2QsSUFFSEYsRUFBUzk3RSxHQUFPLElBQUkrNUUsR0FDbEJuYixFQUNBMkUsR0FBVXhlLEVBQ1ZBLEVBQ0FtM0IsS0FPRWw4RSxLQUFPNCtELEVBR1A1K0QsS0FBTzQrRCxFQUFHeUwsTUFDWmo2QixHQUFNLDBCQUE2QnB3QyxFQUFNLGdDQUFtQzQrRCxHQUNuRUEsRUFBR00sU0FBUzMwQyxPQUFTdnFCLEtBQU80K0QsRUFBR00sU0FBUzMwQyxNQUNqRDZsQixHQUFNLDBCQUE2QnB3QyxFQUFNLGtDQUFxQzQrRCxHQUNyRUEsRUFBR00sU0FBUzZGLFNBQVcva0UsS0FBTzQrRCxFQUFHTSxTQUFTNkYsU0FDbkQzMEIsR0FBTSwwQkFBNkJwd0MsRUFBTSxvQ0FBdUM0K0QsR0FQbEZ1ZCxHQUFldmQsRUFBSTUrRCxFQUFLaThFLElBN0lQRyxDQUFheGQsRUFBSWp4RCxFQUFLczNELFVBQ3ZDdDNELEVBQUsrdkQsT0FBUy92RCxFQUFLK3ZELFFBQVVELElBd09uQyxTQUFvQm1CLEVBQUlsQixHQUN0QixJQUFLLElBQUkxOUQsS0FBTzA5RCxFQUFPLENBQ3JCLElBQUlocEUsRUFBVWdwRSxFQUFNMTlELEdBQ3BCLEdBQUlraEIsTUFBTTRxQixRQUFRcDNDLEdBQ2hCLElBQUssSUFBSTJwQixFQUFJLEVBQUdBLEVBQUkzcEIsRUFBUWYsT0FBUTBxQixJQUNsQ2crRCxHQUFjemQsRUFBSTUrRCxFQUFLdEwsRUFBUTJwQixTQUdqQ2crRCxHQUFjemQsRUFBSTUrRCxFQUFLdEwsSUEvT3pCNG5GLENBQVUxZCxFQUFJanhELEVBQUsrdkQsT0EyR3ZCLElBQUl3ZSxHQUF5QixDQUFFOUIsTUFBTSxHQTZDckMsU0FBUytCLEdBQ1AzMUUsRUFDQXhHLEVBQ0FpOEUsR0FFQSxJQUFJTSxHQUFlM2UsS0FDSSxtQkFBWnFlLEdBQ1RiLEdBQXlCdmxGLElBQU0wbUYsRUFDM0JDLEdBQXFCeDhFLEdBQ3JCeThFLEdBQW9CUixHQUN4QmIsR0FBeUJsaEYsSUFBTTZxRCxJQUUvQnEyQixHQUF5QnZsRixJQUFNb21GLEVBQVFwbUYsSUFDbkMwbUYsSUFBaUMsSUFBbEJOLEVBQVEzdUIsTUFDckJrdkIsR0FBcUJ4OEUsR0FDckJ5OEUsR0FBb0JSLEVBQVFwbUYsS0FDOUJrdkQsRUFDSnEyQixHQUF5QmxoRixJQUFNK2hGLEVBQVEvaEYsS0FBTzZxRCxHQUU1Q3EyQixHQUF5QmxoRixNQUFRNnFELElBQ25DcTJCLEdBQXlCbGhGLElBQU0sV0FDN0JrMkMsR0FDRyxzQkFBeUJwd0MsRUFBTSwwQ0FDaENwTSxRQUlOK0IsT0FBT0MsZUFBZTRRLEVBQVF4RyxFQUFLbzdFLElBR3JDLFNBQVNvQixHQUFzQng4RSxHQUM3QixPQUFPLFdBQ0wsSUFBSXM1RSxFQUFVMWxGLEtBQUttb0YsbUJBQXFCbm9GLEtBQUttb0Ysa0JBQWtCLzdFLEdBQy9ELEdBQUlzNUUsRUFPRixPQU5JQSxFQUFRZSxPQUNWZixFQUFRMkIsV0FFTnJiLEdBQUlwNUQsUUFDTjh5RSxFQUFRdFosU0FFSHNaLEVBQVFsL0UsT0FLckIsU0FBU3FpRixHQUFvQnR6QyxHQUMzQixPQUFPLFdBQ0wsT0FBT0EsRUFBR254QyxLQUFLcEUsS0FBTUEsT0E2Q3pCLFNBQVN5b0YsR0FDUHpkLEVBQ0FvYixFQUNBdGxGLEVBQ0FDLEdBU0EsT0FQSWtrRSxFQUFjbmtFLEtBQ2hCQyxFQUFVRCxFQUNWQSxFQUFVQSxFQUFRQSxTQUVHLGlCQUFaQSxJQUNUQSxFQUFVa3FFLEVBQUdscUUsSUFFUmtxRSxFQUFHOGQsT0FBTzFDLEVBQVN0bEYsRUFBU0MsR0F1RHJDLElBQUlnb0YsR0FBUSxFQThFWixTQUFTdEcsR0FBMkJwWSxHQUNsQyxJQUFJdHBFLEVBQVVzcEUsRUFBS3RwRSxRQUNuQixHQUFJc3BFLEVBQUsvcUIsTUFBTyxDQUNkLElBQUkwcEMsRUFBZXZHLEdBQTBCcFksRUFBSy9xQixPQUVsRCxHQUFJMHBDLElBRHFCM2UsRUFBSzJlLGFBQ1csQ0FHdkMzZSxFQUFLMmUsYUFBZUEsRUFFcEIsSUFBSUMsRUFjVixTQUFpQzVlLEdBQy9CLElBQUk2ZSxFQUNBQyxFQUFTOWUsRUFBS3RwRSxRQUNkcW9GLEVBQVMvZSxFQUFLZ2YsY0FDbEIsSUFBSyxJQUFJajlFLEtBQU8rOEUsRUFDVkEsRUFBTy84RSxLQUFTZzlFLEVBQU9oOUUsS0FDcEI4OEUsSUFBWUEsRUFBVyxJQUM1QkEsRUFBUzk4RSxHQUFPKzhFLEVBQU8vOEUsSUFHM0IsT0FBTzg4RSxFQXhCbUJJLENBQXVCamYsR0FFekM0ZSxHQUNGanJDLEVBQU9xc0IsRUFBS2tmLGNBQWVOLElBRTdCbG9GLEVBQVVzcEUsRUFBS3RwRSxRQUFVeXdFLEdBQWF3WCxFQUFjM2UsRUFBS2tmLGdCQUM3Q3Z3QyxPQUNWajRDLEVBQVEwd0UsV0FBVzF3RSxFQUFRaTRDLE1BQVFxeEIsSUFJekMsT0FBT3RwRSxFQWdCVCxTQUFTeW9GLEdBQUt6b0YsR0FDTmYsZ0JBQWdCd3BGLElBRXBCaHRDLEdBQUssb0VBRVB4OEMsS0FBS3lwRixNQUFNMW9GLEdBMENiLFNBQVMyb0YsR0FBWUYsR0FNbkJBLEVBQUlwZSxJQUFNLEVBQ1YsSUFBSUEsRUFBTSxFQUtWb2UsRUFBSXhyQyxPQUFTLFNBQVV1ckMsR0FDckJBLEVBQWdCQSxHQUFpQixHQUNqQyxJQUFJSSxFQUFRM3BGLEtBQ1I0cEYsRUFBVUQsRUFBTXZlLElBQ2hCeWUsRUFBY04sRUFBY08sUUFBVVAsRUFBY08sTUFBUSxJQUNoRSxHQUFJRCxFQUFZRCxHQUNkLE9BQU9DLEVBQVlELEdBR3JCLElBQUk1d0MsRUFBT3V3QyxFQUFjdndDLE1BQVEyd0MsRUFBTTVvRixRQUFRaTRDLEtBQzNDQSxHQUNGdTRCLEdBQXNCdjRCLEdBR3hCLElBQUkrd0MsRUFBTSxTQUF1QmhwRixHQUMvQmYsS0FBS3lwRixNQUFNMW9GLElBNkNiLE9BM0NBZ3BGLEVBQUl2cEYsVUFBWXVCLE9BQU9pbEQsT0FBTzJpQyxFQUFNbnBGLFlBQ3RCdTRDLFlBQWNneEMsRUFDNUJBLEVBQUkzZSxJQUFNQSxJQUNWMmUsRUFBSWhwRixRQUFVeXdFLEdBQ1ptWSxFQUFNNW9GLFFBQ053b0YsR0FFRlEsRUFBVyxNQUFJSixFQUtYSSxFQUFJaHBGLFFBQVE0MUIsT0FtQ3BCLFNBQXNCcXpELEdBQ3BCLElBQUlyekQsRUFBUXF6RCxFQUFLanBGLFFBQVE0MUIsTUFDekIsSUFBSyxJQUFJdnFCLEtBQU91cUIsRUFDZDBqRCxHQUFNMlAsRUFBS3hwRixVQUFXLFNBQVU0TCxHQXJDOUI2OUUsQ0FBWUYsR0FFVkEsRUFBSWhwRixRQUFRc3dFLFVBdUNwQixTQUF5QjJZLEdBQ3ZCLElBQUkzWSxFQUFXMlksRUFBS2pwRixRQUFRc3dFLFNBQzVCLElBQUssSUFBSWpsRSxLQUFPaWxFLEVBQ2RrWCxHQUFleUIsRUFBS3hwRixVQUFXNEwsRUFBS2lsRSxFQUFTamxFLElBekMzQzg5RSxDQUFlSCxHQUlqQkEsRUFBSS9yQyxPQUFTMnJDLEVBQU0zckMsT0FDbkIrckMsRUFBSTEwQyxNQUFRczBDLEVBQU10MEMsTUFDbEIwMEMsRUFBSUksSUFBTVIsRUFBTVEsSUFJaEIxaUIsRUFBWXI5RCxTQUFRLFNBQVVnVixHQUM1QjJxRSxFQUFJM3FFLEdBQVF1cUUsRUFBTXZxRSxNQUdoQjQ1QixJQUNGK3dDLEVBQUlocEYsUUFBUTB3RSxXQUFXejRCLEdBQVErd0MsR0FNakNBLEVBQUlmLGFBQWVXLEVBQU01b0YsUUFDekJncEYsRUFBSVIsY0FBZ0JBLEVBQ3BCUSxFQUFJVixjQUFnQnJyQyxFQUFPLEdBQUkrckMsRUFBSWhwRixTQUduQzhvRixFQUFZRCxHQUFXRyxFQUNoQkEsR0F3RFgsU0FBU0ssR0FBa0Jyd0UsR0FDekIsT0FBT0EsSUFBU0EsRUFBS3N3RCxLQUFLdHBFLFFBQVFpNEMsTUFBUWovQixFQUFLNHlELEtBR2pELFNBQVM1MkQsR0FBUzI0QixFQUFTc0ssR0FDekIsT0FBSTFyQixNQUFNNHFCLFFBQVF4SixHQUNUQSxFQUFRdmpDLFFBQVE2dEMsSUFBUyxFQUNKLGlCQUFadEssRUFDVEEsRUFBUWdRLE1BQU0sS0FBS3Z6QyxRQUFRNnRDLElBQVMsSUFDbENrc0IsRUFBU3gyQixJQUNYQSxFQUFRdUssS0FBS0QsR0FNeEIsU0FBU3F4QyxHQUFZQyxFQUFtQmwvRSxHQUN0QyxJQUFJc3VELEVBQVE0d0IsRUFBa0I1d0IsTUFDMUIxNUMsRUFBT3NxRSxFQUFrQnRxRSxLQUN6QmtnRSxFQUFTb0ssRUFBa0JwSyxPQUMvQixJQUFLLElBQUk5ekUsS0FBT3N0RCxFQUFPLENBQ3JCLElBQUk2d0IsRUFBUTd3QixFQUFNdHRELEdBQ2xCLEdBQUltK0UsRUFBTyxDQUNULElBQUl2eEMsRUFBT3V4QyxFQUFNdnhDLEtBQ2JBLElBQVM1dEMsRUFBTzR0QyxJQUNsQnd4QyxHQUFnQjl3QixFQUFPdHRELEVBQUs0VCxFQUFNa2dFLEtBTTFDLFNBQVNzSyxHQUNQOXdCLEVBQ0F0dEQsRUFDQTRULEVBQ0F5cUUsR0FFQSxJQUFJRixFQUFRN3dCLEVBQU10dEQsSUFDZG0rRSxHQUFXRSxHQUFXRixFQUFNNWQsTUFBUThkLEVBQVE5ZCxLQUM5QzRkLEVBQU1uZCxrQkFBa0I4VCxXQUUxQnhuQixFQUFNdHRELEdBQU8sS0FDYmpGLEVBQU82WSxFQUFNNVQsSUExVWYsU0FBb0JvOUUsR0FDbEJBLEVBQUlocEYsVUFBVWlwRixNQUFRLFNBQVUxb0YsR0FDOUIsSUFJSWcxRSxFQUFVQyxFQUpWaEwsRUFBS2hyRSxLQUVUZ3JFLEVBQUcwZixLQUFPM0IsS0FJTnBoQixFQUFPSyxhQUFlZ04sS0FDeEJlLEVBQVcsa0JBQXFCL0ssRUFBTyxLQUN2Q2dMLEVBQVMsZ0JBQW1CaEwsRUFBTyxLQUNuQ2dLLEdBQUtlLElBSVAvSyxFQUFHSyxRQUFTLEVBRVJ0cUUsR0FBV0EsRUFBUW0rRSxhQXdDM0IsU0FBZ0NsVSxFQUFJanFFLEdBQ2xDLElBQUlnWixFQUFPaXhELEVBQUdNLFNBQVd2cEUsT0FBT2lsRCxPQUFPZ2tCLEVBQUdqeUIsWUFBWWg0QyxTQUVsRDArRSxFQUFjMStFLEVBQVFvK0UsYUFDMUJwbEUsRUFBSzQ0QyxPQUFTNXhELEVBQVE0eEQsT0FDdEI1NEMsRUFBS29sRSxhQUFlTSxFQUVwQixJQUFJa0wsRUFBd0JsTCxFQUFZM1MsaUJBQ3hDL3lELEVBQUtnM0QsVUFBWTRaLEVBQXNCNVosVUFDdkNoM0QsRUFBS3ltRSxpQkFBbUJtSyxFQUFzQjUwQyxVQUM5Q2g4QixFQUFLaW1FLGdCQUFrQjJLLEVBQXNCNy9FLFNBQzdDaVAsRUFBS3d4RCxjQUFnQm9mLEVBQXNCaGUsSUFFdkM1ckUsRUFBUTYxRSxTQUNWNzhELEVBQUs2OEQsT0FBUzcxRSxFQUFRNjFFLE9BQ3RCNzhELEVBQUtzaUUsZ0JBQWtCdDdFLEVBQVFzN0UsaUJBbkQ3QnVPLENBQXNCNWYsRUFBSWpxRSxHQUUxQmlxRSxFQUFHTSxTQUFXa0csR0FDWmlSLEdBQTBCelgsRUFBR2p5QixhQUM3Qmg0QyxHQUFXLEdBQ1hpcUUsR0FLRjJLLEdBQVUzSyxHQUdaQSxFQUFHNmYsTUFBUTdmLEVBNWpDZixTQUF3QkEsR0FDdEIsSUFBSWpxRSxFQUFVaXFFLEVBQUdNLFNBR2IzWSxFQUFTNXhELEVBQVE0eEQsT0FDckIsR0FBSUEsSUFBVzV4RCxFQUFRbWlGLFNBQVUsQ0FDL0IsS0FBT3Z3QixFQUFPMlksU0FBUzRYLFVBQVl2d0IsRUFBTytZLFNBQ3hDL1ksRUFBU0EsRUFBTytZLFFBRWxCL1ksRUFBT295QixVQUFVOTNFLEtBQUsrOUQsR0FHeEJBLEVBQUdVLFFBQVUvWSxFQUNicVksRUFBR0csTUFBUXhZLEVBQVNBLEVBQU93WSxNQUFRSCxFQUVuQ0EsRUFBRytaLFVBQVksR0FDZi9aLEVBQUc4ZixNQUFRLEdBRVg5ZixFQUFHZ2IsU0FBVyxLQUNkaGIsRUFBRzhWLFVBQVksS0FDZjlWLEVBQUc4WixpQkFBa0IsRUFDckI5WixFQUFHNFYsWUFBYSxFQUNoQjVWLEVBQUc4VCxjQUFlLEVBQ2xCOVQsRUFBR3VjLG1CQUFvQixFQXNpQ3JCd0QsQ0FBYy9mLEdBL3NDbEIsU0FBcUJBLEdBQ25CQSxFQUFHZ2dCLFFBQVVqcEYsT0FBT2lsRCxPQUFPLE1BQzNCZ2tCLEVBQUdnYSxlQUFnQixFQUVuQixJQUFJanZDLEVBQVlpMUIsRUFBR00sU0FBU2tWLGlCQUN4QnpxQyxHQUNGMHFDLEdBQXlCelYsRUFBSWoxQixHQTBzQzdCazFDLENBQVdqZ0IsR0FoK0NmLFNBQXFCQSxHQUNuQkEsRUFBR2tWLE9BQVMsS0FDWmxWLEVBQUdtUixhQUFlLEtBQ2xCLElBQUlwN0UsRUFBVWlxRSxFQUFHTSxTQUNibVUsRUFBY3pVLEVBQUdpVixPQUFTbC9FLEVBQVFvK0UsYUFDbENWLEVBQWdCZ0IsR0FBZUEsRUFBWTVTLFFBQy9DN0IsRUFBRzZQLE9BQVMxQixHQUFhcDRFLEVBQVFpL0UsZ0JBQWlCdkIsR0FDbER6VCxFQUFHNFAsYUFBZW5XLEVBS2xCdUcsRUFBRy8yRCxHQUFLLFNBQVVveUQsRUFBR3ZOLEVBQUduZSxFQUFHb2QsR0FBSyxPQUFPNzRELEdBQWM4ckUsRUFBSTNFLEVBQUd2TixFQUFHbmUsRUFBR29kLEdBQUcsSUFHckVpVCxFQUFHOFAsZUFBaUIsU0FBVXpVLEVBQUd2TixFQUFHbmUsRUFBR29kLEdBQUssT0FBTzc0RCxHQUFjOHJFLEVBQUkzRSxFQUFHdk4sRUFBR25lLEVBQUdvZCxHQUFHLElBSWpGLElBQUltekIsRUFBYXpMLEdBQWVBLEVBQVk5bEMsS0FJMUM2MUIsR0FBa0J4RSxFQUFJLFNBQVVrZ0IsR0FBY0EsRUFBVzdSLE9BQVM1VSxHQUFhLFlBQzVFa2IsSUFBNEJuakMsR0FBSyxzQkFBdUJ3dUIsTUFDeEQsR0FDSHdFLEdBQWtCeEUsRUFBSSxhQUFjanFFLEVBQVF5L0Usa0JBQW9CL2IsR0FBYSxZQUMxRWtiLElBQTRCbmpDLEdBQUssMEJBQTJCd3VCLE1BQzVELEdBcThDSG1nQixDQUFXbmdCLEdBQ1g2VixHQUFTN1YsRUFBSSxnQkF4Z0ZqQixTQUF5QkEsR0FDdkIsSUFBSXZmLEVBQVNzdEIsR0FBYy9OLEVBQUdNLFNBQVM4RixPQUFRcEcsR0FDM0N2ZixJQUNGdWpCLElBQWdCLEdBQ2hCanRFLE9BQU9pZSxLQUFLeXJDLEdBQVFyaEQsU0FBUSxTQUFVZ0MsR0FHbENvakUsR0FBa0J4RSxFQUFJNStELEVBQUtxL0MsRUFBT3IvQyxJQUFNLFdBQ3RDb3dDLEdBQ0UseUpBRWdDcHdDLEVBQU0sSUFDdEM0K0QsU0FLUmdFLElBQWdCLElBdy9FaEJvYyxDQUFlcGdCLEdBQ2YwYyxHQUFVMWMsR0FuaEZkLFNBQXNCQSxHQUNwQixJQUFJc0csRUFBVXRHLEVBQUdNLFNBQVNnRyxRQUN0QkEsSUFDRnRHLEVBQUdpTyxVQUErQixtQkFBWjNILEVBQ2xCQSxFQUFRbHRFLEtBQUs0bUUsR0FDYnNHLEdBK2dGSitaLENBQVlyZ0IsR0FDWjZWLEdBQVM3VixFQUFJLFdBR1RyRCxFQUFPSyxhQUFlZ04sS0FDeEJoSyxFQUFHc2dCLE1BQVExZ0IsR0FBb0JJLEdBQUksR0FDbkNnSyxHQUFLZ0IsR0FDTGYsR0FBUyxPQUFVakssRUFBUSxNQUFJLFFBQVUrSyxFQUFVQyxJQUdqRGhMLEVBQUdNLFNBQVNsc0UsSUFDZDRyRSxFQUFHdVUsT0FBT3ZVLEVBQUdNLFNBQVNsc0UsTUFxRTVCbXNGLENBQVUvQixJQS9LVixTQUFxQkEsR0FJbkIsSUFBSWdDLEVBQVUsQ0FDZCxJQUFjLFdBQWMsT0FBT3hyRixLQUFLK25GLFFBQ3BDMEQsRUFBVyxDQUNmLElBQWUsV0FBYyxPQUFPenJGLEtBQUtrekUsU0FFdkNzWSxFQUFRbGxGLElBQU0sV0FDWmsyQyxHQUNFLDJFQUVBeDhDLE9BR0p5ckYsRUFBU25sRixJQUFNLFdBQ2JrMkMsR0FBSyxzQkFBdUJ4OEMsT0FHaEMrQixPQUFPQyxlQUFld25GLEVBQUlocEYsVUFBVyxRQUFTZ3JGLEdBQzlDenBGLE9BQU9DLGVBQWV3bkYsRUFBSWhwRixVQUFXLFNBQVVpckYsR0FFL0NqQyxFQUFJaHBGLFVBQVVrckYsS0FBT3BsRixHQUNyQmtqRixFQUFJaHBGLFVBQVVtckYsUUFBVTNiLEdBRXhCd1osRUFBSWhwRixVQUFVc29GLE9BQVMsU0FDckIxQyxFQUNBdndDLEVBQ0E5MEMsR0FFQSxJQUFJaXFFLEVBQUtockUsS0FDVCxHQUFJaWxFLEVBQWNwdkIsR0FDaEIsT0FBTzR5QyxHQUFjemQsRUFBSW9iLEVBQVN2d0MsRUFBSTkwQyxJQUV4Q0EsRUFBVUEsR0FBVyxJQUNiNmtGLE1BQU8sRUFDZixJQUFJRixFQUFVLElBQUlTLEdBQVFuYixFQUFJb2IsRUFBU3Z3QyxFQUFJOTBDLEdBQzNDLEdBQUlBLEVBQVE2cUYsVUFBVyxDQUNyQixJQUFJcFgsRUFBTyxtQ0FBdUNrUixFQUFrQixXQUFJLElBQ3hFbFosS0FDQW9JLEdBQXdCLytCLEVBQUltMUIsRUFBSSxDQUFDMGEsRUFBUWwvRSxPQUFRd2tFLEVBQUl3SixHQUNyRC9ILEtBRUYsT0FBTyxXQUNMaVosRUFBUTRCLGFBbUlkdUUsQ0FBV3JDLElBOXZDWCxTQUFzQkEsR0FDcEIsSUFBSXNDLEVBQVMsU0FDYnRDLEVBQUlocEYsVUFBVXloRixJQUFNLFNBQVUxNkQsRUFBT2d1QixHQUNuQyxJQUFJeTFCLEVBQUtockUsS0FDVCxHQUFJc3RCLE1BQU00cUIsUUFBUTN3QixHQUNoQixJQUFLLElBQUlrRCxFQUFJLEVBQUdxNEIsRUFBSXY3QixFQUFNeG5CLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQ3ZDdWdELEVBQUdpWCxJQUFJMTZELEVBQU1rRCxHQUFJOHFCLFFBR2xCeTFCLEVBQUdnZ0IsUUFBUXpqRSxLQUFXeWpELEVBQUdnZ0IsUUFBUXpqRSxHQUFTLEtBQUt0YSxLQUFLc29DLEdBR2pEdTJDLEVBQU83eUMsS0FBSzF4QixLQUNkeWpELEVBQUdnYSxlQUFnQixHQUd2QixPQUFPaGEsR0FHVHdlLEVBQUlocEYsVUFBVXVyRixNQUFRLFNBQVV4a0UsRUFBT2d1QixHQUNyQyxJQUFJeTFCLEVBQUtockUsS0FDVCxTQUFTczFDLElBQ1AwMUIsRUFBR3VaLEtBQUtoOUQsRUFBTyt0QixHQUNmQyxFQUFHcjFDLE1BQU04cUUsRUFBSWxyRSxXQUlmLE9BRkF3MUMsRUFBR0MsR0FBS0EsRUFDUnkxQixFQUFHaVgsSUFBSTE2RCxFQUFPK3RCLEdBQ1AwMUIsR0FHVHdlLEVBQUlocEYsVUFBVStqRixLQUFPLFNBQVVoOUQsRUFBT2d1QixHQUNwQyxJQUFJeTFCLEVBQUtockUsS0FFVCxJQUFLRixVQUFVQyxPQUViLE9BREFpckUsRUFBR2dnQixRQUFVanBGLE9BQU9pbEQsT0FBTyxNQUNwQmdrQixFQUdULEdBQUkxOUMsTUFBTTRxQixRQUFRM3dCLEdBQVEsQ0FDeEIsSUFBSyxJQUFJeWtFLEVBQU0sRUFBR2xwQyxFQUFJdjdCLEVBQU14bkIsT0FBUWlzRixFQUFNbHBDLEVBQUdrcEMsSUFDM0NoaEIsRUFBR3VaLEtBQUtoOUQsRUFBTXlrRSxHQUFNejJDLEdBRXRCLE9BQU95MUIsRUFHVCxJQVNJbjFCLEVBVEFvMkMsRUFBTWpoQixFQUFHZ2dCLFFBQVF6akUsR0FDckIsSUFBSzBrRSxFQUNILE9BQU9qaEIsRUFFVCxJQUFLejFCLEVBRUgsT0FEQXkxQixFQUFHZ2dCLFFBQVF6akUsR0FBUyxLQUNieWpELEVBS1QsSUFEQSxJQUFJdmdELEVBQUl3aEUsRUFBSWxzRixPQUNMMHFCLEtBRUwsSUFEQW9yQixFQUFLbzJDLEVBQUl4aEUsTUFDRThxQixHQUFNTSxFQUFHTixLQUFPQSxFQUFJLENBQzdCMDJDLEVBQUlua0QsT0FBT3JkLEVBQUcsR0FDZCxNQUdKLE9BQU91Z0QsR0FHVHdlLEVBQUlocEYsVUFBVXlrRixNQUFRLFNBQVUxOUQsR0FDOUIsSUFBSXlqRCxFQUFLaHJFLEtBRUhrc0YsRUFBaUIza0UsRUFBTTdCLGNBQ3ZCd21FLElBQW1CM2tFLEdBQVN5akQsRUFBR2dnQixRQUFRa0IsSUFDekN2aEIsR0FDRSxVQUFhdWhCLEVBQWlCLDZCQUM3QnRoQixHQUFvQkksR0FBTyx1Q0FBMEN6akQsRUFEdEUsaUtBSWdDMitDLEVBQVUzK0MsR0FBVSxpQkFBcUJBLEVBQVEsTUFJdkYsSUFBSTBrRSxFQUFNamhCLEVBQUdnZ0IsUUFBUXpqRSxHQUNyQixHQUFJMGtFLEVBQUssQ0FDUEEsRUFBTUEsRUFBSWxzRixPQUFTLEVBQUl3bUUsRUFBUTBsQixHQUFPQSxFQUd0QyxJQUZBLElBQUlyc0YsRUFBTzJtRSxFQUFRem1FLFVBQVcsR0FDMUIwMEUsRUFBTyxzQkFBeUJqdEQsRUFBUSxJQUNuQ2tELEVBQUksRUFBR3E0QixFQUFJbXBDLEVBQUlsc0YsT0FBUTBxQixFQUFJcTRCLEVBQUdyNEIsSUFDckNtcUQsR0FBd0JxWCxFQUFJeGhFLEdBQUl1Z0QsRUFBSXByRSxFQUFNb3JFLEVBQUl3SixHQUdsRCxPQUFPeEosR0FzcUNYbWhCLENBQVkzQyxJQTNuQ1osU0FBeUJBLEdBQ3ZCQSxFQUFJaHBGLFVBQVU0ckYsUUFBVSxTQUFVamUsRUFBTzBRLEdBQ3ZDLElBQUk3VCxFQUFLaHJFLEtBQ0xxc0YsRUFBU3JoQixFQUFHc2hCLElBQ1pDLEVBQVl2aEIsRUFBR2tWLE9BQ2ZzTSxFQUF3QjlILEdBQWtCMVosR0FDOUNBLEVBQUdrVixPQUFTL1IsRUFRVm5ELEVBQUdzaEIsSUFMQUMsRUFLTXZoQixFQUFHeWhCLFVBQVVGLEVBQVdwZSxHQUh4Qm5ELEVBQUd5aEIsVUFBVXpoQixFQUFHc2hCLElBQUtuZSxFQUFPMFEsR0FBVyxHQUtsRDJOLElBRUlILElBQ0ZBLEVBQU9LLFFBQVUsTUFFZjFoQixFQUFHc2hCLE1BQ0x0aEIsRUFBR3NoQixJQUFJSSxRQUFVMWhCLEdBR2ZBLEVBQUdpVixRQUFValYsRUFBR1UsU0FBV1YsRUFBR2lWLFNBQVdqVixFQUFHVSxRQUFRd1UsU0FDdERsVixFQUFHVSxRQUFRNGdCLElBQU10aEIsRUFBR3NoQixNQU14QjlDLEVBQUlocEYsVUFBVWtnRixhQUFlLFdBQ2xCMWdGLEtBQ0ZnbUYsVUFERWhtRixLQUVKZ21GLFNBQVNyakIsVUFJaEI2bUIsRUFBSWhwRixVQUFVMGdGLFNBQVcsV0FDdkIsSUFBSWxXLEVBQUtockUsS0FDVCxJQUFJZ3JFLEVBQUd1YyxrQkFBUCxDQUdBMUcsR0FBUzdWLEVBQUksaUJBQ2JBLEVBQUd1YyxtQkFBb0IsRUFFdkIsSUFBSTUwQixFQUFTcVksRUFBR1UsU0FDWi9ZLEdBQVdBLEVBQU80MEIsbUJBQXNCdmMsRUFBR00sU0FBUzRYLFVBQ3RELzdFLEVBQU93ckQsRUFBT295QixVQUFXL1osR0FHdkJBLEVBQUdnYixVQUNMaGIsRUFBR2diLFNBQVNzQixXQUdkLElBREEsSUFBSTc4RCxFQUFJdWdELEVBQUdzYixVQUFVdm1GLE9BQ2QwcUIsS0FDTHVnRCxFQUFHc2IsVUFBVTc3RCxHQUFHNjhELFdBSWR0YyxFQUFHK2MsTUFBTXJaLFFBQ1gxRCxFQUFHK2MsTUFBTXJaLE9BQU9RLFVBR2xCbEUsRUFBRzhULGNBQWUsRUFFbEI5VCxFQUFHeWhCLFVBQVV6aEIsRUFBR2tWLE9BQVEsTUFFeEJXLEdBQVM3VixFQUFJLGFBRWJBLEVBQUd1WixPQUVDdlosRUFBR3NoQixNQUNMdGhCLEVBQUdzaEIsSUFBSUksUUFBVSxNQUdmMWhCLEVBQUdpVixTQUNMalYsRUFBR2lWLE9BQU90dEIsT0FBUyxRQThpQ3pCZzZCLENBQWVuRCxJQXRoRGYsU0FBc0JBLEdBRXBCdE0sR0FBcUJzTSxFQUFJaHBGLFdBRXpCZ3BGLEVBQUlocEYsVUFBVW9zRixVQUFZLFNBQVVyM0MsR0FDbEMsT0FBT3dULEdBQVN4VCxFQUFJdjFDLE9BR3RCd3BGLEVBQUlocEYsVUFBVXFzRixRQUFVLFdBQ3RCLElBaUJJMWUsRUFqQkFuRCxFQUFLaHJFLEtBQ0w4c0YsRUFBTTloQixFQUFHTSxTQUNUc0wsRUFBU2tXLEVBQUlsVyxPQUNidUksRUFBZTJOLEVBQUkzTixhQUVuQkEsSUFDRm5VLEVBQUc0UCxhQUFlbkIsR0FDaEIwRixFQUFheGxDLEtBQUsya0MsWUFDbEJ0VCxFQUFHNlAsT0FDSDdQLEVBQUc0UCxlQU1QNVAsRUFBR2lWLE9BQVNkLEVBR1osSUFJRXVDLEdBQTJCMVcsRUFDM0JtRCxFQUFReUksRUFBT3h5RSxLQUFLNG1FLEVBQUc4TCxhQUFjOUwsRUFBRzhQLGdCQUN4QyxNQUFPdjlELEdBS1AsR0FKQWczRCxHQUFZaDNELEVBQUd5dEQsRUFBSSxVQUlmQSxFQUFHTSxTQUFTeWhCLFlBQ2QsSUFDRTVlLEVBQVFuRCxFQUFHTSxTQUFTeWhCLFlBQVkzb0YsS0FBSzRtRSxFQUFHOEwsYUFBYzlMLEVBQUc4UCxlQUFnQnY5RCxHQUN6RSxNQUFPQSxHQUNQZzNELEdBQVloM0QsRUFBR3l0RCxFQUFJLGVBQ25CbUQsRUFBUW5ELEVBQUdrVixZQUdiL1IsRUFBUW5ELEVBQUdrVixPQUViLFFBQ0F3QixHQUEyQixLQW1CN0IsT0FoQklwMEQsTUFBTTRxQixRQUFRaTJCLElBQTJCLElBQWpCQSxFQUFNcHVFLFNBQ2hDb3VFLEVBQVFBLEVBQU0sSUFHVkEsYUFBaUJ6QixLQUNqQnAvQyxNQUFNNHFCLFFBQVFpMkIsSUFDaEIzeEIsR0FDRSx1R0FFQXd1QixHQUdKbUQsRUFBUUosTUFHVkksRUFBTXhiLE9BQVN3c0IsRUFDUmhSLEdBbTlDWDZlLENBQVl4RCxJQWdOWixJQUFJeUQsR0FBZSxDQUFDaG5ELE9BQVFrVyxPQUFRN3VCLE9BNkdoQzQvRCxHQUFvQixDQUN0QkMsVUE1R2MsQ0FDZG4wQyxLQUFNLGFBQ05rcUMsVUFBVSxFQUVWdnNELE1BQU8sQ0FDTHkyRCxRQUFTSCxHQUNUSSxRQUFTSixHQUNUL2hGLElBQUssQ0FBQys2QixPQUFRc1gsU0FHaEI0ekIsUUFBUyxDQUNQbWMsV0FBWSxXQUNWLElBQUlSLEVBQU05c0YsS0FDTjA1RCxFQUFRb3pCLEVBQUlwekIsTUFDWjE1QyxFQUFPOHNFLEVBQUk5c0UsS0FDWHV0RSxFQUFlVCxFQUFJUyxhQUNuQkMsRUFBYVYsRUFBSVUsV0FDckIsR0FBSUQsRUFBYyxDQUNoQixJQUFJNWdCLEVBQU00Z0IsRUFBYTVnQixJQUNuQlMsRUFBb0JtZ0IsRUFBYW5nQixrQkFDakNOLEVBQW1CeWdCLEVBQWF6Z0IsaUJBQ3BDcFQsRUFBTTh6QixHQUFjLENBQ2xCeDBDLEtBQU1veEMsR0FBaUJ0ZCxHQUN2QkgsSUFBS0EsRUFDTFMsa0JBQW1CQSxHQUVyQnB0RCxFQUFLL1MsS0FBS3VnRixHQUVOeHRGLEtBQUtrTCxLQUFPOFUsRUFBS2pnQixPQUFTbThDLFNBQVNsOEMsS0FBS2tMLE1BQzFDcy9FLEdBQWdCOXdCLEVBQU8xNUMsRUFBSyxHQUFJQSxFQUFNaGdCLEtBQUtrZ0YsUUFFN0NsZ0YsS0FBS3V0RixhQUFlLFFBSzFCRSxRQUFTLFdBQ1B6dEYsS0FBSzA1RCxNQUFRMzNELE9BQU9pbEQsT0FBTyxNQUMzQmhuRCxLQUFLZ2dCLEtBQU8sSUFHZDB0RSxVQUFXLFdBQ1QsSUFBSyxJQUFJdGhGLEtBQU9wTSxLQUFLMDVELE1BQ25COHdCLEdBQWdCeHFGLEtBQUswNUQsTUFBT3R0RCxFQUFLcE0sS0FBS2dnQixPQUkxQzJ0RSxRQUFTLFdBQ1AsSUFBSTNQLEVBQVNoK0UsS0FFYkEsS0FBS3N0RixhQUNMdHRGLEtBQUs4b0YsT0FBTyxXQUFXLFNBQVVockMsR0FDL0J1c0MsR0FBV3JNLEdBQVEsU0FBVWhsQyxHQUFRLE9BQU9qakMsR0FBUStuQyxFQUFLOUUsU0FFM0RoNUMsS0FBSzhvRixPQUFPLFdBQVcsU0FBVWhyQyxHQUMvQnVzQyxHQUFXck0sR0FBUSxTQUFVaGxDLEdBQVEsT0FBUWpqQyxHQUFRK25DLEVBQUs5RSxVQUk5RDQwQyxRQUFTLFdBQ1A1dEYsS0FBS3N0RixjQUdQMVcsT0FBUSxXQUNOLElBQUkwQyxFQUFPdDVFLEtBQUs2NkUsT0FBTzFnQyxRQUNuQmcwQixFQUFRa1csR0FBdUIvSyxHQUMvQnhNLEVBQW1CcUIsR0FBU0EsRUFBTXJCLGlCQUN0QyxHQUFJQSxFQUFrQixDQUVwQixJQUFJOXpCLEVBQU9veEMsR0FBaUJ0ZCxHQUV4QnNnQixFQURNcHRGLEtBQ1FvdEYsUUFDZEMsRUFGTXJ0RixLQUVRcXRGLFFBQ2xCLEdBRUdELEtBQWFwMEMsSUFBU2pqQyxHQUFRcTNFLEVBQVNwMEMsS0FFdkNxMEMsR0FBV3IwQyxHQUFRampDLEdBQVFzM0UsRUFBU3IwQyxHQUVyQyxPQUFPbTFCLEVBR1QsSUFDSXpVLEVBRFExNUQsS0FDTTA1RCxNQUNkMTVDLEVBRlFoZ0IsS0FFS2dnQixLQUNiNVQsRUFBbUIsTUFBYitoRSxFQUFNL2hFLElBR1owZ0UsRUFBaUJ6QyxLQUFLZSxLQUFPMEIsRUFBaUJILElBQU8sS0FBUUcsRUFBb0IsSUFBSyxJQUN0RnFCLEVBQU0vaEUsSUFDTnN0RCxFQUFNdHRELElBQ1IraEUsRUFBTWYsa0JBQW9CMVQsRUFBTXR0RCxHQUFLZ2hFLGtCQUVyQ2ptRSxFQUFPNlksRUFBTTVULEdBQ2I0VCxFQUFLL1MsS0FBS2IsS0FHVnBNLEtBQUt1dEYsYUFBZXBmLEVBQ3BCbnVFLEtBQUt3dEYsV0FBYXBoRixHQUdwQitoRSxFQUFNeDBCLEtBQUtvbEMsV0FBWSxFQUV6QixPQUFPNVEsR0FBVW1MLEdBQVFBLEVBQUssT0FVbEMsU0FBd0JrUSxHQUV0QixJQUFJcUUsRUFBWSxDQUNoQixJQUFnQixXQUFjLE9BQU9sbUIsR0FFbkMsSUFBZ0IsV0FDZG5yQixHQUNFLDBFQUlOejZDLE9BQU9DLGVBQWV3bkYsRUFBSyxTQUFVcUUsR0FLckNyRSxFQUFJc0UsS0FBTyxDQUNUdHhDLEtBQU1BLEdBQ053QixPQUFRQSxFQUNSd3pCLGFBQWNBLEdBQ2R1YyxlQUFnQnZlLElBR2xCZ2EsRUFBSWxqRixJQUFNQSxHQUNWa2pGLEVBQUk5OEUsT0FBU3NqRSxHQUNid1osRUFBSXpnQyxTQUFXQSxHQUdmeWdDLEVBQUl3RSxXQUFhLFNBQVUvK0QsR0FFekIsT0FEQW9XLEdBQVFwVyxHQUNEQSxHQUdUdTZELEVBQUl6b0YsUUFBVWdCLE9BQU9pbEQsT0FBTyxNQUM1QnlnQixFQUFZcjlELFNBQVEsU0FBVWdWLEdBQzVCb3FFLEVBQUl6b0YsUUFBUXFlLEVBQU8sS0FBT3JkLE9BQU9pbEQsT0FBTyxTQUsxQ3dpQyxFQUFJem9GLFFBQVFteEUsTUFBUXNYLEVBRXBCeHJDLEVBQU93ckMsRUFBSXpvRixRQUFRMHdFLFdBQVl5YixJQXpXakMsU0FBa0IxRCxHQUNoQkEsRUFBSVcsSUFBTSxTQUFVOEQsR0FDbEIsSUFBSUMsRUFBb0JsdUYsS0FBS211RixvQkFBc0JudUYsS0FBS211RixrQkFBb0IsSUFDNUUsR0FBSUQsRUFBaUIvaUYsUUFBUThpRixJQUFXLEVBQ3RDLE9BQU9qdUYsS0FJVCxJQUFJSixFQUFPMm1FLEVBQVF6bUUsVUFBVyxHQVE5QixPQVBBRixFQUFLKzlDLFFBQVEzOUMsTUFDaUIsbUJBQW5CaXVGLEVBQU9HLFFBQ2hCSCxFQUFPRyxRQUFRbHVGLE1BQU0rdEYsRUFBUXJ1RixHQUNGLG1CQUFYcXVGLEdBQ2hCQSxFQUFPL3RGLE1BQU0sS0FBTU4sR0FFckJzdUYsRUFBaUJqaEYsS0FBS2doRixHQUNmanVGLE1BMlZUcXVGLENBQVE3RSxHQXJWVixTQUFzQkEsR0FDcEJBLEVBQUluMEMsTUFBUSxTQUFVQSxHQUVwQixPQURBcjFDLEtBQUtlLFFBQVV5d0UsR0FBYXh4RSxLQUFLZSxRQUFTczBDLEdBQ25DcjFDLE1BbVZUc3VGLENBQVk5RSxHQUNaRSxHQUFXRixHQWxQYixTQUE2QkEsR0FJM0IvaEIsRUFBWXI5RCxTQUFRLFNBQVVnVixHQUM1Qm9xRSxFQUFJcHFFLEdBQVEsU0FDVm00QixFQUNBZzNDLEdBRUEsT0FBS0EsR0FJVSxjQUFUbnZFLEdBQ0ZteUQsR0FBc0JoNkIsR0FFWCxjQUFUbjRCLEdBQXdCNmxELEVBQWNzcEIsS0FDeENBLEVBQVd2MUMsS0FBT3UxQyxFQUFXdjFDLE1BQVF6QixFQUNyQ2czQyxFQUFhdnVGLEtBQUtlLFFBQVFteEUsTUFBTWwwQixPQUFPdXdDLElBRTVCLGNBQVRudkUsR0FBOEMsbUJBQWZtdkUsSUFDakNBLEVBQWEsQ0FBRWw2RSxLQUFNazZFLEVBQVk1ckIsT0FBUTRyQixJQUUzQ3Z1RixLQUFLZSxRQUFRcWUsRUFBTyxLQUFLbTRCLEdBQU1nM0MsRUFDeEJBLEdBZEF2dUYsS0FBS2UsUUFBUXFlLEVBQU8sS0FBS200QixPQXlPdENpM0MsQ0FBbUJoRixJQUdyQmlGLENBQWNqRixJQUVkem5GLE9BQU9DLGVBQWV3bkYsR0FBSWhwRixVQUFXLFlBQWEsQ0FDaER5QixJQUFLK25FLEtBR1Bqb0UsT0FBT0MsZUFBZXduRixHQUFJaHBGLFVBQVcsY0FBZSxDQUNsRHlCLElBQUssV0FFSCxPQUFPakMsS0FBS2lnRixRQUFVamdGLEtBQUtpZ0YsT0FBT3lPLGNBS3RDM3NGLE9BQU9DLGVBQWV3bkYsR0FBSywwQkFBMkIsQ0FDcERoakYsTUFBT3MzRSxLQUdUMEwsR0FBSW1GLFFBQVUsU0FNZCxJQUFJcm1CLEdBQWlCOUMsRUFBUSxlQUd6Qm9wQixHQUFjcHBCLEVBQVEseUNBQ3RCa0QsR0FBYyxTQUFVaUUsRUFBS3Z0RCxFQUFNaFksR0FDckMsTUFDWSxVQUFUQSxHQUFvQnduRixHQUFZamlCLElBQWtCLFdBQVR2dEQsR0FDaEMsYUFBVGhZLEdBQStCLFdBQVJ1bEUsR0FDZCxZQUFUdmxFLEdBQThCLFVBQVJ1bEUsR0FDYixVQUFUdmxFLEdBQTRCLFVBQVJ1bEUsR0FJckJraUIsR0FBbUJycEIsRUFBUSx3Q0FFM0JzcEIsR0FBOEJ0cEIsRUFBUSxzQ0FXdEN1cEIsR0FBZ0J2cEIsRUFDbEIsOFhBUUV3cEIsR0FBVSwrQkFFVkMsR0FBVSxTQUFVajJDLEdBQ3RCLE1BQTBCLE1BQW5CQSxFQUFLbVMsT0FBTyxJQUFtQyxVQUFyQm5TLEVBQUs5dUMsTUFBTSxFQUFHLElBRzdDZ2xGLEdBQWUsU0FBVWwyQyxHQUMzQixPQUFPaTJDLEdBQVFqMkMsR0FBUUEsRUFBSzl1QyxNQUFNLEVBQUc4dUMsRUFBS2o1QyxRQUFVLElBR2xEb3ZGLEdBQW1CLFNBQVVyeEMsR0FDL0IsT0FBYyxNQUFQQSxJQUF1QixJQUFSQSxHQUt4QixTQUFTc3hDLEdBQWtCamhCLEdBSXpCLElBSEEsSUFBSXgwQixFQUFPdzBCLEVBQU14MEIsS0FDYnp5QyxFQUFhaW5FLEVBQ2JraEIsRUFBWWxoQixFQUNUeEosRUFBTTBxQixFQUFVamlCLHFCQUNyQmlpQixFQUFZQSxFQUFVamlCLGtCQUFrQjhTLFNBQ3ZCbVAsRUFBVTExQyxPQUN6QkEsRUFBTzIxQyxHQUFlRCxFQUFVMTFDLEtBQU1BLElBRzFDLEtBQU9nckIsRUFBTXo5RCxFQUFhQSxFQUFXeXJELFNBQy9CenJELEdBQWNBLEVBQVd5eUMsT0FDM0JBLEVBQU8yMUMsR0FBZTMxQyxFQUFNenlDLEVBQVd5eUMsT0FHM0MsT0FhQTQxQyxFQWJtQjUxQyxFQUFLNDFDLFlBY3hCQyxFQWRxQzcxQyxFQUFLb3FDLE1BZ0J0Q3BmLEVBQU00cUIsSUFBZ0I1cUIsRUFBTTZxQixHQUN2Qi8zQyxHQUFPODNDLEVBQWFFLEdBQWVELElBR3JDLEdBUlQsSUFDRUQsRUFDQUMsRUFYRixTQUFTRixHQUFnQjE4QixFQUFPRCxHQUM5QixNQUFPLENBQ0w0OEIsWUFBYTkzQyxHQUFPbWIsRUFBTTI4QixZQUFhNThCLEVBQU80OEIsYUFDOUN4TCxNQUFPcGYsRUFBTS9SLEVBQU1teEIsT0FDZixDQUFDbnhCLEVBQU1teEIsTUFBT3B4QixFQUFPb3hCLE9BQ3JCcHhCLEVBQU9veEIsT0FlZixTQUFTdHNDLEdBQVE0dUIsRUFBR3ZOLEdBQ2xCLE9BQU91TixFQUFJdk4sRUFBS3VOLEVBQUksSUFBTXZOLEVBQUt1TixFQUFLdk4sR0FBSyxHQUczQyxTQUFTMjJCLEdBQWdCanBGLEdBQ3ZCLE9BQUk4bUIsTUFBTTRxQixRQUFRMXhDLEdBYXBCLFNBQXlCQSxHQUd2QixJQUZBLElBQ0lrcEYsRUFEQWhwQixFQUFNLEdBRURqOEMsRUFBSSxFQUFHcTRCLEVBQUl0OEMsRUFBTXpHLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQ25DazZDLEVBQU0rcUIsRUFBY0QsR0FBZWpwRixFQUFNaWtCLE1BQXdCLEtBQWhCaWxFLElBQy9DaHBCLElBQU9BLEdBQU8sS0FDbEJBLEdBQU9ncEIsR0FHWCxPQUFPaHBCLEVBckJFaXBCLENBQWVucEYsR0FFcEJzK0QsRUFBU3QrRCxHQXNCZixTQUEwQkEsR0FDeEIsSUFBSWtnRSxFQUFNLEdBQ1YsSUFBSyxJQUFJdDZELEtBQU81RixFQUNWQSxFQUFNNEYsS0FDSnM2RCxJQUFPQSxHQUFPLEtBQ2xCQSxHQUFPdDZELEdBR1gsT0FBT3M2RCxFQTdCRWtwQixDQUFnQnBwRixHQUVKLGlCQUFWQSxFQUNGQSxFQUdGLEdBNEJULElBQUlxcEYsR0FBZSxDQUNqQkMsSUFBSyw2QkFDTEMsS0FBTSxzQ0FHSkMsR0FBWXhxQixFQUNkLHNuQkFlRXlxQixHQUFRenFCLEVBQ1Ysa05BR0EsR0FLRTZDLEdBQWdCLFNBQVVzRSxHQUM1QixPQUFPcWpCLEdBQVVyakIsSUFBUXNqQixHQUFNdGpCLElBR2pDLFNBQVNuRSxHQUFpQm1FLEdBQ3hCLE9BQUlzakIsR0FBTXRqQixHQUNELE1BSUcsU0FBUkEsRUFDSyxZQURULEVBS0YsSUFBSXVqQixHQUFzQm51RixPQUFPaWxELE9BQU8sTUEwQnhDLElBQUltcEMsR0FBa0IzcUIsRUFBUSw2Q0FPOUIsU0FBUzdsQixHQUFPdmdELEdBQ2QsTUFBa0IsaUJBQVBBLEVBQ01ILFNBQVNpSyxjQUFjOUosS0FFcENvOUMsR0FDRSx3QkFBMEJwOUMsR0FFckJILFNBQVNDLGNBQWMsUUFJekJFLEVBOERYLElBQUlneEYsR0FBdUJydUYsT0FBT3V0RCxPQUFPLENBQ3ZDcHdELGNBekRGLFNBQTBCdW1CLEVBQVMwb0QsR0FDakMsSUFBSXZCLEVBQU0zdEUsU0FBU0MsY0FBY3VtQixHQUNqQyxNQUFnQixXQUFaQSxHQUlBMG9ELEVBQU14MEIsTUFBUXcwQixFQUFNeDBCLEtBQUswL0IsWUFBdUNsNUUsSUFBOUJndUUsRUFBTXgwQixLQUFLMC9CLE1BQU1nWCxVQUNyRHpqQixFQUFJdmxFLGFBQWEsV0FBWSxZQUp0QnVsRSxHQXVEVDBqQixnQkE5Q0YsU0FBMEI3MUMsRUFBV2gxQixHQUNuQyxPQUFPeG1CLFNBQVNxeEYsZ0JBQWdCVCxHQUFhcDFDLEdBQVloMUIsSUE4Q3pEcytDLGVBM0NGLFNBQXlCLzhDLEdBQ3ZCLE9BQU8vbkIsU0FBUzhrRSxlQUFlLzhDLElBMkMvQnVwRSxjQXhDRixTQUF3QnZwRSxHQUN0QixPQUFPL25CLFNBQVNzeEYsY0FBY3ZwRSxJQXdDOUJuYyxhQXJDRixTQUF1QjNELEVBQVlzcEYsRUFBU0MsR0FDMUN2cEYsRUFBVzJELGFBQWEybEYsRUFBU0MsSUFxQ2pDbG1GLFlBbENGLFNBQXNCeWpFLEVBQU1wYixHQUMxQm9iLEVBQUt6akUsWUFBWXFvRCxJQWtDakI3bkQsWUEvQkYsU0FBc0JpakUsRUFBTXBiLEdBQzFCb2IsRUFBS2pqRSxZQUFZNm5ELElBK0JqQjFyRCxXQTVCRixTQUFxQjhtRSxHQUNuQixPQUFPQSxFQUFLOW1FLFlBNEJad3BGLFlBekJGLFNBQXNCMWlCLEdBQ3BCLE9BQU9BLEVBQUswaUIsYUF5QlpqckUsUUF0QkYsU0FBa0J1b0QsR0FDaEIsT0FBT0EsRUFBS3ZvRCxTQXNCWmtyRSxlQW5CRixTQUF5QjNpQixFQUFNaG5ELEdBQzdCZ25ELEVBQUs5OUMsWUFBY2xKLEdBbUJuQjRwRSxjQWhCRixTQUF3QjVpQixFQUFNNmlCLEdBQzVCN2lCLEVBQUszbUUsYUFBYXdwRixFQUFTLE9Bb0J6Qi9ELEdBQU0sQ0FDUjlsQyxPQUFRLFNBQWlCbDZDLEVBQUdxaEUsR0FDMUIyaUIsR0FBWTNpQixJQUVkeEwsT0FBUSxTQUFpQjZjLEVBQVVyUixHQUM3QnFSLEVBQVM3bEMsS0FBS216QyxNQUFRM2UsRUFBTXgwQixLQUFLbXpDLE1BQ25DZ0UsR0FBWXRSLEdBQVUsR0FDdEJzUixHQUFZM2lCLEtBR2hCeHRFLFFBQVMsU0FBa0J3dEUsR0FDekIyaUIsR0FBWTNpQixHQUFPLEtBSXZCLFNBQVMyaUIsR0FBYTNpQixFQUFPNGlCLEdBQzNCLElBQUkza0YsRUFBTStoRSxFQUFNeDBCLEtBQUttekMsSUFDckIsR0FBS25vQixFQUFNdjRELEdBQVgsQ0FFQSxJQUFJNCtELEVBQUttRCxFQUFNdEIsUUFDWGlnQixFQUFNM2UsRUFBTWYsbUJBQXFCZSxFQUFNdkIsSUFDdkNva0IsRUFBT2htQixFQUFHOGYsTUFDVmlHLEVBQ0V6akUsTUFBTTRxQixRQUFRODRDLEVBQUs1a0YsSUFDckJqRixFQUFPNnBGLEVBQUs1a0YsR0FBTTBnRixHQUNUa0UsRUFBSzVrRixLQUFTMGdGLElBQ3ZCa0UsRUFBSzVrRixRQUFPak0sR0FHVmd1RSxFQUFNeDBCLEtBQUtzM0MsU0FDUjNqRSxNQUFNNHFCLFFBQVE4NEMsRUFBSzVrRixJQUViNGtGLEVBQUs1a0YsR0FBS2pCLFFBQVEyaEYsR0FBTyxHQUVsQ2tFLEVBQUs1a0YsR0FBS2EsS0FBSzYvRSxHQUhma0UsRUFBSzVrRixHQUFPLENBQUMwZ0YsR0FNZmtFLEVBQUs1a0YsR0FBTzBnRixHQWlCbEIsSUFBSW9FLEdBQVksSUFBSXhrQixHQUFNLEdBQUksR0FBSSxJQUU5QmlFLEdBQVEsQ0FBQyxTQUFVLFdBQVksU0FBVSxTQUFVLFdBRXZELFNBQVN3Z0IsR0FBVzlxQixFQUFHdk4sR0FDckIsT0FDRXVOLEVBQUVqNkQsTUFBUTBzRCxFQUFFMXNELEtBQ1ppNkQsRUFBRTBHLGVBQWlCalUsRUFBRWlVLGVBRWpCMUcsRUFBRXNHLE1BQVE3VCxFQUFFNlQsS0FDWnRHLEVBQUVtSCxZQUFjMVUsRUFBRTBVLFdBQ2xCN0ksRUFBTTBCLEVBQUUxc0IsUUFBVWdyQixFQUFNN0wsRUFBRW5mLE9BVWxDLFNBQXdCMHNCLEVBQUd2TixHQUN6QixHQUFjLFVBQVZ1TixFQUFFc0csSUFBbUIsT0FBTyxFQUNoQyxJQUFJbGlELEVBQ0EybUUsRUFBUXpzQixFQUFNbDZDLEVBQUk0N0MsRUFBRTFzQixPQUFTZ3JCLEVBQU1sNkMsRUFBSUEsRUFBRTR1RCxRQUFVNXVELEVBQUVyTCxLQUNyRGl5RSxFQUFRMXNCLEVBQU1sNkMsRUFBSXF1QyxFQUFFbmYsT0FBU2dyQixFQUFNbDZDLEVBQUlBLEVBQUU0dUQsUUFBVTV1RCxFQUFFckwsS0FDekQsT0FBT2d5RSxJQUFVQyxHQUFTbEIsR0FBZ0JpQixJQUFVakIsR0FBZ0JrQixHQWQ5REMsQ0FBY2pyQixFQUFHdk4sSUFFakI4TCxFQUFPeUIsRUFBRXVILHFCQUNUbEosRUFBUTVMLEVBQUVpVSxhQUFhbmtFLFFBYy9CLFNBQVMyb0YsR0FBbUJ6bUYsRUFBVTBtRixFQUFVbjdCLEdBQzlDLElBQUk1ckMsRUFBR3JlLEVBQ0g4M0IsRUFBTSxHQUNWLElBQUt6WixFQUFJK21FLEVBQVUvbUUsR0FBSzRyQyxJQUFVNXJDLEVBRTVCazZDLEVBREp2NEQsRUFBTXRCLEVBQVMyZixHQUFHcmUsT0FDQTgzQixFQUFJOTNCLEdBQU9xZSxHQUUvQixPQUFPeVosRUFtdEJULElBQUk2dEMsR0FBYSxDQUNmL3FCLE9BQVF5cUMsR0FDUjl1QixPQUFROHVCLEdBQ1I5d0YsUUFBUyxTQUEyQnd0RSxHQUNsQ3NqQixHQUFpQnRqQixFQUFPK2lCLE1BSTVCLFNBQVNPLEdBQWtCalMsRUFBVXJSLElBQy9CcVIsRUFBUzdsQyxLQUFLbzRCLFlBQWM1RCxFQUFNeDBCLEtBQUtvNEIsYUFLN0MsU0FBa0J5TixFQUFVclIsR0FDMUIsSUFRSS9oRSxFQUFLc2xGLEVBQVFDLEVBUmJDLEVBQVdwUyxJQUFhMFIsR0FDeEJXLEVBQVkxakIsSUFBVStpQixHQUN0QlksRUFBVUMsR0FBc0J2UyxFQUFTN2xDLEtBQUtvNEIsV0FBWXlOLEVBQVMzUyxTQUNuRW1sQixFQUFVRCxHQUFzQjVqQixFQUFNeDBCLEtBQUtvNEIsV0FBWTVELEVBQU10QixTQUU3RG9sQixFQUFpQixHQUNqQkMsRUFBb0IsR0FHeEIsSUFBSzlsRixLQUFPNGxGLEVBQ1ZOLEVBQVNJLEVBQVExbEYsR0FDakJ1bEYsRUFBTUssRUFBUTVsRixHQUNUc2xGLEdBUUhDLEVBQUl2SyxTQUFXc0ssRUFBT2xyRixNQUN0Qm1yRixFQUFJUSxPQUFTVCxFQUFPVSxJQUNwQkMsR0FBV1YsRUFBSyxTQUFVeGpCLEVBQU9xUixHQUM3Qm1TLEVBQUk3b0IsS0FBTzZvQixFQUFJN29CLElBQUl3cEIsa0JBQ3JCSixFQUFrQmpsRixLQUFLMGtGLEtBVnpCVSxHQUFXVixFQUFLLE9BQVF4akIsRUFBT3FSLEdBQzNCbVMsRUFBSTdvQixLQUFPNm9CLEVBQUk3b0IsSUFBSTBGLFVBQ3JCeWpCLEVBQWVobEYsS0FBSzBrRixJQWExQixHQUFJTSxFQUFlbHlGLE9BQVEsQ0FDekIsSUFBSXd5RixFQUFhLFdBQ2YsSUFBSyxJQUFJOW5FLEVBQUksRUFBR0EsRUFBSXduRSxFQUFlbHlGLE9BQVEwcUIsSUFDekM0bkUsR0FBV0osRUFBZXhuRSxHQUFJLFdBQVkwakQsRUFBT3FSLElBR2pEb1MsRUFDRjFaLEdBQWUvSixFQUFPLFNBQVVva0IsR0FFaENBLElBWUosR0FSSUwsRUFBa0JueUYsUUFDcEJtNEUsR0FBZS9KLEVBQU8sYUFBYSxXQUNqQyxJQUFLLElBQUkxakQsRUFBSSxFQUFHQSxFQUFJeW5FLEVBQWtCbnlGLE9BQVEwcUIsSUFDNUM0bkUsR0FBV0gsRUFBa0J6bkUsR0FBSSxtQkFBb0IwakQsRUFBT3FSLE9BSzdEb1MsRUFDSCxJQUFLeGxGLEtBQU8wbEYsRUFDTEUsRUFBUTVsRixJQUVYaW1GLEdBQVdQLEVBQVExbEYsR0FBTSxTQUFVb3pFLEVBQVVBLEVBQVVxUyxHQTNEM0R6RixDQUFRNU0sRUFBVXJSLEdBaUV0QixJQUFJcWtCLEdBQWlCendGLE9BQU9pbEQsT0FBTyxNQUVuQyxTQUFTK3FDLEdBQ1BqZ0IsRUFDQTlHLEdBRUEsSUFLSXZnRCxFQUFHa25FLEVBTEhqckIsRUFBTTNrRSxPQUFPaWxELE9BQU8sTUFDeEIsSUFBSzhxQixFQUVILE9BQU9wTCxFQUdULElBQUtqOEMsRUFBSSxFQUFHQSxFQUFJcW5ELEVBQUsveEUsT0FBUTBxQixLQUMzQmtuRSxFQUFNN2YsRUFBS3JuRCxJQUNGZ29FLFlBRVBkLEVBQUljLFVBQVlELElBRWxCOXJCLEVBQUlnc0IsR0FBY2YsSUFBUUEsRUFDMUJBLEVBQUk3b0IsSUFBTXlKLEdBQWF2SCxFQUFHTSxTQUFVLGFBQWNxbUIsRUFBSTM0QyxNQUFNLEdBRzlELE9BQU8wdEIsRUFHVCxTQUFTZ3NCLEdBQWVmLEdBQ3RCLE9BQU9BLEVBQUlnQixTQUFhaEIsRUFBUSxLQUFJLElBQU81dkYsT0FBT2llLEtBQUsyeEUsRUFBSWMsV0FBYSxJQUFJNWpGLEtBQUssS0FHbkYsU0FBU3dqRixHQUFZVixFQUFLMWdCLEVBQU05QyxFQUFPcVIsRUFBVXFTLEdBQy9DLElBQUl0OEMsRUFBS284QyxFQUFJN29CLEtBQU82b0IsRUFBSTdvQixJQUFJbUksR0FDNUIsR0FBSTE3QixFQUNGLElBQ0VBLEVBQUc0NEIsRUFBTXZCLElBQUsra0IsRUFBS3hqQixFQUFPcVIsRUFBVXFTLEdBQ3BDLE1BQU90MEUsR0FDUGczRCxHQUFZaDNELEVBQUc0d0QsRUFBTXRCLFFBQVUsYUFBZ0I4a0IsRUFBUSxLQUFJLElBQU0xZ0IsRUFBTyxVQUs5RSxJQUFJMmhCLEdBQWMsQ0FDaEI5RixHQUNBL2EsSUFLRixTQUFTOGdCLEdBQWFyVCxFQUFVclIsR0FDOUIsSUFBSXAwRCxFQUFPbzBELEVBQU1yQixpQkFDakIsS0FBSW5JLEVBQU01cUQsS0FBNEMsSUFBbkNBLEVBQUtzd0QsS0FBS3RwRSxRQUFRK3hGLGNBR2pDcHVCLEVBQVE4YSxFQUFTN2xDLEtBQUswL0IsUUFBVTNVLEVBQVF5SixFQUFNeDBCLEtBQUswL0IsUUFBdkQsQ0FHQSxJQUFJanRFLEVBQUtxb0UsRUFDTDdILEVBQU11QixFQUFNdkIsSUFDWm1tQixFQUFXdlQsRUFBUzdsQyxLQUFLMC9CLE9BQVMsR0FDbENBLEVBQVFsTCxFQUFNeDBCLEtBQUswL0IsT0FBUyxHQU1oQyxJQUFLanRFLEtBSkR1NEQsRUFBTTBVLEVBQU0zSyxVQUNkMkssRUFBUWxMLEVBQU14MEIsS0FBSzAvQixNQUFRcjdCLEVBQU8sR0FBSXE3QixJQUc1QkEsRUFDVjVFLEVBQU00RSxFQUFNanRFLEdBQ04ybUYsRUFBUzNtRixLQUNIcW9FLEdBQ1Z0ekMsR0FBUXlyQyxFQUFLeGdFLEVBQUtxb0UsRUFBS3RHLEVBQU14MEIsS0FBS2txQyxLQVN0QyxJQUFLejNFLEtBSEFvOUQsR0FBUUUsSUFBVzJQLEVBQU03eUUsUUFBVXVzRixFQUFTdnNGLE9BQy9DMjZCLEdBQVF5ckMsRUFBSyxRQUFTeU0sRUFBTTd5RSxPQUVsQnVzRixFQUNOcnVCLEVBQVEyVSxFQUFNanRFLE1BQ1o2aUYsR0FBUTdpRixHQUNWd2dFLEVBQUlvbUIsa0JBQWtCaEUsR0FBU0UsR0FBYTlpRixJQUNsQ3lpRixHQUFpQnppRixJQUMzQndnRSxFQUFJbG1FLGdCQUFnQjBGLEtBTTVCLFNBQVMrMEIsR0FBUy9oQyxFQUFJZ04sRUFBSzVGLEVBQU95c0YsR0FDNUJBLEdBQVc3ekYsRUFBR3FtQixRQUFRdGEsUUFBUSxNQUFRLEVBQ3hDK25GLEdBQVk5ekYsRUFBSWdOLEVBQUs1RixHQUNadW9GLEdBQWMzaUYsR0FHbkIraUYsR0FBaUIzb0YsR0FDbkJwSCxFQUFHc0gsZ0JBQWdCMEYsSUFJbkI1RixFQUFnQixvQkFBUjRGLEdBQTRDLFVBQWZoTixFQUFHcW1CLFFBQ3BDLE9BQ0FyWixFQUNKaE4sRUFBR2lJLGFBQWErRSxFQUFLNUYsSUFFZHFvRixHQUFpQnppRixHQUMxQmhOLEVBQUdpSSxhQUFhK0UsRUE1dkNTLFNBQVVBLEVBQUs1RixHQUMxQyxPQUFPMm9GLEdBQWlCM29GLElBQW9CLFVBQVZBLEVBQzlCLFFBRVEsb0JBQVI0RixHQUE2QjBpRixHQUE0QnRvRixHQUN2REEsRUFDQSxPQXN2Q2lCMnNGLENBQXVCL21GLEVBQUs1RixJQUN4Q3lvRixHQUFRN2lGLEdBQ2IraUYsR0FBaUIzb0YsR0FDbkJwSCxFQUFHNHpGLGtCQUFrQmhFLEdBQVNFLEdBQWE5aUYsSUFFM0NoTixFQUFHZzBGLGVBQWVwRSxHQUFTNWlGLEVBQUs1RixHQUdsQzBzRixHQUFZOXpGLEVBQUlnTixFQUFLNUYsR0FJekIsU0FBUzBzRixHQUFhOXpGLEVBQUlnTixFQUFLNUYsR0FDN0IsR0FBSTJvRixHQUFpQjNvRixHQUNuQnBILEVBQUdzSCxnQkFBZ0IwRixPQUNkLENBS0wsR0FDRW85RCxJQUFTQyxHQUNNLGFBQWZycUUsRUFBR3FtQixTQUNLLGdCQUFSclosR0FBbUMsS0FBVjVGLElBQWlCcEgsRUFBR2kwRixPQUM3QyxDQUNBLElBQUlDLEVBQVUsU0FBVS8xRSxHQUN0QkEsRUFBRWcyRSwyQkFDRm4wRixFQUFHOEIsb0JBQW9CLFFBQVNveUYsSUFFbENsMEYsRUFBRzRCLGlCQUFpQixRQUFTc3lGLEdBRTdCbDBGLEVBQUdpMEYsUUFBUyxFQUVkajBGLEVBQUdpSSxhQUFhK0UsRUFBSzVGLElBSXpCLElBQUk2eUUsR0FBUSxDQUNWcnlCLE9BQVE2ckMsR0FDUmx3QixPQUFRa3dCLElBS1YsU0FBU1csR0FBYWhVLEVBQVVyUixHQUM5QixJQUFJL3VFLEVBQUsrdUUsRUFBTXZCLElBQ1hqekIsRUFBT3cwQixFQUFNeDBCLEtBQ2I4NUMsRUFBVWpVLEVBQVM3bEMsS0FDdkIsS0FDRStxQixFQUFRL3FCLEVBQUs0MUMsY0FDYjdxQixFQUFRL3FCLEVBQUtvcUMsU0FDWHJmLEVBQVErdUIsSUFDTi91QixFQUFRK3VCLEVBQVFsRSxjQUNoQjdxQixFQUFRK3VCLEVBQVExUCxTQUx0QixDQVlBLElBQUkyUCxFQUFNdEUsR0FBaUJqaEIsR0FHdkJ3bEIsRUFBa0J2MEYsRUFBR3cwRixtQkFDckJqdkIsRUFBTWd2QixLQUNSRCxFQUFNajhDLEdBQU9pOEMsRUFBS2pFLEdBQWVrRSxLQUkvQkQsSUFBUXQwRixFQUFHeTBGLGFBQ2J6MEYsRUFBR2lJLGFBQWEsUUFBU3FzRixHQUN6QnQwRixFQUFHeTBGLFdBQWFILElBSXBCLElBNFlJai9DLEdBQUtnWixHQUFLcW1DLEdBQUtDLEdBQVNDLEdBQWVDLEdBc0Z2Q0MsR0FsZUFDLEdBQVEsQ0FDVm50QyxPQUFRd3NDLEdBQ1I3d0IsT0FBUTZ3QixJQUtOWSxHQUFzQixnQkFFMUIsU0FBU0MsR0FBY0MsR0FDckIsSUFRSTM1QyxFQUFHOEMsRUFBTWh6QixFQUFHcThELEVBQVl5TixFQVJ4QkMsR0FBVyxFQUNYQyxHQUFXLEVBQ1hDLEdBQW1CLEVBQ25CQyxHQUFVLEVBQ1ZDLEVBQVEsRUFDUkMsRUFBUyxFQUNUQyxFQUFRLEVBQ1JDLEVBQWtCLEVBR3RCLElBQUt0cUUsRUFBSSxFQUFHQSxFQUFJNnBFLEVBQUl2MEYsT0FBUTBxQixJQUcxQixHQUZBZ3pCLEVBQU85QyxFQUNQQSxFQUFJMjVDLEVBQUkxMUMsV0FBV24wQixHQUNmK3BFLEVBQ1EsS0FBTjc1QyxHQUF1QixLQUFUOEMsSUFBaUIrMkMsR0FBVyxRQUN6QyxHQUFJQyxFQUNDLEtBQU45NUMsR0FBdUIsS0FBVDhDLElBQWlCZzNDLEdBQVcsUUFDekMsR0FBSUMsRUFDQyxLQUFOLzVDLEdBQXVCLEtBQVQ4QyxJQUFpQmkzQyxHQUFtQixRQUNqRCxHQUFJQyxFQUNDLEtBQU5oNkMsR0FBdUIsS0FBVDhDLElBQWlCazNDLEdBQVUsUUFDeEMsR0FDQyxNQUFOaDZDLEdBQzBCLE1BQTFCMjVDLEVBQUkxMUMsV0FBV24wQixFQUFJLElBQ08sTUFBMUI2cEUsRUFBSTExQyxXQUFXbjBCLEVBQUksSUFDbEJtcUUsR0FBVUMsR0FBV0MsRUFTakIsQ0FDTCxPQUFRbjZDLEdBQ04sS0FBSyxHQUFNODVDLEdBQVcsRUFBTSxNQUM1QixLQUFLLEdBQU1ELEdBQVcsRUFBTSxNQUM1QixLQUFLLEdBQU1FLEdBQW1CLEVBQU0sTUFDcEMsS0FBSyxHQUFNSSxJQUFTLE1BQ3BCLEtBQUssR0FBTUEsSUFBUyxNQUNwQixLQUFLLEdBQU1ELElBQVUsTUFDckIsS0FBSyxHQUFNQSxJQUFVLE1BQ3JCLEtBQUssSUFBTUQsSUFBUyxNQUNwQixLQUFLLElBQU1BLElBRWIsR0FBVSxLQUFOajZDLEVBQVksQ0FJZCxJQUhBLElBQUlrQyxFQUFJcHlCLEVBQUksRUFDUnlxQixPQUFJLEVBRUQySCxHQUFLLEdBRUEsT0FEVjNILEVBQUlvL0MsRUFBSW5wQyxPQUFPdE8sSUFERkEsS0FJVjNILEdBQU1rL0MsR0FBb0JuN0MsS0FBSy9ELEtBQ2xDeS9DLEdBQVUsY0E1Qkt4MEYsSUFBZjJtRixHQUVGaU8sRUFBa0J0cUUsRUFBSSxFQUN0QnE4RCxFQUFhd04sRUFBSXBxRixNQUFNLEVBQUd1Z0IsR0FBRzhELFFBRTdCeW1FLElBbUNOLFNBQVNBLEtBQ05ULElBQVlBLEVBQVUsS0FBS3RuRixLQUFLcW5GLEVBQUlwcUYsTUFBTTZxRixFQUFpQnRxRSxHQUFHOEQsUUFDL0R3bUUsRUFBa0J0cUUsRUFBSSxFQUd4QixRQVhtQnRxQixJQUFmMm1GLEVBQ0ZBLEVBQWF3TixFQUFJcHFGLE1BQU0sRUFBR3VnQixHQUFHOEQsT0FDQSxJQUFwQndtRSxHQUNUQyxJQVFFVCxFQUNGLElBQUs5cEUsRUFBSSxFQUFHQSxFQUFJOHBFLEVBQVF4MEYsT0FBUTBxQixJQUM5QnE4RCxFQUFhbU8sR0FBV25PLEVBQVl5TixFQUFROXBFLElBSWhELE9BQU9xOEQsRUFHVCxTQUFTbU8sR0FBWVgsRUFBS2xwRixHQUN4QixJQUFJcWYsRUFBSXJmLEVBQU9ELFFBQVEsS0FDdkIsR0FBSXNmLEVBQUksRUFFTixNQUFRLE9BQVVyZixFQUFTLE1BQVNrcEYsRUFBTSxJQUUxQyxJQUFJdDdDLEVBQU81dEMsRUFBT2xCLE1BQU0sRUFBR3VnQixHQUN2QjdxQixFQUFPd0wsRUFBT2xCLE1BQU11Z0IsRUFBSSxHQUM1QixNQUFRLE9BQVV1dUIsRUFBTyxNQUFTczdDLEdBQWdCLE1BQVQxMEYsRUFBZSxJQUFNQSxFQUFPQSxHQVN6RSxTQUFTczFGLEdBQVUveUMsRUFBS2d6QyxHQUN0QnI1QyxRQUFRbHpDLE1BQU8sbUJBQXFCdTVDLEdBSXRDLFNBQVNpekMsR0FDUDE5QyxFQUNBdHJDLEdBRUEsT0FBT3NyQyxFQUNIQSxFQUFReFQsS0FBSSxTQUFVMnpCLEdBQUssT0FBT0EsRUFBRXpyRCxNQUFTaEIsUUFBTyxTQUFVMEIsR0FBSyxPQUFPQSxLQUMxRSxHQUdOLFNBQVN1b0YsR0FBU2oyRixFQUFJNDVDLEVBQU14eUMsRUFBTzJ1RixFQUFPRyxJQUN2Q2wyRixFQUFHdTNCLFFBQVV2M0IsRUFBR3UzQixNQUFRLEtBQUsxcEIsS0FBS3NvRixHQUFhLENBQUV2OEMsS0FBTUEsRUFBTXh5QyxNQUFPQSxFQUFPOHVGLFFBQVNBLEdBQVdILElBQ2hHLzFGLEVBQUdvMkYsT0FBUSxFQUdiLFNBQVNDLEdBQVNyMkYsRUFBSTQ1QyxFQUFNeHlDLEVBQU8ydUYsRUFBT0csSUFDNUJBLEVBQ1BsMkYsRUFBR3MyRixlQUFpQnQyRixFQUFHczJGLGFBQWUsSUFDdEN0MkYsRUFBR2k2RSxRQUFVajZFLEVBQUdpNkUsTUFBUSxLQUN2QnBzRSxLQUFLc29GLEdBQWEsQ0FBRXY4QyxLQUFNQSxFQUFNeHlDLE1BQU9BLEVBQU84dUYsUUFBU0EsR0FBV0gsSUFDeEUvMUYsRUFBR28yRixPQUFRLEVBSWIsU0FBU0csR0FBWXYyRixFQUFJNDVDLEVBQU14eUMsRUFBTzJ1RixHQUNwQy8xRixFQUFHdzJGLFNBQVM1OEMsR0FBUXh5QyxFQUNwQnBILEVBQUd5MkYsVUFBVTVvRixLQUFLc29GLEdBQWEsQ0FBRXY4QyxLQUFNQSxFQUFNeHlDLE1BQU9BLEdBQVMydUYsSUFHL0QsU0FBU1csR0FDUDEyRixFQUNBNDVDLEVBQ0EyNUMsRUFDQW5zRixFQUNBNHJGLEVBQ0EyRCxFQUNBdEQsRUFDQTBDLElBRUMvMUYsRUFBRzJ5RSxhQUFlM3lFLEVBQUcyeUUsV0FBYSxLQUFLOWtFLEtBQUtzb0YsR0FBYSxDQUN4RHY4QyxLQUFNQSxFQUNOMjVDLFFBQVNBLEVBQ1Ruc0YsTUFBT0EsRUFDUDRyRixJQUFLQSxFQUNMMkQsYUFBY0EsRUFDZHRELFVBQVdBLEdBQ1YwQyxJQUNILzFGLEVBQUdvMkYsT0FBUSxFQUdiLFNBQVNRLEdBQXVCL1ksRUFBUWprQyxFQUFNczhDLEdBQzVDLE9BQU9BLEVBQ0YsTUFBUXQ4QyxFQUFPLEtBQVFpa0MsRUFBUyxLQUNqQ0EsRUFBU2prQyxFQUdmLFNBQVNpOUMsR0FDUDcyRixFQUNBNDVDLEVBQ0F4eUMsRUFDQWlzRixFQUNBeUQsRUFDQTE1QyxFQUNBMjRDLEVBQ0FHLEdBaURBLElBQUlwa0MsRUEvQ0p1aEMsRUFBWUEsR0FBYWh1QixFQUl2QmpvQixHQUNBaTJDLEVBQVUwRCxTQUFXMUQsRUFBVTU4RSxTQUUvQjJtQyxFQUNFLDJGQUVBMjRDLEdBT0ExQyxFQUFVejBFLE1BQ1JzM0UsRUFDRnQ4QyxFQUFPLElBQU1BLEVBQU8sOEJBQWdDQSxFQUFPLElBQ3pDLFVBQVRBLElBQ1RBLEVBQU8scUJBQ0F5NUMsRUFBVXowRSxPQUVWeTBFLEVBQVUyRCxTQUNmZCxFQUNGdDhDLEVBQU8sSUFBTUEsRUFBTywwQkFBNEJBLEVBQU8sSUFDckMsVUFBVEEsSUFDVEEsRUFBTyxZQUtQeTVDLEVBQVVuN0QsaUJBQ0xtN0QsRUFBVW43RCxRQUNqQjBoQixFQUFPZzlDLEdBQXNCLElBQUtoOUMsRUFBTXM4QyxJQUV0QzdDLEVBQVVoOUMsY0FDTGc5QyxFQUFVaDlDLEtBQ2pCdUQsRUFBT2c5QyxHQUFzQixJQUFLaDlDLEVBQU1zOEMsSUFHdEM3QyxFQUFVNThFLGlCQUNMNDhFLEVBQVU1OEUsUUFDakJtakMsRUFBT2c5QyxHQUFzQixJQUFLaDlDLEVBQU1zOEMsSUFJdEM3QyxFQUFVNEQsZUFDTDVELEVBQVU0RCxPQUNqQm5sQyxFQUFTOXhELEVBQUdrM0YsZUFBaUJsM0YsRUFBR2szRixhQUFlLEtBRS9DcGxDLEVBQVM5eEQsRUFBRzh4RCxTQUFXOXhELEVBQUc4eEQsT0FBUyxJQUdyQyxJQUFJcWxDLEVBQWFoQixHQUFhLENBQUUvdUYsTUFBT0EsRUFBTStuQixPQUFRK21FLFFBQVNBLEdBQVdILEdBQ3JFMUMsSUFBY2h1QixJQUNoQjh4QixFQUFXOUQsVUFBWUEsR0FHekIsSUFBSTliLEVBQVd6bEIsRUFBT2xZLEdBRWxCMXJCLE1BQU00cUIsUUFBUXkrQixHQUNoQnVmLEVBQVl2ZixFQUFTaDVCLFFBQVE0NEMsR0FBYzVmLEVBQVMxcEUsS0FBS3NwRixHQUV6RHJsQyxFQUFPbFksR0FERTI5QixFQUNNdWYsRUFBWSxDQUFDSyxFQUFZNWYsR0FBWSxDQUFDQSxFQUFVNGYsR0FFaERBLEVBR2pCbjNGLEVBQUdvMkYsT0FBUSxFQUdiLFNBQVNnQixHQUNQcDNGLEVBQ0E0NUMsR0FFQSxPQUFPNTVDLEVBQUdxM0YsWUFBWSxJQUFNejlDLElBQzFCNTVDLEVBQUdxM0YsWUFBWSxVQUFZejlDLElBQzNCNTVDLEVBQUdxM0YsWUFBWXo5QyxHQUduQixTQUFTMDlDLEdBQ1B0M0YsRUFDQTQ1QyxFQUNBMjlDLEdBRUEsSUFBSUMsRUFDRkMsR0FBaUJ6M0YsRUFBSSxJQUFNNDVDLElBQzNCNjlDLEdBQWlCejNGLEVBQUksVUFBWTQ1QyxHQUNuQyxHQUFvQixNQUFoQjQ5QyxFQUNGLE9BQU92QyxHQUFhdUMsR0FDZixJQUFrQixJQUFkRCxFQUFxQixDQUM5QixJQUFJRyxFQUFjRCxHQUFpQnozRixFQUFJNDVDLEdBQ3ZDLEdBQW1CLE1BQWY4OUMsRUFDRixPQUFPcjlDLEtBQUtDLFVBQVVvOUMsSUFTNUIsU0FBU0QsR0FDUHozRixFQUNBNDVDLEVBQ0ErOUMsR0FFQSxJQUFJajVDLEVBQ0osR0FBaUMsT0FBNUJBLEVBQU0xK0MsRUFBR3cyRixTQUFTNThDLElBRXJCLElBREEsSUFBSTNlLEVBQU9qN0IsRUFBR3kyRixVQUNMcHJFLEVBQUksRUFBR3E0QixFQUFJem9CLEVBQUt0NkIsT0FBUTBxQixFQUFJcTRCLEVBQUdyNEIsSUFDdEMsR0FBSTRQLEVBQUs1UCxHQUFHdXVCLE9BQVNBLEVBQU0sQ0FDekIzZSxFQUFLeU4sT0FBT3JkLEVBQUcsR0FDZixNQU9OLE9BSElzc0UsVUFDSzMzRixFQUFHdzJGLFNBQVM1OEMsR0FFZDhFLEVBR1QsU0FBU2s1QyxHQUNQNTNGLEVBQ0E0NUMsR0FHQSxJQURBLElBQUkzZSxFQUFPajdCLEVBQUd5MkYsVUFDTHByRSxFQUFJLEVBQUdxNEIsRUFBSXpvQixFQUFLdDZCLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQUssQ0FDM0MsSUFBSXJqQixFQUFPaXpCLEVBQUs1UCxHQUNoQixHQUFJdXVCLEVBQUtDLEtBQUs3eEMsRUFBSzR4QyxNQUVqQixPQURBM2UsRUFBS3lOLE9BQU9yZCxFQUFHLEdBQ1JyakIsR0FLYixTQUFTbXVGLEdBQ1B0bEUsRUFDQWtsRSxHQVVBLE9BUklBLElBQ2lCLE1BQWZBLEVBQU1oaUMsUUFDUmxqQyxFQUFLa2pDLE1BQVFnaUMsRUFBTWhpQyxPQUVKLE1BQWJnaUMsRUFBTS9oQyxNQUNSbmpDLEVBQUttakMsSUFBTStoQyxFQUFNL2hDLE1BR2RuakMsRUFRVCxTQUFTZ25FLEdBQ1A3M0YsRUFDQW9ILEVBQ0Fpc0YsR0FFQSxJQUFJM0YsRUFBTTJGLEdBQWEsR0FDbkJ5RSxFQUFTcEssRUFBSW9LLE9BR2JDLEVBQXNCLE1BQ3RCQyxFQUFrQkQsRUFIWHJLLEVBQUl2K0QsT0FLYjZvRSxFQUNFLDhDQUlBRixJQUNGRSxFQUFrQixNQUFRQSxFQUFrQixLQUU5QyxJQUFJQyxFQUFhQyxHQUFrQjl3RixFQUFPNHdGLEdBRTFDaDRGLEVBQUdzakYsTUFBUSxDQUNUbDhFLE1BQVEsSUFBTUEsRUFBUSxJQUN0QnNnRixXQUFZcnRDLEtBQUtDLFVBQVVsekMsR0FDM0I2RixTQUFXLG1CQUE2Q2dyRixFQUFhLEtBT3pFLFNBQVNDLEdBQ1A5d0YsRUFDQTZ3RixHQUVBLElBQUkzd0IsRUEyQk4sU0FBcUI1b0IsR0FNbkIsR0FIQUEsRUFBTUEsRUFBSXZ2QixPQUNWa21CLEdBQU1xSixFQUFJLzlDLE9BRU4rOUMsRUFBSTN5QyxRQUFRLEtBQU8sR0FBSzJ5QyxFQUFJNzJCLFlBQVksS0FBT3d0QixHQUFNLEVBRXZELE9BREFzL0MsR0FBVWoyQyxFQUFJNzJCLFlBQVksT0FDWCxFQUNOLENBQ0xxdEUsSUFBS3gyQyxFQUFJNXpDLE1BQU0sRUFBRzZwRixJQUNsQjNuRixJQUFLLElBQU0weEMsRUFBSTV6QyxNQUFNNnBGLEdBQVUsR0FBSyxLQUcvQixDQUNMTyxJQUFLeDJDLEVBQ0wxeEMsSUFBSyxNQVFYLElBSEFxaEQsR0FBTTNQLEVBQ05pMkMsR0FBVUMsR0FBZ0JDLEdBQW1CLEdBRXJDc0QsTUFHRkMsR0FGSjFELEdBQU10ckYsTUFHSml2RixHQUFZM0QsSUFDSyxLQUFSQSxJQUNUNEQsR0FBYTVELElBSWpCLE1BQU8sQ0FDTFEsSUFBS3gyQyxFQUFJNXpDLE1BQU0sRUFBRzhwRixJQUNsQjVuRixJQUFLMHhDLEVBQUk1ekMsTUFBTThwRixHQUFnQixFQUFHQyxLQS9EMUIwRCxDQUFXbnhGLEdBQ3JCLE9BQWdCLE9BQVprZ0UsRUFBSXQ2RCxJQUNFNUYsRUFBUSxJQUFNNndGLEVBRWQsUUFBVzN3QixFQUFPLElBQUksS0FBUUEsRUFBTyxJQUFJLEtBQU8yd0IsRUFBYSxJQStEekUsU0FBUzd1RixLQUNQLE9BQU9pbEQsR0FBSTdPLGFBQWFtMUMsSUFHMUIsU0FBU3dELEtBQ1AsT0FBT3hELElBQVd0L0MsR0FHcEIsU0FBUytpRCxHQUFlMUQsR0FDdEIsT0FBZSxLQUFSQSxHQUF3QixLQUFSQSxFQUd6QixTQUFTNEQsR0FBYzVELEdBQ3JCLElBQUk4RCxFQUFZLEVBRWhCLElBREE1RCxHQUFnQkQsSUFDUndELE1BRU4sR0FBSUMsR0FESjFELEVBQU10ckYsTUFFSml2RixHQUFZM0QsUUFLZCxHQUZZLEtBQVJBLEdBQWdCOEQsSUFDUixLQUFSOUQsR0FBZ0I4RCxJQUNGLElBQWRBLEVBQWlCLENBQ25CM0QsR0FBbUJGLEdBQ25CLE9BS04sU0FBUzBELEdBQWEzRCxHQUVwQixJQURBLElBQUkrRCxFQUFjL0QsR0FDVnlELE9BQ056RCxFQUFNdHJGLFFBQ01xdkYsS0FZaEIsSUFnTUlDLEdBaE1BQyxHQUFjLE1Ba01sQixTQUFTQyxHQUFxQnp3RSxFQUFPem1CLEVBQVN3MkIsR0FDNUMsSUFBSWt0RCxFQUFVc1QsR0FDZCxPQUFPLFNBQVNyVCxJQUVGLE9BREYzakYsRUFBUVosTUFBTSxLQUFNSixZQUU1Qm00RixHQUFTMXdFLEVBQU9rOUQsRUFBYW50RCxFQUFTa3RELElBUTVDLElBQUkwVCxHQUFrQmhqQixNQUFzQnRMLElBQVFyc0IsT0FBT3FzQixHQUFLLEtBQU8sSUFFdkUsU0FBU3V1QixHQUNQbi9DLEVBQ0FsNEMsRUFDQXcyQixFQUNBemhCLEdBUUEsR0FBSXFpRixHQUFpQixDQUNuQixJQUFJRSxFQUFvQi9TLEdBQ3BCOVcsRUFBV3p0RSxFQUNmQSxFQUFVeXRFLEVBQVM4cEIsU0FBVyxTQUFVOTZFLEdBQ3RDLEdBSUVBLEVBQUUzSyxTQUFXMkssRUFBRSs2RSxlQUVmLzZFLEVBQUVpb0UsV0FBYTRTLEdBSWY3NkUsRUFBRWlvRSxXQUFhLEdBSWZqb0UsRUFBRTNLLE9BQU8ybEYsZ0JBQWtCdDVGLFNBRTNCLE9BQU9zdkUsRUFBU3J1RSxNQUFNRixLQUFNRixZQUlsQ2c0RixHQUFTOTJGLGlCQUNQZzRDLEVBQ0FsNEMsRUFDQWlwRSxHQUNJLENBQUV6eUMsUUFBU0EsRUFBU3poQixRQUFTQSxHQUM3QnloQixHQUlSLFNBQVMyZ0UsR0FDUGovQyxFQUNBbDRDLEVBQ0F3MkIsRUFDQWt0RCxJQUVDQSxHQUFXc1QsSUFBVTUyRixvQkFDcEI4M0MsRUFDQWw0QyxFQUFRdTNGLFVBQVl2M0YsRUFDcEJ3MkIsR0FJSixTQUFTa2hFLEdBQW9CaFosRUFBVXJSLEdBQ3JDLElBQUl6SixFQUFROGEsRUFBUzdsQyxLQUFLckUsTUFBT292QixFQUFReUosRUFBTXgwQixLQUFLckUsSUFBcEQsQ0FHQSxJQUFJQSxFQUFLNjRCLEVBQU14MEIsS0FBS3JFLElBQU0sR0FDdEJ1aUMsRUFBUTJILEVBQVM3bEMsS0FBS3JFLElBQU0sR0FDaEN3aUQsR0FBVzNwQixFQUFNdkIsSUFsR25CLFNBQTBCdDNCLEdBRXhCLEdBQUlxdkIsRUFBTXJ2QixFQUFjLEtBQUksQ0FFMUIsSUFBSS90QixFQUFRaWlELEVBQU8sU0FBVyxRQUM5QmwwQixFQUFHL3RCLEdBQVMsR0FBR2t3QixPQUFPbkMsRUFBYyxJQUFHQSxFQUFHL3RCLElBQVUsV0FDN0MrdEIsRUFBYyxJQUtuQnF2QixFQUFNcnZCLEVBQXVCLE9BQy9CQSxFQUFHbWpELE9BQVMsR0FBR2hoRCxPQUFPbkMsRUFBdUIsSUFBR0EsRUFBR21qRCxRQUFVLFdBQ3REbmpELEVBQXVCLEtBc0ZoQ29qRCxDQUFnQnBqRCxHQUNoQnNpQyxHQUFnQnRpQyxFQUFJdWlDLEVBQU9zZ0IsR0FBT0YsR0FBVUQsR0FBcUI3cEIsRUFBTXRCLFNBQ3ZFaXJCLFFBQVczM0YsR0FHYixJQU9JdzRGLEdBUEF6bkMsR0FBUyxDQUNYbEssT0FBUXd4QyxHQUNSNzFCLE9BQVE2MUIsSUFPVixTQUFTSSxHQUFnQnBaLEVBQVVyUixHQUNqQyxJQUFJekosRUFBUThhLEVBQVM3bEMsS0FBS2tpQyxZQUFhblgsRUFBUXlKLEVBQU14MEIsS0FBS2tpQyxVQUExRCxDQUdBLElBQUl6dkUsRUFBS3FvRSxFQUNMN0gsRUFBTXVCLEVBQU12QixJQUNaaXNCLEVBQVdyWixFQUFTN2xDLEtBQUtraUMsVUFBWSxHQUNyQ2xsRCxFQUFRdzNDLEVBQU14MEIsS0FBS2tpQyxVQUFZLEdBTW5DLElBQUt6dkUsS0FKRHU0RCxFQUFNaHVDLEVBQU0rM0MsVUFDZC8zQyxFQUFRdzNDLEVBQU14MEIsS0FBS2tpQyxTQUFXNzlCLEVBQU8sR0FBSXJuQixJQUcvQmtpRSxFQUNKenNGLEtBQU91cUIsSUFDWGkyQyxFQUFJeGdFLEdBQU8sSUFJZixJQUFLQSxLQUFPdXFCLEVBQU8sQ0FLakIsR0FKQTg5QyxFQUFNOTlDLEVBQU12cUIsR0FJQSxnQkFBUkEsR0FBaUMsY0FBUkEsRUFBcUIsQ0FFaEQsR0FESStoRSxFQUFNcmpFLFdBQVlxakUsRUFBTXJqRSxTQUFTL0ssT0FBUyxHQUMxQzAwRSxJQUFRb2tCLEVBQVN6c0YsR0FBUSxTQUdDLElBQTFCd2dFLEVBQUlrc0IsV0FBVy80RixRQUNqQjZzRSxFQUFJcmlFLFlBQVlxaUUsRUFBSWtzQixXQUFXLElBSW5DLEdBQVksVUFBUjFzRixHQUFtQyxhQUFoQndnRSxFQUFJbm5ELFFBQXdCLENBR2pEbW5ELEVBQUltc0IsT0FBU3RrQixFQUViLElBQUl1a0IsRUFBU3QwQixFQUFRK1AsR0FBTyxHQUFLeHVDLE9BQU93dUMsR0FDcEN3a0IsR0FBa0Jyc0IsRUFBS29zQixLQUN6QnBzQixFQUFJcG1FLE1BQVF3eUYsUUFFVCxHQUFZLGNBQVI1c0YsR0FBdUI2akYsR0FBTXJqQixFQUFJbm5ELFVBQVlpL0MsRUFBUWtJLEVBQUlzc0IsV0FBWSxFQUU5RVAsR0FBZUEsSUFBZ0IxNUYsU0FBU0MsY0FBYyxRQUN6Q2c2RixVQUFZLFFBQVV6a0IsRUFBTSxTQUV6QyxJQURBLElBQUlxYixFQUFNNkksR0FBYTcwQixXQUNoQjhJLEVBQUk5SSxZQUNUOEksRUFBSXJpRSxZQUFZcWlFLEVBQUk5SSxZQUV0QixLQUFPZ3NCLEVBQUloc0IsWUFDVDhJLEVBQUk3aEUsWUFBWStrRixFQUFJaHNCLGlCQUVqQixHQUtMMlEsSUFBUW9rQixFQUFTenNGLEdBSWpCLElBQ0V3Z0UsRUFBSXhnRSxHQUFPcW9FLEVBQ1gsTUFBT2wzRCxPQVFmLFNBQVMwN0UsR0FBbUJyc0IsRUFBS3VzQixHQUMvQixPQUFTdnNCLEVBQUl3c0IsWUFDSyxXQUFoQnhzQixFQUFJbm5ELFNBTVIsU0FBK0JtbkQsRUFBS3VzQixHQUdsQyxJQUFJRSxHQUFhLEVBR2pCLElBQU1BLEVBQWFwNkYsU0FBUzBLLGdCQUFrQmlqRSxFQUFPLE1BQU9ydkQsSUFDNUQsT0FBTzg3RSxHQUFjenNCLEVBQUlwbUUsUUFBVTJ5RixFQVpqQ0csQ0FBcUIxc0IsRUFBS3VzQixJQWU5QixTQUErQnZzQixFQUFLbUQsR0FDbEMsSUFBSXZwRSxFQUFRb21FLEVBQUlwbUUsTUFDWmlzRixFQUFZN2xCLEVBQUkyc0IsWUFDcEIsR0FBSTUwQixFQUFNOHRCLEdBQVksQ0FDcEIsR0FBSUEsRUFBVXlFLE9BQ1osT0FBTzV4QixFQUFTOStELEtBQVc4K0QsRUFBU3lLLEdBRXRDLEdBQUkwaUIsRUFBVWxrRSxLQUNaLE9BQU8vbkIsRUFBTStuQixTQUFXd2hELEVBQU94aEQsT0FHbkMsT0FBTy9uQixJQUFVdXBFLEVBekJmeXBCLENBQXFCNXNCLEVBQUt1c0IsSUE0QjlCLElBQUl0ZCxHQUFXLENBQ2I3MEIsT0FBUTR4QyxHQUNSajJCLE9BQVFpMkIsSUFLTmEsR0FBaUI1ekIsR0FBTyxTQUFVaEMsR0FDcEMsSUFBSTZDLEVBQU0sR0FFTmd6QixFQUFvQixRQU94QixPQU5BNzFCLEVBQVFubEIsTUFGWSxpQkFFU3QwQyxTQUFRLFNBQVU2bEIsR0FDN0MsR0FBSUEsRUFBTSxDQUNSLElBQUlpM0QsRUFBTWozRCxFQUFLeXVCLE1BQU1nN0MsR0FDckJ4UyxFQUFJbm5GLE9BQVMsSUFBTTJtRSxFQUFJd2dCLEVBQUksR0FBRzM0RCxRQUFVMjRELEVBQUksR0FBRzM0RCxZQUc1Q200QyxLQUlULFNBQVNpekIsR0FBb0JoZ0QsR0FDM0IsSUFBSXI2QyxFQUFRczZGLEdBQXNCamdELEVBQUtyNkMsT0FHdkMsT0FBT3E2QyxFQUFLa2dELFlBQ1I3N0MsRUFBT3JFLEVBQUtrZ0QsWUFBYXY2RixHQUN6QkEsRUFJTixTQUFTczZGLEdBQXVCRSxHQUM5QixPQUFJeHNFLE1BQU00cUIsUUFBUTRoRCxHQUNUNW1DLEVBQVM0bUMsR0FFVSxpQkFBakJBLEVBQ0ZMLEdBQWVLLEdBRWpCQSxFQXVDVCxJQXlCSUMsR0F6QkFDLEdBQVcsTUFDWEMsR0FBYyxpQkFDZEMsR0FBVSxTQUFVOTZGLEVBQUk0NUMsRUFBTThFLEdBRWhDLEdBQUlrOEMsR0FBUy9nRCxLQUFLRCxHQUNoQjU1QyxFQUFHRSxNQUFNa1gsWUFBWXdpQyxFQUFNOEUsUUFDdEIsR0FBSW04QyxHQUFZaGhELEtBQUs2RSxHQUMxQjErQyxFQUFHRSxNQUFNa1gsWUFBWTB2RCxFQUFVbHRCLEdBQU84RSxFQUFJeEQsUUFBUTIvQyxHQUFhLElBQUssaUJBQy9ELENBQ0wsSUFBSUUsRUFBaUJDLEdBQVVwaEQsR0FDL0IsR0FBSTFyQixNQUFNNHFCLFFBQVE0RixHQUloQixJQUFLLElBQUlyekIsRUFBSSxFQUFHZ3FCLEVBQU1xSixFQUFJLzlDLE9BQVEwcUIsRUFBSWdxQixFQUFLaHFCLElBQ3pDcnJCLEVBQUdFLE1BQU02NkYsR0FBa0JyOEMsRUFBSXJ6QixRQUdqQ3JyQixFQUFHRSxNQUFNNjZGLEdBQWtCcjhDLElBSzdCdThDLEdBQWMsQ0FBQyxTQUFVLE1BQU8sTUFHaENELEdBQVl2MEIsR0FBTyxTQUFVL3VDLEdBRy9CLEdBRkFpakUsR0FBYUEsSUFBYzk2RixTQUFTQyxjQUFjLE9BQU9JLE1BRTVDLFlBRGJ3M0IsRUFBT2l2QyxFQUFTanZDLEtBQ1VBLEtBQVFpakUsR0FDaEMsT0FBT2pqRSxFQUdULElBREEsSUFBSXdqRSxFQUFVeGpFLEVBQUtxMEIsT0FBTyxHQUFHeUcsY0FBZ0I5NkIsRUFBSzVzQixNQUFNLEdBQy9DdWdCLEVBQUksRUFBR0EsRUFBSTR2RSxHQUFZdDZGLE9BQVEwcUIsSUFBSyxDQUMzQyxJQUFJdXVCLEVBQU9xaEQsR0FBWTV2RSxHQUFLNnZFLEVBQzVCLEdBQUl0aEQsS0FBUStnRCxHQUNWLE9BQU8vZ0QsTUFLYixTQUFTdWhELEdBQWEvYSxFQUFVclIsR0FDOUIsSUFBSXgwQixFQUFPdzBCLEVBQU14MEIsS0FDYjg1QyxFQUFValUsRUFBUzdsQyxLQUV2QixLQUFJK3FCLEVBQVEvcUIsRUFBS2tnRCxjQUFnQm4xQixFQUFRL3FCLEVBQUtyNkMsUUFDNUNvbEUsRUFBUSt1QixFQUFRb0csY0FBZ0JuMUIsRUFBUSt1QixFQUFRbjBGLFFBRGxELENBTUEsSUFBSW0xRSxFQUFLejdCLEVBQ0w1NUMsRUFBSyt1RSxFQUFNdkIsSUFDWDR0QixFQUFpQi9HLEVBQVFvRyxZQUN6QlksRUFBa0JoSCxFQUFRaUgsaUJBQW1CakgsRUFBUW4wRixPQUFTLEdBRzlEcTdGLEVBQVdILEdBQWtCQyxFQUU3Qm43RixFQUFRczZGLEdBQXNCenJCLEVBQU14MEIsS0FBS3I2QyxRQUFVLEdBS3ZENnVFLEVBQU14MEIsS0FBSytnRCxnQkFBa0IvMUIsRUFBTXJsRSxFQUFNb3ZFLFFBQ3JDMXdCLEVBQU8sR0FBSTErQyxHQUNYQSxFQUVKLElBQUlzN0YsRUFwR04sU0FBbUJ6c0IsRUFBTzBzQixHQUN4QixJQUNJQyxFQURBcDBCLEVBQU0sR0FHVixHQUFJbTBCLEVBRUYsSUFEQSxJQUFJeEwsRUFBWWxoQixFQUNUa2hCLEVBQVVqaUIsb0JBQ2ZpaUIsRUFBWUEsRUFBVWppQixrQkFBa0I4UyxTQUV6Qm1QLEVBQVUxMUMsT0FDdEJtaEQsRUFBWW5CLEdBQW1CdEssRUFBVTExQyxRQUUxQ3FFLEVBQU8wb0IsRUFBS28wQixJQUtiQSxFQUFZbkIsR0FBbUJ4ckIsRUFBTXgwQixRQUN4Q3FFLEVBQU8wb0IsRUFBS28wQixHQUlkLElBREEsSUFBSTV6RixFQUFhaW5FLEVBQ1RqbkUsRUFBYUEsRUFBV3lyRCxRQUMxQnpyRCxFQUFXeXlDLE9BQVNtaEQsRUFBWW5CLEdBQW1CenlGLEVBQVd5eUMsUUFDaEVxRSxFQUFPMG9CLEVBQUtvMEIsR0FHaEIsT0FBT3AwQixFQXlFUXEwQixDQUFTNXNCLEdBQU8sR0FFL0IsSUFBS24xQixLQUFRMmhELEVBQ1BqMkIsRUFBUWsyQixFQUFTNWhELEtBQ25Ca2hELEdBQVE5NkYsRUFBSTQ1QyxFQUFNLElBR3RCLElBQUtBLEtBQVE0aEQsR0FDWG5tQixFQUFNbW1CLEVBQVM1aEQsTUFDSDJoRCxFQUFTM2hELElBRW5Ca2hELEdBQVE5NkYsRUFBSTQ1QyxFQUFhLE1BQVB5N0IsRUFBYyxHQUFLQSxJQUszQyxJQUFJbjFFLEdBQVEsQ0FDVjBuRCxPQUFRdXpDLEdBQ1I1M0IsT0FBUTQzQixJQUtOUyxHQUFlLE1BTW5CLFNBQVN0MkYsR0FBVXRGLEVBQUlzMEYsR0FFckIsR0FBS0EsSUFBU0EsRUFBTUEsRUFBSW5sRSxRQUt4QixHQUFJbnZCLEVBQUcySCxVQUNEMnNGLEVBQUl2b0YsUUFBUSxNQUFRLEVBQ3RCdW9GLEVBQUloMUMsTUFBTXM4QyxJQUFjNXdGLFNBQVEsU0FBVXV3QyxHQUFLLE9BQU92N0MsRUFBRzJILFVBQVVDLElBQUkyekMsTUFFdkV2N0MsRUFBRzJILFVBQVVDLElBQUkwc0YsT0FFZCxDQUNMLElBQUlqZixFQUFNLEtBQU9yMUUsRUFBR3FILGFBQWEsVUFBWSxJQUFNLElBQy9DZ3VFLEVBQUl0cEUsUUFBUSxJQUFNdW9GLEVBQU0sS0FBTyxHQUNqQ3QwRixFQUFHaUksYUFBYSxTQUFVb3RFLEVBQU1pZixHQUFLbmxFLFNBUzNDLFNBQVN2cEIsR0FBYTVGLEVBQUlzMEYsR0FFeEIsR0FBS0EsSUFBU0EsRUFBTUEsRUFBSW5sRSxRQUt4QixHQUFJbnZCLEVBQUcySCxVQUNEMnNGLEVBQUl2b0YsUUFBUSxNQUFRLEVBQ3RCdW9GLEVBQUloMUMsTUFBTXM4QyxJQUFjNXdGLFNBQVEsU0FBVXV3QyxHQUFLLE9BQU92N0MsRUFBRzJILFVBQVVJLE9BQU93ekMsTUFFMUV2N0MsRUFBRzJILFVBQVVJLE9BQU91c0YsR0FFakJ0MEYsRUFBRzJILFVBQVVoSCxRQUNoQlgsRUFBR3NILGdCQUFnQixhQUVoQixDQUdMLElBRkEsSUFBSSt0RSxFQUFNLEtBQU9yMUUsRUFBR3FILGFBQWEsVUFBWSxJQUFNLElBQy9DdzBGLEVBQU0sSUFBTXZILEVBQU0sSUFDZmpmLEVBQUl0cEUsUUFBUTh2RixJQUFRLEdBQ3pCeG1CLEVBQU1BLEVBQUluNkIsUUFBUTJnRCxFQUFLLE1BRXpCeG1CLEVBQU1BLEVBQUlsbUQsUUFFUm52QixFQUFHaUksYUFBYSxRQUFTb3RFLEdBRXpCcjFFLEVBQUdzSCxnQkFBZ0IsVUFPekIsU0FBU3cwRixHQUFtQmxwQixHQUMxQixHQUFLQSxFQUFMLENBSUEsR0FBc0IsaUJBQVhBLEVBQXFCLENBQzlCLElBQUl0TCxFQUFNLEdBS1YsT0FKbUIsSUFBZnNMLEVBQU83UCxLQUNUbmtCLEVBQU8wb0IsRUFBS3kwQixHQUFrQm5wQixFQUFPaDVCLE1BQVEsTUFFL0NnRixFQUFPMG9CLEVBQUtzTCxHQUNMdEwsRUFDRixNQUFzQixpQkFBWHNMLEVBQ1RtcEIsR0FBa0JucEIsUUFEcEIsR0FLVCxJQUFJbXBCLEdBQW9CdDFCLEdBQU8sU0FBVTdzQixHQUN2QyxNQUFPLENBQ0xvaUQsV0FBYXBpRCxFQUFPLFNBQ3BCcWlELGFBQWVyaUQsRUFBTyxZQUN0QnNpRCxpQkFBbUJ0aUQsRUFBTyxnQkFDMUJ1aUQsV0FBYXZpRCxFQUFPLFNBQ3BCd2lELGFBQWV4aUQsRUFBTyxZQUN0QnlpRCxpQkFBbUJ6aUQsRUFBTyxvQkFJMUIwaUQsR0FBZ0J4eUIsSUFBY08sRUFDOUJreUIsR0FBYSxhQUNiQyxHQUFZLFlBR1pDLEdBQWlCLGFBQ2pCQyxHQUFxQixnQkFDckJDLEdBQWdCLFlBQ2hCQyxHQUFvQixlQUNwQk4sVUFFNkJ2N0YsSUFBM0J3RyxPQUFPczFGLHNCQUN3Qjk3RixJQUFqQ3dHLE9BQU91MUYsd0JBRVBMLEdBQWlCLG1CQUNqQkMsR0FBcUIsNEJBRU8zN0YsSUFBMUJ3RyxPQUFPdzFGLHFCQUN1Qmg4RixJQUFoQ3dHLE9BQU95MUYsdUJBRVBMLEdBQWdCLGtCQUNoQkMsR0FBb0IsdUJBS3hCLElBQUlLLEdBQU1uekIsRUFDTnZpRSxPQUFPNkYsc0JBQ0w3RixPQUFPNkYsc0JBQXNCNkgsS0FBSzFOLFFBQ2xDakIsV0FDeUIsU0FBVTZ2QyxHQUFNLE9BQU9BLEtBRXRELFNBQVMrbUQsR0FBVy9tRCxHQUNsQjhtRCxJQUFJLFdBQ0ZBLEdBQUk5bUQsTUFJUixTQUFTZ25ELEdBQW9CbjlGLEVBQUlzMEYsR0FDL0IsSUFBSThJLEVBQW9CcDlGLEVBQUd3MEYscUJBQXVCeDBGLEVBQUd3MEYsbUJBQXFCLElBQ3RFNEksRUFBa0JyeEYsUUFBUXVvRixHQUFPLElBQ25DOEksRUFBa0J2dkYsS0FBS3ltRixHQUN2Qmh2RixHQUFTdEYsRUFBSXMwRixJQUlqQixTQUFTK0ksR0FBdUJyOUYsRUFBSXMwRixHQUM5QnQwRixFQUFHdzBGLG9CQUNMenNGLEVBQU8vSCxFQUFHdzBGLG1CQUFvQkYsR0FFaEMxdUYsR0FBWTVGLEVBQUlzMEYsR0FHbEIsU0FBU2dKLEdBQ1B0OUYsRUFDQXEwRSxFQUNBNTlCLEdBRUEsSUFBSWkzQyxFQUFNNlAsR0FBa0J2OUYsRUFBSXEwRSxHQUM1QnIwRCxFQUFPMHRFLEVBQUkxdEUsS0FDWGlvQyxFQUFVeWxDLEVBQUl6bEMsUUFDZHUxQyxFQUFZOVAsRUFBSThQLFVBQ3BCLElBQUt4OUUsRUFBUSxPQUFPeTJCLElBQ3BCLElBQUl0dUIsRUFBUW5JLElBQVN1OEUsR0FBYUcsR0FBcUJFLEdBQ25EYSxFQUFRLEVBQ1J6cEMsRUFBTSxXQUNSaDBELEVBQUc4QixvQkFBb0JxbUIsRUFBT3UxRSxHQUM5QmpuRCxLQUVFaW5ELEVBQVEsU0FBVXYvRSxHQUNoQkEsRUFBRTNLLFNBQVd4VCxLQUNUeTlGLEdBQVNELEdBQ2J4cEMsS0FJTjF0RCxZQUFXLFdBQ0xtM0YsRUFBUUQsR0FDVnhwQyxNQUVEL0wsRUFBVSxHQUNiam9ELEVBQUc0QixpQkFBaUJ1bUIsRUFBT3UxRSxHQUc3QixJQUFJQyxHQUFjLHlCQUVsQixTQUFTSixHQUFtQnY5RixFQUFJcTBFLEdBQzlCLElBU0lyMEQsRUFUQTQ5RSxFQUFTcjJGLE9BQU9pRixpQkFBaUJ4TSxHQUVqQzY5RixHQUFvQkQsRUFBT25CLEdBQWlCLFVBQVksSUFBSW45QyxNQUFNLE1BQ2xFdytDLEdBQXVCRixFQUFPbkIsR0FBaUIsYUFBZSxJQUFJbjlDLE1BQU0sTUFDeEV5K0MsRUFBb0JDLEdBQVdILEVBQWtCQyxHQUNqREcsR0FBbUJMLEVBQU9qQixHQUFnQixVQUFZLElBQUlyOUMsTUFBTSxNQUNoRTQrQyxHQUFzQk4sRUFBT2pCLEdBQWdCLGFBQWUsSUFBSXI5QyxNQUFNLE1BQ3RFNitDLEVBQW1CSCxHQUFXQyxFQUFpQkMsR0FHL0NqMkMsRUFBVSxFQUNWdTFDLEVBQVksRUE4QmhCLE9BNUJJbnBCLElBQWlCa29CLEdBQ2Z3QixFQUFvQixJQUN0Qi85RSxFQUFPdThFLEdBQ1B0MEMsRUFBVTgxQyxFQUNWUCxFQUFZTSxFQUFvQm45RixRQUV6QjB6RSxJQUFpQm1vQixHQUN0QjJCLEVBQW1CLElBQ3JCbitFLEVBQU93OEUsR0FDUHYwQyxFQUFVazJDLEVBQ1ZYLEVBQVlVLEVBQW1CdjlGLFFBU2pDNjhGLEdBTEF4OUUsR0FEQWlvQyxFQUFVcDhDLEtBQUtDLElBQUlpeUYsRUFBbUJJLElBQ3JCLEVBQ2JKLEVBQW9CSSxFQUNsQjVCLEdBQ0FDLEdBQ0YsTUFFQXg4RSxJQUFTdThFLEdBQ1B1QixFQUFvQm45RixPQUNwQnU5RixFQUFtQnY5RixPQUNyQixFQUtDLENBQ0xxZixLQUFNQSxFQUNOaW9DLFFBQVNBLEVBQ1R1MUMsVUFBV0EsRUFDWFksYUFOQXArRSxJQUFTdThFLElBQ1RvQixHQUFZOWpELEtBQUsrakQsRUFBT25CLEdBQWlCLGNBUzdDLFNBQVN1QixHQUFZSyxFQUFRQyxHQUUzQixLQUFPRCxFQUFPMTlGLE9BQVMyOUYsRUFBVTM5RixRQUMvQjA5RixFQUFTQSxFQUFPaG1ELE9BQU9nbUQsR0FHekIsT0FBT3h5RixLQUFLQyxJQUFJaEwsTUFBTSxLQUFNdzlGLEVBQVV4NUQsS0FBSSxTQUFVNnpCLEVBQUd0dEMsR0FDckQsT0FBT2t6RSxHQUFLNWxDLEdBQUs0bEMsR0FBS0YsRUFBT2h6RSxRQVFqQyxTQUFTa3pFLEdBQU0zcUMsR0FDYixPQUFrRCxJQUEzQ3pWLE9BQU95VixFQUFFOW9ELE1BQU0sR0FBSSxHQUFHb3dDLFFBQVEsSUFBSyxNQUs1QyxTQUFTc2pELEdBQU96dkIsRUFBTzB2QixHQUNyQixJQUFJeitGLEVBQUsrdUUsRUFBTXZCLElBR1hqSSxFQUFNdmxFLEVBQUcwK0YsWUFDWDErRixFQUFHMCtGLFNBQVNDLFdBQVksRUFDeEIzK0YsRUFBRzArRixZQUdMLElBQUlua0QsRUFBT3VoRCxHQUFrQi9zQixFQUFNeDBCLEtBQUtwN0MsWUFDeEMsSUFBSW1tRSxFQUFRL3FCLEtBS1JnckIsRUFBTXZsRSxFQUFHNCtGLFdBQTZCLElBQWhCNStGLEVBQUc2K0YsU0FBN0IsQ0E0QkEsSUF4QkEsSUFBSTk3QixFQUFNeG9CLEVBQUt3b0IsSUFDWC9pRCxFQUFPdTZCLEVBQUt2NkIsS0FDWmc4RSxFQUFhemhELEVBQUt5aEQsV0FDbEJDLEVBQWUxaEQsRUFBSzBoRCxhQUNwQkMsRUFBbUIzaEQsRUFBSzJoRCxpQkFDeEI0QyxFQUFjdmtELEVBQUt1a0QsWUFDbkJDLEVBQWdCeGtELEVBQUt3a0QsY0FDckJDLEVBQW9CemtELEVBQUt5a0Qsa0JBQ3pCQyxFQUFjMWtELEVBQUswa0QsWUFDbkJULEVBQVFqa0QsRUFBS2lrRCxNQUNiVSxFQUFhM2tELEVBQUsya0QsV0FDbEJDLEVBQWlCNWtELEVBQUs0a0QsZUFDdEJDLEVBQWU3a0QsRUFBSzZrRCxhQUNwQkMsRUFBUzlrRCxFQUFLOGtELE9BQ2RDLEVBQWMva0QsRUFBSytrRCxZQUNuQkMsRUFBa0JobEQsRUFBS2dsRCxnQkFDdkIvcUQsRUFBVytGLEVBQUsvRixTQU1oQmk1QixFQUFVeVMsR0FDVnNmLEVBQWlCdGYsR0FBZVcsT0FDN0IyZSxHQUFrQkEsRUFBZWpzQyxRQUN0Q2thLEVBQVUreEIsRUFBZS94QixRQUN6Qit4QixFQUFpQkEsRUFBZWpzQyxPQUdsQyxJQUFJa3NDLEdBQVloeUIsRUFBUStULGFBQWV6UyxFQUFNWixhQUU3QyxJQUFJc3hCLEdBQWFKLEdBQXFCLEtBQVhBLEVBQTNCLENBSUEsSUFBSUssRUFBYUQsR0FBWVgsRUFDekJBLEVBQ0E5QyxFQUNBMkQsRUFBY0YsR0FBWVQsRUFDMUJBLEVBQ0E5QyxFQUNBMEQsRUFBVUgsR0FBWVYsRUFDdEJBLEVBQ0E5QyxFQUVBNEQsRUFBa0JKLEdBQ2pCTCxHQUNESCxFQUNBYSxFQUFZTCxHQUNPLG1CQUFYSixFQUF3QkEsRUFDaENiLEVBQ0F1QixFQUFpQk4sR0FDaEJILEdBQ0RKLEVBQ0FjLEVBQXFCUCxHQUNwQkYsR0FDREosRUFFQWMsRUFBd0IvNUIsRUFDMUJSLEVBQVNseEIsR0FDTEEsRUFBU2dxRCxNQUNUaHFELEdBR3VCLE1BQXpCeXJELEdBQ0ZDLEdBQWNELEVBQXVCLFFBQVNseEIsR0FHaEQsSUFBSW94QixHQUFxQixJQUFScDlCLElBQWtCc0gsRUFDL0IrMUIsRUFBbUJDLEdBQXVCUCxHQUUxQ3JwRCxFQUFLejJDLEVBQUc0K0YsU0FBV3ZvRCxHQUFLLFdBQ3RCOHBELElBQ0Y5QyxHQUFzQnI5RixFQUFJNC9GLEdBQzFCdkMsR0FBc0JyOUYsRUFBSTIvRixJQUV4QmxwRCxFQUFHa29ELFdBQ0R3QixHQUNGOUMsR0FBc0JyOUYsRUFBSTAvRixHQUU1Qk0sR0FBc0JBLEVBQW1CaGdHLElBRXpDKy9GLEdBQWtCQSxFQUFlLy9GLEdBRW5DQSxFQUFHNCtGLFNBQVcsUUFHWDd2QixFQUFNeDBCLEtBQUsrbEQsTUFFZHhuQixHQUFlL0osRUFBTyxVQUFVLFdBQzlCLElBQUl4YixFQUFTdnpELEVBQUc4SCxXQUNaeTRGLEVBQWNodEMsR0FBVUEsRUFBT2l0QyxVQUFZanRDLEVBQU9pdEMsU0FBU3p4QixFQUFNL2hFLEtBQ2pFdXpGLEdBQ0ZBLEVBQVloekIsTUFBUXdCLEVBQU14QixLQUMxQmd6QixFQUFZL3lCLElBQUlreEIsVUFFaEI2QixFQUFZL3lCLElBQUlreEIsV0FFbEJvQixHQUFhQSxFQUFVOS9GLEVBQUl5MkMsTUFLL0JvcEQsR0FBbUJBLEVBQWdCNy9GLEdBQy9CbWdHLElBQ0ZoRCxHQUFtQm45RixFQUFJMC9GLEdBQ3ZCdkMsR0FBbUJuOUYsRUFBSTIvRixHQUN2QnpDLElBQVUsV0FDUkcsR0FBc0JyOUYsRUFBSTAvRixHQUNyQmpwRCxFQUFHa29ELFlBQ054QixHQUFtQm45RixFQUFJNC9GLEdBQ2xCUSxJQUNDSyxHQUFnQlIsR0FDbEIzNUYsV0FBV213QyxFQUFJd3BELEdBRWYzQyxHQUFtQnQ5RixFQUFJZ2dCLEVBQU15MkIsU0FPbkNzNEIsRUFBTXgwQixLQUFLK2xELE9BQ2I3QixHQUFpQkEsSUFDakJxQixHQUFhQSxFQUFVOS9GLEVBQUl5MkMsSUFHeEIwcEQsR0FBZUMsR0FDbEIzcEQsTUFJSixTQUFTaXFELEdBQU8zeEIsRUFBTzR4QixHQUNyQixJQUFJM2dHLEVBQUsrdUUsRUFBTXZCLElBR1hqSSxFQUFNdmxFLEVBQUc0K0YsWUFDWDUrRixFQUFHNCtGLFNBQVNELFdBQVksRUFDeEIzK0YsRUFBRzQrRixZQUdMLElBQUlya0QsRUFBT3VoRCxHQUFrQi9zQixFQUFNeDBCLEtBQUtwN0MsWUFDeEMsR0FBSW1tRSxFQUFRL3FCLElBQXlCLElBQWhCdjZDLEVBQUc2K0YsU0FDdEIsT0FBTzhCLElBSVQsSUFBSXA3QixFQUFNdmxFLEVBQUcwK0YsVUFBYixDQUlBLElBQUkzN0IsRUFBTXhvQixFQUFLd29CLElBQ1gvaUQsRUFBT3U2QixFQUFLdjZCLEtBQ1ptOEUsRUFBYTVoRCxFQUFLNGhELFdBQ2xCQyxFQUFlN2hELEVBQUs2aEQsYUFDcEJDLEVBQW1COWhELEVBQUs4aEQsaUJBQ3hCdUUsRUFBY3JtRCxFQUFLcW1ELFlBQ25CRixFQUFRbm1ELEVBQUttbUQsTUFDYkcsRUFBYXRtRCxFQUFLc21ELFdBQ2xCQyxFQUFpQnZtRCxFQUFLdW1ELGVBQ3RCQyxFQUFheG1ELEVBQUt3bUQsV0FDbEJ2c0QsRUFBVytGLEVBQUsvRixTQUVoQjJyRCxHQUFxQixJQUFScDlCLElBQWtCc0gsRUFDL0IrMUIsRUFBbUJDLEdBQXVCSyxHQUUxQ00sRUFBd0I5NkIsRUFDMUJSLEVBQVNseEIsR0FDTEEsRUFBU2tzRCxNQUNUbHNELEdBR0Yrd0IsRUFBTXk3QixJQUNSZCxHQUFjYyxFQUF1QixRQUFTanlCLEdBR2hELElBQUl0NEIsRUFBS3oyQyxFQUFHMCtGLFNBQVdyb0QsR0FBSyxXQUN0QnIyQyxFQUFHOEgsWUFBYzlILEVBQUc4SCxXQUFXMDRGLFdBQ2pDeGdHLEVBQUc4SCxXQUFXMDRGLFNBQVN6eEIsRUFBTS9oRSxLQUFPLE1BRWxDbXpGLElBQ0Y5QyxHQUFzQnI5RixFQUFJbzhGLEdBQzFCaUIsR0FBc0JyOUYsRUFBSXE4RixJQUV4QjVsRCxFQUFHa29ELFdBQ0R3QixHQUNGOUMsR0FBc0JyOUYsRUFBSW04RixHQUU1QjJFLEdBQWtCQSxFQUFlOWdHLEtBRWpDMmdHLElBQ0FFLEdBQWNBLEVBQVc3Z0csSUFFM0JBLEVBQUcwK0YsU0FBVyxRQUdacUMsRUFDRkEsRUFBV0UsR0FFWEEsSUFHRixTQUFTQSxJQUVIeHFELEVBQUdrb0QsYUFJRjV2QixFQUFNeDBCLEtBQUsrbEQsTUFBUXRnRyxFQUFHOEgsY0FDeEI5SCxFQUFHOEgsV0FBVzA0RixXQUFheGdHLEVBQUc4SCxXQUFXMDRGLFNBQVcsS0FBTXp4QixFQUFTLEtBQUtBLEdBRTNFNnhCLEdBQWVBLEVBQVk1Z0csR0FDdkJtZ0csSUFDRmhELEdBQW1CbjlGLEVBQUltOEYsR0FDdkJnQixHQUFtQm45RixFQUFJcThGLEdBQ3ZCYSxJQUFVLFdBQ1JHLEdBQXNCcjlGLEVBQUltOEYsR0FDckIxbEQsRUFBR2tvRCxZQUNOeEIsR0FBbUJuOUYsRUFBSW84RixHQUNsQmdFLElBQ0NLLEdBQWdCTyxHQUNsQjE2RixXQUFXbXdDLEVBQUl1cUQsR0FFZjFELEdBQW1CdDlGLEVBQUlnZ0IsRUFBTXkyQixTQU12Q2lxRCxHQUFTQSxFQUFNMWdHLEVBQUl5MkMsR0FDZDBwRCxHQUFlQyxHQUNsQjNwRCxNQU1OLFNBQVN5cEQsR0FBZXhoRCxFQUFLOUUsRUFBTW0xQixHQUNkLGlCQUFScndCLEVBQ1R0QixHQUNFLHlCQUEyQnhELEVBQTNCLHlDQUNVUyxLQUFLQyxVQUFVb0UsR0FBUSxJQUNqQ3F3QixFQUFNdEIsU0FFQ3RILE1BQU16bkIsSUFDZnRCLEdBQ0UseUJBQTJCeEQsRUFBM0IsaUVBRUFtMUIsRUFBTXRCLFNBS1osU0FBU2d6QixHQUFpQi9oRCxHQUN4QixNQUFzQixpQkFBUkEsSUFBcUJ5bkIsTUFBTXpuQixHQVMzQyxTQUFTMmhELEdBQXdCbHFELEdBQy9CLEdBQUltdkIsRUFBUW52QixHQUNWLE9BQU8sRUFFVCxJQUFJK3FELEVBQWEvcUQsRUFBR2tpQyxJQUNwQixPQUFJOVMsRUFBTTI3QixHQUVEYixHQUNMbnlFLE1BQU00cUIsUUFBUW9vRCxHQUNWQSxFQUFXLEdBQ1hBLElBR0UvcUQsRUFBRyt3QixTQUFXL3dCLEVBQUd4MUMsUUFBVSxFQUl2QyxTQUFTd2dHLEdBQVF6ekYsRUFBR3FoRSxJQUNNLElBQXBCQSxFQUFNeDBCLEtBQUsrbEQsTUFDYjlCLEdBQU16dkIsR0FJVixJQTRCSXF5QixHQTVpRkosU0FBOEJDLEdBQzVCLElBQUloMkUsRUFBR295QixFQUNIb3ZDLEVBQU0sR0FFTnYwQyxFQUFVK29ELEVBQVEvb0QsUUFDbEIwNEMsRUFBVXFRLEVBQVFyUSxRQUV0QixJQUFLM2xFLEVBQUksRUFBR0EsRUFBSWttRCxHQUFNNXdFLFNBQVUwcUIsRUFFOUIsSUFEQXdoRSxFQUFJdGIsR0FBTWxtRCxJQUFNLEdBQ1hveUIsRUFBSSxFQUFHQSxFQUFJbkYsRUFBUTMzQyxTQUFVODhDLEVBQzVCOG5CLEVBQU1qdEIsRUFBUW1GLEdBQUc4ekIsR0FBTWxtRCxNQUN6QndoRSxFQUFJdGIsR0FBTWxtRCxJQUFJeGQsS0FBS3lxQyxFQUFRbUYsR0FBRzh6QixHQUFNbG1ELEtBbUIxQyxTQUFTaTJFLEVBQVl0aEcsR0FDbkIsSUFBSXV6RCxFQUFTeTlCLEVBQVFscEYsV0FBVzlILEdBRTVCdWxFLEVBQU1oUyxJQUNSeTlCLEVBQVE3bEYsWUFBWW9vRCxFQUFRdnpELEdBSWhDLFNBQVN1aEcsRUFBcUJ4eUIsRUFBT3l5QixHQUNuQyxPQUNHQSxJQUNBenlCLEVBQU1uQixNQUVMckYsRUFBT1EsZ0JBQWdCcG9FLFFBQ3ZCNG5FLEVBQU9RLGdCQUFnQmpvRCxNQUFLLFNBQVUyZ0YsR0FDcEMsT0FBTzM3QixFQUFTMjdCLEdBQ1pBLEVBQU81bkQsS0FBS2sxQixFQUFNeEIsS0FDbEJrMEIsSUFBVzF5QixFQUFNeEIsU0FHekJoRixFQUFPWSxpQkFBaUI0RixFQUFNeEIsS0FJbEMsSUFBSW0wQixFQUFvQixFQUV4QixTQUFTQyxFQUNQNXlCLEVBQ0E2eUIsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQUMsRUFDQXY3RSxHQVlBLEdBVkk4K0MsRUFBTXdKLEVBQU12QixNQUFRakksRUFBTXk4QixLQU01Qmp6QixFQUFRaXpCLEVBQVd2N0UsR0FBU3FvRCxHQUFXQyxJQUd6Q0EsRUFBTVosY0FBZ0I0ekIsR0FpRHhCLFNBQTBCaHpCLEVBQU82eUIsRUFBb0JDLEVBQVdDLEdBQzlELElBQUl6MkUsRUFBSTBqRCxFQUFNeDBCLEtBQ2QsR0FBSWdyQixFQUFNbDZDLEdBQUksQ0FDWixJQUFJNDJFLEVBQWdCMThCLEVBQU13SixFQUFNZixvQkFBc0IzaUQsRUFBRXMwRCxVQVF4RCxHQVBJcGEsRUFBTWw2QyxFQUFJQSxFQUFFd21ELE9BQVN0TSxFQUFNbDZDLEVBQUlBLEVBQUVwcUIsT0FDbkNvcUIsRUFBRTBqRCxHQUFPLEdBTVB4SixFQUFNd0osRUFBTWYsbUJBTWQsT0FMQWswQixFQUFjbnpCLEVBQU82eUIsR0FDckI5OUIsRUFBTys5QixFQUFXOXlCLEVBQU12QixJQUFLczBCLEdBQ3pCdDhCLEVBQU95OEIsSUEwQmpCLFNBQThCbHpCLEVBQU82eUIsRUFBb0JDLEVBQVdDLEdBT2xFLElBTkEsSUFBSXoyRSxFQUtBODJFLEVBQVlwekIsRUFDVG96QixFQUFVbjBCLG1CQUVmLEdBQUl6SSxFQUFNbDZDLEdBRFY4MkUsRUFBWUEsRUFBVW4wQixrQkFBa0I4UyxRQUNoQnZtQyxPQUFTZ3JCLEVBQU1sNkMsRUFBSUEsRUFBRWxzQixZQUFhLENBQ3hELElBQUtrc0IsRUFBSSxFQUFHQSxFQUFJd2hFLEVBQUlsMEUsU0FBU2hZLFNBQVUwcUIsRUFDckN3aEUsRUFBSWwwRSxTQUFTMFMsR0FBR3ltRSxHQUFXcVEsR0FFN0JQLEVBQW1CL3pGLEtBQUtzMEYsR0FDeEIsTUFLSnIrQixFQUFPKzlCLEVBQVc5eUIsRUFBTXZCLElBQUtzMEIsR0E1Q3ZCTSxDQUFvQnJ6QixFQUFPNnlCLEVBQW9CQyxFQUFXQyxJQUVyRCxHQWpFUDlmLENBQWdCalQsRUFBTzZ5QixFQUFvQkMsRUFBV0MsR0FBMUQsQ0FJQSxJQUFJdm5ELEVBQU93MEIsRUFBTXgwQixLQUNiN3VDLEVBQVdxakUsRUFBTXJqRSxTQUNqQjZoRSxFQUFNd0IsRUFBTXhCLElBQ1poSSxFQUFNZ0ksSUFFRmh6QixHQUFRQSxFQUFLa3FDLEtBQ2ZpZCxJQUVFSCxFQUFvQnh5QixFQUFPMnlCLElBQzdCdGtELEdBQ0UsNEJBQThCbXdCLEVBQTlCLGtIQUdBd0IsRUFBTXRCLFNBS1pzQixFQUFNdkIsSUFBTXVCLEVBQU1uQixHQUNkb2pCLEVBQVFFLGdCQUFnQm5pQixFQUFNbkIsR0FBSUwsR0FDbEN5akIsRUFBUWx4RixjQUFjeXRFLEVBQUt3QixHQUMvQnN6QixFQUFTdHpCLEdBSVB1ekIsRUFBZXZ6QixFQUFPcmpFLEVBQVVrMkYsR0FDNUJyOEIsRUFBTWhyQixJQUNSZ29ELEVBQWtCeHpCLEVBQU82eUIsR0FFM0I5OUIsRUFBTys5QixFQUFXOXlCLEVBQU12QixJQUFLczBCLEdBRzNCdm5ELEdBQVFBLEVBQUtrcUMsS0FDZmlkLEtBRU9sOEIsRUFBT3VKLEVBQU1YLFlBQ3RCVyxFQUFNdkIsSUFBTXdqQixFQUFRRyxjQUFjcGlCLEVBQU1ubkQsTUFDeENrOEMsRUFBTys5QixFQUFXOXlCLEVBQU12QixJQUFLczBCLEtBRTdCL3lCLEVBQU12QixJQUFNd2pCLEVBQVFyc0IsZUFBZW9LLEVBQU1ubkQsTUFDekNrOEMsRUFBTys5QixFQUFXOXlCLEVBQU12QixJQUFLczBCLEtBMEJqQyxTQUFTSSxFQUFlbnpCLEVBQU82eUIsR0FDekJyOEIsRUFBTXdKLEVBQU14MEIsS0FBS2lvRCxpQkFDbkJaLEVBQW1CL3pGLEtBQUsvTSxNQUFNOGdHLEVBQW9CN3lCLEVBQU14MEIsS0FBS2lvRCxlQUM3RHp6QixFQUFNeDBCLEtBQUtpb0QsY0FBZ0IsTUFFN0J6ekIsRUFBTXZCLElBQU11QixFQUFNZixrQkFBa0JrZixJQUNoQ3VWLEVBQVkxekIsSUFDZHd6QixFQUFrQnh6QixFQUFPNnlCLEdBQ3pCUyxFQUFTdHpCLEtBSVQyaUIsR0FBWTNpQixHQUVaNnlCLEVBQW1CL3pGLEtBQUtraEUsSUEwQjVCLFNBQVNqTCxFQUFRdlEsRUFBUWlhLEVBQUtrMUIsR0FDeEJuOUIsRUFBTWhTLEtBQ0pnUyxFQUFNbTlCLEdBQ0oxUixFQUFRbHBGLFdBQVc0NkYsS0FBWW52QyxHQUNqQ3k5QixFQUFRdmxGLGFBQWE4bkQsRUFBUWlhLEVBQUtrMUIsR0FHcEMxUixFQUFRcmxGLFlBQVk0bkQsRUFBUWlhLElBS2xDLFNBQVM4MEIsRUFBZ0J2ekIsRUFBT3JqRSxFQUFVazJGLEdBQ3hDLEdBQUkxekUsTUFBTTRxQixRQUFRcHRDLEdBQVcsQ0FFekJpM0YsRUFBbUJqM0YsR0FFckIsSUFBSyxJQUFJMmYsRUFBSSxFQUFHQSxFQUFJM2YsRUFBUy9LLFNBQVUwcUIsRUFDckNzMkUsRUFBVWoyRixFQUFTMmYsR0FBSXUyRSxFQUFvQjd5QixFQUFNdkIsSUFBSyxNQUFNLEVBQU05aEUsRUFBVTJmLFFBRXJFbzZDLEVBQVlzSixFQUFNbm5ELE9BQzNCb3BFLEVBQVFybEYsWUFBWW9qRSxFQUFNdkIsSUFBS3dqQixFQUFRcnNCLGVBQWU5OUIsT0FBT2tvQyxFQUFNbm5ELFFBSXZFLFNBQVM2NkUsRUFBYTF6QixHQUNwQixLQUFPQSxFQUFNZixtQkFDWGUsRUFBUUEsRUFBTWYsa0JBQWtCOFMsT0FFbEMsT0FBT3ZiLEVBQU13SixFQUFNeEIsS0FHckIsU0FBU2cxQixFQUFtQnh6QixFQUFPNnlCLEdBQ2pDLElBQUssSUFBSWhWLEVBQU0sRUFBR0EsRUFBTUMsRUFBSWpsQyxPQUFPam5ELFNBQVVpc0YsRUFDM0NDLEVBQUlqbEMsT0FBT2dsQyxHQUFLa0YsR0FBVy9pQixHQUd6QnhKLEVBREpsNkMsRUFBSTBqRCxFQUFNeDBCLEtBQUtzM0IsUUFFVHRNLEVBQU1sNkMsRUFBRXU4QixTQUFXdjhCLEVBQUV1OEIsT0FBT2txQyxHQUFXL2lCLEdBQ3ZDeEosRUFBTWw2QyxFQUFFeTRDLFNBQVc4OUIsRUFBbUIvekYsS0FBS2toRSxJQU9uRCxTQUFTc3pCLEVBQVV0ekIsR0FDakIsSUFBSTFqRCxFQUNKLEdBQUlrNkMsRUFBTWw2QyxFQUFJMGpELEVBQU1oQixXQUNsQmlqQixFQUFRUSxjQUFjemlCLEVBQU12QixJQUFLbmlELFFBR2pDLElBREEsSUFBSXUzRSxFQUFXN3pCLEVBQ1I2ekIsR0FDRHI5QixFQUFNbDZDLEVBQUl1M0UsRUFBU24xQixVQUFZbEksRUFBTWw2QyxFQUFJQSxFQUFFNmdELFNBQVNpVCxXQUN0RDZSLEVBQVFRLGNBQWN6aUIsRUFBTXZCLElBQUtuaUQsR0FFbkN1M0UsRUFBV0EsRUFBU3J2QyxPQUlwQmdTLEVBQU1sNkMsRUFBSTYwRCxLQUNaNzBELElBQU0wakQsRUFBTXRCLFNBQ1pwaUQsSUFBTTBqRCxFQUFNbEIsV0FDWnRJLEVBQU1sNkMsRUFBSUEsRUFBRTZnRCxTQUFTaVQsV0FFckI2UixFQUFRUSxjQUFjemlCLEVBQU12QixJQUFLbmlELEdBSXJDLFNBQVN3M0UsRUFBV2hCLEVBQVdDLEVBQVFuZSxFQUFRM3NCLEVBQVVDLEVBQVEycUMsR0FDL0QsS0FBTzVxQyxHQUFZQyxJQUFVRCxFQUMzQjJxQyxFQUFVaGUsRUFBTzNzQixHQUFXNHFDLEVBQW9CQyxFQUFXQyxHQUFRLEVBQU9uZSxFQUFRM3NCLEdBSXRGLFNBQVM4ckMsRUFBbUIvekIsR0FDMUIsSUFBSTFqRCxFQUFHb3lCLEVBQ0hsRCxFQUFPdzBCLEVBQU14MEIsS0FDakIsR0FBSWdyQixFQUFNaHJCLEdBRVIsSUFESWdyQixFQUFNbDZDLEVBQUlrdkIsRUFBS3MzQixPQUFTdE0sRUFBTWw2QyxFQUFJQSxFQUFFOXBCLFVBQVk4cEIsRUFBRTBqRCxHQUNqRDFqRCxFQUFJLEVBQUdBLEVBQUl3aEUsRUFBSXRyRixRQUFRWixTQUFVMHFCLEVBQUt3aEUsRUFBSXRyRixRQUFROHBCLEdBQUcwakQsR0FFNUQsR0FBSXhKLEVBQU1sNkMsRUFBSTBqRCxFQUFNcmpFLFVBQ2xCLElBQUsreEMsRUFBSSxFQUFHQSxFQUFJc3hCLEVBQU1yakUsU0FBUy9LLFNBQVU4OEMsRUFDdkNxbEQsRUFBa0IvekIsRUFBTXJqRSxTQUFTK3hDLElBS3ZDLFNBQVNzbEQsRUFBY3BmLEVBQVEzc0IsRUFBVUMsR0FDdkMsS0FBT0QsR0FBWUMsSUFBVUQsRUFBVSxDQUNyQyxJQUFJZ3NDLEVBQUtyZixFQUFPM3NCLEdBQ1p1TyxFQUFNeTlCLEtBQ0p6OUIsRUFBTXk5QixFQUFHejFCLE1BQ1gwMUIsRUFBMEJELEdBQzFCRixFQUFrQkUsSUFFbEIxQixFQUFXMEIsRUFBR3gxQixPQU10QixTQUFTeTFCLEVBQTJCbDBCLEVBQU80eEIsR0FDekMsR0FBSXA3QixFQUFNbzdCLElBQU9wN0IsRUFBTXdKLEVBQU14MEIsTUFBTyxDQUNsQyxJQUFJbHZCLEVBQ0FzckIsRUFBWWsyQyxFQUFJOWtGLE9BQU9wSCxPQUFTLEVBYXBDLElBWkk0a0UsRUFBTW83QixHQUdSQSxFQUFHaHFELFdBQWFBLEVBR2hCZ3FELEVBdFJOLFNBQXFCdUMsRUFBVXZzRCxHQUM3QixTQUFTK2hDLElBQ3VCLEtBQXhCQSxFQUFVL2hDLFdBQ2QycUQsRUFBVzRCLEdBSWYsT0FEQXhxQixFQUFVL2hDLFVBQVlBLEVBQ2YraEMsRUErUUV5cUIsQ0FBV3AwQixFQUFNdkIsSUFBSzcyQixHQUd6QjR1QixFQUFNbDZDLEVBQUkwakQsRUFBTWYsb0JBQXNCekksRUFBTWw2QyxFQUFJQSxFQUFFeTFELFNBQVd2YixFQUFNbDZDLEVBQUVrdkIsT0FDdkUwb0QsRUFBMEI1M0UsRUFBR3MxRSxHQUUxQnQxRSxFQUFJLEVBQUdBLEVBQUl3aEUsRUFBSTlrRixPQUFPcEgsU0FBVTBxQixFQUNuQ3doRSxFQUFJOWtGLE9BQU9zakIsR0FBRzBqRCxFQUFPNHhCLEdBRW5CcDdCLEVBQU1sNkMsRUFBSTBqRCxFQUFNeDBCLEtBQUtzM0IsT0FBU3RNLEVBQU1sNkMsRUFBSUEsRUFBRXRqQixRQUM1Q3NqQixFQUFFMGpELEVBQU80eEIsR0FFVEEsU0FHRlcsRUFBV3Z5QixFQUFNdkIsS0E0RXJCLFNBQVNtMUIsRUFBb0JqM0YsR0FFM0IsSUFEQSxJQUFJMDNGLEVBQVcsR0FDTi8zRSxFQUFJLEVBQUdBLEVBQUkzZixFQUFTL0ssT0FBUTBxQixJQUFLLENBQ3hDLElBQUkwakQsRUFBUXJqRSxFQUFTMmYsR0FDakJyZSxFQUFNK2hFLEVBQU0vaEUsSUFDWnU0RCxFQUFNdjRELEtBQ0pvMkYsRUFBU3AyRixHQUNYb3dDLEdBQ0csNkJBQStCcHdDLEVBQU0scUNBQ3RDK2hFLEVBQU10QixTQUdSMjFCLEVBQVNwMkYsSUFBTyxJQU14QixTQUFTcTJGLEVBQWN6MEIsRUFBTTAwQixFQUFPdnZDLEVBQU9DLEdBQ3pDLElBQUssSUFBSTNvQyxFQUFJMG9DLEVBQU8xb0MsRUFBSTJvQyxFQUFLM29DLElBQUssQ0FDaEMsSUFBSWt3QixFQUFJK25ELEVBQU1qNEUsR0FDZCxHQUFJazZDLEVBQU1ocUIsSUFBTXcyQyxHQUFVbmpCLEVBQU1yekIsR0FBTSxPQUFPbHdCLEdBSWpELFNBQVNrNEUsRUFDUG5qQixFQUNBclIsRUFDQTZ5QixFQUNBSSxFQUNBdjdFLEVBQ0ErOEUsR0FFQSxHQUFJcGpCLElBQWFyUixFQUFqQixDQUlJeEosRUFBTXdKLEVBQU12QixNQUFRakksRUFBTXk4QixLQUU1Qmp6QixFQUFRaXpCLEVBQVd2N0UsR0FBU3FvRCxHQUFXQyxJQUd6QyxJQUFJdkIsRUFBTXVCLEVBQU12QixJQUFNNFMsRUFBUzVTLElBRS9CLEdBQUloSSxFQUFPNGEsRUFBUzVSLG9CQUNkakosRUFBTXdKLEVBQU1wQixhQUFheVUsVUFDM0JxaEIsRUFBUXJqQixFQUFTNVMsSUFBS3VCLEVBQU82eUIsR0FFN0I3eUIsRUFBTVAsb0JBQXFCLE9BUy9CLEdBQUloSixFQUFPdUosRUFBTWIsV0FDZjFJLEVBQU80YSxFQUFTbFMsV0FDaEJhLEVBQU0vaEUsTUFBUW96RSxFQUFTcHpFLE1BQ3RCdzRELEVBQU91SixFQUFNVixXQUFhN0ksRUFBT3VKLEVBQU1ULFNBRXhDUyxFQUFNZixrQkFBb0JvUyxFQUFTcFMsc0JBTHJDLENBU0EsSUFBSTNpRCxFQUNBa3ZCLEVBQU93MEIsRUFBTXgwQixLQUNiZ3JCLEVBQU1ockIsSUFBU2dyQixFQUFNbDZDLEVBQUlrdkIsRUFBS3MzQixPQUFTdE0sRUFBTWw2QyxFQUFJQSxFQUFFdzBELFdBQ3JEeDBELEVBQUUrMEQsRUFBVXJSLEdBR2QsSUFBSXUwQixFQUFRbGpCLEVBQVMxMEUsU0FDakJzM0YsRUFBS2owQixFQUFNcmpFLFNBQ2YsR0FBSTY1RCxFQUFNaHJCLElBQVNrb0QsRUFBWTF6QixHQUFRLENBQ3JDLElBQUsxakQsRUFBSSxFQUFHQSxFQUFJd2hFLEVBQUl0cEIsT0FBTzVpRSxTQUFVMHFCLEVBQUt3aEUsRUFBSXRwQixPQUFPbDRDLEdBQUcrMEQsRUFBVXJSLEdBQzlEeEosRUFBTWw2QyxFQUFJa3ZCLEVBQUtzM0IsT0FBU3RNLEVBQU1sNkMsRUFBSUEsRUFBRWs0QyxTQUFXbDRDLEVBQUUrMEQsRUFBVXJSLEdBRTdEekosRUFBUXlKLEVBQU1ubkQsTUFDWjI5QyxFQUFNKzlCLElBQVUvOUIsRUFBTXk5QixHQUNwQk0sSUFBVU4sR0F4SnBCLFNBQXlCbkIsRUFBV3lCLEVBQU9JLEVBQU85QixFQUFvQjRCLEdBQ3BFLElBUUlHLEVBQWFDLEVBQVVDLEVBUnZCQyxFQUFjLEVBQ2RDLEVBQWMsRUFDZEMsRUFBWVYsRUFBTTNpRyxPQUFTLEVBQzNCc2pHLEVBQWdCWCxFQUFNLEdBQ3RCWSxFQUFjWixFQUFNVSxHQUNwQkcsRUFBWVQsRUFBTS9pRyxPQUFTLEVBQzNCeWpHLEVBQWdCVixFQUFNLEdBQ3RCVyxFQUFjWCxFQUFNUyxHQU1wQkcsR0FBV2QsRUFNZixJQUhFYixFQUFtQmUsR0FHZEksR0FBZUUsR0FBYUQsR0FBZUksR0FDNUM3K0IsRUFBUTIrQixHQUNWQSxFQUFnQlgsSUFBUVEsR0FDZngrQixFQUFRNCtCLEdBQ2pCQSxFQUFjWixJQUFRVSxHQUNialMsR0FBVWtTLEVBQWVHLElBQ2xDYixFQUFXVSxFQUFlRyxFQUFleEMsRUFBb0I4QixFQUFPSyxHQUNwRUUsRUFBZ0JYLElBQVFRLEdBQ3hCTSxFQUFnQlYsSUFBUUssSUFDZmhTLEdBQVVtUyxFQUFhRyxJQUNoQ2QsRUFBV1csRUFBYUcsRUFBYXpDLEVBQW9COEIsRUFBT1MsR0FDaEVELEVBQWNaLElBQVFVLEdBQ3RCSyxFQUFjWCxJQUFRUyxJQUNicFMsR0FBVWtTLEVBQWVJLElBQ2xDZCxFQUFXVSxFQUFlSSxFQUFhekMsRUFBb0I4QixFQUFPUyxHQUNsRUcsR0FBV3RULEVBQVF2bEYsYUFBYW8yRixFQUFXb0MsRUFBY3oyQixJQUFLd2pCLEVBQVFNLFlBQVk0UyxFQUFZMTJCLE1BQzlGeTJCLEVBQWdCWCxJQUFRUSxHQUN4Qk8sRUFBY1gsSUFBUVMsSUFDYnBTLEdBQVVtUyxFQUFhRSxJQUNoQ2IsRUFBV1csRUFBYUUsRUFBZXhDLEVBQW9COEIsRUFBT0ssR0FDbEVPLEdBQVd0VCxFQUFRdmxGLGFBQWFvMkYsRUFBV3FDLEVBQVkxMkIsSUFBS3kyQixFQUFjejJCLEtBQzFFMDJCLEVBQWNaLElBQVFVLEdBQ3RCSSxFQUFnQlYsSUFBUUssS0FFcEJ6K0IsRUFBUXErQixLQUFnQkEsRUFBY3hSLEdBQWtCbVIsRUFBT1EsRUFBYUUsSUFJNUUxK0IsRUFISnMrQixFQUFXcitCLEVBQU02K0IsRUFBY3AzRixLQUMzQjIyRixFQUFZUyxFQUFjcDNGLEtBQzFCcTJGLEVBQWFlLEVBQWVkLEVBQU9RLEVBQWFFLElBRWxEckMsRUFBVXlDLEVBQWV4QyxFQUFvQkMsRUFBV29DLEVBQWN6MkIsS0FBSyxFQUFPazJCLEVBQU9LLEdBR3JGaFMsR0FESjhSLEVBQWNQLEVBQU1NLEdBQ09RLElBQ3pCYixFQUFXTSxFQUFhTyxFQUFleEMsRUFBb0I4QixFQUFPSyxHQUNsRVQsRUFBTU0sUUFBWTdpRyxFQUNsQnVqRyxHQUFXdFQsRUFBUXZsRixhQUFhbzJGLEVBQVdnQyxFQUFZcjJCLElBQUt5MkIsRUFBY3oyQixNQUcxRW0wQixFQUFVeUMsRUFBZXhDLEVBQW9CQyxFQUFXb0MsRUFBY3oyQixLQUFLLEVBQU9rMkIsRUFBT0ssR0FHN0ZLLEVBQWdCVixJQUFRSyxJQUd4QkQsRUFBY0UsRUFFaEJuQixFQUFVaEIsRUFERHY4QixFQUFRbytCLEVBQU1TLEVBQVksSUFBTSxLQUFPVCxFQUFNUyxFQUFZLEdBQUczMkIsSUFDeENrMkIsRUFBT0ssRUFBYUksRUFBV3ZDLEdBQ25EbUMsRUFBY0ksR0FDdkJwQixFQUFhTyxFQUFPUSxFQUFhRSxHQW9GWE8sQ0FBZS8yQixFQUFLODFCLEVBQU9OLEVBQUlwQixFQUFvQjRCLEdBQzlEaitCLEVBQU15OUIsSUFFYkwsRUFBbUJLLEdBRWpCejlCLEVBQU02YSxFQUFTeDRELE9BQVNvcEUsRUFBUU8sZUFBZS9qQixFQUFLLElBQ3hEcTFCLEVBQVVyMUIsRUFBSyxLQUFNdzFCLEVBQUksRUFBR0EsRUFBR3JpRyxPQUFTLEVBQUdpaEcsSUFDbENyOEIsRUFBTSs5QixHQUNmUCxFQUFhTyxFQUFPLEVBQUdBLEVBQU0zaUcsT0FBUyxHQUM3QjRrRSxFQUFNNmEsRUFBU3g0RCxPQUN4Qm9wRSxFQUFRTyxlQUFlL2pCLEVBQUssSUFFckI0UyxFQUFTeDRELE9BQVNtbkQsRUFBTW5uRCxNQUNqQ29wRSxFQUFRTyxlQUFlL2pCLEVBQUt1QixFQUFNbm5ELE1BRWhDMjlDLEVBQU1ockIsSUFDSmdyQixFQUFNbDZDLEVBQUlrdkIsRUFBS3MzQixPQUFTdE0sRUFBTWw2QyxFQUFJQSxFQUFFbTVFLFlBQWNuNUUsRUFBRSswRCxFQUFVclIsS0FJdEUsU0FBUzAxQixFQUFrQjExQixFQUFPbmhFLEVBQU84MkYsR0FHdkMsR0FBSWwvQixFQUFPay9CLElBQVluL0IsRUFBTXdKLEVBQU14YixRQUNqQ3diLEVBQU14YixPQUFPaFosS0FBS2lvRCxjQUFnQjUwRixPQUVsQyxJQUFLLElBQUl5ZCxFQUFJLEVBQUdBLEVBQUl6ZCxFQUFNak4sU0FBVTBxQixFQUNsQ3pkLEVBQU15ZCxHQUFHa3ZCLEtBQUtzM0IsS0FBSy9OLE9BQU9sMkQsRUFBTXlkLElBS3RDLElBQUlzNUUsR0FBa0IsRUFLbEJDLEVBQW1CeCtCLEVBQVEsMkNBRy9CLFNBQVNxOUIsRUFBU2oyQixFQUFLdUIsRUFBTzZ5QixFQUFvQkosR0FDaEQsSUFBSW4yRSxFQUNBa2lELEVBQU13QixFQUFNeEIsSUFDWmh6QixFQUFPdzBCLEVBQU14MEIsS0FDYjd1QyxFQUFXcWpFLEVBQU1yakUsU0FJckIsR0FIQTgxRixFQUFTQSxHQUFXam5ELEdBQVFBLEVBQUtrcUMsSUFDakMxVixFQUFNdkIsSUFBTUEsRUFFUmhJLEVBQU91SixFQUFNWCxZQUFjN0ksRUFBTXdKLEVBQU1wQixjQUV6QyxPQURBb0IsRUFBTVAsb0JBQXFCLEdBQ3BCLEVBSVAsSUErRUosU0FBMEJJLEVBQU1HLEVBQU95eUIsR0FDckMsT0FBSWo4QixFQUFNd0osRUFBTXhCLEtBQ2dDLElBQXZDd0IsRUFBTXhCLElBQUl4aEUsUUFBUSxtQkFDdEJ3MUYsRUFBb0J4eUIsRUFBT3l5QixJQUM1Qnp5QixFQUFNeEIsSUFBSWpuRCxpQkFBbUJzb0QsRUFBS3ZvRCxTQUFXdW9ELEVBQUt2b0QsUUFBUUMsZUFHckRzb0QsRUFBS2l3QixZQUFjOXZCLEVBQU1YLFVBQVksRUFBSSxHQXRGM0N5MkIsQ0FBZ0JyM0IsRUFBS3VCLEVBQU95eUIsR0FDL0IsT0FBTyxFQUdYLEdBQUlqOEIsRUFBTWhyQixLQUNKZ3JCLEVBQU1sNkMsRUFBSWt2QixFQUFLczNCLE9BQVN0TSxFQUFNbDZDLEVBQUlBLEVBQUVwcUIsT0FBU29xQixFQUFFMGpELEdBQU8sR0FDdER4SixFQUFNbDZDLEVBQUkwakQsRUFBTWYsb0JBR2xCLE9BREFrMEIsRUFBY256QixFQUFPNnlCLElBQ2QsRUFHWCxHQUFJcjhCLEVBQU1nSSxHQUFNLENBQ2QsR0FBSWhJLEVBQU03NUQsR0FFUixHQUFLOGhFLEVBQUlzM0IsZ0JBSVAsR0FBSXYvQixFQUFNbDZDLEVBQUlrdkIsSUFBU2dyQixFQUFNbDZDLEVBQUlBLEVBQUVveEQsV0FBYWxYLEVBQU1sNkMsRUFBSUEsRUFBRXl1RSxZQUMxRCxHQUFJenVFLElBQU1taUQsRUFBSXNzQixVQVVaLE1BUnVCLG9CQUFacDlDLFNBQ1Jpb0QsSUFFREEsR0FBa0IsRUFDbEJqb0QsUUFBUVUsS0FBSyxXQUFZb3dCLEdBQ3pCOXdCLFFBQVFVLEtBQUsscUJBQXNCL3hCLEdBQ25DcXhCLFFBQVFVLEtBQUsscUJBQXNCb3dCLEVBQUlzc0IsYUFFbEMsTUFFSixDQUlMLElBRkEsSUFBSWlMLEdBQWdCLEVBQ2hCOVUsRUFBWXppQixFQUFJOUksV0FDWGtvQixFQUFNLEVBQUdBLEVBQU1saEYsRUFBUy9LLE9BQVFpc0YsSUFBTyxDQUM5QyxJQUFLcUQsSUFBY3dULEVBQVF4VCxFQUFXdmtGLEVBQVNraEYsR0FBTWdWLEVBQW9CSixHQUFTLENBQ2hGdUQsR0FBZ0IsRUFDaEIsTUFFRjlVLEVBQVlBLEVBQVVxQixZQUl4QixJQUFLeVQsR0FBaUI5VSxFQVNwQixNQVB1QixvQkFBWnZ6QyxTQUNSaW9ELElBRURBLEdBQWtCLEVBQ2xCam9ELFFBQVFVLEtBQUssV0FBWW93QixHQUN6Qjl3QixRQUFRVSxLQUFLLHNDQUF1Q293QixFQUFJa3NCLFdBQVlodUYsS0FFL0QsT0F0Q1g0MkYsRUFBZXZ6QixFQUFPcmpFLEVBQVVrMkYsR0EyQ3BDLEdBQUlyOEIsRUFBTWhyQixHQUFPLENBQ2YsSUFBSXlxRCxHQUFhLEVBQ2pCLElBQUssSUFBSWg0RixLQUFPdXRDLEVBQ2QsSUFBS3FxRCxFQUFpQjUzRixHQUFNLENBQzFCZzRGLEdBQWEsRUFDYnpDLEVBQWtCeHpCLEVBQU82eUIsR0FDekIsT0FHQ29ELEdBQWN6cUQsRUFBWSxPQUU3QnE5QixHQUFTcjlCLEVBQVksYUFHaEJpekIsRUFBSWp6QixPQUFTdzBCLEVBQU1ubkQsT0FDNUI0bEQsRUFBSWp6QixLQUFPdzBCLEVBQU1ubkQsTUFFbkIsT0FBTyxFQWNULE9BQU8sU0FBZ0J3NEQsRUFBVXJSLEVBQU8wUSxFQUFXK2pCLEdBQ2pELElBQUlsK0IsRUFBUXlKLEdBQVosQ0FLQSxJQUFJazJCLEdBQWlCLEVBQ2pCckQsRUFBcUIsR0FFekIsR0FBSXQ4QixFQUFROGEsR0FFVjZrQixHQUFpQixFQUNqQnRELEVBQVU1eUIsRUFBTzZ5QixPQUNaLENBQ0wsSUFBSXNELEVBQWdCMy9CLEVBQU02YSxFQUFTeWUsVUFDbkMsSUFBS3FHLEdBQWlCblQsR0FBVTNSLEVBQVVyUixHQUV4Q3cwQixFQUFXbmpCLEVBQVVyUixFQUFPNnlCLEVBQW9CLEtBQU0sS0FBTTRCLE9BQ3ZELENBQ0wsR0FBSTBCLEVBQWUsQ0FRakIsR0FKMEIsSUFBdEI5a0IsRUFBU3llLFVBQWtCemUsRUFBU2o4QyxhQUFhaWtDLEtBQ25EZ1ksRUFBUzk0RSxnQkFBZ0I4Z0UsR0FDekJxWCxHQUFZLEdBRVZqYSxFQUFPaWEsR0FBWSxDQUNyQixHQUFJZ2tCLEVBQVFyakIsRUFBVXJSLEVBQU82eUIsR0FFM0IsT0FEQTZDLEVBQWlCMTFCLEVBQU82eUIsR0FBb0IsR0FDckN4aEIsRUFFUGhqQyxHQUNFLHlRQXRuQlFvd0IsRUFnb0JTNFMsRUFBdkJBLEVBL25CQyxJQUFJOVMsR0FBTTBqQixFQUFRM3FFLFFBQVFtbkQsR0FBS2xuRCxjQUFlLEdBQUksUUFBSXZsQixFQUFXeXNFLEdBbW9CcEUsSUFBSTIzQixFQUFTL2tCLEVBQVM1UyxJQUNsQnEwQixFQUFZN1EsRUFBUWxwRixXQUFXcTlGLEdBY25DLEdBWEF4RCxFQUNFNXlCLEVBQ0E2eUIsRUFJQXVELEVBQU96RyxTQUFXLEtBQU9tRCxFQUN6QjdRLEVBQVFNLFlBQVk2VCxJQUlsQjUvQixFQUFNd0osRUFBTXhiLFFBR2QsSUFGQSxJQUFJcXZDLEVBQVc3ekIsRUFBTXhiLE9BQ2pCNnhDLEVBQVkzQyxFQUFZMXpCLEdBQ3JCNnpCLEdBQVUsQ0FDZixJQUFLLElBQUl2M0UsRUFBSSxFQUFHQSxFQUFJd2hFLEVBQUl0ckYsUUFBUVosU0FBVTBxQixFQUN4Q3doRSxFQUFJdHJGLFFBQVE4cEIsR0FBR3UzRSxHQUdqQixHQURBQSxFQUFTcDFCLElBQU11QixFQUFNdkIsSUFDakI0M0IsRUFBVyxDQUNiLElBQUssSUFBSXhZLEVBQU0sRUFBR0EsRUFBTUMsRUFBSWpsQyxPQUFPam5ELFNBQVVpc0YsRUFDM0NDLEVBQUlqbEMsT0FBT2dsQyxHQUFLa0YsR0FBVzhRLEdBSzdCLElBQUk5K0IsRUFBUzgrQixFQUFTcm9ELEtBQUtzM0IsS0FBSy9OLE9BQ2hDLEdBQUlBLEVBQU9vVixPQUVULElBQUssSUFBSW1zQixFQUFNLEVBQUdBLEVBQU12aEMsRUFBT3VVLElBQUkxM0UsT0FBUTBrRyxJQUN6Q3ZoQyxFQUFPdVUsSUFBSWd0QixVQUlmM1QsR0FBWWtSLEdBRWRBLEVBQVdBLEVBQVNydkMsT0FLcEJnUyxFQUFNczhCLEdBQ1JrQixFQUFhLENBQUMzaUIsR0FBVyxFQUFHLEdBQ25CN2EsRUFBTTZhLEVBQVM3UyxNQUN4QnUxQixFQUFrQjFpQixJQU14QixPQURBcWtCLEVBQWlCMTFCLEVBQU82eUIsRUFBb0JxRCxHQUNyQ2wyQixFQUFNdkIsSUExckJmLElBQXNCQSxFQXVsQmRqSSxFQUFNNmEsSUFBYTBpQixFQUFrQjFpQixJQXE4RG5Da2xCLENBQW9CLENBQUV0VSxRQUFTQSxHQUFTMTRDLFFBZjlCLENBQ3BCMmhDLEdBQ0E4YSxHQUNBampDLEdBQ0EycUIsR0FDQXY4RSxHQWxCZTRwRSxFQUFZLENBQzNCbGlCLE9BQVF1NUMsR0FDUnhvRixTQUFVd29GLEdBQ1ZwNUYsT0FBUSxTQUFvQmduRSxFQUFPNHhCLElBRVQsSUFBcEI1eEIsRUFBTXgwQixLQUFLK2xELEtBQ2JJLEdBQU0zeEIsRUFBTzR4QixHQUViQSxNQUdGLElBZTBCdG9ELE9BQU9tN0MsTUFVakNucEIsR0FFRnhxRSxTQUFTK0IsaUJBQWlCLG1CQUFtQixXQUMzQyxJQUFJNUIsRUFBS0gsU0FBUzBLLGNBQ2R2SyxHQUFNQSxFQUFHdWxHLFFBQ1hDLEdBQVF4bEcsRUFBSSxZQUtsQixJQUFJeWxHLEdBQVksQ0FDZHIyQixTQUFVLFNBQW1CcHZFLEVBQUkwbEcsRUFBUzMyQixFQUFPcVIsR0FDN0IsV0FBZHJSLEVBQU14QixLQUVKNlMsRUFBUzVTLE1BQVE0UyxFQUFTNVMsSUFBSW00QixVQUNoQzdzQixHQUFlL0osRUFBTyxhQUFhLFdBQ2pDMDJCLEdBQVV2UyxpQkFBaUJsekYsRUFBSTBsRyxFQUFTMzJCLE1BRzFDNjJCLEdBQVk1bEcsRUFBSTBsRyxFQUFTMzJCLEVBQU10QixTQUVqQ3p0RSxFQUFHMmxHLFVBQVksR0FBRzdnRSxJQUFJOS9CLEtBQUtoRixFQUFHMkIsUUFBU3c5QixNQUNoQixhQUFkNHZDLEVBQU14QixLQUFzQndqQixHQUFnQi93RixFQUFHZ2dCLFNBQ3hEaGdCLEVBQUdtNkYsWUFBY3VMLEVBQVFyUyxVQUNwQnFTLEVBQVFyUyxVQUFVak0sT0FDckJwbkYsRUFBRzRCLGlCQUFpQixtQkFBb0Jpa0csSUFDeEM3bEcsRUFBRzRCLGlCQUFpQixpQkFBa0Jra0csSUFLdEM5bEcsRUFBRzRCLGlCQUFpQixTQUFVa2tHLElBRTFCejdCLElBQ0ZycUUsRUFBR3VsRyxRQUFTLE1BTXBCclMsaUJBQWtCLFNBQTJCbHpGLEVBQUkwbEcsRUFBUzMyQixHQUN4RCxHQUFrQixXQUFkQSxFQUFNeEIsSUFBa0IsQ0FDMUJxNEIsR0FBWTVsRyxFQUFJMGxHLEVBQVMzMkIsRUFBTXRCLFNBSy9CLElBQUlzNEIsRUFBYy9sRyxFQUFHMmxHLFVBQ2pCSyxFQUFhaG1HLEVBQUcybEcsVUFBWSxHQUFHN2dFLElBQUk5L0IsS0FBS2hGLEVBQUcyQixRQUFTdzlCLElBQ3BENm1FLEVBQVdsbEYsTUFBSyxTQUFVMDRCLEVBQUdudUIsR0FBSyxPQUFRbzhDLEVBQVdqdUIsRUFBR3VzRCxFQUFZMTZFLFNBR3REcnJCLEVBQUdpeEYsU0FDZnlVLEVBQVF0K0YsTUFBTTBaLE1BQUssU0FBVTQ4QixHQUFLLE9BQU91b0QsR0FBb0J2b0QsRUFBR3NvRCxNQUNoRU4sRUFBUXQrRixRQUFVcytGLEVBQVExZCxVQUFZaWUsR0FBb0JQLEVBQVF0K0YsTUFBTzQrRixLQUUzRVIsR0FBUXhsRyxFQUFJLGFBT3RCLFNBQVM0bEcsR0FBYTVsRyxFQUFJMGxHLEVBQVM5NUIsR0FDakNzNkIsR0FBb0JsbUcsRUFBSTBsRyxFQUFTOTVCLElBRTdCeEIsR0FBUUUsSUFDVmhrRSxZQUFXLFdBQ1Q0L0YsR0FBb0JsbUcsRUFBSTBsRyxFQUFTOTVCLEtBQ2hDLEdBSVAsU0FBU3M2QixHQUFxQmxtRyxFQUFJMGxHLEVBQVM5NUIsR0FDekMsSUFBSXhrRSxFQUFRcytGLEVBQVF0K0YsTUFDaEIrK0YsRUFBYW5tRyxFQUFHaXhGLFNBQ3BCLElBQUlrVixHQUFlajRFLE1BQU00cUIsUUFBUTF4QyxHQUFqQyxDQVNBLElBREEsSUFBSWkvQixFQUFVMnNCLEVBQ0wzbkMsRUFBSSxFQUFHcTRCLEVBQUkxakQsRUFBRzJCLFFBQVFoQixPQUFRMHFCLEVBQUlxNEIsRUFBR3I0QixJQUU1QyxHQURBMm5DLEVBQVNoekQsRUFBRzJCLFFBQVEwcEIsR0FDaEI4NkUsRUFDRjkvRCxFQUFXNmhDLEVBQWE5Z0UsRUFBTyszQixHQUFTNnpCLEtBQVksRUFDaERBLEVBQU8zc0IsV0FBYUEsSUFDdEIyc0IsRUFBTzNzQixTQUFXQSxRQUdwQixHQUFJb2hDLEVBQVd0b0MsR0FBUzZ6QixHQUFTNXJELEdBSS9CLFlBSElwSCxFQUFHbXBCLGdCQUFrQmtDLElBQ3ZCcnJCLEVBQUdtcEIsY0FBZ0JrQyxJQU10Qjg2RSxJQUNIbm1HLEVBQUdtcEIsZUFBaUIsUUF6QnBCaTBCLEdBQ0UsNkJBQWlDc29ELEVBQWtCLFdBQW5ELHNEQUNzRC9pRyxPQUFPdkIsVUFBVW0rQixTQUFTdjZCLEtBQUtvQyxHQUFPMEQsTUFBTSxHQUFJLEdBQ3RHOGdFLEdBMEJOLFNBQVNxNkIsR0FBcUI3K0YsRUFBT3pGLEdBQ25DLE9BQU9BLEVBQVFtbUUsT0FBTSxTQUFVdHVCLEdBQUssT0FBUWl1QixFQUFXanVCLEVBQUdweUMsTUFHNUQsU0FBUyszQixHQUFVNnpCLEdBQ2pCLE1BQU8sV0FBWUEsRUFDZkEsRUFBTzJtQyxPQUNQM21DLEVBQU81ckQsTUFHYixTQUFTeStGLEdBQW9CMW5GLEdBQzNCQSxFQUFFM0ssT0FBT3dtRixXQUFZLEVBR3ZCLFNBQVM4TCxHQUFrQjNuRixHQUVwQkEsRUFBRTNLLE9BQU93bUYsWUFDZDc3RSxFQUFFM0ssT0FBT3dtRixXQUFZLEVBQ3JCd0wsR0FBUXJuRixFQUFFM0ssT0FBUSxVQUdwQixTQUFTZ3lGLEdBQVN4bEcsRUFBSWdnQixHQUNwQixJQUFJN0IsRUFBSXRlLFNBQVN5QyxZQUFZLGNBQzdCNmIsRUFBRXFULFVBQVV4UixHQUFNLEdBQU0sR0FDeEJoZ0IsRUFBR3dDLGNBQWMyYixHQU1uQixTQUFTaW9GLEdBQVlyM0IsR0FDbkIsT0FBT0EsRUFBTWYsbUJBQXVCZSxFQUFNeDBCLE1BQVN3MEIsRUFBTXgwQixLQUFLcDdDLFdBRTFENHZFLEVBREFxM0IsR0FBV3IzQixFQUFNZixrQkFBa0I4UyxRQUl6QyxJQXVESXVsQixHQUFxQixDQUN2Qi9pQixNQUFPbWlCLEdBQ1BuRixLQXpEUyxDQUNUcnJGLEtBQU0sU0FBZWpWLEVBQUkwdEYsRUFBSzNlLEdBQzVCLElBQUkzbkUsRUFBUXNtRixFQUFJdG1GLE1BR1prL0YsR0FESnYzQixFQUFRcTNCLEdBQVdyM0IsSUFDT3gwQixNQUFRdzBCLEVBQU14MEIsS0FBS3A3QyxXQUN6Q29uRyxFQUFrQnZtRyxFQUFHd21HLG1CQUNGLFNBQXJCeG1HLEVBQUdFLE1BQU11TSxRQUFxQixHQUFLek0sRUFBR0UsTUFBTXVNLFFBQzFDckYsR0FBU2svRixHQUNYdjNCLEVBQU14MEIsS0FBSytsRCxNQUFPLEVBQ2xCOUIsR0FBTXp2QixHQUFPLFdBQ1gvdUUsRUFBR0UsTUFBTXVNLFFBQVU4NUYsTUFHckJ2bUcsRUFBR0UsTUFBTXVNLFFBQVVyRixFQUFRbS9GLEVBQWtCLFFBSWpEaGpDLE9BQVEsU0FBaUJ2akUsRUFBSTB0RixFQUFLM2UsR0FDaEMsSUFBSTNuRSxFQUFRc21GLEVBQUl0bUYsT0FJWEEsSUFIVXNtRixFQUFJMUYsWUFJbkJqWixFQUFRcTNCLEdBQVdyM0IsSUFDT3gwQixNQUFRdzBCLEVBQU14MEIsS0FBS3A3QyxZQUUzQzR2RSxFQUFNeDBCLEtBQUsrbEQsTUFBTyxFQUNkbDVGLEVBQ0ZvM0YsR0FBTXp2QixHQUFPLFdBQ1gvdUUsRUFBR0UsTUFBTXVNLFFBQVV6TSxFQUFHd21HLHNCQUd4QjlGLEdBQU0zeEIsR0FBTyxXQUNYL3VFLEVBQUdFLE1BQU11TSxRQUFVLFdBSXZCek0sRUFBR0UsTUFBTXVNLFFBQVVyRixFQUFRcEgsRUFBR3dtRyxtQkFBcUIsU0FJdkRDLE9BQVEsU0FDTnptRyxFQUNBMGxHLEVBQ0EzMkIsRUFDQXFSLEVBQ0FxUyxHQUVLQSxJQUNIenlGLEVBQUdFLE1BQU11TSxRQUFVek0sRUFBR3dtRyx1QkFZeEJFLEdBQWtCLENBQ3BCOXNELEtBQU0vUyxPQUNOdzRELE9BQVF6L0YsUUFDUm1qRSxJQUFLbmpFLFFBQ0wrbUcsS0FBTTkvRCxPQUNON21CLEtBQU02bUIsT0FDTm0xRCxXQUFZbjFELE9BQ1pzMUQsV0FBWXQxRCxPQUNabzFELGFBQWNwMUQsT0FDZHUxRCxhQUFjdjFELE9BQ2RxMUQsaUJBQWtCcjFELE9BQ2xCdzFELGlCQUFrQngxRCxPQUNsQmk0RCxZQUFhajRELE9BQ2JtNEQsa0JBQW1CbjRELE9BQ25CazRELGNBQWVsNEQsT0FDZjJOLFNBQVUsQ0FBQzJKLE9BQVF0WCxPQUFRbGtDLFNBSzdCLFNBQVNpa0csR0FBYzczQixHQUNyQixJQUFJODNCLEVBQWM5M0IsR0FBU0EsRUFBTXJCLGlCQUNqQyxPQUFJbTVCLEdBQWVBLEVBQVk1N0IsS0FBS3RwRSxRQUFRbWlGLFNBQ25DOGlCLEdBQWEzaEIsR0FBdUI0aEIsRUFBWW43RixXQUVoRHFqRSxFQUlYLFNBQVMrM0IsR0FBdUIvaEIsR0FDOUIsSUFBSXhxQyxFQUFPLEdBQ1A1NEMsRUFBVW9qRixFQUFLN1ksU0FFbkIsSUFBSyxJQUFJbC9ELEtBQU9yTCxFQUFRZ3dFLFVBQ3RCcDNCLEVBQUt2dEMsR0FBTyszRSxFQUFLLzNFLEdBSW5CLElBQUkycEMsRUFBWWgxQyxFQUFReS9FLGlCQUN4QixJQUFLLElBQUl0UCxLQUFTbjdCLEVBQ2hCNEQsRUFBS29zQixFQUFTbUwsSUFBVW43QixFQUFVbTdCLEdBRXBDLE9BQU92M0IsRUFHVCxTQUFTdW1CLEdBQWFwSSxFQUFHcXVDLEdBQ3ZCLEdBQUksaUJBQWlCbHRELEtBQUtrdEQsRUFBU3g1QixLQUNqQyxPQUFPN1UsRUFBRSxhQUFjLENBQ3JCbmhDLE1BQU93dkUsRUFBU3I1QixpQkFBaUJpRSxZQWlCdkMsSUFBSXExQixHQUFnQixTQUFVenJELEdBQUssT0FBT0EsRUFBRWd5QixLQUFPaUIsR0FBbUJqekIsSUFFbEUwckQsR0FBbUIsU0FBVXR1QyxHQUFLLE1BQWtCLFNBQVhBLEVBQUUvZSxNQUUzQ3N0RCxHQUFhLENBQ2Z0dEQsS0FBTSxhQUNOcmlCLE1BQU9tdkUsR0FDUDVpQixVQUFVLEVBRVZ0TSxPQUFRLFNBQWlCOWUsR0FDdkIsSUFBSWttQixFQUFTaCtFLEtBRVQ4SyxFQUFXOUssS0FBSzY2RSxPQUFPMWdDLFFBQzNCLEdBQUtydkMsSUFLTEEsRUFBV0EsRUFBU00sT0FBT2c3RixLQUVicm1HLE9BQWQsQ0FLSStLLEVBQVMvSyxPQUFTLEdBQ3BCeThDLEdBQ0UsdUZBRUF4OEMsS0FBSzByRSxTQUlULElBQUlxNkIsRUFBTy9sRyxLQUFLK2xHLEtBR1pBLEdBQWlCLFdBQVRBLEdBQThCLFdBQVRBLEdBRS9CdnBELEdBQ0UsOEJBQWdDdXBELEVBQ2hDL2xHLEtBQUswckUsU0FJVCxJQUFJeTZCLEVBQVdyN0YsRUFBUyxHQUl4QixHQTVESixTQUE4QnFqRSxHQUM1QixLQUFRQSxFQUFRQSxFQUFNeGIsUUFDcEIsR0FBSXdiLEVBQU14MEIsS0FBS3A3QyxXQUNiLE9BQU8sRUF5RExnb0csQ0FBb0J2bUcsS0FBS2lnRixRQUMzQixPQUFPa21CLEVBS1QsSUFBSXZ6QyxFQUFRb3pDLEdBQWFHLEdBRXpCLElBQUt2ekMsRUFDSCxPQUFPdXpDLEVBR1QsR0FBSW5tRyxLQUFLd21HLFNBQ1AsT0FBT3RtQyxHQUFZcEksRUFBR3F1QyxHQU14QixJQUFJNXVELEVBQUssZ0JBQW1CdjNDLEtBQVMsS0FBSSxJQUN6QzR5RCxFQUFNeG1ELElBQW1CLE1BQWJ3bUQsRUFBTXhtRCxJQUNkd21ELEVBQU00YSxVQUNKajJCLEVBQUssVUFDTEEsRUFBS3FiLEVBQU0rWixJQUNiOUgsRUFBWWpTLEVBQU14bUQsS0FDbUIsSUFBbEM2NUIsT0FBTzJzQixFQUFNeG1ELEtBQUtqQixRQUFRb3NDLEdBQVlxYixFQUFNeG1ELElBQU1tckMsRUFBS3FiLEVBQU14bUQsSUFDOUR3bUQsRUFBTXhtRCxJQUVaLElBQUl1dEMsR0FBUWlaLEVBQU1qWixPQUFTaVosRUFBTWpaLEtBQU8sS0FBS3A3QyxXQUFhMm5HLEdBQXNCbG1HLE1BQzVFeW1HLEVBQWN6bUcsS0FBS2tnRixPQUNuQndtQixFQUFXVixHQUFhUyxHQVE1QixHQUpJN3pDLEVBQU1qWixLQUFLbzRCLFlBQWNuZixFQUFNalosS0FBS280QixXQUFXN3hELEtBQUttbUYsTUFDdER6ekMsRUFBTWpaLEtBQUsrbEQsTUFBTyxHQUlsQmdILEdBQ0FBLEVBQVMvc0QsT0E1RmYsU0FBc0JpWixFQUFPOHpDLEdBQzNCLE9BQU9BLEVBQVN0NkYsTUFBUXdtRCxFQUFNeG1ELEtBQU9zNkYsRUFBUy81QixNQUFRL1osRUFBTStaLElBNEZ2RGc2QixDQUFZL3pDLEVBQU84ekMsS0FDbkI5NEIsR0FBbUI4NEIsTUFFbEJBLEVBQVN0NUIsb0JBQXFCczVCLEVBQVN0NUIsa0JBQWtCOFMsT0FBTzFTLFdBQ2xFLENBR0EsSUFBSWltQixFQUFVaVQsRUFBUy9zRCxLQUFLcDdDLFdBQWF5L0MsRUFBTyxHQUFJckUsR0FFcEQsR0FBYSxXQUFUb3NELEVBT0YsT0FMQS9sRyxLQUFLd21HLFVBQVcsRUFDaEJ0dUIsR0FBZXViLEVBQVMsY0FBYyxXQUNwQ3pWLEVBQU93b0IsVUFBVyxFQUNsQnhvQixFQUFPMEMsa0JBRUZ4Z0IsR0FBWXBJLEVBQUdxdUMsR0FDakIsR0FBYSxXQUFUSixFQUFtQixDQUM1QixHQUFJbjRCLEdBQW1CaGIsR0FDckIsT0FBTzZ6QyxFQUVULElBQUlHLEVBQ0F2RyxFQUFlLFdBQWN1RyxLQUNqQzF1QixHQUFlditCLEVBQU0sYUFBYzBtRCxHQUNuQ25vQixHQUFlditCLEVBQU0saUJBQWtCMG1ELEdBQ3ZDbm9CLEdBQWV1YixFQUFTLGNBQWMsU0FBVXFNLEdBQVM4RyxFQUFlOUcsTUFJNUUsT0FBT3FHLEtBTVB4dkUsR0FBUXFuQixFQUFPLENBQ2pCMnVCLElBQUsxbUMsT0FDTDRnRSxVQUFXNWdFLFFBQ1Y2L0QsSUF3SUgsU0FBU2dCLEdBQWdCbnNELEdBRW5CQSxFQUFFaXlCLElBQUltNkIsU0FDUnBzRCxFQUFFaXlCLElBQUltNkIsVUFHSnBzRCxFQUFFaXlCLElBQUlveEIsVUFDUnJqRCxFQUFFaXlCLElBQUlveEIsV0FJVixTQUFTZ0osR0FBZ0Jyc0QsR0FDdkJBLEVBQUVoQixLQUFLc3RELE9BQVN0c0QsRUFBRWl5QixJQUFJcGhFLHdCQUd4QixTQUFTMDdGLEdBQWtCdnNELEdBQ3pCLElBQUl3c0QsRUFBU3hzRCxFQUFFaEIsS0FBS3l0RCxJQUNoQkgsRUFBU3RzRCxFQUFFaEIsS0FBS3N0RCxPQUNoQkksRUFBS0YsRUFBT25xRixLQUFPaXFGLEVBQU9qcUYsS0FDMUJzcUYsRUFBS0gsRUFBT2xxRixJQUFNZ3FGLEVBQU9ocUYsSUFDN0IsR0FBSW9xRixHQUFNQyxFQUFJLENBQ1ozc0QsRUFBRWhCLEtBQUs0dEQsT0FBUSxFQUNmLElBQUl2MEMsRUFBSXJZLEVBQUVpeUIsSUFBSXR0RSxNQUNkMHpELEVBQUUxMEQsVUFBWTAwRCxFQUFFdzBDLGdCQUFrQixhQUFlSCxFQUFLLE1BQVFDLEVBQUssTUFDbkV0MEMsRUFBRXA1QyxtQkFBcUIsYUE5SnBCK2MsR0FBTW92RSxLQWtLYixJQUFJMEIsR0FBcUIsQ0FDdkJuQixXQUFZQSxHQUNab0IsZ0JBbEtvQixDQUNwQi93RSxNQUFPQSxHQUVQZ3hFLFlBQWEsV0FDWCxJQUFJM3BCLEVBQVNoK0UsS0FFVDJpRSxFQUFTM2lFLEtBQUtvc0YsUUFDbEJwc0YsS0FBS29zRixRQUFVLFNBQVVqZSxFQUFPMFEsR0FDOUIsSUFBSTJOLEVBQXdCOUgsR0FBa0IxRyxHQUU5Q0EsRUFBT3lPLFVBQ0x6TyxFQUFPa0MsT0FDUGxDLEVBQU80cEIsTUFDUCxHQUNBLEdBRUY1cEIsRUFBT2tDLE9BQVNsQyxFQUFPNHBCLEtBQ3ZCcGIsSUFDQTdwQixFQUFPditELEtBQUs0NUUsRUFBUTdQLEVBQU8wUSxLQUkvQmpJLE9BQVEsU0FBaUI5ZSxHQVF2QixJQVBBLElBQUk2VSxFQUFNM3NFLEtBQUsyc0UsS0FBTzNzRSxLQUFLaWdGLE9BQU90bUMsS0FBS2d6QixLQUFPLE9BQzFDem9DLEVBQU1uaUMsT0FBT2lsRCxPQUFPLE1BQ3BCNmdELEVBQWU3bkcsS0FBSzZuRyxhQUFlN25HLEtBQUs4SyxTQUN4Q2c5RixFQUFjOW5HLEtBQUs2NkUsT0FBTzFnQyxTQUFXLEdBQ3JDcnZDLEVBQVc5SyxLQUFLOEssU0FBVyxHQUMzQmk5RixFQUFpQjdCLEdBQXNCbG1HLE1BRWxDeXFCLEVBQUksRUFBR0EsRUFBSXE5RSxFQUFZL25HLE9BQVEwcUIsSUFBSyxDQUMzQyxJQUFJa3dCLEVBQUltdEQsRUFBWXI5RSxHQUNwQixHQUFJa3dCLEVBQUVneUIsSUFDSixHQUFhLE1BQVRoeUIsRUFBRXZ1QyxLQUFvRCxJQUFyQzY1QixPQUFPMFUsRUFBRXZ1QyxLQUFLakIsUUFBUSxXQUN6Q0wsRUFBU21DLEtBQUswdEMsR0FDZHpXLEVBQUl5VyxFQUFFdnVDLEtBQU91dUMsR0FDWEEsRUFBRWhCLE9BQVNnQixFQUFFaEIsS0FBTyxLQUFLcDdDLFdBQWF3cEcsTUFDbkMsQ0FDTCxJQUFJaHVGLEVBQU80Z0MsRUFBRW15QixpQkFDVDl6QixFQUFPai9CLEVBQVFBLEVBQUtzd0QsS0FBS3RwRSxRQUFRaTRDLE1BQVFqL0IsRUFBSzR5RCxLQUFPLEdBQU1oeUIsRUFBRWd5QixJQUNqRW53QixHQUFNLCtDQUFpRHhELEVBQU8sTUFLcEUsR0FBSTZ1RCxFQUFjLENBR2hCLElBRkEsSUFBSUQsRUFBTyxHQUNQSSxFQUFVLEdBQ0xoYyxFQUFNLEVBQUdBLEVBQU02YixFQUFhOW5HLE9BQVFpc0YsSUFBTyxDQUNsRCxJQUFJaWMsRUFBTUosRUFBYTdiLEdBQ3ZCaWMsRUFBSXR1RCxLQUFLcDdDLFdBQWF3cEcsRUFDdEJFLEVBQUl0dUQsS0FBS3l0RCxJQUFNYSxFQUFJcjdCLElBQUlwaEUsd0JBQ25CMDRCLEVBQUkrakUsRUFBSTc3RixLQUNWdzdGLEVBQUszNkYsS0FBS2c3RixHQUVWRCxFQUFRLzZGLEtBQUtnN0YsR0FHakJqb0csS0FBSzRuRyxLQUFPOXZDLEVBQUU2VSxFQUFLLEtBQU1pN0IsR0FDekI1bkcsS0FBS2dvRyxRQUFVQSxFQUdqQixPQUFPbHdDLEVBQUU2VSxFQUFLLEtBQU03aEUsSUFHdEI4aUYsUUFBUyxXQUNQLElBQUk5aUYsRUFBVzlLLEtBQUs2bkcsYUFDaEJoQixFQUFZN21HLEtBQUs2bUcsWUFBZTdtRyxLQUFLZzVDLE1BQVEsS0FBTyxRQUNuRGx1QyxFQUFTL0ssUUFBV0MsS0FBS2tvRyxRQUFRcDlGLEVBQVMsR0FBRzhoRSxJQUFLaTZCLEtBTXZELzdGLEVBQVNWLFFBQVEwOEYsSUFDakJoOEYsRUFBU1YsUUFBUTQ4RixJQUNqQmw4RixFQUFTVixRQUFRODhGLElBS2pCbG5HLEtBQUttb0csUUFBVWxwRyxTQUFTd1YsS0FBS1MsYUFFN0JwSyxFQUFTVixTQUFRLFNBQVV1d0MsR0FDekIsR0FBSUEsRUFBRWhCLEtBQUs0dEQsTUFBTyxDQUNoQixJQUFJbm9HLEVBQUt1N0MsRUFBRWl5QixJQUNQNVosRUFBSTV6RCxFQUFHRSxNQUNYaTlGLEdBQW1CbjlGLEVBQUl5bkcsR0FDdkI3ekMsRUFBRTEwRCxVQUFZMDBELEVBQUV3MEMsZ0JBQWtCeDBDLEVBQUVwNUMsbUJBQXFCLEdBQ3pEeGEsRUFBRzRCLGlCQUFpQjg2RixHQUFvQjE4RixFQUFHMm5HLFFBQVUsU0FBU2x4RCxFQUFJdDRCLEdBQzVEQSxHQUFLQSxFQUFFM0ssU0FBV3hULEdBR2pCbWUsSUFBSyxhQUFhMDdCLEtBQUsxN0IsRUFBRTNFLGdCQUM1QnhaLEVBQUc4QixvQkFBb0I0NkYsR0FBb0JqbUQsR0FDM0N6MkMsRUFBRzJuRyxRQUFVLEtBQ2J0SyxHQUFzQnI5RixFQUFJeW5HLFlBT3BDMTFCLFFBQVMsQ0FDUCsyQixRQUFTLFNBQWtCOW9HLEVBQUl5bkcsR0FFN0IsSUFBS25MLEdBQ0gsT0FBTyxFQUdULEdBQUkxN0YsS0FBS29vRyxTQUNQLE9BQU9wb0csS0FBS29vRyxTQU9kLElBQUk5eEYsRUFBUWxYLEVBQUdtWCxZQUNYblgsRUFBR3cwRixvQkFDTHgwRixFQUFHdzBGLG1CQUFtQnhwRixTQUFRLFNBQVVzcEYsR0FBTzF1RixHQUFZc1IsRUFBT285RSxNQUVwRWh2RixHQUFTNFIsRUFBT3V3RixHQUNoQnZ3RixFQUFNaFgsTUFBTXVNLFFBQVUsT0FDdEI3TCxLQUFLc3NGLElBQUl2aEYsWUFBWXVMLEdBQ3JCLElBQUlrK0QsRUFBT21vQixHQUFrQnJtRixHQUU3QixPQURBdFcsS0FBS3NzRixJQUFJL2hGLFlBQVkrTCxHQUNidFcsS0FBS29vRyxTQUFXNXpCLEVBQUtncEIsaUJBeUNuQ2hVLEdBQUk3aEIsT0FBT2UsWUFBY0EsR0FDekI4Z0IsR0FBSTdoQixPQUFPVSxjQUFnQkEsR0FDM0JtaEIsR0FBSTdoQixPQUFPVyxlQUFpQkEsR0FDNUJraEIsR0FBSTdoQixPQUFPYSxnQkFBa0JBLEdBQzdCZ2hCLEdBQUk3aEIsT0FBT1ksaUJBdjBHWCxTQUEyQm9FLEdBRXpCLElBQUt6RCxFQUNILE9BQU8sRUFFVCxHQUFJYixHQUFjc0UsR0FDaEIsT0FBTyxFQUlULEdBRkFBLEVBQU1BLEVBQUlqbkQsY0FFc0IsTUFBNUJ3cUUsR0FBb0J2akIsR0FDdEIsT0FBT3VqQixHQUFvQnZqQixHQUU3QixJQUFJdnRFLEVBQUtILFNBQVNDLGNBQWN5dEUsR0FDaEMsT0FBSUEsRUFBSXhoRSxRQUFRLE1BQVEsRUFFZCtrRixHQUFvQnZqQixHQUMxQnZ0RSxFQUFHMjVDLGNBQWdCcHlDLE9BQU8waEcsb0JBQzFCanBHLEVBQUcyNUMsY0FBZ0JweUMsT0FBT2lELFlBR3BCc21GLEdBQW9CdmpCLEdBQU8scUJBQXFCMXpCLEtBQUs3NUMsRUFBR3UvQixhQXF6R3BFcWYsRUFBT3dyQyxHQUFJem9GLFFBQVFneEUsV0FBWTB6QixJQUMvQnpuRCxFQUFPd3JDLEdBQUl6b0YsUUFBUTB3RSxXQUFZZzJCLElBRy9CamUsR0FBSWhwRixVQUFVaXNGLFVBQVl2akIsRUFBWXMzQixHQUFRcnZDLEVBRzlDcTRCLEdBQUlocEYsVUFBVSsrRSxPQUFTLFNBQ3JCbmdGLEVBQ0F5L0UsR0FHQSxPQS83SkYsU0FDRTdULEVBQ0E1ckUsRUFDQXkvRSxHQXlCQSxJQUFJeXBCLEVBMkNKLE9BbEVBdDlCLEVBQUdzaEIsSUFBTWx0RixFQUNKNHJFLEVBQUdNLFNBQVNzTCxTQUNmNUwsRUFBR00sU0FBU3NMLE9BQVM3SSxHQUdkL0MsRUFBR00sU0FBU2k5QixVQUErQyxNQUFuQ3Y5QixFQUFHTSxTQUFTaTlCLFNBQVNwOUMsT0FBTyxJQUN2RDZmLEVBQUdNLFNBQVNsc0UsSUFBTUEsRUFDbEJvOUMsR0FDRSx3TEFHQXd1QixHQUdGeHVCLEdBQ0Usc0VBQ0F3dUIsSUFLUjZWLEdBQVM3VixFQUFJLGVBS1hzOUIsRUFERTNnQyxFQUFPSyxhQUFlZ04sR0FDTixXQUNoQixJQUFJaDhCLEVBQU9neUIsRUFBR3NnQixNQUNWL3pDLEVBQUt5ekIsRUFBRzBmLEtBQ1IzVSxFQUFXLGtCQUFvQngrQixFQUMvQnkrQixFQUFTLGdCQUFrQnorQixFQUUvQnk5QixHQUFLZSxHQUNMLElBQUk1SCxFQUFRbkQsRUFBRzZoQixVQUNmN1gsR0FBS2dCLEdBQ0xmLEdBQVMsT0FBU2o4QixFQUFPLFVBQVkrOEIsRUFBVUMsR0FFL0NoQixHQUFLZSxHQUNML0ssRUFBR29oQixRQUFRamUsRUFBTzBRLEdBQ2xCN0osR0FBS2dCLEdBQ0xmLEdBQVMsT0FBU2o4QixFQUFPLFNBQVcrOEIsRUFBVUMsSUFHOUIsV0FDaEJoTCxFQUFHb2hCLFFBQVFwaEIsRUFBRzZoQixVQUFXaE8sSUFPN0IsSUFBSXNILEdBQVFuYixFQUFJczlCLEVBQWlCbjNDLEVBQU0sQ0FDckN3MEIsT0FBUSxXQUNGM2EsRUFBRzRWLGFBQWU1VixFQUFHOFQsY0FDdkIrQixHQUFTN1YsRUFBSSxtQkFHaEIsR0FDSDZULEdBQVksRUFJSyxNQUFiN1QsRUFBR2lWLFNBQ0xqVixFQUFHNFYsWUFBYSxFQUNoQkMsR0FBUzdWLEVBQUksWUFFUkEsRUF3M0pBdzlCLENBQWV4b0csS0FEdEJaLEVBQUtBLEdBQU04cEUsRUFBWXZwQixHQUFNdmdELFFBQU1lLEVBQ0gwK0UsSUFLOUIzVixHQUNGeGpFLFlBQVcsV0FDTGlpRSxFQUFPSSxXQUNMQSxHQUNGQSxHQUFTNW1FLEtBQUssT0FBUXFvRixJQUV0QjF0QyxRQUFRQSxRQUFRMDRCLEtBQU8sT0FBUyxPQUM5QixxSEFLdUIsSUFBekI3TSxFQUFPRyxlQUNVLG9CQUFaaHNCLFNBRVBBLFFBQVFBLFFBQVEwNEIsS0FBTyxPQUFTLE9BQzlCLDZLQUtILEdBS0wsSUFBSWkwQixHQUFlLDJCQUNmQyxHQUFnQix5QkFFaEJDLEdBQWE5aUMsR0FBTyxTQUFVK2lDLEdBQ2hDLElBQUl0M0YsRUFBT3MzRixFQUFXLEdBQUd0dUQsUUFBUW91RCxHQUFlLFFBQzVDaDNGLEVBQVFrM0YsRUFBVyxHQUFHdHVELFFBQVFvdUQsR0FBZSxRQUNqRCxPQUFPLElBQUl2c0QsT0FBTzdxQyxFQUFPLGdCQUFrQkksRUFBTyxRQUtwRCxTQUFTbTNGLEdBQ1A3aEYsRUFDQTRoRixHQUVBLElBQUlFLEVBQVFGLEVBQWFELEdBQVdDLEdBQWNILEdBQ2xELEdBQUtLLEVBQU03dkQsS0FBS2p5QixHQUFoQixDQU9BLElBSkEsSUFHSTh6QixFQUFPajFCLEVBQU9rakYsRUFIZHoyQyxFQUFTLEdBQ1QwMkMsRUFBWSxHQUNadjhFLEVBQVlxOEUsRUFBTXI4RSxVQUFZLEVBRTFCcXVCLEVBQVFndUQsRUFBTTN3QyxLQUFLbnhDLElBQVEsRUFDakNuQixFQUFRaTFCLEVBQU1qMUIsT0FFRjRHLElBQ1Z1OEUsRUFBVS83RixLQUFLODdGLEVBQWEvaEYsRUFBSzljLE1BQU11aUIsRUFBVzVHLElBQ2xEeXNDLEVBQU9ybEQsS0FBS3dzQyxLQUFLQyxVQUFVcXZELEtBRzdCLElBQUl6VSxFQUFNRCxHQUFhdjVDLEVBQU0sR0FBR3ZzQixRQUNoQytqQyxFQUFPcmxELEtBQU0sTUFBUXFuRixFQUFNLEtBQzNCMFUsRUFBVS83RixLQUFLLENBQUUsV0FBWXFuRixJQUM3QjduRSxFQUFZNUcsRUFBUWkxQixFQUFNLEdBQUcvNkMsT0FNL0IsT0FKSTBzQixFQUFZekYsRUFBS2puQixTQUNuQmlwRyxFQUFVLzdGLEtBQUs4N0YsRUFBYS9oRixFQUFLOWMsTUFBTXVpQixJQUN2QzZsQyxFQUFPcmxELEtBQUt3c0MsS0FBS0MsVUFBVXF2RCxLQUV0QixDQUNMamlCLFdBQVl4MEIsRUFBT3pqRCxLQUFLLEtBQ3hCeWpELE9BQVEwMkMsSUF5Q1osSUFBSUMsR0FBVSxDQUNaQyxXQUFZLENBQUMsZUFDYkMsY0FyQ0YsU0FBd0IvcEcsRUFBSTJCLEdBQzFCLElBQUl5N0MsRUFBT3o3QyxFQUFReTdDLE1BQVEwNEMsR0FDdkIzRixFQUFjc0gsR0FBaUJ6M0YsRUFBSSxTQUNuQ213RixHQUNRc1osR0FBVXRaLEVBQWF4dUYsRUFBUTZuRyxhQUV2Q3BzRCxFQUNFLFVBQWEreUMsRUFBYiwyS0FJQW53RixFQUFHcTNGLFlBQW1CLE9BSXhCbEgsSUFDRm53RixFQUFHbXdGLFlBQWM5MUMsS0FBS0MsVUFBVTYxQyxJQUVsQyxJQUFJNlosRUFBZTFTLEdBQWV0M0YsRUFBSSxTQUFTLEdBQzNDZ3FHLElBQ0ZocUcsRUFBR2dxRyxhQUFlQSxJQWtCcEJDLFFBZEYsU0FBa0JqcUcsR0FDaEIsSUFBSXU2QyxFQUFPLEdBT1gsT0FOSXY2QyxFQUFHbXdGLGNBQ0w1MUMsR0FBUSxlQUFrQnY2QyxFQUFjLFlBQUksS0FFMUNBLEVBQUdncUcsZUFDTHp2RCxHQUFRLFNBQVl2NkMsRUFBZSxhQUFJLEtBRWxDdTZDLElBZ0RULElBUUkwaEIsR0FSQWl1QyxHQUFVLENBQ1pKLFdBQVksQ0FBQyxlQUNiQyxjQXZDRixTQUEwQi9wRyxFQUFJMkIsR0FDNUIsSUFBSXk3QyxFQUFPejdDLEVBQVF5N0MsTUFBUTA0QyxHQUN2QjJFLEVBQWNoRCxHQUFpQnozRixFQUFJLFNBQ25DeTZGLElBR1VnUCxHQUFVaFAsRUFBYTk0RixFQUFRNm5HLGFBRXZDcHNELEVBQ0UsVUFBYXE5QyxFQUFiLDJLQUlBejZGLEVBQUdxM0YsWUFBbUIsT0FJNUJyM0YsRUFBR3k2RixZQUFjcGdELEtBQUtDLFVBQVUrL0MsR0FBZUksS0FHakQsSUFBSTBQLEVBQWU3UyxHQUFldDNGLEVBQUksU0FBUyxHQUMzQ21xRyxJQUNGbnFHLEVBQUdtcUcsYUFBZUEsSUFrQnBCRixRQWRGLFNBQW9CanFHLEdBQ2xCLElBQUl1NkMsRUFBTyxHQU9YLE9BTkl2NkMsRUFBR3k2RixjQUNMbGdELEdBQVEsZUFBa0J2NkMsRUFBYyxZQUFJLEtBRTFDQSxFQUFHbXFHLGVBQ0w1dkQsR0FBUSxVQUFhdjZDLEVBQWUsYUFBSSxNQUVuQ3U2QyxJQWFMNnZELEdBQ00sU0FBaUJsakQsR0FHdkIsT0FGQStVLEdBQVVBLElBQVdwOEQsU0FBU0MsY0FBYyxRQUNwQ2c2RixVQUFZNXlDLEVBQ2IrVSxHQUFRbnJDLGFBTWZ1NUUsR0FBYWprQyxFQUNmLDZGQU1Fa2tDLEdBQW1CbGtDLEVBQ3JCLDJEQUtFbWtDLEdBQW1CbmtDLEVBQ3JCLG1TQVlFb2tDLEdBQVksNEVBQ1pDLEdBQXNCLHlHQUN0QkMsR0FBUyw2QkFBZ0NsaEMsRUFBb0IsT0FBSSxLQUNqRW1oQyxHQUFlLE9BQVNELEdBQVMsUUFBVUEsR0FBUyxJQUNwREUsR0FBZSxJQUFJN3RELE9BQVEsS0FBTzR0RCxJQUNsQ0UsR0FBZ0IsYUFDaEJqMEIsR0FBUyxJQUFJNzVCLE9BQVEsUUFBVTR0RCxHQUFlLFVBQzlDRyxHQUFVLHFCQUVWQyxHQUFVLFNBQ1ZDLEdBQXFCLFFBR3JCQyxHQUFxQjdrQyxFQUFRLHlCQUF5QixHQUN0RDhrQyxHQUFVLEdBRVZDLEdBQWMsQ0FDaEIsT0FBUSxJQUNSLE9BQVEsSUFDUixTQUFVLElBQ1YsUUFBUyxJQUNULFFBQVMsS0FDVCxPQUFRLEtBQ1IsUUFBUyxLQUVQQyxHQUFjLDRCQUNkQyxHQUEwQixtQ0FHMUJDLEdBQXFCbGxDLEVBQVEsZ0JBQWdCLEdBQzdDbWxDLEdBQTJCLFNBQVVoK0IsRUFBS3JtQixHQUFRLE9BQU9xbUIsR0FBTys5QixHQUFtQi85QixJQUFvQixPQUFacm1CLEVBQUssSUFFcEcsU0FBU3NrRCxHQUFZcGtHLEVBQU9xa0csR0FDMUIsSUFBSWp5QyxFQUFLaXlDLEVBQXVCSixHQUEwQkQsR0FDMUQsT0FBT2hrRyxFQUFNOHpDLFFBQVFzZSxHQUFJLFNBQVU5ZCxHQUFTLE9BQU95dkQsR0FBWXp2RCxNQWtRakUsSUF1Qklnd0QsR0FDQWxDLEdBQ0FtQyxHQUNBQyxHQUNBQyxHQUNBQyxHQUNBQyxHQUNBQyxHQUNBQyxHQS9CQUMsR0FBTyxZQUNQQyxHQUFRLGVBQ1JDLEdBQWEscUNBQ2JDLEdBQWdCLGlDQUNoQkMsR0FBZ0IsV0FDaEJDLEdBQWUsV0FFZkMsR0FBUSxTQUNSQyxHQUFTLGtCQUNUQyxHQUFhLHdCQUViQyxHQUFTLGtCQUVUQyxHQUFjLFNBQ2RDLEdBQWlCLGdCQUVqQkMsR0FBcUIsY0FFckJDLEdBQW1CdG1DLEVBQU8yakMsSUFFMUI0QyxHQUFzQixVQWExQixTQUFTQyxHQUNQMS9CLEVBQ0EwTSxFQUNBMW1CLEdBRUEsTUFBTyxDQUNMdnpDLEtBQU0sRUFDTnV0RCxJQUFLQSxFQUNMa3BCLFVBQVd4YyxFQUNYdWMsU0FBVTBXLEdBQWFqekIsR0FDdkJvZCxZQUFhLEdBQ2I5akMsT0FBUUEsRUFDUjduRCxTQUFVLElBT2QsU0FBU200QyxHQUNQc2xELEVBQ0F4bkcsR0FFQStwRyxHQUFTL3BHLEVBQVF5N0MsTUFBUTA0QyxHQUV6QmdXLEdBQW1CbnFHLEVBQVF3ckcsVUFBWTVsQyxFQUN2Q3drQyxHQUFzQnBxRyxFQUFRMm5FLGFBQWUvQixFQUM3Q3lrQyxHQUEwQnJxRyxFQUFReW5FLGlCQUFtQjdCLEVBQ3JELElBQUkwQixFQUFnQnRuRSxFQUFRc25FLGVBQWlCMUIsRUFDN0Mwa0MsR0FBaUIsU0FBVWpzRyxHQUFNLFVBQy9CQSxFQUFHa2pGLFdBQ0hsakYsRUFBR3cyRixTQUFTLFFBQ1p4MkYsRUFBR3cyRixTQUFTLGdCQUNWeDJGLEVBQUd3MkYsU0FBU2pTLEdBQUt0YixFQUFjanBFLEVBQUd3MkYsU0FBU2pTLElBQU10YixFQUFjanBFLEVBQUd1dEUsUUFFdEVvK0IsR0FBYTNWLEdBQW9CcjBGLEVBQVEyMkMsUUFBUyxpQkFDbERzekQsR0FBZ0I1VixHQUFvQnIwRixFQUFRMjJDLFFBQVMsb0JBQ3JEdXpELEdBQWlCN1YsR0FBb0JyMEYsRUFBUTIyQyxRQUFTLHFCQUV0RGt4RCxHQUFhN25HLEVBQVE2bkcsV0FFckIsSUFHSWxwRyxFQUNBOHNHLEVBSkFudUQsRUFBUSxHQUNSb3VELEdBQW9ELElBQS9CMXJHLEVBQVEwckcsbUJBQzdCQyxFQUFtQjNyRyxFQUFRNHJHLFdBRzNCL0wsR0FBUyxFQUNUZ00sR0FBUSxFQUNScndELEdBQVMsRUFFYixTQUFTc3dELEVBQVUxcUQsRUFBS2d6QyxHQUNqQjU0QyxJQUNIQSxHQUFTLEVBQ1R1dUQsR0FBTzNvRCxFQUFLZ3pDLElBSWhCLFNBQVMyWCxFQUFjOTNGLEdBeUJyQixHQXhCQSszRixFQUFxQi8zRixHQUNoQjRyRixHQUFXNXJGLEVBQVFnNEYsWUFDdEJoNEYsRUFBVWk0RixHQUFlajRGLEVBQVNqVSxJQUcvQnM5QyxFQUFNdCtDLFFBQVVpVixJQUFZdFYsSUFFM0JBLEVBQUt3dEcsS0FBT2w0RixFQUFRbTRGLFFBQVVuNEYsRUFBUW80RixPQUV0Q0MsRUFBcUJyNEYsR0FFdkJzNEYsR0FBZTV0RyxFQUFNLENBQ25CNDBGLElBQUt0L0UsRUFBUW00RixPQUNiSSxNQUFPdjRGLEtBR1Q2M0YsRUFDRSwrSUFHQSxDQUFFMTVDLE1BQU9uK0MsRUFBUW0rQyxTQUluQnE1QyxJQUFrQngzRixFQUFRdzRGLFVBQzVCLEdBQUl4NEYsRUFBUW00RixRQUFVbjRGLEVBQVFvNEYsS0FxWk5odUcsRUFwWkY0VixHQXFadEJ5b0MsRUFlTixTQUEwQjN5QyxHQUV4QixJQURBLElBQUkyZixFQUFJM2YsRUFBUy9LLE9BQ1YwcUIsS0FBSyxDQUNWLEdBQXlCLElBQXJCM2YsRUFBUzJmLEdBQUdyTCxLQUNkLE9BQU90VSxFQUFTMmYsR0FFUyxNQUFyQjNmLEVBQVMyZixHQUFHekQsTUFDZDhqRixHQUNFLFNBQWFoZ0csRUFBUzJmLEdBQUd6RCxLQUFLdUgsT0FBOUIsa0RBRUF6akIsRUFBUzJmLElBR2IzZixFQUFTc3pELE9BNUJGcXZDLENBclp3QmpCLEVBcVpEMWhHLFlBQ3RCMnlDLEVBQUt5dkQsR0FDZkksR0FBZTd2RCxFQUFNLENBQ25CNjJDLElBQUtsMUYsRUFBRyt0RyxPQUNSSSxNQUFPbnVHLElBR1QwckcsR0FDRSxNQUFRMXJHLEVBQUcrdEcsT0FBVSxZQUFjL3RHLEVBQUcrdEcsT0FBUyxJQUFPLFFBQXRELHFCQUN1Qi90RyxFQUFNLElBQUksZ0NBQ2pDQSxFQUFHcTNGLFlBQVlyM0YsRUFBRyt0RyxPQUFTLFlBQWMsZUE5WmxDLENBQ0wsR0FBSW40RixFQUFRMDRGLFVBQVcsQ0FJckIsSUFBSTEwRCxFQUFPaGtDLEVBQVEyNEYsWUFBYyxhQUMvQm5CLEVBQWNsdUIsY0FBZ0JrdUIsRUFBY2x1QixZQUFjLEtBQUt0bEMsR0FBUWhrQyxFQUUzRXczRixFQUFjMWhHLFNBQVNtQyxLQUFLK0gsR0FDNUJBLEVBQVEyOUMsT0FBUzY1QyxFQTBZekIsSUFBOEJwdEcsRUFDeEJxK0MsRUFyWUZ6b0MsRUFBUWxLLFNBQVdrSyxFQUFRbEssU0FBU00sUUFBTyxTQUFVdXZDLEdBQUssT0FBUSxFQUFJK3lELGFBRXRFWCxFQUFxQi8zRixHQUdqQkEsRUFBUTZ1RSxNQUNWK2MsR0FBUyxHQUVQc0ssR0FBaUJsMkYsRUFBUTIzRCxPQUMzQmlnQyxHQUFRLEdBR1YsSUFBSyxJQUFJbmlGLEVBQUksRUFBR0EsRUFBSXdnRixHQUFlbHJHLE9BQVEwcUIsSUFDekN3Z0YsR0FBZXhnRixHQUFHelYsRUFBU2pVLEdBSS9CLFNBQVNnc0csRUFBc0IzdEcsR0FFN0IsSUFBS3d0RyxFQUVILElBREEsSUFBSWdCLEdBRURBLEVBQVd4dUcsRUFBRzBMLFNBQVMxTCxFQUFHMEwsU0FBUy9LLE9BQVMsS0FDM0IsSUFBbEI2dEcsRUFBU3h1RixNQUNTLE1BQWxCd3VGLEVBQVM1bUYsTUFFVDVuQixFQUFHMEwsU0FBU3N6RCxNQUtsQixTQUFTaXZDLEVBQXNCanVHLEdBQ2QsU0FBWEEsRUFBR3V0RSxLQUE2QixhQUFYdnRFLEVBQUd1dEUsS0FDMUJrZ0MsRUFDRSxlQUFrQnp0RyxFQUFNLElBQXhCLHFFQUVBLENBQUUrekQsTUFBTy96RCxFQUFHK3pELFFBR1ovekQsRUFBR3cyRixTQUFTdjBDLGVBQWUsVUFDN0J3ckQsRUFDRSw0RkFFQXp0RyxFQUFHcTNGLFlBQVksVUF3TXJCLE9Bdm5CRixTQUFvQm53QyxFQUFNdmxELEdBT3hCLElBTkEsSUFLSThxRSxFQUFNZ2lDLEVBTE54dkQsRUFBUSxHQUNSeXZELEVBQWEvc0csRUFBUStzRyxXQUNyQkMsRUFBZ0JodEcsRUFBUTBvRyxZQUFjOWlDLEVBQ3RDcW5DLEVBQXNCanRHLEVBQVEyb0csa0JBQW9CL2lDLEVBQ2xEOWdELEVBQVEsRUFFTHlnQyxHQUFNLENBR1gsR0FGQXVsQixFQUFPdmxCLEVBRUZ1bkQsR0FBWXhELEdBQW1Cd0QsR0FrRjdCLENBQ0wsSUFBSUksRUFBZSxFQUNmQyxFQUFhTCxFQUFRbm9GLGNBQ3JCeW9GLEVBQWU3RCxHQUFRNEQsS0FBZ0I1RCxHQUFRNEQsR0FBYyxJQUFJL3hELE9BQU8sa0JBQW9CK3hELEVBQWEsVUFBVyxNQUNwSEUsRUFBUzluRCxFQUFLaE0sUUFBUTZ6RCxHQUFjLFNBQVVFLEVBQUtybkYsRUFBTWd2RCxHQWEzRCxPQVpBaTRCLEVBQWVqNEIsRUFBT2oyRSxPQUNqQnNxRyxHQUFtQjZELElBQThCLGFBQWZBLElBQ3JDbG5GLEVBQU9BLEVBQ0pzekIsUUFBUSxzQkFBdUIsTUFDL0JBLFFBQVEsNEJBQTZCLE9BRXRDcXdELEdBQXlCdUQsRUFBWWxuRixLQUN2Q0EsRUFBT0EsRUFBSzljLE1BQU0sSUFFaEJuSixFQUFRcXpDLE9BQ1ZyekMsRUFBUXF6QyxNQUFNcHRCLEdBRVQsTUFFVG5CLEdBQVN5Z0MsRUFBS3ZtRCxPQUFTcXVHLEVBQU9ydUcsT0FDOUJ1bUQsRUFBTzhuRCxFQUNQRSxFQUFZSixFQUFZcm9GLEVBQVFvb0YsRUFBY3BvRixPQXZHRixDQUM1QyxJQUFJMG9GLEVBQVVqb0QsRUFBS243QyxRQUFRLEtBQzNCLEdBQWdCLElBQVpvakcsRUFBZSxDQUVqQixHQUFJcEUsR0FBUWx4RCxLQUFLcU4sR0FBTyxDQUN0QixJQUFJa29ELEVBQWFsb0QsRUFBS243QyxRQUFRLFVBRTlCLEdBQUlxakcsR0FBYyxFQUFHLENBQ2Z6dEcsRUFBUTB0RyxtQkFDVjF0RyxFQUFRb3BHLFFBQVE3akQsRUFBSzNSLFVBQVUsRUFBRzY1RCxHQUFhM29GLEVBQU9BLEVBQVEyb0YsRUFBYSxHQUU3RUUsRUFBUUYsRUFBYSxHQUNyQixVQUtKLEdBQUlwRSxHQUFtQm54RCxLQUFLcU4sR0FBTyxDQUNqQyxJQUFJcW9ELEVBQWlCcm9ELEVBQUtuN0MsUUFBUSxNQUVsQyxHQUFJd2pHLEdBQWtCLEVBQUcsQ0FDdkJELEVBQVFDLEVBQWlCLEdBQ3pCLFVBS0osSUFBSUMsRUFBZXRvRCxFQUFLeEwsTUFBTW92RCxJQUM5QixHQUFJMEUsRUFBYyxDQUNoQkYsRUFBUUUsRUFBYSxHQUFHN3VHLFFBQ3hCLFNBSUYsSUFBSTh1RyxFQUFjdm9ELEVBQUt4TCxNQUFNazdCLElBQzdCLEdBQUk2NEIsRUFBYSxDQUNmLElBQUlDLEVBQVdqcEYsRUFDZjZvRixFQUFRRyxFQUFZLEdBQUc5dUcsUUFDdkJ1dUcsRUFBWU8sRUFBWSxHQUFJQyxFQUFVanBGLEdBQ3RDLFNBSUYsSUFBSWtwRixFQUFnQkMsSUFDcEIsR0FBSUQsRUFBZSxDQUNqQkUsRUFBZUYsR0FDWHBFLEdBQXlCb0UsRUFBY3RwRixRQUFTNmdDLElBQ2xEb29ELEVBQVEsR0FFVixVQUlKLElBQUkxbkYsT0FBTyxFQUFVa29GLE9BQU8sRUFBVTFtRyxPQUFPLEVBQzdDLEdBQUkrbEcsR0FBVyxFQUFHLENBRWhCLElBREFXLEVBQU81b0QsRUFBS3A4QyxNQUFNcWtHLEtBRWZ2NEIsR0FBTy84QixLQUFLaTJELElBQ1psRixHQUFhL3dELEtBQUtpMkQsSUFDbEIvRSxHQUFRbHhELEtBQUtpMkQsSUFDYjlFLEdBQW1CbnhELEtBQUtpMkQsS0FHekIxbUcsRUFBTzBtRyxFQUFLL2pHLFFBQVEsSUFBSyxJQUNkLElBQ1hvakcsR0FBVy9sRyxFQUNYMG1HLEVBQU81b0QsRUFBS3A4QyxNQUFNcWtHLEdBRXBCdm5GLEVBQU9zL0IsRUFBSzNSLFVBQVUsRUFBRzQ1RCxHQUd2QkEsRUFBVSxJQUNadm5GLEVBQU9zL0IsR0FHTHQvQixHQUNGMG5GLEVBQVExbkYsRUFBS2puQixRQUdYZ0IsRUFBUXF6QyxPQUFTcHRCLEdBQ25Cam1CLEVBQVFxekMsTUFBTXB0QixFQUFNbkIsRUFBUW1CLEVBQUtqbkIsT0FBUThsQixHQTBCN0MsR0FBSXlnQyxJQUFTdWxCLEVBQU0sQ0FDakI5cUUsRUFBUXF6QyxPQUFTcnpDLEVBQVFxekMsTUFBTWtTLElBQzFCakksRUFBTXQrQyxRQUFVZ0IsRUFBUXk3QyxNQUMzQno3QyxFQUFReTdDLEtBQU0sMENBQTZDOEosRUFBTyxJQUFPLENBQUU2TSxNQUFPdHRDLEVBQVF5Z0MsRUFBS3ZtRCxTQUVqRyxPQU9KLFNBQVMydUcsRUFBUzUxRCxHQUNoQmp6QixHQUFTaXpCLEVBQ1R3TixFQUFPQSxFQUFLM1IsVUFBVW1FLEdBR3hCLFNBQVNrMkQsSUFDUCxJQUFJNzdDLEVBQVE3TSxFQUFLeEwsTUFBTWt2RCxJQUN2QixHQUFJNzJDLEVBQU8sQ0FDVCxJQU1JQyxFQUFLaHNELEVBTkwwekMsRUFBUSxDQUNWcjFCLFFBQVMwdEMsRUFBTSxHQUNma21CLE1BQU8sR0FDUGxtQixNQUFPdHRDLEdBSVQsSUFGQTZvRixFQUFRdjdDLEVBQU0sR0FBR3B6RCxVQUVScXpELEVBQU05TSxFQUFLeEwsTUFBTW12RCxPQUFvQjdpRyxFQUFPay9DLEVBQUt4TCxNQUFNK3VELEtBQXdCdmpELEVBQUt4TCxNQUFNOHVELE1BQ2pHeGlHLEVBQUsrckQsTUFBUXR0QyxFQUNiNm9GLEVBQVF0bkcsRUFBSyxHQUFHckgsUUFDaEJxSCxFQUFLZ3NELElBQU12dEMsRUFDWGkxQixFQUFNdStCLE1BQU1wc0UsS0FBSzdGLEdBRW5CLEdBQUlnc0QsRUFJRixPQUhBdFksRUFBTXEwRCxXQUFhLzdDLEVBQUksR0FDdkJzN0MsRUFBUXQ3QyxFQUFJLEdBQUdyekQsUUFDZis2QyxFQUFNc1ksSUFBTXZ0QyxFQUNMaTFCLEdBS2IsU0FBU20wRCxFQUFnQm4wRCxHQUN2QixJQUFJcjFCLEVBQVVxMUIsRUFBTXIxQixRQUNoQjBwRixFQUFhcjBELEVBQU1xMEQsV0FFbkJyQixJQUNjLE1BQVpELEdBQW1CbEUsR0FBaUJsa0YsSUFDdEM2b0YsRUFBWVQsR0FFVkcsRUFBb0J2b0YsSUFBWW9vRixJQUFZcG9GLEdBQzlDNm9GLEVBQVk3b0YsSUFRaEIsSUFKQSxJQUFJMnBGLEVBQVFyQixFQUFjdG9GLE1BQWMwcEYsRUFFcENyc0QsRUFBSWhJLEVBQU11K0IsTUFBTXQ1RSxPQUNoQnM1RSxFQUFRLElBQUkvckQsTUFBTXcxQixHQUNicjRCLEVBQUksRUFBR0EsRUFBSXE0QixFQUFHcjRCLElBQUssQ0FDMUIsSUFBSTdxQixFQUFPazdDLEVBQU11K0IsTUFBTTV1RCxHQUNuQmprQixFQUFRNUcsRUFBSyxJQUFNQSxFQUFLLElBQU1BLEVBQUssSUFBTSxHQUN6Q2lyRyxFQUFtQyxNQUFacGxGLEdBQStCLFNBQVo3bEIsRUFBSyxHQUMvQ21CLEVBQVFzdUcsNEJBQ1J0dUcsRUFBUThwRyxxQkFDWnh4QixFQUFNNXVELEdBQUssQ0FDVHV1QixLQUFNcDVDLEVBQUssR0FDWDRHLE1BQU9va0csR0FBV3BrRyxFQUFPcWtHLElBRXZCOXBHLEVBQVF1dUcsb0JBQ1ZqMkIsRUFBTTV1RCxHQUFHMG9DLE1BQVF2ekQsRUFBS3V6RCxNQUFRdnpELEVBQUssR0FBR2s3QyxNQUFNLFFBQVEvNkMsT0FDcERzNUUsRUFBTTV1RCxHQUFHMm9DLElBQU14ekQsRUFBS3d6RCxLQUluQmc4QyxJQUNIL3dELEVBQU1weEMsS0FBSyxDQUFFMC9ELElBQUtsbkQsRUFBUzhwRixjQUFlOXBGLEVBQVFDLGNBQWUyekQsTUFBT0EsRUFBT2xtQixNQUFPclksRUFBTXFZLE1BQU9DLElBQUt0WSxFQUFNc1ksTUFDOUd5NkMsRUFBVXBvRixHQUdSMWtCLEVBQVFveUQsT0FDVnB5RCxFQUFRb3lELE1BQU0xdEMsRUFBUzR6RCxFQUFPKzFCLEVBQU90MEQsRUFBTXFZLE1BQU9yWSxFQUFNc1ksS0FJNUQsU0FBU2s3QyxFQUFhN29GLEVBQVMwdEMsRUFBT0MsR0FDcEMsSUFBSWcwQyxFQUFLb0ksRUFLVCxHQUphLE1BQVRyOEMsSUFBaUJBLEVBQVF0dEMsR0FDbEIsTUFBUHV0QyxJQUFlQSxFQUFNdnRDLEdBR3JCSixFQUVGLElBREErcEYsRUFBb0IvcEYsRUFBUUMsY0FDdkIwaEYsRUFBTS9vRCxFQUFNdCtDLE9BQVMsRUFBR3FuRyxHQUFPLEdBQzlCL29ELEVBQU0rb0QsR0FBS21JLGdCQUFrQkMsRUFESXBJLFVBT3ZDQSxFQUFNLEVBR1IsR0FBSUEsR0FBTyxFQUFHLENBRVosSUFBSyxJQUFJMzhFLEVBQUk0ekIsRUFBTXQrQyxPQUFTLEVBQUcwcUIsR0FBSzI4RSxFQUFLMzhFLEtBQ25DQSxFQUFJMjhFLElBQVEzaEYsR0FDZDFrQixFQUFReTdDLE9BRVJ6N0MsRUFBUXk3QyxLQUNMLFFBQVc2QixFQUFNNXpCLEdBQU0sSUFBSSw2QkFDNUIsQ0FBRTBvQyxNQUFPOVUsRUFBTTV6QixHQUFHMG9DLE1BQU9DLElBQUsvVSxFQUFNNXpCLEdBQUcyb0MsTUFHdkNyeUQsRUFBUXF5RCxLQUNWcnlELEVBQVFxeUQsSUFBSS9VLEVBQU01ekIsR0FBR2tpRCxJQUFLeFosRUFBT0MsR0FLckMvVSxFQUFNdCtDLE9BQVNxbkcsRUFDZnlHLEVBQVV6RyxHQUFPL29ELEVBQU0rb0QsRUFBTSxHQUFHejZCLFFBQ0QsT0FBdEI2aUMsRUFDTHp1RyxFQUFRb3lELE9BQ1ZweUQsRUFBUW95RCxNQUFNMXRDLEVBQVMsSUFBSSxFQUFNMHRDLEVBQU9DLEdBRVgsTUFBdEJvOEMsSUFDTHp1RyxFQUFRb3lELE9BQ1ZweUQsRUFBUW95RCxNQUFNMXRDLEVBQVMsSUFBSSxFQUFPMHRDLEVBQU9DLEdBRXZDcnlELEVBQVFxeUQsS0FDVnJ5RCxFQUFRcXlELElBQUkzdEMsRUFBUzB0QyxFQUFPQyxJQXpIbENrN0MsSUFzVEFtQixDQUFVbEgsRUFBVSxDQUNsQi9yRCxLQUFNc3VELEdBQ05nRCxXQUFZL3NHLEVBQVErc0csV0FDcEJyRSxXQUFZMW9HLEVBQVEwb0csV0FDcEJDLGlCQUFrQjNvRyxFQUFRMm9HLGlCQUMxQm1CLHFCQUFzQjlwRyxFQUFROHBHLHFCQUM5QndFLDRCQUE2QnR1RyxFQUFRc3VHLDRCQUNyQ1osa0JBQW1CMXRHLEVBQVEydUcsU0FDM0JKLGtCQUFtQnZ1RyxFQUFRdXVHLGtCQUMzQm44QyxNQUFPLFNBQWdCd1osRUFBSzBNLEVBQU8rMUIsRUFBT08sRUFBU3Y4QyxHQUdqRCxJQUFJNFosRUFBTXcvQixHQUFpQkEsRUFBY3gvQixJQUFPbytCLEdBQXdCeitCLEdBSXBFbkQsR0FBZSxRQUFQd0QsSUFDVnFNLEVBaXRCUixTQUF3QkEsR0FFdEIsSUFEQSxJQUFJM1MsRUFBTSxHQUNEajhDLEVBQUksRUFBR0EsRUFBSTR1RCxFQUFNdDVFLE9BQVEwcUIsSUFBSyxDQUNyQyxJQUFJcmpCLEVBQU9peUUsRUFBTTV1RCxHQUNabWxGLEdBQVEzMkQsS0FBSzd4QyxFQUFLNHhDLFFBQ3JCNXhDLEVBQUs0eEMsS0FBTzV4QyxFQUFLNHhDLEtBQUtzQixRQUFRdTFELEdBQVksSUFDMUNucEMsRUFBSXo1RCxLQUFLN0YsSUFHYixPQUFPcy9ELEVBMXRCT29wQyxDQUFjejJCLElBR3hCLElBZ3NCbUJqNkUsRUFoc0JmNFYsRUFBVXEzRixHQUFpQjEvQixFQUFLME0sRUFBT216QixHQUN2Q3gvQixJQUNGaDRELEVBQVFnNEQsR0FBS0EsR0FJVGpzRSxFQUFRdXVHLG9CQUNWdDZGLEVBQVFtK0MsTUFBUXc4QyxFQUNoQjM2RixFQUFRbytDLElBQU1BLEVBQ2RwK0MsRUFBUXloRixZQUFjemhGLEVBQVE2Z0YsVUFBVXJvRSxRQUFPLFNBQVV1aUYsRUFBVzNvRyxHQUVsRSxPQURBMm9HLEVBQVUzb0csRUFBSzR4QyxNQUFRNXhDLEVBQ2hCMm9HLElBQ04sS0FFTDEyQixFQUFNanZFLFNBQVEsU0FBVWhELEdBQ2xCOGtHLEdBQW1CanpELEtBQUs3eEMsRUFBSzR4QyxPQUMvQjh4RCxHQUNFLG9HQUVBLENBQ0UzM0MsTUFBTy9yRCxFQUFLK3JELE1BQVEvckQsRUFBSzR4QyxLQUFLN3RDLFFBQVEsS0FDdENpb0QsSUFBS2hzRCxFQUFLK3JELE1BQVEvckQsRUFBSzR4QyxLQUFLajVDLGNBNnFCN0IsV0FGVVgsRUFwcUJBNFYsR0FzcUJsQjIzRCxNQUNTLFdBQVh2dEUsRUFBR3V0RSxLQUNEdnRFLEVBQUd3MkYsU0FBU3gyRSxNQUNRLG9CQUFyQmhnQixFQUFHdzJGLFNBQVN4MkUsT0F6cUJvQjRxRCxRQUM5QmgxRCxFQUFRdzRGLFdBQVksRUFDcEIxQyxHQUNFLDBJQUVNbitCLEVBRk4saUNBR0EsQ0FBRXhaLE1BQU9uK0MsRUFBUW0rQyxTQUtyQixJQUFLLElBQUkxb0MsRUFBSSxFQUFHQSxFQUFJdWdGLEdBQWNqckcsT0FBUTBxQixJQUN4Q3pWLEVBQVVnMkYsR0FBY3ZnRixHQUFHelYsRUFBU2pVLElBQVlpVSxFQUc3QzRyRixJQXVJWCxTQUFxQnhoRyxHQUNrQixNQUFqQ3kzRixHQUFpQnozRixFQUFJLFdBQ3ZCQSxFQUFHeWtGLEtBQU0sR0F4SUxtc0IsQ0FBV2g3RixHQUNQQSxFQUFRNnVFLE1BQ1YrYyxHQUFTLElBR1RzSyxHQUFpQmwyRixFQUFRMjNELE9BQzNCaWdDLEdBQVEsR0FFTmhNLEVBb0lWLFNBQTBCeGhHLEdBQ3hCLElBQUlpN0IsRUFBT2o3QixFQUFHeTJGLFVBQ1ZwaEQsRUFBTXBhLEVBQUt0NkIsT0FDZixHQUFJMDBDLEVBRUYsSUFEQSxJQUFJNGtDLEVBQVFqNkUsRUFBR2k2RSxNQUFRLElBQUkvckQsTUFBTW1uQixHQUN4QmhxQixFQUFJLEVBQUdBLEVBQUlncUIsRUFBS2hxQixJQUN2QjR1RCxFQUFNNXVELEdBQUssQ0FDVHV1QixLQUFNM2UsRUFBSzVQLEdBQUd1dUIsS0FDZHh5QyxNQUFPaXpDLEtBQUtDLFVBQVVyZixFQUFLNVAsR0FBR2prQixRQUVYLE1BQWpCNnpCLEVBQUs1UCxHQUFHMG9DLFFBQ1ZrbUIsRUFBTTV1RCxHQUFHMG9DLE1BQVE5NEIsRUFBSzVQLEdBQUcwb0MsTUFDekJrbUIsRUFBTTV1RCxHQUFHMm9DLElBQU0vNEIsRUFBSzVQLEdBQUcyb0MsVUFHakJoMEQsRUFBR3lrRixNQUViemtGLEVBQUdvMkYsT0FBUSxHQXBKUHlhLENBQWdCajdGLEdBQ05BLEVBQVFnNEYsWUFFbEJrRCxHQUFXbDdGLEdBcVBuQixTQUFvQjVWLEdBQ2xCLElBQUlrMUYsRUFBTXVDLEdBQWlCejNGLEVBQUksUUFDL0IsR0FBSWsxRixFQUNGbDFGLEVBQUc4dEcsR0FBSzVZLEVBQ1JnWixHQUFlbHVHLEVBQUksQ0FDakJrMUYsSUFBS0EsRUFDTGlaLE1BQU9udUcsUUFFSixDQUNpQyxNQUFsQ3kzRixHQUFpQnozRixFQUFJLFlBQ3ZCQSxFQUFHZ3VHLE1BQU8sR0FFWixJQUFJRCxFQUFTdFcsR0FBaUJ6M0YsRUFBSSxhQUM5Qit0RyxJQUNGL3RHLEVBQUcrdEcsT0FBU0EsSUFsUVZnRCxDQUFVbjdGLEdBZ1RsQixTQUFzQjVWLEdBRUwsTUFERHkzRixHQUFpQnozRixFQUFJLFlBRWpDQSxFQUFHcTJDLE1BQU8sR0FsVE4yNkQsQ0FBWXA3RixJQUdUdFYsR0FHRDJ0RyxFQUZGM3RHLEVBQU9zVixHQU1KbzZGLEVBSUh0QyxFQUFhOTNGLElBSGJ3M0YsRUFBZ0J4M0YsRUFDaEJxcEMsRUFBTXB4QyxLQUFLK0gsS0FNZm8rQyxJQUFLLFNBQWN1WixFQUFLeFosRUFBT2s5QyxHQUM3QixJQUFJcjdGLEVBQVVxcEMsRUFBTUEsRUFBTXQrQyxPQUFTLEdBRW5DcytDLEVBQU10K0MsUUFBVSxFQUNoQnlzRyxFQUFnQm51RCxFQUFNQSxFQUFNdCtDLE9BQVMsR0FDakNnQixFQUFRdXVHLG9CQUNWdDZGLEVBQVFvK0MsSUFBTWk5QyxHQUVoQnZELEVBQWE5M0YsSUFHZm8vQixNQUFPLFNBQWdCcHRCLEVBQU1tc0MsRUFBT0MsR0FDbEMsR0FBS281QyxHQWtCTCxJQUFJaGpDLEdBQ29CLGFBQXRCZ2pDLEVBQWM3L0IsS0FDZDYvQixFQUFjNVcsU0FBUzExQixjQUFnQmw1QyxFQUZ6QyxDQU1BLElBc0JNMC9DLEVBQ0E5VCxFQXZCRjluRCxFQUFXMGhHLEVBQWMxaEcsVUFFM0JrYyxFQURFNGxGLEdBQVM1bEYsRUFBS3VILE9BNGtCSixZQURBbnZCLEVBMWtCS290RyxHQTJrQmI3L0IsS0FBK0IsVUFBWHZ0RSxFQUFHdXRFLElBM2tCTzNsRCxFQUFPbWxGLEdBQWlCbmxGLEdBQ2hEbGMsRUFBUy9LLE9BR1Yyc0csRUFDZ0IsYUFBckJBLEdBR0tWLEdBQVkveUQsS0FBS2p5QixHQUFRLEdBRXpCLElBR0Z5bEYsRUFBcUIsSUFBTSxHQVYzQixNQWFGRyxHQUE4QixhQUFyQkYsSUFFWjFsRixFQUFPQSxFQUFLc3pCLFFBQVEyeEQsR0FBZ0IsT0FJakNyTCxHQUFtQixNQUFUNTVFLElBQWlCMC9DLEVBQU1taUMsR0FBVTdoRixFQUFNNGhGLEtBQ3BEaDJDLEVBQVEsQ0FDTnh6QyxLQUFNLEVBQ04wbkUsV0FBWXBnQixFQUFJb2dCLFdBQ2hCeDBCLE9BQVFvVSxFQUFJcFUsT0FDWnRyQyxLQUFNQSxHQUVVLE1BQVRBLEdBQWlCbGMsRUFBUy9LLFFBQWlELE1BQXZDK0ssRUFBU0EsRUFBUy9LLE9BQVMsR0FBR2luQixPQUMzRTRyQyxFQUFRLENBQ054ekMsS0FBTSxFQUNONEgsS0FBTUEsSUFHTjRyQyxJQUNFN3hELEVBQVF1dUcsb0JBQ1YxOEMsRUFBTU8sTUFBUUEsRUFDZFAsRUFBTVEsSUFBTUEsR0FFZHRvRCxFQUFTbUMsS0FBSzJsRCxXQWhFVjVyQyxJQUFTdWhGLEVBQ1hzRSxFQUNFLHFFQUNBLENBQUUxNUMsTUFBT0EsS0FFRG5zQyxFQUFPQSxFQUFLdUgsU0FDdEJzK0UsRUFDRyxTQUFZN2xGLEVBQU8sMENBQ3BCLENBQUVtc0MsTUFBT0EsSUEwbEJ2QixJQUFvQi96RCxHQTloQmhCK3FHLFFBQVMsU0FBa0JuakYsRUFBTW1zQyxFQUFPQyxHQUd0QyxHQUFJbzVDLEVBQWUsQ0FDakIsSUFBSTU1QyxFQUFRLENBQ1Z4ekMsS0FBTSxFQUNONEgsS0FBTUEsRUFDTndtRCxXQUFXLEdBRVR6c0UsRUFBUXV1RyxvQkFDVjE4QyxFQUFNTyxNQUFRQSxFQUNkUCxFQUFNUSxJQUFNQSxHQUVkbzVDLEVBQWMxaEcsU0FBU21DLEtBQUsybEQsT0FJM0JsekQsRUE4QlQsU0FBU3V0RyxHQUNQajRGLEVBQ0FqVSxHQThTRixJQUE0QjNCLEdBdlI1QixTQUFxQkEsR0FDbkIsSUFBSWsxRixFQUFNb0MsR0FBZXQzRixFQUFJLE9BQzdCLEdBQUlrMUYsRUFBSyxDQVFMLEdBTmUsYUFBWGwxRixFQUFHdXRFLEtBQ0xtK0IsR0FDRSxzRUFDQXRVLEdBQWtCcDNGLEVBQUksUUFHdEJBLEVBQUdreEcsSUFBSyxDQUNWLElBQUlqNEQsRUFBV2o1QyxFQUFHbXhHLFdBQWFueEcsRUFBR294RyxVQUM5Qjc5QyxFQUFTdnpELEVBQUd1ekQsT0FDWnRhLEdBQVlBLElBQWFpOEMsR0FBTzNoQyxHQUF5QixxQkFBZkEsRUFBT2dhLEtBQ25EbStCLEdBQ0Usb0dBRUF0VSxHQUFrQnAzRixFQUFJLFFBQ3RCLEdBS1JBLEVBQUdnTixJQUFNa29GLElBNUNYbWMsQ0FBV3o3RixHQUlYQSxFQUFRd2dGLE9BQ0x4Z0YsRUFBUTVJLE1BQ1I0SSxFQUFRc3BFLGNBQ1J0cEUsRUFBUTZnRixVQUFVOTFGLE9BeUN2QixTQUFxQlgsR0FDbkIsSUFBSTB0RixFQUFNNEosR0FBZXQzRixFQUFJLE9BQ3pCMHRGLElBQ0YxdEYsRUFBRzB0RixJQUFNQSxFQUNUMXRGLEVBQUc2eEYsU0FxWlAsU0FBcUI3eEYsR0FFbkIsSUFEQSxJQUFJdXpELEVBQVN2ekQsRUFDTnV6RCxHQUFRLENBQ2IsUUFBbUJ4eUQsSUFBZnd5RCxFQUFPMjlDLElBQ1QsT0FBTyxFQUVUMzlDLEVBQVNBLEVBQU9BLE9BRWxCLE9BQU8sRUE3WlMrOUMsQ0FBV3R4RyxJQTFDM0J1eEcsQ0FBVzM3RixHQXVKYixTQUE2QjVWLEdBQzNCLElBQUlzdUcsRUFDVyxhQUFYdHVHLEVBQUd1dEUsTUFDTCtnQyxFQUFZN1csR0FBaUJ6M0YsRUFBSSxXQUcvQjByRyxHQUNFLDBOQUlBMXJHLEVBQUdxM0YsWUFBbUIsT0FDdEIsR0FHSnIzRixFQUFHc3VHLFVBQVlBLEdBQWE3VyxHQUFpQnozRixFQUFJLGdCQUN2Q3N1RyxFQUFZN1csR0FBaUJ6M0YsRUFBSSxpQkFFdkNBLEVBQUd3MkYsU0FBUyxVQUNka1YsR0FDRSx3REFBMkQxckcsRUFBTSxJQUFqRSxvR0FHQUEsRUFBR3EzRixZQUFZLGVBQ2YsR0FHSnIzRixFQUFHc3VHLFVBQVlBLEdBSWpCLElBQUlDLEVBQWFqWCxHQUFldDNGLEVBQUksUUFhbEMsR0FaRXV1RyxJQUNGdnVHLEVBQUd1dUcsV0FBNEIsT0FBZkEsRUFBc0IsWUFBY0EsRUFDcER2dUcsRUFBR3d4RyxxQkFBdUJ4eEcsRUFBR3cyRixTQUFTLFdBQVl4MkYsRUFBR3cyRixTQUFTLGdCQUcvQyxhQUFYeDJGLEVBQUd1dEUsS0FBdUJ2dEUsRUFBR3N1RyxXQUMvQmpZLEdBQVFyMkYsRUFBSSxPQUFRdXVHLEVBQVluWCxHQUFrQnAzRixFQUFJLFVBTXpDLGFBQVhBLEVBQUd1dEUsSUFBb0IsQ0FFekIsSUFBSWtrQyxFQUFjN1osR0FBd0I1M0YsRUFBSTJzRyxJQUM5QyxHQUFJOEUsRUFBYSxFQUVUenhHLEVBQUd1dUcsWUFBY3Z1RyxFQUFHc3VHLFlBQ3RCNUMsR0FDRSxxREFDQTFyRyxHQUdBQSxFQUFHdXpELFNBQVcwNEMsR0FBZWpzRyxFQUFHdXpELFNBQ2xDbTRDLEdBQ0UscUZBRUExckcsR0FJTixJQUFJMHRGLEVBQU1na0IsR0FBWUQsR0FDbEI3M0QsRUFBTzh6QyxFQUFJOXpDLEtBQ1hzOEMsRUFBVXhJLEVBQUl3SSxRQUNsQmwyRixFQUFHdXVHLFdBQWEzMEQsRUFDaEI1NUMsRUFBR3d4RyxrQkFBb0J0YixFQUN2QmwyRixFQUFHc3VHLFVBQVltRCxFQUFZcnFHLE9BQVM0bEcsUUFFakMsQ0FFTCxJQUFJMkUsRUFBZ0IvWixHQUF3QjUzRixFQUFJMnNHLElBQ2hELEdBQUlnRixFQUFlLENBRVYxRixHQUFlanNHLElBQ2xCMHJHLEdBQ0UsdURBQ0FpRyxJQUdBM3hHLEVBQUdzdUcsV0FBYXR1RyxFQUFHdXVHLGFBQ3JCN0MsR0FDRSxxREFDQTFyRyxHQUdBQSxFQUFHay9FLGFBQ0x3c0IsR0FDRSxpSEFFQWlHLEdBS04sSUFBSTMzQixFQUFRaDZFLEVBQUdrL0UsY0FBZ0JsL0UsRUFBR2svRSxZQUFjLElBQzVDMHlCLEVBQVFGLEdBQVlDLEdBQ3BCeDNCLEVBQVN5M0IsRUFBTWg0RCxLQUNmaTRELEVBQVlELEVBQU0xYixRQUNsQjRiLEVBQWdCOTNCLEVBQU1HLEdBQVU4eUIsR0FBaUIsV0FBWSxHQUFJanRHLEdBQ3JFOHhHLEVBQWN2RCxXQUFhcDBCLEVBQzNCMjNCLEVBQWNOLGtCQUFvQkssRUFDbENDLEVBQWNwbUcsU0FBVzFMLEVBQUcwTCxTQUFTTSxRQUFPLFNBQVV1dkMsR0FDcEQsSUFBS0EsRUFBRSt5RCxVQUVMLE9BREEveUQsRUFBRWdZLE9BQVN1K0MsR0FDSixLQUdYQSxFQUFjeEQsVUFBWXFELEVBQWN2cUcsT0FBUzRsRyxHQUVqRGh0RyxFQUFHMEwsU0FBVyxHQUVkMUwsRUFBR28yRixPQUFRLElBdlFqQjJiLENBQW1CbjhGLEdBa1NKLFVBRFc1VixFQWhTUjRWLEdBaVNYMjNELE1BQ0x2dEUsRUFBR2d5RyxTQUFXMWEsR0FBZXQzRixFQUFJLFFBQzdCQSxFQUFHZ04sS0FDTDArRixHQUNFLDhKQUdBdFUsR0FBa0JwM0YsRUFBSSxTQU05QixTQUEyQkEsR0FDekIsSUFBSTBsRyxHQUNDQSxFQUFVcE8sR0FBZXQzRixFQUFJLFNBQ2hDQSxFQUFHa2pGLFVBQVl3aUIsR0FFOEIsTUFBM0NqTyxHQUFpQnozRixFQUFJLHFCQUN2QkEsRUFBR2dnRixnQkFBaUIsR0FuVHRCaXlCLENBQWlCcjhGLEdBQ2pCLElBQUssSUFBSXlWLEVBQUksRUFBR0EsRUFBSXNnRixHQUFXaHJHLE9BQVEwcUIsSUFDckN6VixFQUFVKzFGLEdBQVd0Z0YsR0FBR3pWLEVBQVNqVSxJQUFZaVUsRUFHL0MsT0FrVEYsU0FBdUI1VixHQUNyQixJQUNJcXJCLEVBQUdxNEIsRUFBRzlKLEVBQU0yNUMsRUFBU25zRixFQUFPaXNGLEVBQVc2ZSxFQUFTQyxFQURoRGwzRSxFQUFPajdCLEVBQUd5MkYsVUFFZCxJQUFLcHJFLEVBQUksRUFBR3E0QixFQUFJem9CLEVBQUt0NkIsT0FBUTBxQixFQUFJcTRCLEVBQUdyNEIsSUFHbEMsR0FGQXV1QixFQUFPMjVDLEVBQVV0NEQsRUFBSzVQLEdBQUd1dUIsS0FDekJ4eUMsRUFBUTZ6QixFQUFLNVAsR0FBR2prQixNQUNaK2tHLEdBQU10eUQsS0FBS0QsR0FTYixHQVBBNTVDLEVBQUdveUcsYUFBYyxHQUVqQi9lLEVBQVlnZixHQUFlejRELEVBQUtzQixRQUFRaXhELEdBQU8sUUFHN0N2eUQsRUFBT0EsRUFBS3NCLFFBQVF3eEQsR0FBWSxLQUU5QkQsR0FBTzV5RCxLQUFLRCxHQUNkQSxFQUFPQSxFQUFLc0IsUUFBUXV4RCxHQUFRLElBQzVCcmxHLEVBQVE2dEYsR0FBYTd0RixJQUNyQitxRyxFQUFZNUYsR0FBYTF5RCxLQUFLRCxNQUU1QkEsRUFBT0EsRUFBSzl1QyxNQUFNLEdBQUksSUFHRSxJQUF4QjFELEVBQU0rbkIsT0FBT3h1QixRQUViK3FHLEdBQ0csdUVBQTBFOXhELEVBQU8sS0FHbEZ5NUMsSUFDRUEsRUFBVTM3RCxPQUFTeTZFLEdBRVIsZUFEYnY0RCxFQUFPK3NCLEVBQVMvc0IsTUFDWUEsRUFBTyxhQUVqQ3k1QyxFQUFVaWYsUUFBVUgsSUFDdEJ2NEQsRUFBTytzQixFQUFTL3NCLElBRWR5NUMsRUFBVTNRLE9BQ1p3dkIsRUFBVWhhLEdBQWtCOXdGLEVBQU8sVUFDOUIrcUcsRUF1Qkh0YixHQUNFNzJGLEVBQ0MsY0FBa0I0NUMsRUFBTyxJQUMxQnM0RCxFQUNBLE1BQ0EsRUFDQXhHLEdBQ0F6d0UsRUFBSzVQLElBQ0wsSUE5QkZ3ckUsR0FDRTcyRixFQUNDLFVBQWEybUUsRUFBUy9zQixHQUN2QnM0RCxFQUNBLE1BQ0EsRUFDQXhHLEdBQ0F6d0UsRUFBSzVQLElBRUh5N0MsRUFBVWx0QixLQUFVK3NCLEVBQVMvc0IsSUFDL0JpOUMsR0FDRTcyRixFQUNDLFVBQWE4bUUsRUFBVWx0QixHQUN4QnM0RCxFQUNBLE1BQ0EsRUFDQXhHLEdBQ0F6d0UsRUFBSzVQLE9Ba0JWZ29FLEdBQWFBLEVBQVUzN0QsT0FDekIxM0IsRUFBR2tqRixXQUFhNm9CLEdBQW9CL3JHLEVBQUd1dEUsSUFBS3Z0RSxFQUFHdzJGLFNBQVN4MkUsS0FBTTQ1QixHQUUvRHE4QyxHQUFRajJGLEVBQUk0NUMsRUFBTXh5QyxFQUFPNnpCLEVBQUs1UCxHQUFJOG1GLEdBRWxDOWIsR0FBUXIyRixFQUFJNDVDLEVBQU14eUMsRUFBTzZ6QixFQUFLNVAsR0FBSThtRixRQUUvQixHQUFJakcsR0FBS3J5RCxLQUFLRCxHQUNuQkEsRUFBT0EsRUFBS3NCLFFBQVFneEQsR0FBTSxLQUMxQmlHLEVBQVk1RixHQUFhMXlELEtBQUtELE1BRTVCQSxFQUFPQSxFQUFLOXVDLE1BQU0sR0FBSSxJQUV4QityRixHQUFXNzJGLEVBQUk0NUMsRUFBTXh5QyxFQUFPaXNGLEdBQVcsRUFBT3FZLEdBQVF6d0UsRUFBSzVQLEdBQUk4bUYsT0FDMUQsQ0FHTCxJQUFJSSxHQUZKMzRELEVBQU9BLEVBQUtzQixRQUFRaXhELEdBQU8sS0FFUHp3RCxNQUFNOHdELElBQ3RCeFosRUFBTXVmLEdBQVlBLEVBQVMsR0FDL0JKLEdBQVksRUFDUm5mLElBQ0ZwNUMsRUFBT0EsRUFBSzl1QyxNQUFNLElBQUtrb0YsRUFBSXJ5RixPQUFTLElBQ2hDNHJHLEdBQWExeUQsS0FBS201QyxLQUNwQkEsRUFBTUEsRUFBSWxvRixNQUFNLEdBQUksR0FDcEJxbkcsR0FBWSxJQUdoQnpiLEdBQWExMkYsRUFBSTQ1QyxFQUFNMjVDLEVBQVNuc0YsRUFBTzRyRixFQUFLbWYsRUFBVzllLEVBQVdwNEQsRUFBSzVQLElBQzFELFVBQVR1dUIsR0FDRjQ0RCxHQUFtQnh5RyxFQUFJb0gsUUFNZnFpRyxHQUFVcmlHLEVBQU9vaUcsS0FFekJrQyxHQUNFOXhELEVBQU8sS0FBUXh5QyxFQUFmd3lDLHFLQUlBM2UsRUFBSzVQLElBSVhnckUsR0FBUXIyRixFQUFJNDVDLEVBQU1TLEtBQUtDLFVBQVVsekMsR0FBUTZ6QixFQUFLNVAsS0FHekNyckIsRUFBR2tqRixXQUNLLFVBQVR0cEMsR0FDQW15RCxHQUFvQi9yRyxFQUFHdXRFLElBQUt2dEUsRUFBR3cyRixTQUFTeDJFLEtBQU00NUIsSUFDaERxOEMsR0FBUWoyRixFQUFJNDVDLEVBQU0sT0FBUTNlLEVBQUs1UCxJQWxickNvbkYsQ0FBYTc4RixHQUNOQSxFQXNDVCxTQUFTazdGLEdBQVk5d0csR0FDbkIsSUFBSWsxRixFQUNKLEdBQUtBLEVBQU11QyxHQUFpQnozRixFQUFJLFNBQVcsQ0FDekMsSUFBSXNuRSxFQWNSLFNBQW1CNHRCLEdBQ2pCLElBQUl3ZCxFQUFVeGQsRUFBSXg1QyxNQUFNMHdELElBQ3hCLEdBQUtzRyxFQUFMLENBQ0EsSUFBSXByQyxFQUFNLEdBQ1ZBLEVBQUk0cEMsSUFBTXdCLEVBQVEsR0FBR3ZqRixPQUNyQixJQUFJd2pGLEVBQVFELEVBQVEsR0FBR3ZqRixPQUFPK3JCLFFBQVFveEQsR0FBZSxJQUNqRHNHLEVBQWdCRCxFQUFNajNELE1BQU0yd0QsSUFVaEMsT0FUSXVHLEdBQ0Z0ckMsRUFBSXFyQyxNQUFRQSxFQUFNejNELFFBQVFteEQsR0FBZSxJQUFJbDlFLE9BQzdDbTRDLEVBQUk4cEMsVUFBWXdCLEVBQWMsR0FBR3pqRixPQUM3QnlqRixFQUFjLEtBQ2hCdHJDLEVBQUk2cEMsVUFBWXlCLEVBQWMsR0FBR3pqRixTQUduQ200QyxFQUFJcXJDLE1BQVFBLEVBRVByckMsR0E5Qkt1ckMsQ0FBUzNkLEdBQ2Y1dEIsRUFDRjFvQixFQUFPNStDLEVBQUlzbkUsR0FFWG9rQyxHQUNHLDZCQUErQnhXLEVBQ2hDbDFGLEVBQUdxM0YsWUFBWSxXQWdGdkIsU0FBUzZXLEdBQWdCbHVHLEVBQUk4eUcsR0FDdEI5eUcsRUFBRyt5RyxlQUNOL3lHLEVBQUcreUcsYUFBZSxJQUVwQi95RyxFQUFHK3lHLGFBQWFsbEcsS0FBS2lsRyxHQW1JdkIsU0FBU3BCLEdBQWFoTSxHQUNwQixJQUFJOXJELEVBQU84ckQsRUFBUTlyRCxLQUFLc0IsUUFBUXl4RCxHQUFRLElBV3hDLE9BVksveUQsSUFDcUIsTUFBcEI4ckQsRUFBUTlyRCxLQUFLLEdBQ2ZBLEVBQU8sVUFFUDh4RCxHQUNFLGdEQUNBaEcsSUFJQzZHLEdBQWExeUQsS0FBS0QsR0FFckIsQ0FBRUEsS0FBTUEsRUFBSzl1QyxNQUFNLEdBQUksR0FBSW9yRixTQUFTLEdBRXBDLENBQUV0OEMsS0FBTyxJQUFPQSxFQUFPLElBQU9zOEMsU0FBUyxHQTRLN0MsU0FBU21jLEdBQWdCejRELEdBQ3ZCLElBQUk4QixFQUFROUIsRUFBSzhCLE1BQU1neEQsSUFDdkIsR0FBSWh4RCxFQUFPLENBQ1QsSUFBSTByQixFQUFNLEdBRVYsT0FEQTFyQixFQUFNMXdDLFNBQVEsU0FBVXl0RCxHQUFLMk8sRUFBSTNPLEVBQUUzdEQsTUFBTSxLQUFNLEtBQ3hDczhELEdBSVgsU0FBUzhsQyxHQUFjanpCLEdBRXJCLElBREEsSUFBSW4xQyxFQUFNLEdBQ0R6WixFQUFJLEVBQUdxNEIsRUFBSXUyQixFQUFNdDVFLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLEtBRXJDeVosRUFBSW0xQyxFQUFNNXVELEdBQUd1dUIsT0FBVXd3QixHQUFTRSxHQUVoQ29oQyxHQUFPLHdCQUEwQnp4QixFQUFNNXVELEdBQUd1dUIsS0FBTXFnQyxFQUFNNXVELElBRXhEeVosRUFBSW0xQyxFQUFNNXVELEdBQUd1dUIsTUFBUXFnQyxFQUFNNXVELEdBQUdqa0IsTUFFaEMsT0FBTzA5QixFQWtCVCxJQUFJMHJFLEdBQVUsZUFDVkMsR0FBYSxVQWVqQixTQUFTK0IsR0FBb0J4eUcsRUFBSW9ILEdBRS9CLElBREEsSUFBSTRyRyxFQUFNaHpHLEVBQ0hnekcsR0FDREEsRUFBSTlCLEtBQU84QixFQUFJTCxRQUFVdnJHLEdBQzNCc2tHLEdBQ0UsSUFBTzFyRyxFQUFNLElBQUksYUFBZ0JvSCxFQUFqQyxzUkFLQXBILEVBQUdxM0YsWUFBWSxZQUduQjJiLEVBQU1BLEVBQUl6L0MsT0FvRWQsU0FBUzAvQyxHQUFpQmp6RyxHQUN4QixPQUFPaXRHLEdBQWlCanRHLEVBQUd1dEUsSUFBS3Z0RSxFQUFHeTJGLFVBQVUzckYsUUFBUzlLLEVBQUd1ekQsUUFHM0QsSUFJSTIvQyxHQUFZLENBQ2RySixHQUNBSyxHQU5ZLENBQ1ppSixpQkFuRUYsU0FBMkJuekcsRUFBSTJCLEdBQzdCLEdBQWUsVUFBWDNCLEVBQUd1dEUsSUFBaUIsQ0FDdEIsSUFLSTZsQyxFQUxBdHVFLEVBQU05a0MsRUFBR3cyRixTQUNiLElBQUsxeEQsRUFBSSxXQUNQLE9BV0YsSUFQSUEsRUFBSSxVQUFZQSxFQUFJLGtCQUN0QnN1RSxFQUFjOWIsR0FBZXQzRixFQUFJLFNBRTlCOGtDLEVBQUk5a0IsTUFBU296RixJQUFldHVFLEVBQUksWUFDbkNzdUUsRUFBYyxJQUFPdHVFLEVBQUksVUFBYSxVQUdwQ3N1RSxFQUFhLENBQ2YsSUFBSUMsRUFBYzViLEdBQWlCejNGLEVBQUksUUFBUSxHQUMzQ3N6RyxFQUFtQkQsRUFBZSxNQUFRQSxFQUFjLElBQU8sR0FDL0RFLEVBQWtELE1BQXhDOWIsR0FBaUJ6M0YsRUFBSSxVQUFVLEdBQ3pDd3pHLEVBQWtCL2IsR0FBaUJ6M0YsRUFBSSxhQUFhLEdBRXBEeXpHLEVBQVVSLEdBQWdCanpHLEdBRTlCOHdHLEdBQVcyQyxHQUNYbGQsR0FBV2tkLEVBQVMsT0FBUSxZQUM1QjVGLEdBQWU0RixFQUFTOXhHLEdBQ3hCOHhHLEVBQVE3RixXQUFZLEVBQ3BCNkYsRUFBUTNGLEdBQUssSUFBTXNGLEVBQWMsaUJBQW1CRSxFQUNwRHBGLEdBQWV1RixFQUFTLENBQ3RCdmUsSUFBS3VlLEVBQVEzRixHQUNiSyxNQUFPc0YsSUFHVCxJQUFJQyxFQUFVVCxHQUFnQmp6RyxHQUM5QnkzRixHQUFpQmljLEVBQVMsU0FBUyxHQUNuQ25kLEdBQVdtZCxFQUFTLE9BQVEsU0FDNUI3RixHQUFlNkYsRUFBUy94RyxHQUN4QnVzRyxHQUFldUYsRUFBUyxDQUN0QnZlLElBQUssSUFBTWtlLEVBQWMsY0FBZ0JFLEVBQ3pDbkYsTUFBT3VGLElBR1QsSUFBSUMsRUFBVVYsR0FBZ0JqekcsR0FlOUIsT0FkQXkzRixHQUFpQmtjLEVBQVMsU0FBUyxHQUNuQ3BkLEdBQVdvZCxFQUFTLFFBQVNQLEdBQzdCdkYsR0FBZThGLEVBQVNoeUcsR0FDeEJ1c0csR0FBZXVGLEVBQVMsQ0FDdEJ2ZSxJQUFLbWUsRUFDTGxGLE1BQU93RixJQUdMSixFQUNGRSxFQUFRekYsTUFBTyxFQUNOd0YsSUFDVEMsRUFBUTFGLE9BQVN5RixHQUdaQyxPQW1DYixJQXVCSUcsR0FDQUMsR0FoQkFDLEdBQWMsQ0FDaEJwRixZQUFZLEVBQ1pwMkQsUUFBUzQ2RCxHQUNUdmdDLFdBWGlCLENBQ2pCMlEsTUEzc0dGLFNBQ0V0akYsRUFDQXV5RixFQUNBd2hCLEdBRUFqZixHQUFTaWYsRUFDVCxJQUFJM3NHLEVBQVFtckYsRUFBSW5yRixNQUNaaXNGLEVBQVlkLEVBQUljLFVBQ2hCOWxCLEVBQU12dEUsRUFBR3V0RSxJQUNUdnRELEVBQU9oZ0IsRUFBR3cyRixTQUFTeDJFLEtBY3ZCLEdBVGMsVUFBUnV0RCxHQUE0QixTQUFUdnRELEdBQ3JCODBFLEdBQ0UsSUFBTzkwRixFQUFNLElBQUksYUFBZ0JvSCxFQUFqQyxrRkFFQXBILEVBQUdxM0YsWUFBWSxZQUtqQnIzRixFQUFHa2pGLFVBR0wsT0FGQTJVLEdBQWtCNzNGLEVBQUlvSCxFQUFPaXNGLElBRXRCLEVBQ0YsR0FBWSxXQUFSOWxCLEdBcUViLFNBQ0V2dEUsRUFDQW9ILEVBQ0Fpc0YsR0FFQSxJQU9JcnZDLEVBQU8sOEtBUEVxdkMsR0FBYUEsRUFBVXlFLE9BSVosVUFBWSxPQUd6QixNQUVYakIsR0FBVzcyRixFQUFJLFNBRGZna0QsRUFBT0EsRUFBTyxJQUFPazBDLEdBQWtCOXdGLEVBRnRCLDZEQUdjLE1BQU0sR0FsRm5DNHNHLENBQVVoMEcsRUFBSW9ILEVBQU9pc0YsUUFDaEIsR0FBWSxVQUFSOWxCLEdBQTRCLGFBQVR2dEQsR0F3QmhDLFNBQ0VoZ0IsRUFDQW9ILEVBQ0Fpc0YsR0FFQSxJQUFJeUUsRUFBU3pFLEdBQWFBLEVBQVV5RSxPQUNoQ21jLEVBQWUzYyxHQUFldDNGLEVBQUksVUFBWSxPQUM5Q2swRyxFQUFtQjVjLEdBQWV0M0YsRUFBSSxlQUFpQixPQUN2RG0wRyxFQUFvQjdjLEdBQWV0M0YsRUFBSSxnQkFBa0IsUUFDN0RpMkYsR0FBUWoyRixFQUFJLFVBQ1YsaUJBQW1Cb0gsRUFBbkIsUUFDU0EsRUFBUSxJQUFNNnNHLEVBQWUsUUFDZixTQUFyQkMsRUFDSyxLQUFPOXNHLEVBQVEsSUFDZixPQUFTQSxFQUFRLElBQU04c0csRUFBbUIsTUFHbkRyZCxHQUFXNzJGLEVBQUksU0FDYixXQUFhb0gsRUFBYix5Q0FFMkI4c0csRUFBbUIsTUFBUUMsRUFGdEQscUNBSWdCcmMsRUFBUyxNQUFRbWMsRUFBZSxJQUFNQSxHQUp0RCw2Q0FNaUMvYixHQUFrQjl3RixFQUFPLHFCQU4xRCxtQkFPc0I4d0YsR0FBa0I5d0YsRUFBTyw2Q0FQL0MsV0FRWTh3RixHQUFrQjl3RixFQUFPLE9BQVUsSUFDL0MsTUFBTSxHQWxETmd0RyxDQUFpQnAwRyxFQUFJb0gsRUFBT2lzRixRQUN2QixHQUFZLFVBQVI5bEIsR0FBNEIsVUFBVHZ0RCxHQXFEaEMsU0FDRWhnQixFQUNBb0gsRUFDQWlzRixHQUVBLElBQUl5RSxFQUFTekUsR0FBYUEsRUFBVXlFLE9BQ2hDbWMsRUFBZTNjLEdBQWV0M0YsRUFBSSxVQUFZLE9BRWxEaTJGLEdBQVFqMkYsRUFBSSxVQUFZLE1BQVFvSCxFQUFRLEtBRHhDNnNHLEVBQWVuYyxFQUFVLE1BQVFtYyxFQUFlLElBQU9BLEdBQ00sS0FDN0RwZCxHQUFXNzJGLEVBQUksU0FBVWs0RixHQUFrQjl3RixFQUFPNnNHLEdBQWUsTUFBTSxHQTdEckVJLENBQWNyMEcsRUFBSW9ILEVBQU9pc0YsUUFDcEIsR0FBWSxVQUFSOWxCLEdBQTJCLGFBQVJBLEdBZ0ZoQyxTQUNFdnRFLEVBQ0FvSCxFQUNBaXNGLEdBRUEsSUFBSXJ6RSxFQUFPaGdCLEVBQUd3MkYsU0FBU3gyRSxLQUtqQnMwRixFQUFVdDBHLEVBQUd3MkYsU0FBUyxpQkFBbUJ4MkYsRUFBR3cyRixTQUFTLFVBQ3JENGMsRUFBY3B6RyxFQUFHdzJGLFNBQVMsZ0JBQWtCeDJGLEVBQUd3MkYsU0FBUyxTQUM1RCxHQUFJOGQsSUFBWWxCLEVBQWEsQ0FDM0IsSUFBSTFOLEVBQVUxbEcsRUFBR3cyRixTQUFTLGdCQUFrQixlQUFpQixTQUM3RDFCLEdBQ0U0USxFQUFVLEtBQVE0TyxFQUFsQjVPLGdIQUVBMWxHLEVBQUdxM0YsWUFBWXFPLElBS3JCLElBQUloWSxFQUFNMkYsR0FBYSxHQUNuQmpNLEVBQU9zRyxFQUFJdEcsS0FDWDBRLEVBQVNwSyxFQUFJb0ssT0FDYjNvRSxFQUFPdStELEVBQUl2K0QsS0FDWG9sRixHQUF3Qm50QixHQUFpQixVQUFUcG5FLEVBQ2hDbUksRUFBUWkvRCxFQUNSLFNBQ1MsVUFBVHBuRSxFQUNFMjRFLEdBQ0EsUUFFRlgsRUFBa0Isc0JBQ2xCN29FLElBQ0Y2b0UsRUFBa0IsOEJBRWhCRixJQUNGRSxFQUFrQixNQUFRQSxFQUFrQixLQUc5QyxJQUFJaDBDLEVBQU9rMEMsR0FBa0I5d0YsRUFBTzR3RixHQUNoQ3VjLElBQ0Z2d0QsRUFBTyxxQ0FBdUNBLEdBR2hEaXlDLEdBQVFqMkYsRUFBSSxRQUFVLElBQU1vSCxFQUFRLEtBQ3BDeXZGLEdBQVc3MkYsRUFBSW1vQixFQUFPNjdCLEVBQU0sTUFBTSxJQUM5QjcwQixHQUFRMm9FLElBQ1ZqQixHQUFXNzJGLEVBQUksT0FBUSxrQkFoSXZCdzBHLENBQWdCeDBHLEVBQUlvSCxFQUFPaXNGLE9BQ3RCLEtBQUs5cUIsRUFBT1UsY0FBY3NFLEdBRy9CLE9BRkFzcUIsR0FBa0I3M0YsRUFBSW9ILEVBQU9pc0YsSUFFdEIsRUFFUHlCLEdBQ0UsSUFBTzkwRixFQUFNLElBQUksYUFBZ0JvSCxFQUFqQyx3TEFJQXBILEVBQUdxM0YsWUFBWSxZQUtuQixPQUFPLEdBMHBHUHp2RSxLQWhCRixTQUFlNW5CLEVBQUl1eUYsR0FDYkEsRUFBSW5yRixPQUNONnVGLEdBQVFqMkYsRUFBSSxjQUFnQixNQUFTdXlGLEVBQVMsTUFBSSxJQUFNQSxJQWUxRHJyQyxLQVRGLFNBQWVsbkQsRUFBSXV5RixHQUNiQSxFQUFJbnJGLE9BQ042dUYsR0FBUWoyRixFQUFJLFlBQWMsTUFBU3V5RixFQUFTLE1BQUksSUFBTUEsS0FnQnhENGEsU0F2M0phLFNBQVU1L0IsR0FBTyxNQUFlLFFBQVJBLEdBdzNKckM4OEIsV0FBWUEsR0FDWi9nQyxZQUFhQSxHQUNiZ2hDLGlCQUFrQkEsR0FDbEJyaEMsY0FBZUEsR0FDZkcsZ0JBQWlCQSxHQUNqQjBnQyxXQXZuVUYsU0FBd0J4eEQsR0FDdEIsT0FBT0EsRUFBUWxxQixRQUFPLFNBQVV4TixFQUFNNjNDLEdBQ3BDLE9BQU83M0MsRUFBS3kzQixPQUFPb2dCLEVBQUVxeEMsWUFBYyxNQUNsQyxJQUFJcjZGLEtBQUssS0FvblVBZ2xHLENBQWN2QixLQVF4QndCLEdBQXNCanVDLEdBdUIxQixTQUEwQjdsRCxHQUN4QixPQUFPd2xELEVBQ0wsaUZBQ0N4bEQsRUFBTyxJQUFNQSxFQUFPLFFBYnpCLFNBQVMrekYsR0FBVXIwRyxFQUFNcUIsR0FDbEJyQixJQUNMc3pHLEdBQWNjLEdBQW9CL3lHLEVBQVFtb0csWUFBYyxJQUN4RCtKLEdBQXdCbHlHLEVBQVFzbkUsZUFBaUIxQixFQUVqRHF0QyxHQUFhdDBHLEdBRWJ1MEcsR0FBZ0J2MEcsR0FBTSxJQVV4QixTQUFTczBHLEdBQWNobUMsR0FFckIsR0FEQUEsRUFBS2ttQyxPQTZEUCxTQUFtQmxtQyxHQUNqQixPQUFrQixJQUFkQSxFQUFLNXVELE9BR1MsSUFBZDR1RCxFQUFLNXVELFNBR0M0dUQsRUFBSzZWLE1BQ1o3VixFQUFLd2pDLGFBQ0x4akMsRUFBS2svQixJQUFPbC9CLEVBQUtzaUMsS0FDakI1cUMsRUFBYXNJLEVBQUtyQixPQUNuQnNtQyxHQUFzQmpsQyxFQUFLckIsTUFNL0IsU0FBcUNxQixHQUNuQyxLQUFPQSxFQUFLcmIsUUFBUSxDQUVsQixHQUFpQixjQURqQnFiLEVBQU9BLEVBQUtyYixRQUNIZ2EsSUFDUCxPQUFPLEVBRVQsR0FBSXFCLEVBQUtzaUMsSUFDUCxPQUFPLEVBR1gsT0FBTyxFQWZKNkQsQ0FBMkJubUMsS0FDNUJqc0UsT0FBT2llLEtBQUtndUQsR0FBTTlHLE1BQU04ckMsT0ExRVoxbEMsQ0FBU1UsR0FDTCxJQUFkQSxFQUFLNXVELEtBQVksQ0FJbkIsSUFDRzZ6RixHQUFzQmpsQyxFQUFLckIsTUFDZixTQUFicUIsRUFBS3JCLEtBQytCLE1BQXBDcUIsRUFBSzRuQixTQUFTLG1CQUVkLE9BRUYsSUFBSyxJQUFJbnJFLEVBQUksRUFBR3E0QixFQUFJa3JCLEVBQUtsakUsU0FBUy9LLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQUssQ0FDcEQsSUFBSW1vQyxFQUFRb2IsRUFBS2xqRSxTQUFTMmYsR0FDMUJ1cEYsR0FBYXBoRCxHQUNSQSxFQUFNc2hELFNBQ1RsbUMsRUFBS2ttQyxRQUFTLEdBR2xCLEdBQUlsbUMsRUFBS21rQyxhQUNQLElBQUssSUFBSW5tQixFQUFNLEVBQUdvb0IsRUFBTXBtQyxFQUFLbWtDLGFBQWFweUcsT0FBUWlzRixFQUFNb29CLEVBQUtwb0IsSUFBTyxDQUNsRSxJQUFJdWhCLEVBQVF2L0IsRUFBS21rQyxhQUFhbm1CLEdBQUt1aEIsTUFDbkN5RyxHQUFhekcsR0FDUkEsRUFBTTJHLFNBQ1RsbUMsRUFBS2ttQyxRQUFTLEtBT3hCLFNBQVNELEdBQWlCam1DLEVBQU1rTyxHQUM5QixHQUFrQixJQUFkbE8sRUFBSzV1RCxLQUFZLENBT25CLElBTkk0dUQsRUFBS2ttQyxRQUFVbG1DLEVBQUt2NEIsUUFDdEJ1NEIsRUFBS3FtQyxZQUFjbjRCLEdBS2pCbE8sRUFBS2ttQyxRQUFVbG1DLEVBQUtsakUsU0FBUy9LLFNBQ04sSUFBekJpdUUsRUFBS2xqRSxTQUFTL0ssUUFDWSxJQUExQml1RSxFQUFLbGpFLFNBQVMsR0FBR3NVLE1BR2pCLFlBREE0dUQsRUFBS3NtQyxZQUFhLEdBS3BCLEdBRkV0bUMsRUFBS3NtQyxZQUFhLEVBRWhCdG1DLEVBQUtsakUsU0FDUCxJQUFLLElBQUkyZixFQUFJLEVBQUdxNEIsRUFBSWtyQixFQUFLbGpFLFNBQVMvSyxPQUFRMHFCLEVBQUlxNEIsRUFBR3I0QixJQUMvQ3dwRixHQUFnQmptQyxFQUFLbGpFLFNBQVMyZixHQUFJeXhELEtBQWFsTyxFQUFLc2lDLEtBR3hELEdBQUl0aUMsRUFBS21rQyxhQUNQLElBQUssSUFBSW5tQixFQUFNLEVBQUdvb0IsRUFBTXBtQyxFQUFLbWtDLGFBQWFweUcsT0FBUWlzRixFQUFNb29CLEVBQUtwb0IsSUFDM0Rpb0IsR0FBZ0JqbUMsRUFBS21rQyxhQUFhbm1CLEdBQUt1aEIsTUFBT3J4QixJQXNDdEQsSUFBSXE0QixHQUFVLDBEQUNWQyxHQUFhLGdCQUNiQyxHQUFlLCtGQUdmcnNDLEdBQVcsQ0FDYnNzQyxJQUFLLEdBQ0xDLElBQUssRUFDTC9XLE1BQU8sR0FDUGdYLE1BQU8sR0FDUEMsR0FBSSxHQUNKNzNGLEtBQU0sR0FDTmdCLE1BQU8sR0FDUDgyRixLQUFNLEdBQ04sT0FBVSxDQUFDLEVBQUcsS0FJWkMsR0FBVyxDQUViTCxJQUFLLENBQUMsTUFBTyxVQUNiQyxJQUFLLE1BQ0wvVyxNQUFPLFFBRVBnWCxNQUFPLENBQUMsSUFBSyxZQUViQyxHQUFJLENBQUMsS0FBTSxXQUNYNzNGLEtBQU0sQ0FBQyxPQUFRLGFBQ2ZnQixNQUFPLENBQUMsUUFBUyxjQUNqQjgyRixLQUFNLENBQUMsT0FBUSxhQUVmLE9BQVUsQ0FBQyxZQUFhLFNBQVUsUUFNaENFLEdBQVcsU0FBVTlDLEdBQWEsTUFBUSxNQUFRQSxFQUFZLGlCQUU5RCtDLEdBQWUsQ0FDakJDLEtBQU0sNEJBQ04vZSxRQUFTLDJCQUNUOTRDLEtBQU0yM0QsR0FBUywwQ0FDZkcsS0FBTUgsR0FBUyxtQkFDZnR6RCxNQUFPc3pELEdBQVMsb0JBQ2hCSSxJQUFLSixHQUFTLGtCQUNkSyxLQUFNTCxHQUFTLG1CQUNmaDRGLEtBQU1nNEYsR0FBUyw2Q0FDZjVlLE9BQVE0ZSxHQUFTLDZDQUNqQmgzRixNQUFPZzNGLEdBQVMsOENBR2xCLFNBQVNNLEdBQ1Bwa0QsRUFDQWtaLEdBRUEsSUFBSTU3QixFQUFTNDdCLEVBQVcsWUFBYyxNQUNsQ21yQyxFQUFpQixHQUNqQkMsRUFBa0IsR0FDdEIsSUFBSyxJQUFJeDhELEtBQVFrWSxFQUFRLENBQ3ZCLElBQUl1a0QsRUFBY0MsR0FBV3hrRCxFQUFPbFksSUFDaENrWSxFQUFPbFksSUFBU2tZLEVBQU9sWSxHQUFNczhDLFFBQy9Ca2dCLEdBQW1CeDhELEVBQU8sSUFBTXk4RCxFQUFjLElBRTlDRixHQUFrQixJQUFPdjhELEVBQU8sS0FBUXk4RCxFQUFjLElBSTFELE9BREFGLEVBQWlCLElBQU9BLEVBQWVyckcsTUFBTSxHQUFJLEdBQU0sSUFDbkRzckcsRUFDS2huRSxFQUFTLE1BQVErbUUsRUFBaUIsS0FBUUMsRUFBZ0J0ckcsTUFBTSxHQUFJLEdBQU0sS0FFMUVza0MsRUFBUyttRSxFQUlwQixTQUFTRyxHQUFZNTBHLEdBQ25CLElBQUtBLEVBQ0gsTUFBTyxlQUdULEdBQUl3c0IsTUFBTTRxQixRQUFRcDNDLEdBQ2hCLE1BQVEsSUFBT0EsRUFBUW9qQyxLQUFJLFNBQVVwakMsR0FBVyxPQUFPNDBHLEdBQVc1MEcsTUFBYStOLEtBQUssS0FBUSxJQUc5RixJQUFJOG1HLEVBQWVsQixHQUFheDdELEtBQUtuNEMsRUFBUTBGLE9BQ3pDb3ZHLEVBQXVCckIsR0FBUXQ3RCxLQUFLbjRDLEVBQVEwRixPQUM1Q3F2RyxFQUF1QnBCLEdBQWF4N0QsS0FBS240QyxFQUFRMEYsTUFBTTh6QyxRQUFRazZELEdBQVksS0FFL0UsR0FBSzF6RyxFQUFRMnhGLFVBS04sQ0FDTCxJQUFJcnZDLEVBQU8sR0FDUDB5RCxFQUFrQixHQUNsQjkxRixFQUFPLEdBQ1gsSUFBSyxJQUFJNVQsS0FBT3RMLEVBQVEyeEYsVUFDdEIsR0FBSXdpQixHQUFhN29HLEdBQ2YwcEcsR0FBbUJiLEdBQWE3b0csR0FFNUJnOEQsR0FBU2g4RCxJQUNYNFQsRUFBSy9TLEtBQUtiLFFBRVAsR0FBWSxVQUFSQSxFQUFpQixDQUMxQixJQUFJcW1GLEVBQWEzeEYsRUFBaUIsVUFDbENnMUcsR0FBbUJkLEdBQ2pCLENBQUMsT0FBUSxRQUFTLE1BQU8sUUFDdEI1cEcsUUFBTyxTQUFVMnFHLEdBQWUsT0FBUXRqQixFQUFVc2pCLE1BQ2xEN3hFLEtBQUksU0FBVTZ4RSxHQUFlLE1BQVEsVUFBWUEsRUFBYyxTQUMvRGxuRyxLQUFLLFlBR1ZtUixFQUFLL1MsS0FBS2IsR0FpQmQsT0FkSTRULEVBQUtqZ0IsU0FDUHFqRCxHQWlCTixTQUF1QnBqQyxHQUNyQixNQUlFLG1DQUNDQSxFQUFLa2tCLElBQUk4eEUsSUFBZW5uRyxLQUFLLE1BQVMsZ0JBdkI3Qm9uRyxDQUFhajJGLElBR25CODFGLElBQ0YxeUQsR0FBUTB5RCxHQVNGLG9CQUFzQjF5RCxHQVBadXlELEVBQ2IsVUFBYTcwRyxFQUFhLE1BQUksMEJBQy9CODBHLEVBQ0csV0FBYzkwRyxFQUFhLE1BQUksMkJBQ2hDKzBHLEVBQ0csVUFBYS8wRyxFQUFhLE1BQzNCQSxFQUFRMEYsT0FDbUMsSUF6Q25ELE9BQUltdkcsR0FBZ0JDLEVBQ1g5MEcsRUFBUTBGLE1BRVQscUJBQXVCcXZHLEVBQXdCLFVBQWEvMEcsRUFBYSxNQUFLQSxFQUFRMEYsT0FBUyxJQW9EM0csU0FBU3d2RyxHQUFlNXBHLEdBQ3RCLElBQUk4cEcsRUFBU2g2RCxTQUFTOXZDLEVBQUssSUFDM0IsR0FBSThwRyxFQUNGLE1BQVEsb0JBQXNCQSxFQUVoQyxJQUFJbmpHLEVBQVVxMUQsR0FBU2g4RCxHQUNuQitwRyxFQUFVcEIsR0FBUzNvRyxHQUN2QixNQUNFLHFCQUNDcXRDLEtBQUtDLFVBQVV0dEMsR0FBUSxJQUN2QnF0QyxLQUFLQyxVQUFVM21DLEdBRmhCLGVBSU0wbUMsS0FBS0MsVUFBVXk4RCxHQUNyQixJQXVCSixJQUFJQyxHQUFpQixDQUNuQjlnRSxHQWxCRixTQUFhbDJDLEVBQUl1eUYsR0FDWEEsRUFBSWMsV0FDTmoyQyxHQUFLLHFEQUVQcDlDLEVBQUdpM0csY0FBZ0IsU0FBVWp6RCxHQUFRLE1BQVEsTUFBUUEsRUFBTyxJQUFPdXVDLEVBQVMsTUFBSSxNQWVoRnQ5RSxLQVZGLFNBQWlCalYsRUFBSXV5RixHQUNuQnZ5RixFQUFHazNHLFNBQVcsU0FBVWx6RCxHQUN0QixNQUFRLE1BQVFBLEVBQU8sS0FBUWhrRCxFQUFNLElBQUksS0FBUXV5RixFQUFTLE1BQUksS0FBT0EsRUFBSWMsV0FBYWQsRUFBSWMsVUFBVTM3RCxLQUFPLE9BQVMsVUFBWTY2RCxFQUFJYyxXQUFhZCxFQUFJYyxVQUFVM1EsS0FBTyxRQUFVLElBQU0sTUFTeEx5MEIsTUFBT3BsRCxHQVNMcWxELEdBQWUsU0FBdUJ6MUcsR0FDeENmLEtBQUtlLFFBQVVBLEVBQ2ZmLEtBQUt3OEMsS0FBT3o3QyxFQUFReTdDLE1BQVEwNEMsR0FDNUJsMUYsS0FBSytxRyxXQUFhM1YsR0FBb0JyMEYsRUFBUTIyQyxRQUFTLGlCQUN2RDEzQyxLQUFLeTJHLFdBQWFyaEIsR0FBb0JyMEYsRUFBUTIyQyxRQUFTLFdBQ3ZEMTNDLEtBQUsreEUsV0FBYS96QixFQUFPQSxFQUFPLEdBQUlvNEQsSUFBaUJyMUcsRUFBUWd4RSxZQUM3RCxJQUFJMUosRUFBZ0J0bkUsRUFBUXNuRSxlQUFpQjFCLEVBQzdDM21FLEtBQUtxckcsZUFBaUIsU0FBVWpzRyxHQUFNLFFBQVNBLEVBQUdrakYsWUFBY2phLEVBQWNqcEUsRUFBR3V0RSxNQUNqRjNzRSxLQUFLMDJHLE9BQVMsRUFDZDEyRyxLQUFLcThFLGdCQUFrQixHQUN2QnI4RSxLQUFLNmpGLEtBQU0sR0FLYixTQUFTOHlCLEdBQ1BDLEVBQ0E3MUcsR0FFQSxJQUFJc0gsRUFBUSxJQUFJbXVHLEdBQWF6MUcsR0FHN0IsTUFBTyxDQUNMNjFFLE9BQVMsc0JBRkFnZ0MsRUFBbUIsV0FBWkEsRUFBSWpxQyxJQUFtQixPQUFTa3FDLEdBQVdELEVBQUt2dUcsR0FBVSxhQUVuQyxJQUN2Q2cwRSxnQkFBaUJoMEUsRUFBTWcwRSxpQkFJM0IsU0FBU3c2QixHQUFZejNHLEVBQUlpSixHQUt2QixHQUpJakosRUFBR3V6RCxTQUNMdnpELEVBQUd5a0YsSUFBTXprRixFQUFHeWtGLEtBQU96a0YsRUFBR3V6RCxPQUFPa3hCLEtBRzNCemtGLEVBQUdrMUcsYUFBZWwxRyxFQUFHMDNHLGdCQUN2QixPQUFPQyxHQUFVMzNHLEVBQUlpSixHQUNoQixHQUFJakosRUFBR3EyQyxPQUFTcjJDLEVBQUc0M0csY0FDeEIsT0FBT0MsR0FBUTczRyxFQUFJaUosR0FDZCxHQUFJakosRUFBR2t4RyxNQUFRbHhHLEVBQUc4M0csYUFDdkIsT0FBT0MsR0FBTy8zRyxFQUFJaUosR0FDYixHQUFJakosRUFBRzh0RyxLQUFPOXRHLEVBQUdnNEcsWUFDdEIsT0FBT0MsR0FBTWo0RyxFQUFJaUosR0FDWixHQUFlLGFBQVhqSixFQUFHdXRFLEtBQXVCdnRFLEVBQUd1dUcsWUFBZXRsRyxFQUFNdzdFLElBRXRELElBQWUsU0FBWHprRixFQUFHdXRFLElBQ1osT0FvYkosU0FBa0J2dEUsRUFBSWlKLEdBQ3BCLElBQUkrb0csRUFBV2h5RyxFQUFHZ3lHLFVBQVksWUFDMUJ0bUcsRUFBV3dzRyxHQUFZbDRHLEVBQUlpSixHQUMzQnErRCxFQUFNLE1BQVEwcUMsR0FBWXRtRyxFQUFZLHNCQUF3QkEsRUFBVyxJQUFPLElBQ2hGdXVFLEVBQVFqNkUsRUFBR2k2RSxPQUFTajZFLEVBQUdzMkYsYUFDdkI2aEIsSUFBVW40RyxFQUFHaTZFLE9BQVMsSUFBSTVoQyxPQUFPcjRDLEVBQUdzMkYsY0FBZ0IsSUFBSXh4RCxLQUFJLFNBQVU5OEIsR0FBUSxNQUFPLENBRW5GNHhDLEtBQU0rc0IsRUFBUzMrRCxFQUFLNHhDLE1BQ3BCeHlDLE1BQU9ZLEVBQUtaLE1BQ1o4dUYsUUFBU2x1RixFQUFLa3VGLGFBRWhCLEtBQ0FraUIsRUFBVXA0RyxFQUFHdzJGLFNBQVMsVUFVMUIsT0FUS3ZjLElBQVNtK0IsR0FBYTFzRyxJQUN6QjQ3RCxHQUFPLFNBRUwyUyxJQUNGM1MsR0FBTyxJQUFNMlMsR0FFWG0rQixJQUNGOXdDLElBQVEyUyxFQUFRLEdBQUssU0FBVyxJQUFNbStCLEdBRWpDOXdDLEVBQU0sSUExY0ord0MsQ0FBUXI0RyxFQUFJaUosR0FHbkIsSUFBSSs2QyxFQUNKLEdBQUloa0QsRUFBR2tqRixVQUNMbC9CLEVBeWNOLFNBQ0VzMEQsRUFDQXQ0RyxFQUNBaUosR0FFQSxJQUFJeUMsRUFBVzFMLEVBQUdnZ0YsZUFBaUIsS0FBT2s0QixHQUFZbDRHLEVBQUlpSixHQUFPLEdBQ2pFLE1BQVEsTUFBUXF2RyxFQUFnQixJQUFPQyxHQUFVdjRHLEVBQUlpSixJQUFXeUMsRUFBWSxJQUFNQSxFQUFZLElBQU0sSUEvY3pGOHNHLENBQWF4NEcsRUFBR2tqRixVQUFXbGpGLEVBQUlpSixPQUNqQyxDQUNMLElBQUlzeEMsSUFDQ3Y2QyxFQUFHbzJGLE9BQVVwMkYsRUFBR3lrRixLQUFPeDdFLEVBQU1nakcsZUFBZWpzRyxNQUMvQ3U2QyxFQUFPZytELEdBQVV2NEcsRUFBSWlKLElBR3ZCLElBQUl5QyxFQUFXMUwsRUFBR2dnRixlQUFpQixLQUFPazRCLEdBQVlsNEcsRUFBSWlKLEdBQU8sR0FDakUrNkMsRUFBTyxPQUFVaGtELEVBQU0sSUFBSSxLQUFPdTZDLEVBQVEsSUFBTUEsRUFBUSxLQUFPN3VDLEVBQVksSUFBTUEsRUFBWSxJQUFNLElBR3JHLElBQUssSUFBSTJmLEVBQUksRUFBR0EsRUFBSXBpQixFQUFNMGlHLFdBQVdockcsT0FBUTBxQixJQUMzQzI0QixFQUFPLzZDLEVBQU0waUcsV0FBV3RnRixHQUFHcnJCLEVBQUlna0QsR0FFakMsT0FBT0EsRUFyQlAsT0FBT2swRCxHQUFZbDRHLEVBQUlpSixJQUFVLFNBMEJyQyxTQUFTMHVHLEdBQVczM0csRUFBSWlKLEdBQ3RCakosRUFBRzAzRyxpQkFBa0IsRUFJckIsSUFBSWUsRUFBbUJ4dkcsRUFBTXc3RSxJQU03QixPQUxJemtGLEVBQUd5a0YsTUFDTHg3RSxFQUFNdzdFLElBQU16a0YsRUFBR3lrRixLQUVqQng3RSxFQUFNZzBFLGdCQUFnQnB2RSxLQUFNLHFCQUF3QjRwRyxHQUFXejNHLEVBQUlpSixHQUFVLEtBQzdFQSxFQUFNdzdFLElBQU1nMEIsRUFDSixPQUFTeHZHLEVBQU1nMEUsZ0JBQWdCdDhFLE9BQVMsSUFBTVgsRUFBR2kxRyxZQUFjLFFBQVUsSUFBTSxJQUl6RixTQUFTNEMsR0FBUzczRyxFQUFJaUosR0FFcEIsR0FEQWpKLEVBQUc0M0csZUFBZ0IsRUFDZjUzRyxFQUFHOHRHLEtBQU85dEcsRUFBR2c0RyxZQUNmLE9BQU9DLEdBQU1qNEcsRUFBSWlKLEdBQ1osR0FBSWpKLEVBQUdpMUcsWUFBYSxDQUd6QixJQUZBLElBQUlqb0csRUFBTSxHQUNOdW1ELEVBQVN2ekQsRUFBR3V6RCxPQUNUQSxHQUFRLENBQ2IsR0FBSUEsRUFBTzI5QyxJQUFLLENBQ2Rsa0csRUFBTXVtRCxFQUFPdm1ELElBQ2IsTUFFRnVtRCxFQUFTQSxFQUFPQSxPQUVsQixPQUFLdm1ELEVBT0csTUFBU3lxRyxHQUFXejNHLEVBQUlpSixHQUFVLElBQU9BLEVBQU1xdUcsU0FBWSxJQUFNdHFHLEVBQU0sS0FON0UvRCxFQUFNbTBDLEtBQ0osdURBQ0FwOUMsRUFBR3EzRixZQUFZLFdBRVZvZ0IsR0FBV3ozRyxFQUFJaUosSUFJeEIsT0FBTzB1RyxHQUFVMzNHLEVBQUlpSixHQUl6QixTQUFTZ3ZHLEdBQ1BqNEcsRUFDQWlKLEVBQ0F5dkcsRUFDQUMsR0FHQSxPQURBMzRHLEVBQUdnNEcsYUFBYyxFQUNWWSxHQUFnQjU0RyxFQUFHK3lHLGFBQWFqb0csUUFBUzdCLEVBQU95dkcsRUFBUUMsR0FHakUsU0FBU0MsR0FDUEMsRUFDQTV2RyxFQUNBeXZHLEVBQ0FDLEdBRUEsSUFBS0UsRUFBV2w0RyxPQUNkLE9BQU9nNEcsR0FBWSxPQUdyQixJQUFJN0YsRUFBWStGLEVBQVd2MkQsUUFDM0IsT0FBSXd3RCxFQUFVNWQsSUFDSixJQUFPNGQsRUFBYSxJQUFJLEtBQVFnRyxFQUFjaEcsRUFBVTNFLE9BQVUsSUFBT3lLLEdBQWdCQyxFQUFZNXZHLEVBQU95dkcsRUFBUUMsR0FFcEgsR0FBTUcsRUFBY2hHLEVBQVUzRSxPQUl4QyxTQUFTMkssRUFBZTk0RyxHQUN0QixPQUFPMDRHLEVBQ0hBLEVBQU8xNEcsRUFBSWlKLEdBQ1hqSixFQUFHcTJDLEtBQ0R3aEUsR0FBUTczRyxFQUFJaUosR0FDWnd1RyxHQUFXejNHLEVBQUlpSixJQUl6QixTQUFTOHVHLEdBQ1AvM0csRUFDQWlKLEVBQ0F5dkcsRUFDQUssR0FFQSxJQUFJN2pCLEVBQU1sMUYsRUFBR2t4RyxJQUNUeUIsRUFBUTN5RyxFQUFHMnlHLE1BQ1h2QixFQUFZcHhHLEVBQUdveEcsVUFBYSxJQUFPcHhHLEVBQVksVUFBSyxHQUNwRG14RyxFQUFZbnhHLEVBQUdteEcsVUFBYSxJQUFPbnhHLEVBQVksVUFBSyxHQWlCeEQsT0FmSWlKLEVBQU1nakcsZUFBZWpzRyxJQUNaLFNBQVhBLEVBQUd1dEUsS0FDUSxhQUFYdnRFLEVBQUd1dEUsTUFDRnZ0RSxFQUFHZ04sS0FFSi9ELEVBQU1tMEMsS0FDSixJQUFPcDlDLEVBQU0sSUFBSSxXQUFjMnlHLEVBQVEsT0FBU3pkLEVBQWhELDhIQUdBbDFGLEVBQUdxM0YsWUFBWSxVQUNmLEdBSUpyM0YsRUFBRzgzRyxjQUFlLEdBQ1ZpQixHQUFhLE1BQVEsS0FBTzdqQixFQUE3QixjQUNTeWQsRUFBUXZCLEVBQVlELEVBRDdCLGFBRVd1SCxHQUFVakIsSUFBWXozRyxFQUFJaUosR0FDMUMsS0FHSixTQUFTc3ZHLEdBQVd2NEcsRUFBSWlKLEdBQ3RCLElBQUlzeEMsRUFBTyxJQUlQbTRCLEVBK0VOLFNBQXdCMXlFLEVBQUlpSixHQUMxQixJQUFJeXBFLEVBQU8xeUUsRUFBRzJ5RSxXQUNkLEdBQUtELEVBQUwsQ0FDQSxJQUVJcm5ELEVBQUdxNEIsRUFBRzZ1QyxFQUFLeW1CLEVBRlgxeEMsRUFBTSxlQUNOMnhDLEdBQWEsRUFFakIsSUFBSzV0RixFQUFJLEVBQUdxNEIsRUFBSWd2QixFQUFLL3hFLE9BQVEwcUIsRUFBSXE0QixFQUFHcjRCLElBQUssQ0FDdkNrbkUsRUFBTTdmLEVBQUtybkQsR0FDWDJ0RixHQUFjLEVBQ2QsSUFBSUUsRUFBTWp3RyxFQUFNMHBFLFdBQVc0ZixFQUFJMzRDLE1BQzNCcy9ELElBR0ZGLElBQWdCRSxFQUFJbDVHLEVBQUl1eUYsRUFBS3RwRixFQUFNbTBDLE9BRWpDNDdELElBQ0ZDLEdBQWEsRUFDYjN4QyxHQUFPLFVBQWNpckIsRUFBUSxLQUFJLGNBQW1CQSxFQUFXLFFBQUksS0FBUUEsRUFBSW5yRixNQUFTLFdBQWNtckYsRUFBUyxNQUFJLGdCQUFtQmw0QyxLQUFLQyxVQUFVaTRDLEVBQUluckYsT0FBVyxLQUFPbXJGLEVBQUlTLElBQU8sU0FBV1QsRUFBSW9FLGFBQWVwRSxFQUFJUyxJQUFPLElBQVFULEVBQU8sSUFBSSxLQUFVLEtBQU9BLEVBQUljLFVBQWEsY0FBaUJoNUMsS0FBS0MsVUFBVWk0QyxFQUFJYyxXQUFlLElBQU0sTUFHalYsT0FBSTRsQixFQUNLM3hDLEVBQUl4OEQsTUFBTSxHQUFJLEdBQUssU0FENUIsR0FuR1dxdUcsQ0FBY241RyxFQUFJaUosR0FDekJ5cEUsSUFBUW40QixHQUFRbTRCLEVBQU8sS0FHdkIxeUUsRUFBR2dOLE1BQ0x1dEMsR0FBUSxPQUFVdjZDLEVBQU0sSUFBSSxLQUcxQkEsRUFBRzB0RixNQUNMbnpDLEdBQVEsT0FBVXY2QyxFQUFNLElBQUksS0FFMUJBLEVBQUc2eEYsV0FDTHQzQyxHQUFRLGtCQUdOdjZDLEVBQUd5a0YsTUFDTGxxQyxHQUFRLGFBR052NkMsRUFBR2tqRixZQUNMM29DLEdBQVEsUUFBWXY2QyxFQUFNLElBQUksTUFHaEMsSUFBSyxJQUFJcXJCLEVBQUksRUFBR0EsRUFBSXBpQixFQUFNb3VHLFdBQVcxMkcsT0FBUTBxQixJQUMzQ2t2QixHQUFRdHhDLEVBQU1vdUcsV0FBV2hzRixHQUFHcnJCLEdBK0I5QixHQTVCSUEsRUFBR2k2RSxRQUNMMS9CLEdBQVEsU0FBWTQ5RCxHQUFTbjRHLEVBQUdpNkUsT0FBVSxLQUd4Q2o2RSxFQUFHdTNCLFFBQ0xnakIsR0FBUSxZQUFlNDlELEdBQVNuNEcsRUFBR3UzQixPQUFVLEtBRzNDdjNCLEVBQUc4eEQsU0FDTHZYLEdBQVMyN0QsR0FBWWwyRyxFQUFHOHhELFFBQVEsR0FBVSxLQUV4Qzl4RCxFQUFHazNGLGVBQ0wzOEMsR0FBUzI3RCxHQUFZbDJHLEVBQUdrM0YsY0FBYyxHQUFTLEtBSTdDbDNGLEVBQUd1dUcsYUFBZXZ1RyxFQUFHc3VHLFlBQ3ZCL3pELEdBQVEsUUFBV3Y2QyxFQUFhLFdBQUksS0FHbENBLEVBQUdrL0UsY0FDTDNrQyxHQXNFSixTQUNFdjZDLEVBQ0FnNkUsRUFDQS93RSxHQU1BLElBQUkwM0UsRUFBbUIzZ0YsRUFBR2t4RyxLQUFPdnVHLE9BQU9pZSxLQUFLbzVELEdBQU9sNUQsTUFBSyxTQUFVOVQsR0FDakUsSUFBSWt0RSxFQUFPRixFQUFNaHRFLEdBQ2pCLE9BQ0VrdEUsRUFBS3MzQixtQkFDTHQzQixFQUFLNHpCLElBQ0w1ekIsRUFBS2czQixLQUNMa0ksR0FBa0JsL0IsTUFRbEJtL0IsSUFBYXI1RyxFQUFHOHRHLEdBT3BCLElBQUtudEIsRUFFSCxJQURBLElBQUlwdEIsRUFBU3Z6RCxFQUFHdXpELE9BQ1RBLEdBQVEsQ0FDYixHQUNHQSxFQUFPKzZDLFdBQWEvNkMsRUFBTys2QyxZQUFjdEIsSUFDMUN6NUMsRUFBTzI5QyxJQUNQLENBQ0F2d0IsR0FBbUIsRUFDbkIsTUFFRXB0QixFQUFPdTZDLEtBQ1R1TCxHQUFXLEdBRWI5bEQsRUFBU0EsRUFBT0EsT0FJcEIsSUFBSStsRCxFQUFpQjMyRyxPQUFPaWUsS0FBS281RCxHQUM5QmwxQyxLQUFJLFNBQVU5M0IsR0FBTyxPQUFPdXNHLEdBQWN2L0IsRUFBTWh0RSxHQUFNL0QsTUFDdER3RyxLQUFLLEtBRVIsTUFBUSxtQkFBcUI2cEcsRUFBaUIsS0FBTzM0QixFQUFtQixhQUFlLE1BQVFBLEdBQW9CMDRCLEVBQVksZUFHakksU0FBY2hyRCxHQUdaLElBRkEsSUFBSXJULEVBQU8sS0FDUDN2QixFQUFJZ2pDLEVBQUkxdEQsT0FDTjBxQixHQUNKMnZCLEVBQWUsR0FBUEEsRUFBYXFULEVBQUk3TyxhQUFhbjBCLEdBRXhDLE9BQU8ydkIsSUFBUyxFQVRnSSxDQUFNcytELEdBQW9CLElBQU0sSUF6SHRLLENBQWdCdDVHLEVBQUlBLEVBQUdrL0UsWUFBYWoyRSxHQUFVLEtBR3BEakosRUFBR3NqRixRQUNML29DLEdBQVEsZ0JBQW1CdjZDLEVBQUdzakYsTUFBVyxNQUFJLGFBQWdCdGpGLEVBQUdzakYsTUFBYyxTQUFJLGVBQWtCdGpGLEVBQUdzakYsTUFBZ0IsV0FBSSxNQUd6SHRqRixFQUFHZ2dGLGVBQWdCLENBQ3JCLElBQUlBLEVBZ0RSLFNBQTRCaGdGLEVBQUlpSixHQUM5QixJQUFJdXVHLEVBQU14M0csRUFBRzBMLFNBQVMsR0FPdEIsR0FOMkIsSUFBdkIxTCxFQUFHMEwsU0FBUy9LLFFBQTZCLElBQWI2MkcsRUFBSXgzRixNQUNsQy9XLEVBQU1tMEMsS0FDSixrRUFDQSxDQUFFMlcsTUFBTy96RCxFQUFHK3pELFFBR1p5akQsR0FBb0IsSUFBYkEsRUFBSXgzRixLQUFZLENBQ3pCLElBQUl3NUYsRUFBa0JqQyxHQUFTQyxFQUFLdnVHLEVBQU10SCxTQUMxQyxNQUFRLHFDQUF3QzYzRyxFQUFzQixPQUFJLHNCQUF5QkEsRUFBZ0J2OEIsZ0JBQWdCbjRDLEtBQUksU0FBVWtmLEdBQVEsTUFBUSxjQUFnQkEsRUFBTyxPQUFTdjBDLEtBQUssS0FBUSxNQTFEekxncUcsQ0FBa0J6NUcsRUFBSWlKLEdBQ3ZDKzJFLElBQ0Z6bEMsR0FBUXlsQyxFQUFpQixLQWtCN0IsT0FmQXpsQyxFQUFPQSxFQUFLVyxRQUFRLEtBQU0sSUFBTSxJQUk1Qmw3QyxFQUFHczJGLGVBQ0wvN0MsRUFBTyxNQUFRQSxFQUFPLEtBQVN2NkMsRUFBTSxJQUFJLEtBQVNtNEcsR0FBU240RyxFQUFHczJGLGNBQWlCLEtBRzdFdDJGLEVBQUdrM0csV0FDTDM4RCxFQUFPdjZDLEVBQUdrM0csU0FBUzM4RCxJQUdqQnY2QyxFQUFHaTNHLGdCQUNMMThELEVBQU92NkMsRUFBR2kzRyxjQUFjMThELElBRW5CQSxFQXlHVCxTQUFTNitELEdBQW1CcDVHLEdBQzFCLE9BQWdCLElBQVpBLEVBQUdnZ0IsT0FDVSxTQUFYaGdCLEVBQUd1dEUsS0FHQXZ0RSxFQUFHMEwsU0FBU29WLEtBQUtzNEYsS0FLNUIsU0FBU0csR0FDUHY1RyxFQUNBaUosR0FFQSxJQUFJeXdHLEVBQWlCMTVHLEVBQUd3MkYsU0FBUyxjQUNqQyxHQUFJeDJGLEVBQUc4dEcsS0FBTzl0RyxFQUFHZzRHLGNBQWdCMEIsRUFDL0IsT0FBT3pCLEdBQU1qNEcsRUFBSWlKLEVBQU9zd0csR0FBZSxRQUV6QyxHQUFJdjVHLEVBQUdreEcsTUFBUWx4RyxFQUFHODNHLGFBQ2hCLE9BQU9DLEdBQU8vM0csRUFBSWlKLEVBQU9zd0csSUFFM0IsSUFBSWpMLEVBQVl0dUcsRUFBR3N1RyxZQUFjdEIsR0FDN0IsR0FDQW5tRSxPQUFPN21DLEVBQUdzdUcsV0FDVm40RCxFQUFLLFlBQWNtNEQsRUFBZCxhQUNpQixhQUFYdHVHLEVBQUd1dEUsSUFDWnZ0RSxFQUFHOHRHLElBQU00TCxFQUNOLElBQU8xNUcsRUFBSyxHQUFJLE1BQVFrNEcsR0FBWWw0RyxFQUFJaUosSUFBVSxhQUFlLGFBQ2xFaXZHLEdBQVlsNEcsRUFBSWlKLElBQVUsWUFDNUJ3dUcsR0FBV3ozRyxFQUFJaUosSUFBVSxJQUUzQjB3RyxFQUFlckwsRUFBWSxHQUFLLGNBQ3BDLE1BQVEsU0FBV3R1RyxFQUFHdXVHLFlBQWMsYUFBaUIsT0FBU3A0RCxFQUFLd2pFLEVBQWUsSUFHcEYsU0FBU3pCLEdBQ1BsNEcsRUFDQWlKLEVBQ0Eyd0csRUFDQUMsRUFDQUMsR0FFQSxJQUFJcHVHLEVBQVcxTCxFQUFHMEwsU0FDbEIsR0FBSUEsRUFBUy9LLE9BQVEsQ0FDbkIsSUFBSW81RyxFQUFPcnVHLEVBQVMsR0FFcEIsR0FBd0IsSUFBcEJBLEVBQVMvSyxRQUNYbzVHLEVBQUs3SSxLQUNRLGFBQWI2SSxFQUFLeHNDLEtBQ1EsU0FBYndzQyxFQUFLeHNDLElBQ0wsQ0FDQSxJQUFJOFcsRUFBb0J1MUIsRUFDcEIzd0csRUFBTWdqRyxlQUFlOE4sR0FBUSxLQUFPLEtBQ3BDLEdBQ0osTUFBUSxJQUFPRixHQUFpQnBDLElBQVlzQyxFQUFNOXdHLEdBQVVvN0UsRUFFOUQsSUFBSTIxQixFQUFzQkosRUFZOUIsU0FDRWx1RyxFQUNBdWdHLEdBR0EsSUFEQSxJQUFJM2tDLEVBQU0sRUFDRGo4QyxFQUFJLEVBQUdBLEVBQUkzZixFQUFTL0ssT0FBUTBxQixJQUFLLENBQ3hDLElBQUlyckIsRUFBSzBMLEVBQVMyZixHQUNsQixHQUFnQixJQUFacnJCLEVBQUdnZ0IsS0FBUCxDQUdBLEdBQUlpNkYsR0FBbUJqNkcsSUFDbEJBLEVBQUcreUcsY0FBZ0IveUcsRUFBRyt5RyxhQUFhanlGLE1BQUssU0FBVXk2QixHQUFLLE9BQU8wK0QsR0FBbUIxK0QsRUFBRTR5RCxVQUFhLENBQ25HN21DLEVBQU0sRUFDTixPQUVFMmtDLEVBQWVqc0csSUFDZEEsRUFBRyt5RyxjQUFnQi95RyxFQUFHK3lHLGFBQWFqeUYsTUFBSyxTQUFVeTZCLEdBQUssT0FBTzB3RCxFQUFlMXdELEVBQUU0eUQsYUFDbEY3bUMsRUFBTSxJQUdWLE9BQU9BLEVBL0JENHlDLENBQXFCeHVHLEVBQVV6QyxFQUFNZ2pHLGdCQUNyQyxFQUNBaU4sRUFBTVksR0FBY0ssR0FDeEIsTUFBUSxJQUFPenVHLEVBQVNvNUIsS0FBSSxTQUFVeVcsR0FBSyxPQUFPMjlELEVBQUkzOUQsRUFBR3R5QyxNQUFXd0csS0FBSyxLQUFRLEtBQU91cUcsRUFBdUIsSUFBTUEsRUFBdUIsS0ErQmhKLFNBQVNDLEdBQW9CajZHLEdBQzNCLFlBQWtCZSxJQUFYZixFQUFHa3hHLEtBQWdDLGFBQVhseEcsRUFBR3V0RSxLQUFpQyxTQUFYdnRFLEVBQUd1dEUsSUFHN0QsU0FBUzRzQyxHQUFTdnJDLEVBQU0zbEUsR0FDdEIsT0FBa0IsSUFBZDJsRSxFQUFLNXVELEtBQ0F5M0YsR0FBVzdvQyxFQUFNM2xFLEdBQ0QsSUFBZDJsRSxFQUFLNXVELE1BQWM0dUQsRUFBS1IsVUFhckMsU0FBcUIyOEIsR0FDbkIsTUFBUSxNQUFTMXdELEtBQUtDLFVBQVV5d0QsRUFBUW5qRixNQUFTLElBYnhDd3lGLENBQVd4ckMsR0FNdEIsU0FBa0JobkQsR0FDaEIsTUFBUSxPQUF1QixJQUFkQSxFQUFLNUgsS0FDbEI0SCxFQUFLOC9ELFdBQ0wyeUIsR0FBeUJoZ0UsS0FBS0MsVUFBVTF5QixFQUFLQSxRQUFVLElBUGxEMHlGLENBQVExckMsR0FpRG5CLFNBQVN1cEMsR0FBVTVnRixHQUdqQixJQUZBLElBQUlnakYsRUFBYyxHQUNkQyxFQUFlLEdBQ1ZudkYsRUFBSSxFQUFHQSxFQUFJa00sRUFBTTUyQixPQUFRMHFCLElBQUssQ0FDckMsSUFBSXFNLEVBQU9ILEVBQU1sTSxHQUNiamtCLEVBQVFpekcsR0FBeUIzaUYsRUFBS3R3QixPQUN0Q3N3QixFQUFLdytELFFBQ1Bza0IsR0FBaUI5aUYsRUFBUyxLQUFJLElBQU10d0IsRUFBUSxJQUU1Q216RyxHQUFlLElBQVE3aUYsRUFBUyxLQUFJLEtBQVF0d0IsRUFBUSxJQUl4RCxPQURBbXpHLEVBQWMsSUFBT0EsRUFBWXp2RyxNQUFNLEdBQUksR0FBTSxJQUM3QzB2RyxFQUNNLE1BQVFELEVBQWMsS0FBUUMsRUFBYTF2RyxNQUFNLEdBQUksR0FBTSxLQUU1RHl2RyxFQUtYLFNBQVNGLEdBQTBCenlGLEdBQ2pDLE9BQU9BLEVBQ0pzekIsUUFBUSxVQUFXLFdBQ25CQSxRQUFRLFVBQVcsV0FTeEIsSUFBSXUvRCxHQUFzQixJQUFJMTlELE9BQU8sTUFBUSxpTUFJM0N1QyxNQUFNLEtBQUs3dkMsS0FBSyxXQUFhLE9BRzNCaXJHLEdBQW1CLElBQUkzOUQsT0FBTyxNQUFRLHFCQUV4Q3VDLE1BQU0sS0FBSzd2QyxLQUFLLHlCQUEyQixxQkFHekNrckcsR0FBZ0IsaUdBR3BCLFNBQVNDLEdBQWNwRCxFQUFLcDZELEdBQ3RCbzZELEdBQ0ZxRCxHQUFVckQsRUFBS3A2RCxHQUluQixTQUFTeTlELEdBQVdqc0MsRUFBTXh4QixHQUN4QixHQUFrQixJQUFkd3hCLEVBQUs1dUQsS0FBWSxDQUNuQixJQUFLLElBQUk0NUIsS0FBUWcxQixFQUFLNG5CLFNBQ3BCLEdBQUkyVixHQUFNdHlELEtBQUtELEdBQU8sQ0FDcEIsSUFBSXh5QyxFQUFRd25FLEVBQUs0bkIsU0FBUzU4QyxHQUMxQixHQUFJeHlDLEVBQU8sQ0FDVCxJQUFJMnVGLEVBQVFubkIsRUFBS3lvQixZQUFZejlDLEdBQ2hCLFVBQVRBLEVBQ0ZraEUsR0FBU2xzQyxFQUFPLFVBQWF4bkUsRUFBUSxJQUFPZzJDLEVBQU0yNEMsR0FDaEMsV0FBVG44QyxHQUFpQyxNQUFaQSxFQUFLLEdBQ25DbWhFLEdBQWlDM3pHLEVBQVF3eUMsRUFBTyxLQUFReHlDLEVBQVEsSUFBT2cyQyxFQUFNMjRDLEdBQ3BFbVcsR0FBS3J5RCxLQUFLRCxHQUNuQm9oRSxHQUFXNXpHLEVBQVF3eUMsRUFBTyxLQUFReHlDLEVBQVEsSUFBT2cyQyxFQUFNMjRDLEdBRXZEa2xCLEdBQWdCN3pHLEVBQVF3eUMsRUFBTyxLQUFReHlDLEVBQVEsSUFBT2cyQyxFQUFNMjRDLElBS3BFLEdBQUlubkIsRUFBS2xqRSxTQUNQLElBQUssSUFBSTJmLEVBQUksRUFBR0EsRUFBSXVqRCxFQUFLbGpFLFNBQVMvSyxPQUFRMHFCLElBQ3hDd3ZGLEdBQVVqc0MsRUFBS2xqRSxTQUFTMmYsR0FBSSt4QixRQUdULElBQWR3eEIsRUFBSzV1RCxNQUNkaTdGLEdBQWdCcnNDLEVBQUs4WSxXQUFZOVksRUFBS2huRCxLQUFNdzFCLEVBQU13eEIsR0FJdEQsU0FBU29zQyxHQUFZOWxCLEVBQUt0dEUsRUFBTXcxQixFQUFNMjRDLEdBQ3BDLElBQUltbEIsRUFBV2htQixFQUFJaDZDLFFBQVF5L0QsR0FBZSxJQUN0Q1EsRUFBZUQsRUFBU3gvRCxNQUFNZy9ELElBQzlCUyxHQUE0RCxNQUE1Q0QsRUFBU252RCxPQUFPb3ZELEVBQWExMEYsTUFBUSxJQUN2RDIyQixFQUNFLDREQUNRKzlELEVBQWEsR0FBTSxtQkFBdUJ2ekYsRUFBS3VILE9BQ3ZENG1FLEdBR0prbEIsR0FBZ0IvbEIsRUFBS3R0RSxFQUFNdzFCLEVBQU0yNEMsR0FHbkMsU0FBUytrQixHQUFVbHNDLEVBQU1obkQsRUFBTXcxQixFQUFNMjRDLEdBQ25Da2xCLEdBQWdCcnNDLEVBQUtzaUMsS0FBTyxHQUFJdHBGLEVBQU13MUIsRUFBTTI0QyxHQUM1Q3FsQixHQUFnQnhzQyxFQUFLK2pDLE1BQU8sY0FBZS9xRixFQUFNdzFCLEVBQU0yNEMsR0FDdkRxbEIsR0FBZ0J4c0MsRUFBS3dpQyxVQUFXLGlCQUFrQnhwRixFQUFNdzFCLEVBQU0yNEMsR0FDOURxbEIsR0FBZ0J4c0MsRUFBS3VpQyxVQUFXLGlCQUFrQnZwRixFQUFNdzFCLEVBQU0yNEMsR0FHaEUsU0FBU3FsQixHQUNQQyxFQUNBcjdGLEVBQ0E0SCxFQUNBdzFCLEVBQ0EyNEMsR0FFQSxHQUFxQixpQkFBVnNsQixFQUNULElBQ0UsSUFBSTU3RCxTQUFVLE9BQVM0N0QsRUFBUSxNQUMvQixNQUFPbDlGLEdBQ1BpL0IsRUFBTSxXQUFhcDlCLEVBQU8sS0FBUXE3RixFQUFRLG9CQUF3Qnp6RixFQUFLdUgsT0FBVTRtRSxJQUt2RixTQUFTa2xCLEdBQWlCL2xCLEVBQUt0dEUsRUFBTXcxQixFQUFNMjRDLEdBQ3pDLElBQ0UsSUFBSXQyQyxTQUFVLFVBQVl5MUMsR0FDMUIsTUFBTy8yRSxHQUNQLElBQUlnOUYsRUFBZWptQixFQUFJaDZDLFFBQVF5L0QsR0FBZSxJQUFJai9ELE1BQU0rK0QsSUFFdERyOUQsRUFERSs5RCxFQUVBLHFEQUNRQSxFQUFhLEdBQU0sd0JBQTRCdnpGLEVBQUt1SCxPQUs1RCx1QkFBMEJoUixFQUFTLFFBQW5DLGNBQ1MrMkUsRUFEVCx5QkFFd0J0dEUsRUFBS3VILE9BQVUsS0FOdkM0bUUsSUFhUixTQUFTZ2xCLEdBQWtDN2xCLEVBQUt0dEUsRUFBTXcxQixFQUFNMjRDLEdBQzFELElBQ0UsSUFBSXQyQyxTQUFTeTFDLEVBQUssSUFDbEIsTUFBTy8yRSxHQUNQaS9CLEVBQ0UsMENBQTZDai9CLEVBQVMsUUFBdEQsY0FDUysyRSxFQURULHlCQUV3QnR0RSxFQUFLdUgsT0FBVSxLQUN2QzRtRSxJQThDTixTQUFTdWxCLEdBQVVqdEQsRUFBSzNVLEdBQ3RCLElBQUkyUyxFQUFTLEdBQ2IsR0FBSTNTLEVBQUksRUFDTixLQUNVLEVBQUpBLElBQVMyUyxHQUFVZ0MsTUFDdkIzVSxLQUFPLElBQ0UsSUFDVDJVLEdBQU9BLEVBR1gsT0FBT2hDLEVBT1QsU0FBU2t2RCxHQUFnQnYzRCxFQUFNdzNELEdBQzdCLElBQ0UsT0FBTyxJQUFJLzdELFNBQVN1RSxHQUNwQixNQUFPenRDLEdBRVAsT0FEQWlsRyxFQUFPM3RHLEtBQUssQ0FBRTBJLElBQUtBLEVBQUt5dEMsS0FBTUEsSUFDdkIrTixHQUlYLFNBQVMwcEQsR0FBMkJDLEdBQ2xDLElBQUlwaEQsRUFBUTMzRCxPQUFPaWxELE9BQU8sTUFFMUIsT0FBTyxTQUNMdWhELEVBQ0F4bkcsRUFDQWlxRSxHQUdBLElBQUkrdkMsR0FESmg2RyxFQUFVaTlDLEVBQU8sR0FBSWo5QyxJQUNDeTdDLE1BQVFBLFVBQ3ZCejdDLEVBQVF5N0MsS0FLYixJQUNFLElBQUlxQyxTQUFTLFlBQ2IsTUFBT3RoQyxHQUNIQSxFQUFFb2hCLFdBQVdtYyxNQUFNLG9CQUNyQmlnRSxFQUNFLG9TQVdSLElBQUkzdUcsRUFBTXJMLEVBQVE2bkcsV0FDZDNpRSxPQUFPbGxDLEVBQVE2bkcsWUFBY0wsRUFDN0JBLEVBQ0osR0FBSTd1QyxFQUFNdHRELEdBQ1IsT0FBT3N0RCxFQUFNdHRELEdBSWYsSUFBSTR1RyxFQUFXRixFQUFRdlMsRUFBVXhuRyxHQUkzQmk2RyxFQUFTSixRQUFVSSxFQUFTSixPQUFPNzZHLFNBQ2pDZ0IsRUFBUXV1RyxrQkFDVjBMLEVBQVNKLE9BQU94d0csU0FBUSxTQUFVbVQsR0FDaEN3OUYsRUFDRSxnQ0FBbUN4OUYsRUFBSyxJQUFJLE9BOUcxRCxTQUNFdzhCLEVBQ0FvWixFQUNBQyxRQUVlLElBQVZELElBQW1CQSxFQUFRLFFBQ25CLElBQVJDLElBQWlCQSxFQUFNclosRUFBT2g2QyxRQUtuQyxJQUhBLElBQUlrN0csRUFBUWxoRSxFQUFPMkUsTUFBTSxTQUNyQjF3QixFQUFRLEVBQ1IwNEMsRUFBTSxHQUNEajhDLEVBQUksRUFBR0EsRUFBSXd3RixFQUFNbDdHLE9BQVEwcUIsSUFFaEMsSUFEQXVELEdBQVNpdEYsRUFBTXh3RixHQUFHMXFCLE9BQVMsSUFDZG96RCxFQUFPLENBQ2xCLElBQUssSUFBSXRXLEVBQUlweUIsRUFoQlAsRUFnQmtCb3lCLEdBQUtweUIsRUFoQnZCLEdBZ0JvQzJvQyxFQUFNcGxDLEVBQU82dUIsSUFDckQsS0FBSUEsRUFBSSxHQUFLQSxHQUFLbytELEVBQU1sN0csUUFBeEIsQ0FDQTJtRSxFQUFJejVELEtBQU0sSUFBTTR2QyxFQUFJLEdBQU02OUQsR0FBUyxJQUFLLEVBQUl6MEUsT0FBTzRXLEVBQUksR0FBRzk4QyxRQUFXLE1BQVNrN0csRUFBTXArRCxJQUNwRixJQUFJcStELEVBQWFELEVBQU1wK0QsR0FBRzk4QyxPQUMxQixHQUFJODhDLElBQU1weUIsRUFBRyxDQUVYLElBQUkwd0YsRUFBTWhvRCxHQUFTbmxDLEVBQVFrdEYsR0FBYyxFQUNyQ243RyxFQUFTcXpELEVBQU1wbEMsRUFBUWt0RixFQUFhQyxFQUFNL25ELEVBQU1ELEVBQ3BEdVQsRUFBSXo1RCxLQUFLLFNBQVd5dEcsR0FBUyxJQUFLUyxHQUFPVCxHQUFTLElBQUszNkcsU0FDbEQsR0FBSTg4QyxFQUFJcHlCLEVBQUcsQ0FDaEIsR0FBSTJvQyxFQUFNcGxDLEVBQU8sQ0FDZixJQUFJb3RGLEVBQVdud0csS0FBS3lpQixJQUFJMGxDLEVBQU1wbEMsRUFBT2t0RixHQUNyQ3gwQyxFQUFJejVELEtBQUssU0FBV3l0RyxHQUFTLElBQUtVLElBRXBDcHRGLEdBQVNrdEYsRUFBYSxHQUcxQixNQUdKLE9BQU94MEMsRUFBSTczRCxLQUFLLE1BNkVKd3NHLENBQWtCOVMsRUFBVWhyRixFQUFFNDFDLE1BQU81MUMsRUFBRTYxQyxLQUN2QzRYLE1BSUordkMsRUFDRSxnQ0FBa0N4UyxFQUFXLE9BQzdDeVMsRUFBU0osT0FBTzEyRSxLQUFJLFNBQVUzbUIsR0FBSyxNQUFRLEtBQU9BLEtBQU8xTyxLQUFLLE1BQVEsS0FDdEVtOEQsSUFJRmd3QyxFQUFTTSxNQUFRTixFQUFTTSxLQUFLdjdHLFNBQzdCZ0IsRUFBUXV1RyxrQkFDVjBMLEVBQVNNLEtBQUtseEcsU0FBUSxTQUFVbVQsR0FBSyxPQUFPb3RELEdBQUlwdEQsRUFBRTRrQyxJQUFLNm9CLE1BRXZEZ3dDLEVBQVNNLEtBQUtseEcsU0FBUSxTQUFVKzNDLEdBQU8sT0FBT3dvQixHQUFJeG9CLEVBQUs2b0IsT0FNN0QsSUFBSXRFLEVBQU0sR0FDTjYwQyxFQUFjLEdBeUJsQixPQXhCQTcwQyxFQUFJa1EsT0FBUytqQyxHQUFlSyxFQUFTcGtDLE9BQVEya0MsR0FDN0M3MEMsRUFBSTJWLGdCQUFrQjIrQixFQUFTMytCLGdCQUFnQm40QyxLQUFJLFNBQVVrZixHQUMzRCxPQUFPdTNELEdBQWV2M0QsRUFBTW00RCxNQVF0QlAsRUFBU0osUUFBV0ksRUFBU0osT0FBTzc2RyxTQUFXdzdHLEVBQVl4N0csUUFDL0RnN0csRUFDRSwwQ0FDQVEsRUFBWXIzRSxLQUFJLFNBQVU0b0QsR0FDeEIsSUFBSW4zRSxFQUFNbTNFLEVBQUluM0UsSUFDVnl0QyxFQUFPMHBDLEVBQUkxcEMsS0FFZixPQUFTenRDLEVBQUlncEIsV0FBYyxVQUFZeWtCLEVBQU8sUUFDL0N2MEMsS0FBSyxNQUNObThELEdBS0V0UixFQUFNdHRELEdBQU9zNkQsR0FpRnpCLElBeUJJODBDLEdBcEc0QkMsR0E2RjVCekssSUE3RjRCeUssR0EyRVcsU0FDekNsVCxFQUNBeG5HLEdBRUEsSUFBSTYxRyxFQUFNM3pELEdBQU1zbEQsRUFBU2g2RSxPQUFReHRCLElBQ1IsSUFBckJBLEVBQVFnekcsVUFDVkEsR0FBUzZDLEVBQUs3MUcsR0FFaEIsSUFBSXFpRCxFQUFPdXpELEdBQVNDLEVBQUs3MUcsR0FDekIsTUFBTyxDQUNMNjFHLElBQUtBLEVBQ0xoZ0MsT0FBUXh6QixFQUFLd3pCLE9BQ2J5RixnQkFBaUJqNUIsRUFBS2k1QixrQkF0RmpCLFNBQXlCNjJCLEdBQzlCLFNBQVM0SCxFQUNQdlMsRUFDQXhuRyxHQUVBLElBQUkyNkcsRUFBZTM1RyxPQUFPaWxELE9BQU9rc0QsR0FDN0IwSCxFQUFTLEdBQ1RVLEVBQU8sR0FFUDkrRCxFQUFPLFNBQVUyRixFQUFLZ3pDLEVBQU94cUIsSUFDOUJBLEVBQU0yd0MsRUFBT1YsR0FBUTN0RyxLQUFLazFDLElBRzdCLEdBQUlwaEQsRUFBUyxDQUNYLEdBQUlBLEVBQVF1dUcsa0JBQW1CLENBRTdCLElBQUlxTSxFQUFxQnBULEVBQVN6dEQsTUFBTSxRQUFRLEdBQUcvNkMsT0FFbkR5OEMsRUFBTyxTQUFVMkYsRUFBS2d6QyxFQUFPeHFCLEdBQzNCLElBQUloeEIsRUFBTyxDQUFFd0ksSUFBS0EsR0FDZGd6QyxJQUNpQixNQUFmQSxFQUFNaGlDLFFBQ1J4WixFQUFLd1osTUFBUWdpQyxFQUFNaGlDLE1BQVF3b0QsR0FFWixNQUFieG1CLEVBQU0vaEMsTUFDUnpaLEVBQUt5WixJQUFNK2hDLEVBQU0vaEMsSUFBTXVvRCxLQUcxQmh4QyxFQUFNMndDLEVBQU9WLEdBQVEzdEcsS0FBSzBzQyxJQWdCL0IsSUFBSyxJQUFJdnRDLEtBWkxyTCxFQUFRMjJDLFVBQ1Zna0UsRUFBYWhrRSxTQUNWdzdELEVBQVl4N0QsU0FBVyxJQUFJRCxPQUFPMTJDLEVBQVEyMkMsVUFHM0MzMkMsRUFBUWd4RSxhQUNWMnBDLEVBQWEzcEMsV0FBYS96QixFQUN4Qmo4QyxPQUFPaWxELE9BQU9rc0QsRUFBWW5oQyxZQUFjLE1BQ3hDaHhFLEVBQVFneEUsYUFJSWh4RSxFQUNGLFlBQVJxTCxHQUE2QixlQUFSQSxJQUN2QnN2RyxFQUFhdHZHLEdBQU9yTCxFQUFRcUwsSUFLbENzdkcsRUFBYWwvRCxLQUFPQSxFQUVwQixJQUFJdytELEVBQVdTLEdBQVlsVCxFQUFTaDZFLE9BQVFtdEYsR0FNNUMsT0FKRTFCLEdBQWFnQixFQUFTcEUsSUFBS3A2RCxHQUU3QncrRCxFQUFTSixPQUFTQSxFQUNsQkksRUFBU00sS0FBT0EsRUFDVE4sRUFHVCxNQUFPLENBQ0xGLFFBQVNBLEVBQ1RjLG1CQUFvQmYsR0FBMEJDLE1BNEJ6QjVILElBRXZCMEksSUFEVTVLLEdBQU04SixRQUNLOUosR0FBTTRLLG9CQU0vQixTQUFTQyxHQUFpQmhxRCxHQUd4QixPQUZBMnBELEdBQU1BLElBQU92OEcsU0FBU0MsY0FBYyxRQUNoQ2c2RixVQUFZcm5DLEVBQU8saUJBQXFCLGdCQUNyQzJwRCxHQUFJdGlCLFVBQVUvdEYsUUFBUSxTQUFXLEVBSTFDLElBQUkwL0YsS0FBdUIzaEMsR0FBWTJ5QyxJQUFnQixHQUVuRHhNLEtBQThCbm1DLEdBQVkyeUMsSUFBZ0IsR0FJMURDLEdBQWVqMkMsR0FBTyxTQUFVdHVCLEdBQ2xDLElBQUluNEMsRUFBS3VnRCxHQUFNcEksR0FDZixPQUFPbjRDLEdBQU1BLEVBQUc4NUYsYUFHZDZpQixHQUFRdnlCLEdBQUlocEYsVUFBVSsrRSxPQXNGMUIsT0FyRkFpSyxHQUFJaHBGLFVBQVUrK0UsT0FBUyxTQUNyQm5nRixFQUNBeS9FLEdBS0EsSUFIQXovRSxFQUFLQSxHQUFNdWdELEdBQU12Z0QsTUFHTkgsU0FBU3dWLE1BQVFyVixJQUFPSCxTQUFTd1gsZ0JBSTFDLE9BSEErbEMsR0FDRSw0RUFFS3g4QyxLQUdULElBQUllLEVBQVVmLEtBQUtzckUsU0FFbkIsSUFBS3ZxRSxFQUFRNjFFLE9BQVEsQ0FDbkIsSUFBSTJ4QixFQUFXeG5HLEVBQVF3bkcsU0FDdkIsR0FBSUEsRUFDRixHQUF3QixpQkFBYkEsRUFDa0IsTUFBdkJBLEVBQVNwOUMsT0FBTyxNQUNsQm85QyxFQUFXdVQsR0FBYXZULEtBR3RCL3JELEdBQ0csMkNBQThDejdDLEVBQWdCLFNBQy9EZixXQUlELEtBQUl1b0csRUFBU3RLLFNBTWxCLE9BRkV6aEQsR0FBSywyQkFBNkIrckQsRUFBVXZvRyxNQUV2Q0EsS0FMUHVvRyxFQUFXQSxFQUFTclAsZUFPYjk1RixJQUNUbXBHLEVBa0NOLFNBQXVCbnBHLEdBQ3JCLEdBQUlBLEVBQUc0OEcsVUFDTCxPQUFPNThHLEVBQUc0OEcsVUFFVixJQUFJcm9HLEVBQVkxVSxTQUFTQyxjQUFjLE9BRXZDLE9BREF5VSxFQUFVNUksWUFBWTNMLEVBQUdtWCxXQUFVLElBQzVCNUMsRUFBVXVsRixVQXhDSitpQixDQUFhNzhHLElBRTFCLEdBQUltcEcsRUFBVSxDQUVSNWdDLEVBQU9LLGFBQWVnTixJQUN4QkEsR0FBSyxXQUdQLElBQUk4WCxFQUFNOHVCLEdBQW1CclQsRUFBVSxDQUNyQytHLG1CQUFtQixFQUNuQnpFLHFCQUFzQkEsR0FDdEJ3RSw0QkFBNkJBLEdBQzdCekcsV0FBWTduRyxFQUFRNm5HLFdBQ3BCOEcsU0FBVTN1RyxFQUFRMnVHLFVBQ2pCMXZHLE1BQ0M0MkUsRUFBU2tXLEVBQUlsVyxPQUNieUYsRUFBa0J5USxFQUFJelEsZ0JBQzFCdDdFLEVBQVE2MUUsT0FBU0EsRUFDakI3MUUsRUFBUXM3RSxnQkFBa0JBLEVBR3RCMVUsRUFBT0ssYUFBZWdOLEtBQ3hCQSxHQUFLLGVBQ0xDLEdBQVMsT0FBVWoxRSxLQUFVLE1BQUksV0FBYSxVQUFXLGlCQUkvRCxPQUFPKzdHLEdBQU0zM0csS0FBS3BFLEtBQU1aLEVBQUl5L0UsSUFpQjlCMkssR0FBSXN4QixRQUFVYyxHQUVQcHlCLEdBcnVYeUVsSSwwQkNKbEYsSUFLSTdqQyxFQUxBeStELEVBQVcsbUVBQW1FeDlELE1BQU0sSUFFcEZ4YSxFQUFNLEdBQ05pNEUsRUFBTyxFQUNQMXhGLEVBQUksRUFVUixTQUFTNHBCLEVBQU9wZCxHQUNkLElBQUltbEYsRUFBVSxHQUVkLEdBQ0VBLEVBQVVGLEVBQVNqbEYsRUFqQlYsSUFpQjBCbWxGLEVBQ25DbmxGLEVBQU1oc0IsS0FBSytWLE1BQU1pVyxFQWxCUixVQW1CRkEsRUFBTSxHQUVmLE9BQU9tbEYsRUEwQlQsU0FBUzl6RCxJQUNQLElBQUlpOUIsRUFBTWx4QyxHQUFRLElBQUltSixNQUV0QixPQUFJK25DLElBQVE5bkMsR0FBYTArRCxFQUFPLEVBQUcxK0QsRUFBTzhuQyxHQUNuQ0EsRUFBSyxJQUFLbHhDLEVBQU84bkUsS0FNMUIsS0FBTzF4RixFQXpETSxHQXlETUEsSUFBS3laLEVBQUlnNEUsRUFBU3p4RixJQUFNQSxFQUszQzY5QixFQUFNalUsT0FBU0EsRUFDZmlVLEVBQU0xVCxPQWhDTixTQUFnQjZZLEdBQ2QsSUFBSTFDLEVBQVUsRUFFZCxJQUFLdGdDLEVBQUksRUFBR0EsRUFBSWdqQyxFQUFJMXRELE9BQVEwcUIsSUFDMUJzZ0MsRUFuQ1MsR0FtQ0NBLEVBQW1CN21CLEVBQUl1cEIsRUFBSXRDLE9BQU8xZ0MsSUFHOUMsT0FBT3NnQyxHQTBCVHJYLEVBQU9DLFFBQVUyVSxrQkM5Q0Usb0JBQVJraEMsTUFDUEEsSUFBTSxFQUFRLE9BQ0EsTUFBZDdpRixPQUFPMDFHLE1BQ1B4cEUsYUFBZSxVQUNmLzRCLFVBQVksV0FDWmt1QixVQUFZLFdBQ1ovaEMsWUFBYyxXQUNkMlIsYUFBZSxXQUNmaTJCLGFBQWUsVUFDZmhMLFVBQVksV0FDWnJ2QixVQUFZLFlBSWhCZzJFLElBQUlsSCxVQUFVLGtCQUFtQixDQUM3QjNvQyxLQUFNLFdBQ0YsTUFBTyxJQUVYaGpCLE1BQU8sQ0FBQyxTQUNSZzNELFFBQVMsV0FDYSxNQUFkaG5GLE9BQU8wMUcsTUFDUHhwRSxhQUFlbHNDLE9BQU8wMUcsSUFBSUMsVUFBVXpwRSxjQUN0QixJQUFJQSxhQUFhN3lDLEtBQUtzc0YsS0FDeEMsSUFBSyxJQUFJN2hFLEVBQUksRUFBR0EsRUFBSXpxQixLQUFLNjZFLE9BQU96bkIsSUFBSXJ6RCxPQUFRMHFCLElBQ3hDLElBQ21ELG1CQUEzQ3pxQixLQUFLNjZFLE9BQU96bkIsSUFBSTNvQyxHQUFHcWlELGlCQUFpQkgsTUFDcEMzc0UsS0FBSzY2RSxPQUFPem5CLElBQUkzb0MsR0FBRzJpRCxrQkFBa0JtdkMsYUFBYyxHQUczRCxTQUdSaFUsU0FBVSwwYkFlZC9lLElBQUlsSCxVQUFVLFVBQVcsQ0FDckIzckQsTUFBTyxDQUFDLE9BQVEsU0FDaEJnM0QsUUFBUyxXQUNhLE1BQWRobkYsT0FBTzAxRyxNQUNQdmlHLFVBQVluVCxPQUFPMDFHLElBQUk3bkcsT0FBT3NGLFdBQ25CLElBQUlBLFVBQVU5WixLQUFLc3NGLE1BRXRDaWMsU0FBVSwwTkFRZC9lLElBQUlsSCxVQUFVLGtCQUFtQixDQUM3QjNvQyxLQUFNLFdBQ0YsTUFBTyxDQUNINGlFLGFBQWEsSUFHckI1bEYsTUFBTyxDQUFDLFFBQ1JnM0QsUUFBUyxXQUNhLE1BQWRobkYsT0FBTzAxRyxNQUNQdmlHLFVBQVluVCxPQUFPMDFHLElBQUk3bkcsT0FBT3NGLFdBQ1QsSUFBSUEsVUFBVTlaLEtBQUtzc0YsS0FDM0J0eUUsV0FBWSxHQUVqQ3V1RixTQUFVLG1NQUdkL2UsSUFBSWxILFVBQVUsYUFBYyxDQUN4QjNvQyxLQUFNLFdBQ0YsTUFBTyxDQUNINmlFLFVBQVUsSUFHbEI3bEYsTUFBTyxDQUFDLFdBQVksU0FBVSxhQUFjLE9BQVEsWUFDcERnM0QsUUFBUyxXQUNhLE1BQWRobkYsT0FBTzAxRyxNQUNQdmlHLFVBQVluVCxPQUFPMDFHLElBQUk3bkcsT0FBT3NGLFdBQ2IsSUFBSUEsVUFBVTlaLEtBQUtzc0YsTUFFNUNpYyxTQUFVLGdjQVVkL2UsSUFBSWxILFVBQVUsYUFBYyxDQUN4QjNvQyxLQUFNLFdBQ0YsTUFBTyxDQUNIOGlFLGNBQWUsT0FHdkI5bEYsTUFBTyxDQUFDLFFBQVMsUUFBUyxZQUMxQmczRCxRQUFTLFdBQ2EsTUFBZGhuRixPQUFPMDFHLE1BQ1ByMEUsVUFBWXJoQyxPQUFPMDFHLElBQUlJLGNBQWN6MEUsV0FDekNob0MsS0FBS3k4RyxjQUFnQixJQUFJejBFLFVBQVVob0MsS0FBS3NzRixJQUFJd00sV0FBVyxLQUUzRHlQLFNBQVUseXJCQWNkL2UsSUFBSWxILFVBQVUsZUFBZ0IsQ0FDMUIzckQsTUFBTyxDQUFDLFFBQVMsUUFBUyxZQUMxQmczRCxRQUFTLFdBQ2EsTUFBZGhuRixPQUFPMDFHLE1BQ1BwMkcsWUFBY1UsT0FBTzAxRyxJQUFJSyxTQUFTejJHLGFBQ3BCLE1BQWRVLE9BQU8wMUcsTUFDUHprRyxhQUFlalIsT0FBTzAxRyxJQUFJTSxVQUFVL2tHLGNBQ3hDLE1BQU04a0csRUFBVyxJQUFJejJHLFlBQVlqRyxLQUFLc3NGLElBQUl3TSxXQUFXLElBQ25DLElBQUlsaEYsYUFBYTVYLEtBQUtzc0YsS0FDOUJ4MEUsTUFBUTRrRyxHQUV0Qm5VLFNBQVUsNHZCQWlCZC9lLElBQUlsSCxVQUFVLGlCQUFrQixDQUM1QjNvQyxLQUFNLFdBQ0YsTUFBTyxDQUNIaWpFLFVBQVcsS0FDWG56RSxPQUFPLElBR2Y5UyxNQUFPLENBQUMsUUFBUyxRQUFTLFdBQVksV0FBWSxZQUFhLE9BQVEsTUFBTyxNQUFPLFdBQVksU0FBVSxTQUMzR216QyxNQUFPLENBQ0hsaEUsTUFBTyxTQUFVazFDLEdBQ0YsTUFBUEEsR0FDQTk5QyxLQUFLNDhHLFVBQVVuekUsT0FBUSxFQUN2QnpwQyxLQUFLeXBDLE9BQVEsSUFFYnpwQyxLQUFLNDhHLFVBQVVuekUsT0FBUSxFQUN2QnpwQyxLQUFLeXBDLE9BQVEsS0FJekJra0QsUUFBUyxXQUNhLE1BQWRobkYsT0FBTzAxRyxNQUNQeHVFLGFBQWVsbkMsT0FBTzAxRyxJQUFJTyxVQUFVL3VFLGNBQ3hDN3RDLEtBQUs0OEcsVUFBWSxJQUFJL3VFLGFBQWE3dEMsS0FBS3NzRixJQUFJeG9CLFlBQ3pCLE1BQWQ5akUsS0FBSzRJLFFBQ0w1SSxLQUFLNDhHLFVBQVVuekUsT0FBUSxFQUN2QnpwQyxLQUFLeXBDLE9BQVEsSUFHckI4K0QsU0FBVSx1d0RBNEJkL2UsSUFBSWxILFVBQVUsYUFBYyxDQUN4QjNvQyxLQUFNLFdBQ0YsTUFBTyxJQUVYaGpCLE1BQU8sQ0FBQyxRQUFTLFFBQVMsV0FBWSxZQUN0Q2czRCxRQUFTLFdBQ0wsSUFBSWxvRCxFQUFXemxDLEtBQUtzc0YsSUFBSXBqRixjQUFjLGlGQUN0QyxHQUFJdThCLEVBQVNoL0IsYUFBYSxlQUFpQnpHLEtBQUt3RyxNQUFPLENBQ25ELElBQUlwSCxFQUFLWSxLQUFLc3NGLElBQUlwakYsY0FBYyxxRUFBdUVsSixLQUFLd0csTUFBUSxNQUMxRyxNQUFOcEgsSUFDQXFtQyxFQUFTMStCLFVBQVVJLE9BQU8sMkJBQzFCL0gsRUFBRzJILFVBQVVDLElBQUksMkJBQ2pCeStCLEVBQVNwK0IsYUFBYSxnQkFBaUIsU0FDdkNqSSxFQUFHaUksYUFBYSxnQkFBaUIsU0FHdkIsTUFBZFYsT0FBTzAxRyxNQUNQeDVFLFVBQVlsOEIsT0FBTzAxRyxJQUFJUSxPQUFPaDZFLFdBQ2xDLE1BQU1nNkUsRUFBUyxJQUFJaDZFLFVBQVU3aUMsS0FBS3NzRixLQUNsQ3V3QixFQUFPajhHLE9BQU8sb0JBQW9CLEtBQzlCWixLQUFLaWxGLE1BQU0sUUFBUzQzQixFQUFPcjJHLFdBR25DK2hHLFNBQVUsd2lEQWtDZC9lLElBQUlsSCxVQUFVLG9CQUFxQixDQUMvQjNvQyxLQUFNLFdBQ0YsTUFBTyxJQUVYaGpCLE1BQU8sQ0FBQyxRQUFTLFFBQVMsWUFDMUI0eEUsU0FBVSwyTkFXZC9lLElBQUlsSCxVQUFVLGFBQWMsQ0FDeEIzb0MsS0FBTSxXQUNGLE1BQU8sQ0FDSG1qRSxPQUFRLE9BR2hCbm1GLE1BQU8sQ0FBQyxRQUFTLE9BQVEsUUFBUyxrQkFBbUIsb0JBQ3JEbXpDLE1BQU8sQ0FDSHRqRSxNQUFPLFNBQVVzM0MsR0FDVEEsR0FDQTk5QyxLQUFLODhHLE9BQU94ckcsUUFFcEJBLEtBQU0sU0FBVXdzQyxHQUNSQSxHQUNBOTlDLEtBQUs4OEcsT0FBT3hyRyxRQUVwQmhDLGdCQUFpQixTQUFVd3VDLEdBQ3ZCOTlDLEtBQUs4OEcsT0FBT3h0RyxnQkFBa0J3dUMsR0FFbEN2dUMsaUJBQWtCLFNBQVV1dUMsR0FDeEI5OUMsS0FBSzg4RyxPQUFPdnRHLGlCQUFtQnV1QyxJQUd2QzZ2QyxRQUFTLFdBRWEsTUFBZGhuRixPQUFPMDFHLE1BQ1A3b0csVUFBWTdNLE9BQU8wMUcsSUFBSVMsT0FBT3RwRyxXQUNsQ3hULEtBQUs4OEcsT0FBUyxJQUFJdHBHLFVBQVV4VCxLQUFLc3NGLEtBQ2pDdHNGLEtBQUs4OEcsT0FBT3h0RyxnQkFBa0J0UCxLQUFLc1AsZ0JBQ25DdFAsS0FBSzg4RyxPQUFPdnRHLGlCQUFtQnZQLEtBQUt1UCxpQkFDcEN2UCxLQUFLODhHLE9BQU9sOEcsT0FBTyxvQkFBb0IyYyxJQUNuQ3ZkLEtBQUtpbEYsTUFBTSxTQUFTLEdBQ3BCamxGLEtBQUtpbEYsTUFBTSxTQUFVMW5FLEVBQUU5YixXQUUzQnpCLEtBQUs4OEcsT0FBT2w4RyxPQUFPLG9CQUFvQjJjLElBQ25DLE1BQU13L0YsRUFBYzk5RyxTQUFTa0wsaUJBQWlCLGVBQWlCbkssS0FBSzBxRixLQUFPLGdCQUMzRSxJQUFLamdFLEVBQUksRUFBR0EsRUFBSXN5RixFQUFZaDlHLFNBQVUwcUIsRUFDWixNQUFsQnN5RixFQUFZdHlGLElBQWM0eEYsSUFBSUksY0FBY3owRSxVQUFVem5DLFNBQVN3OEcsRUFBWXR5RixJQUFJMWEsVUFHM0YsSUFBSyxJQUFJMGEsRUFBSSxFQUFHQSxFQUFJenFCLEtBQUs2NkUsT0FBT21pQyxRQUFRajlHLE9BQVEwcUIsSUFDNUMsSUFDdUQsY0FBL0N6cUIsS0FBSzY2RSxPQUFPbWlDLFFBQVF2eUYsR0FBR3FpRCxpQkFBaUJILE1BQ3hDM3NFLEtBQUs2NkUsT0FBT21pQyxRQUFRdnlGLEdBQUcyaUQsa0JBQWtCb3ZDLFVBQVcsR0FHNUQsU0FHUmpVLFNBQVUseTBCQXVCZC9lLElBQUlsSCxVQUFVLFdBQVksQ0FDdEJpbUIsU0FBVSwwREFRZCxJQUFLLElBQUk5OUUsRUFBSSxFQUFHQSxHQUFLLEVBQUdBLElBQ3BCKytELElBQUlsSCxVQUFVLFFBQVE3M0QsSUFBSyxDQUN2Qjg5RSxTQUFVLFdBQ1Y5OUUsb0NBQW9DQSxzQ0FFbkNBLGFBS1QsSUFBU0EsRUFBSSxFQUFHQSxHQUFLLEVBQUdBLElBQ3BCKytELElBQUlsSCxVQUFVLGVBQWU3M0QsSUFBSyxDQUM5Qjg5RSxTQUFVLDRDQUN1Qjk5RSxnREFLckMrK0QsSUFBSWxILFVBQVUsV0FBVzczRCxJQUFLLENBQzFCODlFLFNBQVUsdUNBQ2tCOTlFLCtDQU9wQysrRCxJQUFJbEgsVUFBVSxlQUFnQixDQUMxQmltQixTQUFVLDRFQU9kL2UsSUFBSWxILFVBQVUsY0FBZSxDQUN6QmltQixTQUFVLDZFQ3BhVjBVLEVBQTJCLEdBRy9CLFNBQVNDLEVBQW9CQyxHQUU1QixJQUFJQyxFQUFlSCxFQUF5QkUsR0FDNUMsUUFBcUJoOUcsSUFBakJpOUcsRUFDSCxPQUFPQSxFQUFhenBFLFFBR3JCLElBQUlELEVBQVN1cEUsRUFBeUJFLEdBQVksQ0FDakQ1bEUsR0FBSTRsRSxFQUVKeHBFLFFBQVMsSUFPVixPQUhBMHBFLEVBQW9CRixHQUFVLzRHLEtBQUtzdkMsRUFBT0MsUUFBU0QsRUFBUUEsRUFBT0MsUUFBU3VwRSxHQUdwRXhwRSxFQUFPQyxRQUlmdXBFLEVBQW9CcmxELEVBQUl3bEQsRUN4QnhCSCxFQUFvQnBrRSxFQUFLcEYsSUFDeEIsSUFBSWk4QixFQUFTajhCLEdBQVVBLEVBQU93RyxXQUM3QixJQUFPeEcsRUFBaUIsUUFDeEIsSUFBTSxFQUVQLE9BREF3cEUsRUFBb0JubEQsRUFBRTRYLEVBQVEsQ0FBRXRKLEVBQUdzSixJQUM1QkEsR0NMUnV0QyxFQUFvQm5sRCxFQUFJLENBQUNwa0IsRUFBUzQ2QyxLQUNqQyxJQUFJLElBQUluaUYsS0FBT21pRixFQUNYMnVCLEVBQW9CdGtFLEVBQUUyMUMsRUFBWW5pRixLQUFTOHdHLEVBQW9CdGtFLEVBQUVqRixFQUFTdm5DLElBQzVFckssT0FBT0MsZUFBZTJ4QyxFQUFTdm5DLEVBQUssQ0FBRWxLLFlBQVksRUFBTUQsSUFBS3NzRixFQUFXbmlGLE1DSjNFOHdHLEVBQW9CanpDLEVBQUksV0FDdkIsR0FBMEIsaUJBQWY5a0IsV0FBeUIsT0FBT0EsV0FDM0MsSUFDQyxPQUFPbmxELE1BQVEsSUFBSTYrQyxTQUFTLGNBQWIsR0FDZCxNQUFPdGhDLEdBQ1IsR0FBc0IsaUJBQVg1VyxPQUFxQixPQUFPQSxRQUxqQixHQ0F4QnUyRyxFQUFvQnRrRSxFQUFJLENBQUMzcEIsRUFBSzZILElBQVUvMEIsT0FBT3ZCLFVBQVU2Z0QsZUFBZWo5QyxLQUFLNnFCLEVBQUs2SCxTQ0FsRixJQUFJd21GLEVBQ0FKLEVBQW9CanpDLEVBQUVzekMsZ0JBQWVELEVBQVlKLEVBQW9CanpDLEVBQUVycUIsU0FBVyxJQUN0RixJQUFJM2dELEVBQVdpK0csRUFBb0JqekMsRUFBRWhyRSxTQUNyQyxJQUFLcStHLEdBQWFyK0csSUFDYkEsRUFBU3UrRyxnQkFDWkYsRUFBWXIrRyxFQUFTdStHLGNBQWM1M0QsTUFDL0IwM0QsR0FBVyxDQUNmLElBQUlHLEVBQVV4K0csRUFBUzZtRCxxQkFBcUIsVUFDekMyM0QsRUFBUTE5RyxTQUFRdTlHLEVBQVlHLEVBQVFBLEVBQVExOUcsT0FBUyxHQUFHNmxELEtBSzdELElBQUswM0QsRUFBVyxNQUFNLElBQUk1OEcsTUFBTSx5REFDaEM0OEcsRUFBWUEsRUFBVWhqRSxRQUFRLE9BQVEsSUFBSUEsUUFBUSxRQUFTLElBQUlBLFFBQVEsWUFBYSxLQUNwRjRpRSxFQUFvQmhvRSxFQUFJb29FLE1DZnhCSixFQUFvQnBrRCxFQUFJNzVELFNBQVN5K0csU0FBV3JnRSxLQUFLdUMsU0FBU2lTLHVKQ1d0RDl3RCxFQUFVLEdBRWRBLEVBQVEyaUUsa0JBQW9CLElBQzVCM2lFLEVBQVF3aUUsY0FBZ0IsSUFFbEJ4aUUsRUFBUW1pRSxPQUFTLFNBQWMsS0FBTSxRQUUzQ25pRSxFQUFRMmhFLE9BQVMsSUFDakIzaEUsRUFBUTBpRSxtQkFBcUIsSUFFaEIsSUFBSSxJQUFTMWlFLEdBS0osS0FBVyxZQUFpQixxREN4QjNCLFVBQ0QsU0FEZixNQUdQLFFDd0JJeWdELFlBeUJFLElBQUksSUFBSixDQUFRLENBQ1ZwaUQsR0FBSSxPQUNKdTZDLEtBQU0sQ0FDRmdrRSxlQUFnQixHQUNoQkMsb0JBQXFCLEtBQ3JCL2dELFFBQVEsRUFDUmdoRCxlQUFnQixLQUNoQkMsZUFBZ0IsSUFFcEIzc0MsUUFBUyxDQUNMNHNDLG1CQUFvQixXQUNoQi85RyxLQUFLNDlHLG9CQUFzQixLQUMzQmw0RyxZQUFXLEtBQzJCLEdBQTlCMUYsS0FBSzI5RyxlQUFlNTlHLE9BSXhCeWhELEVBQU9yZ0QsS0FBSyxXQUFZbkIsS0FBSzI5RyxnQkFIekIzOUcsS0FBSzQ5RyxvQkFBc0IsbUNBSWhDLElBRVBJLG9CQUFxQixTQUFVemdHLEdBQ1YsSUFBYkEsRUFBRXhLLFNBQ0YvUyxLQUFLKzlHLHVCQUlqQjFzQyxTQUFVLENBQ040c0MsYUFBYyxXQUNWLElBQUkzK0csRUFBUSxHQUNaLEdBQTJCLE1BQXZCVSxLQUFLNjlHLGVBR1QsTUFGZ0MsU0FBNUI3OUcsS0FBSzY5RyxlQUFleitGLE9BQ3BCOWYsRUFBTSxvQkFBc0IsUUFBUVUsS0FBSzY5RyxlQUFlNWpFLFNBQ3JEMzZDLEdBRVg0K0csUUFBUyxXQUNMLE1BQTJCLElBQXZCbCtHLEtBQUs4OUcsZUFDRTk5RyxLQUFLODlHLGVBQ1csTUFBdkI5OUcsS0FBSzY5RyxlQUNFLEdBQ3FCLFNBQTVCNzlHLEtBQUs2OUcsZUFBZXorRixLQUNicGYsS0FBSzY5RyxlQUFlSyxhQUQvQixJQUlSdndCLFFBQVMsV0FDTCxJQUFJdHdDLEVBQU9yOUMsTUFDWHdoRCxFQUFTLEtBQ0ZsTSxHQUFHLGNBQWVzTyxJQUNyQjlILFFBQVFZLElBQUksaUJBQW1Ca0gsR0FDL0JoRSxTQUFTdStELFlBRWIzOEQsRUFBT2xNLEdBQUcsWUFBWSxTQUFVNk0sR0FDNUIsR0FBVyxnQkFBUEEsRUFJSixNQUFXLFVBQVBBLEdBQ0E5RSxFQUFLd2YsUUFBUyxPQUNkcmIsRUFBT2xNLEdBQUcsV0FBVyxTQUFVNk0sR0FDM0IsR0FBbUIsVUFBZkEsRUFBSXZ1QyxRQUdKLE9BRkF5cEMsRUFBS3dnRSxlQUFpQixVQUN0QnhnRSxFQUFLeWdFLGVBQWlCLElBRzFCLEdBQW1CLGVBQWYzN0QsRUFBSXZ1QyxRQUFSLENBSUEsSUExRk1xbUMsRUEwRkZta0UsRUFBUSxPQUFhajhELEVBQUl2dUMsU0FDN0IsR0FBSXdxRyxFQUFNcitHLE9BQVMsRUFDZixJQUFLLE1BQU1pVixLQUFXb3BHLEVBQ2xCajhELEVBQUl2dUMsUUFBVXV1QyxFQUFJdnVDLFFBQVEwbUMsUUFBUXRsQyxFQUFReE8sTUFBTyxJQUd6RCxHQUFJMjdDLEVBQUlxZSxZQUFZemdFLE9BQVMsRUFNekIsT0FMQXM5QyxFQUFLd2dFLGVBQWlCLEdBQ3RCeGdFLEVBQUt3Z0UsZUFBZXorRixLQUFPLFFBQzNCaStCLEVBQUt3Z0UsZUFBZTVqRSxJQUFNa0ksRUFBSXFlLFlBQVksR0FBRzY5QyxTQUM3Q2hoRSxFQUFLd2dFLGVBQWVLLFFBQVUvN0QsRUFBSXZ1QyxhQUNsQ3lwQyxFQUFLeWdFLGVBQWlCLElBR3RCTSxFQUFNcitHLE9BQVMsSUF4R2JrNkMsRUF5R1Fta0UsRUFBTSxHQUFHdnNELEtBeEdoQyxJQUFJN0ksU0FBUSxTQUFVQyxFQUFTbzVCLEdBQ2xDLElBQ0k5bEIsRUFBTytoRCxFQUFNLElBQUlDLE1BQ3JCRCxFQUFJOTdELFFBQVU4N0QsRUFBSUUsUUFBVSxXQUN4Qmw1RyxhQUFhaTNELEdBQ2IraEQsRUFBTSxLQUNOajhCLEVBQU8sVUFFWGk4QixFQUFJNTNELE9BQVMsV0FDVHBoRCxhQUFhaTNELEdBQ2IraEQsRUFBTSxLQUNOcjFELEVBQVEsWUFFWnNULEVBQVE3MkQsWUFBVyxXQUNmNDRHLEVBQUkxNEQsSUFBTSxHQUNWMDRELEVBQU0sS0FDTmo4QixFQUFPLGFBZkcsS0FpQmRpOEIsRUFBSTE0RCxJQUFNM0wsTUFzRitCaVAsTUFBSyxLQUMxQjdMLEVBQUt3Z0UsZUFBaUIsR0FDdEJ4Z0UsRUFBS3dnRSxlQUFleitGLEtBQU8sUUFDM0JpK0IsRUFBS3dnRSxlQUFlNWpFLElBQU1ta0UsRUFBTSxHQUFHdnNELEtBQ25DeFUsRUFBS3dnRSxlQUFlSyxRQUFVLE1BR3RDN2dFLEVBQUt5Z0UsZUFBaUIzN0QsRUFBSXZ1QyxhQXpCdEJ5cEMsRUFBS3lnRSxlQUFpQixhQTZCbEN6Z0UsRUFBS3VnRSxvQkFBc0IscUJBekN2QnZnRSxFQUFLdWdFLG9CQUFzQiIsInNvdXJjZXMiOlsid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvYW5pbWF0aW9uL3V0aWwuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2NoZWNrYm94L2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2NoZWNrYm94L2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9jaGVja2JveC9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9kaWFsb2cvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2RvbS9mb2N1cy10cmFwLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvYW5pbWF0aW9uL2FuaW1hdGlvbmZyYW1lLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvZGlhbG9nL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2RpYWxvZy9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9kaWFsb2cvdXRpbC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2RvbS9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9kb20vcG9ueWZpbGwuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mbG9hdGluZy1sYWJlbC9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mbG9hdGluZy1sYWJlbC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mbG9hdGluZy1sYWJlbC9mb3VuZGF0aW9uLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvZm9ybS1maWVsZC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mb3JtLWZpZWxkL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mb3JtLWZpZWxkL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2xpbmUtcmlwcGxlL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2xpbmUtcmlwcGxlL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9saW5lLXJpcHBsZS9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9ub3RjaGVkLW91dGxpbmUvY29uc3RhbnRzLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbm90Y2hlZC1vdXRsaW5lL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9ub3RjaGVkLW91dGxpbmUvY29tcG9uZW50LmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvcmlwcGxlL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3JpcHBsZS9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9yaXBwbGUvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3JpcHBsZS91dGlsLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbWVudS1zdXJmYWNlL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2xpc3QvY29uc3RhbnRzLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvZG9tL2tleWJvYXJkLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbGlzdC9ldmVudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9saXN0L3R5cGVhaGVhZC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2xpc3QvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21lbnUvY29uc3RhbnRzLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbGlzdC9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tZW51LXN1cmZhY2UvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL21lbnUtc3VyZmFjZS9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tZW51L2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9tZW51L2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3NlbGVjdC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9zZWxlY3QvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3NlbGVjdC9oZWxwZXItdGV4dC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9zZWxlY3QvaGVscGVyLXRleHQvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3NlbGVjdC9oZWxwZXItdGV4dC9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9zZWxlY3QvaWNvbi9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9zZWxlY3QvaWNvbi9mb3VuZGF0aW9uLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvc2VsZWN0L2ljb24vY29tcG9uZW50LmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvc2VsZWN0L2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3N3aXRjaC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9iYXNlL29ic2VydmVyLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvYmFzZS9vYnNlcnZlci1mb3VuZGF0aW9uLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvc3dpdGNoL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9zd2l0Y2gvY29tcG9uZW50LmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGV4dGZpZWxkL2NoYXJhY3Rlci1jb3VudGVyL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RleHRmaWVsZC9jaGFyYWN0ZXItY291bnRlci9mb3VuZGF0aW9uLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGV4dGZpZWxkL2NoYXJhY3Rlci1jb3VudGVyL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RleHRmaWVsZC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90ZXh0ZmllbGQvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RleHRmaWVsZC9oZWxwZXItdGV4dC9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90ZXh0ZmllbGQvaGVscGVyLXRleHQvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RleHRmaWVsZC9oZWxwZXItdGV4dC9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90ZXh0ZmllbGQvaWNvbi9jb25zdGFudHMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90ZXh0ZmllbGQvaWNvbi9mb3VuZGF0aW9uLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGV4dGZpZWxkL2ljb24vY29tcG9uZW50LmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGV4dGZpZWxkL2NvbXBvbmVudC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RvcC1hcHAtYmFyL2NvbnN0YW50cy5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RvcC1hcHAtYmFyL2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90b3AtYXBwLWJhci9zdGFuZGFyZC9mb3VuZGF0aW9uLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdG9wLWFwcC1iYXIvZml4ZWQvZm91bmRhdGlvbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RvcC1hcHAtYmFyL3Nob3J0L2ZvdW5kYXRpb24uanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90b3AtYXBwLWJhci9jb21wb25lbnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL2JhY2tvMi9pbmRleC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvYmFzZTY0LWFycmF5YnVmZmVyL2xpYi9iYXNlNjQtYXJyYXlidWZmZXIuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL2NvbXBvbmVudC1lbWl0dGVyL2luZGV4LmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC1pY29ucy9pY29uZm9udC9tYXRlcmlhbC1pY29ucy5jc3MiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL2Nzcy1sb2FkZXIvZGlzdC9ydW50aW1lL2FwaS5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9kZWJ1Zy9zcmMvYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvZGVidWcvc3JjL2NvbW1vbi5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvZ2xvYmFsVGhpcy5icm93c2VyLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi9pbmRleC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvc29ja2V0LmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1jbGllbnQvbGliL3RyYW5zcG9ydHMvcG9sbGluZy1qc29ucC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLXhoci5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdHJhbnNwb3J0cy9wb2xsaW5nLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3dlYnNvY2tldC1jb25zdHJ1Y3Rvci5icm93c2VyLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tY2xpZW50L2xpYi90cmFuc3BvcnRzL3dlYnNvY2tldC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIvdXRpbC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLWNsaWVudC9saWIveG1saHR0cHJlcXVlc3QuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2NvbW1vbnMuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL2VuZ2luZS5pby1wYXJzZXIvbGliL2RlY29kZVBhY2tldC5icm93c2VyLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9lbmdpbmUuaW8tcGFyc2VyL2xpYi9lbmNvZGVQYWNrZXQuYnJvd3Nlci5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvZW5naW5lLmlvLXBhcnNlci9saWIvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL2hhcy1jb3JzL2luZGV4LmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9saW5raWZ5anMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL2xpbmtpZnlqcy9saWIvbGlua2lmeS5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvbXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL3BhcnNlcXMvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL3BhcnNldXJpL2luZGV4LmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL2luZGV4LmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL21hbmFnZXIuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvb24uanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvYnVpbGQvc29ja2V0LmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9zb2NrZXQuaW8tY2xpZW50L2J1aWxkL3R5cGVkLWV2ZW50cy5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLWNsaWVudC9idWlsZC91cmwuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvZGlzdC9iaW5hcnkuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1wYXJzZXIvZGlzdC9pbmRleC5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvc29ja2V0LmlvLXBhcnNlci9kaXN0L2lzLWJpbmFyeS5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbmplY3RTdHlsZXNJbnRvU3R5bGVUYWcuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5zZXJ0QnlTZWxlY3Rvci5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlRG9tQVBJLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy9zdHlsZS1sb2FkZXIvZGlzdC9ydW50aW1lL3N0eWxlVGFnVHJhbnNmb3JtLmpzIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS8uL25vZGVfbW9kdWxlcy90c2xpYi90c2xpYi5lczYuanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL3Z1ZS9kaXN0L3Z1ZS5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMveWVhc3QvaW5kZXguanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vc3JjL21kYy12dWUtd3JhcHBlci5qcyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvd2VicGFjay9ib290c3RyYXAiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5L3dlYnBhY2svcnVudGltZS9jb21wYXQgZ2V0IGRlZmF1bHQgZXhwb3J0Iiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS93ZWJwYWNrL3J1bnRpbWUvZGVmaW5lIHByb3BlcnR5IGdldHRlcnMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5L3dlYnBhY2svcnVudGltZS9nbG9iYWwiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5L3dlYnBhY2svcnVudGltZS9oYXNPd25Qcm9wZXJ0eSBzaG9ydGhhbmQiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5L3dlYnBhY2svcnVudGltZS9wdWJsaWNQYXRoIiwid2VicGFjazovL2Rpc2NvcmQtZGlzcGxheS93ZWJwYWNrL3J1bnRpbWUvanNvbnAgY2h1bmsgbG9hZGluZyIsIndlYnBhY2s6Ly9kaXNjb3JkLWRpc3BsYXkvLi9ub2RlX21vZHVsZXMvbWF0ZXJpYWwtaWNvbnMvaWNvbmZvbnQvbWF0ZXJpYWwtaWNvbnMuY3NzPzdkYjQiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vbm9kZV9tb2R1bGVzL3NvY2tldC5pby1jbGllbnQvd3JhcHBlci5tanMiLCJ3ZWJwYWNrOi8vZGlzY29yZC1kaXNwbGF5Ly4vc3JjL2FwcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBjc3NQcm9wZXJ0eU5hbWVNYXAgPSB7XG4gICAgYW5pbWF0aW9uOiB7XG4gICAgICAgIHByZWZpeGVkOiAnLXdlYmtpdC1hbmltYXRpb24nLFxuICAgICAgICBzdGFuZGFyZDogJ2FuaW1hdGlvbicsXG4gICAgfSxcbiAgICB0cmFuc2Zvcm06IHtcbiAgICAgICAgcHJlZml4ZWQ6ICctd2Via2l0LXRyYW5zZm9ybScsXG4gICAgICAgIHN0YW5kYXJkOiAndHJhbnNmb3JtJyxcbiAgICB9LFxuICAgIHRyYW5zaXRpb246IHtcbiAgICAgICAgcHJlZml4ZWQ6ICctd2Via2l0LXRyYW5zaXRpb24nLFxuICAgICAgICBzdGFuZGFyZDogJ3RyYW5zaXRpb24nLFxuICAgIH0sXG59O1xudmFyIGpzRXZlbnRUeXBlTWFwID0ge1xuICAgIGFuaW1hdGlvbmVuZDoge1xuICAgICAgICBjc3NQcm9wZXJ0eTogJ2FuaW1hdGlvbicsXG4gICAgICAgIHByZWZpeGVkOiAnd2Via2l0QW5pbWF0aW9uRW5kJyxcbiAgICAgICAgc3RhbmRhcmQ6ICdhbmltYXRpb25lbmQnLFxuICAgIH0sXG4gICAgYW5pbWF0aW9uaXRlcmF0aW9uOiB7XG4gICAgICAgIGNzc1Byb3BlcnR5OiAnYW5pbWF0aW9uJyxcbiAgICAgICAgcHJlZml4ZWQ6ICd3ZWJraXRBbmltYXRpb25JdGVyYXRpb24nLFxuICAgICAgICBzdGFuZGFyZDogJ2FuaW1hdGlvbml0ZXJhdGlvbicsXG4gICAgfSxcbiAgICBhbmltYXRpb25zdGFydDoge1xuICAgICAgICBjc3NQcm9wZXJ0eTogJ2FuaW1hdGlvbicsXG4gICAgICAgIHByZWZpeGVkOiAnd2Via2l0QW5pbWF0aW9uU3RhcnQnLFxuICAgICAgICBzdGFuZGFyZDogJ2FuaW1hdGlvbnN0YXJ0JyxcbiAgICB9LFxuICAgIHRyYW5zaXRpb25lbmQ6IHtcbiAgICAgICAgY3NzUHJvcGVydHk6ICd0cmFuc2l0aW9uJyxcbiAgICAgICAgcHJlZml4ZWQ6ICd3ZWJraXRUcmFuc2l0aW9uRW5kJyxcbiAgICAgICAgc3RhbmRhcmQ6ICd0cmFuc2l0aW9uZW5kJyxcbiAgICB9LFxufTtcbmZ1bmN0aW9uIGlzV2luZG93KHdpbmRvd09iaikge1xuICAgIHJldHVybiBCb29sZWFuKHdpbmRvd09iai5kb2N1bWVudCkgJiYgdHlwZW9mIHdpbmRvd09iai5kb2N1bWVudC5jcmVhdGVFbGVtZW50ID09PSAnZnVuY3Rpb24nO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldENvcnJlY3RQcm9wZXJ0eU5hbWUod2luZG93T2JqLCBjc3NQcm9wZXJ0eSkge1xuICAgIGlmIChpc1dpbmRvdyh3aW5kb3dPYmopICYmIGNzc1Byb3BlcnR5IGluIGNzc1Byb3BlcnR5TmFtZU1hcCkge1xuICAgICAgICB2YXIgZWwgPSB3aW5kb3dPYmouZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHZhciBfYSA9IGNzc1Byb3BlcnR5TmFtZU1hcFtjc3NQcm9wZXJ0eV0sIHN0YW5kYXJkID0gX2Euc3RhbmRhcmQsIHByZWZpeGVkID0gX2EucHJlZml4ZWQ7XG4gICAgICAgIHZhciBpc1N0YW5kYXJkID0gc3RhbmRhcmQgaW4gZWwuc3R5bGU7XG4gICAgICAgIHJldHVybiBpc1N0YW5kYXJkID8gc3RhbmRhcmQgOiBwcmVmaXhlZDtcbiAgICB9XG4gICAgcmV0dXJuIGNzc1Byb3BlcnR5O1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldENvcnJlY3RFdmVudE5hbWUod2luZG93T2JqLCBldmVudFR5cGUpIHtcbiAgICBpZiAoaXNXaW5kb3cod2luZG93T2JqKSAmJiBldmVudFR5cGUgaW4ganNFdmVudFR5cGVNYXApIHtcbiAgICAgICAgdmFyIGVsID0gd2luZG93T2JqLmRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICB2YXIgX2EgPSBqc0V2ZW50VHlwZU1hcFtldmVudFR5cGVdLCBzdGFuZGFyZCA9IF9hLnN0YW5kYXJkLCBwcmVmaXhlZCA9IF9hLnByZWZpeGVkLCBjc3NQcm9wZXJ0eSA9IF9hLmNzc1Byb3BlcnR5O1xuICAgICAgICB2YXIgaXNTdGFuZGFyZCA9IGNzc1Byb3BlcnR5IGluIGVsLnN0eWxlO1xuICAgICAgICByZXR1cm4gaXNTdGFuZGFyZCA/IHN0YW5kYXJkIDogcHJlZml4ZWQ7XG4gICAgfVxuICAgIHJldHVybiBldmVudFR5cGU7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD11dGlsLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19yZWFkLCBfX3NwcmVhZEFycmF5IH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnLi9mb3VuZGF0aW9uJztcbnZhciBNRENDb21wb25lbnQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gTURDQ29tcG9uZW50KHJvb3QsIGZvdW5kYXRpb24pIHtcbiAgICAgICAgdmFyIGFyZ3MgPSBbXTtcbiAgICAgICAgZm9yICh2YXIgX2kgPSAyOyBfaSA8IGFyZ3VtZW50cy5sZW5ndGg7IF9pKyspIHtcbiAgICAgICAgICAgIGFyZ3NbX2kgLSAyXSA9IGFyZ3VtZW50c1tfaV07XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICAgICAgdGhpcy5pbml0aWFsaXplLmFwcGx5KHRoaXMsIF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZChhcmdzKSkpO1xuICAgICAgICAvLyBOb3RlIHRoYXQgd2UgaW5pdGlhbGl6ZSBmb3VuZGF0aW9uIGhlcmUgYW5kIG5vdCB3aXRoaW4gdGhlIGNvbnN0cnVjdG9yJ3NcbiAgICAgICAgLy8gZGVmYXVsdCBwYXJhbSBzbyB0aGF0IHRoaXMucm9vdCBpcyBkZWZpbmVkIGFuZCBjYW4gYmUgdXNlZCB3aXRoaW4gdGhlXG4gICAgICAgIC8vIGZvdW5kYXRpb24gY2xhc3MuXG4gICAgICAgIHRoaXMuZm91bmRhdGlvbiA9XG4gICAgICAgICAgICBmb3VuZGF0aW9uID09PSB1bmRlZmluZWQgPyB0aGlzLmdldERlZmF1bHRGb3VuZGF0aW9uKCkgOiBmb3VuZGF0aW9uO1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uaW5pdCgpO1xuICAgICAgICB0aGlzLmluaXRpYWxTeW5jV2l0aERPTSgpO1xuICAgIH1cbiAgICBNRENDb21wb25lbnQuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICAvLyBTdWJjbGFzc2VzIHdoaWNoIGV4dGVuZCBNRENCYXNlIHNob3VsZCBwcm92aWRlIGFuIGF0dGFjaFRvKCkgbWV0aG9kIHRoYXQgdGFrZXMgYSByb290IGVsZW1lbnQgYW5kXG4gICAgICAgIC8vIHJldHVybnMgYW4gaW5zdGFudGlhdGVkIGNvbXBvbmVudCB3aXRoIGl0cyByb290IHNldCB0byB0aGF0IGVsZW1lbnQuIEFsc28gbm90ZSB0aGF0IGluIHRoZSBjYXNlcyBvZlxuICAgICAgICAvLyBzdWJjbGFzc2VzLCBhbiBleHBsaWNpdCBmb3VuZGF0aW9uIGNsYXNzIHdpbGwgbm90IGhhdmUgdG8gYmUgcGFzc2VkIGluOyBpdCB3aWxsIHNpbXBseSBiZSBpbml0aWFsaXplZFxuICAgICAgICAvLyBmcm9tIGdldERlZmF1bHRGb3VuZGF0aW9uKCkuXG4gICAgICAgIHJldHVybiBuZXcgTURDQ29tcG9uZW50KHJvb3QsIG5ldyBNRENGb3VuZGF0aW9uKHt9KSk7XG4gICAgfTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogbWV0aG9kIHBhcmFtIG9ubHkgZXhpc3RzIGZvciB0eXBpbmcgcHVycG9zZXM7IGl0IGRvZXMgbm90IG5lZWQgdG8gYmUgdW5pdCB0ZXN0ZWQgKi9cbiAgICBNRENDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYXJncyA9IFtdO1xuICAgICAgICBmb3IgKHZhciBfaSA9IDA7IF9pIDwgYXJndW1lbnRzLmxlbmd0aDsgX2krKykge1xuICAgICAgICAgICAgX2FyZ3NbX2ldID0gYXJndW1lbnRzW19pXTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTdWJjbGFzc2VzIGNhbiBvdmVycmlkZSB0aGlzIHRvIGRvIGFueSBhZGRpdGlvbmFsIHNldHVwIHdvcmsgdGhhdCB3b3VsZCBiZSBjb25zaWRlcmVkIHBhcnQgb2YgYVxuICAgICAgICAvLyBcImNvbnN0cnVjdG9yXCIuIEVzc2VudGlhbGx5LCBpdCBpcyBhIGhvb2sgaW50byB0aGUgcGFyZW50IGNvbnN0cnVjdG9yIGJlZm9yZSB0aGUgZm91bmRhdGlvbiBpc1xuICAgICAgICAvLyBpbml0aWFsaXplZC4gQW55IGFkZGl0aW9uYWwgYXJndW1lbnRzIGJlc2lkZXMgcm9vdCBhbmQgZm91bmRhdGlvbiB3aWxsIGJlIHBhc3NlZCBpbiBoZXJlLlxuICAgIH07XG4gICAgTURDQ29tcG9uZW50LnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gU3ViY2xhc3NlcyBtdXN0IG92ZXJyaWRlIHRoaXMgbWV0aG9kIHRvIHJldHVybiBhIHByb3Blcmx5IGNvbmZpZ3VyZWQgZm91bmRhdGlvbiBjbGFzcyBmb3IgdGhlXG4gICAgICAgIC8vIGNvbXBvbmVudC5cbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdTdWJjbGFzc2VzIG11c3Qgb3ZlcnJpZGUgZ2V0RGVmYXVsdEZvdW5kYXRpb24gdG8gcmV0dXJuIGEgcHJvcGVybHkgY29uZmlndXJlZCAnICtcbiAgICAgICAgICAgICdmb3VuZGF0aW9uIGNsYXNzJyk7XG4gICAgfTtcbiAgICBNRENDb21wb25lbnQucHJvdG90eXBlLmluaXRpYWxTeW5jV2l0aERPTSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2QgaWYgdGhleSBuZWVkIHRvIHBlcmZvcm0gd29yayB0byBzeW5jaHJvbml6ZSB3aXRoIGEgaG9zdCBET01cbiAgICAgICAgLy8gb2JqZWN0LiBBbiBleGFtcGxlIG9mIHRoaXMgd291bGQgYmUgYSBmb3JtIGNvbnRyb2wgd3JhcHBlciB0aGF0IG5lZWRzIHRvIHN5bmNocm9uaXplIGl0cyBpbnRlcm5hbCBzdGF0ZVxuICAgICAgICAvLyB0byBzb21lIHByb3BlcnR5IG9yIGF0dHJpYnV0ZSBvZiB0aGUgaG9zdCBET00uIFBsZWFzZSBub3RlOiB0aGlzIGlzICpub3QqIHRoZSBwbGFjZSB0byBwZXJmb3JtIERPTVxuICAgICAgICAvLyByZWFkcy93cml0ZXMgdGhhdCB3b3VsZCBjYXVzZSBsYXlvdXQgLyBwYWludCwgYXMgdGhpcyBpcyBjYWxsZWQgc3luY2hyb25vdXNseSBmcm9tIHdpdGhpbiB0aGUgY29uc3RydWN0b3IuXG4gICAgfTtcbiAgICBNRENDb21wb25lbnQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFN1YmNsYXNzZXMgbWF5IGltcGxlbWVudCB0aGlzIG1ldGhvZCB0byByZWxlYXNlIGFueSByZXNvdXJjZXMgLyBkZXJlZ2lzdGVyIGFueSBsaXN0ZW5lcnMgdGhleSBoYXZlXG4gICAgICAgIC8vIGF0dGFjaGVkLiBBbiBleGFtcGxlIG9mIHRoaXMgbWlnaHQgYmUgZGVyZWdpc3RlcmluZyBhIHJlc2l6ZSBldmVudCBmcm9tIHRoZSB3aW5kb3cgb2JqZWN0LlxuICAgICAgICB0aGlzLmZvdW5kYXRpb24uZGVzdHJveSgpO1xuICAgIH07XG4gICAgTURDQ29tcG9uZW50LnByb3RvdHlwZS5saXN0ZW4gPSBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9O1xuICAgIE1EQ0NvbXBvbmVudC5wcm90b3R5cGUudW5saXN0ZW4gPSBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlciwgb3B0aW9ucykge1xuICAgICAgICB0aGlzLnJvb3QucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZpcmVzIGEgY3Jvc3MtYnJvd3Nlci1jb21wYXRpYmxlIGN1c3RvbSBldmVudCBmcm9tIHRoZSBjb21wb25lbnQgcm9vdCBvZiB0aGUgZ2l2ZW4gdHlwZSwgd2l0aCB0aGUgZ2l2ZW4gZGF0YS5cbiAgICAgKi9cbiAgICBNRENDb21wb25lbnQucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiAoZXZ0VHlwZSwgZXZ0RGF0YSwgc2hvdWxkQnViYmxlKSB7XG4gICAgICAgIGlmIChzaG91bGRCdWJibGUgPT09IHZvaWQgMCkgeyBzaG91bGRCdWJibGUgPSBmYWxzZTsgfVxuICAgICAgICB2YXIgZXZ0O1xuICAgICAgICBpZiAodHlwZW9mIEN1c3RvbUV2ZW50ID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgICBldnQgPSBuZXcgQ3VzdG9tRXZlbnQoZXZ0VHlwZSwge1xuICAgICAgICAgICAgICAgIGJ1YmJsZXM6IHNob3VsZEJ1YmJsZSxcbiAgICAgICAgICAgICAgICBkZXRhaWw6IGV2dERhdGEsXG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGV2dCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdDdXN0b21FdmVudCcpO1xuICAgICAgICAgICAgZXZ0LmluaXRDdXN0b21FdmVudChldnRUeXBlLCBzaG91bGRCdWJibGUsIGZhbHNlLCBldnREYXRhKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJvb3QuZGlzcGF0Y2hFdmVudChldnQpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ0NvbXBvbmVudDtcbn0oKSk7XG5leHBvcnQgeyBNRENDb21wb25lbnQgfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENDb21wb25lbnQ7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb25lbnQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgTURDRm91bmRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uICgpIHtcbiAgICBmdW5jdGlvbiBNRENGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgaWYgKGFkYXB0ZXIgPT09IHZvaWQgMCkgeyBhZGFwdGVyID0ge307IH1cbiAgICAgICAgdGhpcy5hZGFwdGVyID0gYWRhcHRlcjtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0ZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQ2xhc3NlcyBleHRlbmRpbmcgTURDRm91bmRhdGlvbiBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHRvIHJldHVybiBhbiBvYmplY3Qgd2hpY2ggZXhwb3J0cyBldmVyeVxuICAgICAgICAgICAgLy8gQ1NTIGNsYXNzIHRoZSBmb3VuZGF0aW9uIGNsYXNzIG5lZWRzIGFzIGEgcHJvcGVydHkuIGUuZy4ge0FDVElWRTogJ21kYy1jb21wb25lbnQtLWFjdGl2ZSd9XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDRm91bmRhdGlvbiwgXCJzdHJpbmdzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBDbGFzc2VzIGV4dGVuZGluZyBNRENGb3VuZGF0aW9uIHNob3VsZCBpbXBsZW1lbnQgdGhpcyBtZXRob2QgdG8gcmV0dXJuIGFuIG9iamVjdCB3aGljaCBleHBvcnRzIGFsbFxuICAgICAgICAgICAgLy8gc2VtYW50aWMgc3RyaW5ncyBhcyBjb25zdGFudHMuIGUuZy4ge0FSSUFfUk9MRTogJ3RhYmxpc3QnfVxuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0ZvdW5kYXRpb24sIFwibnVtYmVyc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQ2xhc3NlcyBleHRlbmRpbmcgTURDRm91bmRhdGlvbiBzaG91bGQgaW1wbGVtZW50IHRoaXMgbWV0aG9kIHRvIHJldHVybiBhbiBvYmplY3Qgd2hpY2ggZXhwb3J0cyBhbGxcbiAgICAgICAgICAgIC8vIG9mIGl0cyBzZW1hbnRpYyBudW1iZXJzIGFzIGNvbnN0YW50cy4gZS5nLiB7QU5JTUFUSU9OX0RFTEFZX01TOiAzNTB9XG4gICAgICAgICAgICByZXR1cm4ge307XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDRm91bmRhdGlvbiwgXCJkZWZhdWx0QWRhcHRlclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gQ2xhc3NlcyBleHRlbmRpbmcgTURDRm91bmRhdGlvbiBtYXkgY2hvb3NlIHRvIGltcGxlbWVudCB0aGlzIGdldHRlciBpbiBvcmRlciB0byBwcm92aWRlIGEgY29udmVuaWVudFxuICAgICAgICAgICAgLy8gd2F5IG9mIHZpZXdpbmcgdGhlIG5lY2Vzc2FyeSBtZXRob2RzIG9mIGFuIGFkYXB0ZXIuIEluIHRoZSBmdXR1cmUsIHRoaXMgY291bGQgYWxzbyBiZSB1c2VkIGZvciBhZGFwdGVyXG4gICAgICAgICAgICAvLyB2YWxpZGF0aW9uLlxuICAgICAgICAgICAgcmV0dXJuIHt9O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDRm91bmRhdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcGVyZm9ybSBpbml0aWFsaXphdGlvbiByb3V0aW5lcyAocmVnaXN0ZXJpbmcgZXZlbnRzLCBldGMuKVxuICAgIH07XG4gICAgTURDRm91bmRhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gU3ViY2xhc3NlcyBzaG91bGQgb3ZlcnJpZGUgdGhpcyBtZXRob2QgdG8gcGVyZm9ybSBkZS1pbml0aWFsaXphdGlvbiByb3V0aW5lcyAoZGUtcmVnaXN0ZXJpbmcgZXZlbnRzLCBldGMuKVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ0ZvdW5kYXRpb247XG59KCkpO1xuZXhwb3J0IHsgTURDRm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ0ZvdW5kYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3VuZGF0aW9uLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuZXhwb3J0IHZhciBjc3NDbGFzc2VzID0ge1xuICAgIEFOSU1fQ0hFQ0tFRF9JTkRFVEVSTUlOQVRFOiAnbWRjLWNoZWNrYm94LS1hbmltLWNoZWNrZWQtaW5kZXRlcm1pbmF0ZScsXG4gICAgQU5JTV9DSEVDS0VEX1VOQ0hFQ0tFRDogJ21kYy1jaGVja2JveC0tYW5pbS1jaGVja2VkLXVuY2hlY2tlZCcsXG4gICAgQU5JTV9JTkRFVEVSTUlOQVRFX0NIRUNLRUQ6ICdtZGMtY2hlY2tib3gtLWFuaW0taW5kZXRlcm1pbmF0ZS1jaGVja2VkJyxcbiAgICBBTklNX0lOREVURVJNSU5BVEVfVU5DSEVDS0VEOiAnbWRjLWNoZWNrYm94LS1hbmltLWluZGV0ZXJtaW5hdGUtdW5jaGVja2VkJyxcbiAgICBBTklNX1VOQ0hFQ0tFRF9DSEVDS0VEOiAnbWRjLWNoZWNrYm94LS1hbmltLXVuY2hlY2tlZC1jaGVja2VkJyxcbiAgICBBTklNX1VOQ0hFQ0tFRF9JTkRFVEVSTUlOQVRFOiAnbWRjLWNoZWNrYm94LS1hbmltLXVuY2hlY2tlZC1pbmRldGVybWluYXRlJyxcbiAgICBCQUNLR1JPVU5EOiAnbWRjLWNoZWNrYm94X19iYWNrZ3JvdW5kJyxcbiAgICBDSEVDS0VEOiAnbWRjLWNoZWNrYm94LS1jaGVja2VkJyxcbiAgICBDSEVDS01BUks6ICdtZGMtY2hlY2tib3hfX2NoZWNrbWFyaycsXG4gICAgQ0hFQ0tNQVJLX1BBVEg6ICdtZGMtY2hlY2tib3hfX2NoZWNrbWFyay1wYXRoJyxcbiAgICBESVNBQkxFRDogJ21kYy1jaGVja2JveC0tZGlzYWJsZWQnLFxuICAgIElOREVURVJNSU5BVEU6ICdtZGMtY2hlY2tib3gtLWluZGV0ZXJtaW5hdGUnLFxuICAgIE1JWEVETUFSSzogJ21kYy1jaGVja2JveF9fbWl4ZWRtYXJrJyxcbiAgICBOQVRJVkVfQ09OVFJPTDogJ21kYy1jaGVja2JveF9fbmF0aXZlLWNvbnRyb2wnLFxuICAgIFJPT1Q6ICdtZGMtY2hlY2tib3gnLFxuICAgIFNFTEVDVEVEOiAnbWRjLWNoZWNrYm94LS1zZWxlY3RlZCcsXG4gICAgVVBHUkFERUQ6ICdtZGMtY2hlY2tib3gtLXVwZ3JhZGVkJyxcbn07XG5leHBvcnQgdmFyIHN0cmluZ3MgPSB7XG4gICAgQVJJQV9DSEVDS0VEX0FUVFI6ICdhcmlhLWNoZWNrZWQnLFxuICAgIEFSSUFfQ0hFQ0tFRF9JTkRFVEVSTUlOQVRFX1ZBTFVFOiAnbWl4ZWQnLFxuICAgIERBVEFfSU5ERVRFUk1JTkFURV9BVFRSOiAnZGF0YS1pbmRldGVybWluYXRlJyxcbiAgICBOQVRJVkVfQ09OVFJPTF9TRUxFQ1RPUjogJy5tZGMtY2hlY2tib3hfX25hdGl2ZS1jb250cm9sJyxcbiAgICBUUkFOU0lUSU9OX1NUQVRFX0NIRUNLRUQ6ICdjaGVja2VkJyxcbiAgICBUUkFOU0lUSU9OX1NUQVRFX0lOREVURVJNSU5BVEU6ICdpbmRldGVybWluYXRlJyxcbiAgICBUUkFOU0lUSU9OX1NUQVRFX0lOSVQ6ICdpbml0JyxcbiAgICBUUkFOU0lUSU9OX1NUQVRFX1VOQ0hFQ0tFRDogJ3VuY2hlY2tlZCcsXG59O1xuZXhwb3J0IHZhciBudW1iZXJzID0ge1xuICAgIEFOSU1fRU5EX0xBVENIX01TOiAyNTAsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgY3NzQ2xhc3NlcywgbnVtYmVycywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBNRENDaGVja2JveEZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ0NoZWNrYm94Rm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENDaGVja2JveEZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDQ2hlY2tib3hGb3VuZGF0aW9uLmRlZmF1bHRBZGFwdGVyKSwgYWRhcHRlcikpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmN1cnJlbnRDaGVja1N0YXRlID0gc3RyaW5ncy5UUkFOU0lUSU9OX1NUQVRFX0lOSVQ7XG4gICAgICAgIF90aGlzLmN1cnJlbnRBbmltYXRpb25DbGFzcyA9ICcnO1xuICAgICAgICBfdGhpcy5hbmltRW5kTGF0Y2hUaW1lciA9IDA7XG4gICAgICAgIF90aGlzLmVuYWJsZUFuaW1hdGlvbkVuZEhhbmRsZXIgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDQ2hlY2tib3hGb3VuZGF0aW9uLCBcImNzc0NsYXNzZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0NoZWNrYm94Rm91bmRhdGlvbiwgXCJzdHJpbmdzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENDaGVja2JveEZvdW5kYXRpb24sIFwibnVtYmVyc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDQ2hlY2tib3hGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZm9yY2VMYXlvdXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBoYXNOYXRpdmVDb250cm9sOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBpc0F0dGFjaGVkVG9ET006IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIGlzQ2hlY2tlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgaXNJbmRldGVybWluYXRlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZU5hdGl2ZUNvbnRyb2xBdHRyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgc2V0TmF0aXZlQ29udHJvbEF0dHI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBzZXROYXRpdmVDb250cm9sRGlzYWJsZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENDaGVja2JveEZvdW5kYXRpb24ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuY3VycmVudENoZWNrU3RhdGUgPSB0aGlzLmRldGVybWluZUNoZWNrU3RhdGUoKTtcbiAgICAgICAgdGhpcy51cGRhdGVBcmlhQ2hlY2tlZCgpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5VUEdSQURFRCk7XG4gICAgfTtcbiAgICBNRENDaGVja2JveEZvdW5kYXRpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmFuaW1FbmRMYXRjaFRpbWVyKTtcbiAgICB9O1xuICAgIE1EQ0NoZWNrYm94Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0RGlzYWJsZWQgPSBmdW5jdGlvbiAoZGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldE5hdGl2ZUNvbnRyb2xEaXNhYmxlZChkaXNhYmxlZCk7XG4gICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKGNzc0NsYXNzZXMuRElTQUJMRUQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuRElTQUJMRUQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHRoZSBhbmltYXRpb25lbmQgZXZlbnQgZm9yIHRoZSBjaGVja2JveFxuICAgICAqL1xuICAgIE1EQ0NoZWNrYm94Rm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlQW5pbWF0aW9uRW5kID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAoIXRoaXMuZW5hYmxlQW5pbWF0aW9uRW5kSGFuZGxlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmFuaW1FbmRMYXRjaFRpbWVyKTtcbiAgICAgICAgdGhpcy5hbmltRW5kTGF0Y2hUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhfdGhpcy5jdXJyZW50QW5pbWF0aW9uQ2xhc3MpO1xuICAgICAgICAgICAgX3RoaXMuZW5hYmxlQW5pbWF0aW9uRW5kSGFuZGxlciA9IGZhbHNlO1xuICAgICAgICB9LCBudW1iZXJzLkFOSU1fRU5EX0xBVENIX01TKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdGhlIGNoYW5nZSBldmVudCBmb3IgdGhlIGNoZWNrYm94XG4gICAgICovXG4gICAgTURDQ2hlY2tib3hGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudHJhbnNpdGlvbkNoZWNrU3RhdGUoKTtcbiAgICB9O1xuICAgIE1EQ0NoZWNrYm94Rm91bmRhdGlvbi5wcm90b3R5cGUudHJhbnNpdGlvbkNoZWNrU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICghdGhpcy5hZGFwdGVyLmhhc05hdGl2ZUNvbnRyb2woKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBvbGRTdGF0ZSA9IHRoaXMuY3VycmVudENoZWNrU3RhdGU7XG4gICAgICAgIHZhciBuZXdTdGF0ZSA9IHRoaXMuZGV0ZXJtaW5lQ2hlY2tTdGF0ZSgpO1xuICAgICAgICBpZiAob2xkU3RhdGUgPT09IG5ld1N0YXRlKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy51cGRhdGVBcmlhQ2hlY2tlZCgpO1xuICAgICAgICB2YXIgVFJBTlNJVElPTl9TVEFURV9VTkNIRUNLRUQgPSBzdHJpbmdzLlRSQU5TSVRJT05fU1RBVEVfVU5DSEVDS0VEO1xuICAgICAgICB2YXIgU0VMRUNURUQgPSBjc3NDbGFzc2VzLlNFTEVDVEVEO1xuICAgICAgICBpZiAobmV3U3RhdGUgPT09IFRSQU5TSVRJT05fU1RBVEVfVU5DSEVDS0VEKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoU0VMRUNURUQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKFNFTEVDVEVEKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGVjayB0byBlbnN1cmUgdGhhdCB0aGVyZSBpc24ndCBhIHByZXZpb3VzbHkgZXhpc3RpbmcgYW5pbWF0aW9uIGNsYXNzLCBpbiBjYXNlIGZvciBleGFtcGxlXG4gICAgICAgIC8vIHRoZSB1c2VyIGludGVyYWN0ZWQgd2l0aCB0aGUgY2hlY2tib3ggYmVmb3JlIHRoZSBhbmltYXRpb24gd2FzIGZpbmlzaGVkLlxuICAgICAgICBpZiAodGhpcy5jdXJyZW50QW5pbWF0aW9uQ2xhc3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYW5pbUVuZExhdGNoVGltZXIpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmZvcmNlTGF5b3V0KCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3ModGhpcy5jdXJyZW50QW5pbWF0aW9uQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbkNsYXNzID1cbiAgICAgICAgICAgIHRoaXMuZ2V0VHJhbnNpdGlvbkFuaW1hdGlvbkNsYXNzKG9sZFN0YXRlLCBuZXdTdGF0ZSk7XG4gICAgICAgIHRoaXMuY3VycmVudENoZWNrU3RhdGUgPSBuZXdTdGF0ZTtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHBhcmVudE5vZGUgc28gdGhhdCBhbmltYXRpb25zIGFyZSBvbmx5IHJ1biB3aGVuIHRoZSBlbGVtZW50IGlzIGF0dGFjaGVkXG4gICAgICAgIC8vIHRvIHRoZSBET00uXG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNBdHRhY2hlZFRvRE9NKCkgJiZcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEFuaW1hdGlvbkNsYXNzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyh0aGlzLmN1cnJlbnRBbmltYXRpb25DbGFzcyk7XG4gICAgICAgICAgICB0aGlzLmVuYWJsZUFuaW1hdGlvbkVuZEhhbmRsZXIgPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENDaGVja2JveEZvdW5kYXRpb24ucHJvdG90eXBlLmRldGVybWluZUNoZWNrU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBUUkFOU0lUSU9OX1NUQVRFX0lOREVURVJNSU5BVEUgPSBzdHJpbmdzLlRSQU5TSVRJT05fU1RBVEVfSU5ERVRFUk1JTkFURSwgVFJBTlNJVElPTl9TVEFURV9DSEVDS0VEID0gc3RyaW5ncy5UUkFOU0lUSU9OX1NUQVRFX0NIRUNLRUQsIFRSQU5TSVRJT05fU1RBVEVfVU5DSEVDS0VEID0gc3RyaW5ncy5UUkFOU0lUSU9OX1NUQVRFX1VOQ0hFQ0tFRDtcbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlci5pc0luZGV0ZXJtaW5hdGUoKSkge1xuICAgICAgICAgICAgcmV0dXJuIFRSQU5TSVRJT05fU1RBVEVfSU5ERVRFUk1JTkFURTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmlzQ2hlY2tlZCgpID8gVFJBTlNJVElPTl9TVEFURV9DSEVDS0VEIDpcbiAgICAgICAgICAgIFRSQU5TSVRJT05fU1RBVEVfVU5DSEVDS0VEO1xuICAgIH07XG4gICAgTURDQ2hlY2tib3hGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRUcmFuc2l0aW9uQW5pbWF0aW9uQ2xhc3MgPSBmdW5jdGlvbiAob2xkU3RhdGUsIG5ld1N0YXRlKSB7XG4gICAgICAgIHZhciBUUkFOU0lUSU9OX1NUQVRFX0lOSVQgPSBzdHJpbmdzLlRSQU5TSVRJT05fU1RBVEVfSU5JVCwgVFJBTlNJVElPTl9TVEFURV9DSEVDS0VEID0gc3RyaW5ncy5UUkFOU0lUSU9OX1NUQVRFX0NIRUNLRUQsIFRSQU5TSVRJT05fU1RBVEVfVU5DSEVDS0VEID0gc3RyaW5ncy5UUkFOU0lUSU9OX1NUQVRFX1VOQ0hFQ0tFRDtcbiAgICAgICAgdmFyIF9hID0gTURDQ2hlY2tib3hGb3VuZGF0aW9uLmNzc0NsYXNzZXMsIEFOSU1fVU5DSEVDS0VEX0NIRUNLRUQgPSBfYS5BTklNX1VOQ0hFQ0tFRF9DSEVDS0VELCBBTklNX1VOQ0hFQ0tFRF9JTkRFVEVSTUlOQVRFID0gX2EuQU5JTV9VTkNIRUNLRURfSU5ERVRFUk1JTkFURSwgQU5JTV9DSEVDS0VEX1VOQ0hFQ0tFRCA9IF9hLkFOSU1fQ0hFQ0tFRF9VTkNIRUNLRUQsIEFOSU1fQ0hFQ0tFRF9JTkRFVEVSTUlOQVRFID0gX2EuQU5JTV9DSEVDS0VEX0lOREVURVJNSU5BVEUsIEFOSU1fSU5ERVRFUk1JTkFURV9DSEVDS0VEID0gX2EuQU5JTV9JTkRFVEVSTUlOQVRFX0NIRUNLRUQsIEFOSU1fSU5ERVRFUk1JTkFURV9VTkNIRUNLRUQgPSBfYS5BTklNX0lOREVURVJNSU5BVEVfVU5DSEVDS0VEO1xuICAgICAgICBzd2l0Y2ggKG9sZFN0YXRlKSB7XG4gICAgICAgICAgICBjYXNlIFRSQU5TSVRJT05fU1RBVEVfSU5JVDpcbiAgICAgICAgICAgICAgICBpZiAobmV3U3RhdGUgPT09IFRSQU5TSVRJT05fU1RBVEVfVU5DSEVDS0VEKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1N0YXRlID09PSBUUkFOU0lUSU9OX1NUQVRFX0NIRUNLRUQgPyBBTklNX0lOREVURVJNSU5BVEVfQ0hFQ0tFRCA6IEFOSU1fSU5ERVRFUk1JTkFURV9VTkNIRUNLRUQ7XG4gICAgICAgICAgICBjYXNlIFRSQU5TSVRJT05fU1RBVEVfVU5DSEVDS0VEOlxuICAgICAgICAgICAgICAgIHJldHVybiBuZXdTdGF0ZSA9PT0gVFJBTlNJVElPTl9TVEFURV9DSEVDS0VEID8gQU5JTV9VTkNIRUNLRURfQ0hFQ0tFRCA6IEFOSU1fVU5DSEVDS0VEX0lOREVURVJNSU5BVEU7XG4gICAgICAgICAgICBjYXNlIFRSQU5TSVRJT05fU1RBVEVfQ0hFQ0tFRDpcbiAgICAgICAgICAgICAgICByZXR1cm4gbmV3U3RhdGUgPT09IFRSQU5TSVRJT05fU1RBVEVfVU5DSEVDS0VEID8gQU5JTV9DSEVDS0VEX1VOQ0hFQ0tFRCA6IEFOSU1fQ0hFQ0tFRF9JTkRFVEVSTUlOQVRFO1xuICAgICAgICAgICAgZGVmYXVsdDogLy8gVFJBTlNJVElPTl9TVEFURV9JTkRFVEVSTUlOQVRFXG4gICAgICAgICAgICAgICAgcmV0dXJuIG5ld1N0YXRlID09PSBUUkFOU0lUSU9OX1NUQVRFX0NIRUNLRUQgPyBBTklNX0lOREVURVJNSU5BVEVfQ0hFQ0tFRCA6IEFOSU1fSU5ERVRFUk1JTkFURV9VTkNIRUNLRUQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ0NoZWNrYm94Rm91bmRhdGlvbi5wcm90b3R5cGUudXBkYXRlQXJpYUNoZWNrZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIEVuc3VyZSBhcmlhLWNoZWNrZWQgaXMgc2V0IHRvIG1peGVkIGlmIGNoZWNrYm94IGlzIGluIGluZGV0ZXJtaW5hdGUgc3RhdGUuXG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNJbmRldGVybWluYXRlKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXROYXRpdmVDb250cm9sQXR0cihzdHJpbmdzLkFSSUFfQ0hFQ0tFRF9BVFRSLCBzdHJpbmdzLkFSSUFfQ0hFQ0tFRF9JTkRFVEVSTUlOQVRFX1ZBTFVFKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIFRoZSBvbi9vZmYgc3RhdGUgZG9lcyBub3QgbmVlZCB0byBrZWVwIHRyYWNrIG9mIGFyaWEtY2hlY2tlZCwgc2luY2VcbiAgICAgICAgICAgIC8vIHRoZSBzY3JlZW5yZWFkZXIgdXNlcyB0aGUgY2hlY2tlZCBwcm9wZXJ0eSBvbiB0aGUgY2hlY2tib3ggZWxlbWVudC5cbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVOYXRpdmVDb250cm9sQXR0cihzdHJpbmdzLkFSSUFfQ0hFQ0tFRF9BVFRSKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ0NoZWNrYm94Rm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDQ2hlY2tib3hGb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDQ2hlY2tib3hGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBnZXRDb3JyZWN0RXZlbnROYW1lIH0gZnJvbSAnQG1hdGVyaWFsL2FuaW1hdGlvbi91dGlsJztcbmltcG9ydCB7IE1EQ0NvbXBvbmVudCB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBhcHBseVBhc3NpdmUgfSBmcm9tICdAbWF0ZXJpYWwvZG9tL2V2ZW50cyc7XG5pbXBvcnQgeyBtYXRjaGVzIH0gZnJvbSAnQG1hdGVyaWFsL2RvbS9wb255ZmlsbCc7XG5pbXBvcnQgeyBNRENSaXBwbGUgfSBmcm9tICdAbWF0ZXJpYWwvcmlwcGxlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBNRENSaXBwbGVGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL3JpcHBsZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7IHN0cmluZ3MgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBNRENDaGVja2JveEZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xudmFyIENCX1BST1RPX1BST1BTID0gWydjaGVja2VkJywgJ2luZGV0ZXJtaW5hdGUnXTtcbnZhciBNRENDaGVja2JveCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDQ2hlY2tib3gsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDQ2hlY2tib3goKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5yaXBwbGVTdXJmYWNlID0gX3RoaXMuY3JlYXRlUmlwcGxlKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgTURDQ2hlY2tib3guYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICByZXR1cm4gbmV3IE1EQ0NoZWNrYm94KHJvb3QpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0NoZWNrYm94LnByb3RvdHlwZSwgXCJyaXBwbGVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnJpcHBsZVN1cmZhY2U7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDQ2hlY2tib3gucHJvdG90eXBlLCBcImNoZWNrZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE5hdGl2ZUNvbnRyb2woKS5jaGVja2VkO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjaGVja2VkKSB7XG4gICAgICAgICAgICB0aGlzLmdldE5hdGl2ZUNvbnRyb2woKS5jaGVja2VkID0gY2hlY2tlZDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENDaGVja2JveC5wcm90b3R5cGUsIFwiaW5kZXRlcm1pbmF0ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TmF0aXZlQ29udHJvbCgpLmluZGV0ZXJtaW5hdGU7XG4gICAgICAgIH0sXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGluZGV0ZXJtaW5hdGUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0TmF0aXZlQ29udHJvbCgpLmluZGV0ZXJtaW5hdGUgPSBpbmRldGVybWluYXRlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0NoZWNrYm94LnByb3RvdHlwZSwgXCJkaXNhYmxlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZ2V0TmF0aXZlQ29udHJvbCgpLmRpc2FibGVkO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldERpc2FibGVkKGRpc2FibGVkKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENDaGVja2JveC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldE5hdGl2ZUNvbnRyb2woKS52YWx1ZTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZ2V0TmF0aXZlQ29udHJvbCgpLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENDaGVja2JveC5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIERBVEFfSU5ERVRFUk1JTkFURV9BVFRSID0gc3RyaW5ncy5EQVRBX0lOREVURVJNSU5BVEVfQVRUUjtcbiAgICAgICAgdGhpcy5nZXROYXRpdmVDb250cm9sKCkuaW5kZXRlcm1pbmF0ZSA9XG4gICAgICAgICAgICB0aGlzLmdldE5hdGl2ZUNvbnRyb2woKS5nZXRBdHRyaWJ1dGUoREFUQV9JTkRFVEVSTUlOQVRFX0FUVFIpID09PVxuICAgICAgICAgICAgICAgICd0cnVlJztcbiAgICAgICAgdGhpcy5nZXROYXRpdmVDb250cm9sKCkucmVtb3ZlQXR0cmlidXRlKERBVEFfSU5ERVRFUk1JTkFURV9BVFRSKTtcbiAgICB9O1xuICAgIE1EQ0NoZWNrYm94LnByb3RvdHlwZS5pbml0aWFsU3luY1dpdGhET00gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuZm91bmRhdGlvbi5oYW5kbGVDaGFuZ2UoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVBbmltYXRpb25FbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5mb3VuZGF0aW9uLmhhbmRsZUFuaW1hdGlvbkVuZCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmdldE5hdGl2ZUNvbnRyb2woKS5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCB0aGlzLmhhbmRsZUNoYW5nZSk7XG4gICAgICAgIHRoaXMubGlzdGVuKGdldENvcnJlY3RFdmVudE5hbWUod2luZG93LCAnYW5pbWF0aW9uZW5kJyksIHRoaXMuaGFuZGxlQW5pbWF0aW9uRW5kKTtcbiAgICAgICAgdGhpcy5pbnN0YWxsUHJvcGVydHlDaGFuZ2VIb29rcygpO1xuICAgIH07XG4gICAgTURDQ2hlY2tib3gucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmlwcGxlU3VyZmFjZS5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMuZ2V0TmF0aXZlQ29udHJvbCgpLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIHRoaXMuaGFuZGxlQ2hhbmdlKTtcbiAgICAgICAgdGhpcy51bmxpc3RlbihnZXRDb3JyZWN0RXZlbnROYW1lKHdpbmRvdywgJ2FuaW1hdGlvbmVuZCcpLCB0aGlzLmhhbmRsZUFuaW1hdGlvbkVuZCk7XG4gICAgICAgIHRoaXMudW5pbnN0YWxsUHJvcGVydHlDaGFuZ2VIb29rcygpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1EQ0NoZWNrYm94LnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IHtcbiAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIGZvcmNlTGF5b3V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5yb290Lm9mZnNldFdpZHRoOyB9LFxuICAgICAgICAgICAgaGFzTmF0aXZlQ29udHJvbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gISFfdGhpcy5nZXROYXRpdmVDb250cm9sKCk7IH0sXG4gICAgICAgICAgICBpc0F0dGFjaGVkVG9ET006IGZ1bmN0aW9uICgpIHsgcmV0dXJuIEJvb2xlYW4oX3RoaXMucm9vdC5wYXJlbnROb2RlKTsgfSxcbiAgICAgICAgICAgIGlzQ2hlY2tlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuY2hlY2tlZDsgfSxcbiAgICAgICAgICAgIGlzSW5kZXRlcm1pbmF0ZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuaW5kZXRlcm1pbmF0ZTsgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlTmF0aXZlQ29udHJvbEF0dHI6IGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZ2V0TmF0aXZlQ29udHJvbCgpLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXROYXRpdmVDb250cm9sQXR0cjogZnVuY3Rpb24gKGF0dHIsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZ2V0TmF0aXZlQ29udHJvbCgpLnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0TmF0aXZlQ29udHJvbERpc2FibGVkOiBmdW5jdGlvbiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5nZXROYXRpdmVDb250cm9sKCkuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgTURDQ2hlY2tib3hGb3VuZGF0aW9uKGFkYXB0ZXIpO1xuICAgIH07XG4gICAgTURDQ2hlY2tib3gucHJvdG90eXBlLmNyZWF0ZVJpcHBsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENSaXBwbGUuY3JlYXRlQWRhcHRlcih0aGlzKSksIHsgZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5nZXROYXRpdmVDb250cm9sKCkucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgICAgICB9LCBpc1N1cmZhY2VBY3RpdmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hdGNoZXMoX3RoaXMuZ2V0TmF0aXZlQ29udHJvbCgpLCAnOmFjdGl2ZScpOyB9LCBpc1VuYm91bmRlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdHJ1ZTsgfSwgcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZ2V0TmF0aXZlQ29udHJvbCgpLmFkZEV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlciwgYXBwbHlQYXNzaXZlKCkpO1xuICAgICAgICAgICAgfSB9KTtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENSaXBwbGUodGhpcy5yb290LCBuZXcgTURDUmlwcGxlRm91bmRhdGlvbihhZGFwdGVyKSk7XG4gICAgfTtcbiAgICBNRENDaGVja2JveC5wcm90b3R5cGUuaW5zdGFsbFByb3BlcnR5Q2hhbmdlSG9va3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgbmF0aXZlQ2IgPSB0aGlzLmdldE5hdGl2ZUNvbnRyb2woKTtcbiAgICAgICAgdmFyIGNiUHJvdG8gPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YobmF0aXZlQ2IpO1xuICAgICAgICB2YXIgX2xvb3BfMSA9IGZ1bmN0aW9uIChjb250cm9sU3RhdGUpIHtcbiAgICAgICAgICAgIHZhciBkZXNjID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihjYlByb3RvLCBjb250cm9sU3RhdGUpO1xuICAgICAgICAgICAgLy8gV2UgaGF2ZSB0byBjaGVjayBmb3IgdGhpcyBkZXNjcmlwdG9yLCBzaW5jZSBzb21lIGJyb3dzZXJzIChTYWZhcmkpIGRvbid0IHN1cHBvcnQgaXRzIHJldHVybi5cbiAgICAgICAgICAgIC8vIFNlZTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTQ5NzM5XG4gICAgICAgICAgICBpZiAoIXZhbGlkRGVzY3JpcHRvcihkZXNjKSkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHZhbHVlOiB2b2lkIDAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIFR5cGUgY2FzdCBpcyBuZWVkZWQgZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBDbG9zdXJlIENvbXBpbGVyLlxuICAgICAgICAgICAgdmFyIG5hdGl2ZUdldHRlciA9IGRlc2MuZ2V0O1xuICAgICAgICAgICAgdmFyIG5hdGl2ZUNiRGVzYyA9IHtcbiAgICAgICAgICAgICAgICBjb25maWd1cmFibGU6IGRlc2MuY29uZmlndXJhYmxlLFxuICAgICAgICAgICAgICAgIGVudW1lcmFibGU6IGRlc2MuZW51bWVyYWJsZSxcbiAgICAgICAgICAgICAgICBnZXQ6IG5hdGl2ZUdldHRlcixcbiAgICAgICAgICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzdGF0ZSkge1xuICAgICAgICAgICAgICAgICAgICBkZXNjLnNldC5jYWxsKG5hdGl2ZUNiLCBzdGF0ZSk7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmZvdW5kYXRpb24uaGFuZGxlQ2hhbmdlKCk7XG4gICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobmF0aXZlQ2IsIGNvbnRyb2xTdGF0ZSwgbmF0aXZlQ2JEZXNjKTtcbiAgICAgICAgfTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIENCX1BST1RPX1BST1BTXzEgPSBfX3ZhbHVlcyhDQl9QUk9UT19QUk9QUyksIENCX1BST1RPX1BST1BTXzFfMSA9IENCX1BST1RPX1BST1BTXzEubmV4dCgpOyAhQ0JfUFJPVE9fUFJPUFNfMV8xLmRvbmU7IENCX1BST1RPX1BST1BTXzFfMSA9IENCX1BST1RPX1BST1BTXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xTdGF0ZSA9IENCX1BST1RPX1BST1BTXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgc3RhdGVfMSA9IF9sb29wXzEoY29udHJvbFN0YXRlKTtcbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIHN0YXRlXzEgPT09IFwib2JqZWN0XCIpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBzdGF0ZV8xLnZhbHVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoQ0JfUFJPVE9fUFJPUFNfMV8xICYmICFDQl9QUk9UT19QUk9QU18xXzEuZG9uZSAmJiAoX2EgPSBDQl9QUk9UT19QUk9QU18xLnJldHVybikpIF9hLmNhbGwoQ0JfUFJPVE9fUFJPUFNfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ0NoZWNrYm94LnByb3RvdHlwZS51bmluc3RhbGxQcm9wZXJ0eUNoYW5nZUhvb2tzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8yLCBfYTtcbiAgICAgICAgdmFyIG5hdGl2ZUNiID0gdGhpcy5nZXROYXRpdmVDb250cm9sKCk7XG4gICAgICAgIHZhciBjYlByb3RvID0gT2JqZWN0LmdldFByb3RvdHlwZU9mKG5hdGl2ZUNiKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIENCX1BST1RPX1BST1BTXzIgPSBfX3ZhbHVlcyhDQl9QUk9UT19QUk9QUyksIENCX1BST1RPX1BST1BTXzJfMSA9IENCX1BST1RPX1BST1BTXzIubmV4dCgpOyAhQ0JfUFJPVE9fUFJPUFNfMl8xLmRvbmU7IENCX1BST1RPX1BST1BTXzJfMSA9IENCX1BST1RPX1BST1BTXzIubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGNvbnRyb2xTdGF0ZSA9IENCX1BST1RPX1BST1BTXzJfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgZGVzYyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoY2JQcm90bywgY29udHJvbFN0YXRlKTtcbiAgICAgICAgICAgICAgICBpZiAoIXZhbGlkRGVzY3JpcHRvcihkZXNjKSkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuYXRpdmVDYiwgY29udHJvbFN0YXRlLCBkZXNjKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKENCX1BST1RPX1BST1BTXzJfMSAmJiAhQ0JfUFJPVE9fUFJPUFNfMl8xLmRvbmUgJiYgKF9hID0gQ0JfUFJPVE9fUFJPUFNfMi5yZXR1cm4pKSBfYS5jYWxsKENCX1BST1RPX1BST1BTXzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENDaGVja2JveC5wcm90b3R5cGUuZ2V0TmF0aXZlQ29udHJvbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIE5BVElWRV9DT05UUk9MX1NFTEVDVE9SID0gc3RyaW5ncy5OQVRJVkVfQ09OVFJPTF9TRUxFQ1RPUjtcbiAgICAgICAgdmFyIGVsID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3IoTkFUSVZFX0NPTlRST0xfU0VMRUNUT1IpO1xuICAgICAgICBpZiAoIWVsKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJDaGVja2JveCBjb21wb25lbnQgcmVxdWlyZXMgYSBcIiArIE5BVElWRV9DT05UUk9MX1NFTEVDVE9SICsgXCIgZWxlbWVudFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZWw7XG4gICAgfTtcbiAgICByZXR1cm4gTURDQ2hlY2tib3g7XG59KE1EQ0NvbXBvbmVudCkpO1xuZXhwb3J0IHsgTURDQ2hlY2tib3ggfTtcbmZ1bmN0aW9uIHZhbGlkRGVzY3JpcHRvcihpbnB1dFByb3BEZXNjKSB7XG4gICAgcmV0dXJuICEhaW5wdXRQcm9wRGVzYyAmJiB0eXBlb2YgaW5wdXRQcm9wRGVzYy5zZXQgPT09ICdmdW5jdGlvbic7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb25lbnQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBBbmltYXRpb25GcmFtZSB9IGZyb20gJ0BtYXRlcmlhbC9hbmltYXRpb24vYW5pbWF0aW9uZnJhbWUnO1xuaW1wb3J0IHsgTURDRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgY3NzQ2xhc3NlcywgbnVtYmVycywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBBbmltYXRpb25LZXlzO1xuKGZ1bmN0aW9uIChBbmltYXRpb25LZXlzKSB7XG4gICAgQW5pbWF0aW9uS2V5c1tcIlBPTExfU0NST0xMX1BPU1wiXSA9IFwicG9sbF9zY3JvbGxfcG9zaXRpb25cIjtcbiAgICBBbmltYXRpb25LZXlzW1wiUE9MTF9MQVlPVVRfQ0hBTkdFXCJdID0gXCJwb2xsX2xheW91dF9jaGFuZ2VcIjtcbn0pKEFuaW1hdGlvbktleXMgfHwgKEFuaW1hdGlvbktleXMgPSB7fSkpO1xudmFyIE1EQ0RpYWxvZ0ZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ0RpYWxvZ0ZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDRGlhbG9nRm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENEaWFsb2dGb3VuZGF0aW9uLmRlZmF1bHRBZGFwdGVyKSwgYWRhcHRlcikpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmRpYWxvZ09wZW4gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNGdWxsc2NyZWVuID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmFuaW1hdGlvbkZyYW1lID0gMDtcbiAgICAgICAgX3RoaXMuYW5pbWF0aW9uVGltZXIgPSAwO1xuICAgICAgICBfdGhpcy5lc2NhcGVLZXlBY3Rpb24gPSBzdHJpbmdzLkNMT1NFX0FDVElPTjtcbiAgICAgICAgX3RoaXMuc2NyaW1DbGlja0FjdGlvbiA9IHN0cmluZ3MuQ0xPU0VfQUNUSU9OO1xuICAgICAgICBfdGhpcy5hdXRvU3RhY2tCdXR0b25zID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuYXJlQnV0dG9uc1N0YWNrZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuc3VwcHJlc3NEZWZhdWx0UHJlc3NTZWxlY3RvciA9IHN0cmluZ3MuU1VQUFJFU1NfREVGQVVMVF9QUkVTU19TRUxFQ1RPUjtcbiAgICAgICAgX3RoaXMuYW5pbUZyYW1lID0gbmV3IEFuaW1hdGlvbkZyYW1lKCk7XG4gICAgICAgIF90aGlzLmNvbnRlbnRTY3JvbGxIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlU2Nyb2xsRXZlbnQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMud2luZG93UmVzaXplSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmxheW91dCgpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy53aW5kb3dPcmllbnRhdGlvbkNoYW5nZUhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5sYXlvdXQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDRGlhbG9nRm91bmRhdGlvbiwgXCJjc3NDbGFzc2VzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3NzQ2xhc3NlcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENEaWFsb2dGb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0RpYWxvZ0ZvdW5kYXRpb24sIFwibnVtYmVyc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDRGlhbG9nRm91bmRhdGlvbiwgXCJkZWZhdWx0QWRhcHRlclwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhZGRCb2R5Q2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGFyZUJ1dHRvbnNTdGFja2VkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBjbGlja0RlZmF1bHRCdXR0b246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBldmVudFRhcmdldE1hdGNoZXM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIGdldEFjdGlvbkZyb21FdmVudDogZnVuY3Rpb24gKCkgeyByZXR1cm4gJyc7IH0sXG4gICAgICAgICAgICAgICAgZ2V0SW5pdGlhbEZvY3VzRWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgICAgICAgICAgaGFzQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIGlzQ29udGVudFNjcm9sbGFibGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIG5vdGlmeUNsb3NlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIG5vdGlmeUNsb3Npbmc6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBub3RpZnlPcGVuZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBub3RpZnlPcGVuaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVsZWFzZUZvY3VzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQm9keUNsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZXZlcnNlQnV0dG9uczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHRyYXBGb2N1czogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyQ29udGVudEV2ZW50SGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGRlcmVnaXN0ZXJDb250ZW50RXZlbnRIYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgaXNTY3JvbGxhYmxlQ29udGVudEF0VG9wOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBpc1Njcm9sbGFibGVDb250ZW50QXRCb3R0b206IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyV2luZG93RXZlbnRIYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZGVyZWdpc3RlcldpbmRvd0V2ZW50SGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaGFzQ2xhc3MoY3NzQ2xhc3Nlcy5TVEFDS0VEKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRBdXRvU3RhY2tCdXR0b25zKGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmlzRnVsbHNjcmVlbiA9IHRoaXMuYWRhcHRlci5oYXNDbGFzcyhjc3NDbGFzc2VzLkZVTExTQ1JFRU4pO1xuICAgIH07XG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYW5pbWF0aW9uVGltZXIpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmFuaW1hdGlvblRpbWVyKTtcbiAgICAgICAgICAgIHRoaXMuaGFuZGxlQW5pbWF0aW9uVGltZXJFbmQoKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5pc0Z1bGxzY3JlZW4pIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVyQ29udGVudEV2ZW50SGFuZGxlcignc2Nyb2xsJywgdGhpcy5jb250ZW50U2Nyb2xsSGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hbmltRnJhbWUuY2FuY2VsQWxsKCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVyV2luZG93RXZlbnRIYW5kbGVyKCdyZXNpemUnLCB0aGlzLndpbmRvd1Jlc2l6ZUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlcldpbmRvd0V2ZW50SGFuZGxlcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLndpbmRvd09yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgfTtcbiAgICBNRENEaWFsb2dGb3VuZGF0aW9uLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKGRpYWxvZ09wdGlvbnMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5kaWFsb2dPcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLm5vdGlmeU9wZW5pbmcoKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKGNzc0NsYXNzZXMuT1BFTklORyk7XG4gICAgICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbikge1xuICAgICAgICAgICAgLy8gQSBzY3JvbGwgZXZlbnQgbGlzdGVuZXIgaXMgcmVnaXN0ZXJlZCBldmVuIGlmIHRoZSBkaWFsb2cgaXMgbm90XG4gICAgICAgICAgICAvLyBzY3JvbGxhYmxlIG9uIG9wZW4sIHNpbmNlIHRoZSB3aW5kb3cgcmVzaXplIGV2ZW50LCBvciBvcmllbnRhdGlvblxuICAgICAgICAgICAgLy8gY2hhbmdlIG1heSBtYWtlIHRoZSBkaWFsb2cgc2Nyb2xsYWJsZSBhZnRlciBpdCBpcyBvcGVuZWQuXG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJDb250ZW50RXZlbnRIYW5kbGVyKCdzY3JvbGwnLCB0aGlzLmNvbnRlbnRTY3JvbGxIYW5kbGVyKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlhbG9nT3B0aW9ucyAmJiBkaWFsb2dPcHRpb25zLmlzQWJvdmVGdWxsc2NyZWVuRGlhbG9nKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5TQ1JJTV9ISURERU4pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZWdpc3RlcldpbmRvd0V2ZW50SGFuZGxlcigncmVzaXplJywgdGhpcy53aW5kb3dSZXNpemVIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlZ2lzdGVyV2luZG93RXZlbnRIYW5kbGVyKCdvcmllbnRhdGlvbmNoYW5nZScsIHRoaXMud2luZG93T3JpZW50YXRpb25DaGFuZ2VIYW5kbGVyKTtcbiAgICAgICAgLy8gV2FpdCBhIGZyYW1lIG9uY2UgZGlzcGxheSBpcyBubyBsb25nZXIgXCJub25lXCIsIHRvIGVzdGFibGlzaCBiYXNpcyBmb3JcbiAgICAgICAgLy8gYW5pbWF0aW9uXG4gICAgICAgIHRoaXMucnVuTmV4dEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5PUEVOKTtcbiAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIuYWRkQm9keUNsYXNzKGNzc0NsYXNzZXMuU0NST0xMX0xPQ0spO1xuICAgICAgICAgICAgX3RoaXMubGF5b3V0KCk7XG4gICAgICAgICAgICBfdGhpcy5hbmltYXRpb25UaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmhhbmRsZUFuaW1hdGlvblRpbWVyRW5kKCk7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlci50cmFwRm9jdXMoX3RoaXMuYWRhcHRlci5nZXRJbml0aWFsRm9jdXNFbCgpKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGFwdGVyLm5vdGlmeU9wZW5lZCgpO1xuICAgICAgICAgICAgfSwgbnVtYmVycy5ESUFMT0dfQU5JTUFUSU9OX09QRU5fVElNRV9NUyk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUuY2xvc2UgPSBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChhY3Rpb24gPT09IHZvaWQgMCkgeyBhY3Rpb24gPSAnJzsgfVxuICAgICAgICBpZiAoIXRoaXMuZGlhbG9nT3Blbikge1xuICAgICAgICAgICAgLy8gQXZvaWQgcmVkdW5kYW50IGNsb3NlIGNhbGxzIChhbmQgZXZlbnRzKSwgZS5nLiBmcm9tIGtleWRvd24gb24gZWxlbWVudHNcbiAgICAgICAgICAgIC8vIHRoYXQgaW5oZXJlbnRseSBlbWl0IGNsaWNrXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5kaWFsb2dPcGVuID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYWRhcHRlci5ub3RpZnlDbG9zaW5nKGFjdGlvbik7XG4gICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjc3NDbGFzc2VzLkNMT1NJTkcpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoY3NzQ2xhc3Nlcy5PUEVOKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUJvZHlDbGFzcyhjc3NDbGFzc2VzLlNDUk9MTF9MT0NLKTtcbiAgICAgICAgaWYgKHRoaXMuaXNGdWxsc2NyZWVuKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlckNvbnRlbnRFdmVudEhhbmRsZXIoJ3Njcm9sbCcsIHRoaXMuY29udGVudFNjcm9sbEhhbmRsZXIpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVyV2luZG93RXZlbnRIYW5kbGVyKCdyZXNpemUnLCB0aGlzLndpbmRvd1Jlc2l6ZUhhbmRsZXIpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlcldpbmRvd0V2ZW50SGFuZGxlcignb3JpZW50YXRpb25jaGFuZ2UnLCB0aGlzLndpbmRvd09yaWVudGF0aW9uQ2hhbmdlSGFuZGxlcik7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWUpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lID0gMDtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYW5pbWF0aW9uVGltZXIpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvblRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGFwdGVyLnJlbGVhc2VGb2N1cygpO1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlQW5pbWF0aW9uVGltZXJFbmQoKTtcbiAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIubm90aWZ5Q2xvc2VkKGFjdGlvbik7XG4gICAgICAgIH0sIG51bWJlcnMuRElBTE9HX0FOSU1BVElPTl9DTE9TRV9USU1FX01TKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVzZWQgb25seSBpbiBpbnN0YW5jZXMgb2Ygc2hvd2luZyBhIHNlY29uZGFyeSBkaWFsb2cgb3ZlciBhIGZ1bGwtc2NyZWVuXG4gICAgICogZGlhbG9nLiBTaG93cyB0aGUgXCJzdXJmYWNlIHNjcmltXCIgZGlzcGxheWVkIG92ZXIgdGhlIGZ1bGwtc2NyZWVuIGRpYWxvZy5cbiAgICAgKi9cbiAgICBNRENEaWFsb2dGb3VuZGF0aW9uLnByb3RvdHlwZS5zaG93U3VyZmFjZVNjcmltID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5TVVJGQUNFX1NDUklNX1NIT1dJTkcpO1xuICAgICAgICB0aGlzLnJ1bk5leHRBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGFwdGVyLmFkZENsYXNzKGNzc0NsYXNzZXMuU1VSRkFDRV9TQ1JJTV9TSE9XTik7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXNlZCBvbmx5IGluIGluc3RhbmNlcyBvZiBzaG93aW5nIGEgc2Vjb25kYXJ5IGRpYWxvZyBvdmVyIGEgZnVsbC1zY3JlZW5cbiAgICAgKiBkaWFsb2cuIEhpZGVzIHRoZSBcInN1cmZhY2Ugc2NyaW1cIiBkaXNwbGF5ZWQgb3ZlciB0aGUgZnVsbC1zY3JlZW4gZGlhbG9nLlxuICAgICAqL1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLmhpZGVTdXJmYWNlU2NyaW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhjc3NDbGFzc2VzLlNVUkZBQ0VfU0NSSU1fU0hPV04pO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5TVVJGQUNFX1NDUklNX0hJRElORyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGB0cmFuc2l0aW9uZW5kYCBldmVudCB0cmlnZ2VyZWQgd2hlbiBzdXJmYWNlIHNjcmltIGFuaW1hdGlvbiBpc1xuICAgICAqIGZpbmlzaGVkLlxuICAgICAqL1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZVN1cmZhY2VTY3JpbVRyYW5zaXRpb25FbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhjc3NDbGFzc2VzLlNVUkZBQ0VfU0NSSU1fSElESU5HKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuU1VSRkFDRV9TQ1JJTV9TSE9XSU5HKTtcbiAgICB9O1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLmlzT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZGlhbG9nT3BlbjtcbiAgICB9O1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLmdldEVzY2FwZUtleUFjdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuZXNjYXBlS2V5QWN0aW9uO1xuICAgIH07XG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0RXNjYXBlS2V5QWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB0aGlzLmVzY2FwZUtleUFjdGlvbiA9IGFjdGlvbjtcbiAgICB9O1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLmdldFNjcmltQ2xpY2tBY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNjcmltQ2xpY2tBY3Rpb247XG4gICAgfTtcbiAgICBNRENEaWFsb2dGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRTY3JpbUNsaWNrQWN0aW9uID0gZnVuY3Rpb24gKGFjdGlvbikge1xuICAgICAgICB0aGlzLnNjcmltQ2xpY2tBY3Rpb24gPSBhY3Rpb247XG4gICAgfTtcbiAgICBNRENEaWFsb2dGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRBdXRvU3RhY2tCdXR0b25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hdXRvU3RhY2tCdXR0b25zO1xuICAgIH07XG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0QXV0b1N0YWNrQnV0dG9ucyA9IGZ1bmN0aW9uIChhdXRvU3RhY2spIHtcbiAgICAgICAgdGhpcy5hdXRvU3RhY2tCdXR0b25zID0gYXV0b1N0YWNrO1xuICAgIH07XG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0U3VwcHJlc3NEZWZhdWx0UHJlc3NTZWxlY3RvciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuc3VwcHJlc3NEZWZhdWx0UHJlc3NTZWxlY3RvcjtcbiAgICB9O1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLnNldFN1cHByZXNzRGVmYXVsdFByZXNzU2VsZWN0b3IgPSBmdW5jdGlvbiAoc2VsZWN0b3IpIHtcbiAgICAgICAgdGhpcy5zdXBwcmVzc0RlZmF1bHRQcmVzc1NlbGVjdG9yID0gc2VsZWN0b3I7XG4gICAgfTtcbiAgICBNRENEaWFsb2dGb3VuZGF0aW9uLnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuYW5pbUZyYW1lLnJlcXVlc3QoQW5pbWF0aW9uS2V5cy5QT0xMX0xBWU9VVF9DSEFOR0UsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmxheW91dEludGVybmFsKCk7XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgLyoqIEhhbmRsZXMgY2xpY2sgb24gdGhlIGRpYWxvZyByb290IGVsZW1lbnQuICovXG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBpc1NjcmltID0gdGhpcy5hZGFwdGVyLmV2ZW50VGFyZ2V0TWF0Y2hlcyhldnQudGFyZ2V0LCBzdHJpbmdzLlNDUklNX1NFTEVDVE9SKTtcbiAgICAgICAgLy8gQ2hlY2sgZm9yIHNjcmltIGNsaWNrIGZpcnN0IHNpbmNlIGl0IGRvZXNuJ3QgcmVxdWlyZSBxdWVyeWluZyBhbmNlc3RvcnMuXG4gICAgICAgIGlmIChpc1NjcmltICYmIHRoaXMuc2NyaW1DbGlja0FjdGlvbiAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5zY3JpbUNsaWNrQWN0aW9uKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHZhciBhY3Rpb24gPSB0aGlzLmFkYXB0ZXIuZ2V0QWN0aW9uRnJvbUV2ZW50KGV2dCk7XG4gICAgICAgICAgICBpZiAoYWN0aW9uKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jbG9zZShhY3Rpb24pO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogSGFuZGxlcyBrZXlkb3duIG9uIHRoZSBkaWFsb2cgcm9vdCBlbGVtZW50LiAqL1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZUtleWRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBpc0VudGVyID0gZXZ0LmtleSA9PT0gJ0VudGVyJyB8fCBldnQua2V5Q29kZSA9PT0gMTM7XG4gICAgICAgIGlmICghaXNFbnRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBhY3Rpb24gPSB0aGlzLmFkYXB0ZXIuZ2V0QWN0aW9uRnJvbUV2ZW50KGV2dCk7XG4gICAgICAgIGlmIChhY3Rpb24pIHtcbiAgICAgICAgICAgIC8vIEFjdGlvbiBidXR0b24gY2FsbGJhY2sgaXMgaGFuZGxlZCBpbiBgaGFuZGxlQ2xpY2tgLFxuICAgICAgICAgICAgLy8gc2luY2Ugc3BhY2UvZW50ZXIga2V5ZG93bnMgb24gYnV0dG9ucyB0cmlnZ2VyIGNsaWNrIGV2ZW50cy5cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBgY29tcG9zZWRQYXRoYCBpcyB1c2VkIGhlcmUsIHdoZW4gYXZhaWxhYmxlLCB0byBhY2NvdW50IGZvciB1c2UgY2FzZXNcbiAgICAgICAgLy8gd2hlcmUgYSB0YXJnZXQgbWVhbnQgdG8gc3VwcHJlc3MgdGhlIGRlZmF1bHQgcHJlc3MgYmVoYXZpb3VyXG4gICAgICAgIC8vIG1heSBleGlzdCBpbiBhIHNoYWRvdyByb290LlxuICAgICAgICAvLyBGb3IgZXhhbXBsZSwgYSB0ZXh0YXJlYSBpbnNpZGUgYSB3ZWIgY29tcG9uZW50OlxuICAgICAgICAvLyA8bXdjLWRpYWxvZz5cbiAgICAgICAgLy8gICA8aG9yaXpvbnRhbC1sYXlvdXQ+XG4gICAgICAgIC8vICAgICAjc2hhZG93LXJvb3QgKG9wZW4pXG4gICAgICAgIC8vICAgICAgIDxtd2MtdGV4dGFyZWE+XG4gICAgICAgIC8vICAgICAgICAgI3NoYWRvdy1yb290IChvcGVuKVxuICAgICAgICAvLyAgICAgICAgICAgPHRleHRhcmVhPjwvdGV4dGFyZWE+XG4gICAgICAgIC8vICAgICAgIDwvbXdjLXRleHRhcmVhPlxuICAgICAgICAvLyAgIDwvaG9yaXpvbnRhbC1sYXlvdXQ+XG4gICAgICAgIC8vIDwvbXdjLWRpYWxvZz5cbiAgICAgICAgdmFyIHRhcmdldCA9IGV2dC5jb21wb3NlZFBhdGggPyBldnQuY29tcG9zZWRQYXRoKClbMF0gOiBldnQudGFyZ2V0O1xuICAgICAgICB2YXIgaXNEZWZhdWx0ID0gdGhpcy5zdXBwcmVzc0RlZmF1bHRQcmVzc1NlbGVjdG9yID9cbiAgICAgICAgICAgICF0aGlzLmFkYXB0ZXIuZXZlbnRUYXJnZXRNYXRjaGVzKHRhcmdldCwgdGhpcy5zdXBwcmVzc0RlZmF1bHRQcmVzc1NlbGVjdG9yKSA6XG4gICAgICAgICAgICB0cnVlO1xuICAgICAgICBpZiAoaXNFbnRlciAmJiBpc0RlZmF1bHQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5jbGlja0RlZmF1bHRCdXR0b24oKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqIEhhbmRsZXMga2V5ZG93biBvbiB0aGUgZG9jdW1lbnQuICovXG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlRG9jdW1lbnRLZXlkb3duID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICB2YXIgaXNFc2NhcGUgPSBldnQua2V5ID09PSAnRXNjYXBlJyB8fCBldnQua2V5Q29kZSA9PT0gMjc7XG4gICAgICAgIGlmIChpc0VzY2FwZSAmJiB0aGlzLmVzY2FwZUtleUFjdGlvbiAhPT0gJycpIHtcbiAgICAgICAgICAgIHRoaXMuY2xvc2UodGhpcy5lc2NhcGVLZXlBY3Rpb24pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHNjcm9sbCBldmVudCBvbiB0aGUgZGlhbG9nJ3MgY29udGVudCBlbGVtZW50IC0tIHNob3dpbmcgYSBzY3JvbGxcbiAgICAgKiBkaXZpZGVyIG9uIHRoZSBoZWFkZXIgb3IgZm9vdGVyIGJhc2VkIG9uIHRoZSBzY3JvbGwgcG9zaXRpb24uIFRoaXMgaGFuZGxlclxuICAgICAqIHNob3VsZCBvbmx5IGJlIHJlZ2lzdGVyZWQgb24gZnVsbC1zY3JlZW4gZGlhbG9ncyB3aXRoIHNjcm9sbGFibGUgY29udGVudC5cbiAgICAgKi9cbiAgICBNRENEaWFsb2dGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVTY3JvbGxFdmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gU2luY2Ugc2Nyb2xsIGV2ZW50cyBjYW4gZmlyZSBhdCBhIGhpZ2ggcmF0ZSwgd2UgdGhyb3R0bGUgdGhlc2UgZXZlbnRzIGJ5XG4gICAgICAgIC8vIHVzaW5nIHJlcXVlc3RBbmltYXRpb25GcmFtZS5cbiAgICAgICAgdGhpcy5hbmltRnJhbWUucmVxdWVzdChBbmltYXRpb25LZXlzLlBPTExfU0NST0xMX1BPUywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMudG9nZ2xlU2Nyb2xsRGl2aWRlckhlYWRlcigpO1xuICAgICAgICAgICAgX3RoaXMudG9nZ2xlU2Nyb2xsRGl2aWRlckZvb3RlcigpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLmxheW91dEludGVybmFsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5hdXRvU3RhY2tCdXR0b25zKSB7XG4gICAgICAgICAgICB0aGlzLmRldGVjdFN0YWNrZWRCdXR0b25zKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy50b2dnbGVTY3JvbGxhYmxlQ2xhc3NlcygpO1xuICAgIH07XG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlQW5pbWF0aW9uVGltZXJFbmQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYW5pbWF0aW9uVGltZXIgPSAwO1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoY3NzQ2xhc3Nlcy5PUEVOSU5HKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuQ0xPU0lORyk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSdW5zIHRoZSBnaXZlbiBsb2dpYyBvbiB0aGUgbmV4dCBhbmltYXRpb24gZnJhbWUsIHVzaW5nIHNldFRpbWVvdXQgdG9cbiAgICAgKiBmYWN0b3IgaW4gRmlyZWZveCByZWZsb3cgYmVoYXZpb3IuXG4gICAgICovXG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUucnVuTmV4dEFuaW1hdGlvbkZyYW1lID0gZnVuY3Rpb24gKGNhbGxiYWNrKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGNhbmNlbEFuaW1hdGlvbkZyYW1lKHRoaXMuYW5pbWF0aW9uRnJhbWUpO1xuICAgICAgICB0aGlzLmFuaW1hdGlvbkZyYW1lID0gcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmFuaW1hdGlvbkZyYW1lID0gMDtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dChfdGhpcy5hbmltYXRpb25UaW1lcik7XG4gICAgICAgICAgICBfdGhpcy5hbmltYXRpb25UaW1lciA9IHNldFRpbWVvdXQoY2FsbGJhY2ssIDApO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLmRldGVjdFN0YWNrZWRCdXR0b25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGNsYXNzIGZpcnN0IHRvIGxldCB1cyBtZWFzdXJlIHRoZSBidXR0b25zJyBuYXR1cmFsIHBvc2l0aW9ucy5cbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuU1RBQ0tFRCk7XG4gICAgICAgIHZhciBhcmVCdXR0b25zU3RhY2tlZCA9IHRoaXMuYWRhcHRlci5hcmVCdXR0b25zU3RhY2tlZCgpO1xuICAgICAgICBpZiAoYXJlQnV0dG9uc1N0YWNrZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjc3NDbGFzc2VzLlNUQUNLRUQpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChhcmVCdXR0b25zU3RhY2tlZCAhPT0gdGhpcy5hcmVCdXR0b25zU3RhY2tlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJldmVyc2VCdXR0b25zKCk7XG4gICAgICAgICAgICB0aGlzLmFyZUJ1dHRvbnNTdGFja2VkID0gYXJlQnV0dG9uc1N0YWNrZWQ7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ0RpYWxvZ0ZvdW5kYXRpb24ucHJvdG90eXBlLnRvZ2dsZVNjcm9sbGFibGVDbGFzc2VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAvLyBSZW1vdmUgdGhlIGNsYXNzIGZpcnN0IHRvIGxldCB1cyBtZWFzdXJlIHRoZSBuYXR1cmFsIGhlaWdodCBvZiB0aGVcbiAgICAgICAgLy8gY29udGVudC5cbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuU0NST0xMQUJMRSk7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNDb250ZW50U2Nyb2xsYWJsZSgpKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5TQ1JPTExBQkxFKTtcbiAgICAgICAgICAgIGlmICh0aGlzLmlzRnVsbHNjcmVlbikge1xuICAgICAgICAgICAgICAgIC8vIElmIGRpYWxvZyBpcyBmdWxsLXNjcmVlbiBhbmQgc2Nyb2xsYWJsZSwgY2hlY2sgaWYgYSBzY3JvbGwgZGl2aWRlclxuICAgICAgICAgICAgICAgIC8vIHNob3VsZCBiZSBzaG93bi5cbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVNjcm9sbERpdmlkZXJIZWFkZXIoKTtcbiAgICAgICAgICAgICAgICB0aGlzLnRvZ2dsZVNjcm9sbERpdmlkZXJGb290ZXIoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUudG9nZ2xlU2Nyb2xsRGl2aWRlckhlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFkYXB0ZXIuaXNTY3JvbGxhYmxlQ29udGVudEF0VG9wKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjc3NDbGFzc2VzLlNDUk9MTF9ESVZJREVSX0hFQURFUik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hZGFwdGVyLmhhc0NsYXNzKGNzc0NsYXNzZXMuU0NST0xMX0RJVklERVJfSEVBREVSKSkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuU0NST0xMX0RJVklERVJfSEVBREVSKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDRGlhbG9nRm91bmRhdGlvbi5wcm90b3R5cGUudG9nZ2xlU2Nyb2xsRGl2aWRlckZvb3RlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKCF0aGlzLmFkYXB0ZXIuaXNTY3JvbGxhYmxlQ29udGVudEF0Qm90dG9tKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjc3NDbGFzc2VzLlNDUk9MTF9ESVZJREVSX0ZPT1RFUik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAodGhpcy5hZGFwdGVyLmhhc0NsYXNzKGNzc0NsYXNzZXMuU0NST0xMX0RJVklERVJfRk9PVEVSKSkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuU0NST0xMX0RJVklERVJfRk9PVEVSKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ0RpYWxvZ0ZvdW5kYXRpb247XG59KE1EQ0ZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ0RpYWxvZ0ZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENEaWFsb2dGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBGT0NVU19TRU5USU5FTF9DTEFTUyA9ICdtZGMtZG9tLWZvY3VzLXNlbnRpbmVsJztcbi8qKlxuICogVXRpbGl0eSB0byB0cmFwIGZvY3VzIGluIGEgZ2l2ZW4gcm9vdCBlbGVtZW50LCBlLmcuIGZvciBtb2RhbCBjb21wb25lbnRzIHN1Y2hcbiAqIGFzIGRpYWxvZ3MuIFRoZSByb290IHNob3VsZCBoYXZlIGF0IGxlYXN0IG9uZSBmb2N1c2FibGUgY2hpbGQgZWxlbWVudCxcbiAqIGZvciBzZXR0aW5nIGluaXRpYWwgZm9jdXMgd2hlbiB0cmFwcGluZyBmb2N1cy5cbiAqIEFsc28gdHJhY2tzIHRoZSBwcmV2aW91c2x5IGZvY3VzZWQgZWxlbWVudCwgYW5kIHJlc3RvcmVzIGZvY3VzIHRvIHRoYXRcbiAqIGVsZW1lbnQgd2hlbiByZWxlYXNpbmcgZm9jdXMuXG4gKi9cbnZhciBGb2N1c1RyYXAgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gRm9jdXNUcmFwKHJvb3QsIG9wdGlvbnMpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMgPT09IHZvaWQgMCkgeyBvcHRpb25zID0ge307IH1cbiAgICAgICAgdGhpcy5yb290ID0gcm9vdDtcbiAgICAgICAgdGhpcy5vcHRpb25zID0gb3B0aW9ucztcbiAgICAgICAgLy8gUHJldmlvdXNseSBmb2N1c2VkIGVsZW1lbnQgYmVmb3JlIHRyYXBwaW5nIGZvY3VzLlxuICAgICAgICB0aGlzLmVsRm9jdXNlZEJlZm9yZVRyYXBGb2N1cyA9IG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFRyYXBzIGZvY3VzIGluIGByb290YC4gQWxzbyBmb2N1c2VzIG9uIGVpdGhlciBgaW5pdGlhbEZvY3VzRWxgIGlmIHNldDtcbiAgICAgKiBvdGhlcndpc2VzIHNldHMgaW5pdGlhbCBmb2N1cyB0byB0aGUgZmlyc3QgZm9jdXNhYmxlIGNoaWxkIGVsZW1lbnQuXG4gICAgICovXG4gICAgRm9jdXNUcmFwLnByb3RvdHlwZS50cmFwRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBmb2N1c2FibGVFbHMgPSB0aGlzLmdldEZvY3VzYWJsZUVsZW1lbnRzKHRoaXMucm9vdCk7XG4gICAgICAgIGlmIChmb2N1c2FibGVFbHMubGVuZ3RoID09PSAwKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ0ZvY3VzVHJhcDogRWxlbWVudCBtdXN0IGhhdmUgYXQgbGVhc3Qgb25lIGZvY3VzYWJsZSBjaGlsZC4nKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmVsRm9jdXNlZEJlZm9yZVRyYXBGb2N1cyA9XG4gICAgICAgICAgICBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgPyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IDpcbiAgICAgICAgICAgICAgICBudWxsO1xuICAgICAgICB0aGlzLndyYXBUYWJGb2N1cyh0aGlzLnJvb3QpO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5za2lwSW5pdGlhbEZvY3VzKSB7XG4gICAgICAgICAgICB0aGlzLmZvY3VzSW5pdGlhbEVsZW1lbnQoZm9jdXNhYmxlRWxzLCB0aGlzLm9wdGlvbnMuaW5pdGlhbEZvY3VzRWwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZWxlYXNlcyBmb2N1cyBmcm9tIGByb290YC4gQWxzbyByZXN0b3JlcyBmb2N1cyB0byB0aGUgcHJldmlvdXNseSBmb2N1c2VkXG4gICAgICogZWxlbWVudC5cbiAgICAgKi9cbiAgICBGb2N1c1RyYXAucHJvdG90eXBlLnJlbGVhc2VGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgW10uc2xpY2UuY2FsbCh0aGlzLnJvb3QucXVlcnlTZWxlY3RvckFsbChcIi5cIiArIEZPQ1VTX1NFTlRJTkVMX0NMQVNTKSlcbiAgICAgICAgICAgIC5mb3JFYWNoKGZ1bmN0aW9uIChzZW50aW5lbEVsKSB7XG4gICAgICAgICAgICBzZW50aW5lbEVsLnBhcmVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoc2VudGluZWxFbCk7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoIXRoaXMub3B0aW9ucy5za2lwUmVzdG9yZUZvY3VzICYmIHRoaXMuZWxGb2N1c2VkQmVmb3JlVHJhcEZvY3VzKSB7XG4gICAgICAgICAgICB0aGlzLmVsRm9jdXNlZEJlZm9yZVRyYXBGb2N1cy5mb2N1cygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBXcmFwcyB0YWIgZm9jdXMgd2l0aGluIGBlbGAgYnkgYWRkaW5nIHR3byBoaWRkZW4gc2VudGluZWwgZGl2cyB3aGljaCBhcmVcbiAgICAgKiB1c2VkIHRvIG1hcmsgdGhlIGJlZ2lubmluZyBhbmQgdGhlIGVuZCBvZiB0aGUgdGFiYmFibGUgcmVnaW9uLiBXaGVuXG4gICAgICogZm9jdXNlZCwgdGhlc2Ugc2VudGluZWwgZWxlbWVudHMgcmVkaXJlY3QgZm9jdXMgdG8gdGhlIGZpcnN0L2xhc3RcbiAgICAgKiBjaGlsZHJlbiBlbGVtZW50cyBvZiB0aGUgdGFiYmFibGUgcmVnaW9uLCBlbnN1cmluZyB0aGF0IGZvY3VzIGlzIHRyYXBwZWRcbiAgICAgKiB3aXRoaW4gdGhhdCByZWdpb24uXG4gICAgICovXG4gICAgRm9jdXNUcmFwLnByb3RvdHlwZS53cmFwVGFiRm9jdXMgPSBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIHNlbnRpbmVsU3RhcnQgPSB0aGlzLmNyZWF0ZVNlbnRpbmVsKCk7XG4gICAgICAgIHZhciBzZW50aW5lbEVuZCA9IHRoaXMuY3JlYXRlU2VudGluZWwoKTtcbiAgICAgICAgc2VudGluZWxTdGFydC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBmb2N1c2FibGVFbHMgPSBfdGhpcy5nZXRGb2N1c2FibGVFbGVtZW50cyhlbCk7XG4gICAgICAgICAgICBpZiAoZm9jdXNhYmxlRWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb2N1c2FibGVFbHNbZm9jdXNhYmxlRWxzLmxlbmd0aCAtIDFdLmZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBzZW50aW5lbEVuZC5hZGRFdmVudExpc3RlbmVyKCdmb2N1cycsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHZhciBmb2N1c2FibGVFbHMgPSBfdGhpcy5nZXRGb2N1c2FibGVFbGVtZW50cyhlbCk7XG4gICAgICAgICAgICBpZiAoZm9jdXNhYmxlRWxzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICBmb2N1c2FibGVFbHNbMF0uZm9jdXMoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGVsLmluc2VydEJlZm9yZShzZW50aW5lbFN0YXJ0LCBlbC5jaGlsZHJlblswXSk7XG4gICAgICAgIGVsLmFwcGVuZENoaWxkKHNlbnRpbmVsRW5kKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZvY3VzZXMgb24gYGluaXRpYWxGb2N1c0VsYCBpZiBkZWZpbmVkIGFuZCBhIGNoaWxkIG9mIHRoZSByb290IGVsZW1lbnQuXG4gICAgICogT3RoZXJ3aXNlLCBmb2N1c2VzIG9uIHRoZSBmaXJzdCBmb2N1c2FibGUgY2hpbGQgZWxlbWVudCBvZiB0aGUgcm9vdC5cbiAgICAgKi9cbiAgICBGb2N1c1RyYXAucHJvdG90eXBlLmZvY3VzSW5pdGlhbEVsZW1lbnQgPSBmdW5jdGlvbiAoZm9jdXNhYmxlRWxzLCBpbml0aWFsRm9jdXNFbCkge1xuICAgICAgICB2YXIgZm9jdXNJbmRleCA9IDA7XG4gICAgICAgIGlmIChpbml0aWFsRm9jdXNFbCkge1xuICAgICAgICAgICAgZm9jdXNJbmRleCA9IE1hdGgubWF4KGZvY3VzYWJsZUVscy5pbmRleE9mKGluaXRpYWxGb2N1c0VsKSwgMCk7XG4gICAgICAgIH1cbiAgICAgICAgZm9jdXNhYmxlRWxzW2ZvY3VzSW5kZXhdLmZvY3VzKCk7XG4gICAgfTtcbiAgICBGb2N1c1RyYXAucHJvdG90eXBlLmdldEZvY3VzYWJsZUVsZW1lbnRzID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgdmFyIGZvY3VzYWJsZUVscyA9IFtdLnNsaWNlLmNhbGwocm9vdC5xdWVyeVNlbGVjdG9yQWxsKCdbYXV0b2ZvY3VzXSwgW3RhYmluZGV4XSwgYSwgaW5wdXQsIHRleHRhcmVhLCBzZWxlY3QsIGJ1dHRvbicpKTtcbiAgICAgICAgcmV0dXJuIGZvY3VzYWJsZUVscy5maWx0ZXIoZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICB2YXIgaXNEaXNhYmxlZE9ySGlkZGVuID0gZWwuZ2V0QXR0cmlidXRlKCdhcmlhLWRpc2FibGVkJykgPT09ICd0cnVlJyB8fFxuICAgICAgICAgICAgICAgIGVsLmdldEF0dHJpYnV0ZSgnZGlzYWJsZWQnKSAhPSBudWxsIHx8XG4gICAgICAgICAgICAgICAgZWwuZ2V0QXR0cmlidXRlKCdoaWRkZW4nKSAhPSBudWxsIHx8XG4gICAgICAgICAgICAgICAgZWwuZ2V0QXR0cmlidXRlKCdhcmlhLWhpZGRlbicpID09PSAndHJ1ZSc7XG4gICAgICAgICAgICB2YXIgaXNUYWJiYWJsZUFuZFZpc2libGUgPSBlbC50YWJJbmRleCA+PSAwICYmXG4gICAgICAgICAgICAgICAgZWwuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggPiAwICYmXG4gICAgICAgICAgICAgICAgIWVsLmNsYXNzTGlzdC5jb250YWlucyhGT0NVU19TRU5USU5FTF9DTEFTUykgJiYgIWlzRGlzYWJsZWRPckhpZGRlbjtcbiAgICAgICAgICAgIHZhciBpc1Byb2dyYW1tYXRpY2FsbHlIaWRkZW4gPSBmYWxzZTtcbiAgICAgICAgICAgIGlmIChpc1RhYmJhYmxlQW5kVmlzaWJsZSkge1xuICAgICAgICAgICAgICAgIHZhciBzdHlsZSA9IGdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgICAgICAgICAgICAgIGlzUHJvZ3JhbW1hdGljYWxseUhpZGRlbiA9XG4gICAgICAgICAgICAgICAgICAgIHN0eWxlLmRpc3BsYXkgPT09ICdub25lJyB8fCBzdHlsZS52aXNpYmlsaXR5ID09PSAnaGlkZGVuJztcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybiBpc1RhYmJhYmxlQW5kVmlzaWJsZSAmJiAhaXNQcm9ncmFtbWF0aWNhbGx5SGlkZGVuO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIEZvY3VzVHJhcC5wcm90b3R5cGUuY3JlYXRlU2VudGluZWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBzZW50aW5lbCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xuICAgICAgICBzZW50aW5lbC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgICAgLy8gRG9uJ3QgYW5ub3VuY2UgaW4gc2NyZWVuIHJlYWRlcnMuXG4gICAgICAgIHNlbnRpbmVsLnNldEF0dHJpYnV0ZSgnYXJpYS1oaWRkZW4nLCAndHJ1ZScpO1xuICAgICAgICBzZW50aW5lbC5jbGFzc0xpc3QuYWRkKEZPQ1VTX1NFTlRJTkVMX0NMQVNTKTtcbiAgICAgICAgcmV0dXJuIHNlbnRpbmVsO1xuICAgIH07XG4gICAgcmV0dXJuIEZvY3VzVHJhcDtcbn0oKSk7XG5leHBvcnQgeyBGb2N1c1RyYXAgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvY3VzLXRyYXAuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG4vKipcbiAqIEFuaW1hdGlvbkZyYW1lIHByb3ZpZGVzIGEgdXNlci1mcmllbmRseSBhYnN0cmFjdGlvbiBhcm91bmQgcmVxdWVzdGluZ1xuICogYW5kIGNhbmNlbGluZyBhbmltYXRpb24gZnJhbWVzLlxuICovXG52YXIgQW5pbWF0aW9uRnJhbWUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgZnVuY3Rpb24gQW5pbWF0aW9uRnJhbWUoKSB7XG4gICAgICAgIHRoaXMucmFmSURzID0gbmV3IE1hcCgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXF1ZXN0cyBhbiBhbmltYXRpb24gZnJhbWUuIENhbmNlbHMgYW55IGV4aXN0aW5nIGZyYW1lIHdpdGggdGhlIHNhbWUga2V5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBmb3IgdGhpcyBjYWxsYmFjay5cbiAgICAgKiBAcGFyYW0ge0ZyYW1lUmVxdWVzdENhbGxiYWNrfSBjYWxsYmFjayBUaGUgY2FsbGJhY2sgdG8gYmUgZXhlY3V0ZWQuXG4gICAgICovXG4gICAgQW5pbWF0aW9uRnJhbWUucHJvdG90eXBlLnJlcXVlc3QgPSBmdW5jdGlvbiAoa2V5LCBjYWxsYmFjaykge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmNhbmNlbChrZXkpO1xuICAgICAgICB2YXIgZnJhbWVJRCA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoZnJhbWUpIHtcbiAgICAgICAgICAgIF90aGlzLnJhZklEcy5kZWxldGUoa2V5KTtcbiAgICAgICAgICAgIC8vIENhbGxiYWNrIG11c3QgY29tZSAqYWZ0ZXIqIHRoZSBrZXkgaXMgZGVsZXRlZCBzbyB0aGF0IG5lc3RlZCBjYWxscyB0b1xuICAgICAgICAgICAgLy8gcmVxdWVzdCB3aXRoIHRoZSBzYW1lIGtleSBhcmUgbm90IGRlbGV0ZWQuXG4gICAgICAgICAgICBjYWxsYmFjayhmcmFtZSk7XG4gICAgICAgIH0pO1xuICAgICAgICB0aGlzLnJhZklEcy5zZXQoa2V5LCBmcmFtZUlEKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENhbmNlbHMgYSBxdWV1ZWQgY2FsbGJhY2sgd2l0aCB0aGUgZ2l2ZW4ga2V5LlxuICAgICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgVGhlIGtleSBmb3IgdGhpcyBjYWxsYmFjay5cbiAgICAgKi9cbiAgICBBbmltYXRpb25GcmFtZS5wcm90b3R5cGUuY2FuY2VsID0gZnVuY3Rpb24gKGtleSkge1xuICAgICAgICB2YXIgcmFmSUQgPSB0aGlzLnJhZklEcy5nZXQoa2V5KTtcbiAgICAgICAgaWYgKHJhZklEKSB7XG4gICAgICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZShyYWZJRCk7XG4gICAgICAgICAgICB0aGlzLnJhZklEcy5kZWxldGUoa2V5KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQ2FuY2VscyBhbGwgcXVldWVkIGNhbGxiYWNrLlxuICAgICAqL1xuICAgIEFuaW1hdGlvbkZyYW1lLnByb3RvdHlwZS5jYW5jZWxBbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIE5lZWQgdG8gdXNlIGZvckVhY2ggYmVjYXVzZSBpdCdzIHRoZSBvbmx5IGl0ZXJhdGlvbiBtZXRob2Qgc3VwcG9ydGVkXG4gICAgICAgIC8vIGJ5IElFMTEuIFN1cHByZXNzIHRoZSB1bmRlcnNjb3JlIGJlY2F1c2Ugd2UgZG9uJ3QgbmVlZCBpdC5cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOmVuZm9yY2UtbmFtZS1jYXNpbmdcbiAgICAgICAgdGhpcy5yYWZJRHMuZm9yRWFjaChmdW5jdGlvbiAoXywga2V5KSB7XG4gICAgICAgICAgICBfdGhpcy5jYW5jZWwoa2V5KTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBxdWV1ZSBvZiB1bmV4ZWN1dGVkIGNhbGxiYWNrIGtleXMuXG4gICAgICovXG4gICAgQW5pbWF0aW9uRnJhbWUucHJvdG90eXBlLmdldFF1ZXVlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcXVldWUgPSBbXTtcbiAgICAgICAgLy8gTmVlZCB0byB1c2UgZm9yRWFjaCBiZWNhdXNlIGl0J3MgdGhlIG9ubHkgaXRlcmF0aW9uIG1ldGhvZCBzdXBwb3J0ZWRcbiAgICAgICAgLy8gYnkgSUUxMS4gU3VwcHJlc3MgdGhlIHVuZGVyc2NvcmUgYmVjYXVzZSB3ZSBkb24ndCBuZWVkIGl0LlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6ZW5mb3JjZS1uYW1lLWNhc2luZ1xuICAgICAgICB0aGlzLnJhZklEcy5mb3JFYWNoKGZ1bmN0aW9uIChfLCBrZXkpIHtcbiAgICAgICAgICAgIHF1ZXVlLnB1c2goa2V5KTtcbiAgICAgICAgfSk7XG4gICAgICAgIHJldHVybiBxdWV1ZTtcbiAgICB9O1xuICAgIHJldHVybiBBbmltYXRpb25GcmFtZTtcbn0oKSk7XG5leHBvcnQgeyBBbmltYXRpb25GcmFtZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9YW5pbWF0aW9uZnJhbWUuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5leHBvcnQgdmFyIGNzc0NsYXNzZXMgPSB7XG4gICAgQ0xPU0lORzogJ21kYy1kaWFsb2ctLWNsb3NpbmcnLFxuICAgIE9QRU46ICdtZGMtZGlhbG9nLS1vcGVuJyxcbiAgICBPUEVOSU5HOiAnbWRjLWRpYWxvZy0tb3BlbmluZycsXG4gICAgU0NST0xMQUJMRTogJ21kYy1kaWFsb2ctLXNjcm9sbGFibGUnLFxuICAgIFNDUk9MTF9MT0NLOiAnbWRjLWRpYWxvZy1zY3JvbGwtbG9jaycsXG4gICAgU1RBQ0tFRDogJ21kYy1kaWFsb2ctLXN0YWNrZWQnLFxuICAgIEZVTExTQ1JFRU46ICdtZGMtZGlhbG9nLS1mdWxsc2NyZWVuJyxcbiAgICAvLyBDbGFzcyBmb3Igc2hvd2luZyBhIHNjcm9sbCBkaXZpZGVyIG9uIGZ1bGwtc2NyZWVuIGRpYWxvZyBoZWFkZXIgZWxlbWVudC5cbiAgICAvLyBTaG91bGQgb25seSBiZSBkaXNwbGF5ZWQgb24gc2Nyb2xsYWJsZSBjb250ZW50LCB3aGVuIHRoZSBkaWFsb2cgY29udGVudCBpc1xuICAgIC8vIHNjcm9sbGVkIFwidW5kZXJuZWF0aFwiIHRoZSBoZWFkZXIuXG4gICAgU0NST0xMX0RJVklERVJfSEVBREVSOiAnbWRjLWRpYWxvZy1zY3JvbGwtZGl2aWRlci1oZWFkZXInLFxuICAgIC8vIENsYXNzIGZvciBzaG93aW5nIGEgc2Nyb2xsIGRpdmlkZXIgb24gYSBmdWxsLXNjcmVlbiBkaWFsb2cgZm9vdGVyIGVsZW1lbnQuXG4gICAgLy8gU2hvdWxkIG9ubHkgYmUgZGlzcGxheWVkIG9uIHNjcm9sYWxibGUgY29udGVudCwgd2hlbiB0aGUgZGlhbG9nIGNvbnRlbnQgaXNcbiAgICAvLyBvYnNjdXJlZCBcInVuZGVybmVhdGhcIiB0aGUgZm9vdGVyLlxuICAgIFNDUk9MTF9ESVZJREVSX0ZPT1RFUjogJ21kYy1kaWFsb2ctc2Nyb2xsLWRpdmlkZXItZm9vdGVyJyxcbiAgICAvLyBUaGUgXCJzdXJmYWNlIHNjcmltXCIgaXMgYSBzY3JpbSBjb3ZlcmluZyBvbmx5IHRoZSBzdXJmYWNlIG9mIGEgZGlhbG9nLiBUaGlzXG4gICAgLy8gaXMgdXNlZCBpbiBzaXR1YXRpb25zIHdoZXJlIGEgY29uZmlybWF0aW9uIGRpYWxvZyBpcyBzaG93biBvdmVyIGFuIGFscmVhZHlcbiAgICAvLyBvcGVuZWQgZnVsbC1zY3JlZW4gZGlhbG9nLiBPbiBsYXJnZXIgc2NyZWVuLXNpemVzLCB0aGUgZnVsbC1zY3JlZW4gZGlhbG9nXG4gICAgLy8gaXMgc2l6ZWQgYXMgYSBtb2RhbCBhbmQgc28gaW4gdGhlc2Ugc2l0dWF0aW9ucyB3ZSBkaXNwbGF5IGEgXCJzdXJmYWNlIHNjcmltXCJcbiAgICAvLyB0byBwcmV2ZW50IGEgXCJkb3VibGUgc2NyaW1cIiAod2hlcmUgdGhlIHNjcmltIGZyb20gdGhlIHNlY29uZGFyeVxuICAgIC8vIGNvbmZpcm1hdGlvbiBkaWFsb2cgd291bGQgb3ZlcmxhcCB3aXRoIHRoZSBzY3JpbSBmcm9tIHRoZSBmdWxsLXNjcmVlblxuICAgIC8vIGRpYWxvZykuXG4gICAgU1VSRkFDRV9TQ1JJTV9TSE9XTjogJ21kYy1kaWFsb2dfX3N1cmZhY2Utc2NyaW0tLXNob3duJyxcbiAgICAvLyBcIlNob3dpbmdcIiBhbmltYXRpbmcgY2xhc3MgZm9yIHRoZSBzdXJmYWNlLXNjcmltLlxuICAgIFNVUkZBQ0VfU0NSSU1fU0hPV0lORzogJ21kYy1kaWFsb2dfX3N1cmZhY2Utc2NyaW0tLXNob3dpbmcnLFxuICAgIC8vIFwiSGlkaW5nXCIgYW5pbWF0aW5nIGNsYXNzIGZvciB0aGUgc3VyZmFjZS1zY3JpbS5cbiAgICBTVVJGQUNFX1NDUklNX0hJRElORzogJ21kYy1kaWFsb2dfX3N1cmZhY2Utc2NyaW0tLWhpZGluZycsXG4gICAgLy8gQ2xhc3MgdG8gaGlkZSBhIGRpYWxvZydzIHNjcmltICh1c2VkIGluIGNvbmp1bmN0aW9uIHdpdGggYSBzdXJmYWNlLXNjcmltKS5cbiAgICAvLyBOb3RlIHRoYXQgd2Ugb25seSBoaWRlIHRoZSBvcmlnaW5hbCBzY3JpbSByYXRoZXIgdGhhbiByZW1vdmluZyBpdCBlbnRpcmVseVxuICAgIC8vIHRvIHByZXZlbnQgaW50ZXJhY3Rpb25zIHdpdGggdGhlIGNvbnRlbnQgYmVoaW5kIHRoaXMgc2NyaW0sIGFuZCB0byBjYXB0dXJlXG4gICAgLy8gc2NyaW0gY2xpY2tzLlxuICAgIFNDUklNX0hJRERFTjogJ21kYy1kaWFsb2dfX3NjcmltLS1oaWRkZW4nLFxufTtcbmV4cG9ydCB2YXIgc3RyaW5ncyA9IHtcbiAgICBBQ1RJT05fQVRUUklCVVRFOiAnZGF0YS1tZGMtZGlhbG9nLWFjdGlvbicsXG4gICAgQlVUVE9OX0RFRkFVTFRfQVRUUklCVVRFOiAnZGF0YS1tZGMtZGlhbG9nLWJ1dHRvbi1kZWZhdWx0JyxcbiAgICBCVVRUT05fU0VMRUNUT1I6ICcubWRjLWRpYWxvZ19fYnV0dG9uJyxcbiAgICBDTE9TRURfRVZFTlQ6ICdNRENEaWFsb2c6Y2xvc2VkJyxcbiAgICBDTE9TRV9BQ1RJT046ICdjbG9zZScsXG4gICAgQ0xPU0lOR19FVkVOVDogJ01EQ0RpYWxvZzpjbG9zaW5nJyxcbiAgICBDT05UQUlORVJfU0VMRUNUT1I6ICcubWRjLWRpYWxvZ19fY29udGFpbmVyJyxcbiAgICBDT05URU5UX1NFTEVDVE9SOiAnLm1kYy1kaWFsb2dfX2NvbnRlbnQnLFxuICAgIERFU1RST1lfQUNUSU9OOiAnZGVzdHJveScsXG4gICAgSU5JVElBTF9GT0NVU19BVFRSSUJVVEU6ICdkYXRhLW1kYy1kaWFsb2ctaW5pdGlhbC1mb2N1cycsXG4gICAgT1BFTkVEX0VWRU5UOiAnTURDRGlhbG9nOm9wZW5lZCcsXG4gICAgT1BFTklOR19FVkVOVDogJ01EQ0RpYWxvZzpvcGVuaW5nJyxcbiAgICBTQ1JJTV9TRUxFQ1RPUjogJy5tZGMtZGlhbG9nX19zY3JpbScsXG4gICAgU1VQUFJFU1NfREVGQVVMVF9QUkVTU19TRUxFQ1RPUjogW1xuICAgICAgICAndGV4dGFyZWEnLFxuICAgICAgICAnLm1kYy1tZW51IC5tZGMtbGlzdC1pdGVtJyxcbiAgICAgICAgJy5tZGMtbWVudSAubWRjLWRlcHJlY2F0ZWQtbGlzdC1pdGVtJyxcbiAgICBdLmpvaW4oJywgJyksXG4gICAgU1VSRkFDRV9TRUxFQ1RPUjogJy5tZGMtZGlhbG9nX19zdXJmYWNlJyxcbn07XG5leHBvcnQgdmFyIG51bWJlcnMgPSB7XG4gICAgRElBTE9HX0FOSU1BVElPTl9DTE9TRV9USU1FX01TOiA3NSxcbiAgICBESUFMT0dfQU5JTUFUSU9OX09QRU5fVElNRV9NUzogMTUwLFxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcywgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0NvbXBvbmVudCB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBGb2N1c1RyYXAgfSBmcm9tICdAbWF0ZXJpYWwvZG9tL2ZvY3VzLXRyYXAnO1xuaW1wb3J0IHsgY2xvc2VzdCwgbWF0Y2hlcyB9IGZyb20gJ0BtYXRlcmlhbC9kb20vcG9ueWZpbGwnO1xuaW1wb3J0IHsgTURDUmlwcGxlIH0gZnJvbSAnQG1hdGVyaWFsL3JpcHBsZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgTURDRGlhbG9nRm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbCc7XG52YXIgc3RyaW5ncyA9IE1EQ0RpYWxvZ0ZvdW5kYXRpb24uc3RyaW5ncztcbnZhciBNRENEaWFsb2cgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ0RpYWxvZywgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENEaWFsb2coKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0RpYWxvZy5wcm90b3R5cGUsIFwiaXNPcGVuXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uLmlzT3BlbigpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0RpYWxvZy5wcm90b3R5cGUsIFwiZXNjYXBlS2V5QWN0aW9uXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uLmdldEVzY2FwZUtleUFjdGlvbigpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRFc2NhcGVLZXlBY3Rpb24oYWN0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENEaWFsb2cucHJvdG90eXBlLCBcInNjcmltQ2xpY2tBY3Rpb25cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvdW5kYXRpb24uZ2V0U2NyaW1DbGlja0FjdGlvbigpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRTY3JpbUNsaWNrQWN0aW9uKGFjdGlvbik7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDRGlhbG9nLnByb3RvdHlwZSwgXCJhdXRvU3RhY2tCdXR0b25zXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uLmdldEF1dG9TdGFja0J1dHRvbnMoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoYXV0b1N0YWNrKSB7XG4gICAgICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0QXV0b1N0YWNrQnV0dG9ucyhhdXRvU3RhY2spO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDRGlhbG9nLmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENEaWFsb2cocm9vdCk7XG4gICAgfTtcbiAgICBNRENEaWFsb2cucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoZm9jdXNUcmFwRmFjdG9yeSkge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgaWYgKGZvY3VzVHJhcEZhY3RvcnkgPT09IHZvaWQgMCkgeyBmb2N1c1RyYXBGYWN0b3J5ID0gZnVuY3Rpb24gKGVsLCBmb2N1c09wdGlvbnMpIHsgcmV0dXJuIG5ldyBGb2N1c1RyYXAoZWwsIGZvY3VzT3B0aW9ucyk7IH07IH1cbiAgICAgICAgdmFyIGNvbnRhaW5lciA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuQ09OVEFJTkVSX1NFTEVDVE9SKTtcbiAgICAgICAgaWYgKCFjb250YWluZXIpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIkRpYWxvZyBjb21wb25lbnQgcmVxdWlyZXMgYSBcIiArIHN0cmluZ3MuQ09OVEFJTkVSX1NFTEVDVE9SICsgXCIgY29udGFpbmVyIGVsZW1lbnRcIik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jb250YWluZXIgPSBjb250YWluZXI7XG4gICAgICAgIHRoaXMuY29udGVudCA9XG4gICAgICAgICAgICB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzdHJpbmdzLkNPTlRFTlRfU0VMRUNUT1IpO1xuICAgICAgICB0aGlzLmJ1dHRvbnMgPSBbXS5zbGljZS5jYWxsKHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yQWxsKHN0cmluZ3MuQlVUVE9OX1NFTEVDVE9SKSk7XG4gICAgICAgIHRoaXMuZGVmYXVsdEJ1dHRvbiA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKFwiW1wiICsgc3RyaW5ncy5CVVRUT05fREVGQVVMVF9BVFRSSUJVVEUgKyBcIl1cIik7XG4gICAgICAgIHRoaXMuZm9jdXNUcmFwRmFjdG9yeSA9IGZvY3VzVHJhcEZhY3Rvcnk7XG4gICAgICAgIHRoaXMuYnV0dG9uUmlwcGxlcyA9IFtdO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyh0aGlzLmJ1dHRvbnMpLCBfYyA9IF9iLm5leHQoKTsgIV9jLmRvbmU7IF9jID0gX2IubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGJ1dHRvbkVsID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5idXR0b25SaXBwbGVzLnB1c2gobmV3IE1EQ1JpcHBsZShidXR0b25FbCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ0RpYWxvZy5wcm90b3R5cGUuaW5pdGlhbFN5bmNXaXRoRE9NID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmZvY3VzVHJhcCA9IHV0aWwuY3JlYXRlRm9jdXNUcmFwSW5zdGFuY2UodGhpcy5jb250YWluZXIsIHRoaXMuZm9jdXNUcmFwRmFjdG9yeSwgdGhpcy5nZXRJbml0aWFsRm9jdXNFbCgpIHx8IHVuZGVmaW5lZCk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2sgPSB0aGlzLmZvdW5kYXRpb24uaGFuZGxlQ2xpY2suYmluZCh0aGlzLmZvdW5kYXRpb24pO1xuICAgICAgICB0aGlzLmhhbmRsZUtleWRvd24gPSB0aGlzLmZvdW5kYXRpb24uaGFuZGxlS2V5ZG93bi5iaW5kKHRoaXMuZm91bmRhdGlvbik7XG4gICAgICAgIHRoaXMuaGFuZGxlRG9jdW1lbnRLZXlkb3duID1cbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5oYW5kbGVEb2N1bWVudEtleWRvd24uYmluZCh0aGlzLmZvdW5kYXRpb24pO1xuICAgICAgICAvLyB0aGlzLmhhbmRsZUxheW91dCA9IHRoaXMubGF5b3V0LmJpbmQodGhpcyk7XG4gICAgICAgIHRoaXMuaGFuZGxlT3BlbmluZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCBfdGhpcy5oYW5kbGVEb2N1bWVudEtleWRvd24pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZUNsb3NpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBkb2N1bWVudC5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgX3RoaXMuaGFuZGxlRG9jdW1lbnRLZXlkb3duKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5saXN0ZW4oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XG4gICAgICAgIHRoaXMubGlzdGVuKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duKTtcbiAgICAgICAgdGhpcy5saXN0ZW4oc3RyaW5ncy5PUEVOSU5HX0VWRU5ULCB0aGlzLmhhbmRsZU9wZW5pbmcpO1xuICAgICAgICB0aGlzLmxpc3RlbihzdHJpbmdzLkNMT1NJTkdfRVZFTlQsIHRoaXMuaGFuZGxlQ2xvc2luZyk7XG4gICAgfTtcbiAgICBNRENEaWFsb2cucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMudW5saXN0ZW4oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XG4gICAgICAgIHRoaXMudW5saXN0ZW4oJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWRvd24pO1xuICAgICAgICB0aGlzLnVubGlzdGVuKHN0cmluZ3MuT1BFTklOR19FVkVOVCwgdGhpcy5oYW5kbGVPcGVuaW5nKTtcbiAgICAgICAgdGhpcy51bmxpc3RlbihzdHJpbmdzLkNMT1NJTkdfRVZFTlQsIHRoaXMuaGFuZGxlQ2xvc2luZyk7XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xvc2luZygpO1xuICAgICAgICB0aGlzLmJ1dHRvblJpcHBsZXMuZm9yRWFjaChmdW5jdGlvbiAocmlwcGxlKSB7XG4gICAgICAgICAgICByaXBwbGUuZGVzdHJveSgpO1xuICAgICAgICB9KTtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgfTtcbiAgICBNRENEaWFsb2cucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmxheW91dCgpO1xuICAgIH07XG4gICAgTURDRGlhbG9nLnByb3RvdHlwZS5vcGVuID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24ub3BlbigpO1xuICAgIH07XG4gICAgTURDRGlhbG9nLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChhY3Rpb24pIHtcbiAgICAgICAgaWYgKGFjdGlvbiA9PT0gdm9pZCAwKSB7IGFjdGlvbiA9ICcnOyB9XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5jbG9zZShhY3Rpb24pO1xuICAgIH07XG4gICAgTURDRGlhbG9nLnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IHtcbiAgICAgICAgICAgIGFkZEJvZHlDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7IH0sXG4gICAgICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gX3RoaXMucm9vdC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7IH0sXG4gICAgICAgICAgICBhcmVCdXR0b25zU3RhY2tlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbC5hcmVUb3BzTWlzYWxpZ25lZChfdGhpcy5idXR0b25zKTsgfSxcbiAgICAgICAgICAgIGNsaWNrRGVmYXVsdEJ1dHRvbjogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5kZWZhdWx0QnV0dG9uICYmICFfdGhpcy5kZWZhdWx0QnV0dG9uLmRpc2FibGVkKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmRlZmF1bHRCdXR0b24uY2xpY2soKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZXZlbnRUYXJnZXRNYXRjaGVzOiBmdW5jdGlvbiAodGFyZ2V0LCBzZWxlY3Rvcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB0YXJnZXQgPyBtYXRjaGVzKHRhcmdldCwgc2VsZWN0b3IpIDogZmFsc2U7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0QWN0aW9uRnJvbUV2ZW50OiBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICAgICAgaWYgKCFldnQudGFyZ2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiAnJztcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBjbG9zZXN0KGV2dC50YXJnZXQsIFwiW1wiICsgc3RyaW5ncy5BQ1RJT05fQVRUUklCVVRFICsgXCJdXCIpO1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50ICYmIGVsZW1lbnQuZ2V0QXR0cmlidXRlKHN0cmluZ3MuQUNUSU9OX0FUVFJJQlVURSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0SW5pdGlhbEZvY3VzRWw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmdldEluaXRpYWxGb2N1c0VsKCk7IH0sXG4gICAgICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gX3RoaXMucm9vdC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIGlzQ29udGVudFNjcm9sbGFibGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHV0aWwuaXNTY3JvbGxhYmxlKF90aGlzLmNvbnRlbnQpOyB9LFxuICAgICAgICAgICAgbm90aWZ5Q2xvc2VkOiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBfdGhpcy5lbWl0KHN0cmluZ3MuQ0xPU0VEX0VWRU5ULCBhY3Rpb24gPyB7IGFjdGlvbjogYWN0aW9uIH0gOiB7fSk7IH0sXG4gICAgICAgICAgICBub3RpZnlDbG9zaW5nOiBmdW5jdGlvbiAoYWN0aW9uKSB7IHJldHVybiBfdGhpcy5lbWl0KHN0cmluZ3MuQ0xPU0lOR19FVkVOVCwgYWN0aW9uID8geyBhY3Rpb246IGFjdGlvbiB9IDoge30pOyB9LFxuICAgICAgICAgICAgbm90aWZ5T3BlbmVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5lbWl0KHN0cmluZ3MuT1BFTkVEX0VWRU5ULCB7fSk7IH0sXG4gICAgICAgICAgICBub3RpZnlPcGVuaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5lbWl0KHN0cmluZ3MuT1BFTklOR19FVkVOVCwge30pOyB9LFxuICAgICAgICAgICAgcmVsZWFzZUZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZm9jdXNUcmFwLnJlbGVhc2VGb2N1cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZUJvZHlDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gZG9jdW1lbnQuYm9keS5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7IH0sXG4gICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gX3RoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7IH0sXG4gICAgICAgICAgICByZXZlcnNlQnV0dG9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmJ1dHRvbnMucmV2ZXJzZSgpO1xuICAgICAgICAgICAgICAgIF90aGlzLmJ1dHRvbnMuZm9yRWFjaChmdW5jdGlvbiAoYnV0dG9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGJ1dHRvbi5wYXJlbnRFbGVtZW50LmFwcGVuZENoaWxkKGJ1dHRvbik7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdHJhcEZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZm9jdXNUcmFwLnRyYXBGb2N1cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVyQ29udGVudEV2ZW50SGFuZGxlcjogZnVuY3Rpb24gKGV2dCwgaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5jb250ZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuY29udGVudC5hZGRFdmVudExpc3RlbmVyKGV2dCwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJDb250ZW50RXZlbnRIYW5kbGVyOiBmdW5jdGlvbiAoZXZ0LCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmNvbnRlbnQgaW5zdGFuY2VvZiBIVE1MRWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5jb250ZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNTY3JvbGxhYmxlQ29udGVudEF0VG9wOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHV0aWwuaXNTY3JvbGxBdFRvcChfdGhpcy5jb250ZW50KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1Njcm9sbGFibGVDb250ZW50QXRCb3R0b206IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdXRpbC5pc1Njcm9sbEF0Qm90dG9tKF90aGlzLmNvbnRlbnQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVyV2luZG93RXZlbnRIYW5kbGVyOiBmdW5jdGlvbiAoZXZ0LCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoZXZ0LCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXJlZ2lzdGVyV2luZG93RXZlbnRIYW5kbGVyOiBmdW5jdGlvbiAoZXZ0LCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0LCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgTURDRGlhbG9nRm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICB9O1xuICAgIE1EQ0RpYWxvZy5wcm90b3R5cGUuZ2V0SW5pdGlhbEZvY3VzRWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihcIltcIiArIHN0cmluZ3MuSU5JVElBTF9GT0NVU19BVFRSSUJVVEUgKyBcIl1cIik7XG4gICAgfTtcbiAgICByZXR1cm4gTURDRGlhbG9nO1xufShNRENDb21wb25lbnQpKTtcbmV4cG9ydCB7IE1EQ0RpYWxvZyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9uZW50LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGNyZWF0ZUZvY3VzVHJhcEluc3RhbmNlKHN1cmZhY2VFbCwgZm9jdXNUcmFwRmFjdG9yeSwgaW5pdGlhbEZvY3VzRWwpIHtcbiAgICByZXR1cm4gZm9jdXNUcmFwRmFjdG9yeShzdXJmYWNlRWwsIHsgaW5pdGlhbEZvY3VzRWw6IGluaXRpYWxGb2N1c0VsIH0pO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGlzU2Nyb2xsYWJsZShlbCkge1xuICAgIHJldHVybiBlbCA/IGVsLnNjcm9sbEhlaWdodCA+IGVsLm9mZnNldEhlaWdodCA6IGZhbHNlO1xufVxuLyoqXG4gKiBGb3Igc2Nyb2xsYWJsZSBjb250ZW50LCByZXR1cm5zIHRydWUgaWYgdGhlIGNvbnRlbnQgaGFzIG5vdCBiZWVuIHNjcm9sbGVkXG4gKiAodGhhdCBpcywgdGhlIHNjcm9sbCBjb250ZW50IGlzIGFzIHRoZSBcInRvcFwiKS4gVGhpcyBpcyB1c2VkIGluIGZ1bGwtc2NyZWVuXG4gKiBkaWFsb2dzLCB3aGVyZSB0aGUgc2Nyb2xsIGRpdmlkZXIgaXMgZXhwZWN0ZWQgb25seSB0byBhcHBlYXIgb25jZSB0aGVcbiAqIGNvbnRlbnQgaGFzIGJlZW4gc2Nyb2xsZWQgXCJ1bmRlcm5lYXRoXCIgdGhlIGhlYWRlciBiYXIuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBpc1Njcm9sbEF0VG9wKGVsKSB7XG4gICAgcmV0dXJuIGVsID8gZWwuc2Nyb2xsVG9wID09PSAwIDogZmFsc2U7XG59XG4vKipcbiAqIEZvciBzY3JvbGxhYmxlIGNvbnRlbnQsIHJldHVybnMgdHJ1ZSBpZiB0aGUgY29udGVudCBoYXMgYmVlbiBzY3JvbGxlZCBhbGwgdGhlXG4gKiB3YXkgdG8gdGhlIGJvdHRvbS4gVGhpcyBpcyB1c2VkIGluIGZ1bGwtc2NyZWVuIGRpYWxvZ3MsIHdoZXJlIHRoZSBmb290ZXJcbiAqIHNjcm9sbCBkaXZpZGVyIGlzIGV4cGVjdGVkIG9ubHkgdG8gYXBwZWFyIHdoZW4gdGhlIGNvbnRlbnQgaXMgXCJjdXQtb2ZmXCIgYnlcbiAqIHRoZSBmb290ZXIgYmFyLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNTY3JvbGxBdEJvdHRvbShlbCkge1xuICAgIHJldHVybiBlbCA/IE1hdGguY2VpbChlbC5zY3JvbGxIZWlnaHQgLSBlbC5zY3JvbGxUb3ApID09PSBlbC5jbGllbnRIZWlnaHQgOlxuICAgICAgICBmYWxzZTtcbn1cbmV4cG9ydCBmdW5jdGlvbiBhcmVUb3BzTWlzYWxpZ25lZChlbHMpIHtcbiAgICB2YXIgdG9wcyA9IG5ldyBTZXQoKTtcbiAgICBbXS5mb3JFYWNoLmNhbGwoZWxzLCBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIHRvcHMuYWRkKGVsLm9mZnNldFRvcCk7IH0pO1xuICAgIHJldHVybiB0b3BzLnNpemUgPiAxO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9dXRpbC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbi8qKlxuICogRGV0ZXJtaW5lIHdoZXRoZXIgdGhlIGN1cnJlbnQgYnJvd3NlciBzdXBwb3J0cyBwYXNzaXZlIGV2ZW50IGxpc3RlbmVycywgYW5kXG4gKiBpZiBzbywgdXNlIHRoZW0uXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBhcHBseVBhc3NpdmUoZ2xvYmFsT2JqKSB7XG4gICAgaWYgKGdsb2JhbE9iaiA9PT0gdm9pZCAwKSB7IGdsb2JhbE9iaiA9IHdpbmRvdzsgfVxuICAgIHJldHVybiBzdXBwb3J0c1Bhc3NpdmVPcHRpb24oZ2xvYmFsT2JqKSA/XG4gICAgICAgIHsgcGFzc2l2ZTogdHJ1ZSB9IDpcbiAgICAgICAgZmFsc2U7XG59XG5mdW5jdGlvbiBzdXBwb3J0c1Bhc3NpdmVPcHRpb24oZ2xvYmFsT2JqKSB7XG4gICAgaWYgKGdsb2JhbE9iaiA9PT0gdm9pZCAwKSB7IGdsb2JhbE9iaiA9IHdpbmRvdzsgfVxuICAgIC8vIFNlZVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9FdmVudFRhcmdldC9hZGRFdmVudExpc3RlbmVyXG4gICAgdmFyIHBhc3NpdmVTdXBwb3J0ZWQgPSBmYWxzZTtcbiAgICB0cnkge1xuICAgICAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgICAgICAgIC8vIFRoaXMgZnVuY3Rpb24gd2lsbCBiZSBjYWxsZWQgd2hlbiB0aGUgYnJvd3NlclxuICAgICAgICAgICAgLy8gYXR0ZW1wdHMgdG8gYWNjZXNzIHRoZSBwYXNzaXZlIHByb3BlcnR5LlxuICAgICAgICAgICAgZ2V0IHBhc3NpdmUoKSB7XG4gICAgICAgICAgICAgICAgcGFzc2l2ZVN1cHBvcnRlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9O1xuICAgICAgICB2YXIgaGFuZGxlciA9IGZ1bmN0aW9uICgpIHsgfTtcbiAgICAgICAgZ2xvYmFsT2JqLmRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICAgICAgZ2xvYmFsT2JqLmRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Rlc3QnLCBoYW5kbGVyLCBvcHRpb25zKTtcbiAgICB9XG4gICAgY2F0Y2ggKGVycikge1xuICAgICAgICBwYXNzaXZlU3VwcG9ydGVkID0gZmFsc2U7XG4gICAgfVxuICAgIHJldHVybiBwYXNzaXZlU3VwcG9ydGVkO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9ZXZlbnRzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuLyoqXG4gKiBAZmlsZW92ZXJ2aWV3IEEgXCJwb255ZmlsbFwiIGlzIGEgcG9seWZpbGwgdGhhdCBkb2Vzbid0IG1vZGlmeSB0aGUgZ2xvYmFsIHByb3RvdHlwZSBjaGFpbi5cbiAqIFRoaXMgbWFrZXMgcG9ueWZpbGxzIHNhZmVyIHRoYW4gdHJhZGl0aW9uYWwgcG9seWZpbGxzLCBlc3BlY2lhbGx5IGZvciBsaWJyYXJpZXMgbGlrZSBNREMuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBjbG9zZXN0KGVsZW1lbnQsIHNlbGVjdG9yKSB7XG4gICAgaWYgKGVsZW1lbnQuY2xvc2VzdCkge1xuICAgICAgICByZXR1cm4gZWxlbWVudC5jbG9zZXN0KHNlbGVjdG9yKTtcbiAgICB9XG4gICAgdmFyIGVsID0gZWxlbWVudDtcbiAgICB3aGlsZSAoZWwpIHtcbiAgICAgICAgaWYgKG1hdGNoZXMoZWwsIHNlbGVjdG9yKSkge1xuICAgICAgICAgICAgcmV0dXJuIGVsO1xuICAgICAgICB9XG4gICAgICAgIGVsID0gZWwucGFyZW50RWxlbWVudDtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG59XG5leHBvcnQgZnVuY3Rpb24gbWF0Y2hlcyhlbGVtZW50LCBzZWxlY3Rvcikge1xuICAgIHZhciBuYXRpdmVNYXRjaGVzID0gZWxlbWVudC5tYXRjaGVzXG4gICAgICAgIHx8IGVsZW1lbnQud2Via2l0TWF0Y2hlc1NlbGVjdG9yXG4gICAgICAgIHx8IGVsZW1lbnQubXNNYXRjaGVzU2VsZWN0b3I7XG4gICAgcmV0dXJuIG5hdGl2ZU1hdGNoZXMuY2FsbChlbGVtZW50LCBzZWxlY3Rvcik7XG59XG4vKipcbiAqIFVzZWQgdG8gY29tcHV0ZSB0aGUgZXN0aW1hdGVkIHNjcm9sbCB3aWR0aCBvZiBlbGVtZW50cy4gV2hlbiBhbiBlbGVtZW50IGlzXG4gKiBoaWRkZW4gZHVlIHRvIGRpc3BsYXk6IG5vbmU7IGJlaW5nIGFwcGxpZWQgdG8gYSBwYXJlbnQgZWxlbWVudCwgdGhlIHdpZHRoIGlzXG4gKiByZXR1cm5lZCBhcyAwLiBIb3dldmVyLCB0aGUgZWxlbWVudCB3aWxsIGhhdmUgYSB0cnVlIHdpZHRoIG9uY2Ugbm8gbG9uZ2VyXG4gKiBpbnNpZGUgYSBkaXNwbGF5OiBub25lIGNvbnRleHQuIFRoaXMgbWV0aG9kIGNvbXB1dGVzIGFuIGVzdGltYXRlZCB3aWR0aCB3aGVuXG4gKiB0aGUgZWxlbWVudCBpcyBoaWRkZW4gb3IgcmV0dXJucyB0aGUgdHJ1ZSB3aWR0aCB3aGVuIHRoZSBlbGVtZW50IGlzIHZpc2JsZS5cbiAqIEBwYXJhbSB7RWxlbWVudH0gZWxlbWVudCB0aGUgZWxlbWVudCB3aG9zZSB3aWR0aCB0byBlc3RpbWF0ZVxuICovXG5leHBvcnQgZnVuY3Rpb24gZXN0aW1hdGVTY3JvbGxXaWR0aChlbGVtZW50KSB7XG4gICAgLy8gQ2hlY2sgdGhlIG9mZnNldFBhcmVudC4gSWYgdGhlIGVsZW1lbnQgaW5oZXJpdHMgZGlzcGxheTogbm9uZSBmcm9tIGFueVxuICAgIC8vIHBhcmVudCwgdGhlIG9mZnNldFBhcmVudCBwcm9wZXJ0eSB3aWxsIGJlIG51bGwgKHNlZVxuICAgIC8vIGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvV2ViL0FQSS9IVE1MRWxlbWVudC9vZmZzZXRQYXJlbnQpLlxuICAgIC8vIFRoaXMgY2hlY2sgZW5zdXJlcyB3ZSBvbmx5IGNsb25lIHRoZSBub2RlIHdoZW4gbmVjZXNzYXJ5LlxuICAgIHZhciBodG1sRWwgPSBlbGVtZW50O1xuICAgIGlmIChodG1sRWwub2Zmc2V0UGFyZW50ICE9PSBudWxsKSB7XG4gICAgICAgIHJldHVybiBodG1sRWwuc2Nyb2xsV2lkdGg7XG4gICAgfVxuICAgIHZhciBjbG9uZSA9IGh0bWxFbC5jbG9uZU5vZGUodHJ1ZSk7XG4gICAgY2xvbmUuc3R5bGUuc2V0UHJvcGVydHkoJ3Bvc2l0aW9uJywgJ2Fic29sdXRlJyk7XG4gICAgY2xvbmUuc3R5bGUuc2V0UHJvcGVydHkoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoLTk5OTlweCwgLTk5OTlweCknKTtcbiAgICBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgIHZhciBzY3JvbGxXaWR0aCA9IGNsb25lLnNjcm9sbFdpZHRoO1xuICAgIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5yZW1vdmVDaGlsZChjbG9uZSk7XG4gICAgcmV0dXJuIHNjcm9sbFdpZHRoO1xufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9cG9ueWZpbGwuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0NvbXBvbmVudCB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBlc3RpbWF0ZVNjcm9sbFdpZHRoIH0gZnJvbSAnQG1hdGVyaWFsL2RvbS9wb255ZmlsbCc7XG5pbXBvcnQgeyBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG52YXIgTURDRmxvYXRpbmdMYWJlbCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDRmxvYXRpbmdMYWJlbCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENGbG9hdGluZ0xhYmVsKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ0Zsb2F0aW5nTGFiZWwuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICByZXR1cm4gbmV3IE1EQ0Zsb2F0aW5nTGFiZWwocm9vdCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdHlsZXMgdGhlIGxhYmVsIHRvIHByb2R1Y2UgdGhlIGxhYmVsIHNoYWtlIGZvciBlcnJvcnMuXG4gICAgICogQHBhcmFtIHNob3VsZFNoYWtlIElmIHRydWUsIHNoYWtlcyB0aGUgbGFiZWwgYnkgYWRkaW5nIGEgQ1NTIGNsYXNzOyBvdGhlcndpc2UsIHN0b3BzIHNoYWtpbmcgYnkgcmVtb3ZpbmcgdGhlIGNsYXNzLlxuICAgICAqL1xuICAgIE1EQ0Zsb2F0aW5nTGFiZWwucHJvdG90eXBlLnNoYWtlID0gZnVuY3Rpb24gKHNob3VsZFNoYWtlKSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5zaGFrZShzaG91bGRTaGFrZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdHlsZXMgdGhlIGxhYmVsIHRvIGZsb2F0L2RvY2suXG4gICAgICogQHBhcmFtIHNob3VsZEZsb2F0IElmIHRydWUsIGZsb2F0cyB0aGUgbGFiZWwgYnkgYWRkaW5nIGEgQ1NTIGNsYXNzOyBvdGhlcndpc2UsIGRvY2tzIGl0IGJ5IHJlbW92aW5nIHRoZSBjbGFzcy5cbiAgICAgKi9cbiAgICBNRENGbG9hdGluZ0xhYmVsLnByb3RvdHlwZS5mbG9hdCA9IGZ1bmN0aW9uIChzaG91bGRGbG9hdCkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uZmxvYXQoc2hvdWxkRmxvYXQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3R5bGVzIHRoZSBsYWJlbCBhcyByZXF1aXJlZC5cbiAgICAgKiBAcGFyYW0gaXNSZXF1aXJlZCBJZiB0cnVlLCBhZGRzIGFuIGFzdGVyaXNrIHRvIHRoZSBsYWJlbCwgaW5kaWNhdGluZyB0aGF0IGl0IGlzIHJlcXVpcmVkLlxuICAgICAqL1xuICAgIE1EQ0Zsb2F0aW5nTGFiZWwucHJvdG90eXBlLnNldFJlcXVpcmVkID0gZnVuY3Rpb24gKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFJlcXVpcmVkKGlzUmVxdWlyZWQpO1xuICAgIH07XG4gICAgTURDRmxvYXRpbmdMYWJlbC5wcm90b3R5cGUuZ2V0V2lkdGggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvdW5kYXRpb24uZ2V0V2lkdGgoKTtcbiAgICB9O1xuICAgIE1EQ0Zsb2F0aW5nTGFiZWwucHJvdG90eXBlLmdldERlZmF1bHRGb3VuZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBETyBOT1QgSU5MSU5FIHRoaXMgdmFyaWFibGUuIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBmb3VuZGF0aW9ucyB0YWtlIGEgUGFydGlhbDxNRENGb29BZGFwdGVyPi5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHdlIGRvbid0IGFjY2lkZW50YWxseSBvbWl0IGFueSBtZXRob2RzLCB3ZSBuZWVkIGEgc2VwYXJhdGUsIHN0cm9uZ2x5IHR5cGVkIGFkYXB0ZXIgdmFyaWFibGUuXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgIHZhciBhZGFwdGVyID0ge1xuICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLnJvb3QuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgZ2V0V2lkdGg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGVzdGltYXRlU2Nyb2xsV2lkdGgoX3RoaXMucm9vdCk7IH0sXG4gICAgICAgICAgICByZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubGlzdGVuKGV2dFR5cGUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnVubGlzdGVuKGV2dFR5cGUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgcmV0dXJuIG5ldyBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENGbG9hdGluZ0xhYmVsO1xufShNRENDb21wb25lbnQpKTtcbmV4cG9ydCB7IE1EQ0Zsb2F0aW5nTGFiZWwgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmV4cG9ydCB2YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICBMQUJFTF9GTE9BVF9BQk9WRTogJ21kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmUnLFxuICAgIExBQkVMX1JFUVVJUkVEOiAnbWRjLWZsb2F0aW5nLWxhYmVsLS1yZXF1aXJlZCcsXG4gICAgTEFCRUxfU0hBS0U6ICdtZGMtZmxvYXRpbmctbGFiZWwtLXNoYWtlJyxcbiAgICBST09UOiAnbWRjLWZsb2F0aW5nLWxhYmVsJyxcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBjc3NDbGFzc2VzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xudmFyIE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zaGFrZUFuaW1hdGlvbkVuZEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVTaGFrZUFuaW1hdGlvbkVuZCgpO1xuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbiwgXCJjc3NDbGFzc2VzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3NzQ2xhc3NlcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbiwgXCJkZWZhdWx0QWRhcHRlclwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWUge0BsaW5rIE1EQ0Zsb2F0aW5nTGFiZWxBZGFwdGVyfSBmb3IgdHlwaW5nIGluZm9ybWF0aW9uIG9uIHBhcmFtZXRlcnMgYW5kIHJldHVybiB0eXBlcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldFdpZHRoOiBmdW5jdGlvbiAoKSB7IHJldHVybiAwOyB9LFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdhbmltYXRpb25lbmQnLCB0aGlzLnNoYWtlQW5pbWF0aW9uRW5kSGFuZGxlcik7XG4gICAgfTtcbiAgICBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2FuaW1hdGlvbmVuZCcsIHRoaXMuc2hha2VBbmltYXRpb25FbmRIYW5kbGVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIHdpZHRoIG9mIHRoZSBsYWJlbCBlbGVtZW50LlxuICAgICAqL1xuICAgIE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRXaWR0aCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRhcHRlci5nZXRXaWR0aCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3R5bGVzIHRoZSBsYWJlbCB0byBwcm9kdWNlIGEgc2hha2UgYW5pbWF0aW9uIHRvIGluZGljYXRlIGFuIGVycm9yLlxuICAgICAqIEBwYXJhbSBzaG91bGRTaGFrZSBJZiB0cnVlLCBhZGRzIHRoZSBzaGFrZSBDU1MgY2xhc3M7IG90aGVyd2lzZSwgcmVtb3ZlcyBzaGFrZSBjbGFzcy5cbiAgICAgKi9cbiAgICBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5wcm90b3R5cGUuc2hha2UgPSBmdW5jdGlvbiAoc2hvdWxkU2hha2UpIHtcbiAgICAgICAgdmFyIExBQkVMX1NIQUtFID0gTURDRmxvYXRpbmdMYWJlbEZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5MQUJFTF9TSEFLRTtcbiAgICAgICAgaWYgKHNob3VsZFNoYWtlKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoTEFCRUxfU0hBS0UpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKExBQkVMX1NIQUtFKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU3R5bGVzIHRoZSBsYWJlbCB0byBmbG9hdCBvciBkb2NrLlxuICAgICAqIEBwYXJhbSBzaG91bGRGbG9hdCBJZiB0cnVlLCBhZGRzIHRoZSBmbG9hdCBDU1MgY2xhc3M7IG90aGVyd2lzZSwgcmVtb3ZlcyBmbG9hdCBhbmQgc2hha2UgY2xhc3NlcyB0byBkb2NrIHRoZSBsYWJlbC5cbiAgICAgKi9cbiAgICBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5wcm90b3R5cGUuZmxvYXQgPSBmdW5jdGlvbiAoc2hvdWxkRmxvYXQpIHtcbiAgICAgICAgdmFyIF9hID0gTURDRmxvYXRpbmdMYWJlbEZvdW5kYXRpb24uY3NzQ2xhc3NlcywgTEFCRUxfRkxPQVRfQUJPVkUgPSBfYS5MQUJFTF9GTE9BVF9BQk9WRSwgTEFCRUxfU0hBS0UgPSBfYS5MQUJFTF9TSEFLRTtcbiAgICAgICAgaWYgKHNob3VsZEZsb2F0KSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoTEFCRUxfRkxPQVRfQUJPVkUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKExBQkVMX0ZMT0FUX0FCT1ZFKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhMQUJFTF9TSEFLRSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFN0eWxlcyB0aGUgbGFiZWwgYXMgcmVxdWlyZWQuXG4gICAgICogQHBhcmFtIGlzUmVxdWlyZWQgSWYgdHJ1ZSwgYWRkcyBhbiBhc3RlcmlzayB0byB0aGUgbGFiZWwsIGluZGljYXRpbmcgdGhhdCBpdCBpcyByZXF1aXJlZC5cbiAgICAgKi9cbiAgICBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0UmVxdWlyZWQgPSBmdW5jdGlvbiAoaXNSZXF1aXJlZCkge1xuICAgICAgICB2YXIgTEFCRUxfUkVRVUlSRUQgPSBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbi5jc3NDbGFzc2VzLkxBQkVMX1JFUVVJUkVEO1xuICAgICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKExBQkVMX1JFUVVJUkVEKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhMQUJFTF9SRVFVSVJFRCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVTaGFrZUFuaW1hdGlvbkVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIExBQkVMX1NIQUtFID0gTURDRmxvYXRpbmdMYWJlbEZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5MQUJFTF9TSEFLRTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKExBQkVMX1NIQUtFKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDRmxvYXRpbmdMYWJlbEZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENGbG9hdGluZ0xhYmVsRm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5leHBvcnQgdmFyIGNzc0NsYXNzZXMgPSB7XG4gICAgUk9PVDogJ21kYy1mb3JtLWZpZWxkJyxcbn07XG5leHBvcnQgdmFyIHN0cmluZ3MgPSB7XG4gICAgTEFCRUxfU0VMRUNUT1I6ICcubWRjLWZvcm0tZmllbGQgPiBsYWJlbCcsXG59O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgY3NzQ2xhc3Nlcywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBNRENGb3JtRmllbGRGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENGb3JtRmllbGRGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ0Zvcm1GaWVsZEZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDRm9ybUZpZWxkRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZUNsaWNrKCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0Zvcm1GaWVsZEZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDRm9ybUZpZWxkRm91bmRhdGlvbiwgXCJzdHJpbmdzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENGb3JtRmllbGRGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFjdGl2YXRlSW5wdXRSaXBwbGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBkZWFjdGl2YXRlSW5wdXRSaXBwbGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBkZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENGb3JtRmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2NsaWNrJywgdGhpcy5jbGljayk7XG4gICAgfTtcbiAgICBNRENGb3JtRmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcignY2xpY2snLCB0aGlzLmNsaWNrKTtcbiAgICB9O1xuICAgIE1EQ0Zvcm1GaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZUNsaWNrID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWN0aXZhdGVJbnB1dFJpcHBsZSgpO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuYWRhcHRlci5kZWFjdGl2YXRlSW5wdXRSaXBwbGUoKTtcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICByZXR1cm4gTURDRm9ybUZpZWxkRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDRm9ybUZpZWxkRm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ0Zvcm1GaWVsZEZvdW5kYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3VuZGF0aW9uLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENDb21wb25lbnQgfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgTURDRm9ybUZpZWxkRm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG52YXIgTURDRm9ybUZpZWxkID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENGb3JtRmllbGQsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDRm9ybUZpZWxkKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ0Zvcm1GaWVsZC5hdHRhY2hUbyA9IGZ1bmN0aW9uIChyb290KSB7XG4gICAgICAgIHJldHVybiBuZXcgTURDRm9ybUZpZWxkKHJvb3QpO1xuICAgIH07XG4gICAgTURDRm9ybUZpZWxkLnByb3RvdHlwZS5sYWJlbEVsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgTEFCRUxfU0VMRUNUT1IgPSBNRENGb3JtRmllbGRGb3VuZGF0aW9uLnN0cmluZ3MuTEFCRUxfU0VMRUNUT1I7XG4gICAgICAgIHJldHVybiB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihMQUJFTF9TRUxFQ1RPUik7XG4gICAgfTtcbiAgICBNRENGb3JtRmllbGQucHJvdG90eXBlLmdldERlZmF1bHRGb3VuZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBETyBOT1QgSU5MSU5FIHRoaXMgdmFyaWFibGUuIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBmb3VuZGF0aW9ucyB0YWtlIGEgUGFydGlhbDxNRENGb29BZGFwdGVyPi5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHdlIGRvbid0IGFjY2lkZW50YWxseSBvbWl0IGFueSBtZXRob2RzLCB3ZSBuZWVkIGEgc2VwYXJhdGUsIHN0cm9uZ2x5IHR5cGVkIGFkYXB0ZXIgdmFyaWFibGUuXG4gICAgICAgIHZhciBhZGFwdGVyID0ge1xuICAgICAgICAgICAgYWN0aXZhdGVJbnB1dFJpcHBsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pbnB1dCAmJiBfdGhpcy5pbnB1dC5yaXBwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW5wdXQucmlwcGxlLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlYWN0aXZhdGVJbnB1dFJpcHBsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5pbnB1dCAmJiBfdGhpcy5pbnB1dC5yaXBwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuaW5wdXQucmlwcGxlLmRlYWN0aXZhdGUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGFiZWxFbCA9IF90aGlzLmxhYmVsRWwoKTtcbiAgICAgICAgICAgICAgICBpZiAobGFiZWxFbCkge1xuICAgICAgICAgICAgICAgICAgICBsYWJlbEVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlcik7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHZhciBsYWJlbEVsID0gX3RoaXMubGFiZWxFbCgpO1xuICAgICAgICAgICAgICAgIGlmIChsYWJlbEVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGxhYmVsRWwuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IE1EQ0Zvcm1GaWVsZEZvdW5kYXRpb24oYWRhcHRlcik7XG4gICAgfTtcbiAgICByZXR1cm4gTURDRm9ybUZpZWxkO1xufShNRENDb21wb25lbnQpKTtcbmV4cG9ydCB7IE1EQ0Zvcm1GaWVsZCB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9uZW50LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xudmFyIGNzc0NsYXNzZXMgPSB7XG4gICAgTElORV9SSVBQTEVfQUNUSVZFOiAnbWRjLWxpbmUtcmlwcGxlLS1hY3RpdmUnLFxuICAgIExJTkVfUklQUExFX0RFQUNUSVZBVElORzogJ21kYy1saW5lLXJpcHBsZS0tZGVhY3RpdmF0aW5nJyxcbn07XG5leHBvcnQgeyBjc3NDbGFzc2VzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBjc3NDbGFzc2VzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xudmFyIE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENMaW5lUmlwcGxlRm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENMaW5lUmlwcGxlRm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENMaW5lUmlwcGxlRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy50cmFuc2l0aW9uRW5kSGFuZGxlciA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVRyYW5zaXRpb25FbmQoZXZ0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTGluZVJpcHBsZUZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTGluZVJpcHBsZUZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBNRENMaW5lUmlwcGxlQWRhcHRlcn0gZm9yIHR5cGluZyBpbmZvcm1hdGlvbiBvbiBwYXJhbWV0ZXJzIGFuZCByZXR1cm4gdHlwZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgc2V0U3R5bGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlckV2ZW50SGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGRlcmVnaXN0ZXJFdmVudEhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDTGluZVJpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZWdpc3RlckV2ZW50SGFuZGxlcigndHJhbnNpdGlvbmVuZCcsIHRoaXMudHJhbnNpdGlvbkVuZEhhbmRsZXIpO1xuICAgIH07XG4gICAgTURDTGluZVJpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVyRXZlbnRIYW5kbGVyKCd0cmFuc2l0aW9uZW5kJywgdGhpcy50cmFuc2l0aW9uRW5kSGFuZGxlcik7XG4gICAgfTtcbiAgICBNRENMaW5lUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhjc3NDbGFzc2VzLkxJTkVfUklQUExFX0RFQUNUSVZBVElORyk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjc3NDbGFzc2VzLkxJTkVfUklQUExFX0FDVElWRSk7XG4gICAgfTtcbiAgICBNRENMaW5lUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0UmlwcGxlQ2VudGVyID0gZnVuY3Rpb24gKHhDb29yZGluYXRlKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRTdHlsZSgndHJhbnNmb3JtLW9yaWdpbicsIHhDb29yZGluYXRlICsgXCJweCBjZW50ZXJcIik7XG4gICAgfTtcbiAgICBNRENMaW5lUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKGNzc0NsYXNzZXMuTElORV9SSVBQTEVfREVBQ1RJVkFUSU5HKTtcbiAgICB9O1xuICAgIE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVUcmFuc2l0aW9uRW5kID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAvLyBXYWl0IGZvciB0aGUgbGluZSByaXBwbGUgdG8gYmUgZWl0aGVyIHRyYW5zcGFyZW50IG9yIG9wYXF1ZVxuICAgICAgICAvLyBiZWZvcmUgZW1pdHRpbmcgdGhlIGFuaW1hdGlvbiBlbmQgZXZlbnRcbiAgICAgICAgdmFyIGlzRGVhY3RpdmF0aW5nID0gdGhpcy5hZGFwdGVyLmhhc0NsYXNzKGNzc0NsYXNzZXMuTElORV9SSVBQTEVfREVBQ1RJVkFUSU5HKTtcbiAgICAgICAgaWYgKGV2dC5wcm9wZXJ0eU5hbWUgPT09ICdvcGFjaXR5Jykge1xuICAgICAgICAgICAgaWYgKGlzRGVhY3RpdmF0aW5nKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuTElORV9SSVBQTEVfQUNUSVZFKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoY3NzQ2xhc3Nlcy5MSU5FX1JJUFBMRV9ERUFDVElWQVRJTkcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTURDTGluZVJpcHBsZUZvdW5kYXRpb247XG59KE1EQ0ZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ0xpbmVSaXBwbGVGb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDTGluZVJpcHBsZUZvdW5kYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3VuZGF0aW9uLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENDb21wb25lbnQgfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgTURDTGluZVJpcHBsZUZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xudmFyIE1EQ0xpbmVSaXBwbGUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ0xpbmVSaXBwbGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDTGluZVJpcHBsZSgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBNRENMaW5lUmlwcGxlLmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENMaW5lUmlwcGxlKHJvb3QpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQWN0aXZhdGVzIHRoZSBsaW5lIHJpcHBsZVxuICAgICAqL1xuICAgIE1EQ0xpbmVSaXBwbGUucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uYWN0aXZhdGUoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIERlYWN0aXZhdGVzIHRoZSBsaW5lIHJpcHBsZVxuICAgICAqL1xuICAgIE1EQ0xpbmVSaXBwbGUucHJvdG90eXBlLmRlYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5kZWFjdGl2YXRlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0cmFuc2Zvcm0gb3JpZ2luIGdpdmVuIGEgdXNlcidzIGNsaWNrIGxvY2F0aW9uLlxuICAgICAqIFRoZSBgcmlwcGxlQ2VudGVyYCBpcyB0aGUgeC1jb29yZGluYXRlIG9mIHRoZSBtaWRkbGUgb2YgdGhlIHJpcHBsZS5cbiAgICAgKi9cbiAgICBNRENMaW5lUmlwcGxlLnByb3RvdHlwZS5zZXRSaXBwbGVDZW50ZXIgPSBmdW5jdGlvbiAoeENvb3JkaW5hdGUpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFJpcHBsZUNlbnRlcih4Q29vcmRpbmF0ZSk7XG4gICAgfTtcbiAgICBNRENMaW5lUmlwcGxlLnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IHtcbiAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgc2V0U3R5bGU6IGZ1bmN0aW9uIChwcm9wZXJ0eU5hbWUsIHZhbHVlKSB7IHJldHVybiBfdGhpcy5yb290LnN0eWxlLnNldFByb3BlcnR5KHByb3BlcnR5TmFtZSwgdmFsdWUpOyB9LFxuICAgICAgICAgICAgcmVnaXN0ZXJFdmVudEhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7IHJldHVybiBfdGhpcy5saXN0ZW4oZXZ0VHlwZSwgaGFuZGxlcik7IH0sXG4gICAgICAgICAgICBkZXJlZ2lzdGVyRXZlbnRIYW5kbGVyOiBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlcikgeyByZXR1cm4gX3RoaXMudW5saXN0ZW4oZXZ0VHlwZSwgaGFuZGxlcik7IH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgICAgIHJldHVybiBuZXcgTURDTGluZVJpcHBsZUZvdW5kYXRpb24oYWRhcHRlcik7XG4gICAgfTtcbiAgICByZXR1cm4gTURDTGluZVJpcHBsZTtcbn0oTURDQ29tcG9uZW50KSk7XG5leHBvcnQgeyBNRENMaW5lUmlwcGxlIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb25lbnQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgc3RyaW5ncyA9IHtcbiAgICBOT1RDSF9FTEVNRU5UX1NFTEVDVE9SOiAnLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoJyxcbn07XG52YXIgbnVtYmVycyA9IHtcbiAgICAvLyBUaGlzIHNob3VsZCBzdGF5IGluIHN5bmMgd2l0aCAkbWRjLW5vdGNoZWQtb3V0bGluZS1wYWRkaW5nICogMi5cbiAgICBOT1RDSF9FTEVNRU5UX1BBRERJTkc6IDgsXG59O1xudmFyIGNzc0NsYXNzZXMgPSB7XG4gICAgTk9fTEFCRUw6ICdtZGMtbm90Y2hlZC1vdXRsaW5lLS1uby1sYWJlbCcsXG4gICAgT1VUTElORV9OT1RDSEVEOiAnbWRjLW5vdGNoZWQtb3V0bGluZS0tbm90Y2hlZCcsXG4gICAgT1VUTElORV9VUEdSQURFRDogJ21kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkJyxcbn07XG5leHBvcnQgeyBjc3NDbGFzc2VzLCBudW1iZXJzLCBzdHJpbmdzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBjc3NDbGFzc2VzLCBudW1iZXJzLCBzdHJpbmdzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xudmFyIE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uLmRlZmF1bHRBZGFwdGVyKSwgYWRhcHRlcikpIHx8IHRoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENOb3RjaGVkT3V0bGluZUZvdW5kYXRpb24sIFwic3RyaW5nc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ3M7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uLCBcImNzc0NsYXNzZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbiwgXCJudW1iZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVycztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENOb3RjaGVkT3V0bGluZUZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBNRENOb3RjaGVkT3V0bGluZUFkYXB0ZXJ9IGZvciB0eXBpbmcgaW5mb3JtYXRpb24gb24gcGFyYW1ldGVycyBhbmQgcmV0dXJuIHR5cGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgc2V0Tm90Y2hXaWR0aFByb3BlcnR5OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlTm90Y2hXaWR0aFByb3BlcnR5OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIG91dGxpbmUgbm90Y2hlZCBzZWxlY3RvciBhbmQgdXBkYXRlcyB0aGUgbm90Y2ggd2lkdGggY2FsY3VsYXRlZCBiYXNlZCBvZmYgb2Ygbm90Y2hXaWR0aC5cbiAgICAgKi9cbiAgICBNRENOb3RjaGVkT3V0bGluZUZvdW5kYXRpb24ucHJvdG90eXBlLm5vdGNoID0gZnVuY3Rpb24gKG5vdGNoV2lkdGgpIHtcbiAgICAgICAgdmFyIE9VVExJTkVfTk9UQ0hFRCA9IE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbi5jc3NDbGFzc2VzLk9VVExJTkVfTk9UQ0hFRDtcbiAgICAgICAgaWYgKG5vdGNoV2lkdGggPiAwKSB7XG4gICAgICAgICAgICBub3RjaFdpZHRoICs9IG51bWJlcnMuTk9UQ0hfRUxFTUVOVF9QQURESU5HOyAvLyBBZGQgcGFkZGluZyBmcm9tIGxlZnQvcmlnaHQuXG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldE5vdGNoV2lkdGhQcm9wZXJ0eShub3RjaFdpZHRoKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKE9VVExJTkVfTk9UQ0hFRCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZW1vdmVzIG5vdGNoZWQgb3V0bGluZSBzZWxlY3RvciB0byBjbG9zZSB0aGUgbm90Y2ggaW4gdGhlIG91dGxpbmUuXG4gICAgICovXG4gICAgTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uLnByb3RvdHlwZS5jbG9zZU5vdGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgT1VUTElORV9OT1RDSEVEID0gTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uLmNzc0NsYXNzZXMuT1VUTElORV9OT1RDSEVEO1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoT1VUTElORV9OT1RDSEVEKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZU5vdGNoV2lkdGhQcm9wZXJ0eSgpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDQ29tcG9uZW50IH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Zsb2F0aW5nLWxhYmVsL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgY3NzQ2xhc3Nlcywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG52YXIgTURDTm90Y2hlZE91dGxpbmUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ05vdGNoZWRPdXRsaW5lLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ05vdGNoZWRPdXRsaW5lKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ05vdGNoZWRPdXRsaW5lLmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENOb3RjaGVkT3V0bGluZShyb290KTtcbiAgICB9O1xuICAgIE1EQ05vdGNoZWRPdXRsaW5lLnByb3RvdHlwZS5pbml0aWFsU3luY1dpdGhET00gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMubm90Y2hFbGVtZW50ID1cbiAgICAgICAgICAgIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuTk9UQ0hfRUxFTUVOVF9TRUxFQ1RPUik7XG4gICAgICAgIHZhciBsYWJlbCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKCcuJyArIE1EQ0Zsb2F0aW5nTGFiZWxGb3VuZGF0aW9uLmNzc0NsYXNzZXMuUk9PVCk7XG4gICAgICAgIGlmIChsYWJlbCkge1xuICAgICAgICAgICAgbGFiZWwuc3R5bGUudHJhbnNpdGlvbkR1cmF0aW9uID0gJzBzJztcbiAgICAgICAgICAgIHRoaXMucm9vdC5jbGFzc0xpc3QuYWRkKGNzc0NsYXNzZXMuT1VUTElORV9VUEdSQURFRCk7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGxhYmVsLnN0eWxlLnRyYW5zaXRpb25EdXJhdGlvbiA9ICcnO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LmFkZChjc3NDbGFzc2VzLk5PX0xBQkVMKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBjbGFzc2VzIGFuZCBzdHlsZXMgdG8gb3BlbiB0aGUgbm90Y2ggdG8gdGhlIHNwZWNpZmllZCB3aWR0aC5cbiAgICAgKiBAcGFyYW0gbm90Y2hXaWR0aCBUaGUgbm90Y2ggd2lkdGggaW4gdGhlIG91dGxpbmUuXG4gICAgICovXG4gICAgTURDTm90Y2hlZE91dGxpbmUucHJvdG90eXBlLm5vdGNoID0gZnVuY3Rpb24gKG5vdGNoV2lkdGgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLm5vdGNoKG5vdGNoV2lkdGgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyBjbGFzc2VzIGFuZCBzdHlsZXMgdG8gY2xvc2UgdGhlIG5vdGNoLlxuICAgICAqL1xuICAgIE1EQ05vdGNoZWRPdXRsaW5lLnByb3RvdHlwZS5jbG9zZU5vdGNoID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uY2xvc2VOb3RjaCgpO1xuICAgIH07XG4gICAgTURDTm90Y2hlZE91dGxpbmUucHJvdG90eXBlLmdldERlZmF1bHRGb3VuZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBETyBOT1QgSU5MSU5FIHRoaXMgdmFyaWFibGUuIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBmb3VuZGF0aW9ucyB0YWtlIGEgUGFydGlhbDxNRENGb29BZGFwdGVyPi5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHdlIGRvbid0IGFjY2lkZW50YWxseSBvbWl0IGFueSBtZXRob2RzLCB3ZSBuZWVkIGEgc2VwYXJhdGUsIHN0cm9uZ2x5IHR5cGVkIGFkYXB0ZXIgdmFyaWFibGUuXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgIHZhciBhZGFwdGVyID0ge1xuICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLnJvb3QuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgc2V0Tm90Y2hXaWR0aFByb3BlcnR5OiBmdW5jdGlvbiAod2lkdGgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5ub3RjaEVsZW1lbnQuc3R5bGUuc2V0UHJvcGVydHkoJ3dpZHRoJywgd2lkdGggKyAncHgnKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmVOb3RjaFdpZHRoUHJvcGVydHk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5ub3RjaEVsZW1lbnQuc3R5bGUucmVtb3ZlUHJvcGVydHkoJ3dpZHRoJyk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICByZXR1cm4gbmV3IE1EQ05vdGNoZWRPdXRsaW5lRm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENOb3RjaGVkT3V0bGluZTtcbn0oTURDQ29tcG9uZW50KSk7XG5leHBvcnQgeyBNRENOb3RjaGVkT3V0bGluZSB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9uZW50LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENDb21wb25lbnQgfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgYXBwbHlQYXNzaXZlIH0gZnJvbSAnQG1hdGVyaWFsL2RvbS9ldmVudHMnO1xuaW1wb3J0IHsgbWF0Y2hlcyB9IGZyb20gJ0BtYXRlcmlhbC9kb20vcG9ueWZpbGwnO1xuaW1wb3J0IHsgTURDUmlwcGxlRm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG5pbXBvcnQgKiBhcyB1dGlsIGZyb20gJy4vdXRpbCc7XG52YXIgTURDUmlwcGxlID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENSaXBwbGUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDUmlwcGxlKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuZGlzYWJsZWQgPSBmYWxzZTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBNRENSaXBwbGUuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCwgb3B0cykge1xuICAgICAgICBpZiAob3B0cyA9PT0gdm9pZCAwKSB7IG9wdHMgPSB7IGlzVW5ib3VuZGVkOiB1bmRlZmluZWQgfTsgfVxuICAgICAgICB2YXIgcmlwcGxlID0gbmV3IE1EQ1JpcHBsZShyb290KTtcbiAgICAgICAgLy8gT25seSBvdmVycmlkZSB1bmJvdW5kZWQgYmVoYXZpb3IgaWYgb3B0aW9uIGlzIGV4cGxpY2l0bHkgc3BlY2lmaWVkXG4gICAgICAgIGlmIChvcHRzLmlzVW5ib3VuZGVkICE9PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAgIHJpcHBsZS51bmJvdW5kZWQgPSBvcHRzLmlzVW5ib3VuZGVkO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiByaXBwbGU7XG4gICAgfTtcbiAgICBNRENSaXBwbGUuY3JlYXRlQWRhcHRlciA9IGZ1bmN0aW9uIChpbnN0YW5jZSkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIGluc3RhbmNlLnJvb3QuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgYnJvd3NlclN1cHBvcnRzQ3NzVmFyczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdXRpbC5zdXBwb3J0c0Nzc1ZhcmlhYmxlcyh3aW5kb3cpOyB9LFxuICAgICAgICAgICAgY29tcHV0ZUJvdW5kaW5nUmVjdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gaW5zdGFuY2Uucm9vdC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTsgfSxcbiAgICAgICAgICAgIGNvbnRhaW5zRXZlbnRUYXJnZXQ6IGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIGluc3RhbmNlLnJvb3QuY29udGFpbnModGFyZ2V0KTsgfSxcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJEb2N1bWVudEludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlciwgYXBwbHlQYXNzaXZlKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlLnJvb3RcbiAgICAgICAgICAgICAgICAgICAgLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlciwgYXBwbHlQYXNzaXZlKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJSZXNpemVIYW5kbGVyOiBmdW5jdGlvbiAoaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJywgaGFuZGxlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0V2luZG93UGFnZU9mZnNldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiAoeyB4OiB3aW5kb3cucGFnZVhPZmZzZXQsIHk6IHdpbmRvdy5wYWdlWU9mZnNldCB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1N1cmZhY2VBY3RpdmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hdGNoZXMoaW5zdGFuY2Uucm9vdCwgJzphY3RpdmUnKTsgfSxcbiAgICAgICAgICAgIGlzU3VyZmFjZURpc2FibGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBCb29sZWFuKGluc3RhbmNlLmRpc2FibGVkKTsgfSxcbiAgICAgICAgICAgIGlzVW5ib3VuZGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBCb29sZWFuKGluc3RhbmNlLnVuYm91bmRlZCk7IH0sXG4gICAgICAgICAgICByZWdpc3RlckRvY3VtZW50SW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluc3RhbmNlLnJvb3RcbiAgICAgICAgICAgICAgICAgICAgLmFkZEV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlciwgYXBwbHlQYXNzaXZlKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVyUmVzaXplSGFuZGxlcjogZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBpbnN0YW5jZS5yb290LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIHVwZGF0ZUNzc1ZhcmlhYmxlOiBmdW5jdGlvbiAodmFyTmFtZSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gaW5zdGFuY2Uucm9vdC5zdHlsZS5zZXRQcm9wZXJ0eSh2YXJOYW1lLCB2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1JpcHBsZS5wcm90b3R5cGUsIFwidW5ib3VuZGVkXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gQm9vbGVhbih0aGlzLmlzVW5ib3VuZGVkKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodW5ib3VuZGVkKSB7XG4gICAgICAgICAgICB0aGlzLmlzVW5ib3VuZGVkID0gQm9vbGVhbih1bmJvdW5kZWQpO1xuICAgICAgICAgICAgdGhpcy5zZXRVbmJvdW5kZWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1EQ1JpcHBsZS5wcm90b3R5cGUuYWN0aXZhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5hY3RpdmF0ZSgpO1xuICAgIH07XG4gICAgTURDUmlwcGxlLnByb3RvdHlwZS5kZWFjdGl2YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uZGVhY3RpdmF0ZSgpO1xuICAgIH07XG4gICAgTURDUmlwcGxlLnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5sYXlvdXQoKTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZS5wcm90b3R5cGUuZ2V0RGVmYXVsdEZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTURDUmlwcGxlRm91bmRhdGlvbihNRENSaXBwbGUuY3JlYXRlQWRhcHRlcih0aGlzKSk7XG4gICAgfTtcbiAgICBNRENSaXBwbGUucHJvdG90eXBlLmluaXRpYWxTeW5jV2l0aERPTSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHJvb3QgPSB0aGlzLnJvb3Q7XG4gICAgICAgIHRoaXMuaXNVbmJvdW5kZWQgPSAnbWRjUmlwcGxlSXNVbmJvdW5kZWQnIGluIHJvb3QuZGF0YXNldDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsb3N1cmUgQ29tcGlsZXIgdGhyb3dzIGFuIGFjY2VzcyBjb250cm9sIGVycm9yIHdoZW4gZGlyZWN0bHkgYWNjZXNzaW5nIGFcbiAgICAgKiBwcm90ZWN0ZWQgb3IgcHJpdmF0ZSBwcm9wZXJ0eSBpbnNpZGUgYSBnZXR0ZXIvc2V0dGVyLCBsaWtlIHVuYm91bmRlZCBhYm92ZS5cbiAgICAgKiBCeSBhY2Nlc3NpbmcgdGhlIHByb3RlY3RlZCBwcm9wZXJ0eSBpbnNpZGUgYSBtZXRob2QsIHdlIHNvbHZlIHRoYXQgcHJvYmxlbS5cbiAgICAgKiBUaGF0J3Mgd2h5IHRoaXMgZnVuY3Rpb24gZXhpc3RzLlxuICAgICAqL1xuICAgIE1EQ1JpcHBsZS5wcm90b3R5cGUuc2V0VW5ib3VuZGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0VW5ib3VuZGVkKEJvb2xlYW4odGhpcy5pc1VuYm91bmRlZCkpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1JpcHBsZTtcbn0oTURDQ29tcG9uZW50KSk7XG5leHBvcnQgeyBNRENSaXBwbGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmV4cG9ydCB2YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICAvLyBSaXBwbGUgaXMgYSBzcGVjaWFsIGNhc2Ugd2hlcmUgdGhlIFwicm9vdFwiIGNvbXBvbmVudCBpcyByZWFsbHkgYSBcIm1peGluXCIgb2Ygc29ydHMsXG4gICAgLy8gZ2l2ZW4gdGhhdCBpdCdzIGFuICd1cGdyYWRlJyB0byBhbiBleGlzdGluZyBjb21wb25lbnQuIFRoYXQgYmVpbmcgc2FpZCBpdCBpcyB0aGUgcm9vdFxuICAgIC8vIENTUyBjbGFzcyB0aGF0IGFsbCBvdGhlciBDU1MgY2xhc3NlcyBkZXJpdmUgZnJvbS5cbiAgICBCR19GT0NVU0VEOiAnbWRjLXJpcHBsZS11cGdyYWRlZC0tYmFja2dyb3VuZC1mb2N1c2VkJyxcbiAgICBGR19BQ1RJVkFUSU9OOiAnbWRjLXJpcHBsZS11cGdyYWRlZC0tZm9yZWdyb3VuZC1hY3RpdmF0aW9uJyxcbiAgICBGR19ERUFDVElWQVRJT046ICdtZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWRlYWN0aXZhdGlvbicsXG4gICAgUk9PVDogJ21kYy1yaXBwbGUtdXBncmFkZWQnLFxuICAgIFVOQk9VTkRFRDogJ21kYy1yaXBwbGUtdXBncmFkZWQtLXVuYm91bmRlZCcsXG59O1xuZXhwb3J0IHZhciBzdHJpbmdzID0ge1xuICAgIFZBUl9GR19TQ0FMRTogJy0tbWRjLXJpcHBsZS1mZy1zY2FsZScsXG4gICAgVkFSX0ZHX1NJWkU6ICctLW1kYy1yaXBwbGUtZmctc2l6ZScsXG4gICAgVkFSX0ZHX1RSQU5TTEFURV9FTkQ6ICctLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZCcsXG4gICAgVkFSX0ZHX1RSQU5TTEFURV9TVEFSVDogJy0tbWRjLXJpcHBsZS1mZy10cmFuc2xhdGUtc3RhcnQnLFxuICAgIFZBUl9MRUZUOiAnLS1tZGMtcmlwcGxlLWxlZnQnLFxuICAgIFZBUl9UT1A6ICctLW1kYy1yaXBwbGUtdG9wJyxcbn07XG5leHBvcnQgdmFyIG51bWJlcnMgPSB7XG4gICAgREVBQ1RJVkFUSU9OX1RJTUVPVVRfTVM6IDIyNSxcbiAgICBGR19ERUFDVElWQVRJT05fTVM6IDE1MCxcbiAgICBJTklUSUFMX09SSUdJTl9TQ0FMRTogMC42LFxuICAgIFBBRERJTkc6IDEwLFxuICAgIFRBUF9ERUxBWV9NUzogMzAwLCAvLyBEZWxheSBiZXR3ZWVuIHRvdWNoIGFuZCBzaW11bGF0ZWQgbW91c2UgZXZlbnRzIG9uIHRvdWNoIGRldmljZXNcbn07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgY3NzQ2xhc3NlcywgbnVtYmVycywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IGdldE5vcm1hbGl6ZWRFdmVudENvb3JkcyB9IGZyb20gJy4vdXRpbCc7XG4vLyBBY3RpdmF0aW9uIGV2ZW50cyByZWdpc3RlcmVkIG9uIHRoZSByb290IGVsZW1lbnQgb2YgZWFjaCBpbnN0YW5jZSBmb3IgYWN0aXZhdGlvblxudmFyIEFDVElWQVRJT05fRVZFTlRfVFlQRVMgPSBbXG4gICAgJ3RvdWNoc3RhcnQnLCAncG9pbnRlcmRvd24nLCAnbW91c2Vkb3duJywgJ2tleWRvd24nLFxuXTtcbi8vIERlYWN0aXZhdGlvbiBldmVudHMgcmVnaXN0ZXJlZCBvbiBkb2N1bWVudEVsZW1lbnQgd2hlbiBhIHBvaW50ZXItcmVsYXRlZCBkb3duIGV2ZW50IG9jY3Vyc1xudmFyIFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTID0gW1xuICAgICd0b3VjaGVuZCcsICdwb2ludGVydXAnLCAnbW91c2V1cCcsICdjb250ZXh0bWVudScsXG5dO1xuLy8gc2ltdWx0YW5lb3VzIG5lc3RlZCBhY3RpdmF0aW9uc1xudmFyIGFjdGl2YXRlZFRhcmdldHMgPSBbXTtcbnZhciBNRENSaXBwbGVGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENSaXBwbGVGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1JpcHBsZUZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDUmlwcGxlRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5hY3RpdmF0aW9uQW5pbWF0aW9uSGFzRW5kZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuYWN0aXZhdGlvblRpbWVyID0gMDtcbiAgICAgICAgX3RoaXMuZmdEZWFjdGl2YXRpb25SZW1vdmFsVGltZXIgPSAwO1xuICAgICAgICBfdGhpcy5mZ1NjYWxlID0gJzAnO1xuICAgICAgICBfdGhpcy5mcmFtZSA9IHsgd2lkdGg6IDAsIGhlaWdodDogMCB9O1xuICAgICAgICBfdGhpcy5pbml0aWFsU2l6ZSA9IDA7XG4gICAgICAgIF90aGlzLmxheW91dEZyYW1lID0gMDtcbiAgICAgICAgX3RoaXMubWF4UmFkaXVzID0gMDtcbiAgICAgICAgX3RoaXMudW5ib3VuZGVkQ29vcmRzID0geyBsZWZ0OiAwLCB0b3A6IDAgfTtcbiAgICAgICAgX3RoaXMuYWN0aXZhdGlvblN0YXRlID0gX3RoaXMuZGVmYXVsdEFjdGl2YXRpb25TdGF0ZSgpO1xuICAgICAgICBfdGhpcy5hY3RpdmF0aW9uVGltZXJDYWxsYmFjayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmFjdGl2YXRpb25BbmltYXRpb25IYXNFbmRlZCA9IHRydWU7XG4gICAgICAgICAgICBfdGhpcy5ydW5EZWFjdGl2YXRpb25VWExvZ2ljSWZSZWFkeSgpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5hY3RpdmF0ZUhhbmRsZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgICAgX3RoaXMuYWN0aXZhdGVJbXBsKGUpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5kZWFjdGl2YXRlSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmRlYWN0aXZhdGVJbXBsKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmZvY3VzSGFuZGxlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZUZvY3VzKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmJsdXJIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlQmx1cigpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5yZXNpemVIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMubGF5b3V0KCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1JpcHBsZUZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDUmlwcGxlRm91bmRhdGlvbiwgXCJzdHJpbmdzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENSaXBwbGVGb3VuZGF0aW9uLCBcIm51bWJlcnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1JpcHBsZUZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBicm93c2VyU3VwcG9ydHNDc3NWYXJzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9LFxuICAgICAgICAgICAgICAgIGNvbXB1dGVCb3VuZGluZ1JlY3Q6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7IHRvcDogMCwgcmlnaHQ6IDAsIGJvdHRvbTogMCwgbGVmdDogMCwgd2lkdGg6IDAsIGhlaWdodDogMCB9KTsgfSxcbiAgICAgICAgICAgICAgICBjb250YWluc0V2ZW50VGFyZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9LFxuICAgICAgICAgICAgICAgIGRlcmVnaXN0ZXJEb2N1bWVudEludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBkZXJlZ2lzdGVyUmVzaXplSGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldFdpbmRvd1BhZ2VPZmZzZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7IHg6IDAsIHk6IDAgfSk7IH0sXG4gICAgICAgICAgICAgICAgaXNTdXJmYWNlQWN0aXZlOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9LFxuICAgICAgICAgICAgICAgIGlzU3VyZmFjZURpc2FibGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9LFxuICAgICAgICAgICAgICAgIGlzVW5ib3VuZGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9LFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyUmVzaXplSGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgdXBkYXRlQ3NzVmFyaWFibGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgc3VwcG9ydHNQcmVzc1JpcHBsZSA9IHRoaXMuc3VwcG9ydHNQcmVzc1JpcHBsZSgpO1xuICAgICAgICB0aGlzLnJlZ2lzdGVyUm9vdEhhbmRsZXJzKHN1cHBvcnRzUHJlc3NSaXBwbGUpO1xuICAgICAgICBpZiAoc3VwcG9ydHNQcmVzc1JpcHBsZSkge1xuICAgICAgICAgICAgdmFyIF9hID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLCBST09UXzEgPSBfYS5ST09ULCBVTkJPVU5ERURfMSA9IF9hLlVOQk9VTkRFRDtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlci5hZGRDbGFzcyhST09UXzEpO1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5hZGFwdGVyLmlzVW5ib3VuZGVkKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlci5hZGRDbGFzcyhVTkJPVU5ERURfMSk7XG4gICAgICAgICAgICAgICAgICAgIC8vIFVuYm91bmRlZCByaXBwbGVzIG5lZWQgbGF5b3V0IGxvZ2ljIGFwcGxpZWQgaW1tZWRpYXRlbHkgdG8gc2V0IGNvb3JkaW5hdGVzIGZvciBib3RoIHNoYWRlIGFuZCByaXBwbGVcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubGF5b3V0SW50ZXJuYWwoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHRoaXMuc3VwcG9ydHNQcmVzc1JpcHBsZSgpKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5hY3RpdmF0aW9uVGltZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5hY3RpdmF0aW9uVGltZXIpO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGlvblRpbWVyID0gMDtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLkZHX0FDVElWQVRJT04pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuZmdEZWFjdGl2YXRpb25SZW1vdmFsVGltZXIpIHtcbiAgICAgICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5mZ0RlYWN0aXZhdGlvblJlbW92YWxUaW1lcik7XG4gICAgICAgICAgICAgICAgdGhpcy5mZ0RlYWN0aXZhdGlvblJlbW92YWxUaW1lciA9IDA7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5GR19ERUFDVElWQVRJT04pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIF9hID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLCBST09UXzIgPSBfYS5ST09ULCBVTkJPVU5ERURfMiA9IF9hLlVOQk9VTkRFRDtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhST09UXzIpO1xuICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoVU5CT1VOREVEXzIpO1xuICAgICAgICAgICAgICAgIF90aGlzLnJlbW92ZUNzc1ZhcnMoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZGVyZWdpc3RlclJvb3RIYW5kbGVycygpO1xuICAgICAgICB0aGlzLmRlcmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVycygpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGV2dCBPcHRpb25hbCBldmVudCBjb250YWluaW5nIHBvc2l0aW9uIGluZm9ybWF0aW9uLlxuICAgICAqL1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmFjdGl2YXRlID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICB0aGlzLmFjdGl2YXRlSW1wbChldnQpO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuZGVhY3RpdmF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kZWFjdGl2YXRlSW1wbCgpO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUubGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5sYXlvdXRGcmFtZSkge1xuICAgICAgICAgICAgY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5sYXlvdXRGcmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5sYXlvdXRGcmFtZSA9IHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5sYXlvdXRJbnRlcm5hbCgpO1xuICAgICAgICAgICAgX3RoaXMubGF5b3V0RnJhbWUgPSAwO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLnNldFVuYm91bmRlZCA9IGZ1bmN0aW9uICh1bmJvdW5kZWQpIHtcbiAgICAgICAgdmFyIFVOQk9VTkRFRCA9IE1EQ1JpcHBsZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5VTkJPVU5ERUQ7XG4gICAgICAgIGlmICh1bmJvdW5kZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhVTkJPVU5ERUQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKFVOQk9VTkRFRCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuYWRhcHRlci5hZGRDbGFzcyhNRENSaXBwbGVGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQkdfRk9DVVNFRCk7IH0pO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlQmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLkJHX0ZPQ1VTRUQpOyB9KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdlIGNvbXB1dGUgdGhpcyBwcm9wZXJ0eSBzbyB0aGF0IHdlIGFyZSBub3QgcXVlcnlpbmcgaW5mb3JtYXRpb24gYWJvdXQgdGhlIGNsaWVudFxuICAgICAqIHVudGlsIHRoZSBwb2ludCBpbiB0aW1lIHdoZXJlIHRoZSBmb3VuZGF0aW9uIHJlcXVlc3RzIGl0LiBUaGlzIHByZXZlbnRzIHNjZW5hcmlvcyB3aGVyZVxuICAgICAqIGNsaWVudC1zaWRlIGZlYXR1cmUtZGV0ZWN0aW9uIG1heSBoYXBwZW4gdG9vIGVhcmx5LCBzdWNoIGFzIHdoZW4gY29tcG9uZW50cyBhcmUgcmVuZGVyZWQgb24gdGhlIHNlcnZlclxuICAgICAqIGFuZCB0aGVuIGluaXRpYWxpemVkIGF0IG1vdW50IHRpbWUgb24gdGhlIGNsaWVudC5cbiAgICAgKi9cbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5zdXBwb3J0c1ByZXNzUmlwcGxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmJyb3dzZXJTdXBwb3J0c0Nzc1ZhcnMoKTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmRlZmF1bHRBY3RpdmF0aW9uU3RhdGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhY3RpdmF0aW9uRXZlbnQ6IHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGhhc0RlYWN0aXZhdGlvblVYUnVuOiBmYWxzZSxcbiAgICAgICAgICAgIGlzQWN0aXZhdGVkOiBmYWxzZSxcbiAgICAgICAgICAgIGlzUHJvZ3JhbW1hdGljOiBmYWxzZSxcbiAgICAgICAgICAgIHdhc0FjdGl2YXRlZEJ5UG9pbnRlcjogZmFsc2UsXG4gICAgICAgICAgICB3YXNFbGVtZW50TWFkZUFjdGl2ZTogZmFsc2UsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBzdXBwb3J0c1ByZXNzUmlwcGxlIFBhc3NlZCBmcm9tIGluaXQgdG8gc2F2ZSBhIHJlZHVuZGFudCBmdW5jdGlvbiBjYWxsXG4gICAgICovXG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUucmVnaXN0ZXJSb290SGFuZGxlcnMgPSBmdW5jdGlvbiAoc3VwcG9ydHNQcmVzc1JpcHBsZSkge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgaWYgKHN1cHBvcnRzUHJlc3NSaXBwbGUpIHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xID0gX192YWx1ZXMoQUNUSVZBVElPTl9FVkVOVF9UWVBFUyksIEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMV8xID0gQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xLm5leHQoKTsgIUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMV8xLmRvbmU7IEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMV8xID0gQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgZXZ0VHlwZSA9IEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoZXZ0VHlwZSwgdGhpcy5hY3RpdmF0ZUhhbmRsZXIpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xXzEgJiYgIUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMV8xLmRvbmUgJiYgKF9hID0gQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xLnJldHVybikpIF9hLmNhbGwoQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuYWRhcHRlci5pc1VuYm91bmRlZCgpKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlZ2lzdGVyUmVzaXplSGFuZGxlcih0aGlzLnJlc2l6ZUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcignZm9jdXMnLCB0aGlzLmZvY3VzSGFuZGxlcik7XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcignYmx1cicsIHRoaXMuYmx1ckhhbmRsZXIpO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUucmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVycyA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmFyIGVfMiwgX2E7XG4gICAgICAgIGlmIChldnQudHlwZSA9PT0gJ2tleWRvd24nKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoJ2tleXVwJywgdGhpcy5kZWFjdGl2YXRlSGFuZGxlcik7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzEgPSBfX3ZhbHVlcyhQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFUyksIFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMSA9IFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzEubmV4dCgpOyAhUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMV8xLmRvbmU7IFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMSA9IFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgIHZhciBldnRUeXBlID0gUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJEb2N1bWVudEludGVyYWN0aW9uSGFuZGxlcihldnRUeXBlLCB0aGlzLmRlYWN0aXZhdGVIYW5kbGVyKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzFfMSAmJiAhUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMV8xLmRvbmUgJiYgKF9hID0gUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMS5yZXR1cm4pKSBfYS5jYWxsKFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzEpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmRlcmVnaXN0ZXJSb290SGFuZGxlcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzMsIF9hO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yID0gX192YWx1ZXMoQUNUSVZBVElPTl9FVkVOVF9UWVBFUyksIEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xID0gQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yLm5leHQoKTsgIUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xLmRvbmU7IEFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xID0gQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBldnRUeXBlID0gQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoZXZ0VHlwZSwgdGhpcy5hY3RpdmF0ZUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzNfMSkgeyBlXzMgPSB7IGVycm9yOiBlXzNfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yXzEgJiYgIUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xLmRvbmUgJiYgKF9hID0gQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yLnJldHVybikpIF9hLmNhbGwoQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcignZm9jdXMnLCB0aGlzLmZvY3VzSGFuZGxlcik7XG4gICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdibHVyJywgdGhpcy5ibHVySGFuZGxlcik7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNVbmJvdW5kZWQoKSkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmRlcmVnaXN0ZXJSZXNpemVIYW5kbGVyKHRoaXMucmVzaXplSGFuZGxlcik7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmRlcmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVycyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfNCwgX2E7XG4gICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyKCdrZXl1cCcsIHRoaXMuZGVhY3RpdmF0ZUhhbmRsZXIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMiA9IF9fdmFsdWVzKFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTKSwgUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xID0gUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMi5uZXh0KCk7ICFQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yXzEuZG9uZTsgUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xID0gUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZ0VHlwZSA9IFBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzJfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlckRvY3VtZW50SW50ZXJhY3Rpb25IYW5kbGVyKGV2dFR5cGUsIHRoaXMuZGVhY3RpdmF0ZUhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzRfMSkgeyBlXzQgPSB7IGVycm9yOiBlXzRfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMl8xICYmICFQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yXzEuZG9uZSAmJiAoX2EgPSBQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18yLnJldHVybikpIF9hLmNhbGwoUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfNCkgdGhyb3cgZV80LmVycm9yOyB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLnJlbW92ZUNzc1ZhcnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciByaXBwbGVTdHJpbmdzID0gTURDUmlwcGxlRm91bmRhdGlvbi5zdHJpbmdzO1xuICAgICAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKHJpcHBsZVN0cmluZ3MpO1xuICAgICAgICBrZXlzLmZvckVhY2goZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgaWYgKGtleS5pbmRleE9mKCdWQVJfJykgPT09IDApIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGFwdGVyLnVwZGF0ZUNzc1ZhcmlhYmxlKHJpcHBsZVN0cmluZ3Nba2V5XSwgbnVsbCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuYWN0aXZhdGVJbXBsID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLmlzU3VyZmFjZURpc2FibGVkKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgYWN0aXZhdGlvblN0YXRlID0gdGhpcy5hY3RpdmF0aW9uU3RhdGU7XG4gICAgICAgIGlmIChhY3RpdmF0aW9uU3RhdGUuaXNBY3RpdmF0ZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBBdm9pZCByZWFjdGluZyB0byBmb2xsb3ctb24gZXZlbnRzIGZpcmVkIGJ5IHRvdWNoIGRldmljZSBhZnRlciBhbiBhbHJlYWR5LXByb2Nlc3NlZCB1c2VyIGludGVyYWN0aW9uXG4gICAgICAgIHZhciBwcmV2aW91c0FjdGl2YXRpb25FdmVudCA9IHRoaXMucHJldmlvdXNBY3RpdmF0aW9uRXZlbnQ7XG4gICAgICAgIHZhciBpc1NhbWVJbnRlcmFjdGlvbiA9IHByZXZpb3VzQWN0aXZhdGlvbkV2ZW50ICYmIGV2dCAhPT0gdW5kZWZpbmVkICYmIHByZXZpb3VzQWN0aXZhdGlvbkV2ZW50LnR5cGUgIT09IGV2dC50eXBlO1xuICAgICAgICBpZiAoaXNTYW1lSW50ZXJhY3Rpb24pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBhY3RpdmF0aW9uU3RhdGUuaXNBY3RpdmF0ZWQgPSB0cnVlO1xuICAgICAgICBhY3RpdmF0aW9uU3RhdGUuaXNQcm9ncmFtbWF0aWMgPSBldnQgPT09IHVuZGVmaW5lZDtcbiAgICAgICAgYWN0aXZhdGlvblN0YXRlLmFjdGl2YXRpb25FdmVudCA9IGV2dDtcbiAgICAgICAgYWN0aXZhdGlvblN0YXRlLndhc0FjdGl2YXRlZEJ5UG9pbnRlciA9IGFjdGl2YXRpb25TdGF0ZS5pc1Byb2dyYW1tYXRpYyA/IGZhbHNlIDogZXZ0ICE9PSB1bmRlZmluZWQgJiYgKGV2dC50eXBlID09PSAnbW91c2Vkb3duJyB8fCBldnQudHlwZSA9PT0gJ3RvdWNoc3RhcnQnIHx8IGV2dC50eXBlID09PSAncG9pbnRlcmRvd24nKTtcbiAgICAgICAgdmFyIGhhc0FjdGl2YXRlZENoaWxkID0gZXZ0ICE9PSB1bmRlZmluZWQgJiZcbiAgICAgICAgICAgIGFjdGl2YXRlZFRhcmdldHMubGVuZ3RoID4gMCAmJlxuICAgICAgICAgICAgYWN0aXZhdGVkVGFyZ2V0cy5zb21lKGZ1bmN0aW9uICh0YXJnZXQpIHsgcmV0dXJuIF90aGlzLmFkYXB0ZXIuY29udGFpbnNFdmVudFRhcmdldCh0YXJnZXQpOyB9KTtcbiAgICAgICAgaWYgKGhhc0FjdGl2YXRlZENoaWxkKSB7XG4gICAgICAgICAgICAvLyBJbW1lZGlhdGVseSByZXNldCBhY3RpdmF0aW9uIHN0YXRlLCB3aGlsZSBwcmVzZXJ2aW5nIGxvZ2ljIHRoYXQgcHJldmVudHMgdG91Y2ggZm9sbG93LW9uIGV2ZW50c1xuICAgICAgICAgICAgdGhpcy5yZXNldEFjdGl2YXRpb25TdGF0ZSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChldnQgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICAgICAgYWN0aXZhdGVkVGFyZ2V0cy5wdXNoKGV2dC50YXJnZXQpO1xuICAgICAgICAgICAgdGhpcy5yZWdpc3RlckRlYWN0aXZhdGlvbkhhbmRsZXJzKGV2dCk7XG4gICAgICAgIH1cbiAgICAgICAgYWN0aXZhdGlvblN0YXRlLndhc0VsZW1lbnRNYWRlQWN0aXZlID0gdGhpcy5jaGVja0VsZW1lbnRNYWRlQWN0aXZlKGV2dCk7XG4gICAgICAgIGlmIChhY3RpdmF0aW9uU3RhdGUud2FzRWxlbWVudE1hZGVBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMuYW5pbWF0ZUFjdGl2YXRpb24oKTtcbiAgICAgICAgfVxuICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gUmVzZXQgYXJyYXkgb24gbmV4dCBmcmFtZSBhZnRlciB0aGUgY3VycmVudCBldmVudCBoYXMgaGFkIGEgY2hhbmNlIHRvIGJ1YmJsZSB0byBwcmV2ZW50IGFuY2VzdG9yIHJpcHBsZXNcbiAgICAgICAgICAgIGFjdGl2YXRlZFRhcmdldHMgPSBbXTtcbiAgICAgICAgICAgIGlmICghYWN0aXZhdGlvblN0YXRlLndhc0VsZW1lbnRNYWRlQWN0aXZlXG4gICAgICAgICAgICAgICAgJiYgZXZ0ICE9PSB1bmRlZmluZWRcbiAgICAgICAgICAgICAgICAmJiAoZXZ0LmtleSA9PT0gJyAnIHx8IGV2dC5rZXlDb2RlID09PSAzMikpIHtcbiAgICAgICAgICAgICAgICAvLyBJZiBzcGFjZSB3YXMgcHJlc3NlZCwgdHJ5IGFnYWluIHdpdGhpbiBhbiByQUYgY2FsbCB0byBkZXRlY3QgOmFjdGl2ZSwgYmVjYXVzZSBkaWZmZXJlbnQgVUFzIHJlcG9ydFxuICAgICAgICAgICAgICAgIC8vIGFjdGl2ZSBzdGF0ZXMgaW5jb25zaXN0ZW50bHkgd2hlbiB0aGV5J3JlIGNhbGxlZCB3aXRoaW4gZXZlbnQgaGFuZGxpbmcgY29kZTpcbiAgICAgICAgICAgICAgICAvLyAtIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTYzNTk3MVxuICAgICAgICAgICAgICAgIC8vIC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MTI5Mzc0MVxuICAgICAgICAgICAgICAgIC8vIFdlIHRyeSBmaXJzdCBvdXRzaWRlIHJBRiB0byBzdXBwb3J0IEVkZ2UsIHdoaWNoIGRvZXMgbm90IGV4aGliaXQgdGhpcyBwcm9ibGVtLCBidXQgd2lsbCBjcmFzaCBpZiBhIENTU1xuICAgICAgICAgICAgICAgIC8vIHZhcmlhYmxlIGlzIHNldCB3aXRoaW4gYSByQUYgY2FsbGJhY2sgZm9yIGEgc3VibWl0IGJ1dHRvbiBpbnRlcmFjdGlvbiAoIzIyNDEpLlxuICAgICAgICAgICAgICAgIGFjdGl2YXRpb25TdGF0ZS53YXNFbGVtZW50TWFkZUFjdGl2ZSA9IF90aGlzLmNoZWNrRWxlbWVudE1hZGVBY3RpdmUoZXZ0KTtcbiAgICAgICAgICAgICAgICBpZiAoYWN0aXZhdGlvblN0YXRlLndhc0VsZW1lbnRNYWRlQWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmFuaW1hdGVBY3RpdmF0aW9uKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKCFhY3RpdmF0aW9uU3RhdGUud2FzRWxlbWVudE1hZGVBY3RpdmUpIHtcbiAgICAgICAgICAgICAgICAvLyBSZXNldCBhY3RpdmF0aW9uIHN0YXRlIGltbWVkaWF0ZWx5IGlmIGVsZW1lbnQgd2FzIG5vdCBtYWRlIGFjdGl2ZS5cbiAgICAgICAgICAgICAgICBfdGhpcy5hY3RpdmF0aW9uU3RhdGUgPSBfdGhpcy5kZWZhdWx0QWN0aXZhdGlvblN0YXRlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUuY2hlY2tFbGVtZW50TWFkZUFjdGl2ZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgcmV0dXJuIChldnQgIT09IHVuZGVmaW5lZCAmJiBldnQudHlwZSA9PT0gJ2tleWRvd24nKSA/XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuaXNTdXJmYWNlQWN0aXZlKCkgOlxuICAgICAgICAgICAgdHJ1ZTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLmFuaW1hdGVBY3RpdmF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgX2EgPSBNRENSaXBwbGVGb3VuZGF0aW9uLnN0cmluZ3MsIFZBUl9GR19UUkFOU0xBVEVfU1RBUlQgPSBfYS5WQVJfRkdfVFJBTlNMQVRFX1NUQVJULCBWQVJfRkdfVFJBTlNMQVRFX0VORCA9IF9hLlZBUl9GR19UUkFOU0xBVEVfRU5EO1xuICAgICAgICB2YXIgX2IgPSBNRENSaXBwbGVGb3VuZGF0aW9uLmNzc0NsYXNzZXMsIEZHX0RFQUNUSVZBVElPTiA9IF9iLkZHX0RFQUNUSVZBVElPTiwgRkdfQUNUSVZBVElPTiA9IF9iLkZHX0FDVElWQVRJT047XG4gICAgICAgIHZhciBERUFDVElWQVRJT05fVElNRU9VVF9NUyA9IE1EQ1JpcHBsZUZvdW5kYXRpb24ubnVtYmVycy5ERUFDVElWQVRJT05fVElNRU9VVF9NUztcbiAgICAgICAgdGhpcy5sYXlvdXRJbnRlcm5hbCgpO1xuICAgICAgICB2YXIgdHJhbnNsYXRlU3RhcnQgPSAnJztcbiAgICAgICAgdmFyIHRyYW5zbGF0ZUVuZCA9ICcnO1xuICAgICAgICBpZiAoIXRoaXMuYWRhcHRlci5pc1VuYm91bmRlZCgpKSB7XG4gICAgICAgICAgICB2YXIgX2MgPSB0aGlzLmdldEZnVHJhbnNsYXRpb25Db29yZGluYXRlcygpLCBzdGFydFBvaW50ID0gX2Muc3RhcnRQb2ludCwgZW5kUG9pbnQgPSBfYy5lbmRQb2ludDtcbiAgICAgICAgICAgIHRyYW5zbGF0ZVN0YXJ0ID0gc3RhcnRQb2ludC54ICsgXCJweCwgXCIgKyBzdGFydFBvaW50LnkgKyBcInB4XCI7XG4gICAgICAgICAgICB0cmFuc2xhdGVFbmQgPSBlbmRQb2ludC54ICsgXCJweCwgXCIgKyBlbmRQb2ludC55ICsgXCJweFwiO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShWQVJfRkdfVFJBTlNMQVRFX1NUQVJULCB0cmFuc2xhdGVTdGFydCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShWQVJfRkdfVFJBTlNMQVRFX0VORCwgdHJhbnNsYXRlRW5kKTtcbiAgICAgICAgLy8gQ2FuY2VsIGFueSBvbmdvaW5nIGFjdGl2YXRpb24vZGVhY3RpdmF0aW9uIGFuaW1hdGlvbnNcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuYWN0aXZhdGlvblRpbWVyKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuZmdEZWFjdGl2YXRpb25SZW1vdmFsVGltZXIpO1xuICAgICAgICB0aGlzLnJtQm91bmRlZEFjdGl2YXRpb25DbGFzc2VzKCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhGR19ERUFDVElWQVRJT04pO1xuICAgICAgICAvLyBGb3JjZSBsYXlvdXQgaW4gb3JkZXIgdG8gcmUtdHJpZ2dlciB0aGUgYW5pbWF0aW9uLlxuICAgICAgICB0aGlzLmFkYXB0ZXIuY29tcHV0ZUJvdW5kaW5nUmVjdCgpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoRkdfQUNUSVZBVElPTik7XG4gICAgICAgIHRoaXMuYWN0aXZhdGlvblRpbWVyID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5hY3RpdmF0aW9uVGltZXJDYWxsYmFjaygpO1xuICAgICAgICB9LCBERUFDVElWQVRJT05fVElNRU9VVF9NUyk7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRGZ1RyYW5zbGF0aW9uQ29vcmRpbmF0ZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfYSA9IHRoaXMuYWN0aXZhdGlvblN0YXRlLCBhY3RpdmF0aW9uRXZlbnQgPSBfYS5hY3RpdmF0aW9uRXZlbnQsIHdhc0FjdGl2YXRlZEJ5UG9pbnRlciA9IF9hLndhc0FjdGl2YXRlZEJ5UG9pbnRlcjtcbiAgICAgICAgdmFyIHN0YXJ0UG9pbnQ7XG4gICAgICAgIGlmICh3YXNBY3RpdmF0ZWRCeVBvaW50ZXIpIHtcbiAgICAgICAgICAgIHN0YXJ0UG9pbnQgPSBnZXROb3JtYWxpemVkRXZlbnRDb29yZHMoYWN0aXZhdGlvbkV2ZW50LCB0aGlzLmFkYXB0ZXIuZ2V0V2luZG93UGFnZU9mZnNldCgpLCB0aGlzLmFkYXB0ZXIuY29tcHV0ZUJvdW5kaW5nUmVjdCgpKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHN0YXJ0UG9pbnQgPSB7XG4gICAgICAgICAgICAgICAgeDogdGhpcy5mcmFtZS53aWR0aCAvIDIsXG4gICAgICAgICAgICAgICAgeTogdGhpcy5mcmFtZS5oZWlnaHQgLyAyLFxuICAgICAgICAgICAgfTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDZW50ZXIgdGhlIGVsZW1lbnQgYXJvdW5kIHRoZSBzdGFydCBwb2ludC5cbiAgICAgICAgc3RhcnRQb2ludCA9IHtcbiAgICAgICAgICAgIHg6IHN0YXJ0UG9pbnQueCAtICh0aGlzLmluaXRpYWxTaXplIC8gMiksXG4gICAgICAgICAgICB5OiBzdGFydFBvaW50LnkgLSAodGhpcy5pbml0aWFsU2l6ZSAvIDIpLFxuICAgICAgICB9O1xuICAgICAgICB2YXIgZW5kUG9pbnQgPSB7XG4gICAgICAgICAgICB4OiAodGhpcy5mcmFtZS53aWR0aCAvIDIpIC0gKHRoaXMuaW5pdGlhbFNpemUgLyAyKSxcbiAgICAgICAgICAgIHk6ICh0aGlzLmZyYW1lLmhlaWdodCAvIDIpIC0gKHRoaXMuaW5pdGlhbFNpemUgLyAyKSxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHsgc3RhcnRQb2ludDogc3RhcnRQb2ludCwgZW5kUG9pbnQ6IGVuZFBvaW50IH07XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5ydW5EZWFjdGl2YXRpb25VWExvZ2ljSWZSZWFkeSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gVGhpcyBtZXRob2QgaXMgY2FsbGVkIGJvdGggd2hlbiBhIHBvaW50aW5nIGRldmljZSBpcyByZWxlYXNlZCwgYW5kIHdoZW4gdGhlIGFjdGl2YXRpb24gYW5pbWF0aW9uIGVuZHMuXG4gICAgICAgIC8vIFRoZSBkZWFjdGl2YXRpb24gYW5pbWF0aW9uIHNob3VsZCBvbmx5IHJ1biBhZnRlciBib3RoIG9mIHRob3NlIG9jY3VyLlxuICAgICAgICB2YXIgRkdfREVBQ1RJVkFUSU9OID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLkZHX0RFQUNUSVZBVElPTjtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5hY3RpdmF0aW9uU3RhdGUsIGhhc0RlYWN0aXZhdGlvblVYUnVuID0gX2EuaGFzRGVhY3RpdmF0aW9uVVhSdW4sIGlzQWN0aXZhdGVkID0gX2EuaXNBY3RpdmF0ZWQ7XG4gICAgICAgIHZhciBhY3RpdmF0aW9uSGFzRW5kZWQgPSBoYXNEZWFjdGl2YXRpb25VWFJ1biB8fCAhaXNBY3RpdmF0ZWQ7XG4gICAgICAgIGlmIChhY3RpdmF0aW9uSGFzRW5kZWQgJiYgdGhpcy5hY3RpdmF0aW9uQW5pbWF0aW9uSGFzRW5kZWQpIHtcbiAgICAgICAgICAgIHRoaXMucm1Cb3VuZGVkQWN0aXZhdGlvbkNsYXNzZXMoKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhGR19ERUFDVElWQVRJT04pO1xuICAgICAgICAgICAgdGhpcy5mZ0RlYWN0aXZhdGlvblJlbW92YWxUaW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoRkdfREVBQ1RJVkFUSU9OKTtcbiAgICAgICAgICAgIH0sIG51bWJlcnMuRkdfREVBQ1RJVkFUSU9OX01TKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUucm1Cb3VuZGVkQWN0aXZhdGlvbkNsYXNzZXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBGR19BQ1RJVkFUSU9OID0gTURDUmlwcGxlRm91bmRhdGlvbi5jc3NDbGFzc2VzLkZHX0FDVElWQVRJT047XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhGR19BQ1RJVkFUSU9OKTtcbiAgICAgICAgdGhpcy5hY3RpdmF0aW9uQW5pbWF0aW9uSGFzRW5kZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmNvbXB1dGVCb3VuZGluZ1JlY3QoKTtcbiAgICB9O1xuICAgIE1EQ1JpcHBsZUZvdW5kYXRpb24ucHJvdG90eXBlLnJlc2V0QWN0aXZhdGlvblN0YXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLnByZXZpb3VzQWN0aXZhdGlvbkV2ZW50ID0gdGhpcy5hY3RpdmF0aW9uU3RhdGUuYWN0aXZhdGlvbkV2ZW50O1xuICAgICAgICB0aGlzLmFjdGl2YXRpb25TdGF0ZSA9IHRoaXMuZGVmYXVsdEFjdGl2YXRpb25TdGF0ZSgpO1xuICAgICAgICAvLyBUb3VjaCBkZXZpY2VzIG1heSBmaXJlIGFkZGl0aW9uYWwgZXZlbnRzIGZvciB0aGUgc2FtZSBpbnRlcmFjdGlvbiB3aXRoaW4gYSBzaG9ydCB0aW1lLlxuICAgICAgICAvLyBTdG9yZSB0aGUgcHJldmlvdXMgZXZlbnQgdW50aWwgaXQncyBzYWZlIHRvIGFzc3VtZSB0aGF0IHN1YnNlcXVlbnQgZXZlbnRzIGFyZSBmb3IgbmV3IGludGVyYWN0aW9ucy5cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5wcmV2aW91c0FjdGl2YXRpb25FdmVudCA9IHVuZGVmaW5lZDsgfSwgTURDUmlwcGxlRm91bmRhdGlvbi5udW1iZXJzLlRBUF9ERUxBWV9NUyk7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5kZWFjdGl2YXRlSW1wbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGFjdGl2YXRpb25TdGF0ZSA9IHRoaXMuYWN0aXZhdGlvblN0YXRlO1xuICAgICAgICAvLyBUaGlzIGNhbiBoYXBwZW4gaW4gc2NlbmFyaW9zIHN1Y2ggYXMgd2hlbiB5b3UgaGF2ZSBhIGtleXVwIGV2ZW50IHRoYXQgYmx1cnMgdGhlIGVsZW1lbnQuXG4gICAgICAgIGlmICghYWN0aXZhdGlvblN0YXRlLmlzQWN0aXZhdGVkKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHN0YXRlID0gX19hc3NpZ24oe30sIGFjdGl2YXRpb25TdGF0ZSk7XG4gICAgICAgIGlmIChhY3RpdmF0aW9uU3RhdGUuaXNQcm9ncmFtbWF0aWMpIHtcbiAgICAgICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0ZURlYWN0aXZhdGlvbihzdGF0ZSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHRoaXMucmVzZXRBY3RpdmF0aW9uU3RhdGUoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuZGVyZWdpc3RlckRlYWN0aXZhdGlvbkhhbmRsZXJzKCk7XG4gICAgICAgICAgICByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmFjdGl2YXRpb25TdGF0ZS5oYXNEZWFjdGl2YXRpb25VWFJ1biA9IHRydWU7XG4gICAgICAgICAgICAgICAgX3RoaXMuYW5pbWF0ZURlYWN0aXZhdGlvbihzdGF0ZSk7XG4gICAgICAgICAgICAgICAgX3RoaXMucmVzZXRBY3RpdmF0aW9uU3RhdGUoKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS5hbmltYXRlRGVhY3RpdmF0aW9uID0gZnVuY3Rpb24gKF9hKSB7XG4gICAgICAgIHZhciB3YXNBY3RpdmF0ZWRCeVBvaW50ZXIgPSBfYS53YXNBY3RpdmF0ZWRCeVBvaW50ZXIsIHdhc0VsZW1lbnRNYWRlQWN0aXZlID0gX2Eud2FzRWxlbWVudE1hZGVBY3RpdmU7XG4gICAgICAgIGlmICh3YXNBY3RpdmF0ZWRCeVBvaW50ZXIgfHwgd2FzRWxlbWVudE1hZGVBY3RpdmUpIHtcbiAgICAgICAgICAgIHRoaXMucnVuRGVhY3RpdmF0aW9uVVhMb2dpY0lmUmVhZHkoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDUmlwcGxlRm91bmRhdGlvbi5wcm90b3R5cGUubGF5b3V0SW50ZXJuYWwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHRoaXMuZnJhbWUgPSB0aGlzLmFkYXB0ZXIuY29tcHV0ZUJvdW5kaW5nUmVjdCgpO1xuICAgICAgICB2YXIgbWF4RGltID0gTWF0aC5tYXgodGhpcy5mcmFtZS5oZWlnaHQsIHRoaXMuZnJhbWUud2lkdGgpO1xuICAgICAgICAvLyBTdXJmYWNlIGRpYW1ldGVyIGlzIHRyZWF0ZWQgZGlmZmVyZW50bHkgZm9yIHVuYm91bmRlZCB2cy4gYm91bmRlZCByaXBwbGVzLlxuICAgICAgICAvLyBVbmJvdW5kZWQgcmlwcGxlIGRpYW1ldGVyIGlzIGNhbGN1bGF0ZWQgc21hbGxlciBzaW5jZSB0aGUgc3VyZmFjZSBpcyBleHBlY3RlZCB0byBhbHJlYWR5IGJlIHBhZGRlZCBhcHByb3ByaWF0ZWx5XG4gICAgICAgIC8vIHRvIGV4dGVuZCB0aGUgaGl0Ym94LCBhbmQgdGhlIHJpcHBsZSBpcyBleHBlY3RlZCB0byBtZWV0IHRoZSBlZGdlcyBvZiB0aGUgcGFkZGVkIGhpdGJveCAod2hpY2ggaXMgdHlwaWNhbGx5XG4gICAgICAgIC8vIHNxdWFyZSkuIEJvdW5kZWQgcmlwcGxlcywgb24gdGhlIG90aGVyIGhhbmQsIGFyZSBmdWxseSBleHBlY3RlZCB0byBleHBhbmQgYmV5b25kIHRoZSBzdXJmYWNlJ3MgbG9uZ2VzdCBkaWFtZXRlclxuICAgICAgICAvLyAoY2FsY3VsYXRlZCBiYXNlZCBvbiB0aGUgZGlhZ29uYWwgcGx1cyBhIGNvbnN0YW50IHBhZGRpbmcpLCBhbmQgYXJlIGNsaXBwZWQgYXQgdGhlIHN1cmZhY2UncyBib3JkZXIgdmlhXG4gICAgICAgIC8vIGBvdmVyZmxvdzogaGlkZGVuYC5cbiAgICAgICAgdmFyIGdldEJvdW5kZWRSYWRpdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgaHlwb3RlbnVzZSA9IE1hdGguc3FydChNYXRoLnBvdyhfdGhpcy5mcmFtZS53aWR0aCwgMikgKyBNYXRoLnBvdyhfdGhpcy5mcmFtZS5oZWlnaHQsIDIpKTtcbiAgICAgICAgICAgIHJldHVybiBoeXBvdGVudXNlICsgTURDUmlwcGxlRm91bmRhdGlvbi5udW1iZXJzLlBBRERJTkc7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMubWF4UmFkaXVzID0gdGhpcy5hZGFwdGVyLmlzVW5ib3VuZGVkKCkgPyBtYXhEaW0gOiBnZXRCb3VuZGVkUmFkaXVzKCk7XG4gICAgICAgIC8vIFJpcHBsZSBpcyBzaXplZCBhcyBhIGZyYWN0aW9uIG9mIHRoZSBsYXJnZXN0IGRpbWVuc2lvbiBvZiB0aGUgc3VyZmFjZSwgdGhlbiBzY2FsZXMgdXAgdXNpbmcgYSBDU1Mgc2NhbGUgdHJhbnNmb3JtXG4gICAgICAgIHZhciBpbml0aWFsU2l6ZSA9IE1hdGguZmxvb3IobWF4RGltICogTURDUmlwcGxlRm91bmRhdGlvbi5udW1iZXJzLklOSVRJQUxfT1JJR0lOX1NDQUxFKTtcbiAgICAgICAgLy8gVW5ib3VuZGVkIHJpcHBsZSBzaXplIHNob3VsZCBhbHdheXMgYmUgZXZlbiBudW1iZXIgdG8gZXF1YWxseSBjZW50ZXIgYWxpZ24uXG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNVbmJvdW5kZWQoKSAmJiBpbml0aWFsU2l6ZSAlIDIgIT09IDApIHtcbiAgICAgICAgICAgIHRoaXMuaW5pdGlhbFNpemUgPSBpbml0aWFsU2l6ZSAtIDE7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmluaXRpYWxTaXplID0gaW5pdGlhbFNpemU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5mZ1NjYWxlID0gXCJcIiArIHRoaXMubWF4UmFkaXVzIC8gdGhpcy5pbml0aWFsU2l6ZTtcbiAgICAgICAgdGhpcy51cGRhdGVMYXlvdXRDc3NWYXJzKCk7XG4gICAgfTtcbiAgICBNRENSaXBwbGVGb3VuZGF0aW9uLnByb3RvdHlwZS51cGRhdGVMYXlvdXRDc3NWYXJzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX2EgPSBNRENSaXBwbGVGb3VuZGF0aW9uLnN0cmluZ3MsIFZBUl9GR19TSVpFID0gX2EuVkFSX0ZHX1NJWkUsIFZBUl9MRUZUID0gX2EuVkFSX0xFRlQsIFZBUl9UT1AgPSBfYS5WQVJfVE9QLCBWQVJfRkdfU0NBTEUgPSBfYS5WQVJfRkdfU0NBTEU7XG4gICAgICAgIHRoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShWQVJfRkdfU0laRSwgdGhpcy5pbml0aWFsU2l6ZSArIFwicHhcIik7XG4gICAgICAgIHRoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShWQVJfRkdfU0NBTEUsIHRoaXMuZmdTY2FsZSk7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNVbmJvdW5kZWQoKSkge1xuICAgICAgICAgICAgdGhpcy51bmJvdW5kZWRDb29yZHMgPSB7XG4gICAgICAgICAgICAgICAgbGVmdDogTWF0aC5yb3VuZCgodGhpcy5mcmFtZS53aWR0aCAvIDIpIC0gKHRoaXMuaW5pdGlhbFNpemUgLyAyKSksXG4gICAgICAgICAgICAgICAgdG9wOiBNYXRoLnJvdW5kKCh0aGlzLmZyYW1lLmhlaWdodCAvIDIpIC0gKHRoaXMuaW5pdGlhbFNpemUgLyAyKSksXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnVwZGF0ZUNzc1ZhcmlhYmxlKFZBUl9MRUZULCB0aGlzLnVuYm91bmRlZENvb3Jkcy5sZWZ0ICsgXCJweFwiKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci51cGRhdGVDc3NWYXJpYWJsZShWQVJfVE9QLCB0aGlzLnVuYm91bmRlZENvb3Jkcy50b3AgKyBcInB4XCIpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTURDUmlwcGxlRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDUmlwcGxlRm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ1JpcHBsZUZvdW5kYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3VuZGF0aW9uLmpzLm1hcCIsIi8qKlxuICogU3RvcmVzIHJlc3VsdCBmcm9tIHN1cHBvcnRzQ3NzVmFyaWFibGVzIHRvIGF2b2lkIHJlZHVuZGFudCBwcm9jZXNzaW5nIHRvXG4gKiBkZXRlY3QgQ1NTIGN1c3RvbSB2YXJpYWJsZSBzdXBwb3J0LlxuICovXG52YXIgc3VwcG9ydHNDc3NWYXJpYWJsZXNfO1xuZXhwb3J0IGZ1bmN0aW9uIHN1cHBvcnRzQ3NzVmFyaWFibGVzKHdpbmRvd09iaiwgZm9yY2VSZWZyZXNoKSB7XG4gICAgaWYgKGZvcmNlUmVmcmVzaCA9PT0gdm9pZCAwKSB7IGZvcmNlUmVmcmVzaCA9IGZhbHNlOyB9XG4gICAgdmFyIENTUyA9IHdpbmRvd09iai5DU1M7XG4gICAgdmFyIHN1cHBvcnRzQ3NzVmFycyA9IHN1cHBvcnRzQ3NzVmFyaWFibGVzXztcbiAgICBpZiAodHlwZW9mIHN1cHBvcnRzQ3NzVmFyaWFibGVzXyA9PT0gJ2Jvb2xlYW4nICYmICFmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgcmV0dXJuIHN1cHBvcnRzQ3NzVmFyaWFibGVzXztcbiAgICB9XG4gICAgdmFyIHN1cHBvcnRzRnVuY3Rpb25QcmVzZW50ID0gQ1NTICYmIHR5cGVvZiBDU1Muc3VwcG9ydHMgPT09ICdmdW5jdGlvbic7XG4gICAgaWYgKCFzdXBwb3J0c0Z1bmN0aW9uUHJlc2VudCkge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIHZhciBleHBsaWNpdGx5U3VwcG9ydHNDc3NWYXJzID0gQ1NTLnN1cHBvcnRzKCctLWNzcy12YXJzJywgJ3llcycpO1xuICAgIC8vIFNlZTogaHR0cHM6Ly9idWdzLndlYmtpdC5vcmcvc2hvd19idWcuY2dpP2lkPTE1NDY2OVxuICAgIC8vIFNlZTogUkVBRE1FIHNlY3Rpb24gb24gU2FmYXJpXG4gICAgdmFyIHdlQXJlRmVhdHVyZURldGVjdGluZ1NhZmFyaTEwcGx1cyA9IChDU1Muc3VwcG9ydHMoJygtLWNzcy12YXJzOiB5ZXMpJykgJiZcbiAgICAgICAgQ1NTLnN1cHBvcnRzKCdjb2xvcicsICcjMDAwMDAwMDAnKSk7XG4gICAgc3VwcG9ydHNDc3NWYXJzID1cbiAgICAgICAgZXhwbGljaXRseVN1cHBvcnRzQ3NzVmFycyB8fCB3ZUFyZUZlYXR1cmVEZXRlY3RpbmdTYWZhcmkxMHBsdXM7XG4gICAgaWYgKCFmb3JjZVJlZnJlc2gpIHtcbiAgICAgICAgc3VwcG9ydHNDc3NWYXJpYWJsZXNfID0gc3VwcG9ydHNDc3NWYXJzO1xuICAgIH1cbiAgICByZXR1cm4gc3VwcG9ydHNDc3NWYXJzO1xufVxuZXhwb3J0IGZ1bmN0aW9uIGdldE5vcm1hbGl6ZWRFdmVudENvb3JkcyhldnQsIHBhZ2VPZmZzZXQsIGNsaWVudFJlY3QpIHtcbiAgICBpZiAoIWV2dCkge1xuICAgICAgICByZXR1cm4geyB4OiAwLCB5OiAwIH07XG4gICAgfVxuICAgIHZhciB4ID0gcGFnZU9mZnNldC54LCB5ID0gcGFnZU9mZnNldC55O1xuICAgIHZhciBkb2N1bWVudFggPSB4ICsgY2xpZW50UmVjdC5sZWZ0O1xuICAgIHZhciBkb2N1bWVudFkgPSB5ICsgY2xpZW50UmVjdC50b3A7XG4gICAgdmFyIG5vcm1hbGl6ZWRYO1xuICAgIHZhciBub3JtYWxpemVkWTtcbiAgICAvLyBEZXRlcm1pbmUgdG91Y2ggcG9pbnQgcmVsYXRpdmUgdG8gdGhlIHJpcHBsZSBjb250YWluZXIuXG4gICAgaWYgKGV2dC50eXBlID09PSAndG91Y2hzdGFydCcpIHtcbiAgICAgICAgdmFyIHRvdWNoRXZlbnQgPSBldnQ7XG4gICAgICAgIG5vcm1hbGl6ZWRYID0gdG91Y2hFdmVudC5jaGFuZ2VkVG91Y2hlc1swXS5wYWdlWCAtIGRvY3VtZW50WDtcbiAgICAgICAgbm9ybWFsaXplZFkgPSB0b3VjaEV2ZW50LmNoYW5nZWRUb3VjaGVzWzBdLnBhZ2VZIC0gZG9jdW1lbnRZO1xuICAgIH1cbiAgICBlbHNlIHtcbiAgICAgICAgdmFyIG1vdXNlRXZlbnQgPSBldnQ7XG4gICAgICAgIG5vcm1hbGl6ZWRYID0gbW91c2VFdmVudC5wYWdlWCAtIGRvY3VtZW50WDtcbiAgICAgICAgbm9ybWFsaXplZFkgPSBtb3VzZUV2ZW50LnBhZ2VZIC0gZG9jdW1lbnRZO1xuICAgIH1cbiAgICByZXR1cm4geyB4OiBub3JtYWxpemVkWCwgeTogbm9ybWFsaXplZFkgfTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXV0aWwuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICBBTkNIT1I6ICdtZGMtbWVudS1zdXJmYWNlLS1hbmNob3InLFxuICAgIEFOSU1BVElOR19DTE9TRUQ6ICdtZGMtbWVudS1zdXJmYWNlLS1hbmltYXRpbmctY2xvc2VkJyxcbiAgICBBTklNQVRJTkdfT1BFTjogJ21kYy1tZW51LXN1cmZhY2UtLWFuaW1hdGluZy1vcGVuJyxcbiAgICBGSVhFRDogJ21kYy1tZW51LXN1cmZhY2UtLWZpeGVkJyxcbiAgICBJU19PUEVOX0JFTE9XOiAnbWRjLW1lbnUtc3VyZmFjZS0taXMtb3Blbi1iZWxvdycsXG4gICAgT1BFTjogJ21kYy1tZW51LXN1cmZhY2UtLW9wZW4nLFxuICAgIFJPT1Q6ICdtZGMtbWVudS1zdXJmYWNlJyxcbn07XG4vLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbnZhciBzdHJpbmdzID0ge1xuICAgIENMT1NFRF9FVkVOVDogJ01EQ01lbnVTdXJmYWNlOmNsb3NlZCcsXG4gICAgQ0xPU0lOR19FVkVOVDogJ01EQ01lbnVTdXJmYWNlOmNsb3NpbmcnLFxuICAgIE9QRU5FRF9FVkVOVDogJ01EQ01lbnVTdXJmYWNlOm9wZW5lZCcsXG4gICAgRk9DVVNBQkxFX0VMRU1FTlRTOiBbXG4gICAgICAgICdidXR0b246bm90KDpkaXNhYmxlZCknLFxuICAgICAgICAnW2hyZWZdOm5vdChbYXJpYS1kaXNhYmxlZD1cInRydWVcIl0pJyxcbiAgICAgICAgJ2lucHV0Om5vdCg6ZGlzYWJsZWQpJyxcbiAgICAgICAgJ3NlbGVjdDpub3QoOmRpc2FibGVkKScsXG4gICAgICAgICd0ZXh0YXJlYTpub3QoOmRpc2FibGVkKScsXG4gICAgICAgICdbdGFiaW5kZXhdOm5vdChbdGFiaW5kZXg9XCItMVwiXSk6bm90KFthcmlhLWRpc2FibGVkPVwidHJ1ZVwiXSknLFxuICAgIF0uam9pbignLCAnKSxcbn07XG4vLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xudmFyIG51bWJlcnMgPSB7XG4gICAgLyoqIFRvdGFsIGR1cmF0aW9uIG9mIG1lbnUtc3VyZmFjZSBvcGVuIGFuaW1hdGlvbi4gKi9cbiAgICBUUkFOU0lUSU9OX09QRU5fRFVSQVRJT046IDEyMCxcbiAgICAvKiogVG90YWwgZHVyYXRpb24gb2YgbWVudS1zdXJmYWNlIGNsb3NlIGFuaW1hdGlvbi4gKi9cbiAgICBUUkFOU0lUSU9OX0NMT1NFX0RVUkFUSU9OOiA3NSxcbiAgICAvKipcbiAgICAgKiBNYXJnaW4gbGVmdCB0byB0aGUgZWRnZSBvZiB0aGUgdmlld3BvcnQgd2hlbiBtZW51LXN1cmZhY2UgaXMgYXQgbWF4aW11bVxuICAgICAqIHBvc3NpYmxlIGhlaWdodC4gQWxzbyB1c2VkIGFzIGEgdmlld3BvcnQgbWFyZ2luLlxuICAgICAqL1xuICAgIE1BUkdJTl9UT19FREdFOiAzMixcbiAgICAvKipcbiAgICAgKiBSYXRpbyBvZiBhbmNob3Igd2lkdGggdG8gbWVudS1zdXJmYWNlIHdpZHRoIGZvciBzd2l0Y2hpbmcgZnJvbSBjb3JuZXJcbiAgICAgKiBwb3NpdGlvbmluZyB0byBjZW50ZXIgcG9zaXRpb25pbmcuXG4gICAgICovXG4gICAgQU5DSE9SX1RPX01FTlVfU1VSRkFDRV9XSURUSF9SQVRJTzogMC42NyxcbiAgICAvKipcbiAgICAgKiBBbW91bnQgb2YgdGltZSB0byB3YWl0IGJlZm9yZSByZXN0b3JpbmcgZm9jdXMgd2hlbiBjbG9zaW5nIHRoZSBtZW51XG4gICAgICogc3VyZmFjZS4gVGhpcyBpcyBpbXBvcnRhbnQgYmVjYXVzZSBpZiBhIHRvdWNoIGV2ZW50IHRyaWdnZXJlZCB0aGUgbWVudVxuICAgICAqIGNsb3NlLCBhbmQgdGhlIHN1YnNlcXVlbnQgbW91c2UgZXZlbnQgb2NjdXJzIGFmdGVyIGZvY3VzIGlzIHJlc3RvcmVkLCB0aGVuXG4gICAgICogdGhlIHJlc3RvcmVkIGZvY3VzIHdvdWxkIGJlIGxvc3QuXG4gICAgICovXG4gICAgVE9VQ0hfRVZFTlRfV0FJVF9NUzogMzAsXG59O1xuLyoqXG4gKiBFbnVtIGZvciBiaXRzIGluIHRoZSB7QHNlZSBDb3JuZXIpIGJpdG1hcC5cbiAqL1xudmFyIENvcm5lckJpdDtcbihmdW5jdGlvbiAoQ29ybmVyQml0KSB7XG4gICAgQ29ybmVyQml0W0Nvcm5lckJpdFtcIkJPVFRPTVwiXSA9IDFdID0gXCJCT1RUT01cIjtcbiAgICBDb3JuZXJCaXRbQ29ybmVyQml0W1wiQ0VOVEVSXCJdID0gMl0gPSBcIkNFTlRFUlwiO1xuICAgIENvcm5lckJpdFtDb3JuZXJCaXRbXCJSSUdIVFwiXSA9IDRdID0gXCJSSUdIVFwiO1xuICAgIENvcm5lckJpdFtDb3JuZXJCaXRbXCJGTElQX1JUTFwiXSA9IDhdID0gXCJGTElQX1JUTFwiO1xufSkoQ29ybmVyQml0IHx8IChDb3JuZXJCaXQgPSB7fSkpO1xuLyoqXG4gKiBFbnVtIGZvciByZXByZXNlbnRpbmcgYW4gZWxlbWVudCBjb3JuZXIgZm9yIHBvc2l0aW9uaW5nIHRoZSBtZW51LXN1cmZhY2UuXG4gKlxuICogVGhlIFNUQVJUIGNvbnN0YW50cyBtYXAgdG8gTEVGVCBpZiBlbGVtZW50IGRpcmVjdGlvbmFsaXR5IGlzIGxlZnRcbiAqIHRvIHJpZ2h0IGFuZCBSSUdIVCBpZiB0aGUgZGlyZWN0aW9uYWxpdHkgaXMgcmlnaHQgdG8gbGVmdC5cbiAqIExpa2V3aXNlIEVORCBtYXBzIHRvIFJJR0hUIG9yIExFRlQgZGVwZW5kaW5nIG9uIHRoZSBkaXJlY3Rpb25hbGl0eS5cbiAqL1xudmFyIENvcm5lcjtcbihmdW5jdGlvbiAoQ29ybmVyKSB7XG4gICAgQ29ybmVyW0Nvcm5lcltcIlRPUF9MRUZUXCJdID0gMF0gPSBcIlRPUF9MRUZUXCI7XG4gICAgQ29ybmVyW0Nvcm5lcltcIlRPUF9SSUdIVFwiXSA9IDRdID0gXCJUT1BfUklHSFRcIjtcbiAgICBDb3JuZXJbQ29ybmVyW1wiQk9UVE9NX0xFRlRcIl0gPSAxXSA9IFwiQk9UVE9NX0xFRlRcIjtcbiAgICBDb3JuZXJbQ29ybmVyW1wiQk9UVE9NX1JJR0hUXCJdID0gNV0gPSBcIkJPVFRPTV9SSUdIVFwiO1xuICAgIENvcm5lcltDb3JuZXJbXCJUT1BfU1RBUlRcIl0gPSA4XSA9IFwiVE9QX1NUQVJUXCI7XG4gICAgQ29ybmVyW0Nvcm5lcltcIlRPUF9FTkRcIl0gPSAxMl0gPSBcIlRPUF9FTkRcIjtcbiAgICBDb3JuZXJbQ29ybmVyW1wiQk9UVE9NX1NUQVJUXCJdID0gOV0gPSBcIkJPVFRPTV9TVEFSVFwiO1xuICAgIENvcm5lcltDb3JuZXJbXCJCT1RUT01fRU5EXCJdID0gMTNdID0gXCJCT1RUT01fRU5EXCI7XG59KShDb3JuZXIgfHwgKENvcm5lciA9IHt9KSk7XG5leHBvcnQgeyBjc3NDbGFzc2VzLCBzdHJpbmdzLCBudW1iZXJzLCBDb3JuZXJCaXQsIENvcm5lciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xudmFyIF9hLCBfYjtcbnZhciBjc3NDbGFzc2VzID0ge1xuICAgIExJU1RfSVRFTV9BQ1RJVkFURURfQ0xBU1M6ICdtZGMtbGlzdC1pdGVtLS1hY3RpdmF0ZWQnLFxuICAgIExJU1RfSVRFTV9DTEFTUzogJ21kYy1saXN0LWl0ZW0nLFxuICAgIExJU1RfSVRFTV9ESVNBQkxFRF9DTEFTUzogJ21kYy1saXN0LWl0ZW0tLWRpc2FibGVkJyxcbiAgICBMSVNUX0lURU1fU0VMRUNURURfQ0xBU1M6ICdtZGMtbGlzdC1pdGVtLS1zZWxlY3RlZCcsXG4gICAgTElTVF9JVEVNX1RFWFRfQ0xBU1M6ICdtZGMtbGlzdC1pdGVtX190ZXh0JyxcbiAgICBMSVNUX0lURU1fUFJJTUFSWV9URVhUX0NMQVNTOiAnbWRjLWxpc3QtaXRlbV9fcHJpbWFyeS10ZXh0JyxcbiAgICBST09UOiAnbWRjLWxpc3QnLFxufTtcbnZhciBldm9sdXRpb25DbGFzc05hbWVNYXAgPSAoX2EgPSB7fSxcbiAgICBfYVtcIlwiICsgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fQUNUSVZBVEVEX0NMQVNTXSA9ICdtZGMtbGlzdC1pdGVtLS1hY3RpdmF0ZWQnLFxuICAgIF9hW1wiXCIgKyBjc3NDbGFzc2VzLkxJU1RfSVRFTV9DTEFTU10gPSAnbWRjLWxpc3QtaXRlbScsXG4gICAgX2FbXCJcIiArIGNzc0NsYXNzZXMuTElTVF9JVEVNX0RJU0FCTEVEX0NMQVNTXSA9ICdtZGMtbGlzdC1pdGVtLS1kaXNhYmxlZCcsXG4gICAgX2FbXCJcIiArIGNzc0NsYXNzZXMuTElTVF9JVEVNX1NFTEVDVEVEX0NMQVNTXSA9ICdtZGMtbGlzdC1pdGVtLS1zZWxlY3RlZCcsXG4gICAgX2FbXCJcIiArIGNzc0NsYXNzZXMuTElTVF9JVEVNX1BSSU1BUllfVEVYVF9DTEFTU10gPSAnbWRjLWxpc3QtaXRlbV9fcHJpbWFyeS10ZXh0JyxcbiAgICBfYVtcIlwiICsgY3NzQ2xhc3Nlcy5ST09UXSA9ICdtZGMtbGlzdCcsXG4gICAgX2EpO1xudmFyIGRlcHJlY2F0ZWRDbGFzc05hbWVNYXAgPSAoX2IgPSB7fSxcbiAgICBfYltcIlwiICsgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fQUNUSVZBVEVEX0NMQVNTXSA9ICdtZGMtZGVwcmVjYXRlZC1saXN0LWl0ZW0tLWFjdGl2YXRlZCcsXG4gICAgX2JbXCJcIiArIGNzc0NsYXNzZXMuTElTVF9JVEVNX0NMQVNTXSA9ICdtZGMtZGVwcmVjYXRlZC1saXN0LWl0ZW0nLFxuICAgIF9iW1wiXCIgKyBjc3NDbGFzc2VzLkxJU1RfSVRFTV9ESVNBQkxFRF9DTEFTU10gPSAnbWRjLWRlcHJlY2F0ZWQtbGlzdC1pdGVtLS1kaXNhYmxlZCcsXG4gICAgX2JbXCJcIiArIGNzc0NsYXNzZXMuTElTVF9JVEVNX1NFTEVDVEVEX0NMQVNTXSA9ICdtZGMtZGVwcmVjYXRlZC1saXN0LWl0ZW0tLXNlbGVjdGVkJyxcbiAgICBfYltcIlwiICsgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fVEVYVF9DTEFTU10gPSAnbWRjLWRlcHJlY2F0ZWQtbGlzdC1pdGVtX190ZXh0JyxcbiAgICBfYltcIlwiICsgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fUFJJTUFSWV9URVhUX0NMQVNTXSA9ICdtZGMtZGVwcmVjYXRlZC1saXN0LWl0ZW1fX3ByaW1hcnktdGV4dCcsXG4gICAgX2JbXCJcIiArIGNzc0NsYXNzZXMuUk9PVF0gPSAnbWRjLWRlcHJlY2F0ZWQtbGlzdCcsXG4gICAgX2IpO1xudmFyIHN0cmluZ3MgPSB7XG4gICAgQUNUSU9OX0VWRU5UOiAnTURDTGlzdDphY3Rpb24nLFxuICAgIEFSSUFfQ0hFQ0tFRDogJ2FyaWEtY2hlY2tlZCcsXG4gICAgQVJJQV9DSEVDS0VEX0NIRUNLQk9YX1NFTEVDVE9SOiAnW3JvbGU9XCJjaGVja2JveFwiXVthcmlhLWNoZWNrZWQ9XCJ0cnVlXCJdJyxcbiAgICBBUklBX0NIRUNLRURfUkFESU9fU0VMRUNUT1I6ICdbcm9sZT1cInJhZGlvXCJdW2FyaWEtY2hlY2tlZD1cInRydWVcIl0nLFxuICAgIEFSSUFfQ1VSUkVOVDogJ2FyaWEtY3VycmVudCcsXG4gICAgQVJJQV9ESVNBQkxFRDogJ2FyaWEtZGlzYWJsZWQnLFxuICAgIEFSSUFfT1JJRU5UQVRJT046ICdhcmlhLW9yaWVudGF0aW9uJyxcbiAgICBBUklBX09SSUVOVEFUSU9OX0hPUklaT05UQUw6ICdob3Jpem9udGFsJyxcbiAgICBBUklBX1JPTEVfQ0hFQ0tCT1hfU0VMRUNUT1I6ICdbcm9sZT1cImNoZWNrYm94XCJdJyxcbiAgICBBUklBX1NFTEVDVEVEOiAnYXJpYS1zZWxlY3RlZCcsXG4gICAgQVJJQV9JTlRFUkFDVElWRV9ST0xFU19TRUxFQ1RPUjogJ1tyb2xlPVwibGlzdGJveFwiXSwgW3JvbGU9XCJtZW51XCJdJyxcbiAgICBBUklBX01VTFRJX1NFTEVDVEFCTEVfU0VMRUNUT1I6ICdbYXJpYS1tdWx0aXNlbGVjdGFibGU9XCJ0cnVlXCJdJyxcbiAgICBDSEVDS0JPWF9SQURJT19TRUxFQ1RPUjogJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXSwgaW5wdXRbdHlwZT1cInJhZGlvXCJdJyxcbiAgICBDSEVDS0JPWF9TRUxFQ1RPUjogJ2lucHV0W3R5cGU9XCJjaGVja2JveFwiXScsXG4gICAgQ0hJTERfRUxFTUVOVFNfVE9fVE9HR0xFX1RBQklOREVYOiBcIlxcbiAgICAuXCIgKyBjc3NDbGFzc2VzLkxJU1RfSVRFTV9DTEFTUyArIFwiIGJ1dHRvbjpub3QoOmRpc2FibGVkKSxcXG4gICAgLlwiICsgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fQ0xBU1MgKyBcIiBhLFxcbiAgICAuXCIgKyBkZXByZWNhdGVkQ2xhc3NOYW1lTWFwW2Nzc0NsYXNzZXMuTElTVF9JVEVNX0NMQVNTXSArIFwiIGJ1dHRvbjpub3QoOmRpc2FibGVkKSxcXG4gICAgLlwiICsgZGVwcmVjYXRlZENsYXNzTmFtZU1hcFtjc3NDbGFzc2VzLkxJU1RfSVRFTV9DTEFTU10gKyBcIiBhXFxuICBcIixcbiAgICBERVBSRUNBVEVEX1NFTEVDVE9SOiAnLm1kYy1kZXByZWNhdGVkLWxpc3QnLFxuICAgIEZPQ1VTQUJMRV9DSElMRF9FTEVNRU5UUzogXCJcXG4gICAgLlwiICsgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fQ0xBU1MgKyBcIiBidXR0b246bm90KDpkaXNhYmxlZCksXFxuICAgIC5cIiArIGNzc0NsYXNzZXMuTElTVF9JVEVNX0NMQVNTICsgXCIgYSxcXG4gICAgLlwiICsgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fQ0xBU1MgKyBcIiBpbnB1dFt0eXBlPVxcXCJyYWRpb1xcXCJdOm5vdCg6ZGlzYWJsZWQpLFxcbiAgICAuXCIgKyBjc3NDbGFzc2VzLkxJU1RfSVRFTV9DTEFTUyArIFwiIGlucHV0W3R5cGU9XFxcImNoZWNrYm94XFxcIl06bm90KDpkaXNhYmxlZCksXFxuICAgIC5cIiArIGRlcHJlY2F0ZWRDbGFzc05hbWVNYXBbY3NzQ2xhc3Nlcy5MSVNUX0lURU1fQ0xBU1NdICsgXCIgYnV0dG9uOm5vdCg6ZGlzYWJsZWQpLFxcbiAgICAuXCIgKyBkZXByZWNhdGVkQ2xhc3NOYW1lTWFwW2Nzc0NsYXNzZXMuTElTVF9JVEVNX0NMQVNTXSArIFwiIGEsXFxuICAgIC5cIiArIGRlcHJlY2F0ZWRDbGFzc05hbWVNYXBbY3NzQ2xhc3Nlcy5MSVNUX0lURU1fQ0xBU1NdICsgXCIgaW5wdXRbdHlwZT1cXFwicmFkaW9cXFwiXTpub3QoOmRpc2FibGVkKSxcXG4gICAgLlwiICsgZGVwcmVjYXRlZENsYXNzTmFtZU1hcFtjc3NDbGFzc2VzLkxJU1RfSVRFTV9DTEFTU10gKyBcIiBpbnB1dFt0eXBlPVxcXCJjaGVja2JveFxcXCJdOm5vdCg6ZGlzYWJsZWQpXFxuICBcIixcbiAgICBSQURJT19TRUxFQ1RPUjogJ2lucHV0W3R5cGU9XCJyYWRpb1wiXScsXG4gICAgU0VMRUNURURfSVRFTV9TRUxFQ1RPUjogJ1thcmlhLXNlbGVjdGVkPVwidHJ1ZVwiXSwgW2FyaWEtY3VycmVudD1cInRydWVcIl0nLFxufTtcbnZhciBudW1iZXJzID0ge1xuICAgIFVOU0VUX0lOREVYOiAtMSxcbiAgICBUWVBFQUhFQURfQlVGRkVSX0NMRUFSX1RJTUVPVVRfTVM6IDMwMFxufTtcbnZhciBldm9sdXRpb25BdHRyaWJ1dGUgPSAnZXZvbHV0aW9uJztcbmV4cG9ydCB7IHN0cmluZ3MsIGNzc0NsYXNzZXMsIG51bWJlcnMsIGRlcHJlY2F0ZWRDbGFzc05hbWVNYXAsIGV2b2x1dGlvbkF0dHJpYnV0ZSwgZXZvbHV0aW9uQ2xhc3NOYW1lTWFwIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjAgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG4vKipcbiAqIEtFWSBwcm92aWRlcyBub3JtYWxpemVkIHN0cmluZyB2YWx1ZXMgZm9yIGtleXMuXG4gKi9cbmV4cG9ydCB2YXIgS0VZID0ge1xuICAgIFVOS05PV046ICdVbmtub3duJyxcbiAgICBCQUNLU1BBQ0U6ICdCYWNrc3BhY2UnLFxuICAgIEVOVEVSOiAnRW50ZXInLFxuICAgIFNQQUNFQkFSOiAnU3BhY2ViYXInLFxuICAgIFBBR0VfVVA6ICdQYWdlVXAnLFxuICAgIFBBR0VfRE9XTjogJ1BhZ2VEb3duJyxcbiAgICBFTkQ6ICdFbmQnLFxuICAgIEhPTUU6ICdIb21lJyxcbiAgICBBUlJPV19MRUZUOiAnQXJyb3dMZWZ0JyxcbiAgICBBUlJPV19VUDogJ0Fycm93VXAnLFxuICAgIEFSUk9XX1JJR0hUOiAnQXJyb3dSaWdodCcsXG4gICAgQVJST1dfRE9XTjogJ0Fycm93RG93bicsXG4gICAgREVMRVRFOiAnRGVsZXRlJyxcbiAgICBFU0NBUEU6ICdFc2NhcGUnLFxuICAgIFRBQjogJ1RhYicsXG59O1xudmFyIG5vcm1hbGl6ZWRLZXlzID0gbmV3IFNldCgpO1xuLy8gSUUxMSBoYXMgbm8gc3VwcG9ydCBmb3IgbmV3IE1hcCB3aXRoIGl0ZXJhYmxlIHNvIHdlIG5lZWQgdG8gaW5pdGlhbGl6ZSB0aGlzXG4vLyBieSBoYW5kLlxubm9ybWFsaXplZEtleXMuYWRkKEtFWS5CQUNLU1BBQ0UpO1xubm9ybWFsaXplZEtleXMuYWRkKEtFWS5FTlRFUik7XG5ub3JtYWxpemVkS2V5cy5hZGQoS0VZLlNQQUNFQkFSKTtcbm5vcm1hbGl6ZWRLZXlzLmFkZChLRVkuUEFHRV9VUCk7XG5ub3JtYWxpemVkS2V5cy5hZGQoS0VZLlBBR0VfRE9XTik7XG5ub3JtYWxpemVkS2V5cy5hZGQoS0VZLkVORCk7XG5ub3JtYWxpemVkS2V5cy5hZGQoS0VZLkhPTUUpO1xubm9ybWFsaXplZEtleXMuYWRkKEtFWS5BUlJPV19MRUZUKTtcbm5vcm1hbGl6ZWRLZXlzLmFkZChLRVkuQVJST1dfVVApO1xubm9ybWFsaXplZEtleXMuYWRkKEtFWS5BUlJPV19SSUdIVCk7XG5ub3JtYWxpemVkS2V5cy5hZGQoS0VZLkFSUk9XX0RPV04pO1xubm9ybWFsaXplZEtleXMuYWRkKEtFWS5ERUxFVEUpO1xubm9ybWFsaXplZEtleXMuYWRkKEtFWS5FU0NBUEUpO1xubm9ybWFsaXplZEtleXMuYWRkKEtFWS5UQUIpO1xudmFyIEtFWV9DT0RFID0ge1xuICAgIEJBQ0tTUEFDRTogOCxcbiAgICBFTlRFUjogMTMsXG4gICAgU1BBQ0VCQVI6IDMyLFxuICAgIFBBR0VfVVA6IDMzLFxuICAgIFBBR0VfRE9XTjogMzQsXG4gICAgRU5EOiAzNSxcbiAgICBIT01FOiAzNixcbiAgICBBUlJPV19MRUZUOiAzNyxcbiAgICBBUlJPV19VUDogMzgsXG4gICAgQVJST1dfUklHSFQ6IDM5LFxuICAgIEFSUk9XX0RPV046IDQwLFxuICAgIERFTEVURTogNDYsXG4gICAgRVNDQVBFOiAyNyxcbiAgICBUQUI6IDksXG59O1xudmFyIG1hcHBlZEtleUNvZGVzID0gbmV3IE1hcCgpO1xuLy8gSUUxMSBoYXMgbm8gc3VwcG9ydCBmb3IgbmV3IE1hcCB3aXRoIGl0ZXJhYmxlIHNvIHdlIG5lZWQgdG8gaW5pdGlhbGl6ZSB0aGlzXG4vLyBieSBoYW5kLlxubWFwcGVkS2V5Q29kZXMuc2V0KEtFWV9DT0RFLkJBQ0tTUEFDRSwgS0VZLkJBQ0tTUEFDRSk7XG5tYXBwZWRLZXlDb2Rlcy5zZXQoS0VZX0NPREUuRU5URVIsIEtFWS5FTlRFUik7XG5tYXBwZWRLZXlDb2Rlcy5zZXQoS0VZX0NPREUuU1BBQ0VCQVIsIEtFWS5TUEFDRUJBUik7XG5tYXBwZWRLZXlDb2Rlcy5zZXQoS0VZX0NPREUuUEFHRV9VUCwgS0VZLlBBR0VfVVApO1xubWFwcGVkS2V5Q29kZXMuc2V0KEtFWV9DT0RFLlBBR0VfRE9XTiwgS0VZLlBBR0VfRE9XTik7XG5tYXBwZWRLZXlDb2Rlcy5zZXQoS0VZX0NPREUuRU5ELCBLRVkuRU5EKTtcbm1hcHBlZEtleUNvZGVzLnNldChLRVlfQ09ERS5IT01FLCBLRVkuSE9NRSk7XG5tYXBwZWRLZXlDb2Rlcy5zZXQoS0VZX0NPREUuQVJST1dfTEVGVCwgS0VZLkFSUk9XX0xFRlQpO1xubWFwcGVkS2V5Q29kZXMuc2V0KEtFWV9DT0RFLkFSUk9XX1VQLCBLRVkuQVJST1dfVVApO1xubWFwcGVkS2V5Q29kZXMuc2V0KEtFWV9DT0RFLkFSUk9XX1JJR0hULCBLRVkuQVJST1dfUklHSFQpO1xubWFwcGVkS2V5Q29kZXMuc2V0KEtFWV9DT0RFLkFSUk9XX0RPV04sIEtFWS5BUlJPV19ET1dOKTtcbm1hcHBlZEtleUNvZGVzLnNldChLRVlfQ09ERS5ERUxFVEUsIEtFWS5ERUxFVEUpO1xubWFwcGVkS2V5Q29kZXMuc2V0KEtFWV9DT0RFLkVTQ0FQRSwgS0VZLkVTQ0FQRSk7XG5tYXBwZWRLZXlDb2Rlcy5zZXQoS0VZX0NPREUuVEFCLCBLRVkuVEFCKTtcbnZhciBuYXZpZ2F0aW9uS2V5cyA9IG5ldyBTZXQoKTtcbi8vIElFMTEgaGFzIG5vIHN1cHBvcnQgZm9yIG5ldyBTZXQgd2l0aCBpdGVyYWJsZSBzbyB3ZSBuZWVkIHRvIGluaXRpYWxpemUgdGhpc1xuLy8gYnkgaGFuZC5cbm5hdmlnYXRpb25LZXlzLmFkZChLRVkuUEFHRV9VUCk7XG5uYXZpZ2F0aW9uS2V5cy5hZGQoS0VZLlBBR0VfRE9XTik7XG5uYXZpZ2F0aW9uS2V5cy5hZGQoS0VZLkVORCk7XG5uYXZpZ2F0aW9uS2V5cy5hZGQoS0VZLkhPTUUpO1xubmF2aWdhdGlvbktleXMuYWRkKEtFWS5BUlJPV19MRUZUKTtcbm5hdmlnYXRpb25LZXlzLmFkZChLRVkuQVJST1dfVVApO1xubmF2aWdhdGlvbktleXMuYWRkKEtFWS5BUlJPV19SSUdIVCk7XG5uYXZpZ2F0aW9uS2V5cy5hZGQoS0VZLkFSUk9XX0RPV04pO1xuLyoqXG4gKiBub3JtYWxpemVLZXkgcmV0dXJucyB0aGUgbm9ybWFsaXplZCBzdHJpbmcgZm9yIGEgbmF2aWdhdGlvbmFsIGFjdGlvbi5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG5vcm1hbGl6ZUtleShldnQpIHtcbiAgICB2YXIga2V5ID0gZXZ0LmtleTtcbiAgICAvLyBJZiB0aGUgZXZlbnQgYWxyZWFkeSBoYXMgYSBub3JtYWxpemVkIGtleSwgcmV0dXJuIGl0XG4gICAgaWYgKG5vcm1hbGl6ZWRLZXlzLmhhcyhrZXkpKSB7XG4gICAgICAgIHJldHVybiBrZXk7XG4gICAgfVxuICAgIC8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpkZXByZWNhdGlvblxuICAgIHZhciBtYXBwZWRLZXkgPSBtYXBwZWRLZXlDb2Rlcy5nZXQoZXZ0LmtleUNvZGUpO1xuICAgIGlmIChtYXBwZWRLZXkpIHtcbiAgICAgICAgcmV0dXJuIG1hcHBlZEtleTtcbiAgICB9XG4gICAgcmV0dXJuIEtFWS5VTktOT1dOO1xufVxuLyoqXG4gKiBpc05hdmlnYXRpb25FdmVudCByZXR1cm5zIHdoZXRoZXIgdGhlIGV2ZW50IGlzIGEgbmF2aWdhdGlvbiBldmVudFxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNOYXZpZ2F0aW9uRXZlbnQoZXZ0KSB7XG4gICAgcmV0dXJuIG5hdmlnYXRpb25LZXlzLmhhcyhub3JtYWxpemVLZXkoZXZ0KSk7XG59XG4vLyMgc291cmNlTWFwcGluZ1VSTD1rZXlib2FyZC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBFTEVNRU5UU19LRVlfQUxMT1dFRF9JTiA9IFsnaW5wdXQnLCAnYnV0dG9uJywgJ3RleHRhcmVhJywgJ3NlbGVjdCddO1xuLyoqXG4gKiBFbnN1cmVzIHRoYXQgcHJldmVudERlZmF1bHQgaXMgb25seSBjYWxsZWQgaWYgdGhlIGNvbnRhaW5pbmcgZWxlbWVudFxuICogZG9lc24ndCBjb25zdW1lIHRoZSBldmVudCwgYW5kIGl0IHdpbGwgY2F1c2UgYW4gdW5pbnRlbmRlZCBzY3JvbGwuXG4gKlxuICogQHBhcmFtIGV2dCBrZXlib2FyZCBldmVudCB0byBiZSBwcmV2ZW50ZWQuXG4gKi9cbmV4cG9ydCB2YXIgcHJldmVudERlZmF1bHRFdmVudCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICB2YXIgdGFyZ2V0ID0gZXZ0LnRhcmdldDtcbiAgICBpZiAoIXRhcmdldCkge1xuICAgICAgICByZXR1cm47XG4gICAgfVxuICAgIHZhciB0YWdOYW1lID0gKFwiXCIgKyB0YXJnZXQudGFnTmFtZSkudG9Mb3dlckNhc2UoKTtcbiAgICBpZiAoRUxFTUVOVFNfS0VZX0FMTE9XRURfSU4uaW5kZXhPZih0YWdOYW1lKSA9PT0gLTEpIHtcbiAgICAgICAgZXZ0LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxufTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWV2ZW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IG5vcm1hbGl6ZUtleSB9IGZyb20gJ0BtYXRlcmlhbC9kb20va2V5Ym9hcmQnO1xuaW1wb3J0IHsgbnVtYmVycyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IHByZXZlbnREZWZhdWx0RXZlbnQgfSBmcm9tICcuL2V2ZW50cyc7XG4vKipcbiAqIEluaXRpYWxpemVzIGEgc3RhdGUgb2JqZWN0IGZvciB0eXBlYWhlYWQuIFVzZSB0aGUgc2FtZSByZWZlcmVuY2UgZm9yIGNhbGxzIHRvXG4gKiB0eXBlYWhlYWQgZnVuY3Rpb25zLlxuICpcbiAqIEByZXR1cm4gVGhlIGN1cnJlbnQgc3RhdGUgb2YgdGhlIHR5cGVhaGVhZCBwcm9jZXNzLiBFYWNoIHN0YXRlIHJlZmVyZW5jZVxuICogICAgIHJlcHJlc2VudHMgYSB0eXBlYWhlYWQgaW5zdGFuY2UgYXMgdGhlIHJlZmVyZW5jZSBpcyB0eXBpY2FsbHkgbXV0YXRlZFxuICogICAgIGluLXBsYWNlLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdFN0YXRlKCkge1xuICAgIHZhciBzdGF0ZSA9IHtcbiAgICAgICAgYnVmZmVyQ2xlYXJUaW1lb3V0OiAwLFxuICAgICAgICBjdXJyZW50Rmlyc3RDaGFyOiAnJyxcbiAgICAgICAgc29ydGVkSW5kZXhDdXJzb3I6IDAsXG4gICAgICAgIHR5cGVhaGVhZEJ1ZmZlcjogJycsXG4gICAgfTtcbiAgICByZXR1cm4gc3RhdGU7XG59XG4vKipcbiAqIEluaXRpYWxpemVzIHR5cGVhaGVhZCBzdGF0ZSBieSBpbmRleGluZyB0aGUgY3VycmVudCBsaXN0IGl0ZW1zIGJ5IHByaW1hcnlcbiAqIHRleHQgaW50byB0aGUgc29ydGVkSW5kZXhCeUZpcnN0Q2hhciBkYXRhIHN0cnVjdHVyZS5cbiAqXG4gKiBAcGFyYW0gbGlzdEl0ZW1Db3VudCBudW1lciBvZiBpdGVtcyBpbiB0aGUgbGlzdFxuICogQHBhcmFtIGdldFByaW1hcnlUZXh0QnlJdGVtSW5kZXggZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZSBwcmltYXJ5IHRleHQgYXQgYVxuICogICAgIGdpdmVuIGluZGV4XG4gKlxuICogQHJldHVybiBNYXAgdGhhdCBtYXBzIHRoZSBmaXJzdCBjaGFyYWN0ZXIgb2YgdGhlIHByaW1hcnkgdGV4dCB0byB0aGUgZnVsbFxuICogICAgIGxpc3QgdGV4dCBhbmQgaXQncyBpbmRleFxuICovXG5leHBvcnQgZnVuY3Rpb24gaW5pdFNvcnRlZEluZGV4KGxpc3RJdGVtQ291bnQsIGdldFByaW1hcnlUZXh0QnlJdGVtSW5kZXgpIHtcbiAgICB2YXIgc29ydGVkSW5kZXhCeUZpcnN0Q2hhciA9IG5ldyBNYXAoKTtcbiAgICAvLyBBZ2dyZWdhdGUgaXRlbSB0ZXh0IHRvIGluZGV4IG1hcHBpbmdcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RJdGVtQ291bnQ7IGkrKykge1xuICAgICAgICB2YXIgcHJpbWFyeVRleHQgPSBnZXRQcmltYXJ5VGV4dEJ5SXRlbUluZGV4KGkpLnRyaW0oKTtcbiAgICAgICAgaWYgKCFwcmltYXJ5VGV4dCkge1xuICAgICAgICAgICAgY29udGludWU7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGZpcnN0Q2hhciA9IHByaW1hcnlUZXh0WzBdLnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmICghc29ydGVkSW5kZXhCeUZpcnN0Q2hhci5oYXMoZmlyc3RDaGFyKSkge1xuICAgICAgICAgICAgc29ydGVkSW5kZXhCeUZpcnN0Q2hhci5zZXQoZmlyc3RDaGFyLCBbXSk7XG4gICAgICAgIH1cbiAgICAgICAgc29ydGVkSW5kZXhCeUZpcnN0Q2hhci5nZXQoZmlyc3RDaGFyKS5wdXNoKHsgdGV4dDogcHJpbWFyeVRleHQudG9Mb3dlckNhc2UoKSwgaW5kZXg6IGkgfSk7XG4gICAgfVxuICAgIC8vIFNvcnQgdGhlIG1hcHBpbmdcbiAgICAvLyBUT0RPKGIvMTU3MTYyNjk0KTogSW52ZXN0aWdhdGUgcmVwbGFjaW5nIGZvckVhY2ggd2l0aCBNYXAudmFsdWVzKClcbiAgICBzb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyLmZvckVhY2goZnVuY3Rpb24gKHZhbHVlcykge1xuICAgICAgICB2YWx1ZXMuc29ydChmdW5jdGlvbiAoZmlyc3QsIHNlY29uZCkge1xuICAgICAgICAgICAgcmV0dXJuIGZpcnN0LmluZGV4IC0gc2Vjb25kLmluZGV4O1xuICAgICAgICB9KTtcbiAgICB9KTtcbiAgICByZXR1cm4gc29ydGVkSW5kZXhCeUZpcnN0Q2hhcjtcbn1cbi8qKlxuICogR2l2ZW4gdGhlIG5leHQgZGVzaXJlZCBjaGFyYWN0ZXIgZnJvbSB0aGUgdXNlciwgaXQgYXR0ZW1wdHMgdG8gZmluZCB0aGUgbmV4dFxuICogbGlzdCBvcHRpb24gbWF0Y2hpbmcgdGhlIGJ1ZmZlci4gV3JhcHMgYXJvdW5kIGlmIGF0IHRoZSBlbmQgb2Ygb3B0aW9ucy5cbiAqXG4gKiBAcGFyYW0gb3B0cyBPcHRpb25zIGFuZCBhY2Nlc3NvcnNcbiAqICAgLSBuZXh0Q2hhciAtIHRoZSBuZXh0IGNoYXJhY3RlciB0byBtYXRjaCBhZ2FpbnN0IGl0ZW1zXG4gKiAgIC0gc29ydGVkSW5kZXhCeUZpcnN0Q2hhciAtIG91dHB1dCBvZiBgaW5pdFNvcnRlZEluZGV4KC4uLilgXG4gKiAgIC0gZm9jdXNlZEl0ZW1JbmRleCAtIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudGx5IGZvY3VzZWQgaXRlbVxuICogICAtIGZvY3VzSXRlbUF0SW5kZXggLSBmdW5jdGlvbiB0aGF0IGZvY3VzZXMgYSBsaXN0IGl0ZW0gYXQgZ2l2ZW4gaW5kZXhcbiAqICAgLSBza2lwRm9jdXMgLSB3aGV0aGVyIG9yIG5vdCB0byBmb2N1cyB0aGUgbWF0Y2hlZCBpdGVtXG4gKiAgIC0gaXNJdGVtQXRJbmRleERpc2FibGVkIC0gZnVuY3Rpb24gdGhhdCBkZXRlcm1pbmVzIHdoZXRoZXIgYW4gaXRlbSBhdCBhXG4gKiAgICAgICAgZ2l2ZW4gaW5kZXggaXMgZGlzYWJsZWRcbiAqIEBwYXJhbSBzdGF0ZSBUaGUgdHlwZWFoZWFkIHN0YXRlIGluc3RhbmNlLiBTZWUgYGluaXRTdGF0ZWAuXG4gKlxuICogQHJldHVybiBUaGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgaXRlbSwgb3IgLTEgaWYgbm8gbWF0Y2guXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBtYXRjaEl0ZW0ob3B0cywgc3RhdGUpIHtcbiAgICB2YXIgbmV4dENoYXIgPSBvcHRzLm5leHRDaGFyLCBmb2N1c0l0ZW1BdEluZGV4ID0gb3B0cy5mb2N1c0l0ZW1BdEluZGV4LCBzb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyID0gb3B0cy5zb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyLCBmb2N1c2VkSXRlbUluZGV4ID0gb3B0cy5mb2N1c2VkSXRlbUluZGV4LCBza2lwRm9jdXMgPSBvcHRzLnNraXBGb2N1cywgaXNJdGVtQXRJbmRleERpc2FibGVkID0gb3B0cy5pc0l0ZW1BdEluZGV4RGlzYWJsZWQ7XG4gICAgY2xlYXJUaW1lb3V0KHN0YXRlLmJ1ZmZlckNsZWFyVGltZW91dCk7XG4gICAgc3RhdGUuYnVmZmVyQ2xlYXJUaW1lb3V0ID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyQnVmZmVyKHN0YXRlKTtcbiAgICB9LCBudW1iZXJzLlRZUEVBSEVBRF9CVUZGRVJfQ0xFQVJfVElNRU9VVF9NUyk7XG4gICAgc3RhdGUudHlwZWFoZWFkQnVmZmVyID0gc3RhdGUudHlwZWFoZWFkQnVmZmVyICsgbmV4dENoYXI7XG4gICAgdmFyIGluZGV4O1xuICAgIGlmIChzdGF0ZS50eXBlYWhlYWRCdWZmZXIubGVuZ3RoID09PSAxKSB7XG4gICAgICAgIGluZGV4ID0gbWF0Y2hGaXJzdENoYXIoc29ydGVkSW5kZXhCeUZpcnN0Q2hhciwgZm9jdXNlZEl0ZW1JbmRleCwgaXNJdGVtQXRJbmRleERpc2FibGVkLCBzdGF0ZSk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpbmRleCA9IG1hdGNoQWxsQ2hhcnMoc29ydGVkSW5kZXhCeUZpcnN0Q2hhciwgaXNJdGVtQXRJbmRleERpc2FibGVkLCBzdGF0ZSk7XG4gICAgfVxuICAgIGlmIChpbmRleCAhPT0gLTEgJiYgIXNraXBGb2N1cykge1xuICAgICAgICBmb2N1c0l0ZW1BdEluZGV4KGluZGV4KTtcbiAgICB9XG4gICAgcmV0dXJuIGluZGV4O1xufVxuLyoqXG4gKiBNYXRjaGVzIHRoZSB1c2VyJ3Mgc2luZ2xlIGlucHV0IGNoYXJhY3RlciBpbiB0aGUgYnVmZmVyIHRvIHRoZVxuICogbmV4dCBvcHRpb24gdGhhdCBiZWdpbnMgd2l0aCBzdWNoIGNoYXJhY3Rlci4gV3JhcHMgYXJvdW5kIGlmIGF0XG4gKiBlbmQgb2Ygb3B0aW9ucy4gUmV0dXJucyAtMSBpZiBubyBtYXRjaCBpcyBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hGaXJzdENoYXIoc29ydGVkSW5kZXhCeUZpcnN0Q2hhciwgZm9jdXNlZEl0ZW1JbmRleCwgaXNJdGVtQXRJbmRleERpc2FibGVkLCBzdGF0ZSkge1xuICAgIHZhciBmaXJzdENoYXIgPSBzdGF0ZS50eXBlYWhlYWRCdWZmZXJbMF07XG4gICAgdmFyIGl0ZW1zTWF0Y2hpbmdGaXJzdENoYXIgPSBzb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyLmdldChmaXJzdENoYXIpO1xuICAgIGlmICghaXRlbXNNYXRjaGluZ0ZpcnN0Q2hhcikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIC8vIEhhcyB0aGUgc2FtZSBmaXJzdENoYXIgYmVlbiByZWNlbnRseSBtYXRjaGVkP1xuICAgIC8vIEFsc28sIGRpZCBzdGFydGluZyBpbmRleCByZW1haW4gdGhlIHNhbWUgYmV0d2VlbiBrZXkgcHJlc3Nlcz9cbiAgICAvLyBJZiBib3RoIGhvbGQgdHJ1ZSwgc2ltcGx5IGluY3JlbWVudCBpbmRleC5cbiAgICBpZiAoZmlyc3RDaGFyID09PSBzdGF0ZS5jdXJyZW50Rmlyc3RDaGFyICYmXG4gICAgICAgIGl0ZW1zTWF0Y2hpbmdGaXJzdENoYXJbc3RhdGUuc29ydGVkSW5kZXhDdXJzb3JdLmluZGV4ID09PVxuICAgICAgICAgICAgZm9jdXNlZEl0ZW1JbmRleCkge1xuICAgICAgICBzdGF0ZS5zb3J0ZWRJbmRleEN1cnNvciA9XG4gICAgICAgICAgICAoc3RhdGUuc29ydGVkSW5kZXhDdXJzb3IgKyAxKSAlIGl0ZW1zTWF0Y2hpbmdGaXJzdENoYXIubGVuZ3RoO1xuICAgICAgICB2YXIgbmV3SW5kZXggPSBpdGVtc01hdGNoaW5nRmlyc3RDaGFyW3N0YXRlLnNvcnRlZEluZGV4Q3Vyc29yXS5pbmRleDtcbiAgICAgICAgaWYgKCFpc0l0ZW1BdEluZGV4RGlzYWJsZWQobmV3SW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm4gbmV3SW5kZXg7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLy8gSWYgd2UncmUgaGVyZSwgaXQgbWVhbnMgb25lIG9mIHRoZSBmb2xsb3dpbmcgaGFwcGVuZWQ6XG4gICAgLy8gLSBlaXRoZXIgZmlyc3RDaGFyIG9yIHN0YXJ0aW5nSW5kZXggaGFzIGNoYW5nZWQsIGludmFsaWRhdGluZyB0aGVcbiAgICAvLyBjdXJzb3IuXG4gICAgLy8gLSBUaGUgbmV4dCBpdGVtIG9mIHR5cGVhaGVhZCBpcyBkaXNhYmxlZCwgc28gd2UgaGF2ZSB0byBsb29rIGZ1cnRoZXIuXG4gICAgc3RhdGUuY3VycmVudEZpcnN0Q2hhciA9IGZpcnN0Q2hhcjtcbiAgICB2YXIgbmV3Q3Vyc29yUG9zaXRpb24gPSAtMTtcbiAgICB2YXIgY3Vyc29yUG9zaXRpb247XG4gICAgLy8gRmluZCB0aGUgZmlyc3Qgbm9uLWRpc2FibGVkIGl0ZW0gYXMgYSBmYWxsYmFjay5cbiAgICBmb3IgKGN1cnNvclBvc2l0aW9uID0gMDsgY3Vyc29yUG9zaXRpb24gPCBpdGVtc01hdGNoaW5nRmlyc3RDaGFyLmxlbmd0aDsgY3Vyc29yUG9zaXRpb24rKykge1xuICAgICAgICBpZiAoIWlzSXRlbUF0SW5kZXhEaXNhYmxlZChpdGVtc01hdGNoaW5nRmlyc3RDaGFyW2N1cnNvclBvc2l0aW9uXS5pbmRleCkpIHtcbiAgICAgICAgICAgIG5ld0N1cnNvclBvc2l0aW9uID0gY3Vyc29yUG9zaXRpb247XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICAvLyBBZHZhbmNlIGN1cnNvciB0byBmaXJzdCBpdGVtIG1hdGNoaW5nIHRoZSBmaXJzdENoYXIgdGhhdCBpcyBwb3NpdGlvbmVkXG4gICAgLy8gYWZ0ZXIgc3RhcnRpbmcgaXRlbS4gQ3Vyc29yIGlzIHVuY2hhbmdlZCBmcm9tIGZhbGxiYWNrIGlmIHRoZXJlJ3Mgbm9cbiAgICAvLyBzdWNoIGl0ZW0uXG4gICAgZm9yICg7IGN1cnNvclBvc2l0aW9uIDwgaXRlbXNNYXRjaGluZ0ZpcnN0Q2hhci5sZW5ndGg7IGN1cnNvclBvc2l0aW9uKyspIHtcbiAgICAgICAgaWYgKGl0ZW1zTWF0Y2hpbmdGaXJzdENoYXJbY3Vyc29yUG9zaXRpb25dLmluZGV4ID4gZm9jdXNlZEl0ZW1JbmRleCAmJlxuICAgICAgICAgICAgIWlzSXRlbUF0SW5kZXhEaXNhYmxlZChpdGVtc01hdGNoaW5nRmlyc3RDaGFyW2N1cnNvclBvc2l0aW9uXS5pbmRleCkpIHtcbiAgICAgICAgICAgIG5ld0N1cnNvclBvc2l0aW9uID0gY3Vyc29yUG9zaXRpb247XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgIH1cbiAgICBpZiAobmV3Q3Vyc29yUG9zaXRpb24gIT09IC0xKSB7XG4gICAgICAgIHN0YXRlLnNvcnRlZEluZGV4Q3Vyc29yID0gbmV3Q3Vyc29yUG9zaXRpb247XG4gICAgICAgIHJldHVybiBpdGVtc01hdGNoaW5nRmlyc3RDaGFyW3N0YXRlLnNvcnRlZEluZGV4Q3Vyc29yXS5pbmRleDtcbiAgICB9XG4gICAgcmV0dXJuIC0xO1xufVxuLyoqXG4gKiBBdHRlbXB0cyB0byBmaW5kIHRoZSBuZXh0IGl0ZW0gdGhhdCBtYXRjaGVzIGFsbCBvZiB0aGUgdHlwZWFoZWFkIGJ1ZmZlci5cbiAqIFdyYXBzIGFyb3VuZCBpZiBhdCBlbmQgb2Ygb3B0aW9ucy4gUmV0dXJucyAtMSBpZiBubyBtYXRjaCBpcyBmb3VuZC5cbiAqL1xuZnVuY3Rpb24gbWF0Y2hBbGxDaGFycyhzb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyLCBpc0l0ZW1BdEluZGV4RGlzYWJsZWQsIHN0YXRlKSB7XG4gICAgdmFyIGZpcnN0Q2hhciA9IHN0YXRlLnR5cGVhaGVhZEJ1ZmZlclswXTtcbiAgICB2YXIgaXRlbXNNYXRjaGluZ0ZpcnN0Q2hhciA9IHNvcnRlZEluZGV4QnlGaXJzdENoYXIuZ2V0KGZpcnN0Q2hhcik7XG4gICAgaWYgKCFpdGVtc01hdGNoaW5nRmlyc3RDaGFyKSB7XG4gICAgICAgIHJldHVybiAtMTtcbiAgICB9XG4gICAgLy8gRG8gbm90aGluZyBpZiB0ZXh0IGFscmVhZHkgbWF0Y2hlc1xuICAgIHZhciBzdGFydGluZ0l0ZW0gPSBpdGVtc01hdGNoaW5nRmlyc3RDaGFyW3N0YXRlLnNvcnRlZEluZGV4Q3Vyc29yXTtcbiAgICBpZiAoc3RhcnRpbmdJdGVtLnRleHQubGFzdEluZGV4T2Yoc3RhdGUudHlwZWFoZWFkQnVmZmVyLCAwKSA9PT0gMCAmJlxuICAgICAgICAhaXNJdGVtQXRJbmRleERpc2FibGVkKHN0YXJ0aW5nSXRlbS5pbmRleCkpIHtcbiAgICAgICAgcmV0dXJuIHN0YXJ0aW5nSXRlbS5pbmRleDtcbiAgICB9XG4gICAgLy8gRmluZCBuZXh0IGl0ZW0gdGhhdCBtYXRjaGVzIGNvbXBsZXRlbHk7IGlmIG5vIG1hdGNoLCB3ZSdsbCBldmVudHVhbGx5XG4gICAgLy8gbG9vcCBhcm91bmQgdG8gc2FtZSBwb3NpdGlvblxuICAgIHZhciBjdXJzb3JQb3NpdGlvbiA9IChzdGF0ZS5zb3J0ZWRJbmRleEN1cnNvciArIDEpICUgaXRlbXNNYXRjaGluZ0ZpcnN0Q2hhci5sZW5ndGg7XG4gICAgdmFyIG5leHRDdXJzb3JQb3NpdGlvbiA9IC0xO1xuICAgIHdoaWxlIChjdXJzb3JQb3NpdGlvbiAhPT0gc3RhdGUuc29ydGVkSW5kZXhDdXJzb3IpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRJdGVtID0gaXRlbXNNYXRjaGluZ0ZpcnN0Q2hhcltjdXJzb3JQb3NpdGlvbl07XG4gICAgICAgIHZhciBtYXRjaGVzID0gY3VycmVudEl0ZW0udGV4dC5sYXN0SW5kZXhPZihzdGF0ZS50eXBlYWhlYWRCdWZmZXIsIDApID09PSAwO1xuICAgICAgICB2YXIgaXNFbmFibGVkID0gIWlzSXRlbUF0SW5kZXhEaXNhYmxlZChjdXJyZW50SXRlbS5pbmRleCk7XG4gICAgICAgIGlmIChtYXRjaGVzICYmIGlzRW5hYmxlZCkge1xuICAgICAgICAgICAgbmV4dEN1cnNvclBvc2l0aW9uID0gY3Vyc29yUG9zaXRpb247XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICBjdXJzb3JQb3NpdGlvbiA9IChjdXJzb3JQb3NpdGlvbiArIDEpICUgaXRlbXNNYXRjaGluZ0ZpcnN0Q2hhci5sZW5ndGg7XG4gICAgfVxuICAgIGlmIChuZXh0Q3Vyc29yUG9zaXRpb24gIT09IC0xKSB7XG4gICAgICAgIHN0YXRlLnNvcnRlZEluZGV4Q3Vyc29yID0gbmV4dEN1cnNvclBvc2l0aW9uO1xuICAgICAgICByZXR1cm4gaXRlbXNNYXRjaGluZ0ZpcnN0Q2hhcltzdGF0ZS5zb3J0ZWRJbmRleEN1cnNvcl0uaW5kZXg7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbi8qKlxuICogV2hldGhlciBvciBub3QgdGhlIGdpdmVuIHR5cGVhaGVhZCBpbnN0YWFuY2Ugc3RhdGUgaXMgY3VycmVudGx5IHR5cGluZy5cbiAqXG4gKiBAcGFyYW0gc3RhdGUgVGhlIHR5cGVhaGVhZCBzdGF0ZSBpbnN0YW5jZS4gU2VlIGBpbml0U3RhdGVgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gaXNUeXBpbmdJblByb2dyZXNzKHN0YXRlKSB7XG4gICAgcmV0dXJuIHN0YXRlLnR5cGVhaGVhZEJ1ZmZlci5sZW5ndGggPiAwO1xufVxuLyoqXG4gKiBDbGVhcnMgdGhlIHR5cGVhaGFlZCBidWZmZXIgc28gdGhhdCBpdCByZXNldHMgaXRlbSBtYXRjaGluZyB0byB0aGUgZmlyc3RcbiAqIGNoYXJhY3Rlci5cbiAqXG4gKiBAcGFyYW0gc3RhdGUgVGhlIHR5cGVhaGVhZCBzdGF0ZSBpbnN0YW5jZS4gU2VlIGBpbml0U3RhdGVgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gY2xlYXJCdWZmZXIoc3RhdGUpIHtcbiAgICBzdGF0ZS50eXBlYWhlYWRCdWZmZXIgPSAnJztcbn1cbi8qKlxuICogR2l2ZW4gYSBrZXlkb3duIGV2ZW50LCBpdCBjYWxjdWxhdGVzIHdoZXRoZXIgb3Igbm90IHRvIGF1dG9tYXRpY2FsbHkgZm9jdXMgYVxuICogbGlzdCBpdGVtIGRlcGVuZGluZyBvbiB3aGF0IHdhcyB0eXBlZCBtaW1pY2luZyB0aGUgdHlwZWFoZWFkIGZ1bmN0aW9uYWxpdHkgb2ZcbiAqIGEgc3RhbmRhcmQgPHNlbGVjdD4gZWxlbWVudCB0aGF0IGlzIG9wZW4uXG4gKlxuICogQHBhcmFtIG9wdHMgT3B0aW9ucyBhbmQgYWNjZXNzb3JzXG4gKiAgIC0gZXZlbnQgLSB0aGUgS2V5Ym9hcmRFdmVudCB0byBoYW5kbGUgYW5kIHBhcnNlXG4gKiAgIC0gc29ydGVkSW5kZXhCeUZpcnN0Q2hhciAtIG91dHB1dCBvZiBgaW5pdFNvcnRlZEluZGV4KC4uLilgXG4gKiAgIC0gZm9jdXNlZEl0ZW1JbmRleCAtIHRoZSBpbmRleCBvZiB0aGUgY3VycmVudGx5IGZvY3VzZWQgaXRlbVxuICogICAtIGZvY3VzSXRlbUF0SW5kZXggLSBmdW5jdGlvbiB0aGF0IGZvY3VzZXMgYSBsaXN0IGl0ZW0gYXQgZ2l2ZW4gaW5kZXhcbiAqICAgLSBpc0l0ZW1BdEZvY3VzZWRJbmRleERpc2FibGVkIC0gd2hldGhlciBvciBub3QgdGhlIGN1cnJlbnRseSBmb2N1c2VkIGl0ZW1cbiAqICAgICAgaXMgZGlzYWJsZWRcbiAqICAgLSBpc1RhcmdldExpc3RJdGVtIC0gd2hldGhlciBvciBub3QgdGhlIGV2ZW50IHRhcmdldCBpcyBhIGxpc3QgaXRlbVxuICogQHBhcmFtIHN0YXRlIFRoZSB0eXBlYWhlYWQgc3RhdGUgaW5zdGFuY2UuIFNlZSBgaW5pdFN0YXRlYC5cbiAqXG4gKiBAcmV0dXJucyBpbmRleCBvZiB0aGUgaXRlbSBtYXRjaGVkIGJ5IHRoZSBrZXlkb3duLiAtMSBpZiBub3QgbWF0Y2hlZC5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIGhhbmRsZUtleWRvd24ob3B0cywgc3RhdGUpIHtcbiAgICB2YXIgZXZlbnQgPSBvcHRzLmV2ZW50LCBpc1RhcmdldExpc3RJdGVtID0gb3B0cy5pc1RhcmdldExpc3RJdGVtLCBmb2N1c2VkSXRlbUluZGV4ID0gb3B0cy5mb2N1c2VkSXRlbUluZGV4LCBmb2N1c0l0ZW1BdEluZGV4ID0gb3B0cy5mb2N1c0l0ZW1BdEluZGV4LCBzb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyID0gb3B0cy5zb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyLCBpc0l0ZW1BdEluZGV4RGlzYWJsZWQgPSBvcHRzLmlzSXRlbUF0SW5kZXhEaXNhYmxlZDtcbiAgICB2YXIgaXNBcnJvd0xlZnQgPSBub3JtYWxpemVLZXkoZXZlbnQpID09PSAnQXJyb3dMZWZ0JztcbiAgICB2YXIgaXNBcnJvd1VwID0gbm9ybWFsaXplS2V5KGV2ZW50KSA9PT0gJ0Fycm93VXAnO1xuICAgIHZhciBpc0Fycm93UmlnaHQgPSBub3JtYWxpemVLZXkoZXZlbnQpID09PSAnQXJyb3dSaWdodCc7XG4gICAgdmFyIGlzQXJyb3dEb3duID0gbm9ybWFsaXplS2V5KGV2ZW50KSA9PT0gJ0Fycm93RG93bic7XG4gICAgdmFyIGlzSG9tZSA9IG5vcm1hbGl6ZUtleShldmVudCkgPT09ICdIb21lJztcbiAgICB2YXIgaXNFbmQgPSBub3JtYWxpemVLZXkoZXZlbnQpID09PSAnRW5kJztcbiAgICB2YXIgaXNFbnRlciA9IG5vcm1hbGl6ZUtleShldmVudCkgPT09ICdFbnRlcic7XG4gICAgdmFyIGlzU3BhY2UgPSBub3JtYWxpemVLZXkoZXZlbnQpID09PSAnU3BhY2ViYXInO1xuICAgIGlmIChldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXkgfHwgaXNBcnJvd0xlZnQgfHwgaXNBcnJvd1VwIHx8XG4gICAgICAgIGlzQXJyb3dSaWdodCB8fCBpc0Fycm93RG93biB8fCBpc0hvbWUgfHwgaXNFbmQgfHwgaXNFbnRlcikge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIHZhciBpc0NoYXJhY3RlcktleSA9ICFpc1NwYWNlICYmIGV2ZW50LmtleS5sZW5ndGggPT09IDE7XG4gICAgaWYgKGlzQ2hhcmFjdGVyS2V5KSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0RXZlbnQoZXZlbnQpO1xuICAgICAgICB2YXIgbWF0Y2hJdGVtT3B0cyA9IHtcbiAgICAgICAgICAgIGZvY3VzSXRlbUF0SW5kZXg6IGZvY3VzSXRlbUF0SW5kZXgsXG4gICAgICAgICAgICBmb2N1c2VkSXRlbUluZGV4OiBmb2N1c2VkSXRlbUluZGV4LFxuICAgICAgICAgICAgbmV4dENoYXI6IGV2ZW50LmtleS50b0xvd2VyQ2FzZSgpLFxuICAgICAgICAgICAgc29ydGVkSW5kZXhCeUZpcnN0Q2hhcjogc29ydGVkSW5kZXhCeUZpcnN0Q2hhcixcbiAgICAgICAgICAgIHNraXBGb2N1czogZmFsc2UsXG4gICAgICAgICAgICBpc0l0ZW1BdEluZGV4RGlzYWJsZWQ6IGlzSXRlbUF0SW5kZXhEaXNhYmxlZCxcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIG1hdGNoSXRlbShtYXRjaEl0ZW1PcHRzLCBzdGF0ZSk7XG4gICAgfVxuICAgIGlmICghaXNTcGFjZSkge1xuICAgICAgICByZXR1cm4gLTE7XG4gICAgfVxuICAgIGlmIChpc1RhcmdldExpc3RJdGVtKSB7XG4gICAgICAgIHByZXZlbnREZWZhdWx0RXZlbnQoZXZlbnQpO1xuICAgIH1cbiAgICB2YXIgdHlwZWFoZWFkT25MaXN0SXRlbSA9IGlzVGFyZ2V0TGlzdEl0ZW0gJiYgaXNUeXBpbmdJblByb2dyZXNzKHN0YXRlKTtcbiAgICBpZiAodHlwZWFoZWFkT25MaXN0SXRlbSkge1xuICAgICAgICB2YXIgbWF0Y2hJdGVtT3B0cyA9IHtcbiAgICAgICAgICAgIGZvY3VzSXRlbUF0SW5kZXg6IGZvY3VzSXRlbUF0SW5kZXgsXG4gICAgICAgICAgICBmb2N1c2VkSXRlbUluZGV4OiBmb2N1c2VkSXRlbUluZGV4LFxuICAgICAgICAgICAgbmV4dENoYXI6ICcgJyxcbiAgICAgICAgICAgIHNvcnRlZEluZGV4QnlGaXJzdENoYXI6IHNvcnRlZEluZGV4QnlGaXJzdENoYXIsXG4gICAgICAgICAgICBza2lwRm9jdXM6IGZhbHNlLFxuICAgICAgICAgICAgaXNJdGVtQXRJbmRleERpc2FibGVkOiBpc0l0ZW1BdEluZGV4RGlzYWJsZWQsXG4gICAgICAgIH07XG4gICAgICAgIC8vIHNwYWNlIHBhcnRpY2lwYXRlcyBpbiB0eXBlYWhlYWQgbWF0Y2hpbmcgaWYgaW4gcmFwaWQgdHlwaW5nIG1vZGVcbiAgICAgICAgcmV0dXJuIG1hdGNoSXRlbShtYXRjaEl0ZW1PcHRzLCBzdGF0ZSk7XG4gICAgfVxuICAgIHJldHVybiAtMTtcbn1cbi8vIyBzb3VyY2VNYXBwaW5nVVJMPXR5cGVhaGVhZC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0ZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7IG5vcm1hbGl6ZUtleSB9IGZyb20gJ0BtYXRlcmlhbC9kb20va2V5Ym9hcmQnO1xuaW1wb3J0IHsgY3NzQ2xhc3NlcywgbnVtYmVycywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IHByZXZlbnREZWZhdWx0RXZlbnQgfSBmcm9tICcuL2V2ZW50cyc7XG5pbXBvcnQgKiBhcyB0eXBlYWhlYWQgZnJvbSAnLi90eXBlYWhlYWQnO1xuZnVuY3Rpb24gaXNOdW1iZXJBcnJheShzZWxlY3RlZEluZGV4KSB7XG4gICAgcmV0dXJuIHNlbGVjdGVkSW5kZXggaW5zdGFuY2VvZiBBcnJheTtcbn1cbnZhciBNRENMaXN0Rm91bmRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDTGlzdEZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDTGlzdEZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDTGlzdEZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIpLCBhZGFwdGVyKSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMud3JhcEZvY3VzID0gZmFsc2U7XG4gICAgICAgIF90aGlzLmlzVmVydGljYWwgPSB0cnVlO1xuICAgICAgICBfdGhpcy5pc1NpbmdsZVNlbGVjdGlvbkxpc3QgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuc2VsZWN0ZWRJbmRleCA9IG51bWJlcnMuVU5TRVRfSU5ERVg7XG4gICAgICAgIF90aGlzLmZvY3VzZWRJdGVtSW5kZXggPSBudW1iZXJzLlVOU0VUX0lOREVYO1xuICAgICAgICBfdGhpcy51c2VBY3RpdmF0ZWRDbGFzcyA9IGZhbHNlO1xuICAgICAgICBfdGhpcy51c2VTZWxlY3RlZEF0dHIgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuYXJpYUN1cnJlbnRBdHRyVmFsdWUgPSBudWxsO1xuICAgICAgICBfdGhpcy5pc0NoZWNrYm94TGlzdCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc1JhZGlvTGlzdCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5oYXNUeXBlYWhlYWQgPSBmYWxzZTtcbiAgICAgICAgLy8gVHJhbnNpZW50bHkgaG9sZHMgY3VycmVudCB0eXBlYWhlYWQgcHJlZml4IGZyb20gdXNlci5cbiAgICAgICAgX3RoaXMudHlwZWFoZWFkU3RhdGUgPSB0eXBlYWhlYWQuaW5pdFN0YXRlKCk7XG4gICAgICAgIF90aGlzLnNvcnRlZEluZGV4QnlGaXJzdENoYXIgPSBuZXcgTWFwKCk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0xpc3RGb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0xpc3RGb3VuZGF0aW9uLCBcImNzc0NsYXNzZXNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBjc3NDbGFzc2VzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0xpc3RGb3VuZGF0aW9uLCBcIm51bWJlcnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0xpc3RGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzRm9yRWxlbWVudEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZm9jdXNJdGVtQXRJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldEF0dHJpYnV0ZUZvckVsZW1lbnRJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgICAgICAgICBnZXRGb2N1c2VkRWxlbWVudEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiAwOyB9LFxuICAgICAgICAgICAgICAgIGdldExpc3RJdGVtQ291bnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH0sXG4gICAgICAgICAgICAgICAgaGFzQ2hlY2tib3hBdEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBoYXNSYWRpb0F0SW5kZXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIGlzQ2hlY2tib3hDaGVja2VkQXRJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgaXNGb2N1c0luc2lkZUxpc3Q6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIGlzUm9vdEZvY3VzZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIGxpc3RJdGVtQXRJbmRleEhhc0NsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBub3RpZnlBY3Rpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzc0ZvckVsZW1lbnRJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNldEF0dHJpYnV0ZUZvckVsZW1lbnRJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNldENoZWNrZWRDaGVja2JveE9yUmFkaW9BdEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgc2V0VGFiSW5kZXhGb3JMaXN0SXRlbUNoaWxkcmVuOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZ2V0UHJpbWFyeVRleHRBdEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiAnJzsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUubGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLmdldExpc3RJdGVtQ291bnQoKSA9PT0gMCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIFRPRE8oYi8xNzIyNzQxNDIpOiBjb25zaWRlciBhbGwgaXRlbXMgd2hlbiBkZXRlcm1pbmluZyB0aGUgbGlzdCdzIHR5cGUuXG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaGFzQ2hlY2tib3hBdEluZGV4KDApKSB7XG4gICAgICAgICAgICB0aGlzLmlzQ2hlY2tib3hMaXN0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmFkYXB0ZXIuaGFzUmFkaW9BdEluZGV4KDApKSB7XG4gICAgICAgICAgICB0aGlzLmlzUmFkaW9MaXN0ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMubWF5YmVJbml0aWFsaXplU2luZ2xlU2VsZWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzVHlwZWFoZWFkKSB7XG4gICAgICAgICAgICB0aGlzLnNvcnRlZEluZGV4QnlGaXJzdENoYXIgPSB0aGlzLnR5cGVhaGVhZEluaXRTb3J0ZWRJbmRleCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGl0ZW0gdGhhdCB3YXMgbGFzdCBmb2N1c2VkLiAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRGb2N1c2VkSXRlbUluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb2N1c2VkSXRlbUluZGV4O1xuICAgIH07XG4gICAgLyoqIFRvZ2dsZXMgZm9jdXMgd3JhcHBpbmcgd2l0aCBrZXlib2FyZCBuYXZpZ2F0aW9uLiAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRXcmFwRm9jdXMgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy53cmFwRm9jdXMgPSB2YWx1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRvZ2dsZXMgb3JpZW50YXRpb24gZGlyZWN0aW9uIGZvciBrZXlib2FyZCBuYXZpZ2F0aW9uICh0cnVlIGZvciB2ZXJ0aWNhbCxcbiAgICAgKiBmYWxzZSBmb3IgaG9yaXpvbnRhbCkuXG4gICAgICovXG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLnNldFZlcnRpY2FsT3JpZW50YXRpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pc1ZlcnRpY2FsID0gdmFsdWU7XG4gICAgfTtcbiAgICAvKiogVG9nZ2xlcyBzaW5nbGUtc2VsZWN0aW9uIGJlaGF2aW9yLiAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRTaW5nbGVTZWxlY3Rpb24gPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pc1NpbmdsZVNlbGVjdGlvbkxpc3QgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICB0aGlzLm1heWJlSW5pdGlhbGl6ZVNpbmdsZVNlbGVjdGlvbigpO1xuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gdGhpcy5nZXRTZWxlY3RlZEluZGV4RnJvbURPTSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBdXRvbWF0aWNhbGx5IGRldGVybWluZXMgd2hldGhlciB0aGUgbGlzdCBpcyBzaW5nbGUgc2VsZWN0aW9uIGxpc3QuIElmIHNvLFxuICAgICAqIGluaXRpYWxpemVzIHRoZSBpbnRlcm5hbCBzdGF0ZSB0byBtYXRjaCB0aGUgc2VsZWN0ZWQgaXRlbS5cbiAgICAgKi9cbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUubWF5YmVJbml0aWFsaXplU2luZ2xlU2VsZWN0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZWN0ZWRJdGVtSW5kZXggPSB0aGlzLmdldFNlbGVjdGVkSW5kZXhGcm9tRE9NKCk7XG4gICAgICAgIGlmIChzZWxlY3RlZEl0ZW1JbmRleCA9PT0gbnVtYmVycy5VTlNFVF9JTkRFWClcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgdmFyIGhhc0FjdGl2YXRlZENsYXNzID0gdGhpcy5hZGFwdGVyLmxpc3RJdGVtQXRJbmRleEhhc0NsYXNzKHNlbGVjdGVkSXRlbUluZGV4LCBjc3NDbGFzc2VzLkxJU1RfSVRFTV9BQ1RJVkFURURfQ0xBU1MpO1xuICAgICAgICBpZiAoaGFzQWN0aXZhdGVkQ2xhc3MpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0VXNlQWN0aXZhdGVkQ2xhc3ModHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5pc1NpbmdsZVNlbGVjdGlvbkxpc3QgPSB0cnVlO1xuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBzZWxlY3RlZEl0ZW1JbmRleDtcbiAgICB9O1xuICAgIC8qKiBAcmV0dXJuIEluZGV4IG9mIHRoZSBmaXJzdCBzZWxlY3RlZCBpdGVtIGJhc2VkIG9uIHRoZSBET00gc3RhdGUuICovXG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLmdldFNlbGVjdGVkSW5kZXhGcm9tRE9NID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZWN0ZWRJbmRleCA9IG51bWJlcnMuVU5TRVRfSU5ERVg7XG4gICAgICAgIHZhciBsaXN0SXRlbXNDb3VudCA9IHRoaXMuYWRhcHRlci5nZXRMaXN0SXRlbUNvdW50KCk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdEl0ZW1zQ291bnQ7IGkrKykge1xuICAgICAgICAgICAgdmFyIGhhc1NlbGVjdGVkQ2xhc3MgPSB0aGlzLmFkYXB0ZXIubGlzdEl0ZW1BdEluZGV4SGFzQ2xhc3MoaSwgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fU0VMRUNURURfQ0xBU1MpO1xuICAgICAgICAgICAgdmFyIGhhc0FjdGl2YXRlZENsYXNzID0gdGhpcy5hZGFwdGVyLmxpc3RJdGVtQXRJbmRleEhhc0NsYXNzKGksIGNzc0NsYXNzZXMuTElTVF9JVEVNX0FDVElWQVRFRF9DTEFTUyk7XG4gICAgICAgICAgICBpZiAoIShoYXNTZWxlY3RlZENsYXNzIHx8IGhhc0FjdGl2YXRlZENsYXNzKSkge1xuICAgICAgICAgICAgICAgIGNvbnRpbnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZWN0ZWRJbmRleCA9IGk7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gc2VsZWN0ZWRJbmRleDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgd2hldGhlciB0eXBlYWhlYWQgaXMgZW5hYmxlZCBvbiB0aGUgbGlzdC5cbiAgICAgKiBAcGFyYW0gaGFzVHlwZWFoZWFkIFdoZXRoZXIgdHlwZWFoZWFkIGlzIGVuYWJsZWQuXG4gICAgICovXG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLnNldEhhc1R5cGVhaGVhZCA9IGZ1bmN0aW9uIChoYXNUeXBlYWhlYWQpIHtcbiAgICAgICAgdGhpcy5oYXNUeXBlYWhlYWQgPSBoYXNUeXBlYWhlYWQ7XG4gICAgICAgIGlmIChoYXNUeXBlYWhlYWQpIHtcbiAgICAgICAgICAgIHRoaXMuc29ydGVkSW5kZXhCeUZpcnN0Q2hhciA9IHRoaXMudHlwZWFoZWFkSW5pdFNvcnRlZEluZGV4KCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gV2hldGhlciB0eXBlYWhlYWQgaXMgY3VycmVudGx5IG1hdGNoaW5nIGEgdXNlci1zcGVjaWZpZWQgcHJlZml4LlxuICAgICAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5pc1R5cGVhaGVhZEluUHJvZ3Jlc3MgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmhhc1R5cGVhaGVhZCAmJlxuICAgICAgICAgICAgdHlwZWFoZWFkLmlzVHlwaW5nSW5Qcm9ncmVzcyh0aGlzLnR5cGVhaGVhZFN0YXRlKTtcbiAgICB9O1xuICAgIC8qKiBUb2dnbGUgdXNlIG9mIHRoZSBcImFjdGl2YXRlZFwiIENTUyBjbGFzcy4gKi9cbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VXNlQWN0aXZhdGVkQ2xhc3MgPSBmdW5jdGlvbiAodXNlQWN0aXZhdGVkKSB7XG4gICAgICAgIHRoaXMudXNlQWN0aXZhdGVkQ2xhc3MgPSB1c2VBY3RpdmF0ZWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHVzZSBvZiB0aGUgc2VsZWN0ZWQgYXR0cmlidXRlICh0cnVlIGZvciBhcmlhLXNlbGVjdGVkLCBmYWxzZSBmb3JcbiAgICAgKiBhcmlhLWNoZWNrZWQpLlxuICAgICAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRVc2VTZWxlY3RlZEF0dHJpYnV0ZSA9IGZ1bmN0aW9uICh1c2VTZWxlY3RlZCkge1xuICAgICAgICB0aGlzLnVzZVNlbGVjdGVkQXR0ciA9IHVzZVNlbGVjdGVkO1xuICAgIH07XG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLmdldFNlbGVjdGVkSW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNlbGVjdGVkSW5kZXg7XG4gICAgfTtcbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0U2VsZWN0ZWRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgX2EpIHtcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIGZvcmNlVXBkYXRlID0gX2IuZm9yY2VVcGRhdGU7XG4gICAgICAgIGlmICghdGhpcy5pc0luZGV4VmFsaWQoaW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNDaGVja2JveExpc3QpIHtcbiAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tib3hBdEluZGV4KGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmlzUmFkaW9MaXN0KSB7XG4gICAgICAgICAgICB0aGlzLnNldFJhZGlvQXRJbmRleChpbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnNldFNpbmdsZVNlbGVjdGlvbkF0SW5kZXgoaW5kZXgsIHsgZm9yY2VVcGRhdGU6IGZvcmNlVXBkYXRlIH0pO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGb2N1cyBpbiBoYW5kbGVyIGZvciB0aGUgbGlzdCBpdGVtcy5cbiAgICAgKi9cbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlRm9jdXNJbiA9IGZ1bmN0aW9uIChsaXN0SXRlbUluZGV4KSB7XG4gICAgICAgIGlmIChsaXN0SXRlbUluZGV4ID49IDApIHtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNlZEl0ZW1JbmRleCA9IGxpc3RJdGVtSW5kZXg7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0QXR0cmlidXRlRm9yRWxlbWVudEluZGV4KGxpc3RJdGVtSW5kZXgsICd0YWJpbmRleCcsICcwJyk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0VGFiSW5kZXhGb3JMaXN0SXRlbUNoaWxkcmVuKGxpc3RJdGVtSW5kZXgsICcwJyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZvY3VzIG91dCBoYW5kbGVyIGZvciB0aGUgbGlzdCBpdGVtcy5cbiAgICAgKi9cbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlRm9jdXNPdXQgPSBmdW5jdGlvbiAobGlzdEl0ZW1JbmRleCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICBpZiAobGlzdEl0ZW1JbmRleCA+PSAwKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0QXR0cmlidXRlRm9yRWxlbWVudEluZGV4KGxpc3RJdGVtSW5kZXgsICd0YWJpbmRleCcsICctMScpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnNldFRhYkluZGV4Rm9yTGlzdEl0ZW1DaGlsZHJlbihsaXN0SXRlbUluZGV4LCAnLTEnKTtcbiAgICAgICAgfVxuICAgICAgICAvKipcbiAgICAgICAgICogQmV0d2VlbiBGb2N1c291dCAmIEZvY3VzaW4gc29tZSBicm93c2VycyBkbyBub3QgaGF2ZSBmb2N1cyBvbiBhbnlcbiAgICAgICAgICogZWxlbWVudC4gU2V0dGluZyBhIGRlbGF5IHRvIHdhaXQgdGlsbCB0aGUgZm9jdXMgaXMgbW92ZWQgdG8gbmV4dCBlbGVtZW50LlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAoIV90aGlzLmFkYXB0ZXIuaXNGb2N1c0luc2lkZUxpc3QoKSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFRhYmluZGV4VG9GaXJzdFNlbGVjdGVkT3JGb2N1c2VkSXRlbSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LCAwKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEtleSBoYW5kbGVyIGZvciB0aGUgbGlzdC5cbiAgICAgKi9cbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlS2V5ZG93biA9IGZ1bmN0aW9uIChldmVudCwgaXNSb290TGlzdEl0ZW0sIGxpc3RJdGVtSW5kZXgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGlzQXJyb3dMZWZ0ID0gbm9ybWFsaXplS2V5KGV2ZW50KSA9PT0gJ0Fycm93TGVmdCc7XG4gICAgICAgIHZhciBpc0Fycm93VXAgPSBub3JtYWxpemVLZXkoZXZlbnQpID09PSAnQXJyb3dVcCc7XG4gICAgICAgIHZhciBpc0Fycm93UmlnaHQgPSBub3JtYWxpemVLZXkoZXZlbnQpID09PSAnQXJyb3dSaWdodCc7XG4gICAgICAgIHZhciBpc0Fycm93RG93biA9IG5vcm1hbGl6ZUtleShldmVudCkgPT09ICdBcnJvd0Rvd24nO1xuICAgICAgICB2YXIgaXNIb21lID0gbm9ybWFsaXplS2V5KGV2ZW50KSA9PT0gJ0hvbWUnO1xuICAgICAgICB2YXIgaXNFbmQgPSBub3JtYWxpemVLZXkoZXZlbnQpID09PSAnRW5kJztcbiAgICAgICAgdmFyIGlzRW50ZXIgPSBub3JtYWxpemVLZXkoZXZlbnQpID09PSAnRW50ZXInO1xuICAgICAgICB2YXIgaXNTcGFjZSA9IG5vcm1hbGl6ZUtleShldmVudCkgPT09ICdTcGFjZWJhcic7XG4gICAgICAgIC8vIEhhdmUgdG8gY2hlY2sgYm90aCB1cHBlciBhbmQgbG93ZXIgY2FzZSwgYmVjYXVzZSBoYXZpbmcgY2FwcyBsb2NrIG9uXG4gICAgICAgIC8vIGFmZmVjdHMgdGhlIHZhbHVlLlxuICAgICAgICB2YXIgaXNMZXR0ZXJBID0gZXZlbnQua2V5ID09PSAnQScgfHwgZXZlbnQua2V5ID09PSAnYSc7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNSb290Rm9jdXNlZCgpKSB7XG4gICAgICAgICAgICBpZiAoaXNBcnJvd1VwIHx8IGlzRW5kKSB7XG4gICAgICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmZvY3VzTGFzdEVsZW1lbnQoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKGlzQXJyb3dEb3duIHx8IGlzSG9tZSkge1xuICAgICAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgdGhpcy5mb2N1c0ZpcnN0RWxlbWVudCgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMuaGFzVHlwZWFoZWFkKSB7XG4gICAgICAgICAgICAgICAgdmFyIGhhbmRsZUtleWRvd25PcHRzID0ge1xuICAgICAgICAgICAgICAgICAgICBldmVudDogZXZlbnQsXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzSXRlbUF0SW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMuZm9jdXNJdGVtQXRJbmRleChpbmRleCk7XG4gICAgICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgICAgIGZvY3VzZWRJdGVtSW5kZXg6IC0xLFxuICAgICAgICAgICAgICAgICAgICBpc1RhcmdldExpc3RJdGVtOiBpc1Jvb3RMaXN0SXRlbSxcbiAgICAgICAgICAgICAgICAgICAgc29ydGVkSW5kZXhCeUZpcnN0Q2hhcjogdGhpcy5zb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyLFxuICAgICAgICAgICAgICAgICAgICBpc0l0ZW1BdEluZGV4RGlzYWJsZWQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmFkYXB0ZXIubGlzdEl0ZW1BdEluZGV4SGFzQ2xhc3MoaW5kZXgsIGNzc0NsYXNzZXMuTElTVF9JVEVNX0RJU0FCTEVEX0NMQVNTKTtcbiAgICAgICAgICAgICAgICAgICAgfSxcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHR5cGVhaGVhZC5oYW5kbGVLZXlkb3duKGhhbmRsZUtleWRvd25PcHRzLCB0aGlzLnR5cGVhaGVhZFN0YXRlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3VycmVudEluZGV4ID0gdGhpcy5hZGFwdGVyLmdldEZvY3VzZWRFbGVtZW50SW5kZXgoKTtcbiAgICAgICAgaWYgKGN1cnJlbnRJbmRleCA9PT0gLTEpIHtcbiAgICAgICAgICAgIGN1cnJlbnRJbmRleCA9IGxpc3RJdGVtSW5kZXg7XG4gICAgICAgICAgICBpZiAoY3VycmVudEluZGV4IDwgMCkge1xuICAgICAgICAgICAgICAgIC8vIElmIHRoaXMgZXZlbnQgZG9lc24ndCBoYXZlIGEgbWRjLWxpc3QtaXRlbSBhbmNlc3RvciBmcm9tIHRoZVxuICAgICAgICAgICAgICAgIC8vIGN1cnJlbnQgbGlzdCAobm90IGZyb20gYSBzdWJsaXN0KSwgcmV0dXJuIGVhcmx5LlxuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoKHRoaXMuaXNWZXJ0aWNhbCAmJiBpc0Fycm93RG93bikgfHxcbiAgICAgICAgICAgICghdGhpcy5pc1ZlcnRpY2FsICYmIGlzQXJyb3dSaWdodCkpIHtcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0RXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5mb2N1c05leHRFbGVtZW50KGN1cnJlbnRJbmRleCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoKHRoaXMuaXNWZXJ0aWNhbCAmJiBpc0Fycm93VXApIHx8ICghdGhpcy5pc1ZlcnRpY2FsICYmIGlzQXJyb3dMZWZ0KSkge1xuICAgICAgICAgICAgcHJldmVudERlZmF1bHRFdmVudChldmVudCk7XG4gICAgICAgICAgICB0aGlzLmZvY3VzUHJldkVsZW1lbnQoY3VycmVudEluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc0hvbWUpIHtcbiAgICAgICAgICAgIHByZXZlbnREZWZhdWx0RXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgdGhpcy5mb2N1c0ZpcnN0RWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzRW5kKSB7XG4gICAgICAgICAgICBwcmV2ZW50RGVmYXVsdEV2ZW50KGV2ZW50KTtcbiAgICAgICAgICAgIHRoaXMuZm9jdXNMYXN0RWxlbWVudCgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzTGV0dGVyQSAmJiBldmVudC5jdHJsS2V5ICYmIHRoaXMuaXNDaGVja2JveExpc3QpIHtcbiAgICAgICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICB0aGlzLnRvZ2dsZUFsbCh0aGlzLnNlbGVjdGVkSW5kZXggPT09IG51bWJlcnMuVU5TRVRfSU5ERVggP1xuICAgICAgICAgICAgICAgIFtdIDpcbiAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXgpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzRW50ZXIgfHwgaXNTcGFjZSkge1xuICAgICAgICAgICAgaWYgKGlzUm9vdExpc3RJdGVtKSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIGVhcmx5IGlmIGVudGVyIGtleSBpcyBwcmVzc2VkIG9uIGFuY2hvciBlbGVtZW50IHdoaWNoIHRyaWdnZXJzXG4gICAgICAgICAgICAgICAgLy8gc3ludGhldGljIE1vdXNlRXZlbnQgZXZlbnQuXG4gICAgICAgICAgICAgICAgdmFyIHRhcmdldCA9IGV2ZW50LnRhcmdldDtcbiAgICAgICAgICAgICAgICBpZiAodGFyZ2V0ICYmIHRhcmdldC50YWdOYW1lID09PSAnQScgJiYgaXNFbnRlcikge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHByZXZlbnREZWZhdWx0RXZlbnQoZXZlbnQpO1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFkYXB0ZXIubGlzdEl0ZW1BdEluZGV4SGFzQ2xhc3MoY3VycmVudEluZGV4LCBjc3NDbGFzc2VzLkxJU1RfSVRFTV9ESVNBQkxFRF9DTEFTUykpIHtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNUeXBlYWhlYWRJblByb2dyZXNzKCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNTZWxlY3RhYmxlTGlzdCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkSW5kZXhPbkFjdGlvbihjdXJyZW50SW5kZXgpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5ub3RpZnlBY3Rpb24oY3VycmVudEluZGV4KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGFzVHlwZWFoZWFkKSB7XG4gICAgICAgICAgICB2YXIgaGFuZGxlS2V5ZG93bk9wdHMgPSB7XG4gICAgICAgICAgICAgICAgZXZlbnQ6IGV2ZW50LFxuICAgICAgICAgICAgICAgIGZvY3VzSXRlbUF0SW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5mb2N1c0l0ZW1BdEluZGV4KGluZGV4KTtcbiAgICAgICAgICAgICAgICB9LFxuICAgICAgICAgICAgICAgIGZvY3VzZWRJdGVtSW5kZXg6IHRoaXMuZm9jdXNlZEl0ZW1JbmRleCxcbiAgICAgICAgICAgICAgICBpc1RhcmdldExpc3RJdGVtOiBpc1Jvb3RMaXN0SXRlbSxcbiAgICAgICAgICAgICAgICBzb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyOiB0aGlzLnNvcnRlZEluZGV4QnlGaXJzdENoYXIsXG4gICAgICAgICAgICAgICAgaXNJdGVtQXRJbmRleERpc2FibGVkOiBmdW5jdGlvbiAoaW5kZXgpIHsgcmV0dXJuIF90aGlzLmFkYXB0ZXIubGlzdEl0ZW1BdEluZGV4SGFzQ2xhc3MoaW5kZXgsIGNzc0NsYXNzZXMuTElTVF9JVEVNX0RJU0FCTEVEX0NMQVNTKTsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICB0eXBlYWhlYWQuaGFuZGxlS2V5ZG93bihoYW5kbGVLZXlkb3duT3B0cywgdGhpcy50eXBlYWhlYWRTdGF0ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsaWNrIGhhbmRsZXIgZm9yIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChpbmRleCwgdG9nZ2xlQ2hlY2tib3gpIHtcbiAgICAgICAgaWYgKGluZGV4ID09PSBudW1iZXJzLlVOU0VUX0lOREVYKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlci5saXN0SXRlbUF0SW5kZXhIYXNDbGFzcyhpbmRleCwgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fRElTQUJMRURfQ0xBU1MpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaXNTZWxlY3RhYmxlTGlzdCgpKSB7XG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkSW5kZXhPbkFjdGlvbihpbmRleCwgdG9nZ2xlQ2hlY2tib3gpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5ub3RpZnlBY3Rpb24oaW5kZXgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRm9jdXNlcyB0aGUgbmV4dCBlbGVtZW50IG9uIHRoZSBsaXN0LlxuICAgICAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5mb2N1c05leHRFbGVtZW50ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBjb3VudCA9IHRoaXMuYWRhcHRlci5nZXRMaXN0SXRlbUNvdW50KCk7XG4gICAgICAgIHZhciBuZXh0SW5kZXggPSBpbmRleCArIDE7XG4gICAgICAgIGlmIChuZXh0SW5kZXggPj0gY291bnQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndyYXBGb2N1cykge1xuICAgICAgICAgICAgICAgIG5leHRJbmRleCA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBSZXR1cm4gZWFybHkgYmVjYXVzZSBsYXN0IGl0ZW0gaXMgYWxyZWFkeSBmb2N1c2VkLlxuICAgICAgICAgICAgICAgIHJldHVybiBpbmRleDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZvY3VzSXRlbUF0SW5kZXgobmV4dEluZGV4KTtcbiAgICAgICAgcmV0dXJuIG5leHRJbmRleDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZvY3VzZXMgdGhlIHByZXZpb3VzIGVsZW1lbnQgb24gdGhlIGxpc3QuXG4gICAgICovXG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLmZvY3VzUHJldkVsZW1lbnQgPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdmFyIHByZXZJbmRleCA9IGluZGV4IC0gMTtcbiAgICAgICAgaWYgKHByZXZJbmRleCA8IDApIHtcbiAgICAgICAgICAgIGlmICh0aGlzLndyYXBGb2N1cykge1xuICAgICAgICAgICAgICAgIHByZXZJbmRleCA9IHRoaXMuYWRhcHRlci5nZXRMaXN0SXRlbUNvdW50KCkgLSAxO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gUmV0dXJuIGVhcmx5IGJlY2F1c2UgZmlyc3QgaXRlbSBpcyBhbHJlYWR5IGZvY3VzZWQuXG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMuZm9jdXNJdGVtQXRJbmRleChwcmV2SW5kZXgpO1xuICAgICAgICByZXR1cm4gcHJldkluZGV4O1xuICAgIH07XG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLmZvY3VzRmlyc3RFbGVtZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmZvY3VzSXRlbUF0SW5kZXgoMCk7XG4gICAgICAgIHJldHVybiAwO1xuICAgIH07XG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLmZvY3VzTGFzdEVsZW1lbnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBsYXN0SW5kZXggPSB0aGlzLmFkYXB0ZXIuZ2V0TGlzdEl0ZW1Db3VudCgpIC0gMTtcbiAgICAgICAgdGhpcy5mb2N1c0l0ZW1BdEluZGV4KGxhc3RJbmRleCk7XG4gICAgICAgIHJldHVybiBsYXN0SW5kZXg7XG4gICAgfTtcbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuZm9jdXNJbml0aWFsRWxlbWVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGluaXRpYWxJbmRleCA9IHRoaXMuZ2V0Rmlyc3RTZWxlY3RlZE9yRm9jdXNlZEl0ZW1JbmRleCgpO1xuICAgICAgICB0aGlzLmZvY3VzSXRlbUF0SW5kZXgoaW5pdGlhbEluZGV4KTtcbiAgICAgICAgcmV0dXJuIGluaXRpYWxJbmRleDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBpdGVtSW5kZXggSW5kZXggb2YgdGhlIGxpc3QgaXRlbVxuICAgICAqIEBwYXJhbSBpc0VuYWJsZWQgU2V0cyB0aGUgbGlzdCBpdGVtIHRvIGVuYWJsZWQgb3IgZGlzYWJsZWQuXG4gICAgICovXG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLnNldEVuYWJsZWQgPSBmdW5jdGlvbiAoaXRlbUluZGV4LCBpc0VuYWJsZWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLmlzSW5kZXhWYWxpZChpdGVtSW5kZXgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzRm9yRWxlbWVudEluZGV4KGl0ZW1JbmRleCwgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fRElTQUJMRURfQ0xBU1MpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnNldEF0dHJpYnV0ZUZvckVsZW1lbnRJbmRleChpdGVtSW5kZXgsIHN0cmluZ3MuQVJJQV9ESVNBQkxFRCwgJ2ZhbHNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3NGb3JFbGVtZW50SW5kZXgoaXRlbUluZGV4LCBjc3NDbGFzc2VzLkxJU1RfSVRFTV9ESVNBQkxFRF9DTEFTUyk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0QXR0cmlidXRlRm9yRWxlbWVudEluZGV4KGl0ZW1JbmRleCwgc3RyaW5ncy5BUklBX0RJU0FCTEVELCAndHJ1ZScpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0U2luZ2xlU2VsZWN0aW9uQXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCwgX2EpIHtcbiAgICAgICAgdmFyIF9iID0gX2EgPT09IHZvaWQgMCA/IHt9IDogX2EsIGZvcmNlVXBkYXRlID0gX2IuZm9yY2VVcGRhdGU7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkSW5kZXggPT09IGluZGV4ICYmICFmb3JjZVVwZGF0ZSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBzZWxlY3RlZENsYXNzTmFtZSA9IGNzc0NsYXNzZXMuTElTVF9JVEVNX1NFTEVDVEVEX0NMQVNTO1xuICAgICAgICBpZiAodGhpcy51c2VBY3RpdmF0ZWRDbGFzcykge1xuICAgICAgICAgICAgc2VsZWN0ZWRDbGFzc05hbWUgPSBjc3NDbGFzc2VzLkxJU1RfSVRFTV9BQ1RJVkFURURfQ0xBU1M7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuc2VsZWN0ZWRJbmRleCAhPT0gbnVtYmVycy5VTlNFVF9JTkRFWCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzRm9yRWxlbWVudEluZGV4KHRoaXMuc2VsZWN0ZWRJbmRleCwgc2VsZWN0ZWRDbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0QXJpYUZvclNpbmdsZVNlbGVjdGlvbkF0SW5kZXgoaW5kZXgpO1xuICAgICAgICB0aGlzLnNldFRhYmluZGV4QXRJbmRleChpbmRleCk7XG4gICAgICAgIGlmIChpbmRleCAhPT0gbnVtYmVycy5VTlNFVF9JTkRFWCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzRm9yRWxlbWVudEluZGV4KGluZGV4LCBzZWxlY3RlZENsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIGFyaWEgYXR0cmlidXRlIGZvciBzaW5nbGUgc2VsZWN0aW9uIGF0IGdpdmVuIGluZGV4LlxuICAgICAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRBcmlhRm9yU2luZ2xlU2VsZWN0aW9uQXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAvLyBEZXRlY3QgdGhlIHByZXNlbmNlIG9mIGFyaWEtY3VycmVudCBhbmQgZ2V0IHRoZSB2YWx1ZSBvbmx5IGR1cmluZyBsaXN0XG4gICAgICAgIC8vIGluaXRpYWxpemF0aW9uIHdoZW4gaXQgaXMgaW4gdW5zZXQgc3RhdGUuXG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkSW5kZXggPT09IG51bWJlcnMuVU5TRVRfSU5ERVgpIHtcbiAgICAgICAgICAgIHRoaXMuYXJpYUN1cnJlbnRBdHRyVmFsdWUgPVxuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5nZXRBdHRyaWJ1dGVGb3JFbGVtZW50SW5kZXgoaW5kZXgsIHN0cmluZ3MuQVJJQV9DVVJSRU5UKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNBcmlhQ3VycmVudCA9IHRoaXMuYXJpYUN1cnJlbnRBdHRyVmFsdWUgIT09IG51bGw7XG4gICAgICAgIHZhciBhcmlhQXR0cmlidXRlID0gaXNBcmlhQ3VycmVudCA/IHN0cmluZ3MuQVJJQV9DVVJSRU5UIDogc3RyaW5ncy5BUklBX1NFTEVDVEVEO1xuICAgICAgICBpZiAodGhpcy5zZWxlY3RlZEluZGV4ICE9PSBudW1iZXJzLlVOU0VUX0lOREVYKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0QXR0cmlidXRlRm9yRWxlbWVudEluZGV4KHRoaXMuc2VsZWN0ZWRJbmRleCwgYXJpYUF0dHJpYnV0ZSwgJ2ZhbHNlJyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ICE9PSBudW1iZXJzLlVOU0VUX0lOREVYKSB7XG4gICAgICAgICAgICB2YXIgYXJpYUF0dHJpYnV0ZVZhbHVlID0gaXNBcmlhQ3VycmVudCA/IHRoaXMuYXJpYUN1cnJlbnRBdHRyVmFsdWUgOiAndHJ1ZSc7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0QXR0cmlidXRlRm9yRWxlbWVudEluZGV4KGluZGV4LCBhcmlhQXR0cmlidXRlLCBhcmlhQXR0cmlidXRlVmFsdWUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIHRoZSBhdHRyaWJ1dGUgdG8gdXNlIGZvciBpbmRpY2F0aW5nIHNlbGVjdGlvbiBzdGF0dXMuXG4gICAgICovXG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLmdldFNlbGVjdGlvbkF0dHJpYnV0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudXNlU2VsZWN0ZWRBdHRyID8gc3RyaW5ncy5BUklBX1NFTEVDVEVEIDogc3RyaW5ncy5BUklBX0NIRUNLRUQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBUb2dnbGVzIHJhZGlvIGF0IGdpdmUgaW5kZXguIFJhZGlvIGRvZXNuJ3QgY2hhbmdlIHRoZSBjaGVja2VkIHN0YXRlIGlmIGl0XG4gICAgICogaXMgYWxyZWFkeSBjaGVja2VkLlxuICAgICAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRSYWRpb0F0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdmFyIHNlbGVjdGlvbkF0dHJpYnV0ZSA9IHRoaXMuZ2V0U2VsZWN0aW9uQXR0cmlidXRlKCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRDaGVja2VkQ2hlY2tib3hPclJhZGlvQXRJbmRleChpbmRleCwgdHJ1ZSk7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkSW5kZXggIT09IG51bWJlcnMuVU5TRVRfSU5ERVgpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyaWJ1dGVGb3JFbGVtZW50SW5kZXgodGhpcy5zZWxlY3RlZEluZGV4LCBzZWxlY3Rpb25BdHRyaWJ1dGUsICdmYWxzZScpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyaWJ1dGVGb3JFbGVtZW50SW5kZXgoaW5kZXgsIHNlbGVjdGlvbkF0dHJpYnV0ZSwgJ3RydWUnKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XG4gICAgfTtcbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0Q2hlY2tib3hBdEluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBzZWxlY3Rpb25BdHRyaWJ1dGUgPSB0aGlzLmdldFNlbGVjdGlvbkF0dHJpYnV0ZSgpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuYWRhcHRlci5nZXRMaXN0SXRlbUNvdW50KCk7IGkrKykge1xuICAgICAgICAgICAgdmFyIGlzQ2hlY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgaWYgKGluZGV4LmluZGV4T2YoaSkgPj0gMCkge1xuICAgICAgICAgICAgICAgIGlzQ2hlY2tlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0Q2hlY2tlZENoZWNrYm94T3JSYWRpb0F0SW5kZXgoaSwgaXNDaGVja2VkKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyaWJ1dGVGb3JFbGVtZW50SW5kZXgoaSwgc2VsZWN0aW9uQXR0cmlidXRlLCBpc0NoZWNrZWQgPyAndHJ1ZScgOiAnZmFsc2UnKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgICB9O1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRUYWJpbmRleEF0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgaWYgKHRoaXMuZm9jdXNlZEl0ZW1JbmRleCA9PT0gbnVtYmVycy5VTlNFVF9JTkRFWCAmJiBpbmRleCAhPT0gMCkge1xuICAgICAgICAgICAgLy8gSWYgc29tZSBsaXN0IGl0ZW0gd2FzIHNlbGVjdGVkIHNldCBmaXJzdCBsaXN0IGl0ZW0ncyB0YWJpbmRleCB0byAtMS5cbiAgICAgICAgICAgIC8vIEdlbmVyYWxseSwgdGFiaW5kZXggaXMgc2V0IHRvIDAgb24gZmlyc3QgbGlzdCBpdGVtIG9mIGxpc3QgdGhhdCBoYXMgbm9cbiAgICAgICAgICAgIC8vIHByZXNlbGVjdGVkIGl0ZW1zLlxuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnNldEF0dHJpYnV0ZUZvckVsZW1lbnRJbmRleCgwLCAndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmZvY3VzZWRJdGVtSW5kZXggPj0gMCAmJiB0aGlzLmZvY3VzZWRJdGVtSW5kZXggIT09IGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0QXR0cmlidXRlRm9yRWxlbWVudEluZGV4KHRoaXMuZm9jdXNlZEl0ZW1JbmRleCwgJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gU2V0IHRoZSBwcmV2aW91cyBzZWxlY3Rpb24ncyB0YWJpbmRleCB0byAtMS4gV2UgbmVlZCB0aGlzIGJlY2F1c2VcbiAgICAgICAgLy8gaW4gc2VsZWN0aW9uIG1lbnVzIHRoYXQgYXJlIG5vdCB2aXNpYmxlLCBwcm9ncmFtbWF0aWNhbGx5IHNldHRpbmcgYW5cbiAgICAgICAgLy8gb3B0aW9uIHdpbGwgbm90IGNoYW5nZSBmb2N1cyBidXQgd2lsbCBjaGFuZ2Ugd2hlcmUgdGFiaW5kZXggc2hvdWxkIGJlIDAuXG4gICAgICAgIGlmICghKHRoaXMuc2VsZWN0ZWRJbmRleCBpbnN0YW5jZW9mIEFycmF5KSAmJlxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ICE9PSBpbmRleCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnNldEF0dHJpYnV0ZUZvckVsZW1lbnRJbmRleCh0aGlzLnNlbGVjdGVkSW5kZXgsICd0YWJpbmRleCcsICctMScpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChpbmRleCAhPT0gbnVtYmVycy5VTlNFVF9JTkRFWCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnNldEF0dHJpYnV0ZUZvckVsZW1lbnRJbmRleChpbmRleCwgJ3RhYmluZGV4JywgJzAnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiBSZXR1cm4gdHJ1ZSBpZiBpdCBpcyBzaW5nbGUgc2VsZWN0aW4gbGlzdCwgY2hlY2tib3ggbGlzdCBvciByYWRpb1xuICAgICAqICAgICBsaXN0LlxuICAgICAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5pc1NlbGVjdGFibGVMaXN0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5pc1NpbmdsZVNlbGVjdGlvbkxpc3QgfHwgdGhpcy5pc0NoZWNrYm94TGlzdCB8fFxuICAgICAgICAgICAgdGhpcy5pc1JhZGlvTGlzdDtcbiAgICB9O1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRUYWJpbmRleFRvRmlyc3RTZWxlY3RlZE9yRm9jdXNlZEl0ZW0gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciB0YXJnZXRJbmRleCA9IHRoaXMuZ2V0Rmlyc3RTZWxlY3RlZE9yRm9jdXNlZEl0ZW1JbmRleCgpO1xuICAgICAgICB0aGlzLnNldFRhYmluZGV4QXRJbmRleCh0YXJnZXRJbmRleCk7XG4gICAgfTtcbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0Rmlyc3RTZWxlY3RlZE9yRm9jdXNlZEl0ZW1JbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gQWN0aW9uIGxpc3RzIHJldGFpbiBmb2N1cyBvbiB0aGUgbW9zdCByZWNlbnRseSBmb2N1c2VkIGl0ZW0uXG4gICAgICAgIGlmICghdGhpcy5pc1NlbGVjdGFibGVMaXN0KCkpIHtcbiAgICAgICAgICAgIHJldHVybiBNYXRoLm1heCh0aGlzLmZvY3VzZWRJdGVtSW5kZXgsIDApO1xuICAgICAgICB9XG4gICAgICAgIC8vIFNpbmdsZS1zZWxlY3Rpb24gbGlzdHMgZm9jdXMgdGhlIHNlbGVjdGVkIGl0ZW0uXG4gICAgICAgIGlmICh0eXBlb2YgdGhpcy5zZWxlY3RlZEluZGV4ID09PSAnbnVtYmVyJyAmJlxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ICE9PSBudW1iZXJzLlVOU0VUX0lOREVYKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEluZGV4O1xuICAgICAgICB9XG4gICAgICAgIC8vIE11bHRpcGxlLXNlbGVjdGlvbiBsaXN0cyBmb2N1cyB0aGUgZmlyc3Qgc2VsZWN0ZWQgaXRlbS5cbiAgICAgICAgaWYgKGlzTnVtYmVyQXJyYXkodGhpcy5zZWxlY3RlZEluZGV4KSAmJiB0aGlzLnNlbGVjdGVkSW5kZXgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRJbmRleC5yZWR1Y2UoZnVuY3Rpb24gKG1pbkluZGV4LCBjdXJyZW50SW5kZXgpIHsgcmV0dXJuIE1hdGgubWluKG1pbkluZGV4LCBjdXJyZW50SW5kZXgpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBTZWxlY3Rpb24gbGlzdHMgd2l0aG91dCBhIHNlbGVjdGlvbiBmb2N1cyB0aGUgZmlyc3QgaXRlbS5cbiAgICAgICAgcmV0dXJuIDA7XG4gICAgfTtcbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuaXNJbmRleFZhbGlkID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmIChpbmRleCBpbnN0YW5jZW9mIEFycmF5KSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuaXNDaGVja2JveExpc3QpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ01EQ0xpc3RGb3VuZGF0aW9uOiBBcnJheSBvZiBpbmRleCBpcyBvbmx5IHN1cHBvcnRlZCBmb3IgY2hlY2tib3ggYmFzZWQgbGlzdCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKGluZGV4Lmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4LnNvbWUoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIF90aGlzLmlzSW5kZXhJblJhbmdlKGkpOyB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0eXBlb2YgaW5kZXggPT09ICdudW1iZXInKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5pc0NoZWNrYm94TGlzdCkge1xuICAgICAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIk1EQ0xpc3RGb3VuZGF0aW9uOiBFeHBlY3RlZCBhcnJheSBvZiBpbmRleCBmb3IgY2hlY2tib3ggYmFzZWQgbGlzdCBidXQgZ290IG51bWJlcjogXCIgKyBpbmRleCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pc0luZGV4SW5SYW5nZShpbmRleCkgfHxcbiAgICAgICAgICAgICAgICB0aGlzLmlzU2luZ2xlU2VsZWN0aW9uTGlzdCAmJiBpbmRleCA9PT0gbnVtYmVycy5VTlNFVF9JTkRFWDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLmlzSW5kZXhJblJhbmdlID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBsaXN0U2l6ZSA9IHRoaXMuYWRhcHRlci5nZXRMaXN0SXRlbUNvdW50KCk7XG4gICAgICAgIHJldHVybiBpbmRleCA+PSAwICYmIGluZGV4IDwgbGlzdFNpemU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHNlbGVjdGVkIGluZGV4IG9uIHVzZXIgYWN0aW9uLCB0b2dnbGVzIGNoZWNrYm94IC8gcmFkaW8gYmFzZWQgb25cbiAgICAgKiB0b2dnbGVDaGVja2JveCB2YWx1ZS4gVXNlciBpbnRlcmFjdGlvbiBzaG91bGQgbm90IHRvZ2dsZSBsaXN0IGl0ZW0ocykgd2hlblxuICAgICAqIGRpc2FibGVkLlxuICAgICAqL1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRTZWxlY3RlZEluZGV4T25BY3Rpb24gPSBmdW5jdGlvbiAoaW5kZXgsIHRvZ2dsZUNoZWNrYm94KSB7XG4gICAgICAgIGlmICh0b2dnbGVDaGVja2JveCA9PT0gdm9pZCAwKSB7IHRvZ2dsZUNoZWNrYm94ID0gdHJ1ZTsgfVxuICAgICAgICBpZiAodGhpcy5pc0NoZWNrYm94TGlzdCkge1xuICAgICAgICAgICAgdGhpcy50b2dnbGVDaGVja2JveEF0SW5kZXgoaW5kZXgsIHRvZ2dsZUNoZWNrYm94KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJbmRleChpbmRleCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ0xpc3RGb3VuZGF0aW9uLnByb3RvdHlwZS50b2dnbGVDaGVja2JveEF0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgsIHRvZ2dsZUNoZWNrYm94KSB7XG4gICAgICAgIHZhciBzZWxlY3Rpb25BdHRyaWJ1dGUgPSB0aGlzLmdldFNlbGVjdGlvbkF0dHJpYnV0ZSgpO1xuICAgICAgICB2YXIgaXNDaGVja2VkID0gdGhpcy5hZGFwdGVyLmlzQ2hlY2tib3hDaGVja2VkQXRJbmRleChpbmRleCk7XG4gICAgICAgIGlmICh0b2dnbGVDaGVja2JveCkge1xuICAgICAgICAgICAgaXNDaGVja2VkID0gIWlzQ2hlY2tlZDtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRDaGVja2VkQ2hlY2tib3hPclJhZGlvQXRJbmRleChpbmRleCwgaXNDaGVja2VkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0QXR0cmlidXRlRm9yRWxlbWVudEluZGV4KGluZGV4LCBzZWxlY3Rpb25BdHRyaWJ1dGUsIGlzQ2hlY2tlZCA/ICd0cnVlJyA6ICdmYWxzZScpO1xuICAgICAgICAvLyBJZiBub25lIG9mIHRoZSBjaGVja2JveCBpdGVtcyBhcmUgc2VsZWN0ZWQgYW5kIHNlbGVjdGVkSW5kZXggaXMgbm90XG4gICAgICAgIC8vIGluaXRpYWxpemVkIHRoZW4gcHJvdmlkZSBhIGRlZmF1bHQgdmFsdWUuXG4gICAgICAgIHZhciBzZWxlY3RlZEluZGV4ZXMgPSB0aGlzLnNlbGVjdGVkSW5kZXggPT09IG51bWJlcnMuVU5TRVRfSU5ERVggP1xuICAgICAgICAgICAgW10gOlxuICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4LnNsaWNlKCk7XG4gICAgICAgIGlmIChpc0NoZWNrZWQpIHtcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXhlcy5wdXNoKGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHNlbGVjdGVkSW5kZXhlcyA9IHNlbGVjdGVkSW5kZXhlcy5maWx0ZXIoZnVuY3Rpb24gKGkpIHsgcmV0dXJuIGkgIT09IGluZGV4OyB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBzZWxlY3RlZEluZGV4ZXM7XG4gICAgfTtcbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuZm9jdXNJdGVtQXRJbmRleCA9IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIuZm9jdXNJdGVtQXRJbmRleChpbmRleCk7XG4gICAgICAgIHRoaXMuZm9jdXNlZEl0ZW1JbmRleCA9IGluZGV4O1xuICAgIH07XG4gICAgTURDTGlzdEZvdW5kYXRpb24ucHJvdG90eXBlLnRvZ2dsZUFsbCA9IGZ1bmN0aW9uIChjdXJyZW50bHlTZWxlY3RlZEluZGV4ZXMpIHtcbiAgICAgICAgdmFyIGNvdW50ID0gdGhpcy5hZGFwdGVyLmdldExpc3RJdGVtQ291bnQoKTtcbiAgICAgICAgLy8gSWYgYWxsIGl0ZW1zIGFyZSBzZWxlY3RlZCwgZGVzZWxlY3QgZXZlcnl0aGluZy5cbiAgICAgICAgaWYgKGN1cnJlbnRseVNlbGVjdGVkSW5kZXhlcy5sZW5ndGggPT09IGNvdW50KSB7XG4gICAgICAgICAgICB0aGlzLnNldENoZWNrYm94QXRJbmRleChbXSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBPdGhlcndpc2Ugc2VsZWN0IGFsbCBlbmFibGVkIG9wdGlvbnMuXG4gICAgICAgICAgICB2YXIgYWxsSW5kZXhlcyA9IFtdO1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3VudDsgaSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCF0aGlzLmFkYXB0ZXIubGlzdEl0ZW1BdEluZGV4SGFzQ2xhc3MoaSwgY3NzQ2xhc3Nlcy5MSVNUX0lURU1fRElTQUJMRURfQ0xBU1MpIHx8XG4gICAgICAgICAgICAgICAgICAgIGN1cnJlbnRseVNlbGVjdGVkSW5kZXhlcy5pbmRleE9mKGkpID4gLTEpIHtcbiAgICAgICAgICAgICAgICAgICAgYWxsSW5kZXhlcy5wdXNoKGkpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc2V0Q2hlY2tib3hBdEluZGV4KGFsbEluZGV4ZXMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBHaXZlbiB0aGUgbmV4dCBkZXNpcmVkIGNoYXJhY3RlciBmcm9tIHRoZSB1c2VyLCBhZGRzIGl0IHRvIHRoZSB0eXBlYWhlYWRcbiAgICAgKiBidWZmZXIuIFRoZW4sIGF0dGVtcHRzIHRvIGZpbmQgdGhlIG5leHQgb3B0aW9uIG1hdGNoaW5nIHRoZSBidWZmZXIuIFdyYXBzXG4gICAgICogYXJvdW5kIGlmIGF0IHRoZSBlbmQgb2Ygb3B0aW9ucy5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBuZXh0Q2hhciBUaGUgbmV4dCBjaGFyYWN0ZXIgdG8gYWRkIHRvIHRoZSBwcmVmaXggYnVmZmVyLlxuICAgICAqIEBwYXJhbSBzdGFydGluZ0luZGV4IFRoZSBpbmRleCBmcm9tIHdoaWNoIHRvIHN0YXJ0IG1hdGNoaW5nLiBPbmx5IHJlbGV2YW50XG4gICAgICogICAgIHdoZW4gc3RhcnRpbmcgYSBuZXcgbWF0Y2ggc2VxdWVuY2UuIFRvIHN0YXJ0IGEgbmV3IG1hdGNoIHNlcXVlbmNlLFxuICAgICAqICAgICBjbGVhciB0aGUgYnVmZmVyIHVzaW5nIGBjbGVhclR5cGVhaGVhZEJ1ZmZlcmAsIG9yIHdhaXQgZm9yIHRoZSBidWZmZXJcbiAgICAgKiAgICAgdG8gY2xlYXIgYWZ0ZXIgYSBzZXQgaW50ZXJ2YWwgZGVmaW5lZCBpbiBsaXN0IGZvdW5kYXRpb24uIERlZmF1bHRzIHRvXG4gICAgICogICAgIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBpbmRleC5cbiAgICAgKiBAcmV0dXJuIFRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCBpdGVtLCBvciAtMSBpZiBubyBtYXRjaC5cbiAgICAgKi9cbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUudHlwZWFoZWFkTWF0Y2hJdGVtID0gZnVuY3Rpb24gKG5leHRDaGFyLCBzdGFydGluZ0luZGV4LCBza2lwRm9jdXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHNraXBGb2N1cyA9PT0gdm9pZCAwKSB7IHNraXBGb2N1cyA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBvcHRzID0ge1xuICAgICAgICAgICAgZm9jdXNJdGVtQXRJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZm9jdXNJdGVtQXRJbmRleChpbmRleCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZm9jdXNlZEl0ZW1JbmRleDogc3RhcnRpbmdJbmRleCA/IHN0YXJ0aW5nSW5kZXggOiB0aGlzLmZvY3VzZWRJdGVtSW5kZXgsXG4gICAgICAgICAgICBuZXh0Q2hhcjogbmV4dENoYXIsXG4gICAgICAgICAgICBzb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyOiB0aGlzLnNvcnRlZEluZGV4QnlGaXJzdENoYXIsXG4gICAgICAgICAgICBza2lwRm9jdXM6IHNraXBGb2N1cyxcbiAgICAgICAgICAgIGlzSXRlbUF0SW5kZXhEaXNhYmxlZDogZnVuY3Rpb24gKGluZGV4KSB7IHJldHVybiBfdGhpcy5hZGFwdGVyLmxpc3RJdGVtQXRJbmRleEhhc0NsYXNzKGluZGV4LCBjc3NDbGFzc2VzLkxJU1RfSVRFTV9ESVNBQkxFRF9DTEFTUyk7IH1cbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIHR5cGVhaGVhZC5tYXRjaEl0ZW0ob3B0cywgdGhpcy50eXBlYWhlYWRTdGF0ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgTURDTGlzdFRleHRBbmRJbmRleCBkYXRhIHN0cnVjdHVyZSBieSBpbmRleGluZyB0aGUgY3VycmVudFxuICAgICAqIGxpc3QgaXRlbXMgYnkgcHJpbWFyeSB0ZXh0LlxuICAgICAqXG4gICAgICogQHJldHVybiBUaGUgcHJpbWFyeSB0ZXh0cyBvZiBhbGwgdGhlIGxpc3QgaXRlbXMgc29ydGVkIGJ5IGZpcnN0IGNoYXJhY3Rlci5cbiAgICAgKi9cbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUudHlwZWFoZWFkSW5pdFNvcnRlZEluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdHlwZWFoZWFkLmluaXRTb3J0ZWRJbmRleCh0aGlzLmFkYXB0ZXIuZ2V0TGlzdEl0ZW1Db3VudCgpLCB0aGlzLmFkYXB0ZXIuZ2V0UHJpbWFyeVRleHRBdEluZGV4KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENsZWFycyB0aGUgdHlwZWFoZWFkIGJ1ZmZlci5cbiAgICAgKi9cbiAgICBNRENMaXN0Rm91bmRhdGlvbi5wcm90b3R5cGUuY2xlYXJUeXBlYWhlYWRCdWZmZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHR5cGVhaGVhZC5jbGVhckJ1ZmZlcih0aGlzLnR5cGVhaGVhZFN0YXRlKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENMaXN0Rm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDTGlzdEZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENMaXN0Rm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICBNRU5VX1NFTEVDVEVEX0xJU1RfSVRFTTogJ21kYy1tZW51LWl0ZW0tLXNlbGVjdGVkJyxcbiAgICBNRU5VX1NFTEVDVElPTl9HUk9VUDogJ21kYy1tZW51X19zZWxlY3Rpb24tZ3JvdXAnLFxuICAgIFJPT1Q6ICdtZGMtbWVudScsXG59O1xudmFyIHN0cmluZ3MgPSB7XG4gICAgQVJJQV9DSEVDS0VEX0FUVFI6ICdhcmlhLWNoZWNrZWQnLFxuICAgIEFSSUFfRElTQUJMRURfQVRUUjogJ2FyaWEtZGlzYWJsZWQnLFxuICAgIENIRUNLQk9YX1NFTEVDVE9SOiAnaW5wdXRbdHlwZT1cImNoZWNrYm94XCJdJyxcbiAgICBMSVNUX1NFTEVDVE9SOiAnLm1kYy1saXN0LC5tZGMtZGVwcmVjYXRlZC1saXN0JyxcbiAgICBTRUxFQ1RFRF9FVkVOVDogJ01EQ01lbnU6c2VsZWN0ZWQnLFxufTtcbnZhciBudW1iZXJzID0ge1xuICAgIEZPQ1VTX1JPT1RfSU5ERVg6IC0xLFxufTtcbnZhciBEZWZhdWx0Rm9jdXNTdGF0ZTtcbihmdW5jdGlvbiAoRGVmYXVsdEZvY3VzU3RhdGUpIHtcbiAgICBEZWZhdWx0Rm9jdXNTdGF0ZVtEZWZhdWx0Rm9jdXNTdGF0ZVtcIk5PTkVcIl0gPSAwXSA9IFwiTk9ORVwiO1xuICAgIERlZmF1bHRGb2N1c1N0YXRlW0RlZmF1bHRGb2N1c1N0YXRlW1wiTElTVF9ST09UXCJdID0gMV0gPSBcIkxJU1RfUk9PVFwiO1xuICAgIERlZmF1bHRGb2N1c1N0YXRlW0RlZmF1bHRGb2N1c1N0YXRlW1wiRklSU1RfSVRFTVwiXSA9IDJdID0gXCJGSVJTVF9JVEVNXCI7XG4gICAgRGVmYXVsdEZvY3VzU3RhdGVbRGVmYXVsdEZvY3VzU3RhdGVbXCJMQVNUX0lURU1cIl0gPSAzXSA9IFwiTEFTVF9JVEVNXCI7XG59KShEZWZhdWx0Rm9jdXNTdGF0ZSB8fCAoRGVmYXVsdEZvY3VzU3RhdGUgPSB7fSkpO1xuZXhwb3J0IHsgY3NzQ2xhc3Nlcywgc3RyaW5ncywgbnVtYmVycywgRGVmYXVsdEZvY3VzU3RhdGUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDQ29tcG9uZW50IH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IGNsb3Nlc3QsIG1hdGNoZXMgfSBmcm9tICdAbWF0ZXJpYWwvZG9tL3BvbnlmaWxsJztcbmltcG9ydCB7IGNzc0NsYXNzZXMsIGRlcHJlY2F0ZWRDbGFzc05hbWVNYXAsIGV2b2x1dGlvbkF0dHJpYnV0ZSwgZXZvbHV0aW9uQ2xhc3NOYW1lTWFwLCBudW1iZXJzLCBzdHJpbmdzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgTURDTGlzdEZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xudmFyIE1EQ0xpc3QgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ0xpc3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDTGlzdCgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTGlzdC5wcm90b3R5cGUsIFwidmVydGljYWxcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFZlcnRpY2FsT3JpZW50YXRpb24odmFsdWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0xpc3QucHJvdG90eXBlLCBcImxpc3RFbGVtZW50c1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIEFycmF5LmZyb20odGhpcy5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoXCIuXCIgKyB0aGlzLmNsYXNzTmFtZU1hcFtjc3NDbGFzc2VzLkxJU1RfSVRFTV9DTEFTU10pKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENMaXN0LnByb3RvdHlwZSwgXCJ3cmFwRm9jdXNcIiwge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFdyYXBGb2N1cyh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTGlzdC5wcm90b3R5cGUsIFwidHlwZWFoZWFkSW5Qcm9ncmVzc1wiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcmV0dXJuIFdoZXRoZXIgdHlwZWFoZWFkIGlzIGN1cnJlbnRseSBtYXRjaGluZyBhIHVzZXItc3BlY2lmaWVkIHByZWZpeC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm91bmRhdGlvbi5pc1R5cGVhaGVhZEluUHJvZ3Jlc3MoKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENMaXN0LnByb3RvdHlwZSwgXCJoYXNUeXBlYWhlYWRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB3aGV0aGVyIHR5cGVhaGVhZCBmdW5jdGlvbmFsaXR5IGlzIGVuYWJsZWQgb24gdGhlIGxpc3QuXG4gICAgICAgICAqIEBwYXJhbSBoYXNUeXBlYWhlYWQgV2hldGhlciB0eXBlYWhlYWQgaXMgZW5hYmxlZC5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGhhc1R5cGVhaGVhZCkge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldEhhc1R5cGVhaGVhZChoYXNUeXBlYWhlYWQpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0xpc3QucHJvdG90eXBlLCBcInNpbmdsZVNlbGVjdGlvblwiLCB7XG4gICAgICAgIHNldDogZnVuY3Rpb24gKGlzU2luZ2xlU2VsZWN0aW9uTGlzdCkge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFNpbmdsZVNlbGVjdGlvbihpc1NpbmdsZVNlbGVjdGlvbkxpc3QpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ0xpc3QucHJvdG90eXBlLCBcInNlbGVjdGVkSW5kZXhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvdW5kYXRpb24uZ2V0U2VsZWN0ZWRJbmRleCgpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFNlbGVjdGVkSW5kZXgoaW5kZXgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDTGlzdC5hdHRhY2hUbyA9IGZ1bmN0aW9uIChyb290KSB7XG4gICAgICAgIHJldHVybiBuZXcgTURDTGlzdChyb290KTtcbiAgICB9O1xuICAgIE1EQ0xpc3QucHJvdG90eXBlLmluaXRpYWxTeW5jV2l0aERPTSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc0V2b2x1dGlvbkVuYWJsZWQgPVxuICAgICAgICAgICAgZXZvbHV0aW9uQXR0cmlidXRlIGluIHRoaXMucm9vdC5kYXRhc2V0O1xuICAgICAgICBpZiAodGhpcy5pc0V2b2x1dGlvbkVuYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY2xhc3NOYW1lTWFwID0gZXZvbHV0aW9uQ2xhc3NOYW1lTWFwO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKG1hdGNoZXModGhpcy5yb290LCBzdHJpbmdzLkRFUFJFQ0FURURfU0VMRUNUT1IpKSB7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZU1hcCA9IGRlcHJlY2F0ZWRDbGFzc05hbWVNYXA7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmNsYXNzTmFtZU1hcCA9XG4gICAgICAgICAgICAgICAgT2JqZWN0LnZhbHVlcyhjc3NDbGFzc2VzKVxuICAgICAgICAgICAgICAgICAgICAucmVkdWNlKGZ1bmN0aW9uIChvYmosIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgICAgICBvYmpbY2xhc3NOYW1lXSA9IGNsYXNzTmFtZTtcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIG9iajtcbiAgICAgICAgICAgICAgICB9LCB7fSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5oYW5kbGVDbGljayA9IHRoaXMuaGFuZGxlQ2xpY2tFdmVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmhhbmRsZUtleWRvd24gPSB0aGlzLmhhbmRsZUtleWRvd25FdmVudC5iaW5kKHRoaXMpO1xuICAgICAgICB0aGlzLmZvY3VzSW5FdmVudExpc3RlbmVyID0gdGhpcy5oYW5kbGVGb2N1c0luRXZlbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5mb2N1c091dEV2ZW50TGlzdGVuZXIgPSB0aGlzLmhhbmRsZUZvY3VzT3V0RXZlbnQuYmluZCh0aGlzKTtcbiAgICAgICAgdGhpcy5saXN0ZW4oJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWRvd24pO1xuICAgICAgICB0aGlzLmxpc3RlbignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrKTtcbiAgICAgICAgdGhpcy5saXN0ZW4oJ2ZvY3VzaW4nLCB0aGlzLmZvY3VzSW5FdmVudExpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5saXN0ZW4oJ2ZvY3Vzb3V0JywgdGhpcy5mb2N1c091dEV2ZW50TGlzdGVuZXIpO1xuICAgICAgICB0aGlzLmxheW91dCgpO1xuICAgICAgICB0aGlzLmluaXRpYWxpemVMaXN0VHlwZSgpO1xuICAgICAgICB0aGlzLmVuc3VyZUZvY3VzYWJsZSgpO1xuICAgIH07XG4gICAgTURDTGlzdC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy51bmxpc3Rlbigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5ZG93bik7XG4gICAgICAgIHRoaXMudW5saXN0ZW4oJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XG4gICAgICAgIHRoaXMudW5saXN0ZW4oJ2ZvY3VzaW4nLCB0aGlzLmZvY3VzSW5FdmVudExpc3RlbmVyKTtcbiAgICAgICAgdGhpcy51bmxpc3RlbignZm9jdXNvdXQnLCB0aGlzLmZvY3VzT3V0RXZlbnRMaXN0ZW5lcik7XG4gICAgfTtcbiAgICBNRENMaXN0LnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBkaXJlY3Rpb24gPSB0aGlzLnJvb3QuZ2V0QXR0cmlidXRlKHN0cmluZ3MuQVJJQV9PUklFTlRBVElPTik7XG4gICAgICAgIHRoaXMudmVydGljYWwgPSBkaXJlY3Rpb24gIT09IHN0cmluZ3MuQVJJQV9PUklFTlRBVElPTl9IT1JJWk9OVEFMO1xuICAgICAgICB2YXIgaXRlbVNlbGVjdG9yID0gXCIuXCIgKyB0aGlzLmNsYXNzTmFtZU1hcFtjc3NDbGFzc2VzLkxJU1RfSVRFTV9DTEFTU10gKyBcIjpub3QoW3RhYmluZGV4XSlcIjtcbiAgICAgICAgdmFyIGNoaWxkU2VsZWN0b3IgPSBzdHJpbmdzLkZPQ1VTQUJMRV9DSElMRF9FTEVNRU5UUztcbiAgICAgICAgLy8gTGlzdCBpdGVtcyBuZWVkIHRvIGhhdmUgYXQgbGVhc3QgdGFiaW5kZXg9LTEgdG8gYmUgZm9jdXNhYmxlLlxuICAgICAgICB2YXIgaXRlbUVscyA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yQWxsKGl0ZW1TZWxlY3Rvcik7XG4gICAgICAgIGlmIChpdGVtRWxzLmxlbmd0aCkge1xuICAgICAgICAgICAgQXJyYXkucHJvdG90eXBlLmZvckVhY2guY2FsbChpdGVtRWxzLCBmdW5jdGlvbiAoZWwpIHtcbiAgICAgICAgICAgICAgICBlbC5zZXRBdHRyaWJ1dGUoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICAvLyBDaGlsZCBidXR0b24vYSBlbGVtZW50cyBhcmUgbm90IHRhYmJhYmxlIHVudGlsIHRoZSBsaXN0IGl0ZW0gaXMgZm9jdXNlZC5cbiAgICAgICAgdmFyIGZvY3VzYWJsZUNoaWxkRWxzID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoY2hpbGRTZWxlY3Rvcik7XG4gICAgICAgIGlmIChmb2N1c2FibGVDaGlsZEVscy5sZW5ndGgpIHtcbiAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZm9jdXNhYmxlQ2hpbGRFbHMsIGZ1bmN0aW9uIChlbCkge1xuICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCAnLTEnKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmlzRXZvbHV0aW9uRW5hYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFVzZVNlbGVjdGVkQXR0cmlidXRlKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5sYXlvdXQoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEV4dHJhY3RzIHRoZSBwcmltYXJ5IHRleHQgZnJvbSBhIGxpc3QgaXRlbS5cbiAgICAgKiBAcGFyYW0gaXRlbSBUaGUgbGlzdCBpdGVtIGVsZW1lbnQuXG4gICAgICogQHJldHVybiBUaGUgcHJpbWFyeSB0ZXh0IGluIHRoZSBlbGVtZW50LlxuICAgICAqL1xuICAgIE1EQ0xpc3QucHJvdG90eXBlLmdldFByaW1hcnlUZXh0ID0gZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICB2YXIgcHJpbWFyeVRleHQgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyB0aGlzLmNsYXNzTmFtZU1hcFtjc3NDbGFzc2VzLkxJU1RfSVRFTV9QUklNQVJZX1RFWFRfQ0xBU1NdKTtcbiAgICAgICAgaWYgKHRoaXMuaXNFdm9sdXRpb25FbmFibGVkIHx8IHByaW1hcnlUZXh0KSB7XG4gICAgICAgICAgICByZXR1cm4gKF9hID0gcHJpbWFyeVRleHQgPT09IG51bGwgfHwgcHJpbWFyeVRleHQgPT09IHZvaWQgMCA/IHZvaWQgMCA6IHByaW1hcnlUZXh0LnRleHRDb250ZW50KSAhPT0gbnVsbCAmJiBfYSAhPT0gdm9pZCAwID8gX2EgOiAnJztcbiAgICAgICAgfVxuICAgICAgICB2YXIgc2luZ2xlTGluZVRleHQgPSBpdGVtLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyB0aGlzLmNsYXNzTmFtZU1hcFtjc3NDbGFzc2VzLkxJU1RfSVRFTV9URVhUX0NMQVNTXSk7XG4gICAgICAgIHJldHVybiAoc2luZ2xlTGluZVRleHQgJiYgc2luZ2xlTGluZVRleHQudGV4dENvbnRlbnQpIHx8ICcnO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZSBzZWxlY3RlZEluZGV4IHZhbHVlIGJhc2VkIG9uIHByZS1zZWxlY3RlZCBsaXN0IGl0ZW1zLlxuICAgICAqL1xuICAgIE1EQ0xpc3QucHJvdG90eXBlLmluaXRpYWxpemVMaXN0VHlwZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5pc0ludGVyYWN0aXZlID1cbiAgICAgICAgICAgIG1hdGNoZXModGhpcy5yb290LCBzdHJpbmdzLkFSSUFfSU5URVJBQ1RJVkVfUk9MRVNfU0VMRUNUT1IpO1xuICAgICAgICBpZiAodGhpcy5pc0V2b2x1dGlvbkVuYWJsZWQgJiYgdGhpcy5pc0ludGVyYWN0aXZlKSB7XG4gICAgICAgICAgICB2YXIgc2VsZWN0aW9uID0gQXJyYXkuZnJvbSh0aGlzLnJvb3QucXVlcnlTZWxlY3RvckFsbChzdHJpbmdzLlNFTEVDVEVEX0lURU1fU0VMRUNUT1IpLCBmdW5jdGlvbiAobGlzdEl0ZW0pIHsgcmV0dXJuIF90aGlzLmxpc3RFbGVtZW50cy5pbmRleE9mKGxpc3RJdGVtKTsgfSk7XG4gICAgICAgICAgICBpZiAobWF0Y2hlcyh0aGlzLnJvb3QsIHN0cmluZ3MuQVJJQV9NVUxUSV9TRUxFQ1RBQkxFX1NFTEVDVE9SKSkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IHNlbGVjdGlvbjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2UgaWYgKHNlbGVjdGlvbi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gc2VsZWN0aW9uWzBdO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBjaGVja2JveExpc3RJdGVtcyA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yQWxsKHN0cmluZ3MuQVJJQV9ST0xFX0NIRUNLQk9YX1NFTEVDVE9SKTtcbiAgICAgICAgdmFyIHJhZGlvU2VsZWN0ZWRMaXN0SXRlbSA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuQVJJQV9DSEVDS0VEX1JBRElPX1NFTEVDVE9SKTtcbiAgICAgICAgaWYgKGNoZWNrYm94TGlzdEl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgdmFyIHByZXNlbGVjdGVkSXRlbXMgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvckFsbChzdHJpbmdzLkFSSUFfQ0hFQ0tFRF9DSEVDS0JPWF9TRUxFQ1RPUik7XG4gICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBBcnJheS5mcm9tKHByZXNlbGVjdGVkSXRlbXMsIGZ1bmN0aW9uIChsaXN0SXRlbSkgeyByZXR1cm4gX3RoaXMubGlzdEVsZW1lbnRzLmluZGV4T2YobGlzdEl0ZW0pOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChyYWRpb1NlbGVjdGVkTGlzdEl0ZW0pIHtcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCA9IHRoaXMubGlzdEVsZW1lbnRzLmluZGV4T2YocmFkaW9TZWxlY3RlZExpc3RJdGVtKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVXBkYXRlcyB0aGUgbGlzdCBpdGVtIGF0IGl0ZW1JbmRleCB0byB0aGUgZGVzaXJlZCBpc0VuYWJsZWQgc3RhdGUuXG4gICAgICogQHBhcmFtIGl0ZW1JbmRleCBJbmRleCBvZiB0aGUgbGlzdCBpdGVtXG4gICAgICogQHBhcmFtIGlzRW5hYmxlZCBTZXRzIHRoZSBsaXN0IGl0ZW0gdG8gZW5hYmxlZCBvciBkaXNhYmxlZC5cbiAgICAgKi9cbiAgICBNRENMaXN0LnByb3RvdHlwZS5zZXRFbmFibGVkID0gZnVuY3Rpb24gKGl0ZW1JbmRleCwgaXNFbmFibGVkKSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRFbmFibGVkKGl0ZW1JbmRleCwgaXNFbmFibGVkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEdpdmVuIHRoZSBuZXh0IGRlc2lyZWQgY2hhcmFjdGVyIGZyb20gdGhlIHVzZXIsIGFkZHMgaXQgdG8gdGhlIHR5cGVhaGVhZFxuICAgICAqIGJ1ZmZlci4gVGhlbiwgYXR0ZW1wdHMgdG8gZmluZCB0aGUgbmV4dCBvcHRpb24gbWF0Y2hpbmcgdGhlIGJ1ZmZlci4gV3JhcHNcbiAgICAgKiBhcm91bmQgaWYgYXQgdGhlIGVuZCBvZiBvcHRpb25zLlxuICAgICAqXG4gICAgICogQHBhcmFtIG5leHRDaGFyIFRoZSBuZXh0IGNoYXJhY3RlciB0byBhZGQgdG8gdGhlIHByZWZpeCBidWZmZXIuXG4gICAgICogQHBhcmFtIHN0YXJ0aW5nSW5kZXggVGhlIGluZGV4IGZyb20gd2hpY2ggdG8gc3RhcnQgbWF0Y2hpbmcuIERlZmF1bHRzIHRvXG4gICAgICogICAgIHRoZSBjdXJyZW50bHkgZm9jdXNlZCBpbmRleC5cbiAgICAgKiBAcmV0dXJuIFRoZSBpbmRleCBvZiB0aGUgbWF0Y2hlZCBpdGVtLlxuICAgICAqL1xuICAgIE1EQ0xpc3QucHJvdG90eXBlLnR5cGVhaGVhZE1hdGNoSXRlbSA9IGZ1bmN0aW9uIChuZXh0Q2hhciwgc3RhcnRpbmdJbmRleCkge1xuICAgICAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uLnR5cGVhaGVhZE1hdGNoSXRlbShuZXh0Q2hhciwgc3RhcnRpbmdJbmRleCwgLyoqIHNraXBGb2N1cyAqLyB0cnVlKTtcbiAgICB9O1xuICAgIE1EQ0xpc3QucHJvdG90eXBlLmdldERlZmF1bHRGb3VuZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBETyBOT1QgSU5MSU5FIHRoaXMgdmFyaWFibGUuIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBmb3VuZGF0aW9ucyB0YWtlXG4gICAgICAgIC8vIGEgUGFydGlhbDxNRENGb29BZGFwdGVyPi4gVG8gZW5zdXJlIHdlIGRvbid0IGFjY2lkZW50YWxseSBvbWl0IGFueVxuICAgICAgICAvLyBtZXRob2RzLCB3ZSBuZWVkIGEgc2VwYXJhdGUsIHN0cm9uZ2x5IHR5cGVkIGFkYXB0ZXIgdmFyaWFibGUuXG4gICAgICAgIHZhciBhZGFwdGVyID0ge1xuICAgICAgICAgICAgYWRkQ2xhc3NGb3JFbGVtZW50SW5kZXg6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBfdGhpcy5saXN0RWxlbWVudHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LmFkZChfdGhpcy5jbGFzc05hbWVNYXBbY2xhc3NOYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvY3VzSXRlbUF0SW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gX3RoaXMubGlzdEVsZW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LmZvY3VzKCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEF0dHJpYnV0ZUZvckVsZW1lbnRJbmRleDogZnVuY3Rpb24gKGluZGV4LCBhdHRyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxpc3RFbGVtZW50c1tpbmRleF0uZ2V0QXR0cmlidXRlKGF0dHIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEZvY3VzZWRFbGVtZW50SW5kZXg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMubGlzdEVsZW1lbnRzLmluZGV4T2YoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TGlzdEl0ZW1Db3VudDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMubGlzdEVsZW1lbnRzLmxlbmd0aDsgfSxcbiAgICAgICAgICAgIGdldFByaW1hcnlUZXh0QXRJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmdldFByaW1hcnlUZXh0KF90aGlzLmxpc3RFbGVtZW50c1tpbmRleF0pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhc0NoZWNrYm94QXRJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3RJdGVtID0gX3RoaXMubGlzdEVsZW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFsaXN0SXRlbS5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuQ0hFQ0tCT1hfU0VMRUNUT1IpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhc1JhZGlvQXRJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3RJdGVtID0gX3RoaXMubGlzdEVsZW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICByZXR1cm4gISFsaXN0SXRlbS5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuUkFESU9fU0VMRUNUT1IpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzQ2hlY2tib3hDaGVja2VkQXRJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIGxpc3RJdGVtID0gX3RoaXMubGlzdEVsZW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICB2YXIgdG9nZ2xlRWwgPSBsaXN0SXRlbS5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuQ0hFQ0tCT1hfU0VMRUNUT1IpO1xuICAgICAgICAgICAgICAgIHJldHVybiB0b2dnbGVFbC5jaGVja2VkO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzRm9jdXNJbnNpZGVMaXN0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnJvb3QgIT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiZcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMucm9vdC5jb250YWlucyhkb2N1bWVudC5hY3RpdmVFbGVtZW50KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1Jvb3RGb2N1c2VkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBfdGhpcy5yb290OyB9LFxuICAgICAgICAgICAgbGlzdEl0ZW1BdEluZGV4SGFzQ2xhc3M6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxpc3RFbGVtZW50c1tpbmRleF0uY2xhc3NMaXN0LmNvbnRhaW5zKF90aGlzLmNsYXNzTmFtZU1hcFtjbGFzc05hbWVdKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBub3RpZnlBY3Rpb246IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoc3RyaW5ncy5BQ1RJT05fRVZFTlQsIHsgaW5kZXg6IGluZGV4IH0sIC8qKiBzaG91bGRCdWJibGUgKi8gdHJ1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3NGb3JFbGVtZW50SW5kZXg6IGZ1bmN0aW9uIChpbmRleCwgY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgdmFyIGVsZW1lbnQgPSBfdGhpcy5saXN0RWxlbWVudHNbaW5kZXhdO1xuICAgICAgICAgICAgICAgIGlmIChlbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgICAgIGVsZW1lbnQuY2xhc3NMaXN0LnJlbW92ZShfdGhpcy5jbGFzc05hbWVNYXBbY2xhc3NOYW1lXSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldEF0dHJpYnV0ZUZvckVsZW1lbnRJbmRleDogZnVuY3Rpb24gKGluZGV4LCBhdHRyLCB2YWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gX3RoaXMubGlzdEVsZW1lbnRzW2luZGV4XTtcbiAgICAgICAgICAgICAgICBpZiAoZWxlbWVudCkge1xuICAgICAgICAgICAgICAgICAgICBlbGVtZW50LnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldENoZWNrZWRDaGVja2JveE9yUmFkaW9BdEluZGV4OiBmdW5jdGlvbiAoaW5kZXgsIGlzQ2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHZhciBsaXN0SXRlbSA9IF90aGlzLmxpc3RFbGVtZW50c1tpbmRleF07XG4gICAgICAgICAgICAgICAgdmFyIHRvZ2dsZUVsID0gbGlzdEl0ZW0ucXVlcnlTZWxlY3RvcihzdHJpbmdzLkNIRUNLQk9YX1JBRElPX1NFTEVDVE9SKTtcbiAgICAgICAgICAgICAgICB0b2dnbGVFbC5jaGVja2VkID0gaXNDaGVja2VkO1xuICAgICAgICAgICAgICAgIHZhciBldmVudCA9IGRvY3VtZW50LmNyZWF0ZUV2ZW50KCdFdmVudCcpO1xuICAgICAgICAgICAgICAgIGV2ZW50LmluaXRFdmVudCgnY2hhbmdlJywgdHJ1ZSwgdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdG9nZ2xlRWwuZGlzcGF0Y2hFdmVudChldmVudCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0VGFiSW5kZXhGb3JMaXN0SXRlbUNoaWxkcmVuOiBmdW5jdGlvbiAobGlzdEl0ZW1JbmRleCwgdGFiSW5kZXhWYWx1ZSkge1xuICAgICAgICAgICAgICAgIHZhciBlbGVtZW50ID0gX3RoaXMubGlzdEVsZW1lbnRzW2xpc3RJdGVtSW5kZXhdO1xuICAgICAgICAgICAgICAgIHZhciBzZWxlY3RvciA9IHN0cmluZ3MuQ0hJTERfRUxFTUVOVFNfVE9fVE9HR0xFX1RBQklOREVYO1xuICAgICAgICAgICAgICAgIEFycmF5LnByb3RvdHlwZS5mb3JFYWNoLmNhbGwoZWxlbWVudC5xdWVyeVNlbGVjdG9yQWxsKHNlbGVjdG9yKSwgZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgICAgICAgICAgICAgIGVsLnNldEF0dHJpYnV0ZSgndGFiaW5kZXgnLCB0YWJJbmRleFZhbHVlKTtcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBuZXcgTURDTGlzdEZvdW5kYXRpb24oYWRhcHRlcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFbnN1cmVzIHRoYXQgYXQgbGVhc3Qgb25lIGl0ZW0gaXMgZm9jdXNhYmxlIGlmIHRoZSBsaXN0IGlzIGludGVyYWN0aXZlIGFuZFxuICAgICAqIGRvZXNuJ3Qgc3BlY2lmeSBhIHN1aXRhYmxlIHRhYmluZGV4LlxuICAgICAqL1xuICAgIE1EQ0xpc3QucHJvdG90eXBlLmVuc3VyZUZvY3VzYWJsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNFdm9sdXRpb25FbmFibGVkICYmIHRoaXMuaXNJbnRlcmFjdGl2ZSkge1xuICAgICAgICAgICAgaWYgKCF0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihcIi5cIiArIHRoaXMuY2xhc3NOYW1lTWFwW2Nzc0NsYXNzZXMuTElTVF9JVEVNX0NMQVNTXSArIFwiW3RhYmluZGV4PVxcXCIwXFxcIl1cIikpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmluaXRpYWxGb2N1c0luZGV4KCk7XG4gICAgICAgICAgICAgICAgaWYgKGluZGV4ICE9PSAtMSkge1xuICAgICAgICAgICAgICAgICAgICB0aGlzLmxpc3RFbGVtZW50c1tpbmRleF0udGFiSW5kZXggPSAwO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDTGlzdC5wcm90b3R5cGUuaW5pdGlhbEZvY3VzSW5kZXggPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdGVkSW5kZXggaW5zdGFuY2VvZiBBcnJheSAmJiB0aGlzLnNlbGVjdGVkSW5kZXgubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRJbmRleFswXTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodHlwZW9mIHRoaXMuc2VsZWN0ZWRJbmRleCA9PT0gJ251bWJlcicgJiZcbiAgICAgICAgICAgIHRoaXMuc2VsZWN0ZWRJbmRleCAhPT0gbnVtYmVycy5VTlNFVF9JTkRFWCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuc2VsZWN0ZWRJbmRleDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgZWwgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihcIi5cIiArIHRoaXMuY2xhc3NOYW1lTWFwW2Nzc0NsYXNzZXMuTElTVF9JVEVNX0NMQVNTXSArIFwiOm5vdCguXCIgKyB0aGlzLmNsYXNzTmFtZU1hcFtjc3NDbGFzc2VzLkxJU1RfSVRFTV9ESVNBQkxFRF9DTEFTU10gKyBcIilcIik7XG4gICAgICAgIGlmIChlbCA9PT0gbnVsbCkge1xuICAgICAgICAgICAgcmV0dXJuIC0xO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmdldExpc3RJdGVtSW5kZXgoZWwpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXNlZCB0byBmaWd1cmUgb3V0IHdoaWNoIGxpc3QgaXRlbSB0aGlzIGV2ZW50IGlzIHRhcmdldHRpbmcuIE9yIHJldHVybnMgLTFcbiAgICAgKiBpZiB0aGVyZSBpcyBubyBsaXN0IGl0ZW1cbiAgICAgKi9cbiAgICBNRENMaXN0LnByb3RvdHlwZS5nZXRMaXN0SXRlbUluZGV4ID0gZnVuY3Rpb24gKGVsKSB7XG4gICAgICAgIHZhciBuZWFyZXN0UGFyZW50ID0gY2xvc2VzdChlbCwgXCIuXCIgKyB0aGlzLmNsYXNzTmFtZU1hcFtjc3NDbGFzc2VzLkxJU1RfSVRFTV9DTEFTU10gKyBcIiwgLlwiICsgdGhpcy5jbGFzc05hbWVNYXBbY3NzQ2xhc3Nlcy5ST09UXSk7XG4gICAgICAgIC8vIEdldCB0aGUgaW5kZXggb2YgdGhlIGVsZW1lbnQgaWYgaXQgaXMgYSBsaXN0IGl0ZW0uXG4gICAgICAgIGlmIChuZWFyZXN0UGFyZW50ICYmXG4gICAgICAgICAgICBtYXRjaGVzKG5lYXJlc3RQYXJlbnQsIFwiLlwiICsgdGhpcy5jbGFzc05hbWVNYXBbY3NzQ2xhc3Nlcy5MSVNUX0lURU1fQ0xBU1NdKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdEVsZW1lbnRzLmluZGV4T2YobmVhcmVzdFBhcmVudCk7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIC0xO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogVXNlZCB0byBmaWd1cmUgb3V0IHdoaWNoIGVsZW1lbnQgd2FzIGNsaWNrZWQgYmVmb3JlIHNlbmRpbmcgdGhlIGV2ZW50IHRvXG4gICAgICogdGhlIGZvdW5kYXRpb24uXG4gICAgICovXG4gICAgTURDTGlzdC5wcm90b3R5cGUuaGFuZGxlRm9jdXNJbkV2ZW50ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdldExpc3RJdGVtSW5kZXgoZXZ0LnRhcmdldCk7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5oYW5kbGVGb2N1c0luKGluZGV4KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gZmlndXJlIG91dCB3aGljaCBlbGVtZW50IHdhcyBjbGlja2VkIGJlZm9yZSBzZW5kaW5nIHRoZSBldmVudCB0b1xuICAgICAqIHRoZSBmb3VuZGF0aW9uLlxuICAgICAqL1xuICAgIE1EQ0xpc3QucHJvdG90eXBlLmhhbmRsZUZvY3VzT3V0RXZlbnQgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0TGlzdEl0ZW1JbmRleChldnQudGFyZ2V0KTtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmhhbmRsZUZvY3VzT3V0KGluZGV4KTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFVzZWQgdG8gZmlndXJlIG91dCB3aGljaCBlbGVtZW50IHdhcyBmb2N1c2VkIHdoZW4ga2V5ZG93biBldmVudCBvY2N1cnJlZFxuICAgICAqIGJlZm9yZSBzZW5kaW5nIHRoZSBldmVudCB0byB0aGUgZm91bmRhdGlvbi5cbiAgICAgKi9cbiAgICBNRENMaXN0LnByb3RvdHlwZS5oYW5kbGVLZXlkb3duRXZlbnQgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuZ2V0TGlzdEl0ZW1JbmRleChldnQudGFyZ2V0KTtcbiAgICAgICAgdmFyIHRhcmdldCA9IGV2dC50YXJnZXQ7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5oYW5kbGVLZXlkb3duKGV2dCwgdGFyZ2V0LmNsYXNzTGlzdC5jb250YWlucyh0aGlzLmNsYXNzTmFtZU1hcFtjc3NDbGFzc2VzLkxJU1RfSVRFTV9DTEFTU10pLCBpbmRleCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVc2VkIHRvIGZpZ3VyZSBvdXQgd2hpY2ggZWxlbWVudCB3YXMgY2xpY2tlZCBiZWZvcmUgc2VuZGluZyB0aGUgZXZlbnQgdG9cbiAgICAgKiB0aGUgZm91bmRhdGlvbi5cbiAgICAgKi9cbiAgICBNRENMaXN0LnByb3RvdHlwZS5oYW5kbGVDbGlja0V2ZW50ID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICB2YXIgaW5kZXggPSB0aGlzLmdldExpc3RJdGVtSW5kZXgoZXZ0LnRhcmdldCk7XG4gICAgICAgIHZhciB0YXJnZXQgPSBldnQudGFyZ2V0O1xuICAgICAgICAvLyBUb2dnbGUgdGhlIGNoZWNrYm94IG9ubHkgaWYgaXQncyBub3QgdGhlIHRhcmdldCBvZiB0aGUgZXZlbnQsIG9yIHRoZVxuICAgICAgICAvLyBjaGVja2JveCB3aWxsIGhhdmUgMiBjaGFuZ2UgZXZlbnRzLlxuICAgICAgICB2YXIgdG9nZ2xlQ2hlY2tib3ggPSAhbWF0Y2hlcyh0YXJnZXQsIHN0cmluZ3MuQ0hFQ0tCT1hfUkFESU9fU0VMRUNUT1IpO1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uaGFuZGxlQ2xpY2soaW5kZXgsIHRvZ2dsZUNoZWNrYm94KTtcbiAgICB9O1xuICAgIHJldHVybiBNRENMaXN0O1xufShNRENDb21wb25lbnQpKTtcbmV4cG9ydCB7IE1EQ0xpc3QgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBDb3JuZXIsIENvcm5lckJpdCwgY3NzQ2xhc3NlcywgbnVtYmVycywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLmRlZmF1bHRBZGFwdGVyKSwgYWRhcHRlcikpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmlzU3VyZmFjZU9wZW4gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNRdWlja09wZW4gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNIb2lzdGVkRWxlbWVudCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc0ZpeGVkUG9zaXRpb24gPSBmYWxzZTtcbiAgICAgICAgX3RoaXMuaXNIb3Jpem9udGFsbHlDZW50ZXJlZE9uVmlld3BvcnQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMubWF4SGVpZ2h0ID0gMDtcbiAgICAgICAgX3RoaXMub3BlbkFuaW1hdGlvbkVuZFRpbWVySWQgPSAwO1xuICAgICAgICBfdGhpcy5jbG9zZUFuaW1hdGlvbkVuZFRpbWVySWQgPSAwO1xuICAgICAgICBfdGhpcy5hbmltYXRpb25SZXF1ZXN0SWQgPSAwO1xuICAgICAgICBfdGhpcy5hbmNob3JDb3JuZXIgPSBDb3JuZXIuVE9QX1NUQVJUO1xuICAgICAgICAvKipcbiAgICAgICAgICogQ29ybmVyIG9mIHRoZSBtZW51IHN1cmZhY2UgdG8gd2hpY2ggbWVudSBzdXJmYWNlIGlzIGF0dGFjaGVkIHRvIGFuY2hvci5cbiAgICAgICAgICpcbiAgICAgICAgICogIEFuY2hvciBjb3JuZXIgLS0tPistLS0tLS0tLS0tK1xuICAgICAgICAgKiAgICAgICAgICAgICAgICAgICAgfCAgQU5DSE9SICB8XG4gICAgICAgICAqICAgICAgICAgICAgICAgICAgICArLS0tLS0tLS0tLStcbiAgICAgICAgICogIE9yaWdpbiBjb3JuZXIgLS0tPistLS0tLS0tLS0tLS0tLStcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgIHxcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgIHxcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgIHwgTUVOVSBTVVJGQUNFIHxcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgIHxcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgIHwgICAgICAgICAgICAgIHxcbiAgICAgICAgICogICAgICAgICAgICAgICAgICAgICstLS0tLS0tLS0tLS0tLStcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLm9yaWdpbkNvcm5lciA9IENvcm5lci5UT1BfU1RBUlQ7XG4gICAgICAgIF90aGlzLmFuY2hvck1hcmdpbiA9IHsgdG9wOiAwLCByaWdodDogMCwgYm90dG9tOiAwLCBsZWZ0OiAwIH07XG4gICAgICAgIF90aGlzLnBvc2l0aW9uID0geyB4OiAwLCB5OiAwIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbiwgXCJjc3NDbGFzc2VzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3NzQ2xhc3NlcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENNZW51U3VyZmFjZUZvdW5kYXRpb24sIFwic3RyaW5nc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ3M7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLCBcIm51bWJlcnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbiwgXCJDb3JuZXJcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBDb3JuZXI7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBzZWUge0BsaW5rIE1EQ01lbnVTdXJmYWNlQWRhcHRlcn0gZm9yIHR5cGluZyBpbmZvcm1hdGlvbiBvbiBwYXJhbWV0ZXJzIGFuZCByZXR1cm4gdHlwZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgaGFzQW5jaG9yOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBpc0VsZW1lbnRJbkNvbnRhaW5lcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgaXNGb2N1c2VkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBpc1J0bDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgZ2V0SW5uZXJEaW1lbnNpb25zOiBmdW5jdGlvbiAoKSB7IHJldHVybiAoeyBoZWlnaHQ6IDAsIHdpZHRoOiAwIH0pOyB9LFxuICAgICAgICAgICAgICAgIGdldEFuY2hvckRpbWVuc2lvbnM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgICAgICAgICAgZ2V0V2luZG93RGltZW5zaW9uczogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgaGVpZ2h0OiAwLCB3aWR0aDogMCB9KTsgfSxcbiAgICAgICAgICAgICAgICBnZXRCb2R5RGltZW5zaW9uczogZnVuY3Rpb24gKCkgeyByZXR1cm4gKHsgaGVpZ2h0OiAwLCB3aWR0aDogMCB9KTsgfSxcbiAgICAgICAgICAgICAgICBnZXRXaW5kb3dTY3JvbGw6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICh7IHg6IDAsIHk6IDAgfSk7IH0sXG4gICAgICAgICAgICAgICAgc2V0UG9zaXRpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBzZXRNYXhIZWlnaHQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBzZXRUcmFuc2Zvcm1PcmlnaW46IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBzYXZlRm9jdXM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZXN0b3JlRm9jdXM6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBub3RpZnlDbG9zZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIG5vdGlmeU9wZW46IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBub3RpZnlDbG9zaW5nOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hID0gTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLmNzc0NsYXNzZXMsIFJPT1QgPSBfYS5ST09ULCBPUEVOID0gX2EuT1BFTjtcbiAgICAgICAgaWYgKCF0aGlzLmFkYXB0ZXIuaGFzQ2xhc3MoUk9PVCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihST09UICsgXCIgY2xhc3MgcmVxdWlyZWQgaW4gcm9vdCBlbGVtZW50LlwiKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLmhhc0NsYXNzKE9QRU4pKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3VyZmFjZU9wZW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLm9wZW5BbmltYXRpb25FbmRUaW1lcklkKTtcbiAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VBbmltYXRpb25FbmRUaW1lcklkKTtcbiAgICAgICAgLy8gQ2FuY2VsIGFueSBjdXJyZW50bHkgcnVubmluZyBhbmltYXRpb25zLlxuICAgICAgICBjYW5jZWxBbmltYXRpb25GcmFtZSh0aGlzLmFuaW1hdGlvblJlcXVlc3RJZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY29ybmVyIERlZmF1bHQgYW5jaG9yIGNvcm5lciBhbGlnbm1lbnQgb2YgdG9wLWxlZnQgbWVudSBzdXJmYWNlIGNvcm5lci5cbiAgICAgKi9cbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLnNldEFuY2hvckNvcm5lciA9IGZ1bmN0aW9uIChjb3JuZXIpIHtcbiAgICAgICAgdGhpcy5hbmNob3JDb3JuZXIgPSBjb3JuZXI7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBGbGlwIG1lbnUgY29ybmVyIGhvcml6b250YWxseS5cbiAgICAgKi9cbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLmZsaXBDb3JuZXJIb3Jpem9udGFsbHkgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMub3JpZ2luQ29ybmVyID0gdGhpcy5vcmlnaW5Db3JuZXIgXiBDb3JuZXJCaXQuUklHSFQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gbWFyZ2luIFNldCBvZiBtYXJnaW4gdmFsdWVzIGZyb20gYW5jaG9yLlxuICAgICAqL1xuICAgIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0QW5jaG9yTWFyZ2luID0gZnVuY3Rpb24gKG1hcmdpbikge1xuICAgICAgICB0aGlzLmFuY2hvck1hcmdpbi50b3AgPSBtYXJnaW4udG9wIHx8IDA7XG4gICAgICAgIHRoaXMuYW5jaG9yTWFyZ2luLnJpZ2h0ID0gbWFyZ2luLnJpZ2h0IHx8IDA7XG4gICAgICAgIHRoaXMuYW5jaG9yTWFyZ2luLmJvdHRvbSA9IG1hcmdpbi5ib3R0b20gfHwgMDtcbiAgICAgICAgdGhpcy5hbmNob3JNYXJnaW4ubGVmdCA9IG1hcmdpbi5sZWZ0IHx8IDA7XG4gICAgfTtcbiAgICAvKiogVXNlZCB0byBpbmRpY2F0ZSBpZiB0aGUgbWVudS1zdXJmYWNlIGlzIGhvaXN0ZWQgdG8gdGhlIGJvZHkuICovXG4gICAgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRJc0hvaXN0ZWQgPSBmdW5jdGlvbiAoaXNIb2lzdGVkKSB7XG4gICAgICAgIHRoaXMuaXNIb2lzdGVkRWxlbWVudCA9IGlzSG9pc3RlZDtcbiAgICB9O1xuICAgIC8qKiBVc2VkIHRvIHNldCB0aGUgbWVudS1zdXJmYWNlIGNhbGN1bGF0aW9ucyBiYXNlZCBvbiBhIGZpeGVkIHBvc2l0aW9uIG1lbnUuICovXG4gICAgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRGaXhlZFBvc2l0aW9uID0gZnVuY3Rpb24gKGlzRml4ZWRQb3NpdGlvbikge1xuICAgICAgICB0aGlzLmlzRml4ZWRQb3NpdGlvbiA9IGlzRml4ZWRQb3NpdGlvbjtcbiAgICB9O1xuICAgIC8qKiBTZXRzIHRoZSBtZW51LXN1cmZhY2UgcG9zaXRpb24gb24gdGhlIHBhZ2UuICovXG4gICAgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRBYnNvbHV0ZVBvc2l0aW9uID0gZnVuY3Rpb24gKHgsIHkpIHtcbiAgICAgICAgdGhpcy5wb3NpdGlvbi54ID0gdGhpcy5pc0Zpbml0ZSh4KSA/IHggOiAwO1xuICAgICAgICB0aGlzLnBvc2l0aW9uLnkgPSB0aGlzLmlzRmluaXRlKHkpID8geSA6IDA7XG4gICAgfTtcbiAgICAvKiogU2V0cyB3aGV0aGVyIG1lbnUtc3VyZmFjZSBzaG91bGQgYmUgaG9yaXpvbnRhbGx5IGNlbnRlcmVkIHRvIHZpZXdwb3J0LiAqL1xuICAgIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0SXNIb3Jpem9udGFsbHlDZW50ZXJlZE9uVmlld3BvcnQgPSBmdW5jdGlvbiAoaXNDZW50ZXJlZCkge1xuICAgICAgICB0aGlzLmlzSG9yaXpvbnRhbGx5Q2VudGVyZWRPblZpZXdwb3J0ID0gaXNDZW50ZXJlZDtcbiAgICB9O1xuICAgIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0UXVpY2tPcGVuID0gZnVuY3Rpb24gKHF1aWNrT3Blbikge1xuICAgICAgICB0aGlzLmlzUXVpY2tPcGVuID0gcXVpY2tPcGVuO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyBtYXhpbXVtIG1lbnUtc3VyZmFjZSBoZWlnaHQgb24gb3Blbi5cbiAgICAgKiBAcGFyYW0gbWF4SGVpZ2h0IFRoZSBkZXNpcmVkIG1heC1oZWlnaHQuIFNldCB0byAwIChkZWZhdWx0KSB0b1xuICAgICAqICAgICBhdXRvbWF0aWNhbGx5IGNhbGN1bGF0ZSBtYXggaGVpZ2h0IGJhc2VkIG9uIGF2YWlsYWJsZSB2aWV3cG9ydCBzcGFjZS5cbiAgICAgKi9cbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLnNldE1heEhlaWdodCA9IGZ1bmN0aW9uIChtYXhIZWlnaHQpIHtcbiAgICAgICAgdGhpcy5tYXhIZWlnaHQgPSBtYXhIZWlnaHQ7XG4gICAgfTtcbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLmlzT3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuaXNTdXJmYWNlT3BlbjtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE9wZW4gdGhlIG1lbnUgc3VyZmFjZS5cbiAgICAgKi9cbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLm9wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmlzU3VyZmFjZU9wZW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkYXB0ZXIuc2F2ZUZvY3VzKCk7XG4gICAgICAgIGlmICh0aGlzLmlzUXVpY2tPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLmlzU3VyZmFjZU9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5jc3NDbGFzc2VzLk9QRU4pO1xuICAgICAgICAgICAgdGhpcy5kaW1lbnNpb25zID0gdGhpcy5hZGFwdGVyLmdldElubmVyRGltZW5zaW9ucygpO1xuICAgICAgICAgICAgdGhpcy5hdXRvcG9zaXRpb24oKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5ub3RpZnlPcGVuKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQU5JTUFUSU5HX09QRU4pO1xuICAgICAgICAgICAgdGhpcy5hbmltYXRpb25SZXF1ZXN0SWQgPSByZXF1ZXN0QW5pbWF0aW9uRnJhbWUoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmRpbWVuc2lvbnMgPSBfdGhpcy5hZGFwdGVyLmdldElubmVyRGltZW5zaW9ucygpO1xuICAgICAgICAgICAgICAgIF90aGlzLmF1dG9wb3NpdGlvbigpO1xuICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLmNzc0NsYXNzZXMuT1BFTik7XG4gICAgICAgICAgICAgICAgX3RoaXMub3BlbkFuaW1hdGlvbkVuZFRpbWVySWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMub3BlbkFuaW1hdGlvbkVuZFRpbWVySWQgPSAwO1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5jc3NDbGFzc2VzLkFOSU1BVElOR19PUEVOKTtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlci5ub3RpZnlPcGVuKCk7XG4gICAgICAgICAgICAgICAgfSwgbnVtYmVycy5UUkFOU0lUSU9OX09QRU5fRFVSQVRJT04pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB0aGlzLmlzU3VyZmFjZU9wZW4gPSB0cnVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbG9zZXMgdGhlIG1lbnUgc3VyZmFjZS5cbiAgICAgKi9cbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLmNsb3NlID0gZnVuY3Rpb24gKHNraXBSZXN0b3JlRm9jdXMpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgaWYgKHNraXBSZXN0b3JlRm9jdXMgPT09IHZvaWQgMCkgeyBza2lwUmVzdG9yZUZvY3VzID0gZmFsc2U7IH1cbiAgICAgICAgaWYgKCF0aGlzLmlzU3VyZmFjZU9wZW4pIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkYXB0ZXIubm90aWZ5Q2xvc2luZygpO1xuICAgICAgICBpZiAodGhpcy5pc1F1aWNrT3Blbikge1xuICAgICAgICAgICAgdGhpcy5pc1N1cmZhY2VPcGVuID0gZmFsc2U7XG4gICAgICAgICAgICBpZiAoIXNraXBSZXN0b3JlRm9jdXMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1heWJlUmVzdG9yZUZvY3VzKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLmNzc0NsYXNzZXMuT1BFTik7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLmNzc0NsYXNzZXMuSVNfT1BFTl9CRUxPVyk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIubm90aWZ5Q2xvc2UoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLmNzc0NsYXNzZXMuQU5JTUFUSU5HX0NMT1NFRCk7XG4gICAgICAgIHJlcXVlc3RBbmltYXRpb25GcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5jc3NDbGFzc2VzLk9QRU4pO1xuICAgICAgICAgICAgX3RoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhNRENNZW51U3VyZmFjZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5JU19PUEVOX0JFTE9XKTtcbiAgICAgICAgICAgIF90aGlzLmNsb3NlQW5pbWF0aW9uRW5kVGltZXJJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmNsb3NlQW5pbWF0aW9uRW5kVGltZXJJZCA9IDA7XG4gICAgICAgICAgICAgICAgX3RoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhNRENNZW51U3VyZmFjZUZvdW5kYXRpb24uY3NzQ2xhc3Nlcy5BTklNQVRJTkdfQ0xPU0VEKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGFwdGVyLm5vdGlmeUNsb3NlKCk7XG4gICAgICAgICAgICB9LCBudW1iZXJzLlRSQU5TSVRJT05fQ0xPU0VfRFVSQVRJT04pO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5pc1N1cmZhY2VPcGVuID0gZmFsc2U7XG4gICAgICAgIGlmICghc2tpcFJlc3RvcmVGb2N1cykge1xuICAgICAgICAgICAgdGhpcy5tYXliZVJlc3RvcmVGb2N1cygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKiogSGFuZGxlIGNsaWNrcyBhbmQgY2xvc2UgaWYgbm90IHdpdGhpbiBtZW51LXN1cmZhY2UgZWxlbWVudC4gKi9cbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZUJvZHlDbGljayA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmFyIGVsID0gZXZ0LnRhcmdldDtcbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlci5pc0VsZW1lbnRJbkNvbnRhaW5lcihlbCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmNsb3NlKCk7XG4gICAgfTtcbiAgICAvKiogSGFuZGxlIGtleXMgdGhhdCBjbG9zZSB0aGUgc3VyZmFjZS4gKi9cbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZUtleWRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBrZXlDb2RlID0gZXZ0LmtleUNvZGUsIGtleSA9IGV2dC5rZXk7XG4gICAgICAgIHZhciBpc0VzY2FwZSA9IGtleSA9PT0gJ0VzY2FwZScgfHwga2V5Q29kZSA9PT0gMjc7XG4gICAgICAgIGlmIChpc0VzY2FwZSkge1xuICAgICAgICAgICAgdGhpcy5jbG9zZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLmF1dG9wb3NpdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF9hO1xuICAgICAgICAvLyBDb21wdXRlIG1lYXN1cmVtZW50cyBmb3IgYXV0b3Bvc2l0aW9uIG1ldGhvZHMgcmV1c2UuXG4gICAgICAgIHRoaXMubWVhc3VyZW1lbnRzID0gdGhpcy5nZXRBdXRvTGF5b3V0bWVhc3VyZW1lbnRzKCk7XG4gICAgICAgIHZhciBjb3JuZXIgPSB0aGlzLmdldG9yaWdpbkNvcm5lcigpO1xuICAgICAgICB2YXIgbWF4TWVudVN1cmZhY2VIZWlnaHQgPSB0aGlzLmdldE1lbnVTdXJmYWNlTWF4SGVpZ2h0KGNvcm5lcik7XG4gICAgICAgIHZhciB2ZXJ0aWNhbEFsaWdubWVudCA9IHRoaXMuaGFzQml0KGNvcm5lciwgQ29ybmVyQml0LkJPVFRPTSkgPyAnYm90dG9tJyA6ICd0b3AnO1xuICAgICAgICB2YXIgaG9yaXpvbnRhbEFsaWdubWVudCA9IHRoaXMuaGFzQml0KGNvcm5lciwgQ29ybmVyQml0LlJJR0hUKSA/ICdyaWdodCcgOiAnbGVmdCc7XG4gICAgICAgIHZhciBob3Jpem9udGFsT2Zmc2V0ID0gdGhpcy5nZXRIb3Jpem9udGFsT3JpZ2luT2Zmc2V0KGNvcm5lcik7XG4gICAgICAgIHZhciB2ZXJ0aWNhbE9mZnNldCA9IHRoaXMuZ2V0VmVydGljYWxPcmlnaW5PZmZzZXQoY29ybmVyKTtcbiAgICAgICAgdmFyIF9iID0gdGhpcy5tZWFzdXJlbWVudHMsIGFuY2hvclNpemUgPSBfYi5hbmNob3JTaXplLCBzdXJmYWNlU2l6ZSA9IF9iLnN1cmZhY2VTaXplO1xuICAgICAgICB2YXIgcG9zaXRpb24gPSAoX2EgPSB7fSxcbiAgICAgICAgICAgIF9hW2hvcml6b250YWxBbGlnbm1lbnRdID0gaG9yaXpvbnRhbE9mZnNldCxcbiAgICAgICAgICAgIF9hW3ZlcnRpY2FsQWxpZ25tZW50XSA9IHZlcnRpY2FsT2Zmc2V0LFxuICAgICAgICAgICAgX2EpO1xuICAgICAgICAvLyBDZW50ZXIgYWxpZ24gd2hlbiBhbmNob3Igd2lkdGggaXMgY29tcGFyYWJsZSBvciBncmVhdGVyIHRoYW4gbWVudSBzdXJmYWNlLCBvdGhlcndpc2Uga2VlcCBjb3JuZXIuXG4gICAgICAgIGlmIChhbmNob3JTaXplLndpZHRoIC8gc3VyZmFjZVNpemUud2lkdGggPiBudW1iZXJzLkFOQ0hPUl9UT19NRU5VX1NVUkZBQ0VfV0lEVEhfUkFUSU8pIHtcbiAgICAgICAgICAgIGhvcml6b250YWxBbGlnbm1lbnQgPSAnY2VudGVyJztcbiAgICAgICAgfVxuICAgICAgICAvLyBJZiB0aGUgbWVudS1zdXJmYWNlIGhhcyBiZWVuIGhvaXN0ZWQgdG8gdGhlIGJvZHksIGl0J3Mgbm8gbG9uZ2VyIHJlbGF0aXZlIHRvIHRoZSBhbmNob3IgZWxlbWVudFxuICAgICAgICBpZiAodGhpcy5pc0hvaXN0ZWRFbGVtZW50IHx8IHRoaXMuaXNGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLmFkanVzdFBvc2l0aW9uRm9ySG9pc3RlZEVsZW1lbnQocG9zaXRpb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRUcmFuc2Zvcm1PcmlnaW4oaG9yaXpvbnRhbEFsaWdubWVudCArIFwiIFwiICsgdmVydGljYWxBbGlnbm1lbnQpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0UG9zaXRpb24ocG9zaXRpb24pO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0TWF4SGVpZ2h0KG1heE1lbnVTdXJmYWNlSGVpZ2h0ID8gbWF4TWVudVN1cmZhY2VIZWlnaHQgKyAncHgnIDogJycpO1xuICAgICAgICAvLyBJZiBpdCBpcyBvcGVuZWQgZnJvbSB0aGUgdG9wIHRoZW4gYWRkIGlzLW9wZW4tYmVsb3cgY2xhc3NcbiAgICAgICAgaWYgKCF0aGlzLmhhc0JpdChjb3JuZXIsIENvcm5lckJpdC5CT1RUT00pKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLmNzc0NsYXNzZXMuSVNfT1BFTl9CRUxPVyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gTWVhc3VyZW1lbnRzIHVzZWQgdG8gcG9zaXRpb24gbWVudSBzdXJmYWNlIHBvcHVwLlxuICAgICAqL1xuICAgIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0QXV0b0xheW91dG1lYXN1cmVtZW50cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGFuY2hvclJlY3QgPSB0aGlzLmFkYXB0ZXIuZ2V0QW5jaG9yRGltZW5zaW9ucygpO1xuICAgICAgICB2YXIgYm9keVNpemUgPSB0aGlzLmFkYXB0ZXIuZ2V0Qm9keURpbWVuc2lvbnMoKTtcbiAgICAgICAgdmFyIHZpZXdwb3J0U2l6ZSA9IHRoaXMuYWRhcHRlci5nZXRXaW5kb3dEaW1lbnNpb25zKCk7XG4gICAgICAgIHZhciB3aW5kb3dTY3JvbGwgPSB0aGlzLmFkYXB0ZXIuZ2V0V2luZG93U2Nyb2xsKCk7XG4gICAgICAgIGlmICghYW5jaG9yUmVjdCkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIFBvc2l0aW9uYWwgcHJvcGVydGllcyBhcmUgbW9yZSByZWFkYWJsZSB3aGVuIHRoZXkncmUgZ3JvdXBlZCB0b2dldGhlclxuICAgICAgICAgICAgYW5jaG9yUmVjdCA9IHtcbiAgICAgICAgICAgICAgICB0b3A6IHRoaXMucG9zaXRpb24ueSxcbiAgICAgICAgICAgICAgICByaWdodDogdGhpcy5wb3NpdGlvbi54LFxuICAgICAgICAgICAgICAgIGJvdHRvbTogdGhpcy5wb3NpdGlvbi55LFxuICAgICAgICAgICAgICAgIGxlZnQ6IHRoaXMucG9zaXRpb24ueCxcbiAgICAgICAgICAgICAgICB3aWR0aDogMCxcbiAgICAgICAgICAgICAgICBoZWlnaHQ6IDAsXG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYW5jaG9yU2l6ZTogYW5jaG9yUmVjdCxcbiAgICAgICAgICAgIGJvZHlTaXplOiBib2R5U2l6ZSxcbiAgICAgICAgICAgIHN1cmZhY2VTaXplOiB0aGlzLmRpbWVuc2lvbnMsXG4gICAgICAgICAgICB2aWV3cG9ydERpc3RhbmNlOiB7XG4gICAgICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIFBvc2l0aW9uYWwgcHJvcGVydGllcyBhcmUgbW9yZSByZWFkYWJsZSB3aGVuIHRoZXkncmUgZ3JvdXBlZCB0b2dldGhlclxuICAgICAgICAgICAgICAgIHRvcDogYW5jaG9yUmVjdC50b3AsXG4gICAgICAgICAgICAgICAgcmlnaHQ6IHZpZXdwb3J0U2l6ZS53aWR0aCAtIGFuY2hvclJlY3QucmlnaHQsXG4gICAgICAgICAgICAgICAgYm90dG9tOiB2aWV3cG9ydFNpemUuaGVpZ2h0IC0gYW5jaG9yUmVjdC5ib3R0b20sXG4gICAgICAgICAgICAgICAgbGVmdDogYW5jaG9yUmVjdC5sZWZ0LFxuICAgICAgICAgICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmlld3BvcnRTaXplOiB2aWV3cG9ydFNpemUsXG4gICAgICAgICAgICB3aW5kb3dTY3JvbGw6IHdpbmRvd1Njcm9sbCxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIENvbXB1dGVzIHRoZSBjb3JuZXIgb2YgdGhlIGFuY2hvciBmcm9tIHdoaWNoIHRvIGFuaW1hdGUgYW5kIHBvc2l0aW9uIHRoZVxuICAgICAqIG1lbnUgc3VyZmFjZS5cbiAgICAgKlxuICAgICAqIE9ubHkgTEVGVCBvciBSSUdIVCBiaXQgaXMgdXNlZCB0byBwb3NpdGlvbiB0aGUgbWVudSBzdXJmYWNlIGlnbm9yaW5nIFJUTFxuICAgICAqIGNvbnRleHQuIEUuZy4sIG1lbnUgc3VyZmFjZSB3aWxsIGJlIHBvc2l0aW9uZWQgZnJvbSByaWdodCBzaWRlIG9uIFRPUF9FTkQuXG4gICAgICovXG4gICAgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRvcmlnaW5Db3JuZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjb3JuZXIgPSB0aGlzLm9yaWdpbkNvcm5lcjtcbiAgICAgICAgdmFyIF9hID0gdGhpcy5tZWFzdXJlbWVudHMsIHZpZXdwb3J0RGlzdGFuY2UgPSBfYS52aWV3cG9ydERpc3RhbmNlLCBhbmNob3JTaXplID0gX2EuYW5jaG9yU2l6ZSwgc3VyZmFjZVNpemUgPSBfYS5zdXJmYWNlU2l6ZTtcbiAgICAgICAgdmFyIE1BUkdJTl9UT19FREdFID0gTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLm51bWJlcnMuTUFSR0lOX1RPX0VER0U7XG4gICAgICAgIHZhciBpc0FuY2hvcmVkVG9Cb3R0b20gPSB0aGlzLmhhc0JpdCh0aGlzLmFuY2hvckNvcm5lciwgQ29ybmVyQml0LkJPVFRPTSk7XG4gICAgICAgIHZhciBhdmFpbGFibGVUb3A7XG4gICAgICAgIHZhciBhdmFpbGFibGVCb3R0b207XG4gICAgICAgIGlmIChpc0FuY2hvcmVkVG9Cb3R0b20pIHtcbiAgICAgICAgICAgIGF2YWlsYWJsZVRvcCA9XG4gICAgICAgICAgICAgICAgdmlld3BvcnREaXN0YW5jZS50b3AgLSBNQVJHSU5fVE9fRURHRSArIHRoaXMuYW5jaG9yTWFyZ2luLmJvdHRvbTtcbiAgICAgICAgICAgIGF2YWlsYWJsZUJvdHRvbSA9XG4gICAgICAgICAgICAgICAgdmlld3BvcnREaXN0YW5jZS5ib3R0b20gLSBNQVJHSU5fVE9fRURHRSAtIHRoaXMuYW5jaG9yTWFyZ2luLmJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF2YWlsYWJsZVRvcCA9XG4gICAgICAgICAgICAgICAgdmlld3BvcnREaXN0YW5jZS50b3AgLSBNQVJHSU5fVE9fRURHRSArIHRoaXMuYW5jaG9yTWFyZ2luLnRvcDtcbiAgICAgICAgICAgIGF2YWlsYWJsZUJvdHRvbSA9IHZpZXdwb3J0RGlzdGFuY2UuYm90dG9tIC0gTUFSR0lOX1RPX0VER0UgK1xuICAgICAgICAgICAgICAgIGFuY2hvclNpemUuaGVpZ2h0IC0gdGhpcy5hbmNob3JNYXJnaW4udG9wO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc0F2YWlsYWJsZUJvdHRvbSA9IGF2YWlsYWJsZUJvdHRvbSAtIHN1cmZhY2VTaXplLmhlaWdodCA+IDA7XG4gICAgICAgIGlmICghaXNBdmFpbGFibGVCb3R0b20gJiYgYXZhaWxhYmxlVG9wID4gYXZhaWxhYmxlQm90dG9tKSB7XG4gICAgICAgICAgICAvLyBBdHRhY2ggYm90dG9tIHNpZGUgb2Ygc3VyZmFjZSB0byB0aGUgYW5jaG9yLlxuICAgICAgICAgICAgY29ybmVyID0gdGhpcy5zZXRCaXQoY29ybmVyLCBDb3JuZXJCaXQuQk9UVE9NKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNSdGwgPSB0aGlzLmFkYXB0ZXIuaXNSdGwoKTtcbiAgICAgICAgdmFyIGlzRmxpcFJ0bCA9IHRoaXMuaGFzQml0KHRoaXMuYW5jaG9yQ29ybmVyLCBDb3JuZXJCaXQuRkxJUF9SVEwpO1xuICAgICAgICB2YXIgaGFzUmlnaHRCaXQgPSB0aGlzLmhhc0JpdCh0aGlzLmFuY2hvckNvcm5lciwgQ29ybmVyQml0LlJJR0hUKSB8fFxuICAgICAgICAgICAgdGhpcy5oYXNCaXQoY29ybmVyLCBDb3JuZXJCaXQuUklHSFQpO1xuICAgICAgICAvLyBXaGV0aGVyIHN1cmZhY2UgYXR0YWNoZWQgdG8gcmlnaHQgc2lkZSBvZiBhbmNob3IgZWxlbWVudC5cbiAgICAgICAgdmFyIGlzQW5jaG9yZWRUb1JpZ2h0ID0gZmFsc2U7XG4gICAgICAgIC8vIEFuY2hvcmVkIHRvIHN0YXJ0XG4gICAgICAgIGlmIChpc1J0bCAmJiBpc0ZsaXBSdGwpIHtcbiAgICAgICAgICAgIGlzQW5jaG9yZWRUb1JpZ2h0ID0gIWhhc1JpZ2h0Qml0O1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gQW5jaG9yZWQgdG8gcmlnaHRcbiAgICAgICAgICAgIGlzQW5jaG9yZWRUb1JpZ2h0ID0gaGFzUmlnaHRCaXQ7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGF2YWlsYWJsZUxlZnQ7XG4gICAgICAgIHZhciBhdmFpbGFibGVSaWdodDtcbiAgICAgICAgaWYgKGlzQW5jaG9yZWRUb1JpZ2h0KSB7XG4gICAgICAgICAgICBhdmFpbGFibGVMZWZ0ID1cbiAgICAgICAgICAgICAgICB2aWV3cG9ydERpc3RhbmNlLmxlZnQgKyBhbmNob3JTaXplLndpZHRoICsgdGhpcy5hbmNob3JNYXJnaW4ucmlnaHQ7XG4gICAgICAgICAgICBhdmFpbGFibGVSaWdodCA9IHZpZXdwb3J0RGlzdGFuY2UucmlnaHQgLSB0aGlzLmFuY2hvck1hcmdpbi5yaWdodDtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGF2YWlsYWJsZUxlZnQgPSB2aWV3cG9ydERpc3RhbmNlLmxlZnQgKyB0aGlzLmFuY2hvck1hcmdpbi5sZWZ0O1xuICAgICAgICAgICAgYXZhaWxhYmxlUmlnaHQgPVxuICAgICAgICAgICAgICAgIHZpZXdwb3J0RGlzdGFuY2UucmlnaHQgKyBhbmNob3JTaXplLndpZHRoIC0gdGhpcy5hbmNob3JNYXJnaW4ubGVmdDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaXNBdmFpbGFibGVMZWZ0ID0gYXZhaWxhYmxlTGVmdCAtIHN1cmZhY2VTaXplLndpZHRoID4gMDtcbiAgICAgICAgdmFyIGlzQXZhaWxhYmxlUmlnaHQgPSBhdmFpbGFibGVSaWdodCAtIHN1cmZhY2VTaXplLndpZHRoID4gMDtcbiAgICAgICAgdmFyIGlzT3JpZ2luQ29ybmVyQWxpZ25lZFRvRW5kID0gdGhpcy5oYXNCaXQoY29ybmVyLCBDb3JuZXJCaXQuRkxJUF9SVEwpICYmXG4gICAgICAgICAgICB0aGlzLmhhc0JpdChjb3JuZXIsIENvcm5lckJpdC5SSUdIVCk7XG4gICAgICAgIGlmIChpc0F2YWlsYWJsZVJpZ2h0ICYmIGlzT3JpZ2luQ29ybmVyQWxpZ25lZFRvRW5kICYmIGlzUnRsIHx8XG4gICAgICAgICAgICAhaXNBdmFpbGFibGVMZWZ0ICYmIGlzT3JpZ2luQ29ybmVyQWxpZ25lZFRvRW5kKSB7XG4gICAgICAgICAgICAvLyBBdHRhY2ggbGVmdCBzaWRlIG9mIHN1cmZhY2UgdG8gdGhlIGFuY2hvci5cbiAgICAgICAgICAgIGNvcm5lciA9IHRoaXMudW5zZXRCaXQoY29ybmVyLCBDb3JuZXJCaXQuUklHSFQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKGlzQXZhaWxhYmxlTGVmdCAmJiBpc0FuY2hvcmVkVG9SaWdodCAmJiBpc1J0bCB8fFxuICAgICAgICAgICAgKGlzQXZhaWxhYmxlTGVmdCAmJiAhaXNBbmNob3JlZFRvUmlnaHQgJiYgaGFzUmlnaHRCaXQpIHx8XG4gICAgICAgICAgICAoIWlzQXZhaWxhYmxlUmlnaHQgJiYgYXZhaWxhYmxlTGVmdCA+PSBhdmFpbGFibGVSaWdodCkpIHtcbiAgICAgICAgICAgIC8vIEF0dGFjaCByaWdodCBzaWRlIG9mIHN1cmZhY2UgdG8gdGhlIGFuY2hvci5cbiAgICAgICAgICAgIGNvcm5lciA9IHRoaXMuc2V0Qml0KGNvcm5lciwgQ29ybmVyQml0LlJJR0hUKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gY29ybmVyO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNvcm5lciBPcmlnaW4gY29ybmVyIG9mIHRoZSBtZW51IHN1cmZhY2UuXG4gICAgICogQHJldHVybiBNYXhpbXVtIGhlaWdodCBvZiB0aGUgbWVudSBzdXJmYWNlLCBiYXNlZCBvbiBhdmFpbGFibGUgc3BhY2UuIDAgaW5kaWNhdGVzIHNob3VsZCBub3QgYmUgc2V0LlxuICAgICAqL1xuICAgIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0TWVudVN1cmZhY2VNYXhIZWlnaHQgPSBmdW5jdGlvbiAoY29ybmVyKSB7XG4gICAgICAgIGlmICh0aGlzLm1heEhlaWdodCA+IDApIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1heEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdmlld3BvcnREaXN0YW5jZSA9IHRoaXMubWVhc3VyZW1lbnRzLnZpZXdwb3J0RGlzdGFuY2U7XG4gICAgICAgIHZhciBtYXhIZWlnaHQgPSAwO1xuICAgICAgICB2YXIgaXNCb3R0b21BbGlnbmVkID0gdGhpcy5oYXNCaXQoY29ybmVyLCBDb3JuZXJCaXQuQk9UVE9NKTtcbiAgICAgICAgdmFyIGlzQm90dG9tQW5jaG9yZWQgPSB0aGlzLmhhc0JpdCh0aGlzLmFuY2hvckNvcm5lciwgQ29ybmVyQml0LkJPVFRPTSk7XG4gICAgICAgIHZhciBNQVJHSU5fVE9fRURHRSA9IE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5udW1iZXJzLk1BUkdJTl9UT19FREdFO1xuICAgICAgICAvLyBXaGVuIG1heGltdW0gaGVpZ2h0IGlzIG5vdCBzcGVjaWZpZWQsIGl0IGlzIGhhbmRsZWQgZnJvbSBDU1MuXG4gICAgICAgIGlmIChpc0JvdHRvbUFsaWduZWQpIHtcbiAgICAgICAgICAgIG1heEhlaWdodCA9IHZpZXdwb3J0RGlzdGFuY2UudG9wICsgdGhpcy5hbmNob3JNYXJnaW4udG9wIC0gTUFSR0lOX1RPX0VER0U7XG4gICAgICAgICAgICBpZiAoIWlzQm90dG9tQW5jaG9yZWQpIHtcbiAgICAgICAgICAgICAgICBtYXhIZWlnaHQgKz0gdGhpcy5tZWFzdXJlbWVudHMuYW5jaG9yU2l6ZS5oZWlnaHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBtYXhIZWlnaHQgPSB2aWV3cG9ydERpc3RhbmNlLmJvdHRvbSAtIHRoaXMuYW5jaG9yTWFyZ2luLmJvdHRvbSArXG4gICAgICAgICAgICAgICAgdGhpcy5tZWFzdXJlbWVudHMuYW5jaG9yU2l6ZS5oZWlnaHQgLSBNQVJHSU5fVE9fRURHRTtcbiAgICAgICAgICAgIGlmIChpc0JvdHRvbUFuY2hvcmVkKSB7XG4gICAgICAgICAgICAgICAgbWF4SGVpZ2h0IC09IHRoaXMubWVhc3VyZW1lbnRzLmFuY2hvclNpemUuaGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBtYXhIZWlnaHQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY29ybmVyIE9yaWdpbiBjb3JuZXIgb2YgdGhlIG1lbnUgc3VyZmFjZS5cbiAgICAgKiBAcmV0dXJuIEhvcml6b250YWwgb2Zmc2V0IG9mIG1lbnUgc3VyZmFjZSBvcmlnaW4gY29ybmVyIGZyb20gY29ycmVzcG9uZGluZyBhbmNob3IgY29ybmVyLlxuICAgICAqL1xuICAgIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0SG9yaXpvbnRhbE9yaWdpbk9mZnNldCA9IGZ1bmN0aW9uIChjb3JuZXIpIHtcbiAgICAgICAgdmFyIGFuY2hvclNpemUgPSB0aGlzLm1lYXN1cmVtZW50cy5hbmNob3JTaXplO1xuICAgICAgICAvLyBpc1JpZ2h0QWxpZ25lZCBjb3JyZXNwb25kcyB0byB1c2luZyB0aGUgJ3JpZ2h0JyBwcm9wZXJ0eSBvbiB0aGUgc3VyZmFjZS5cbiAgICAgICAgdmFyIGlzUmlnaHRBbGlnbmVkID0gdGhpcy5oYXNCaXQoY29ybmVyLCBDb3JuZXJCaXQuUklHSFQpO1xuICAgICAgICB2YXIgYXZvaWRIb3Jpem9udGFsT3ZlcmxhcCA9IHRoaXMuaGFzQml0KHRoaXMuYW5jaG9yQ29ybmVyLCBDb3JuZXJCaXQuUklHSFQpO1xuICAgICAgICBpZiAoaXNSaWdodEFsaWduZWQpIHtcbiAgICAgICAgICAgIHZhciByaWdodE9mZnNldCA9IGF2b2lkSG9yaXpvbnRhbE92ZXJsYXAgP1xuICAgICAgICAgICAgICAgIGFuY2hvclNpemUud2lkdGggLSB0aGlzLmFuY2hvck1hcmdpbi5sZWZ0IDpcbiAgICAgICAgICAgICAgICB0aGlzLmFuY2hvck1hcmdpbi5yaWdodDtcbiAgICAgICAgICAgIC8vIEZvciBob2lzdGVkIG9yIGZpeGVkIGVsZW1lbnRzLCBhZGp1c3QgdGhlIG9mZnNldCBieSB0aGUgZGlmZmVyZW5jZVxuICAgICAgICAgICAgLy8gYmV0d2VlbiB2aWV3cG9ydCB3aWR0aCBhbmQgYm9keSB3aWR0aCBzbyB3aGVuIHdlIGNhbGN1bGF0ZSB0aGUgcmlnaHRcbiAgICAgICAgICAgIC8vIHZhbHVlIChgYWRqdXN0UG9zaXRpb25Gb3JIb2lzdGVkRWxlbWVudGApIGJhc2VkIG9uIHRoZSBlbGVtZW50XG4gICAgICAgICAgICAvLyBwb3NpdGlvbiwgdGhlIHJpZ2h0IHByb3BlcnR5IGlzIGNvcnJlY3QuXG4gICAgICAgICAgICBpZiAodGhpcy5pc0hvaXN0ZWRFbGVtZW50IHx8IHRoaXMuaXNGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHJpZ2h0T2Zmc2V0IC1cbiAgICAgICAgICAgICAgICAgICAgKHRoaXMubWVhc3VyZW1lbnRzLnZpZXdwb3J0U2l6ZS53aWR0aCAtXG4gICAgICAgICAgICAgICAgICAgICAgICB0aGlzLm1lYXN1cmVtZW50cy5ib2R5U2l6ZS53aWR0aCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gcmlnaHRPZmZzZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGF2b2lkSG9yaXpvbnRhbE92ZXJsYXAgPyBhbmNob3JTaXplLndpZHRoIC0gdGhpcy5hbmNob3JNYXJnaW4ucmlnaHQgOlxuICAgICAgICAgICAgdGhpcy5hbmNob3JNYXJnaW4ubGVmdDtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjb3JuZXIgT3JpZ2luIGNvcm5lciBvZiB0aGUgbWVudSBzdXJmYWNlLlxuICAgICAqIEByZXR1cm4gVmVydGljYWwgb2Zmc2V0IG9mIG1lbnUgc3VyZmFjZSBvcmlnaW4gY29ybmVyIGZyb20gY29ycmVzcG9uZGluZyBhbmNob3IgY29ybmVyLlxuICAgICAqL1xuICAgIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0VmVydGljYWxPcmlnaW5PZmZzZXQgPSBmdW5jdGlvbiAoY29ybmVyKSB7XG4gICAgICAgIHZhciBhbmNob3JTaXplID0gdGhpcy5tZWFzdXJlbWVudHMuYW5jaG9yU2l6ZTtcbiAgICAgICAgdmFyIGlzQm90dG9tQWxpZ25lZCA9IHRoaXMuaGFzQml0KGNvcm5lciwgQ29ybmVyQml0LkJPVFRPTSk7XG4gICAgICAgIHZhciBhdm9pZFZlcnRpY2FsT3ZlcmxhcCA9IHRoaXMuaGFzQml0KHRoaXMuYW5jaG9yQ29ybmVyLCBDb3JuZXJCaXQuQk9UVE9NKTtcbiAgICAgICAgdmFyIHkgPSAwO1xuICAgICAgICBpZiAoaXNCb3R0b21BbGlnbmVkKSB7XG4gICAgICAgICAgICB5ID0gYXZvaWRWZXJ0aWNhbE92ZXJsYXAgPyBhbmNob3JTaXplLmhlaWdodCAtIHRoaXMuYW5jaG9yTWFyZ2luLnRvcCA6XG4gICAgICAgICAgICAgICAgLXRoaXMuYW5jaG9yTWFyZ2luLmJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHkgPSBhdm9pZFZlcnRpY2FsT3ZlcmxhcCA/XG4gICAgICAgICAgICAgICAgKGFuY2hvclNpemUuaGVpZ2h0ICsgdGhpcy5hbmNob3JNYXJnaW4uYm90dG9tKSA6XG4gICAgICAgICAgICAgICAgdGhpcy5hbmNob3JNYXJnaW4udG9wO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB5O1xuICAgIH07XG4gICAgLyoqIENhbGN1bGF0ZXMgdGhlIG9mZnNldHMgZm9yIHBvc2l0aW9uaW5nIHRoZSBtZW51LXN1cmZhY2Ugd2hlbiB0aGUgbWVudS1zdXJmYWNlIGhhcyBiZWVuIGhvaXN0ZWQgdG8gdGhlIGJvZHkuICovXG4gICAgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLnByb3RvdHlwZS5hZGp1c3RQb3NpdGlvbkZvckhvaXN0ZWRFbGVtZW50ID0gZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB2YXIgX2IgPSB0aGlzLm1lYXN1cmVtZW50cywgd2luZG93U2Nyb2xsID0gX2Iud2luZG93U2Nyb2xsLCB2aWV3cG9ydERpc3RhbmNlID0gX2Iudmlld3BvcnREaXN0YW5jZSwgc3VyZmFjZVNpemUgPSBfYi5zdXJmYWNlU2l6ZSwgdmlld3BvcnRTaXplID0gX2Iudmlld3BvcnRTaXplO1xuICAgICAgICB2YXIgcHJvcHMgPSBPYmplY3Qua2V5cyhwb3NpdGlvbik7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBwcm9wc18xID0gX192YWx1ZXMocHJvcHMpLCBwcm9wc18xXzEgPSBwcm9wc18xLm5leHQoKTsgIXByb3BzXzFfMS5kb25lOyBwcm9wc18xXzEgPSBwcm9wc18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wID0gcHJvcHNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHZhciB2YWx1ZSA9IHBvc2l0aW9uW3Byb3BdIHx8IDA7XG4gICAgICAgICAgICAgICAgaWYgKHRoaXMuaXNIb3Jpem9udGFsbHlDZW50ZXJlZE9uVmlld3BvcnQgJiZcbiAgICAgICAgICAgICAgICAgICAgKHByb3AgPT09ICdsZWZ0JyB8fCBwcm9wID09PSAncmlnaHQnKSkge1xuICAgICAgICAgICAgICAgICAgICBwb3NpdGlvbltwcm9wXSA9ICh2aWV3cG9ydFNpemUud2lkdGggLSBzdXJmYWNlU2l6ZS53aWR0aCkgLyAyO1xuICAgICAgICAgICAgICAgICAgICBjb250aW51ZTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgLy8gSG9pc3RlZCBzdXJmYWNlcyBuZWVkIHRvIGhhdmUgdGhlIGFuY2hvciBlbGVtZW50cyBsb2NhdGlvbiBvbiB0aGUgcGFnZSBhZGRlZCB0byB0aGVcbiAgICAgICAgICAgICAgICAvLyBwb3NpdGlvbiBwcm9wZXJ0aWVzIGZvciBwcm9wZXIgYWxpZ25tZW50IG9uIHRoZSBib2R5LlxuICAgICAgICAgICAgICAgIHZhbHVlICs9IHZpZXdwb3J0RGlzdGFuY2VbcHJvcF07XG4gICAgICAgICAgICAgICAgLy8gU3VyZmFjZXMgdGhhdCBhcmUgYWJzb2x1dGVseSBwb3NpdGlvbmVkIG5lZWQgdG8gaGF2ZSBhZGRpdGlvbmFsIGNhbGN1bGF0aW9ucyBmb3Igc2Nyb2xsXG4gICAgICAgICAgICAgICAgLy8gYW5kIGJvdHRvbSBwb3NpdGlvbmluZy5cbiAgICAgICAgICAgICAgICBpZiAoIXRoaXMuaXNGaXhlZFBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChwcm9wID09PSAndG9wJykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gd2luZG93U2Nyb2xsLnk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSBpZiAocHJvcCA9PT0gJ2JvdHRvbScpIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC09IHdpbmRvd1Njcm9sbC55O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKHByb3AgPT09ICdsZWZ0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFsdWUgKz0gd2luZG93U2Nyb2xsLng7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZWxzZSB7IC8vIHByb3AgPT09ICdyaWdodCdcbiAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlIC09IHdpbmRvd1Njcm9sbC54O1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHBvc2l0aW9uW3Byb3BdID0gdmFsdWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChwcm9wc18xXzEgJiYgIXByb3BzXzFfMS5kb25lICYmIChfYSA9IHByb3BzXzEucmV0dXJuKSkgX2EuY2FsbChwcm9wc18xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogVGhlIGxhc3QgZm9jdXNlZCBlbGVtZW50IHdoZW4gdGhlIG1lbnUgc3VyZmFjZSB3YXMgb3BlbmVkIHNob3VsZCByZWdhaW4gZm9jdXMsIGlmIHRoZSB1c2VyIGlzXG4gICAgICogZm9jdXNlZCBvbiBvciB3aXRoaW4gdGhlIG1lbnUgc3VyZmFjZSB3aGVuIGl0IGlzIGNsb3NlZC5cbiAgICAgKi9cbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLm1heWJlUmVzdG9yZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaXNSb290Rm9jdXNlZCA9IHRoaXMuYWRhcHRlci5pc0ZvY3VzZWQoKTtcbiAgICAgICAgdmFyIGNoaWxkSGFzRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICYmXG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuaXNFbGVtZW50SW5Db250YWluZXIoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCk7XG4gICAgICAgIGlmIChpc1Jvb3RGb2N1c2VkIHx8IGNoaWxkSGFzRm9jdXMpIHtcbiAgICAgICAgICAgIC8vIFdhaXQgYmVmb3JlIHJlc3RvcmluZyBmb2N1cyB3aGVuIGNsb3NpbmcgdGhlIG1lbnUgc3VyZmFjZS4gVGhpcyBpc1xuICAgICAgICAgICAgLy8gaW1wb3J0YW50IGJlY2F1c2UgaWYgYSB0b3VjaCBldmVudCB0cmlnZ2VyZWQgdGhlIG1lbnUgY2xvc2UsIGFuZCB0aGVcbiAgICAgICAgICAgIC8vIHN1YnNlcXVlbnQgbW91c2UgZXZlbnQgb2NjdXJzIGFmdGVyIGZvY3VzIGlzIHJlc3RvcmVkLCB0aGVuIHRoZVxuICAgICAgICAgICAgLy8gcmVzdG9yZWQgZm9jdXMgd291bGQgYmUgbG9zdC5cbiAgICAgICAgICAgIHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIucmVzdG9yZUZvY3VzKCk7XG4gICAgICAgICAgICB9LCBudW1iZXJzLlRPVUNIX0VWRU5UX1dBSVRfTVMpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24ucHJvdG90eXBlLmhhc0JpdCA9IGZ1bmN0aW9uIChjb3JuZXIsIGJpdCkge1xuICAgICAgICByZXR1cm4gQm9vbGVhbihjb3JuZXIgJiBiaXQpOyAvLyB0c2xpbnQ6ZGlzYWJsZS1saW5lOm5vLWJpdHdpc2VcbiAgICB9O1xuICAgIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0Qml0ID0gZnVuY3Rpb24gKGNvcm5lciwgYml0KSB7XG4gICAgICAgIHJldHVybiBjb3JuZXIgfCBiaXQ7IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tYml0d2lzZVxuICAgIH07XG4gICAgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLnByb3RvdHlwZS51bnNldEJpdCA9IGZ1bmN0aW9uIChjb3JuZXIsIGJpdCkge1xuICAgICAgICByZXR1cm4gY29ybmVyIF4gYml0O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogaXNGaW5pdGUgdGhhdCBkb2Vzbid0IGZvcmNlIGNvbnZlcnNpb24gdG8gbnVtYmVyIHR5cGUuXG4gICAgICogRXF1aXZhbGVudCB0byBOdW1iZXIuaXNGaW5pdGUgaW4gRVMyMDE1LCB3aGljaCBpcyBub3Qgc3VwcG9ydGVkIGluIElFLlxuICAgICAqL1xuICAgIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbi5wcm90b3R5cGUuaXNGaW5pdGUgPSBmdW5jdGlvbiAobnVtKSB7XG4gICAgICAgIHJldHVybiB0eXBlb2YgbnVtID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZShudW0pO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDQ29tcG9uZW50IH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IGNzc0NsYXNzZXMsIHN0cmluZ3MgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgZ2V0Q29ycmVjdFByb3BlcnR5TmFtZSB9IGZyb20gJ0BtYXRlcmlhbC9hbmltYXRpb24vdXRpbCc7XG52YXIgTURDTWVudVN1cmZhY2UgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ01lbnVTdXJmYWNlLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ01lbnVTdXJmYWNlKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ01lbnVTdXJmYWNlLmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENNZW51U3VyZmFjZShyb290KTtcbiAgICB9O1xuICAgIE1EQ01lbnVTdXJmYWNlLnByb3RvdHlwZS5pbml0aWFsU3luY1dpdGhET00gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBwYXJlbnRFbCA9IHRoaXMucm9vdC5wYXJlbnRFbGVtZW50O1xuICAgICAgICB0aGlzLmFuY2hvckVsZW1lbnQgPSBwYXJlbnRFbCAmJiBwYXJlbnRFbC5jbGFzc0xpc3QuY29udGFpbnMoY3NzQ2xhc3Nlcy5BTkNIT1IpID8gcGFyZW50RWwgOiBudWxsO1xuICAgICAgICBpZiAodGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhjc3NDbGFzc2VzLkZJWEVEKSkge1xuICAgICAgICAgICAgdGhpcy5zZXRGaXhlZFBvc2l0aW9uKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGFuZGxlS2V5ZG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICAgICAgX3RoaXMuZm91bmRhdGlvbi5oYW5kbGVLZXlkb3duKGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVCb2R5Q2xpY2sgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgICAgICAgIF90aGlzLmZvdW5kYXRpb24uaGFuZGxlQm9keUNsaWNrKGV2ZW50KTtcbiAgICAgICAgfTtcbiAgICAgICAgLy8gY2FwdHVyZSBzbyB0aGF0IG5vIHJhY2UgYmV0d2VlbiBoYW5kbGVCb2R5Q2xpY2sgYW5kIHF1aWNrT3BlbiB3aGVuXG4gICAgICAgIC8vIG1lbnVzdXJmYWNlIG9wZW5lZCBvbiBidXR0b24gY2xpY2sgd2hpY2ggcmVnaXN0ZXJzIHRoaXMgbGlzdGVuZXJcbiAgICAgICAgdGhpcy5yZWdpc3RlckJvZHlDbGlja0xpc3RlbmVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZG9jdW1lbnQuYm9keS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIF90aGlzLmhhbmRsZUJvZHlDbGljaywgeyBjYXB0dXJlOiB0cnVlIH0pO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmRlcmVnaXN0ZXJCb2R5Q2xpY2tMaXN0ZW5lciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGRvY3VtZW50LmJvZHkucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCBfdGhpcy5oYW5kbGVCb2R5Q2xpY2ssIHsgY2FwdHVyZTogdHJ1ZSB9KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5saXN0ZW4oJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWRvd24pO1xuICAgICAgICB0aGlzLmxpc3RlbihzdHJpbmdzLk9QRU5FRF9FVkVOVCwgdGhpcy5yZWdpc3RlckJvZHlDbGlja0xpc3RlbmVyKTtcbiAgICAgICAgdGhpcy5saXN0ZW4oc3RyaW5ncy5DTE9TRURfRVZFTlQsIHRoaXMuZGVyZWdpc3RlckJvZHlDbGlja0xpc3RlbmVyKTtcbiAgICB9O1xuICAgIE1EQ01lbnVTdXJmYWNlLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLnVubGlzdGVuKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duKTtcbiAgICAgICAgdGhpcy51bmxpc3RlbihzdHJpbmdzLk9QRU5FRF9FVkVOVCwgdGhpcy5yZWdpc3RlckJvZHlDbGlja0xpc3RlbmVyKTtcbiAgICAgICAgdGhpcy51bmxpc3RlbihzdHJpbmdzLkNMT1NFRF9FVkVOVCwgdGhpcy5kZXJlZ2lzdGVyQm9keUNsaWNrTGlzdGVuZXIpO1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1EQ01lbnVTdXJmYWNlLnByb3RvdHlwZS5pc09wZW4gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmZvdW5kYXRpb24uaXNPcGVuKCk7XG4gICAgfTtcbiAgICBNRENNZW51U3VyZmFjZS5wcm90b3R5cGUub3BlbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLm9wZW4oKTtcbiAgICB9O1xuICAgIE1EQ01lbnVTdXJmYWNlLnByb3RvdHlwZS5jbG9zZSA9IGZ1bmN0aW9uIChza2lwUmVzdG9yZUZvY3VzKSB7XG4gICAgICAgIGlmIChza2lwUmVzdG9yZUZvY3VzID09PSB2b2lkIDApIHsgc2tpcFJlc3RvcmVGb2N1cyA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5jbG9zZShza2lwUmVzdG9yZUZvY3VzKTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENNZW51U3VyZmFjZS5wcm90b3R5cGUsIFwicXVpY2tPcGVuXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAocXVpY2tPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0UXVpY2tPcGVuKHF1aWNrT3Blbik7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKiogU2V0cyB0aGUgZm91bmRhdGlvbiB0byB1c2UgcGFnZSBvZmZzZXRzIGZvciBhbiBwb3NpdGlvbmluZyB3aGVuIHRoZSBtZW51IGlzIGhvaXN0ZWQgdG8gdGhlIGJvZHkuICovXG4gICAgTURDTWVudVN1cmZhY2UucHJvdG90eXBlLnNldElzSG9pc3RlZCA9IGZ1bmN0aW9uIChpc0hvaXN0ZWQpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldElzSG9pc3RlZChpc0hvaXN0ZWQpO1xuICAgIH07XG4gICAgLyoqIFNldHMgdGhlIGVsZW1lbnQgdGhhdCB0aGUgbWVudS1zdXJmYWNlIGlzIGFuY2hvcmVkIHRvLiAqL1xuICAgIE1EQ01lbnVTdXJmYWNlLnByb3RvdHlwZS5zZXRNZW51U3VyZmFjZUFuY2hvckVsZW1lbnQgPSBmdW5jdGlvbiAoZWxlbWVudCkge1xuICAgICAgICB0aGlzLmFuY2hvckVsZW1lbnQgPSBlbGVtZW50O1xuICAgIH07XG4gICAgLyoqIFNldHMgdGhlIG1lbnUtc3VyZmFjZSB0byBwb3NpdGlvbjogZml4ZWQuICovXG4gICAgTURDTWVudVN1cmZhY2UucHJvdG90eXBlLnNldEZpeGVkUG9zaXRpb24gPSBmdW5jdGlvbiAoaXNGaXhlZCkge1xuICAgICAgICBpZiAoaXNGaXhlZCkge1xuICAgICAgICAgICAgdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoY3NzQ2xhc3Nlcy5GSVhFRCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShjc3NDbGFzc2VzLkZJWEVEKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0Rml4ZWRQb3NpdGlvbihpc0ZpeGVkKTtcbiAgICB9O1xuICAgIC8qKiBTZXRzIHRoZSBhYnNvbHV0ZSB4L3kgcG9zaXRpb24gdG8gcG9zaXRpb24gYmFzZWQgb24uIFJlcXVpcmVzIHRoZSBtZW51IHRvIGJlIGhvaXN0ZWQuICovXG4gICAgTURDTWVudVN1cmZhY2UucHJvdG90eXBlLnNldEFic29sdXRlUG9zaXRpb24gPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0QWJzb2x1dGVQb3NpdGlvbih4LCB5KTtcbiAgICAgICAgdGhpcy5zZXRJc0hvaXN0ZWQodHJ1ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY29ybmVyIERlZmF1bHQgYW5jaG9yIGNvcm5lciBhbGlnbm1lbnQgb2YgdG9wLWxlZnQgc3VyZmFjZSBjb3JuZXIuXG4gICAgICovXG4gICAgTURDTWVudVN1cmZhY2UucHJvdG90eXBlLnNldEFuY2hvckNvcm5lciA9IGZ1bmN0aW9uIChjb3JuZXIpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldEFuY2hvckNvcm5lcihjb3JuZXIpO1xuICAgIH07XG4gICAgTURDTWVudVN1cmZhY2UucHJvdG90eXBlLnNldEFuY2hvck1hcmdpbiA9IGZ1bmN0aW9uIChtYXJnaW4pIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldEFuY2hvck1hcmdpbihtYXJnaW4pO1xuICAgIH07XG4gICAgTURDTWVudVN1cmZhY2UucHJvdG90eXBlLmdldERlZmF1bHRGb3VuZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBETyBOT1QgSU5MSU5FIHRoaXMgdmFyaWFibGUuIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBmb3VuZGF0aW9ucyB0YWtlIGEgUGFydGlhbDxNRENGb29BZGFwdGVyPi5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHdlIGRvbid0IGFjY2lkZW50YWxseSBvbWl0IGFueSBtZXRob2RzLCB3ZSBuZWVkIGEgc2VwYXJhdGUsIHN0cm9uZ2x5IHR5cGVkIGFkYXB0ZXIgdmFyaWFibGUuXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgIHZhciBhZGFwdGVyID0ge1xuICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLnJvb3QuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgaGFzQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLnJvb3QuY2xhc3NMaXN0LmNvbnRhaW5zKGNsYXNzTmFtZSk7IH0sXG4gICAgICAgICAgICBoYXNBbmNob3I6IGZ1bmN0aW9uICgpIHsgcmV0dXJuICEhX3RoaXMuYW5jaG9yRWxlbWVudDsgfSxcbiAgICAgICAgICAgIG5vdGlmeUNsb3NlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmVtaXQoTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLnN0cmluZ3MuQ0xPU0VEX0VWRU5ULCB7fSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgbm90aWZ5Q2xvc2luZzogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmVtaXQoTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLnN0cmluZ3MuQ0xPU0lOR19FVkVOVCwge30pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vdGlmeU9wZW46IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdChNRENNZW51U3VyZmFjZUZvdW5kYXRpb24uc3RyaW5ncy5PUEVORURfRVZFTlQsIHt9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc0VsZW1lbnRJbkNvbnRhaW5lcjogZnVuY3Rpb24gKGVsKSB7IHJldHVybiBfdGhpcy5yb290LmNvbnRhaW5zKGVsKTsgfSxcbiAgICAgICAgICAgIGlzUnRsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGdldENvbXB1dGVkU3R5bGUoX3RoaXMucm9vdCkuZ2V0UHJvcGVydHlWYWx1ZSgnZGlyZWN0aW9uJykgPT09ICdydGwnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFRyYW5zZm9ybU9yaWdpbjogZnVuY3Rpb24gKG9yaWdpbikge1xuICAgICAgICAgICAgICAgIHZhciBwcm9wZXJ0eU5hbWUgPSBnZXRDb3JyZWN0UHJvcGVydHlOYW1lKHdpbmRvdywgJ3RyYW5zZm9ybScpICsgXCItb3JpZ2luXCI7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eU5hbWUsIG9yaWdpbik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNGb2N1c2VkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50ID09PSBfdGhpcy5yb290OyB9LFxuICAgICAgICAgICAgc2F2ZUZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucHJldmlvdXNGb2N1cyA9XG4gICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVzdG9yZUZvY3VzOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLnJvb3QuY29udGFpbnMoZG9jdW1lbnQuYWN0aXZlRWxlbWVudCkpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF90aGlzLnByZXZpb3VzRm9jdXMgJiYgX3RoaXMucHJldmlvdXNGb2N1cy5mb2N1cykge1xuICAgICAgICAgICAgICAgICAgICAgICAgX3RoaXMucHJldmlvdXNGb2N1cy5mb2N1cygpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldElubmVyRGltZW5zaW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgICAgIHdpZHRoOiBfdGhpcy5yb290Lm9mZnNldFdpZHRoLFxuICAgICAgICAgICAgICAgICAgICBoZWlnaHQ6IF90aGlzLnJvb3Qub2Zmc2V0SGVpZ2h0XG4gICAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRBbmNob3JEaW1lbnNpb25zOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5hbmNob3JFbGVtZW50ID9cbiAgICAgICAgICAgICAgICBfdGhpcy5hbmNob3JFbGVtZW50LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpIDpcbiAgICAgICAgICAgICAgICBudWxsOyB9LFxuICAgICAgICAgICAgZ2V0V2luZG93RGltZW5zaW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHdpZHRoOiB3aW5kb3cuaW5uZXJXaWR0aCwgaGVpZ2h0OiB3aW5kb3cuaW5uZXJIZWlnaHQgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRCb2R5RGltZW5zaW9uczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiB7IHdpZHRoOiBkb2N1bWVudC5ib2R5LmNsaWVudFdpZHRoLCBoZWlnaHQ6IGRvY3VtZW50LmJvZHkuY2xpZW50SGVpZ2h0IH07XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0V2luZG93U2Nyb2xsOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHsgeDogd2luZG93LnBhZ2VYT2Zmc2V0LCB5OiB3aW5kb3cucGFnZVlPZmZzZXQgfTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRQb3NpdGlvbjogZnVuY3Rpb24gKHBvc2l0aW9uKSB7XG4gICAgICAgICAgICAgICAgdmFyIHJvb3RIVE1MID0gX3RoaXMucm9vdDtcbiAgICAgICAgICAgICAgICByb290SFRNTC5zdHlsZS5sZWZ0ID0gJ2xlZnQnIGluIHBvc2l0aW9uID8gcG9zaXRpb24ubGVmdCArIFwicHhcIiA6ICcnO1xuICAgICAgICAgICAgICAgIHJvb3RIVE1MLnN0eWxlLnJpZ2h0ID0gJ3JpZ2h0JyBpbiBwb3NpdGlvbiA/IHBvc2l0aW9uLnJpZ2h0ICsgXCJweFwiIDogJyc7XG4gICAgICAgICAgICAgICAgcm9vdEhUTUwuc3R5bGUudG9wID0gJ3RvcCcgaW4gcG9zaXRpb24gPyBwb3NpdGlvbi50b3AgKyBcInB4XCIgOiAnJztcbiAgICAgICAgICAgICAgICByb290SFRNTC5zdHlsZS5ib3R0b20gPVxuICAgICAgICAgICAgICAgICAgICAnYm90dG9tJyBpbiBwb3NpdGlvbiA/IHBvc2l0aW9uLmJvdHRvbSArIFwicHhcIiA6ICcnO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldE1heEhlaWdodDogZnVuY3Rpb24gKGhlaWdodCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJvb3Quc3R5bGUubWF4SGVpZ2h0ID0gaGVpZ2h0O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgcmV0dXJuIG5ldyBNRENNZW51U3VyZmFjZUZvdW5kYXRpb24oYWRhcHRlcik7XG4gICAgfTtcbiAgICByZXR1cm4gTURDTWVudVN1cmZhY2U7XG59KE1EQ0NvbXBvbmVudCkpO1xuZXhwb3J0IHsgTURDTWVudVN1cmZhY2UgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0ZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7IGNzc0NsYXNzZXMgYXMgbGlzdENzc0NsYXNzZXMgfSBmcm9tICdAbWF0ZXJpYWwvbGlzdC9jb25zdGFudHMnO1xuaW1wb3J0IHsgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL21lbnUtc3VyZmFjZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7IGNzc0NsYXNzZXMsIERlZmF1bHRGb2N1c1N0YXRlLCBudW1iZXJzLCBzdHJpbmdzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xudmFyIE1EQ01lbnVGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENNZW51Rm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENNZW51Rm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENNZW51Rm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5jbG9zZUFuaW1hdGlvbkVuZFRpbWVySWQgPSAwO1xuICAgICAgICBfdGhpcy5kZWZhdWx0Rm9jdXNTdGF0ZSA9IERlZmF1bHRGb2N1c1N0YXRlLkxJU1RfUk9PVDtcbiAgICAgICAgX3RoaXMuc2VsZWN0ZWRJbmRleCA9IC0xO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENNZW51Rm91bmRhdGlvbiwgXCJjc3NDbGFzc2VzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3NzQ2xhc3NlcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENNZW51Rm91bmRhdGlvbiwgXCJzdHJpbmdzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENNZW51Rm91bmRhdGlvbiwgXCJudW1iZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVycztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENNZW51Rm91bmRhdGlvbiwgXCJkZWZhdWx0QWRhcHRlclwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAc2VlIHtAbGluayBNRENNZW51QWRhcHRlcn0gZm9yIHR5cGluZyBpbmZvcm1hdGlvbiBvbiBwYXJhbWV0ZXJzIGFuZCByZXR1cm4gdHlwZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzVG9FbGVtZW50QXRJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZUNsYXNzRnJvbUVsZW1lbnRBdEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgYWRkQXR0cmlidXRlVG9FbGVtZW50QXRJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZUF0dHJpYnV0ZUZyb21FbGVtZW50QXRJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGVsZW1lbnRDb250YWluc0NsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBjbG9zZVN1cmZhY2U6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBnZXRFbGVtZW50SW5kZXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIC0xOyB9LFxuICAgICAgICAgICAgICAgIG5vdGlmeVNlbGVjdGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZ2V0TWVudUl0ZW1Db3VudDogZnVuY3Rpb24gKCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgICAgICAgICBmb2N1c0l0ZW1BdEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZm9jdXNMaXN0Um9vdDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldFNlbGVjdGVkU2libGluZ09mSXRlbUF0SW5kZXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIC0xOyB9LFxuICAgICAgICAgICAgICAgIGlzU2VsZWN0YWJsZUl0ZW1BdEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDTWVudUZvdW5kYXRpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNsb3NlQW5pbWF0aW9uRW5kVGltZXJJZCkge1xuICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRoaXMuY2xvc2VBbmltYXRpb25FbmRUaW1lcklkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmFkYXB0ZXIuY2xvc2VTdXJmYWNlKCk7XG4gICAgfTtcbiAgICBNRENNZW51Rm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlS2V5ZG93biA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmFyIGtleSA9IGV2dC5rZXksIGtleUNvZGUgPSBldnQua2V5Q29kZTtcbiAgICAgICAgdmFyIGlzVGFiID0ga2V5ID09PSAnVGFiJyB8fCBrZXlDb2RlID09PSA5O1xuICAgICAgICBpZiAoaXNUYWIpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5jbG9zZVN1cmZhY2UoLyoqIHNraXBSZXN0b3JlRm9jdXMgKi8gdHJ1ZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ01lbnVGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVJdGVtQWN0aW9uID0gZnVuY3Rpb24gKGxpc3RJdGVtKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuYWRhcHRlci5nZXRFbGVtZW50SW5kZXgobGlzdEl0ZW0pO1xuICAgICAgICBpZiAoaW5kZXggPCAwKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGFwdGVyLm5vdGlmeVNlbGVjdGVkKHsgaW5kZXg6IGluZGV4IH0pO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuY2xvc2VTdXJmYWNlKCk7XG4gICAgICAgIC8vIFdhaXQgZm9yIHRoZSBtZW51IHRvIGNsb3NlIGJlZm9yZSBhZGRpbmcvcmVtb3ZpbmcgY2xhc3NlcyB0aGF0IGFmZmVjdCBzdHlsZXMuXG4gICAgICAgIHRoaXMuY2xvc2VBbmltYXRpb25FbmRUaW1lcklkID0gc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBSZWNvbXB1dGUgdGhlIGluZGV4IGluIGNhc2UgdGhlIG1lbnUgY29udGVudHMgaGF2ZSBjaGFuZ2VkLlxuICAgICAgICAgICAgdmFyIHJlY29tcHV0ZWRJbmRleCA9IF90aGlzLmFkYXB0ZXIuZ2V0RWxlbWVudEluZGV4KGxpc3RJdGVtKTtcbiAgICAgICAgICAgIGlmIChyZWNvbXB1dGVkSW5kZXggPj0gMCAmJlxuICAgICAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIuaXNTZWxlY3RhYmxlSXRlbUF0SW5kZXgocmVjb21wdXRlZEluZGV4KSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnNldFNlbGVjdGVkSW5kZXgocmVjb21wdXRlZEluZGV4KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSwgTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLm51bWJlcnMuVFJBTlNJVElPTl9DTE9TRV9EVVJBVElPTik7XG4gICAgfTtcbiAgICBNRENNZW51Rm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlTWVudVN1cmZhY2VPcGVuZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHN3aXRjaCAodGhpcy5kZWZhdWx0Rm9jdXNTdGF0ZSkge1xuICAgICAgICAgICAgY2FzZSBEZWZhdWx0Rm9jdXNTdGF0ZS5GSVJTVF9JVEVNOlxuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5mb2N1c0l0ZW1BdEluZGV4KDApO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEZWZhdWx0Rm9jdXNTdGF0ZS5MQVNUX0lURU06XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmZvY3VzSXRlbUF0SW5kZXgodGhpcy5hZGFwdGVyLmdldE1lbnVJdGVtQ291bnQoKSAtIDEpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBEZWZhdWx0Rm9jdXNTdGF0ZS5OT05FOlxuICAgICAgICAgICAgICAgIC8vIERvIG5vdGhpbmcuXG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICBkZWZhdWx0OlxuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5mb2N1c0xpc3RSb290KCk7XG4gICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgZGVmYXVsdCBmb2N1cyBzdGF0ZSB3aGVyZSB0aGUgbWVudSBzaG91bGQgZm9jdXMgZXZlcnkgdGltZSB3aGVuIG1lbnVcbiAgICAgKiBpcyBvcGVuZWQuIEZvY3VzZXMgdGhlIGxpc3Qgcm9vdCAoYERlZmF1bHRGb2N1c1N0YXRlLkxJU1RfUk9PVGApIGVsZW1lbnQgYnlcbiAgICAgKiBkZWZhdWx0LlxuICAgICAqL1xuICAgIE1EQ01lbnVGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXREZWZhdWx0Rm9jdXNTdGF0ZSA9IGZ1bmN0aW9uIChmb2N1c1N0YXRlKSB7XG4gICAgICAgIHRoaXMuZGVmYXVsdEZvY3VzU3RhdGUgPSBmb2N1c1N0YXRlO1xuICAgIH07XG4gICAgLyoqIEByZXR1cm4gSW5kZXggb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBsaXN0IGl0ZW0gd2l0aGluIHRoZSBtZW51LiAqL1xuICAgIE1EQ01lbnVGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRTZWxlY3RlZEluZGV4ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5zZWxlY3RlZEluZGV4O1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2VsZWN0cyB0aGUgbGlzdCBpdGVtIGF0IGBpbmRleGAgd2l0aGluIHRoZSBtZW51LlxuICAgICAqIEBwYXJhbSBpbmRleCBJbmRleCBvZiBsaXN0IGl0ZW0gd2l0aGluIHRoZSBtZW51LlxuICAgICAqL1xuICAgIE1EQ01lbnVGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRTZWxlY3RlZEluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVkSW5kZXgoaW5kZXgpO1xuICAgICAgICBpZiAoIXRoaXMuYWRhcHRlci5pc1NlbGVjdGFibGVJdGVtQXRJbmRleChpbmRleCkpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTURDTWVudUZvdW5kYXRpb246IE5vIHNlbGVjdGlvbiBncm91cCBhdCBzcGVjaWZpZWQgaW5kZXguJyk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIHByZXZTZWxlY3RlZEluZGV4ID0gdGhpcy5hZGFwdGVyLmdldFNlbGVjdGVkU2libGluZ09mSXRlbUF0SW5kZXgoaW5kZXgpO1xuICAgICAgICBpZiAocHJldlNlbGVjdGVkSW5kZXggPj0gMCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUF0dHJpYnV0ZUZyb21FbGVtZW50QXRJbmRleChwcmV2U2VsZWN0ZWRJbmRleCwgc3RyaW5ncy5BUklBX0NIRUNLRURfQVRUUik7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3NGcm9tRWxlbWVudEF0SW5kZXgocHJldlNlbGVjdGVkSW5kZXgsIGNzc0NsYXNzZXMuTUVOVV9TRUxFQ1RFRF9MSVNUX0lURU0pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzc1RvRWxlbWVudEF0SW5kZXgoaW5kZXgsIGNzc0NsYXNzZXMuTUVOVV9TRUxFQ1RFRF9MSVNUX0lURU0pO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQXR0cmlidXRlVG9FbGVtZW50QXRJbmRleChpbmRleCwgc3RyaW5ncy5BUklBX0NIRUNLRURfQVRUUiwgJ3RydWUnKTtcbiAgICAgICAgdGhpcy5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbmFibGVkIHN0YXRlIHRvIGlzRW5hYmxlZCBmb3IgdGhlIG1lbnUgaXRlbSBhdCB0aGUgZ2l2ZW4gaW5kZXguXG4gICAgICogQHBhcmFtIGluZGV4IEluZGV4IG9mIHRoZSBtZW51IGl0ZW1cbiAgICAgKiBAcGFyYW0gaXNFbmFibGVkIFRoZSBkZXNpcmVkIGVuYWJsZWQgc3RhdGUgb2YgdGhlIG1lbnUgaXRlbS5cbiAgICAgKi9cbiAgICBNRENNZW51Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0RW5hYmxlZCA9IGZ1bmN0aW9uIChpbmRleCwgaXNFbmFibGVkKSB7XG4gICAgICAgIHRoaXMudmFsaWRhdGVkSW5kZXgoaW5kZXgpO1xuICAgICAgICBpZiAoaXNFbmFibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3NGcm9tRWxlbWVudEF0SW5kZXgoaW5kZXgsIGxpc3RDc3NDbGFzc2VzLkxJU1RfSVRFTV9ESVNBQkxFRF9DTEFTUyk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQXR0cmlidXRlVG9FbGVtZW50QXRJbmRleChpbmRleCwgc3RyaW5ncy5BUklBX0RJU0FCTEVEX0FUVFIsICdmYWxzZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzVG9FbGVtZW50QXRJbmRleChpbmRleCwgbGlzdENzc0NsYXNzZXMuTElTVF9JVEVNX0RJU0FCTEVEX0NMQVNTKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRBdHRyaWJ1dGVUb0VsZW1lbnRBdEluZGV4KGluZGV4LCBzdHJpbmdzLkFSSUFfRElTQUJMRURfQVRUUiwgJ3RydWUnKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDTWVudUZvdW5kYXRpb24ucHJvdG90eXBlLnZhbGlkYXRlZEluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBtZW51U2l6ZSA9IHRoaXMuYWRhcHRlci5nZXRNZW51SXRlbUNvdW50KCk7XG4gICAgICAgIHZhciBpc0luZGV4SW5SYW5nZSA9IGluZGV4ID49IDAgJiYgaW5kZXggPCBtZW51U2l6ZTtcbiAgICAgICAgaWYgKCFpc0luZGV4SW5SYW5nZSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNRENNZW51Rm91bmRhdGlvbjogTm8gbGlzdCBpdGVtIGF0IHNwZWNpZmllZCBpbmRleC4nKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ01lbnVGb3VuZGF0aW9uO1xufShNRENGb3VuZGF0aW9uKSk7XG5leHBvcnQgeyBNRENNZW51Rm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ01lbnVGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDQ29tcG9uZW50IH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IGNsb3Nlc3QgfSBmcm9tICdAbWF0ZXJpYWwvZG9tL3BvbnlmaWxsJztcbmltcG9ydCB7IE1EQ0xpc3QgfSBmcm9tICdAbWF0ZXJpYWwvbGlzdC9jb21wb25lbnQnO1xuaW1wb3J0IHsgbnVtYmVycyBhcyBsaXN0Q29uc3RhbnRzIH0gZnJvbSAnQG1hdGVyaWFsL2xpc3QvY29uc3RhbnRzJztcbmltcG9ydCB7IE1EQ0xpc3RGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2xpc3QvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBNRENNZW51U3VyZmFjZSB9IGZyb20gJ0BtYXRlcmlhbC9tZW51LXN1cmZhY2UvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9tZW51LXN1cmZhY2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBjc3NDbGFzc2VzLCBzdHJpbmdzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgTURDTWVudUZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xudmFyIE1EQ01lbnUgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ01lbnUsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDTWVudSgpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBNRENNZW51LmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENNZW51KHJvb3QpO1xuICAgIH07XG4gICAgTURDTWVudS5wcm90b3R5cGUuaW5pdGlhbGl6ZSA9IGZ1bmN0aW9uIChtZW51U3VyZmFjZUZhY3RvcnksIGxpc3RGYWN0b3J5KSB7XG4gICAgICAgIGlmIChtZW51U3VyZmFjZUZhY3RvcnkgPT09IHZvaWQgMCkgeyBtZW51U3VyZmFjZUZhY3RvcnkgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIG5ldyBNRENNZW51U3VyZmFjZShlbCk7IH07IH1cbiAgICAgICAgaWYgKGxpc3RGYWN0b3J5ID09PSB2b2lkIDApIHsgbGlzdEZhY3RvcnkgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIG5ldyBNRENMaXN0KGVsKTsgfTsgfVxuICAgICAgICB0aGlzLm1lbnVTdXJmYWNlRmFjdG9yeSA9IG1lbnVTdXJmYWNlRmFjdG9yeTtcbiAgICAgICAgdGhpcy5saXN0RmFjdG9yeSA9IGxpc3RGYWN0b3J5O1xuICAgIH07XG4gICAgTURDTWVudS5wcm90b3R5cGUuaW5pdGlhbFN5bmNXaXRoRE9NID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB0aGlzLm1lbnVTdXJmYWNlID0gdGhpcy5tZW51U3VyZmFjZUZhY3RvcnkodGhpcy5yb290KTtcbiAgICAgICAgdmFyIGxpc3QgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzdHJpbmdzLkxJU1RfU0VMRUNUT1IpO1xuICAgICAgICBpZiAobGlzdCkge1xuICAgICAgICAgICAgdGhpcy5saXN0ID0gdGhpcy5saXN0RmFjdG9yeShsaXN0KTtcbiAgICAgICAgICAgIHRoaXMubGlzdC53cmFwRm9jdXMgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5saXN0ID0gbnVsbDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZUtleWRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICBfdGhpcy5mb3VuZGF0aW9uLmhhbmRsZUtleWRvd24oZXZ0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVJdGVtQWN0aW9uID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgX3RoaXMuZm91bmRhdGlvbi5oYW5kbGVJdGVtQWN0aW9uKF90aGlzLml0ZW1zW2V2dC5kZXRhaWwuaW5kZXhdKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVNZW51U3VyZmFjZU9wZW5lZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmZvdW5kYXRpb24uaGFuZGxlTWVudVN1cmZhY2VPcGVuZWQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5tZW51U3VyZmFjZS5saXN0ZW4oTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLnN0cmluZ3MuT1BFTkVEX0VWRU5ULCB0aGlzLmhhbmRsZU1lbnVTdXJmYWNlT3BlbmVkKTtcbiAgICAgICAgdGhpcy5saXN0ZW4oJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWRvd24pO1xuICAgICAgICB0aGlzLmxpc3RlbihNRENMaXN0Rm91bmRhdGlvbi5zdHJpbmdzLkFDVElPTl9FVkVOVCwgdGhpcy5oYW5kbGVJdGVtQWN0aW9uKTtcbiAgICB9O1xuICAgIE1EQ01lbnUucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmxpc3QpIHtcbiAgICAgICAgICAgIHRoaXMubGlzdC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5tZW51U3VyZmFjZS5kZXN0cm95KCk7XG4gICAgICAgIHRoaXMubWVudVN1cmZhY2UudW5saXN0ZW4oTURDTWVudVN1cmZhY2VGb3VuZGF0aW9uLnN0cmluZ3MuT1BFTkVEX0VWRU5ULCB0aGlzLmhhbmRsZU1lbnVTdXJmYWNlT3BlbmVkKTtcbiAgICAgICAgdGhpcy51bmxpc3Rlbigna2V5ZG93bicsIHRoaXMuaGFuZGxlS2V5ZG93bik7XG4gICAgICAgIHRoaXMudW5saXN0ZW4oTURDTGlzdEZvdW5kYXRpb24uc3RyaW5ncy5BQ1RJT05fRVZFTlQsIHRoaXMuaGFuZGxlSXRlbUFjdGlvbik7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ01lbnUucHJvdG90eXBlLCBcIm9wZW5cIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLm1lbnVTdXJmYWNlLmlzT3BlbigpO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5tZW51U3VyZmFjZS5vcGVuKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLm1lbnVTdXJmYWNlLmNsb3NlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTWVudS5wcm90b3R5cGUsIFwid3JhcEZvY3VzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5saXN0ID8gdGhpcy5saXN0LndyYXBGb2N1cyA6IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGlzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdC53cmFwRm9jdXMgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENNZW51LnByb3RvdHlwZSwgXCJoYXNUeXBlYWhlYWRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB3aGV0aGVyIHRoZSBtZW51IGhhcyB0eXBlYWhlYWQgZnVuY3Rpb25hbGl0eS5cbiAgICAgICAgICogQHBhcmFtIHZhbHVlIFdoZXRoZXIgdHlwZWFoZWFkIGlzIGVuYWJsZWQuXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGlzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdC5oYXNUeXBlYWhlYWQgPSB2YWx1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENNZW51LnByb3RvdHlwZSwgXCJ0eXBlYWhlYWRJblByb2dyZXNzXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEByZXR1cm4gV2hldGhlciB0eXBlYWhlYWQgbG9naWMgaXMgY3VycmVudGx5IG1hdGNoaW5nIHNvbWUgdXNlciBwcmVmaXguXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QgPyB0aGlzLmxpc3QudHlwZWFoZWFkSW5Qcm9ncmVzcyA6IGZhbHNlO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogR2l2ZW4gdGhlIG5leHQgZGVzaXJlZCBjaGFyYWN0ZXIgZnJvbSB0aGUgdXNlciwgYWRkcyBpdCB0byB0aGUgdHlwZWFoZWFkXG4gICAgICogYnVmZmVyLiBUaGVuLCBhdHRlbXB0cyB0byBmaW5kIHRoZSBuZXh0IG9wdGlvbiBtYXRjaGluZyB0aGUgYnVmZmVyLiBXcmFwc1xuICAgICAqIGFyb3VuZCBpZiBhdCB0aGUgZW5kIG9mIG9wdGlvbnMuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbmV4dENoYXIgVGhlIG5leHQgY2hhcmFjdGVyIHRvIGFkZCB0byB0aGUgcHJlZml4IGJ1ZmZlci5cbiAgICAgKiBAcGFyYW0gc3RhcnRpbmdJbmRleCBUaGUgaW5kZXggZnJvbSB3aGljaCB0byBzdGFydCBtYXRjaGluZy4gT25seSByZWxldmFudFxuICAgICAqICAgICB3aGVuIHN0YXJ0aW5nIGEgbmV3IG1hdGNoIHNlcXVlbmNlLiBUbyBzdGFydCBhIG5ldyBtYXRjaCBzZXF1ZW5jZSxcbiAgICAgKiAgICAgY2xlYXIgdGhlIGJ1ZmZlciB1c2luZyBgY2xlYXJUeXBlYWhlYWRCdWZmZXJgLCBvciB3YWl0IGZvciB0aGUgYnVmZmVyXG4gICAgICogICAgIHRvIGNsZWFyIGFmdGVyIGEgc2V0IGludGVydmFsIGRlZmluZWQgaW4gbGlzdCBmb3VuZGF0aW9uLiBEZWZhdWx0cyB0b1xuICAgICAqICAgICB0aGUgY3VycmVudGx5IGZvY3VzZWQgaW5kZXguXG4gICAgICogQHJldHVybiBUaGUgaW5kZXggb2YgdGhlIG1hdGNoZWQgaXRlbSwgb3IgLTEgaWYgbm8gbWF0Y2guXG4gICAgICovXG4gICAgTURDTWVudS5wcm90b3R5cGUudHlwZWFoZWFkTWF0Y2hJdGVtID0gZnVuY3Rpb24gKG5leHRDaGFyLCBzdGFydGluZ0luZGV4KSB7XG4gICAgICAgIGlmICh0aGlzLmxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QudHlwZWFoZWFkTWF0Y2hJdGVtKG5leHRDaGFyLCBzdGFydGluZ0luZGV4KTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gLTE7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBMYXlvdXQgdGhlIHVuZGVybHlpbmcgbGlzdCBlbGVtZW50IGluIHRoZSBjYXNlIG9mIGFueSBkeW5hbWljIHVwZGF0ZXNcbiAgICAgKiB0byBpdHMgc3RydWN0dXJlLlxuICAgICAqL1xuICAgIE1EQ01lbnUucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMubGlzdCkge1xuICAgICAgICAgICAgdGhpcy5saXN0LmxheW91dCgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTWVudS5wcm90b3R5cGUsIFwiaXRlbXNcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0dXJuIHRoZSBpdGVtcyB3aXRoaW4gdGhlIG1lbnUuIE5vdGUgdGhhdCB0aGlzIG9ubHkgY29udGFpbnMgdGhlIHNldCBvZiBlbGVtZW50cyB3aXRoaW5cbiAgICAgICAgICogdGhlIGl0ZW1zIGNvbnRhaW5lciB0aGF0IGFyZSBwcm9wZXIgbGlzdCBpdGVtcywgYW5kIG5vdCBzdXBwbGVtZW50YWwgLyBwcmVzZW50YXRpb25hbCBET01cbiAgICAgICAgICogZWxlbWVudHMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QgPyB0aGlzLmxpc3QubGlzdEVsZW1lbnRzIDogW107XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTWVudS5wcm90b3R5cGUsIFwic2luZ2xlU2VsZWN0aW9uXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFR1cm5zIG9uL29mZiB0aGUgdW5kZXJseWluZyBsaXN0J3Mgc2luZ2xlIHNlbGVjdGlvbiBtb2RlLiBVc2VkIG1haW5seVxuICAgICAgICAgKiBieSBzZWxlY3QgbWVudS5cbiAgICAgICAgICpcbiAgICAgICAgICogQHBhcmFtIHNpbmdsZVNlbGVjdGlvbiBXaGV0aGVyIHRvIGVuYWJsZSBzaW5nbGUgc2VsZWN0aW9uIG1vZGUuXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzaW5nbGVTZWxlY3Rpb24pIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmxpc3QpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmxpc3Quc2luZ2xlU2VsZWN0aW9uID0gc2luZ2xlU2VsZWN0aW9uO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ01lbnUucHJvdG90eXBlLCBcInNlbGVjdGVkSW5kZXhcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogUmV0cmlldmVzIHRoZSBzZWxlY3RlZCBpbmRleC4gT25seSBhcHBsaWNhYmxlIHRvIHNlbGVjdCBtZW51cy5cbiAgICAgICAgICogQHJldHVybiBUaGUgc2VsZWN0ZWQgaW5kZXgsIHdoaWNoIGlzIGEgbnVtYmVyIGZvciBzaW5nbGUgc2VsZWN0aW9uIGFuZFxuICAgICAgICAgKiAgICAgcmFkaW8gbGlzdHMsIGFuZCBhbiBhcnJheSBvZiBudW1iZXJzIGZvciBjaGVja2JveCBsaXN0cy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMubGlzdCA/IHRoaXMubGlzdC5zZWxlY3RlZEluZGV4IDogbGlzdENvbnN0YW50cy5VTlNFVF9JTkRFWDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHNlbGVjdGVkIGluZGV4IG9mIHRoZSBsaXN0LiBPbmx5IGFwcGxpY2FibGUgdG8gc2VsZWN0IG1lbnVzLlxuICAgICAgICAgKiBAcGFyYW0gaW5kZXggVGhlIHNlbGVjdGVkIGluZGV4LCB3aGljaCBpcyBhIG51bWJlciBmb3Igc2luZ2xlIHNlbGVjdGlvbiBhbmRcbiAgICAgICAgICogICAgIHJhZGlvIGxpc3RzLCBhbmQgYW4gYXJyYXkgb2YgbnVtYmVycyBmb3IgY2hlY2tib3ggbGlzdHMuXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgaWYgKHRoaXMubGlzdCkge1xuICAgICAgICAgICAgICAgIHRoaXMubGlzdC5zZWxlY3RlZEluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDTWVudS5wcm90b3R5cGUsIFwicXVpY2tPcGVuXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAocXVpY2tPcGVuKSB7XG4gICAgICAgICAgICB0aGlzLm1lbnVTdXJmYWNlLnF1aWNrT3BlbiA9IHF1aWNrT3BlbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIC8qKlxuICAgICAqIFNldHMgZGVmYXVsdCBmb2N1cyBzdGF0ZSB3aGVyZSB0aGUgbWVudSBzaG91bGQgZm9jdXMgZXZlcnkgdGltZSB3aGVuIG1lbnVcbiAgICAgKiBpcyBvcGVuZWQuIEZvY3VzZXMgdGhlIGxpc3Qgcm9vdCAoYERlZmF1bHRGb2N1c1N0YXRlLkxJU1RfUk9PVGApIGVsZW1lbnQgYnlcbiAgICAgKiBkZWZhdWx0LlxuICAgICAqIEBwYXJhbSBmb2N1c1N0YXRlIERlZmF1bHQgZm9jdXMgc3RhdGUuXG4gICAgICovXG4gICAgTURDTWVudS5wcm90b3R5cGUuc2V0RGVmYXVsdEZvY3VzU3RhdGUgPSBmdW5jdGlvbiAoZm9jdXNTdGF0ZSkge1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0RGVmYXVsdEZvY3VzU3RhdGUoZm9jdXNTdGF0ZSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gY29ybmVyIERlZmF1bHQgYW5jaG9yIGNvcm5lciBhbGlnbm1lbnQgb2YgdG9wLWxlZnQgbWVudSBjb3JuZXIuXG4gICAgICovXG4gICAgTURDTWVudS5wcm90b3R5cGUuc2V0QW5jaG9yQ29ybmVyID0gZnVuY3Rpb24gKGNvcm5lcikge1xuICAgICAgICB0aGlzLm1lbnVTdXJmYWNlLnNldEFuY2hvckNvcm5lcihjb3JuZXIpO1xuICAgIH07XG4gICAgTURDTWVudS5wcm90b3R5cGUuc2V0QW5jaG9yTWFyZ2luID0gZnVuY3Rpb24gKG1hcmdpbikge1xuICAgICAgICB0aGlzLm1lbnVTdXJmYWNlLnNldEFuY2hvck1hcmdpbihtYXJnaW4pO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgbGlzdCBpdGVtIGFzIHRoZSBzZWxlY3RlZCByb3cgYXQgdGhlIHNwZWNpZmllZCBpbmRleC5cbiAgICAgKiBAcGFyYW0gaW5kZXggSW5kZXggb2YgbGlzdCBpdGVtIHdpdGhpbiBtZW51LlxuICAgICAqL1xuICAgIE1EQ01lbnUucHJvdG90eXBlLnNldFNlbGVjdGVkSW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFNlbGVjdGVkSW5kZXgoaW5kZXgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgZW5hYmxlZCBzdGF0ZSB0byBpc0VuYWJsZWQgZm9yIHRoZSBtZW51IGl0ZW0gYXQgdGhlIGdpdmVuIGluZGV4LlxuICAgICAqIEBwYXJhbSBpbmRleCBJbmRleCBvZiB0aGUgbWVudSBpdGVtXG4gICAgICogQHBhcmFtIGlzRW5hYmxlZCBUaGUgZGVzaXJlZCBlbmFibGVkIHN0YXRlIG9mIHRoZSBtZW51IGl0ZW0uXG4gICAgICovXG4gICAgTURDTWVudS5wcm90b3R5cGUuc2V0RW5hYmxlZCA9IGZ1bmN0aW9uIChpbmRleCwgaXNFbmFibGVkKSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRFbmFibGVkKGluZGV4LCBpc0VuYWJsZWQpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiBUaGUgaXRlbSB3aXRoaW4gdGhlIG1lbnUgYXQgdGhlIGluZGV4IHNwZWNpZmllZC5cbiAgICAgKi9cbiAgICBNRENNZW51LnByb3RvdHlwZS5nZXRPcHRpb25CeUluZGV4ID0gZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgIHZhciBpdGVtcyA9IHRoaXMuaXRlbXM7XG4gICAgICAgIGlmIChpbmRleCA8IGl0ZW1zLmxlbmd0aCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaXRlbXNbaW5kZXhdO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBpbmRleCBBIG1lbnUgaXRlbSdzIGluZGV4LlxuICAgICAqIEByZXR1cm4gVGhlIHByaW1hcnkgdGV4dCB3aXRoaW4gdGhlIG1lbnUgYXQgdGhlIGluZGV4IHNwZWNpZmllZC5cbiAgICAgKi9cbiAgICBNRENNZW51LnByb3RvdHlwZS5nZXRQcmltYXJ5VGV4dEF0SW5kZXggPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdmFyIGl0ZW0gPSB0aGlzLmdldE9wdGlvbkJ5SW5kZXgoaW5kZXgpO1xuICAgICAgICBpZiAoaXRlbSAmJiB0aGlzLmxpc3QpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmxpc3QuZ2V0UHJpbWFyeVRleHQoaXRlbSkgfHwgJyc7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuICcnO1xuICAgIH07XG4gICAgTURDTWVudS5wcm90b3R5cGUuc2V0Rml4ZWRQb3NpdGlvbiA9IGZ1bmN0aW9uIChpc0ZpeGVkKSB7XG4gICAgICAgIHRoaXMubWVudVN1cmZhY2Uuc2V0Rml4ZWRQb3NpdGlvbihpc0ZpeGVkKTtcbiAgICB9O1xuICAgIE1EQ01lbnUucHJvdG90eXBlLnNldElzSG9pc3RlZCA9IGZ1bmN0aW9uIChpc0hvaXN0ZWQpIHtcbiAgICAgICAgdGhpcy5tZW51U3VyZmFjZS5zZXRJc0hvaXN0ZWQoaXNIb2lzdGVkKTtcbiAgICB9O1xuICAgIE1EQ01lbnUucHJvdG90eXBlLnNldEFic29sdXRlUG9zaXRpb24gPSBmdW5jdGlvbiAoeCwgeSkge1xuICAgICAgICB0aGlzLm1lbnVTdXJmYWNlLnNldEFic29sdXRlUG9zaXRpb24oeCwgeSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBlbGVtZW50IHRoYXQgdGhlIG1lbnUtc3VyZmFjZSBpcyBhbmNob3JlZCB0by5cbiAgICAgKi9cbiAgICBNRENNZW51LnByb3RvdHlwZS5zZXRBbmNob3JFbGVtZW50ID0gZnVuY3Rpb24gKGVsZW1lbnQpIHtcbiAgICAgICAgdGhpcy5tZW51U3VyZmFjZS5hbmNob3JFbGVtZW50ID0gZWxlbWVudDtcbiAgICB9O1xuICAgIE1EQ01lbnUucHJvdG90eXBlLmdldERlZmF1bHRGb3VuZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBETyBOT1QgSU5MSU5FIHRoaXMgdmFyaWFibGUuIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBmb3VuZGF0aW9ucyB0YWtlIGEgUGFydGlhbDxNRENGb29BZGFwdGVyPi5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHdlIGRvbid0IGFjY2lkZW50YWxseSBvbWl0IGFueSBtZXRob2RzLCB3ZSBuZWVkIGEgc2VwYXJhdGUsIHN0cm9uZ2x5IHR5cGVkIGFkYXB0ZXIgdmFyaWFibGUuXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgIHZhciBhZGFwdGVyID0ge1xuICAgICAgICAgICAgYWRkQ2xhc3NUb0VsZW1lbnRBdEluZGV4OiBmdW5jdGlvbiAoaW5kZXgsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gX3RoaXMuaXRlbXM7XG4gICAgICAgICAgICAgICAgbGlzdFtpbmRleF0uY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzRnJvbUVsZW1lbnRBdEluZGV4OiBmdW5jdGlvbiAoaW5kZXgsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHZhciBsaXN0ID0gX3RoaXMuaXRlbXM7XG4gICAgICAgICAgICAgICAgbGlzdFtpbmRleF0uY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZEF0dHJpYnV0ZVRvRWxlbWVudEF0SW5kZXg6IGZ1bmN0aW9uIChpbmRleCwgYXR0ciwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IF90aGlzLml0ZW1zO1xuICAgICAgICAgICAgICAgIGxpc3RbaW5kZXhdLnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlQXR0cmlidXRlRnJvbUVsZW1lbnRBdEluZGV4OiBmdW5jdGlvbiAoaW5kZXgsIGF0dHIpIHtcbiAgICAgICAgICAgICAgICB2YXIgbGlzdCA9IF90aGlzLml0ZW1zO1xuICAgICAgICAgICAgICAgIGxpc3RbaW5kZXhdLnJlbW92ZUF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBlbGVtZW50Q29udGFpbnNDbGFzczogZnVuY3Rpb24gKGVsZW1lbnQsIGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIHJldHVybiBlbGVtZW50LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsb3NlU3VyZmFjZTogZnVuY3Rpb24gKHNraXBSZXN0b3JlRm9jdXMpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5tZW51U3VyZmFjZS5jbG9zZShza2lwUmVzdG9yZUZvY3VzKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRFbGVtZW50SW5kZXg6IGZ1bmN0aW9uIChlbGVtZW50KSB7IHJldHVybiBfdGhpcy5pdGVtcy5pbmRleE9mKGVsZW1lbnQpOyB9LFxuICAgICAgICAgICAgbm90aWZ5U2VsZWN0ZWQ6IGZ1bmN0aW9uIChldnREYXRhKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChzdHJpbmdzLlNFTEVDVEVEX0VWRU5ULCB7XG4gICAgICAgICAgICAgICAgICAgIGluZGV4OiBldnREYXRhLmluZGV4LFxuICAgICAgICAgICAgICAgICAgICBpdGVtOiBfdGhpcy5pdGVtc1tldnREYXRhLmluZGV4XSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRNZW51SXRlbUNvdW50OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5pdGVtcy5sZW5ndGg7IH0sXG4gICAgICAgICAgICBmb2N1c0l0ZW1BdEluZGV4OiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pdGVtc1tpbmRleF0uZm9jdXMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBmb2N1c0xpc3RSb290OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuTElTVF9TRUxFQ1RPUikuZm9jdXMoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlbGVjdGFibGVJdGVtQXRJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuICEhY2xvc2VzdChfdGhpcy5pdGVtc1tpbmRleF0sIFwiLlwiICsgY3NzQ2xhc3Nlcy5NRU5VX1NFTEVDVElPTl9HUk9VUCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0U2VsZWN0ZWRTaWJsaW5nT2ZJdGVtQXRJbmRleDogZnVuY3Rpb24gKGluZGV4KSB7XG4gICAgICAgICAgICAgICAgdmFyIHNlbGVjdGlvbkdyb3VwRWwgPSBjbG9zZXN0KF90aGlzLml0ZW1zW2luZGV4XSwgXCIuXCIgKyBjc3NDbGFzc2VzLk1FTlVfU0VMRUNUSU9OX0dST1VQKTtcbiAgICAgICAgICAgICAgICB2YXIgc2VsZWN0ZWRJdGVtRWwgPSBzZWxlY3Rpb25Hcm91cEVsLnF1ZXJ5U2VsZWN0b3IoXCIuXCIgKyBjc3NDbGFzc2VzLk1FTlVfU0VMRUNURURfTElTVF9JVEVNKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gc2VsZWN0ZWRJdGVtRWwgPyBfdGhpcy5pdGVtcy5pbmRleE9mKHNlbGVjdGVkSXRlbUVsKSA6IC0xO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgcmV0dXJuIG5ldyBNRENNZW51Rm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENNZW51O1xufShNRENDb21wb25lbnQpKTtcbmV4cG9ydCB7IE1EQ01lbnUgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBjc3NDbGFzc2VzID0ge1xuICAgIEFDVElWQVRFRDogJ21kYy1zZWxlY3QtLWFjdGl2YXRlZCcsXG4gICAgRElTQUJMRUQ6ICdtZGMtc2VsZWN0LS1kaXNhYmxlZCcsXG4gICAgRk9DVVNFRDogJ21kYy1zZWxlY3QtLWZvY3VzZWQnLFxuICAgIElOVkFMSUQ6ICdtZGMtc2VsZWN0LS1pbnZhbGlkJyxcbiAgICBNRU5VX0lOVkFMSUQ6ICdtZGMtc2VsZWN0X19tZW51LS1pbnZhbGlkJyxcbiAgICBPVVRMSU5FRDogJ21kYy1zZWxlY3QtLW91dGxpbmVkJyxcbiAgICBSRVFVSVJFRDogJ21kYy1zZWxlY3QtLXJlcXVpcmVkJyxcbiAgICBST09UOiAnbWRjLXNlbGVjdCcsXG4gICAgV0lUSF9MRUFESU5HX0lDT046ICdtZGMtc2VsZWN0LS13aXRoLWxlYWRpbmctaWNvbicsXG59O1xudmFyIHN0cmluZ3MgPSB7XG4gICAgQVJJQV9DT05UUk9MUzogJ2FyaWEtY29udHJvbHMnLFxuICAgIEFSSUFfREVTQ1JJQkVEQlk6ICdhcmlhLWRlc2NyaWJlZGJ5JyxcbiAgICBBUklBX1NFTEVDVEVEX0FUVFI6ICdhcmlhLXNlbGVjdGVkJyxcbiAgICBDSEFOR0VfRVZFTlQ6ICdNRENTZWxlY3Q6Y2hhbmdlJyxcbiAgICBISURERU5fSU5QVVRfU0VMRUNUT1I6ICdpbnB1dFt0eXBlPVwiaGlkZGVuXCJdJyxcbiAgICBMQUJFTF9TRUxFQ1RPUjogJy5tZGMtZmxvYXRpbmctbGFiZWwnLFxuICAgIExFQURJTkdfSUNPTl9TRUxFQ1RPUjogJy5tZGMtc2VsZWN0X19pY29uJyxcbiAgICBMSU5FX1JJUFBMRV9TRUxFQ1RPUjogJy5tZGMtbGluZS1yaXBwbGUnLFxuICAgIE1FTlVfU0VMRUNUT1I6ICcubWRjLXNlbGVjdF9fbWVudScsXG4gICAgT1VUTElORV9TRUxFQ1RPUjogJy5tZGMtbm90Y2hlZC1vdXRsaW5lJyxcbiAgICBTRUxFQ1RFRF9URVhUX1NFTEVDVE9SOiAnLm1kYy1zZWxlY3RfX3NlbGVjdGVkLXRleHQnLFxuICAgIFNFTEVDVF9BTkNIT1JfU0VMRUNUT1I6ICcubWRjLXNlbGVjdF9fYW5jaG9yJyxcbiAgICBWQUxVRV9BVFRSOiAnZGF0YS12YWx1ZScsXG59O1xudmFyIG51bWJlcnMgPSB7XG4gICAgTEFCRUxfU0NBTEU6IDAuNzUsXG4gICAgVU5TRVRfSU5ERVg6IC0xLFxuICAgIENMSUNLX0RFQk9VTkNFX1RJTUVPVVRfTVM6IDMzMCxcbn07XG5leHBvcnQgeyBjc3NDbGFzc2VzLCBzdHJpbmdzLCBudW1iZXJzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBLRVksIG5vcm1hbGl6ZUtleSB9IGZyb20gJ0BtYXRlcmlhbC9kb20va2V5Ym9hcmQnO1xuaW1wb3J0IHsgQ29ybmVyIH0gZnJvbSAnQG1hdGVyaWFsL21lbnUtc3VyZmFjZS9jb25zdGFudHMnO1xuaW1wb3J0IHsgY3NzQ2xhc3NlcywgbnVtYmVycywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBNRENTZWxlY3RGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENTZWxlY3RGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBvcHRpb25hbCBhcmd1bWVudCBpcyBub3QgYSBicmFuY2ggc3RhdGVtZW50ICovXG4gICAgLyoqXG4gICAgICogQHBhcmFtIGFkYXB0ZXJcbiAgICAgKiBAcGFyYW0gZm91bmRhdGlvbk1hcCBNYXAgZnJvbSBzdWJjb21wb25lbnQgbmFtZXMgdG8gdGhlaXIgc3ViZm91bmRhdGlvbnMuXG4gICAgICovXG4gICAgZnVuY3Rpb24gTURDU2VsZWN0Rm91bmRhdGlvbihhZGFwdGVyLCBmb3VuZGF0aW9uTWFwKSB7XG4gICAgICAgIGlmIChmb3VuZGF0aW9uTWFwID09PSB2b2lkIDApIHsgZm91bmRhdGlvbk1hcCA9IHt9OyB9XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENTZWxlY3RGb3VuZGF0aW9uLmRlZmF1bHRBZGFwdGVyKSwgYWRhcHRlcikpIHx8IHRoaXM7XG4gICAgICAgIC8vIERpc2FibGVkIHN0YXRlXG4gICAgICAgIF90aGlzLmRpc2FibGVkID0gZmFsc2U7XG4gICAgICAgIC8vIGlzTWVudU9wZW4gaXMgdXNlZCB0byB0cmFjayB0aGUgc3RhdGUgb2YgdGhlIG1lbnUgYnkgbGlzdGVuaW5nIHRvIHRoZVxuICAgICAgICAvLyBNRENNZW51U3VyZmFjZTpjbG9zZWQgZXZlbnQgRm9yIHJlZmVyZW5jZSwgbWVudS5vcGVuIHdpbGwgcmV0dXJuIGZhbHNlIGlmXG4gICAgICAgIC8vIHRoZSBtZW51IGlzIHN0aWxsIGNsb3NpbmcsIGJ1dCBpc01lbnVPcGVuIHJldHVybnMgZmFsc2Ugb25seSBhZnRlciB0aGUgbWVudVxuICAgICAgICAvLyBoYXMgY2xvc2VkXG4gICAgICAgIF90aGlzLmlzTWVudU9wZW4gPSBmYWxzZTtcbiAgICAgICAgLy8gQnkgZGVmYXVsdCwgc2VsZWN0IGlzIGludmFsaWQgaWYgaXQgaXMgcmVxdWlyZWQgYnV0IG5vIHZhbHVlIGlzIHNlbGVjdGVkLlxuICAgICAgICBfdGhpcy51c2VEZWZhdWx0VmFsaWRhdGlvbiA9IHRydWU7XG4gICAgICAgIF90aGlzLmN1c3RvbVZhbGlkaXR5ID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMubGFzdFNlbGVjdGVkSW5kZXggPSBudW1iZXJzLlVOU0VUX0lOREVYO1xuICAgICAgICBfdGhpcy5jbGlja0RlYm91bmNlVGltZW91dCA9IDA7XG4gICAgICAgIF90aGlzLnJlY2VudGx5Q2xpY2tlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5sZWFkaW5nSWNvbiA9IGZvdW5kYXRpb25NYXAubGVhZGluZ0ljb247XG4gICAgICAgIF90aGlzLmhlbHBlclRleHQgPSBmb3VuZGF0aW9uTWFwLmhlbHBlclRleHQ7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1NlbGVjdEZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDU2VsZWN0Rm91bmRhdGlvbiwgXCJudW1iZXJzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gbnVtYmVycztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENTZWxlY3RGb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1NlbGVjdEZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBNRENTZWxlY3RBZGFwdGVyfSBmb3IgdHlwaW5nIGluZm9ybWF0aW9uIG9uIHBhcmFtZXRlcnMgYW5kIHJldHVybiB0eXBlcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmF0ZUJvdHRvbUxpbmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBkZWFjdGl2YXRlQm90dG9tTGluZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldFNlbGVjdGVkSW5kZXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIC0xOyB9LFxuICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkSW5kZXg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBoYXNMYWJlbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgZmxvYXRMYWJlbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldExhYmVsV2lkdGg6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH0sXG4gICAgICAgICAgICAgICAgc2V0TGFiZWxSZXF1aXJlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGhhc091dGxpbmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGZhbHNlOyB9LFxuICAgICAgICAgICAgICAgIG5vdGNoT3V0bGluZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGNsb3NlT3V0bGluZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNldFJpcHBsZUNlbnRlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIG5vdGlmeUNoYW5nZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNldFNlbGVjdGVkVGV4dDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGlzU2VsZWN0QW5jaG9yRm9jdXNlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgZ2V0U2VsZWN0QW5jaG9yQXR0cjogZnVuY3Rpb24gKCkgeyByZXR1cm4gJyc7IH0sXG4gICAgICAgICAgICAgICAgc2V0U2VsZWN0QW5jaG9yQXR0cjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZVNlbGVjdEFuY2hvckF0dHI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBhZGRNZW51Q2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVNZW51Q2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBvcGVuTWVudTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGNsb3NlTWVudTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldEFuY2hvckVsZW1lbnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgICAgICAgICAgc2V0TWVudUFuY2hvckVsZW1lbnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBzZXRNZW51QW5jaG9yQ29ybmVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgc2V0TWVudVdyYXBGb2N1czogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGZvY3VzTWVudUl0ZW1BdEluZGV4OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZ2V0TWVudUl0ZW1Db3VudDogZnVuY3Rpb24gKCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgICAgICAgICBnZXRNZW51SXRlbVZhbHVlczogZnVuY3Rpb24gKCkgeyByZXR1cm4gW107IH0sXG4gICAgICAgICAgICAgICAgZ2V0TWVudUl0ZW1UZXh0QXRJbmRleDogZnVuY3Rpb24gKCkgeyByZXR1cm4gJyc7IH0sXG4gICAgICAgICAgICAgICAgaXNUeXBlYWhlYWRJblByb2dyZXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICB0eXBlYWhlYWRNYXRjaEl0ZW06IGZ1bmN0aW9uICgpIHsgcmV0dXJuIC0xOyB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKiogUmV0dXJucyB0aGUgaW5kZXggb2YgdGhlIGN1cnJlbnRseSBzZWxlY3RlZCBtZW51IGl0ZW0sIG9yIC0xIGlmIG5vbmUuICovXG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0U2VsZWN0ZWRJbmRleCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRhcHRlci5nZXRTZWxlY3RlZEluZGV4KCk7XG4gICAgfTtcbiAgICBNRENTZWxlY3RGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRTZWxlY3RlZEluZGV4ID0gZnVuY3Rpb24gKGluZGV4LCBjbG9zZU1lbnUsIHNraXBOb3RpZnkpIHtcbiAgICAgICAgaWYgKGNsb3NlTWVudSA9PT0gdm9pZCAwKSB7IGNsb3NlTWVudSA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChza2lwTm90aWZ5ID09PSB2b2lkIDApIHsgc2tpcE5vdGlmeSA9IGZhbHNlOyB9XG4gICAgICAgIGlmIChpbmRleCA+PSB0aGlzLmFkYXB0ZXIuZ2V0TWVudUl0ZW1Db3VudCgpKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGluZGV4ID09PSBudW1iZXJzLlVOU0VUX0lOREVYKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0U2VsZWN0ZWRUZXh0KCcnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRTZWxlY3RlZFRleHQodGhpcy5hZGFwdGVyLmdldE1lbnVJdGVtVGV4dEF0SW5kZXgoaW5kZXgpLnRyaW0oKSk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldFNlbGVjdGVkSW5kZXgoaW5kZXgpO1xuICAgICAgICBpZiAoY2xvc2VNZW51KSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuY2xvc2VNZW51KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCFza2lwTm90aWZ5ICYmIHRoaXMubGFzdFNlbGVjdGVkSW5kZXggIT09IGluZGV4KSB7XG4gICAgICAgICAgICB0aGlzLmhhbmRsZUNoYW5nZSgpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMubGFzdFNlbGVjdGVkSW5kZXggPSBpbmRleDtcbiAgICB9O1xuICAgIE1EQ1NlbGVjdEZvdW5kYXRpb24ucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBza2lwTm90aWZ5KSB7XG4gICAgICAgIGlmIChza2lwTm90aWZ5ID09PSB2b2lkIDApIHsgc2tpcE5vdGlmeSA9IGZhbHNlOyB9XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuYWRhcHRlci5nZXRNZW51SXRlbVZhbHVlcygpLmluZGV4T2YodmFsdWUpO1xuICAgICAgICB0aGlzLnNldFNlbGVjdGVkSW5kZXgoaW5kZXgsIC8qKiBjbG9zZU1lbnUgKi8gZmFsc2UsIHNraXBOb3RpZnkpO1xuICAgIH07XG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBpbmRleCA9IHRoaXMuYWRhcHRlci5nZXRTZWxlY3RlZEluZGV4KCk7XG4gICAgICAgIHZhciBtZW51SXRlbVZhbHVlcyA9IHRoaXMuYWRhcHRlci5nZXRNZW51SXRlbVZhbHVlcygpO1xuICAgICAgICByZXR1cm4gaW5kZXggIT09IG51bWJlcnMuVU5TRVRfSU5ERVggPyBtZW51SXRlbVZhbHVlc1tpbmRleF0gOiAnJztcbiAgICB9O1xuICAgIE1EQ1NlbGVjdEZvdW5kYXRpb24ucHJvdG90eXBlLmdldERpc2FibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNhYmxlZDtcbiAgICB9O1xuICAgIE1EQ1NlbGVjdEZvdW5kYXRpb24ucHJvdG90eXBlLnNldERpc2FibGVkID0gZnVuY3Rpb24gKGlzRGlzYWJsZWQpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IGlzRGlzYWJsZWQ7XG4gICAgICAgIGlmICh0aGlzLmRpc2FibGVkKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5ESVNBQkxFRCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuY2xvc2VNZW51KCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoY3NzQ2xhc3Nlcy5ESVNBQkxFRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGVhZGluZ0ljb24pIHtcbiAgICAgICAgICAgIHRoaXMubGVhZGluZ0ljb24uc2V0RGlzYWJsZWQodGhpcy5kaXNhYmxlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIC8vIFByZXZlbnQgY2xpY2sgZXZlbnRzIGZyb20gZm9jdXNpbmcgc2VsZWN0LiBTaW1wbHkgcG9pbnRlci1ldmVudHM6IG5vbmVcbiAgICAgICAgICAgIC8vIGlzIG5vdCBlbm91Z2ggc2luY2Ugc2NyZWVucmVhZGVyIGNsaWNrcyBtYXkgYnlwYXNzIHRoaXMuXG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlU2VsZWN0QW5jaG9yQXR0cigndGFiaW5kZXgnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRTZWxlY3RBbmNob3JBdHRyKCd0YWJpbmRleCcsICcwJyk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldFNlbGVjdEFuY2hvckF0dHIoJ2FyaWEtZGlzYWJsZWQnLCB0aGlzLmRpc2FibGVkLnRvU3RyaW5nKCkpO1xuICAgIH07XG4gICAgLyoqIE9wZW5zIHRoZSBtZW51LiAqL1xuICAgIE1EQ1NlbGVjdEZvdW5kYXRpb24ucHJvdG90eXBlLm9wZW5NZW51ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5BQ1RJVkFURUQpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIub3Blbk1lbnUoKTtcbiAgICAgICAgdGhpcy5pc01lbnVPcGVuID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldFNlbGVjdEFuY2hvckF0dHIoJ2FyaWEtZXhwYW5kZWQnLCAndHJ1ZScpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGNvbnRlbnQgU2V0cyB0aGUgY29udGVudCBvZiB0aGUgaGVscGVyIHRleHQuXG4gICAgICovXG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0SGVscGVyVGV4dENvbnRlbnQgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICBpZiAodGhpcy5oZWxwZXJUZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmhlbHBlclRleHQuc2V0Q29udGVudChjb250ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogUmUtY2FsY3VsYXRlcyBpZiB0aGUgbm90Y2hlZCBvdXRsaW5lIHNob3VsZCBiZSBub3RjaGVkIGFuZCBpZiB0aGUgbGFiZWxcbiAgICAgKiBzaG91bGQgZmxvYXQuXG4gICAgICovXG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUubGF5b3V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLmhhc0xhYmVsKCkpIHtcbiAgICAgICAgICAgIHZhciBvcHRpb25IYXNWYWx1ZSA9IHRoaXMuZ2V0VmFsdWUoKS5sZW5ndGggPiAwO1xuICAgICAgICAgICAgdmFyIGlzRm9jdXNlZCA9IHRoaXMuYWRhcHRlci5oYXNDbGFzcyhjc3NDbGFzc2VzLkZPQ1VTRUQpO1xuICAgICAgICAgICAgdmFyIHNob3VsZEZsb2F0QW5kTm90Y2ggPSBvcHRpb25IYXNWYWx1ZSB8fCBpc0ZvY3VzZWQ7XG4gICAgICAgICAgICB2YXIgaXNSZXF1aXJlZCA9IHRoaXMuYWRhcHRlci5oYXNDbGFzcyhjc3NDbGFzc2VzLlJFUVVJUkVEKTtcbiAgICAgICAgICAgIHRoaXMubm90Y2hPdXRsaW5lKHNob3VsZEZsb2F0QW5kTm90Y2gpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmZsb2F0TGFiZWwoc2hvdWxkRmxvYXRBbmROb3RjaCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0TGFiZWxSZXF1aXJlZChpc1JlcXVpcmVkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU3luY2hyb25pemVzIHRoZSBsaXN0IG9mIG9wdGlvbnMgd2l0aCB0aGUgc3RhdGUgb2YgdGhlIGZvdW5kYXRpb24uIENhbGxcbiAgICAgKiB0aGlzIHdoZW5ldmVyIG1lbnUgb3B0aW9ucyBhcmUgZHluYW1pY2FsbHkgdXBkYXRlZC5cbiAgICAgKi9cbiAgICBNRENTZWxlY3RGb3VuZGF0aW9uLnByb3RvdHlwZS5sYXlvdXRPcHRpb25zID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgbWVudUl0ZW1WYWx1ZXMgPSB0aGlzLmFkYXB0ZXIuZ2V0TWVudUl0ZW1WYWx1ZXMoKTtcbiAgICAgICAgdmFyIHNlbGVjdGVkSW5kZXggPSBtZW51SXRlbVZhbHVlcy5pbmRleE9mKHRoaXMuZ2V0VmFsdWUoKSk7XG4gICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJbmRleChzZWxlY3RlZEluZGV4LCAvKiogY2xvc2VNZW51ICovIGZhbHNlLCAvKiogc2tpcE5vdGlmeSAqLyB0cnVlKTtcbiAgICB9O1xuICAgIE1EQ1NlbGVjdEZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZU1lbnVPcGVuZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuZ2V0TWVudUl0ZW1WYWx1ZXMoKS5sZW5ndGggPT09IDApIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICAvLyBNZW51IHNob3VsZCBvcGVuIHRvIHRoZSBsYXN0IHNlbGVjdGVkIGVsZW1lbnQsIHNob3VsZCBvcGVuIHRvIGZpcnN0IG1lbnUgaXRlbSBvdGhlcndpc2UuXG4gICAgICAgIHZhciBzZWxlY3RlZEluZGV4ID0gdGhpcy5nZXRTZWxlY3RlZEluZGV4KCk7XG4gICAgICAgIHZhciBmb2N1c0l0ZW1JbmRleCA9IHNlbGVjdGVkSW5kZXggPj0gMCA/IHNlbGVjdGVkSW5kZXggOiAwO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuZm9jdXNNZW51SXRlbUF0SW5kZXgoZm9jdXNJdGVtSW5kZXgpO1xuICAgIH07XG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlTWVudUNsb3NpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRTZWxlY3RBbmNob3JBdHRyKCdhcmlhLWV4cGFuZGVkJywgJ2ZhbHNlJyk7XG4gICAgfTtcbiAgICBNRENTZWxlY3RGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVNZW51Q2xvc2VkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoY3NzQ2xhc3Nlcy5BQ1RJVkFURUQpO1xuICAgICAgICB0aGlzLmlzTWVudU9wZW4gPSBmYWxzZTtcbiAgICAgICAgLy8gVW5mb2N1cyB0aGUgc2VsZWN0IGlmIG1lbnUgaXMgY2xvc2VkIHdpdGhvdXQgYSBzZWxlY3Rpb25cbiAgICAgICAgaWYgKCF0aGlzLmFkYXB0ZXIuaXNTZWxlY3RBbmNob3JGb2N1c2VkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuYmx1cigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHZhbHVlIGNoYW5nZXMsIHZpYSBjaGFuZ2UgZXZlbnQgb3IgcHJvZ3JhbW1hdGljIHVwZGF0ZXMuXG4gICAgICovXG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmxheW91dCgpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIubm90aWZ5Q2hhbmdlKHRoaXMuZ2V0VmFsdWUoKSk7XG4gICAgICAgIHZhciBpc1JlcXVpcmVkID0gdGhpcy5hZGFwdGVyLmhhc0NsYXNzKGNzc0NsYXNzZXMuUkVRVUlSRUQpO1xuICAgICAgICBpZiAoaXNSZXF1aXJlZCAmJiB0aGlzLnVzZURlZmF1bHRWYWxpZGF0aW9uKSB7XG4gICAgICAgICAgICB0aGlzLnNldFZhbGlkKHRoaXMuaXNWYWxpZCgpKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlTWVudUl0ZW1BY3Rpb24gPSBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEluZGV4KGluZGV4LCAvKiogY2xvc2VNZW51ICovIHRydWUpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogSGFuZGxlcyBmb2N1cyBldmVudHMgZnJvbSBzZWxlY3QgZWxlbWVudC5cbiAgICAgKi9cbiAgICBNRENTZWxlY3RGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKGNzc0NsYXNzZXMuRk9DVVNFRCk7XG4gICAgICAgIHRoaXMubGF5b3V0KCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5hY3RpdmF0ZUJvdHRvbUxpbmUoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgYmx1ciBldmVudHMgZnJvbSBzZWxlY3QgZWxlbWVudC5cbiAgICAgKi9cbiAgICBNRENTZWxlY3RGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVCbHVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAodGhpcy5pc01lbnVPcGVuKSB7XG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5ibHVyKCk7XG4gICAgfTtcbiAgICBNRENTZWxlY3RGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVDbGljayA9IGZ1bmN0aW9uIChub3JtYWxpemVkWCkge1xuICAgICAgICBpZiAodGhpcy5kaXNhYmxlZCB8fCB0aGlzLnJlY2VudGx5Q2xpY2tlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuc2V0Q2xpY2tEZWJvdW5jZVRpbWVvdXQoKTtcbiAgICAgICAgaWYgKHRoaXMuaXNNZW51T3Blbikge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmNsb3NlTWVudSgpO1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRSaXBwbGVDZW50ZXIobm9ybWFsaXplZFgpO1xuICAgICAgICB0aGlzLm9wZW5NZW51KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIGtleWRvd24gZXZlbnRzIG9uIHNlbGVjdCBlbGVtZW50LiBEZXBlbmRpbmcgb24gdGhlIHR5cGUgb2ZcbiAgICAgKiBjaGFyYWN0ZXIgdHlwZWQsIGRvZXMgdHlwZWFoZWFkIG1hdGNoaW5nIG9yIG9wZW5zIG1lbnUuXG4gICAgICovXG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlS2V5ZG93biA9IGZ1bmN0aW9uIChldmVudCkge1xuICAgICAgICBpZiAodGhpcy5pc01lbnVPcGVuIHx8ICF0aGlzLmFkYXB0ZXIuaGFzQ2xhc3MoY3NzQ2xhc3Nlcy5GT0NVU0VEKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc0VudGVyID0gbm9ybWFsaXplS2V5KGV2ZW50KSA9PT0gS0VZLkVOVEVSO1xuICAgICAgICB2YXIgaXNTcGFjZSA9IG5vcm1hbGl6ZUtleShldmVudCkgPT09IEtFWS5TUEFDRUJBUjtcbiAgICAgICAgdmFyIGFycm93VXAgPSBub3JtYWxpemVLZXkoZXZlbnQpID09PSBLRVkuQVJST1dfVVA7XG4gICAgICAgIHZhciBhcnJvd0Rvd24gPSBub3JtYWxpemVLZXkoZXZlbnQpID09PSBLRVkuQVJST1dfRE9XTjtcbiAgICAgICAgdmFyIGlzTW9kaWZpZXIgPSBldmVudC5jdHJsS2V5IHx8IGV2ZW50Lm1ldGFLZXk7XG4gICAgICAgIC8vIFR5cGVhaGVhZFxuICAgICAgICBpZiAoIWlzTW9kaWZpZXIgJiZcbiAgICAgICAgICAgICghaXNTcGFjZSAmJiBldmVudC5rZXkgJiYgZXZlbnQua2V5Lmxlbmd0aCA9PT0gMSB8fFxuICAgICAgICAgICAgICAgIGlzU3BhY2UgJiYgdGhpcy5hZGFwdGVyLmlzVHlwZWFoZWFkSW5Qcm9ncmVzcygpKSkge1xuICAgICAgICAgICAgdmFyIGtleSA9IGlzU3BhY2UgPyAnICcgOiBldmVudC5rZXk7XG4gICAgICAgICAgICB2YXIgdHlwZWFoZWFkTmV4dEluZGV4ID0gdGhpcy5hZGFwdGVyLnR5cGVhaGVhZE1hdGNoSXRlbShrZXksIHRoaXMuZ2V0U2VsZWN0ZWRJbmRleCgpKTtcbiAgICAgICAgICAgIGlmICh0eXBlYWhlYWROZXh0SW5kZXggPj0gMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuc2V0U2VsZWN0ZWRJbmRleCh0eXBlYWhlYWROZXh0SW5kZXgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZXZlbnQucHJldmVudERlZmF1bHQoKTtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWlzRW50ZXIgJiYgIWlzU3BhY2UgJiYgIWFycm93VXAgJiYgIWFycm93RG93bikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEluY3JlbWVudC9kZWNyZW1lbnQgaW5kZXggYXMgbmVjZXNzYXJ5IGFuZCBvcGVuIG1lbnUuXG4gICAgICAgIGlmIChhcnJvd1VwICYmIHRoaXMuZ2V0U2VsZWN0ZWRJbmRleCgpID4gMCkge1xuICAgICAgICAgICAgdGhpcy5zZXRTZWxlY3RlZEluZGV4KHRoaXMuZ2V0U2VsZWN0ZWRJbmRleCgpIC0gMSk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoYXJyb3dEb3duICYmXG4gICAgICAgICAgICB0aGlzLmdldFNlbGVjdGVkSW5kZXgoKSA8IHRoaXMuYWRhcHRlci5nZXRNZW51SXRlbUNvdW50KCkgLSAxKSB7XG4gICAgICAgICAgICB0aGlzLnNldFNlbGVjdGVkSW5kZXgodGhpcy5nZXRTZWxlY3RlZEluZGV4KCkgKyAxKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLm9wZW5NZW51KCk7XG4gICAgICAgIGV2ZW50LnByZXZlbnREZWZhdWx0KCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBPcGVucy9jbG9zZXMgdGhlIG5vdGNoZWQgb3V0bGluZS5cbiAgICAgKi9cbiAgICBNRENTZWxlY3RGb3VuZGF0aW9uLnByb3RvdHlwZS5ub3RjaE91dGxpbmUgPSBmdW5jdGlvbiAob3Blbk5vdGNoKSB7XG4gICAgICAgIGlmICghdGhpcy5hZGFwdGVyLmhhc091dGxpbmUoKSkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc0ZvY3VzZWQgPSB0aGlzLmFkYXB0ZXIuaGFzQ2xhc3MoY3NzQ2xhc3Nlcy5GT0NVU0VEKTtcbiAgICAgICAgaWYgKG9wZW5Ob3RjaCkge1xuICAgICAgICAgICAgdmFyIGxhYmVsU2NhbGUgPSBudW1iZXJzLkxBQkVMX1NDQUxFO1xuICAgICAgICAgICAgdmFyIGxhYmVsV2lkdGggPSB0aGlzLmFkYXB0ZXIuZ2V0TGFiZWxXaWR0aCgpICogbGFiZWxTY2FsZTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5ub3RjaE91dGxpbmUobGFiZWxXaWR0aCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSBpZiAoIWlzRm9jdXNlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmNsb3NlT3V0bGluZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhcmlhIGxhYmVsIG9mIHRoZSBsZWFkaW5nIGljb24uXG4gICAgICovXG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0TGVhZGluZ0ljb25BcmlhTGFiZWwgPSBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgaWYgKHRoaXMubGVhZGluZ0ljb24pIHtcbiAgICAgICAgICAgIHRoaXMubGVhZGluZ0ljb24uc2V0QXJpYUxhYmVsKGxhYmVsKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBsZWFkaW5nIGljb24uXG4gICAgICovXG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0TGVhZGluZ0ljb25Db250ZW50ID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMubGVhZGluZ0ljb24pIHtcbiAgICAgICAgICAgIHRoaXMubGVhZGluZ0ljb24uc2V0Q29udGVudChjb250ZW50KTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0VXNlRGVmYXVsdFZhbGlkYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLnVzZURlZmF1bHRWYWxpZGF0aW9uO1xuICAgIH07XG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VXNlRGVmYXVsdFZhbGlkYXRpb24gPSBmdW5jdGlvbiAodXNlRGVmYXVsdFZhbGlkYXRpb24pIHtcbiAgICAgICAgdGhpcy51c2VEZWZhdWx0VmFsaWRhdGlvbiA9IHVzZURlZmF1bHRWYWxpZGF0aW9uO1xuICAgIH07XG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VmFsaWQgPSBmdW5jdGlvbiAoaXNWYWxpZCkge1xuICAgICAgICBpZiAoIXRoaXMudXNlRGVmYXVsdFZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuY3VzdG9tVmFsaWRpdHkgPSBpc1ZhbGlkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRTZWxlY3RBbmNob3JBdHRyKCdhcmlhLWludmFsaWQnLCAoIWlzVmFsaWQpLnRvU3RyaW5nKCkpO1xuICAgICAgICBpZiAoaXNWYWxpZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuSU5WQUxJRCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlTWVudUNsYXNzKGNzc0NsYXNzZXMuTUVOVV9JTlZBTElEKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjc3NDbGFzc2VzLklOVkFMSUQpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZE1lbnVDbGFzcyhjc3NDbGFzc2VzLk1FTlVfSU5WQUxJRCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zeW5jSGVscGVyVGV4dFZhbGlkaXR5KGlzVmFsaWQpO1xuICAgIH07XG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuaXNWYWxpZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMudXNlRGVmYXVsdFZhbGlkYXRpb24gJiZcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5oYXNDbGFzcyhjc3NDbGFzc2VzLlJFUVVJUkVEKSAmJlxuICAgICAgICAgICAgIXRoaXMuYWRhcHRlci5oYXNDbGFzcyhjc3NDbGFzc2VzLkRJU0FCTEVEKSkge1xuICAgICAgICAgICAgLy8gU2VlIG5vdGVzIGZvciByZXF1aXJlZCBhdHRyaWJ1dGUgdW5kZXIgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1Mi9zZWMtZm9ybXMuaHRtbCN0aGUtc2VsZWN0LWVsZW1lbnRcbiAgICAgICAgICAgIC8vIFRMO0RSOiBJbnZhbGlkIGlmIG5vIGluZGV4IGlzIHNlbGVjdGVkLCBvciBpZiB0aGUgZmlyc3QgaW5kZXggaXMgc2VsZWN0ZWQgYW5kIGhhcyBhbiBlbXB0eSB2YWx1ZS5cbiAgICAgICAgICAgIHJldHVybiB0aGlzLmdldFNlbGVjdGVkSW5kZXgoKSAhPT0gbnVtYmVycy5VTlNFVF9JTkRFWCAmJlxuICAgICAgICAgICAgICAgICh0aGlzLmdldFNlbGVjdGVkSW5kZXgoKSAhPT0gMCB8fCBCb29sZWFuKHRoaXMuZ2V0VmFsdWUoKSkpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzLmN1c3RvbVZhbGlkaXR5O1xuICAgIH07XG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0UmVxdWlyZWQgPSBmdW5jdGlvbiAoaXNSZXF1aXJlZCkge1xuICAgICAgICBpZiAoaXNSZXF1aXJlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKGNzc0NsYXNzZXMuUkVRVUlSRUQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuUkVRVUlSRUQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRTZWxlY3RBbmNob3JBdHRyKCdhcmlhLXJlcXVpcmVkJywgaXNSZXF1aXJlZC50b1N0cmluZygpKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldExhYmVsUmVxdWlyZWQoaXNSZXF1aXJlZCk7XG4gICAgfTtcbiAgICBNRENTZWxlY3RGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRSZXF1aXJlZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRhcHRlci5nZXRTZWxlY3RBbmNob3JBdHRyKCdhcmlhLXJlcXVpcmVkJykgPT09ICd0cnVlJztcbiAgICB9O1xuICAgIE1EQ1NlbGVjdEZvdW5kYXRpb24ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBhbmNob3JFbCA9IHRoaXMuYWRhcHRlci5nZXRBbmNob3JFbGVtZW50KCk7XG4gICAgICAgIGlmIChhbmNob3JFbCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnNldE1lbnVBbmNob3JFbGVtZW50KGFuY2hvckVsKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRNZW51QW5jaG9yQ29ybmVyKENvcm5lci5CT1RUT01fU1RBUlQpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRNZW51V3JhcEZvY3VzKGZhbHNlKTtcbiAgICAgICAgdGhpcy5zZXREaXNhYmxlZCh0aGlzLmFkYXB0ZXIuaGFzQ2xhc3MoY3NzQ2xhc3Nlcy5ESVNBQkxFRCkpO1xuICAgICAgICB0aGlzLnN5bmNIZWxwZXJUZXh0VmFsaWRpdHkoIXRoaXMuYWRhcHRlci5oYXNDbGFzcyhjc3NDbGFzc2VzLklOVkFMSUQpKTtcbiAgICAgICAgdGhpcy5sYXlvdXQoKTtcbiAgICAgICAgdGhpcy5sYXlvdXRPcHRpb25zKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBVbmZvY3VzZXMgdGhlIHNlbGVjdCBjb21wb25lbnQuXG4gICAgICovXG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuYmx1ciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuRk9DVVNFRCk7XG4gICAgICAgIHRoaXMubGF5b3V0KCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5kZWFjdGl2YXRlQm90dG9tTGluZSgpO1xuICAgICAgICB2YXIgaXNSZXF1aXJlZCA9IHRoaXMuYWRhcHRlci5oYXNDbGFzcyhjc3NDbGFzc2VzLlJFUVVJUkVEKTtcbiAgICAgICAgaWYgKGlzUmVxdWlyZWQgJiYgdGhpcy51c2VEZWZhdWx0VmFsaWRhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5zZXRWYWxpZCh0aGlzLmlzVmFsaWQoKSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1NlbGVjdEZvdW5kYXRpb24ucHJvdG90eXBlLnN5bmNIZWxwZXJUZXh0VmFsaWRpdHkgPSBmdW5jdGlvbiAoaXNWYWxpZCkge1xuICAgICAgICBpZiAoIXRoaXMuaGVscGVyVGV4dCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaGVscGVyVGV4dC5zZXRWYWxpZGl0eShpc1ZhbGlkKTtcbiAgICAgICAgdmFyIGhlbHBlclRleHRWaXNpYmxlID0gdGhpcy5oZWxwZXJUZXh0LmlzVmlzaWJsZSgpO1xuICAgICAgICB2YXIgaGVscGVyVGV4dElkID0gdGhpcy5oZWxwZXJUZXh0LmdldElkKCk7XG4gICAgICAgIGlmIChoZWxwZXJUZXh0VmlzaWJsZSAmJiBoZWxwZXJUZXh0SWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRTZWxlY3RBbmNob3JBdHRyKHN0cmluZ3MuQVJJQV9ERVNDUklCRURCWSwgaGVscGVyVGV4dElkKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIC8vIE5lZWRlZCBiZWNhdXNlIHNjcmVlbnJlYWRlcnMgd2lsbCByZWFkIGxhYmVscyBwb2ludGVkIHRvIGJ5XG4gICAgICAgICAgICAvLyBgYXJpYS1kZXNjcmliZWRieWAgZXZlbiBpZiB0aGV5IGFyZSBgYXJpYS1oaWRkZW5gLlxuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZVNlbGVjdEFuY2hvckF0dHIoc3RyaW5ncy5BUklBX0RFU0NSSUJFREJZKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDU2VsZWN0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0Q2xpY2tEZWJvdW5jZVRpbWVvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIGNsZWFyVGltZW91dCh0aGlzLmNsaWNrRGVib3VuY2VUaW1lb3V0KTtcbiAgICAgICAgdGhpcy5jbGlja0RlYm91bmNlVGltZW91dCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMucmVjZW50bHlDbGlja2VkID0gZmFsc2U7XG4gICAgICAgIH0sIG51bWJlcnMuQ0xJQ0tfREVCT1VOQ0VfVElNRU9VVF9NUyk7XG4gICAgICAgIHRoaXMucmVjZW50bHlDbGlja2VkID0gdHJ1ZTtcbiAgICB9O1xuICAgIHJldHVybiBNRENTZWxlY3RGb3VuZGF0aW9uO1xufShNRENGb3VuZGF0aW9uKSk7XG5leHBvcnQgeyBNRENTZWxlY3RGb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDU2VsZWN0Rm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgc3RyaW5ncyA9IHtcbiAgICBBUklBX0hJRERFTjogJ2FyaWEtaGlkZGVuJyxcbiAgICBST0xFOiAncm9sZScsXG59O1xudmFyIGNzc0NsYXNzZXMgPSB7XG4gICAgSEVMUEVSX1RFWFRfVkFMSURBVElPTl9NU0c6ICdtZGMtc2VsZWN0LWhlbHBlci10ZXh0LS12YWxpZGF0aW9uLW1zZycsXG4gICAgSEVMUEVSX1RFWFRfVkFMSURBVElPTl9NU0dfUEVSU0lTVEVOVDogJ21kYy1zZWxlY3QtaGVscGVyLXRleHQtLXZhbGlkYXRpb24tbXNnLXBlcnNpc3RlbnQnLFxufTtcbmV4cG9ydCB7IHN0cmluZ3MsIGNzc0NsYXNzZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0ZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7IGNzc0NsYXNzZXMsIHN0cmluZ3MgfSBmcm9tICcuL2NvbnN0YW50cyc7XG52YXIgTURDU2VsZWN0SGVscGVyVGV4dEZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ1NlbGVjdEhlbHBlclRleHRGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1NlbGVjdEhlbHBlclRleHRGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENTZWxlY3RIZWxwZXJUZXh0Rm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDU2VsZWN0SGVscGVyVGV4dEZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDU2VsZWN0SGVscGVyVGV4dEZvdW5kYXRpb24sIFwic3RyaW5nc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ3M7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDU2VsZWN0SGVscGVyVGV4dEZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBNRENTZWxlY3RIZWxwZXJUZXh0QWRhcHRlcn0gZm9yIHR5cGluZyBpbmZvcm1hdGlvbiBvbiBwYXJhbWV0ZXJzIGFuZCByZXR1cm4gdHlwZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgc2V0QXR0cjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldEF0dHI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqXG4gICAgICogQHJldHVybiBUaGUgSUQgb2YgdGhlIGhlbHBlciB0ZXh0LCBvciBudWxsIGlmIG5vbmUgaXMgc2V0LlxuICAgICAqL1xuICAgIE1EQ1NlbGVjdEhlbHBlclRleHRGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRJZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuYWRhcHRlci5nZXRBdHRyKCdpZCcpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiBXaGV0aGVyIHRoZSBoZWxwZXIgdGV4dCBpcyBjdXJyZW50bHkgdmlzaWJsZS5cbiAgICAgKi9cbiAgICBNRENTZWxlY3RIZWxwZXJUZXh0Rm91bmRhdGlvbi5wcm90b3R5cGUuaXNWaXNpYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmdldEF0dHIoc3RyaW5ncy5BUklBX0hJRERFTikgIT09ICd0cnVlJztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbnRlbnQgb2YgdGhlIGhlbHBlciB0ZXh0IGZpZWxkLlxuICAgICAqL1xuICAgIE1EQ1NlbGVjdEhlbHBlclRleHRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldENvbnRlbnQoY29udGVudCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBoZWxwZXIgdGV4dCB0byBhY3QgYXMgYSB2YWxpZGF0aW9uIG1lc3NhZ2UuXG4gICAgICogQnkgZGVmYXVsdCwgdmFsaWRhdGlvbiBtZXNzYWdlcyBhcmUgaGlkZGVuIHdoZW4gdGhlIHNlbGVjdCBpcyB2YWxpZCBhbmRcbiAgICAgKiB2aXNpYmxlIHdoZW4gdGhlIHNlbGVjdCBpcyBpbnZhbGlkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGlzVmFsaWRhdGlvbiBUcnVlIHRvIG1ha2UgdGhlIGhlbHBlciB0ZXh0IGFjdCBhcyBhbiBlcnJvciB2YWxpZGF0aW9uXG4gICAgICogICAgIG1lc3NhZ2UuXG4gICAgICovXG4gICAgTURDU2VsZWN0SGVscGVyVGV4dEZvdW5kYXRpb24ucHJvdG90eXBlLnNldFZhbGlkYXRpb24gPSBmdW5jdGlvbiAoaXNWYWxpZGF0aW9uKSB7XG4gICAgICAgIGlmIChpc1ZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjc3NDbGFzc2VzLkhFTFBFUl9URVhUX1ZBTElEQVRJT05fTVNHKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhjc3NDbGFzc2VzLkhFTFBFUl9URVhUX1ZBTElEQVRJT05fTVNHKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgcGVyc2lzdGVuY3kgb2YgdGhlIHZhbGlkYXRpb24gaGVscGVyIHRleHQuXG4gICAgICogVGhpcyBrZWVwcyB0aGUgdmFsaWRhdGlvbiBtZXNzYWdlIHZpc2libGUgZXZlbiBpZiB0aGUgc2VsZWN0IGlzIHZhbGlkLFxuICAgICAqIHRob3VnaCBpdCB3aWxsIGJlIGRpc3BsYXllZCBpbiB0aGUgbm9ybWFsIChncmV5KSBjb2xvci5cbiAgICAgKi9cbiAgICBNRENTZWxlY3RIZWxwZXJUZXh0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VmFsaWRhdGlvbk1zZ1BlcnNpc3RlbnQgPSBmdW5jdGlvbiAoaXNQZXJzaXN0ZW50KSB7XG4gICAgICAgIGlmIChpc1BlcnNpc3RlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjc3NDbGFzc2VzLkhFTFBFUl9URVhUX1ZBTElEQVRJT05fTVNHX1BFUlNJU1RFTlQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNzc0NsYXNzZXMuSEVMUEVSX1RFWFRfVkFMSURBVElPTl9NU0dfUEVSU0lTVEVOVCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFdoZW4gYWN0aW5nIGFzIGEgdmFsaWRhdGlvbiBtZXNzYWdlLCBzaG93cy9oaWRlcyB0aGUgaGVscGVyIHRleHQgYW5kXG4gICAgICogdHJpZ2dlcnMgYWxlcnRzIGFzIG5lY2Vzc2FyeSBiYXNlZCBvbiB0aGUgc2VsZWN0J3MgdmFsaWRpdHkuXG4gICAgICovXG4gICAgTURDU2VsZWN0SGVscGVyVGV4dEZvdW5kYXRpb24ucHJvdG90eXBlLnNldFZhbGlkaXR5ID0gZnVuY3Rpb24gKHNlbGVjdElzVmFsaWQpIHtcbiAgICAgICAgdmFyIGlzVmFsaWRhdGlvbk1zZyA9IHRoaXMuYWRhcHRlci5oYXNDbGFzcyhjc3NDbGFzc2VzLkhFTFBFUl9URVhUX1ZBTElEQVRJT05fTVNHKTtcbiAgICAgICAgaWYgKCFpc1ZhbGlkYXRpb25Nc2cpIHtcbiAgICAgICAgICAgIC8vIE5vbi12YWxpZGF0aW5nIGhlbHBlci10ZXh0IGlzIGFsd2F5cyBkaXNwbGF5ZWQgYW5kIGRvZXMgbm90IHBhcnRpY2lwYXRlXG4gICAgICAgICAgICAvLyBpbiB2YWxpZGF0aW9uIGxvZ2ljLlxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBpc1BlcnNpc3RlbnRWYWxpZGF0aW9uTXNnID0gdGhpcy5hZGFwdGVyLmhhc0NsYXNzKGNzc0NsYXNzZXMuSEVMUEVSX1RFWFRfVkFMSURBVElPTl9NU0dfUEVSU0lTVEVOVCk7XG4gICAgICAgIC8vIFZhbGlkYXRpbmcgaGVscGVyIHRleHQgaXMgZGlzcGxheWVkIGlmIHNlbGVjdCBpcyBpbnZhbGlkLCB1bmxlc3MgaXQgaXNcbiAgICAgICAgLy8gc2V0IGFzIHBlcnNpc3RlbnQsIGluIHdoaWNoIGNhc2UgaXQgYWx3YXlzIGRpc3BsYXlzLlxuICAgICAgICB2YXIgbXNnU2hvdWxkRGlzcGxheSA9ICFzZWxlY3RJc1ZhbGlkIHx8IGlzUGVyc2lzdGVudFZhbGlkYXRpb25Nc2c7XG4gICAgICAgIGlmIChtc2dTaG91bGREaXNwbGF5KSB7XG4gICAgICAgICAgICB0aGlzLnNob3dUb1NjcmVlblJlYWRlcigpO1xuICAgICAgICAgICAgLy8gSW4gYWRkaXRpb24gdG8gZGlzcGxheWluZywgYWxzbyB0cmlnZ2VyIGFuIGFsZXJ0IGlmIHRoZSBzZWxlY3RcbiAgICAgICAgICAgIC8vIGhhcyBiZWNvbWUgaW52YWxpZC5cbiAgICAgICAgICAgIGlmICghc2VsZWN0SXNWYWxpZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyKHN0cmluZ3MuUk9MRSwgJ2FsZXJ0Jyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQXR0cihzdHJpbmdzLlJPTEUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIC8vIEhpZGUgZXZlcnl0aGluZy5cbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUF0dHIoc3RyaW5ncy5ST0xFKTtcbiAgICAgICAgdGhpcy5oaWRlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBNYWtlcyB0aGUgaGVscGVyIHRleHQgdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVycy5cbiAgICAgKi9cbiAgICBNRENTZWxlY3RIZWxwZXJUZXh0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2hvd1RvU2NyZWVuUmVhZGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQXR0cihzdHJpbmdzLkFSSUFfSElEREVOKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhpZGVzIHRoZSBoZWxwIHRleHQgZnJvbSBzY3JlZW4gcmVhZGVycy5cbiAgICAgKi9cbiAgICBNRENTZWxlY3RIZWxwZXJUZXh0Rm91bmRhdGlvbi5wcm90b3R5cGUuaGlkZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldEF0dHIoc3RyaW5ncy5BUklBX0hJRERFTiwgJ3RydWUnKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENTZWxlY3RIZWxwZXJUZXh0Rm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDU2VsZWN0SGVscGVyVGV4dEZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENTZWxlY3RIZWxwZXJUZXh0Rm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0NvbXBvbmVudCB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBNRENTZWxlY3RIZWxwZXJUZXh0Rm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG52YXIgTURDU2VsZWN0SGVscGVyVGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDU2VsZWN0SGVscGVyVGV4dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENTZWxlY3RIZWxwZXJUZXh0KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ1NlbGVjdEhlbHBlclRleHQuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1NlbGVjdEhlbHBlclRleHQocm9vdCk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDU2VsZWN0SGVscGVyVGV4dC5wcm90b3R5cGUsIFwiZm91bmRhdGlvbkZvclNlbGVjdFwiLCB7XG4gICAgICAgIC8vIFByb3ZpZGVkIGZvciBhY2Nlc3MgYnkgTURDU2VsZWN0IGNvbXBvbmVudFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvdW5kYXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENTZWxlY3RIZWxwZXJUZXh0LnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IHtcbiAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgZ2V0QXR0cjogZnVuY3Rpb24gKGF0dHIpIHsgcmV0dXJuIF90aGlzLnJvb3QuZ2V0QXR0cmlidXRlKGF0dHIpOyB9LFxuICAgICAgICAgICAgc2V0QXR0cjogZnVuY3Rpb24gKGF0dHIsIHZhbHVlKSB7IHJldHVybiBfdGhpcy5yb290LnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7IH0sXG4gICAgICAgICAgICByZW1vdmVBdHRyOiBmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gX3RoaXMucm9vdC5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7IH0sXG4gICAgICAgICAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJvb3QudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgcmV0dXJuIG5ldyBNRENTZWxlY3RIZWxwZXJUZXh0Rm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENTZWxlY3RIZWxwZXJUZXh0O1xufShNRENDb21wb25lbnQpKTtcbmV4cG9ydCB7IE1EQ1NlbGVjdEhlbHBlclRleHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBzdHJpbmdzID0ge1xuICAgIElDT05fRVZFTlQ6ICdNRENTZWxlY3Q6aWNvbicsXG4gICAgSUNPTl9ST0xFOiAnYnV0dG9uJyxcbn07XG5leHBvcnQgeyBzdHJpbmdzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBJTlRFUkFDVElPTl9FVkVOVFMgPSBbJ2NsaWNrJywgJ2tleWRvd24nXTtcbnZhciBNRENTZWxlY3RJY29uRm91bmRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDU2VsZWN0SWNvbkZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDU2VsZWN0SWNvbkZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDU2VsZWN0SWNvbkZvdW5kYXRpb24uZGVmYXVsdEFkYXB0ZXIpLCBhZGFwdGVyKSkgfHwgdGhpcztcbiAgICAgICAgX3RoaXMuc2F2ZWRUYWJJbmRleCA9IG51bGw7XG4gICAgICAgIF90aGlzLmludGVyYWN0aW9uSGFuZGxlciA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZUludGVyYWN0aW9uKGV2dCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1NlbGVjdEljb25Gb3VuZGF0aW9uLCBcInN0cmluZ3NcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBzdHJpbmdzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1NlbGVjdEljb25Gb3VuZGF0aW9uLCBcImRlZmF1bHRBZGFwdGVyXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNlZSB7QGxpbmsgTURDU2VsZWN0SWNvbkFkYXB0ZXJ9IGZvciB0eXBpbmcgaW5mb3JtYXRpb24gb24gcGFyYW1ldGVycyBhbmQgcmV0dXJuIHR5cGVzLlxuICAgICAgICAgKi9cbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBnZXRBdHRyOiBmdW5jdGlvbiAoKSB7IHJldHVybiBudWxsOyB9LFxuICAgICAgICAgICAgICAgIHNldEF0dHI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVBdHRyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgc2V0Q29udGVudDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIG5vdGlmeUljb25BY3Rpb246IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDU2VsZWN0SWNvbkZvdW5kYXRpb24ucHJvdG90eXBlLmluaXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBlXzEsIF9hO1xuICAgICAgICB0aGlzLnNhdmVkVGFiSW5kZXggPSB0aGlzLmFkYXB0ZXIuZ2V0QXR0cigndGFiaW5kZXgnKTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIElOVEVSQUNUSU9OX0VWRU5UU18xID0gX192YWx1ZXMoSU5URVJBQ1RJT05fRVZFTlRTKSwgSU5URVJBQ1RJT05fRVZFTlRTXzFfMSA9IElOVEVSQUNUSU9OX0VWRU5UU18xLm5leHQoKTsgIUlOVEVSQUNUSU9OX0VWRU5UU18xXzEuZG9uZTsgSU5URVJBQ1RJT05fRVZFTlRTXzFfMSA9IElOVEVSQUNUSU9OX0VWRU5UU18xLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBldnRUeXBlID0gSU5URVJBQ1RJT05fRVZFTlRTXzFfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoZXZ0VHlwZSwgdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoSU5URVJBQ1RJT05fRVZFTlRTXzFfMSAmJiAhSU5URVJBQ1RJT05fRVZFTlRTXzFfMS5kb25lICYmIChfYSA9IElOVEVSQUNUSU9OX0VWRU5UU18xLnJldHVybikpIF9hLmNhbGwoSU5URVJBQ1RJT05fRVZFTlRTXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENTZWxlY3RJY29uRm91bmRhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMiwgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBJTlRFUkFDVElPTl9FVkVOVFNfMiA9IF9fdmFsdWVzKElOVEVSQUNUSU9OX0VWRU5UUyksIElOVEVSQUNUSU9OX0VWRU5UU18yXzEgPSBJTlRFUkFDVElPTl9FVkVOVFNfMi5uZXh0KCk7ICFJTlRFUkFDVElPTl9FVkVOVFNfMl8xLmRvbmU7IElOVEVSQUNUSU9OX0VWRU5UU18yXzEgPSBJTlRFUkFDVElPTl9FVkVOVFNfMi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZ0VHlwZSA9IElOVEVSQUNUSU9OX0VWRU5UU18yXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIoZXZ0VHlwZSwgdGhpcy5pbnRlcmFjdGlvbkhhbmRsZXIpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzJfMSkgeyBlXzIgPSB7IGVycm9yOiBlXzJfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoSU5URVJBQ1RJT05fRVZFTlRTXzJfMSAmJiAhSU5URVJBQ1RJT05fRVZFTlRTXzJfMS5kb25lICYmIChfYSA9IElOVEVSQUNUSU9OX0VWRU5UU18yLnJldHVybikpIF9hLmNhbGwoSU5URVJBQ1RJT05fRVZFTlRTXzIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENTZWxlY3RJY29uRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0RGlzYWJsZWQgPSBmdW5jdGlvbiAoZGlzYWJsZWQpIHtcbiAgICAgICAgaWYgKCF0aGlzLnNhdmVkVGFiSW5kZXgpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyKCd0YWJpbmRleCcsICctMScpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUF0dHIoJ3JvbGUnKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyKCd0YWJpbmRleCcsIHRoaXMuc2F2ZWRUYWJJbmRleCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0QXR0cigncm9sZScsIHN0cmluZ3MuSUNPTl9ST0xFKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDU2VsZWN0SWNvbkZvdW5kYXRpb24ucHJvdG90eXBlLnNldEFyaWFMYWJlbCA9IGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0QXR0cignYXJpYS1sYWJlbCcsIGxhYmVsKTtcbiAgICB9O1xuICAgIE1EQ1NlbGVjdEljb25Gb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldENvbnRlbnQoY29udGVudCk7XG4gICAgfTtcbiAgICBNRENTZWxlY3RJY29uRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlSW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgIHZhciBpc0VudGVyS2V5ID0gZXZ0LmtleSA9PT0gJ0VudGVyJyB8fCBldnQua2V5Q29kZSA9PT0gMTM7XG4gICAgICAgIGlmIChldnQudHlwZSA9PT0gJ2NsaWNrJyB8fCBpc0VudGVyS2V5KSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIubm90aWZ5SWNvbkFjdGlvbigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICByZXR1cm4gTURDU2VsZWN0SWNvbkZvdW5kYXRpb247XG59KE1EQ0ZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ1NlbGVjdEljb25Gb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDU2VsZWN0SWNvbkZvdW5kYXRpb247XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3VuZGF0aW9uLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENDb21wb25lbnQgfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgTURDU2VsZWN0SWNvbkZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xudmFyIE1EQ1NlbGVjdEljb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ1NlbGVjdEljb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDU2VsZWN0SWNvbigpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlciAhPT0gbnVsbCAmJiBfc3VwZXIuYXBwbHkodGhpcywgYXJndW1lbnRzKSB8fCB0aGlzO1xuICAgIH1cbiAgICBNRENTZWxlY3RJY29uLmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENTZWxlY3RJY29uKHJvb3QpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1NlbGVjdEljb24ucHJvdG90eXBlLCBcImZvdW5kYXRpb25Gb3JTZWxlY3RcIiwge1xuICAgICAgICAvLyBQcm92aWRlZCBmb3IgYWNjZXNzIGJ5IE1EQ1NlbGVjdCBjb21wb25lbnRcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDU2VsZWN0SWNvbi5wcm90b3R5cGUuZ2V0RGVmYXVsdEZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIERPIE5PVCBJTkxJTkUgdGhpcyB2YXJpYWJsZS4gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGZvdW5kYXRpb25zIHRha2UgYSBQYXJ0aWFsPE1EQ0Zvb0FkYXB0ZXI+LlxuICAgICAgICAvLyBUbyBlbnN1cmUgd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IG9taXQgYW55IG1ldGhvZHMsIHdlIG5lZWQgYSBzZXBhcmF0ZSwgc3Ryb25nbHkgdHlwZWQgYWRhcHRlciB2YXJpYWJsZS5cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgdmFyIGFkYXB0ZXIgPSB7XG4gICAgICAgICAgICBnZXRBdHRyOiBmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gX3RoaXMucm9vdC5nZXRBdHRyaWJ1dGUoYXR0cik7IH0sXG4gICAgICAgICAgICBzZXRBdHRyOiBmdW5jdGlvbiAoYXR0ciwgdmFsdWUpIHsgcmV0dXJuIF90aGlzLnJvb3Quc2V0QXR0cmlidXRlKGF0dHIsIHZhbHVlKTsgfSxcbiAgICAgICAgICAgIHJlbW92ZUF0dHI6IGZ1bmN0aW9uIChhdHRyKSB7IHJldHVybiBfdGhpcy5yb290LnJlbW92ZUF0dHJpYnV0ZShhdHRyKTsgfSxcbiAgICAgICAgICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdC50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLmxpc3RlbihldnRUeXBlLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy51bmxpc3RlbihldnRUeXBlLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBub3RpZnlJY29uQWN0aW9uOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5lbWl0KE1EQ1NlbGVjdEljb25Gb3VuZGF0aW9uLnN0cmluZ3MuSUNPTl9FVkVOVCwge30gLyogZXZ0RGF0YSAqLywgdHJ1ZSAvKiBzaG91bGRCdWJibGUgKi8pOyB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1NlbGVjdEljb25Gb3VuZGF0aW9uKGFkYXB0ZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1NlbGVjdEljb247XG59KE1EQ0NvbXBvbmVudCkpO1xuZXhwb3J0IHsgTURDU2VsZWN0SWNvbiB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9uZW50LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDQ29tcG9uZW50IH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ0Zsb2F0aW5nTGFiZWwgfSBmcm9tICdAbWF0ZXJpYWwvZmxvYXRpbmctbGFiZWwvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ0xpbmVSaXBwbGUgfSBmcm9tICdAbWF0ZXJpYWwvbGluZS1yaXBwbGUvY29tcG9uZW50JztcbmltcG9ydCAqIGFzIG1lbnVTdXJmYWNlQ29uc3RhbnRzIGZyb20gJ0BtYXRlcmlhbC9tZW51LXN1cmZhY2UvY29uc3RhbnRzJztcbmltcG9ydCB7IE1EQ01lbnUgfSBmcm9tICdAbWF0ZXJpYWwvbWVudS9jb21wb25lbnQnO1xuaW1wb3J0ICogYXMgbWVudUNvbnN0YW50cyBmcm9tICdAbWF0ZXJpYWwvbWVudS9jb25zdGFudHMnO1xuaW1wb3J0IHsgTURDTm90Y2hlZE91dGxpbmUgfSBmcm9tICdAbWF0ZXJpYWwvbm90Y2hlZC1vdXRsaW5lL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBNRENSaXBwbGUgfSBmcm9tICdAbWF0ZXJpYWwvcmlwcGxlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBNRENSaXBwbGVGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL3JpcHBsZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7IGNzc0NsYXNzZXMsIHN0cmluZ3MgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBNRENTZWxlY3RGb3VuZGF0aW9uIH0gZnJvbSAnLi9mb3VuZGF0aW9uJztcbmltcG9ydCB7IE1EQ1NlbGVjdEhlbHBlclRleHQgfSBmcm9tICcuL2hlbHBlci10ZXh0L2NvbXBvbmVudCc7XG5pbXBvcnQgeyBNRENTZWxlY3RJY29uIH0gZnJvbSAnLi9pY29uL2NvbXBvbmVudCc7XG52YXIgTURDU2VsZWN0ID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENTZWxlY3QsIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDU2VsZWN0KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ1NlbGVjdC5hdHRhY2hUbyA9IGZ1bmN0aW9uIChyb290KSB7XG4gICAgICAgIHJldHVybiBuZXcgTURDU2VsZWN0KHJvb3QpO1xuICAgIH07XG4gICAgTURDU2VsZWN0LnByb3RvdHlwZS5pbml0aWFsaXplID0gZnVuY3Rpb24gKGxhYmVsRmFjdG9yeSwgbGluZVJpcHBsZUZhY3RvcnksIG91dGxpbmVGYWN0b3J5LCBtZW51RmFjdG9yeSwgaWNvbkZhY3RvcnksIGhlbHBlclRleHRGYWN0b3J5KSB7XG4gICAgICAgIGlmIChsYWJlbEZhY3RvcnkgPT09IHZvaWQgMCkgeyBsYWJlbEZhY3RvcnkgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIG5ldyBNRENGbG9hdGluZ0xhYmVsKGVsKTsgfTsgfVxuICAgICAgICBpZiAobGluZVJpcHBsZUZhY3RvcnkgPT09IHZvaWQgMCkgeyBsaW5lUmlwcGxlRmFjdG9yeSA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gbmV3IE1EQ0xpbmVSaXBwbGUoZWwpOyB9OyB9XG4gICAgICAgIGlmIChvdXRsaW5lRmFjdG9yeSA9PT0gdm9pZCAwKSB7IG91dGxpbmVGYWN0b3J5ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiBuZXcgTURDTm90Y2hlZE91dGxpbmUoZWwpOyB9OyB9XG4gICAgICAgIGlmIChtZW51RmFjdG9yeSA9PT0gdm9pZCAwKSB7IG1lbnVGYWN0b3J5ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiBuZXcgTURDTWVudShlbCk7IH07IH1cbiAgICAgICAgaWYgKGljb25GYWN0b3J5ID09PSB2b2lkIDApIHsgaWNvbkZhY3RvcnkgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIG5ldyBNRENTZWxlY3RJY29uKGVsKTsgfTsgfVxuICAgICAgICBpZiAoaGVscGVyVGV4dEZhY3RvcnkgPT09IHZvaWQgMCkgeyBoZWxwZXJUZXh0RmFjdG9yeSA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gbmV3IE1EQ1NlbGVjdEhlbHBlclRleHQoZWwpOyB9OyB9XG4gICAgICAgIHRoaXMuc2VsZWN0QW5jaG9yID1cbiAgICAgICAgICAgIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuU0VMRUNUX0FOQ0hPUl9TRUxFQ1RPUik7XG4gICAgICAgIHRoaXMuc2VsZWN0ZWRUZXh0ID1cbiAgICAgICAgICAgIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuU0VMRUNURURfVEVYVF9TRUxFQ1RPUik7XG4gICAgICAgIHRoaXMuaGlkZGVuSW5wdXQgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzdHJpbmdzLkhJRERFTl9JTlBVVF9TRUxFQ1RPUik7XG4gICAgICAgIGlmICghdGhpcy5zZWxlY3RlZFRleHQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcignTURDU2VsZWN0OiBNaXNzaW5nIHJlcXVpcmVkIGVsZW1lbnQ6IFRoZSBmb2xsb3dpbmcgc2VsZWN0b3IgbXVzdCBiZSBwcmVzZW50OiAnICtcbiAgICAgICAgICAgICAgICAoXCInXCIgKyBzdHJpbmdzLlNFTEVDVEVEX1RFWFRfU0VMRUNUT1IgKyBcIidcIikpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLnNlbGVjdEFuY2hvci5oYXNBdHRyaWJ1dGUoc3RyaW5ncy5BUklBX0NPTlRST0xTKSkge1xuICAgICAgICAgICAgdmFyIGhlbHBlclRleHRFbGVtZW50ID0gZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodGhpcy5zZWxlY3RBbmNob3IuZ2V0QXR0cmlidXRlKHN0cmluZ3MuQVJJQV9DT05UUk9MUykpO1xuICAgICAgICAgICAgaWYgKGhlbHBlclRleHRFbGVtZW50KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5oZWxwZXJUZXh0ID0gaGVscGVyVGV4dEZhY3RvcnkoaGVscGVyVGV4dEVsZW1lbnQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMubWVudVNldHVwKG1lbnVGYWN0b3J5KTtcbiAgICAgICAgdmFyIGxhYmVsRWxlbWVudCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuTEFCRUxfU0VMRUNUT1IpO1xuICAgICAgICB0aGlzLmxhYmVsID0gbGFiZWxFbGVtZW50ID8gbGFiZWxGYWN0b3J5KGxhYmVsRWxlbWVudCkgOiBudWxsO1xuICAgICAgICB2YXIgbGluZVJpcHBsZUVsZW1lbnQgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzdHJpbmdzLkxJTkVfUklQUExFX1NFTEVDVE9SKTtcbiAgICAgICAgdGhpcy5saW5lUmlwcGxlID1cbiAgICAgICAgICAgIGxpbmVSaXBwbGVFbGVtZW50ID8gbGluZVJpcHBsZUZhY3RvcnkobGluZVJpcHBsZUVsZW1lbnQpIDogbnVsbDtcbiAgICAgICAgdmFyIG91dGxpbmVFbGVtZW50ID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3Ioc3RyaW5ncy5PVVRMSU5FX1NFTEVDVE9SKTtcbiAgICAgICAgdGhpcy5vdXRsaW5lID0gb3V0bGluZUVsZW1lbnQgPyBvdXRsaW5lRmFjdG9yeShvdXRsaW5lRWxlbWVudCkgOiBudWxsO1xuICAgICAgICB2YXIgbGVhZGluZ0ljb24gPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzdHJpbmdzLkxFQURJTkdfSUNPTl9TRUxFQ1RPUik7XG4gICAgICAgIGlmIChsZWFkaW5nSWNvbikge1xuICAgICAgICAgICAgdGhpcy5sZWFkaW5nSWNvbiA9IGljb25GYWN0b3J5KGxlYWRpbmdJY29uKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMucm9vdC5jbGFzc0xpc3QuY29udGFpbnMoY3NzQ2xhc3Nlcy5PVVRMSU5FRCkpIHtcbiAgICAgICAgICAgIHRoaXMucmlwcGxlID0gdGhpcy5jcmVhdGVSaXBwbGUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIHNlbGVjdCdzIGV2ZW50IGxpc3RlbmVycyBhbmQgaW50ZXJuYWwgc3RhdGUgYmFzZWRcbiAgICAgKiBvbiB0aGUgZW52aXJvbm1lbnQncyBzdGF0ZS5cbiAgICAgKi9cbiAgICBNRENTZWxlY3QucHJvdG90eXBlLmluaXRpYWxTeW5jV2l0aERPTSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5oYW5kbGVGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmZvdW5kYXRpb24uaGFuZGxlRm9jdXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVCbHVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgX3RoaXMuZm91bmRhdGlvbi5oYW5kbGVCbHVyKCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlQ2xpY2sgPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICBfdGhpcy5zZWxlY3RBbmNob3IuZm9jdXMoKTtcbiAgICAgICAgICAgIF90aGlzLmZvdW5kYXRpb24uaGFuZGxlQ2xpY2soX3RoaXMuZ2V0Tm9ybWFsaXplZFhDb29yZGluYXRlKGV2dCkpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZUtleWRvd24gPSBmdW5jdGlvbiAoZXZ0KSB7XG4gICAgICAgICAgICBfdGhpcy5mb3VuZGF0aW9uLmhhbmRsZUtleWRvd24oZXZ0KTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVNZW51SXRlbUFjdGlvbiA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgIF90aGlzLmZvdW5kYXRpb24uaGFuZGxlTWVudUl0ZW1BY3Rpb24oZXZ0LmRldGFpbC5pbmRleCk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMuaGFuZGxlTWVudU9wZW5lZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmZvdW5kYXRpb24uaGFuZGxlTWVudU9wZW5lZCgpO1xuICAgICAgICB9O1xuICAgICAgICB0aGlzLmhhbmRsZU1lbnVDbG9zZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5mb3VuZGF0aW9uLmhhbmRsZU1lbnVDbG9zZWQoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5oYW5kbGVNZW51Q2xvc2luZyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmZvdW5kYXRpb24uaGFuZGxlTWVudUNsb3NpbmcoKTtcbiAgICAgICAgfTtcbiAgICAgICAgdGhpcy5zZWxlY3RBbmNob3IuYWRkRXZlbnRMaXN0ZW5lcignZm9jdXMnLCB0aGlzLmhhbmRsZUZvY3VzKTtcbiAgICAgICAgdGhpcy5zZWxlY3RBbmNob3IuYWRkRXZlbnRMaXN0ZW5lcignYmx1cicsIHRoaXMuaGFuZGxlQmx1cik7XG4gICAgICAgIHRoaXMuc2VsZWN0QW5jaG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVDbGljayk7XG4gICAgICAgIHRoaXMuc2VsZWN0QW5jaG9yLmFkZEV2ZW50TGlzdGVuZXIoJ2tleWRvd24nLCB0aGlzLmhhbmRsZUtleWRvd24pO1xuICAgICAgICB0aGlzLm1lbnUubGlzdGVuKG1lbnVTdXJmYWNlQ29uc3RhbnRzLnN0cmluZ3MuQ0xPU0VEX0VWRU5ULCB0aGlzLmhhbmRsZU1lbnVDbG9zZWQpO1xuICAgICAgICB0aGlzLm1lbnUubGlzdGVuKG1lbnVTdXJmYWNlQ29uc3RhbnRzLnN0cmluZ3MuQ0xPU0lOR19FVkVOVCwgdGhpcy5oYW5kbGVNZW51Q2xvc2luZyk7XG4gICAgICAgIHRoaXMubWVudS5saXN0ZW4obWVudVN1cmZhY2VDb25zdGFudHMuc3RyaW5ncy5PUEVORURfRVZFTlQsIHRoaXMuaGFuZGxlTWVudU9wZW5lZCk7XG4gICAgICAgIHRoaXMubWVudS5saXN0ZW4obWVudUNvbnN0YW50cy5zdHJpbmdzLlNFTEVDVEVEX0VWRU5ULCB0aGlzLmhhbmRsZU1lbnVJdGVtQWN0aW9uKTtcbiAgICAgICAgaWYgKHRoaXMuaGlkZGVuSW5wdXQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLmhpZGRlbklucHV0LnZhbHVlKSB7XG4gICAgICAgICAgICAgICAgLy8gSWYgdGhlIGhpZGRlbiBpbnB1dCBhbHJlYWR5IGhhcyBhIHZhbHVlLCB1c2UgaXQgdG8gcmVzdG9yZSB0aGVcbiAgICAgICAgICAgICAgICAvLyBzZWxlY3QncyB2YWx1ZS4gVGhpcyBjYW4gaGFwcGVuIGUuZy4gaWYgdGhlIHVzZXIgZ29lcyBiYWNrIG9yIChpblxuICAgICAgICAgICAgICAgIC8vIHNvbWUgYnJvd3NlcnMpIHJlZnJlc2hlcyB0aGUgcGFnZS5cbiAgICAgICAgICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0VmFsdWUodGhpcy5oaWRkZW5JbnB1dC52YWx1ZSwgLyoqIHNraXBOb3RpZnkgKi8gdHJ1ZSk7XG4gICAgICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmxheW91dCgpO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQudmFsdWUgPSB0aGlzLnZhbHVlO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENTZWxlY3QucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuc2VsZWN0QW5jaG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2ZvY3VzJywgdGhpcy5oYW5kbGVGb2N1cyk7XG4gICAgICAgIHRoaXMuc2VsZWN0QW5jaG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2JsdXInLCB0aGlzLmhhbmRsZUJsdXIpO1xuICAgICAgICB0aGlzLnNlbGVjdEFuY2hvci5yZW1vdmVFdmVudExpc3RlbmVyKCdrZXlkb3duJywgdGhpcy5oYW5kbGVLZXlkb3duKTtcbiAgICAgICAgdGhpcy5zZWxlY3RBbmNob3IucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZUNsaWNrKTtcbiAgICAgICAgdGhpcy5tZW51LnVubGlzdGVuKG1lbnVTdXJmYWNlQ29uc3RhbnRzLnN0cmluZ3MuQ0xPU0VEX0VWRU5ULCB0aGlzLmhhbmRsZU1lbnVDbG9zZWQpO1xuICAgICAgICB0aGlzLm1lbnUudW5saXN0ZW4obWVudVN1cmZhY2VDb25zdGFudHMuc3RyaW5ncy5PUEVORURfRVZFTlQsIHRoaXMuaGFuZGxlTWVudU9wZW5lZCk7XG4gICAgICAgIHRoaXMubWVudS51bmxpc3RlbihtZW51Q29uc3RhbnRzLnN0cmluZ3MuU0VMRUNURURfRVZFTlQsIHRoaXMuaGFuZGxlTWVudUl0ZW1BY3Rpb24pO1xuICAgICAgICB0aGlzLm1lbnUuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5yaXBwbGUpIHtcbiAgICAgICAgICAgIHRoaXMucmlwcGxlLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5vdXRsaW5lKSB7XG4gICAgICAgICAgICB0aGlzLm91dGxpbmUuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxlYWRpbmdJY29uKSB7XG4gICAgICAgICAgICB0aGlzLmxlYWRpbmdJY29uLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5oZWxwZXJUZXh0KSB7XG4gICAgICAgICAgICB0aGlzLmhlbHBlclRleHQuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1NlbGVjdC5wcm90b3R5cGUsIFwidmFsdWVcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvdW5kYXRpb24uZ2V0VmFsdWUoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENTZWxlY3QucHJvdG90eXBlLnNldFZhbHVlID0gZnVuY3Rpb24gKHZhbHVlLCBza2lwTm90aWZ5KSB7XG4gICAgICAgIGlmIChza2lwTm90aWZ5ID09PSB2b2lkIDApIHsgc2tpcE5vdGlmeSA9IGZhbHNlOyB9XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRWYWx1ZSh2YWx1ZSwgc2tpcE5vdGlmeSk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDU2VsZWN0LnByb3RvdHlwZSwgXCJzZWxlY3RlZEluZGV4XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5mb3VuZGF0aW9uLmdldFNlbGVjdGVkSW5kZXgoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoc2VsZWN0ZWRJbmRleCkge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFNlbGVjdGVkSW5kZXgoc2VsZWN0ZWRJbmRleCwgLyogY2xvc2VNZW51ICovIHRydWUpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDU2VsZWN0LnByb3RvdHlwZS5zZXRTZWxlY3RlZEluZGV4ID0gZnVuY3Rpb24gKHNlbGVjdGVkSW5kZXgsIHNraXBOb3RpZnkpIHtcbiAgICAgICAgaWYgKHNraXBOb3RpZnkgPT09IHZvaWQgMCkgeyBza2lwTm90aWZ5ID0gZmFsc2U7IH1cbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFNlbGVjdGVkSW5kZXgoc2VsZWN0ZWRJbmRleCwgLyogY2xvc2VNZW51ICovIHRydWUsIHNraXBOb3RpZnkpO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1NlbGVjdC5wcm90b3R5cGUsIFwiZGlzYWJsZWRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvdW5kYXRpb24uZ2V0RGlzYWJsZWQoKTtcbiAgICAgICAgfSxcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXREaXNhYmxlZChkaXNhYmxlZCk7XG4gICAgICAgICAgICBpZiAodGhpcy5oaWRkZW5JbnB1dCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaGlkZGVuSW5wdXQuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENTZWxlY3QucHJvdG90eXBlLCBcImxlYWRpbmdJY29uQXJpYUxhYmVsXCIsIHtcbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRMZWFkaW5nSWNvbkFyaWFMYWJlbChsYWJlbCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDU2VsZWN0LnByb3RvdHlwZSwgXCJsZWFkaW5nSWNvbkNvbnRlbnRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBsZWFkaW5nIGljb24uXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0TGVhZGluZ0ljb25Db250ZW50KGNvbnRlbnQpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1NlbGVjdC5wcm90b3R5cGUsIFwiaGVscGVyVGV4dENvbnRlbnRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBoZWxwZXIgdGV4dC5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRIZWxwZXJUZXh0Q29udGVudChjb250ZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENTZWxlY3QucHJvdG90eXBlLCBcInVzZURlZmF1bHRWYWxpZGF0aW9uXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgdGhlIGRlZmF1bHQgdmFsaWRhdGlvbiBzY2hlbWUgd2hlcmUgYSByZXF1aXJlZCBzZWxlY3RcbiAgICAgICAgICogbXVzdCBiZSBub24tZW1wdHkuIFNldCB0byBmYWxzZSBmb3IgY3VzdG9tIHZhbGlkYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB1c2VEZWZhdWx0VmFsaWRhdGlvbiBTZXQgdGhpcyB0byBmYWxzZSB0byBpZ25vcmUgZGVmYXVsdFxuICAgICAgICAgKiAgICAgdmFsaWRhdGlvbiBzY2hlbWUuXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uICh1c2VEZWZhdWx0VmFsaWRhdGlvbikge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldFVzZURlZmF1bHRWYWxpZGF0aW9uKHVzZURlZmF1bHRWYWxpZGF0aW9uKTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENTZWxlY3QucHJvdG90eXBlLCBcInZhbGlkXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIENoZWNrcyBpZiB0aGUgc2VsZWN0IGlzIGluIGEgdmFsaWQgc3RhdGUuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvdW5kYXRpb24uaXNWYWxpZCgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgY3VycmVudCBpbnZhbGlkIHN0YXRlIG9mIHRoZSBzZWxlY3QuXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0VmFsaWQoaXNWYWxpZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDU2VsZWN0LnByb3RvdHlwZSwgXCJyZXF1aXJlZFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHNlbGVjdCBpcyByZXF1aXJlZC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm91bmRhdGlvbi5nZXRSZXF1aXJlZCgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgY29udHJvbCB0byB0aGUgcmVxdWlyZWQgc3RhdGUuXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChpc1JlcXVpcmVkKSB7XG4gICAgICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0UmVxdWlyZWQoaXNSZXF1aXJlZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBSZS1jYWxjdWxhdGVzIGlmIHRoZSBub3RjaGVkIG91dGxpbmUgc2hvdWxkIGJlIG5vdGNoZWQgYW5kIGlmIHRoZSBsYWJlbFxuICAgICAqIHNob3VsZCBmbG9hdC5cbiAgICAgKi9cbiAgICBNRENTZWxlY3QucHJvdG90eXBlLmxheW91dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmxheW91dCgpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU3luY2hyb25pemVzIHRoZSBsaXN0IG9mIG9wdGlvbnMgd2l0aCB0aGUgc3RhdGUgb2YgdGhlIGZvdW5kYXRpb24uIENhbGxcbiAgICAgKiB0aGlzIHdoZW5ldmVyIG1lbnUgb3B0aW9ucyBhcmUgZHluYW1pY2FsbHkgdXBkYXRlZC5cbiAgICAgKi9cbiAgICBNRENTZWxlY3QucHJvdG90eXBlLmxheW91dE9wdGlvbnMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5sYXlvdXRPcHRpb25zKCk7XG4gICAgICAgIHRoaXMubWVudS5sYXlvdXQoKTtcbiAgICAgICAgLy8gVXBkYXRlIGNhY2hlZCBtZW51SXRlbVZhbHVlcyBmb3IgYWRhcHRlci5cbiAgICAgICAgdGhpcy5tZW51SXRlbVZhbHVlcyA9XG4gICAgICAgICAgICB0aGlzLm1lbnUuaXRlbXMubWFwKGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gZWwuZ2V0QXR0cmlidXRlKHN0cmluZ3MuVkFMVUVfQVRUUikgfHwgJyc7IH0pO1xuICAgICAgICBpZiAodGhpcy5oaWRkZW5JbnB1dCkge1xuICAgICAgICAgICAgdGhpcy5oaWRkZW5JbnB1dC52YWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1NlbGVjdC5wcm90b3R5cGUuZ2V0RGVmYXVsdEZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERPIE5PVCBJTkxJTkUgdGhpcyB2YXJpYWJsZS4gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGZvdW5kYXRpb25zIHRha2UgYSBQYXJ0aWFsPE1EQ0Zvb0FkYXB0ZXI+LlxuICAgICAgICAvLyBUbyBlbnN1cmUgd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IG9taXQgYW55IG1ldGhvZHMsIHdlIG5lZWQgYSBzZXBhcmF0ZSwgc3Ryb25nbHkgdHlwZWQgYWRhcHRlciB2YXJpYWJsZS5cbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5nZXRTZWxlY3RBZGFwdGVyTWV0aG9kcygpKSwgdGhpcy5nZXRDb21tb25BZGFwdGVyTWV0aG9kcygpKSwgdGhpcy5nZXRPdXRsaW5lQWRhcHRlck1ldGhvZHMoKSksIHRoaXMuZ2V0TGFiZWxBZGFwdGVyTWV0aG9kcygpKTtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENTZWxlY3RGb3VuZGF0aW9uKGFkYXB0ZXIsIHRoaXMuZ2V0Rm91bmRhdGlvbk1hcCgpKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgc2V0dXAgZm9yIHRoZSBtZW51LlxuICAgICAqL1xuICAgIE1EQ1NlbGVjdC5wcm90b3R5cGUubWVudVNldHVwID0gZnVuY3Rpb24gKG1lbnVGYWN0b3J5KSB7XG4gICAgICAgIHRoaXMubWVudUVsZW1lbnQgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzdHJpbmdzLk1FTlVfU0VMRUNUT1IpO1xuICAgICAgICB0aGlzLm1lbnUgPSBtZW51RmFjdG9yeSh0aGlzLm1lbnVFbGVtZW50KTtcbiAgICAgICAgdGhpcy5tZW51Lmhhc1R5cGVhaGVhZCA9IHRydWU7XG4gICAgICAgIHRoaXMubWVudS5zaW5nbGVTZWxlY3Rpb24gPSB0cnVlO1xuICAgICAgICB0aGlzLm1lbnVJdGVtVmFsdWVzID1cbiAgICAgICAgICAgIHRoaXMubWVudS5pdGVtcy5tYXAoZnVuY3Rpb24gKGVsKSB7IHJldHVybiBlbC5nZXRBdHRyaWJ1dGUoc3RyaW5ncy5WQUxVRV9BVFRSKSB8fCAnJzsgfSk7XG4gICAgfTtcbiAgICBNRENTZWxlY3QucHJvdG90eXBlLmNyZWF0ZVJpcHBsZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENSaXBwbGUuY3JlYXRlQWRhcHRlcih7IHJvb3Q6IHRoaXMuc2VsZWN0QW5jaG9yIH0pKSwgeyByZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RBbmNob3IuYWRkRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyKTtcbiAgICAgICAgICAgIH0sIGRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0QW5jaG9yLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlcik7XG4gICAgICAgICAgICB9IH0pO1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1JpcHBsZSh0aGlzLnNlbGVjdEFuY2hvciwgbmV3IE1EQ1JpcHBsZUZvdW5kYXRpb24oYWRhcHRlcikpO1xuICAgIH07XG4gICAgTURDU2VsZWN0LnByb3RvdHlwZS5nZXRTZWxlY3RBZGFwdGVyTWV0aG9kcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldE1lbnVJdGVtQXR0cjogZnVuY3Rpb24gKG1lbnVJdGVtLCBhdHRyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG1lbnVJdGVtLmdldEF0dHJpYnV0ZShhdHRyKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRTZWxlY3RlZFRleHQ6IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0ZWRUZXh0LnRleHRDb250ZW50ID0gdGV4dDtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBpc1NlbGVjdEFuY2hvckZvY3VzZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgPT09IF90aGlzLnNlbGVjdEFuY2hvcjsgfSxcbiAgICAgICAgICAgIGdldFNlbGVjdEFuY2hvckF0dHI6IGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuIF90aGlzLnNlbGVjdEFuY2hvci5nZXRBdHRyaWJ1dGUoYXR0cik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0U2VsZWN0QW5jaG9yQXR0cjogZnVuY3Rpb24gKGF0dHIsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc2VsZWN0QW5jaG9yLnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlU2VsZWN0QW5jaG9yQXR0cjogZnVuY3Rpb24gKGF0dHIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5zZWxlY3RBbmNob3IucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGFkZE1lbnVDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLm1lbnVFbGVtZW50LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmVNZW51Q2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5tZW51RWxlbWVudC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgb3Blbk1lbnU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5tZW51Lm9wZW4gPSB0cnVlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGNsb3NlTWVudTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLm1lbnUub3BlbiA9IGZhbHNlO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldEFuY2hvckVsZW1lbnQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuU0VMRUNUX0FOQ0hPUl9TRUxFQ1RPUik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0TWVudUFuY2hvckVsZW1lbnQ6IGZ1bmN0aW9uIChhbmNob3JFbCkge1xuICAgICAgICAgICAgICAgIF90aGlzLm1lbnUuc2V0QW5jaG9yRWxlbWVudChhbmNob3JFbCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0TWVudUFuY2hvckNvcm5lcjogZnVuY3Rpb24gKGFuY2hvckNvcm5lcikge1xuICAgICAgICAgICAgICAgIF90aGlzLm1lbnUuc2V0QW5jaG9yQ29ybmVyKGFuY2hvckNvcm5lcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0TWVudVdyYXBGb2N1czogZnVuY3Rpb24gKHdyYXBGb2N1cykge1xuICAgICAgICAgICAgICAgIF90aGlzLm1lbnUud3JhcEZvY3VzID0gd3JhcEZvY3VzO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFNlbGVjdGVkSW5kZXg6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgaW5kZXggPSBfdGhpcy5tZW51LnNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICAgICAgcmV0dXJuIGluZGV4IGluc3RhbmNlb2YgQXJyYXkgPyBpbmRleFswXSA6IGluZGV4O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldFNlbGVjdGVkSW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIF90aGlzLm1lbnUuc2VsZWN0ZWRJbmRleCA9IGluZGV4O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGZvY3VzTWVudUl0ZW1BdEluZGV4OiBmdW5jdGlvbiAoaW5kZXgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5tZW51Lml0ZW1zW2luZGV4XS5mb2N1cygpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldE1lbnVJdGVtQ291bnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLm1lbnUuaXRlbXMubGVuZ3RoOyB9LFxuICAgICAgICAgICAgLy8gQ2FjaGUgbWVudSBpdGVtIHZhbHVlcy4gbGF5b3V0T3B0aW9ucygpIHVwZGF0ZXMgdGhpcyBjYWNoZS5cbiAgICAgICAgICAgIGdldE1lbnVJdGVtVmFsdWVzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5tZW51SXRlbVZhbHVlczsgfSxcbiAgICAgICAgICAgIGdldE1lbnVJdGVtVGV4dEF0SW5kZXg6IGZ1bmN0aW9uIChpbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5tZW51LmdldFByaW1hcnlUZXh0QXRJbmRleChpbmRleCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaXNUeXBlYWhlYWRJblByb2dyZXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5tZW51LnR5cGVhaGVhZEluUHJvZ3Jlc3M7IH0sXG4gICAgICAgICAgICB0eXBlYWhlYWRNYXRjaEl0ZW06IGZ1bmN0aW9uIChuZXh0Q2hhciwgc3RhcnRpbmdJbmRleCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5tZW51LnR5cGVhaGVhZE1hdGNoSXRlbShuZXh0Q2hhciwgc3RhcnRpbmdJbmRleCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgIH07XG4gICAgTURDU2VsZWN0LnByb3RvdHlwZS5nZXRDb21tb25BZGFwdGVyTWV0aG9kcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdC5jbGFzc0xpc3QuYWRkKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkgeyByZXR1cm4gX3RoaXMucm9vdC5jbGFzc0xpc3QuY29udGFpbnMoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIHNldFJpcHBsZUNlbnRlcjogZnVuY3Rpb24gKG5vcm1hbGl6ZWRYKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubGluZVJpcHBsZSAmJiBfdGhpcy5saW5lUmlwcGxlLnNldFJpcHBsZUNlbnRlcihub3JtYWxpemVkWCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgYWN0aXZhdGVCb3R0b21MaW5lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubGluZVJpcHBsZSAmJiBfdGhpcy5saW5lUmlwcGxlLmFjdGl2YXRlKCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZGVhY3RpdmF0ZUJvdHRvbUxpbmU6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5saW5lUmlwcGxlICYmIF90aGlzLmxpbmVSaXBwbGUuZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIG5vdGlmeUNoYW5nZTogZnVuY3Rpb24gKHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmhpZGRlbklucHV0KSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmhpZGRlbklucHV0LnZhbHVlID0gdmFsdWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IF90aGlzLnNlbGVjdGVkSW5kZXg7XG4gICAgICAgICAgICAgICAgX3RoaXMuZW1pdChzdHJpbmdzLkNIQU5HRV9FVkVOVCwgeyB2YWx1ZTogdmFsdWUsIGluZGV4OiBpbmRleCB9LCB0cnVlIC8qIHNob3VsZEJ1YmJsZSAgKi8pO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICB9O1xuICAgIE1EQ1NlbGVjdC5wcm90b3R5cGUuZ2V0T3V0bGluZUFkYXB0ZXJNZXRob2RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaGFzT3V0bGluZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gQm9vbGVhbihfdGhpcy5vdXRsaW5lKTsgfSxcbiAgICAgICAgICAgIG5vdGNoT3V0bGluZTogZnVuY3Rpb24gKGxhYmVsV2lkdGgpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5vdXRsaW5lICYmIF90aGlzLm91dGxpbmUubm90Y2gobGFiZWxXaWR0aCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgY2xvc2VPdXRsaW5lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMub3V0bGluZSAmJiBfdGhpcy5vdXRsaW5lLmNsb3NlTm90Y2goKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgfTtcbiAgICBNRENTZWxlY3QucHJvdG90eXBlLmdldExhYmVsQWRhcHRlck1ldGhvZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoYXNMYWJlbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gISFfdGhpcy5sYWJlbDsgfSxcbiAgICAgICAgICAgIGZsb2F0TGFiZWw6IGZ1bmN0aW9uIChzaG91bGRGbG9hdCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmxhYmVsICYmIF90aGlzLmxhYmVsLmZsb2F0KHNob3VsZEZsb2F0KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRMYWJlbFdpZHRoOiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5sYWJlbCA/IF90aGlzLmxhYmVsLmdldFdpZHRoKCkgOiAwOyB9LFxuICAgICAgICAgICAgc2V0TGFiZWxSZXF1aXJlZDogZnVuY3Rpb24gKGlzUmVxdWlyZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5sYWJlbCAmJiBfdGhpcy5sYWJlbC5zZXRSZXF1aXJlZChpc1JlcXVpcmVkKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDYWxjdWxhdGVzIHdoZXJlIHRoZSBsaW5lIHJpcHBsZSBzaG91bGQgc3RhcnQgYmFzZWQgb24gdGhlIHggY29vcmRpbmF0ZSB3aXRoaW4gdGhlIGNvbXBvbmVudC5cbiAgICAgKi9cbiAgICBNRENTZWxlY3QucHJvdG90eXBlLmdldE5vcm1hbGl6ZWRYQ29vcmRpbmF0ZSA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmFyIHRhcmdldENsaWVudFJlY3QgPSBldnQudGFyZ2V0LmdldEJvdW5kaW5nQ2xpZW50UmVjdCgpO1xuICAgICAgICB2YXIgeENvb3JkaW5hdGUgPSB0aGlzLmlzVG91Y2hFdmVudChldnQpID8gZXZ0LnRvdWNoZXNbMF0uY2xpZW50WCA6IGV2dC5jbGllbnRYO1xuICAgICAgICByZXR1cm4geENvb3JkaW5hdGUgLSB0YXJnZXRDbGllbnRSZWN0LmxlZnQ7XG4gICAgfTtcbiAgICBNRENTZWxlY3QucHJvdG90eXBlLmlzVG91Y2hFdmVudCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgcmV0dXJuIEJvb2xlYW4oZXZ0LnRvdWNoZXMpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogUmV0dXJucyBhIG1hcCBvZiBhbGwgc3ViY29tcG9uZW50cyB0byBzdWJmb3VuZGF0aW9ucy5cbiAgICAgKi9cbiAgICBNRENTZWxlY3QucHJvdG90eXBlLmdldEZvdW5kYXRpb25NYXAgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBoZWxwZXJUZXh0OiB0aGlzLmhlbHBlclRleHQgPyB0aGlzLmhlbHBlclRleHQuZm91bmRhdGlvbkZvclNlbGVjdCA6XG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgbGVhZGluZ0ljb246IHRoaXMubGVhZGluZ0ljb24gPyB0aGlzLmxlYWRpbmdJY29uLmZvdW5kYXRpb25Gb3JTZWxlY3QgOlxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIHJldHVybiBNRENTZWxlY3Q7XG59KE1EQ0NvbXBvbmVudCkpO1xuZXhwb3J0IHsgTURDU2VsZWN0IH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb25lbnQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG4vKipcbiAqIENTUyBjbGFzc2VzIHVzZWQgZm9yIHN3aXRjaC5cbiAqL1xuZXhwb3J0IHZhciBDc3NDbGFzc2VzO1xuKGZ1bmN0aW9uIChDc3NDbGFzc2VzKSB7XG4gICAgQ3NzQ2xhc3Nlc1tcIlBST0NFU1NJTkdcIl0gPSBcIm1kYy1zd2l0Y2gtLXByb2Nlc3NpbmdcIjtcbiAgICBDc3NDbGFzc2VzW1wiU0VMRUNURURcIl0gPSBcIm1kYy1zd2l0Y2gtLXNlbGVjdGVkXCI7XG4gICAgQ3NzQ2xhc3Nlc1tcIlVOU0VMRUNURURcIl0gPSBcIm1kYy1zd2l0Y2gtLXVuc2VsZWN0ZWRcIjtcbn0pKENzc0NsYXNzZXMgfHwgKENzc0NsYXNzZXMgPSB7fSkpO1xuLyoqXG4gKiBRdWVyeSBzZWxlY3RvcnMgdXNlZCBmb3Igc3dpdGNoLlxuICovXG5leHBvcnQgdmFyIFNlbGVjdG9ycztcbihmdW5jdGlvbiAoU2VsZWN0b3JzKSB7XG4gICAgU2VsZWN0b3JzW1wiUklQUExFXCJdID0gXCIubWRjLXN3aXRjaF9fcmlwcGxlXCI7XG59KShTZWxlY3RvcnMgfHwgKFNlbGVjdG9ycyA9IHt9KSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzLCBfX3JlYWQsIF9fc3ByZWFkQXJyYXksIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG4vKipcbiAqIE1peGluIHRvIGFkZCBgTURDT2JzZXJ2ZXJgIGZ1bmN0aW9uYWxpdHkgdG8gYW4gb3B0aW9uYWwgYmFzZSBjbGFzcy5cbiAqXG4gKiBAZGVwcmVjYXRlZCBQcmVmZXIgTURDT2JzZXJ2ZXJGb3VuZGF0aW9uIGZvciBzdHJpY3RlciBjbG9zdXJlIGNvbXBsaWFuY2UuXG4gKiBAdGVtcGxhdGUgQyBPcHRpb25hbCBiYXNlIGNsYXNzIGNvbnN0cnVjdG9yIHR5cGUuXG4gKiBAcGFyYW0gYmFzZUNsYXNzIC0gT3B0aW9uYWwgYmFzZSBjbGFzcy5cbiAqIEByZXR1cm4gQSBjbGFzcyB0aGF0IGV4dGVuZHMgdGhlIG9wdGlvbmFsIGJhc2UgY2xhc3Mgd2l0aCBgTURDT2JzZXJ2ZXJgXG4gKiAgICAgZnVuY3Rpb25hbGl0eS5cbiAqL1xuZXhwb3J0IGZ1bmN0aW9uIG1kY09ic2VydmVyKGJhc2VDbGFzcykge1xuICAgIGlmIChiYXNlQ2xhc3MgPT09IHZvaWQgMCkgeyBiYXNlQ2xhc3MgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZ1bmN0aW9uIGNsYXNzXzEoKSB7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGNsYXNzXzE7XG4gICAgfSgpKTsgfVxuICAgIC8vIE1peGluIGNsYXNzZXMgY2Fubm90IHVzZSBwcml2YXRlIG1lbWJlcnMgYW5kIFN5bWJvbCgpIGNhbm5vdCBiZSB1c2VkIGluIDNQXG4gICAgLy8gZm9yIElFMTEuXG4gICAgdmFyIHVub2JzZXJ2ZU1hcCA9IG5ldyBXZWFrTWFwKCk7XG4gICAgcmV0dXJuIC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICAgICAgX19leHRlbmRzKE1EQ09ic2VydmVyLCBfc3VwZXIpO1xuICAgICAgICBmdW5jdGlvbiBNRENPYnNlcnZlcigpIHtcbiAgICAgICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICAgICAgfVxuICAgICAgICBNRENPYnNlcnZlci5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9ic2VydmVycykge1xuICAgICAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAgICAgdmFyIGNsZWFudXAgPSBbXTtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgZm9yICh2YXIgX2IgPSBfX3ZhbHVlcyhPYmplY3Qua2V5cyhvYnNlcnZlcnMpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gb2JzZXJ2ZXJzW3Byb3BlcnR5XS5iaW5kKHRoaXMpO1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwLnB1c2gob2JzZXJ2ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIG9ic2VydmVyKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIHVub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgZV8yLCBfYTtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBjbGVhbnVwXzEgPSBfX3ZhbHVlcyhjbGVhbnVwKSwgY2xlYW51cF8xXzEgPSBjbGVhbnVwXzEubmV4dCgpOyAhY2xlYW51cF8xXzEuZG9uZTsgY2xlYW51cF8xXzEgPSBjbGVhbnVwXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgY2xlYW51cEZuID0gY2xlYW51cF8xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBjbGVhbnVwRm4oKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKGNsZWFudXBfMV8xICYmICFjbGVhbnVwXzFfMS5kb25lICYmIChfYSA9IGNsZWFudXBfMS5yZXR1cm4pKSBfYS5jYWxsKGNsZWFudXBfMSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzIpIHRocm93IGVfMi5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB2YXIgdW5vYnNlcnZlcyA9IHVub2JzZXJ2ZU1hcC5nZXQoX3RoaXMpIHx8IFtdO1xuICAgICAgICAgICAgICAgIHZhciBpbmRleCA9IHVub2JzZXJ2ZXMuaW5kZXhPZih1bm9ic2VydmUpO1xuICAgICAgICAgICAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgICAgICAgICAgICAgIHVub2JzZXJ2ZXMuc3BsaWNlKGluZGV4LCAxKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9O1xuICAgICAgICAgICAgdmFyIHVub2JzZXJ2ZXMgPSB1bm9ic2VydmVNYXAuZ2V0KHRoaXMpO1xuICAgICAgICAgICAgaWYgKCF1bm9ic2VydmVzKSB7XG4gICAgICAgICAgICAgICAgdW5vYnNlcnZlcyA9IFtdO1xuICAgICAgICAgICAgICAgIHVub2JzZXJ2ZU1hcC5zZXQodGhpcywgdW5vYnNlcnZlcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB1bm9ic2VydmVzLnB1c2godW5vYnNlcnZlKTtcbiAgICAgICAgICAgIHJldHVybiB1bm9ic2VydmU7XG4gICAgICAgIH07XG4gICAgICAgIE1EQ09ic2VydmVyLnByb3RvdHlwZS5zZXRPYnNlcnZlcnNFbmFibGVkID0gZnVuY3Rpb24gKHRhcmdldCwgZW5hYmxlZCkge1xuICAgICAgICAgICAgc2V0T2JzZXJ2ZXJzRW5hYmxlZCh0YXJnZXQsIGVuYWJsZWQpO1xuICAgICAgICB9O1xuICAgICAgICBNRENPYnNlcnZlci5wcm90b3R5cGUudW5vYnNlcnZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVfMywgX2E7XG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgYSBjb3B5IHNpbmNlIHVub2JzZXJ2ZSgpIHdpbGwgcmVtb3ZlIHRoZW1zZWx2ZXMgZnJvbSB0aGVcbiAgICAgICAgICAgIC8vIGFycmF5XG4gICAgICAgICAgICB2YXIgdW5vYnNlcnZlcyA9IHVub2JzZXJ2ZU1hcC5nZXQodGhpcykgfHwgW107XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoX19zcHJlYWRBcnJheShbXSwgX19yZWFkKHVub2JzZXJ2ZXMpKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIHVub2JzZXJ2ZSA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICB1bm9ic2VydmUoKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8zXzEpIHsgZV8zID0geyBlcnJvcjogZV8zXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKF9jICYmICFfYy5kb25lICYmIChfYSA9IF9iLnJldHVybikpIF9hLmNhbGwoX2IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMykgdGhyb3cgZV8zLmVycm9yOyB9XG4gICAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBNRENPYnNlcnZlcjtcbiAgICB9KGJhc2VDbGFzcykpO1xufVxuLyoqXG4gKiBPYnNlcnZlIGEgdGFyZ2V0J3MgcHJvcGVydHkgZm9yIGNoYW5nZXMuIFdoZW4gYSBwcm9wZXJ0eSBjaGFuZ2VzLCB0aGVcbiAqIHByb3ZpZGVkIGBPYnNlcnZlcmAgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggdGhlIHByb3BlcnRpZXMgY3VycmVudCBhbmRcbiAqIHByZXZpb3VzIHZhbHVlcy5cbiAqXG4gKiBUaGUgcmV0dXJuZWQgY2xlYW51cCBmdW5jdGlvbiB3aWxsIHN0b3AgbGlzdGVuaW5nIHRvIGNoYW5nZXMgZm9yIHRoZVxuICogcHJvdmlkZWQgYE9ic2VydmVyYC5cbiAqXG4gKiBAdGVtcGxhdGUgVCBUaGUgb2JzZXJ2ZWQgdGFyZ2V0IHR5cGUuXG4gKiBAdGVtcGxhdGUgSyBUaGUgb2JzZXJ2ZWQgcHJvcGVydHkuXG4gKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHRhcmdldCB0byBvYnNlcnZlLlxuICogQHBhcmFtIHByb3BlcnR5IC0gVGhlIHByb3BlcnR5IG9mIHRoZSB0YXJnZXQgdG8gb2JzZXJ2ZS5cbiAqIEBwYXJhbSBvYnNlcnZlciAtIEFuIG9ic2VydmVyIGZ1bmN0aW9uIHRvIGludm9rZSBlYWNoIHRpbWUgdGhlIHByb3BlcnR5XG4gKiAgICAgY2hhbmdlcy5cbiAqIEByZXR1cm4gQSBjbGVhbnVwIGZ1bmN0aW9uIHRoYXQgd2lsbCBzdG9wIG9ic2VydmluZyBjaGFuZ2VzIGZvciB0aGUgcHJvdmlkZWRcbiAqICAgICBgT2JzZXJ2ZXJgLlxuICovXG5leHBvcnQgZnVuY3Rpb24gb2JzZXJ2ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIG9ic2VydmVyKSB7XG4gICAgdmFyIHRhcmdldE9ic2VydmVycyA9IGluc3RhbGxPYnNlcnZlcih0YXJnZXQsIHByb3BlcnR5KTtcbiAgICB2YXIgb2JzZXJ2ZXJzID0gdGFyZ2V0T2JzZXJ2ZXJzLmdldE9ic2VydmVycyhwcm9wZXJ0eSk7XG4gICAgb2JzZXJ2ZXJzLnB1c2gob2JzZXJ2ZXIpO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIG9ic2VydmVycy5zcGxpY2Uob2JzZXJ2ZXJzLmluZGV4T2Yob2JzZXJ2ZXIpLCAxKTtcbiAgICB9O1xufVxuLyoqXG4gKiBBIE1hcCBvZiBhbGwgYFRhcmdldE9ic2VydmVyc2AgdGhhdCBoYXZlIGJlZW4gaW5zdGFsbGVkLlxuICovXG52YXIgYWxsVGFyZ2V0T2JzZXJ2ZXJzID0gbmV3IFdlYWtNYXAoKTtcbi8qKlxuICogSW5zdGFsbHMgYSBgVGFyZ2V0T2JzZXJ2ZXJzYCBmb3IgdGhlIHByb3ZpZGVkIHRhcmdldCAoaWYgbm90IGFscmVhZHlcbiAqIGluc3RhbGxlZCksIGFuZCByZXBsYWNlcyB0aGUgZ2l2ZW4gcHJvcGVydHkgd2l0aCBhIGdldHRlciBhbmQgc2V0dGVyIHRoYXRcbiAqIHdpbGwgcmVzcG9uZCB0byBjaGFuZ2VzIGFuZCBjYWxsIGBUYXJnZXRPYnNlcnZlcnNgLlxuICpcbiAqIFN1YnNlcXVlbnQgY2FsbHMgdG8gYGluc3RhbGxPYnNlcnZlcigpYCB3aXRoIHRoZSBzYW1lIHRhcmdldCBhbmQgcHJvcGVydHlcbiAqIHdpbGwgbm90IG92ZXJyaWRlIHRoZSBwcm9wZXJ0eSdzIHByZXZpb3VzbHkgaW5zdGFsbGVkIGdldHRlci9zZXR0ZXIuXG4gKlxuICogQHRlbXBsYXRlIFQgVGhlIG9ic2VydmVkIHRhcmdldCB0eXBlLlxuICogQHRlbXBsYXRlIEsgVGhlIG9ic2VydmVkIHByb3BlcnR5IHRvIGNyZWF0ZSBhIGdldHRlci9zZXR0ZXIgZm9yLlxuICogQHBhcmFtIHRhcmdldCAtIFRoZSB0YXJnZXQgdG8gb2JzZXJ2ZS5cbiAqIEBwYXJhbSBwcm9wZXJ0eSAtIFRoZSBwcm9wZXJ0eSB0byBjcmVhdGUgYSBnZXR0ZXIvc2V0dGVyIGZvciwgaWYgbmVlZGVkLlxuICogQHJldHVybiBUaGUgaW5zdGFsbGVkIGBUYXJnZXRPYnNlcnZlcnNgIGZvciB0aGUgcHJvdmlkZWQgdGFyZ2V0LlxuICovXG5mdW5jdGlvbiBpbnN0YWxsT2JzZXJ2ZXIodGFyZ2V0LCBwcm9wZXJ0eSkge1xuICAgIHZhciBvYnNlcnZlcnNNYXAgPSBuZXcgTWFwKCk7XG4gICAgaWYgKCFhbGxUYXJnZXRPYnNlcnZlcnMuaGFzKHRhcmdldCkpIHtcbiAgICAgICAgYWxsVGFyZ2V0T2JzZXJ2ZXJzLnNldCh0YXJnZXQsIHtcbiAgICAgICAgICAgIGlzRW5hYmxlZDogdHJ1ZSxcbiAgICAgICAgICAgIGdldE9ic2VydmVyczogZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlcnMgPSBvYnNlcnZlcnNNYXAuZ2V0KGtleSkgfHwgW107XG4gICAgICAgICAgICAgICAgaWYgKCFvYnNlcnZlcnNNYXAuaGFzKGtleSkpIHtcbiAgICAgICAgICAgICAgICAgICAgb2JzZXJ2ZXJzTWFwLnNldChrZXksIG9ic2VydmVycyk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBvYnNlcnZlcnM7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgaW5zdGFsbGVkUHJvcGVydGllczogbmV3IFNldCgpXG4gICAgICAgIH0pO1xuICAgIH1cbiAgICB2YXIgdGFyZ2V0T2JzZXJ2ZXJzID0gYWxsVGFyZ2V0T2JzZXJ2ZXJzLmdldCh0YXJnZXQpO1xuICAgIGlmICh0YXJnZXRPYnNlcnZlcnMuaW5zdGFsbGVkUHJvcGVydGllcy5oYXMocHJvcGVydHkpKSB7XG4gICAgICAgIC8vIFRoZSBnZXR0ZXIvc2V0dGVyIGhhcyBhbHJlYWR5IGJlZW4gcmVwbGFjZWQgZm9yIHRoaXMgcHJvcGVydHlcbiAgICAgICAgcmV0dXJuIHRhcmdldE9ic2VydmVycztcbiAgICB9XG4gICAgLy8gUmV0cmlldmUgKG9yIGNyZWF0ZSBpZiBpdCdzIGEgcGxhaW4gcHJvcGVydHkpIHRoZSBvcmlnaW5hbCBkZXNjcmlwdG9yIGZyb21cbiAgICAvLyB0aGUgdGFyZ2V0Li4uXG4gICAgdmFyIGRlc2NyaXB0b3IgPSBnZXREZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHkpIHx8IHtcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlLFxuICAgICAgICBlbnVtZXJhYmxlOiB0cnVlLFxuICAgICAgICB2YWx1ZTogdGFyZ2V0W3Byb3BlcnR5XSxcbiAgICAgICAgd3JpdGFibGU6IHRydWVcbiAgICB9O1xuICAgIC8vIC4uLmFuZCBjcmVhdGUgYSBjb3B5IHRoYXQgd2lsbCBiZSB1c2VkIGZvciB0aGUgb2JzZXJ2ZXIuXG4gICAgdmFyIG9ic2VydmVkRGVzY3JpcHRvciA9IF9fYXNzaWduKHt9LCBkZXNjcmlwdG9yKTtcbiAgICB2YXIgZGVzY0dldCA9IGRlc2NyaXB0b3IuZ2V0LCBkZXNjU2V0ID0gZGVzY3JpcHRvci5zZXQ7XG4gICAgaWYgKCd2YWx1ZScgaW4gZGVzY3JpcHRvcikge1xuICAgICAgICAvLyBUaGUgZGVzY3JpcHRvciBpcyBhIHNpbXBsZSB2YWx1ZSAobm90IGEgZ2V0dGVyL3NldHRlcikuXG4gICAgICAgIC8vIEZvciBvdXIgb2JzZXJ2ZXIgZGVzY3JpcHRvciB0aGF0IHdlIGNvcGllZCwgZGVsZXRlIHRoZSB2YWx1ZS93cml0YWJsZVxuICAgICAgICAvLyBwcm9wZXJ0aWVzLCBzaW5jZSB0aGV5IGFyZSBpbmNvbXBhdGlibGUgd2l0aCB0aGUgZ2V0L3NldCBwcm9wZXJ0aWVzXG4gICAgICAgIC8vIGZvciBkZXNjcmlwdG9ycy5cbiAgICAgICAgZGVsZXRlIG9ic2VydmVkRGVzY3JpcHRvci52YWx1ZTtcbiAgICAgICAgZGVsZXRlIG9ic2VydmVkRGVzY3JpcHRvci53cml0YWJsZTtcbiAgICAgICAgLy8gU2V0IHVwIGEgc2ltcGxlIGdldHRlci4uLlxuICAgICAgICB2YXIgdmFsdWVfMSA9IGRlc2NyaXB0b3IudmFsdWU7XG4gICAgICAgIGRlc2NHZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB2YWx1ZV8xOyB9O1xuICAgICAgICAvLyAuLi5hbmQgc2V0dGVyIChpZiB0aGUgb3JpZ2luYWwgcHJvcGVydHkgd2FzIHdyaXRhYmxlKS5cbiAgICAgICAgaWYgKGRlc2NyaXB0b3Iud3JpdGFibGUpIHtcbiAgICAgICAgICAgIGRlc2NTZXQgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgICAgICB2YWx1ZV8xID0gbmV3VmFsdWU7XG4gICAgICAgICAgICB9O1xuICAgICAgICB9XG4gICAgfVxuICAgIGlmIChkZXNjR2V0KSB7XG4gICAgICAgIG9ic2VydmVkRGVzY3JpcHRvci5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAvLyBgdGhpcyBhcyBUYCBuZWVkZWQgZm9yIGNsb3N1cmUgY29uZm9ybWFuY2VcbiAgICAgICAgICAgIHJldHVybiBkZXNjR2V0LmNhbGwodGhpcyk7XG4gICAgICAgIH07XG4gICAgfVxuICAgIGlmIChkZXNjU2V0KSB7XG4gICAgICAgIG9ic2VydmVkRGVzY3JpcHRvci5zZXQgPSBmdW5jdGlvbiAobmV3VmFsdWUpIHtcbiAgICAgICAgICAgIHZhciBlXzQsIF9hO1xuICAgICAgICAgICAgLy8gYHRodXMgYXMgVGAgbmVlZGVkIGZvciBjbG9zdXJlIGNvbmZvcm1hbmNlXG4gICAgICAgICAgICB2YXIgcHJldmlvdXMgPSBkZXNjR2V0ID8gZGVzY0dldC5jYWxsKHRoaXMpIDogbmV3VmFsdWU7XG4gICAgICAgICAgICBkZXNjU2V0LmNhbGwodGhpcywgbmV3VmFsdWUpO1xuICAgICAgICAgICAgaWYgKHRhcmdldE9ic2VydmVycy5pc0VuYWJsZWQgJiYgKCFkZXNjR2V0IHx8IG5ld1ZhbHVlICE9PSBwcmV2aW91cykpIHtcbiAgICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKHRhcmdldE9ic2VydmVycy5nZXRPYnNlcnZlcnMocHJvcGVydHkpKSwgX2MgPSBfYi5uZXh0KCk7ICFfYy5kb25lOyBfYyA9IF9iLm5leHQoKSkge1xuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9ic2VydmVyID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgICAgICAgICBvYnNlcnZlcihuZXdWYWx1ZSwgcHJldmlvdXMpO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNhdGNoIChlXzRfMSkgeyBlXzQgPSB7IGVycm9yOiBlXzRfMSB9OyB9XG4gICAgICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzQpIHRocm93IGVfNC5lcnJvcjsgfVxuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfTtcbiAgICB9XG4gICAgdGFyZ2V0T2JzZXJ2ZXJzLmluc3RhbGxlZFByb3BlcnRpZXMuYWRkKHByb3BlcnR5KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGFyZ2V0LCBwcm9wZXJ0eSwgb2JzZXJ2ZWREZXNjcmlwdG9yKTtcbiAgICByZXR1cm4gdGFyZ2V0T2JzZXJ2ZXJzO1xufVxuLyoqXG4gKiBSZXRyaWV2ZXMgdGhlIGRlc2NyaXB0b3IgZm9yIGEgcHJvcGVydHkgZnJvbSB0aGUgcHJvdmlkZWQgdGFyZ2V0LiBUaGlzXG4gKiBmdW5jdGlvbiB3aWxsIHdhbGsgdXAgdGhlIHRhcmdldCdzIHByb3RvdHlwZSBjaGFpbiB0byBzZWFyY2ggZm9yIHRoZVxuICogZGVzY3JpcHRvci5cbiAqXG4gKiBAdGVtcGxhdGUgVCBUaGUgdGFyZ2V0IHR5cGUuXG4gKiBAdGVtcGxhdGUgSyBUaGUgcHJvcGVydHkgdHlwZS5cbiAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHRvIHJldHJpZXZlIGEgZGVzY3JpcHRvciBmcm9tLlxuICogQHBhcmFtIHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIHByb3BlcnR5IHRvIHJldHJpZXZlIGEgZGVzY3JpcHRvciBmb3IuXG4gKiBAcmV0dXJuIHRoZSBkZXNjcmlwdG9yLCBvciB1bmRlZmluZWQgaWYgaXQgZG9lcyBub3QgZXhpc3QuIEtlZXAgaW4gbWluZCB0aGF0XG4gKiAgICAgcGxhaW4gcHJvcGVydGllcyBtYXkgbm90IGhhdmUgYSBkZXNjcmlwdG9yIGRlZmluZWQuXG4gKi9cbmV4cG9ydCBmdW5jdGlvbiBnZXREZXNjcmlwdG9yKHRhcmdldCwgcHJvcGVydHkpIHtcbiAgICB2YXIgZGVzY3JpcHRvclRhcmdldCA9IHRhcmdldDtcbiAgICB2YXIgZGVzY3JpcHRvcjtcbiAgICB3aGlsZSAoZGVzY3JpcHRvclRhcmdldCkge1xuICAgICAgICBkZXNjcmlwdG9yID0gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihkZXNjcmlwdG9yVGFyZ2V0LCBwcm9wZXJ0eSk7XG4gICAgICAgIGlmIChkZXNjcmlwdG9yKSB7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgfVxuICAgICAgICAvLyBXYWxrIHVwIHRoZSBpbnN0YW5jZSdzIHByb3RvdHlwZSBjaGFpbiBpbiBjYXNlIHRoZSBwcm9wZXJ0eSBpcyBkZWNsYXJlZFxuICAgICAgICAvLyBvbiBhIHN1cGVyY2xhc3MuXG4gICAgICAgIGRlc2NyaXB0b3JUYXJnZXQgPSBPYmplY3QuZ2V0UHJvdG90eXBlT2YoZGVzY3JpcHRvclRhcmdldCk7XG4gICAgfVxuICAgIHJldHVybiBkZXNjcmlwdG9yO1xufVxuLyoqXG4gKiBFbmFibGVzIG9yIGRpc2FibGVzIGFsbCBvYnNlcnZlcnMgZm9yIGEgcHJvdmlkZWQgdGFyZ2V0LiBDaGFuZ2VzIHRvIG9ic2VydmVkXG4gKiBwcm9wZXJ0aWVzIHdpbGwgbm90IGNhbGwgYW55IG9ic2VydmVycyB3aGVuIGRpc2FibGVkLlxuICpcbiAqIEB0ZW1wbGF0ZSBUIFRoZSBvYnNlcnZlZCB0YXJnZXQgdHlwZS5cbiAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHRvIGVuYWJsZSBvciBkaXNhYmxlIG9ic2VydmVycyBmb3IuXG4gKiBAcGFyYW0gZW5hYmxlZCAtIFRydWUgdG8gZW5hYmxlIG9yIGZhbHNlIHRvIGRpc2FibGUgb2JzZXJ2ZXJzLlxuICovXG5leHBvcnQgZnVuY3Rpb24gc2V0T2JzZXJ2ZXJzRW5hYmxlZCh0YXJnZXQsIGVuYWJsZWQpIHtcbiAgICB2YXIgdGFyZ2V0T2JzZXJ2ZXJzID0gYWxsVGFyZ2V0T2JzZXJ2ZXJzLmdldCh0YXJnZXQpO1xuICAgIGlmICh0YXJnZXRPYnNlcnZlcnMpIHtcbiAgICAgICAgdGFyZ2V0T2JzZXJ2ZXJzLmlzRW5hYmxlZCA9IGVuYWJsZWQ7XG4gICAgfVxufVxuLy8jIHNvdXJjZU1hcHBpbmdVUkw9b2JzZXJ2ZXIuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMjEgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMsIF9fcmVhZCwgX19zcHJlYWRBcnJheSwgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0ZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgb2JzZXJ2ZVByb3BlcnR5LCBzZXRPYnNlcnZlcnNFbmFibGVkIH0gZnJvbSAnLi9vYnNlcnZlcic7XG52YXIgTURDT2JzZXJ2ZXJGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENPYnNlcnZlckZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDT2JzZXJ2ZXJGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyLmNhbGwodGhpcywgYWRhcHRlcikgfHwgdGhpcztcbiAgICAgICAgLyoqIEEgc2V0IG9mIGNsZWFudXAgZnVuY3Rpb25zIHRvIHVub2JzZXJ2ZSBjaGFuZ2VzLiAqL1xuICAgICAgICBfdGhpcy51bm9ic2VydmVzID0gbmV3IFNldCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1EQ09ic2VydmVyRm91bmRhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMudW5vYnNlcnZlKCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBPYnNlcnZlIGEgdGFyZ2V0J3MgcHJvcGVydGllcyBmb3IgY2hhbmdlcyB1c2luZyB0aGUgcHJvdmlkZWQgbWFwIG9mXG4gICAgICogcHJvcGVydHkgbmFtZXMgYW5kIG9ic2VydmVyIGZ1bmN0aW9ucy5cbiAgICAgKlxuICAgICAqIEB0ZW1wbGF0ZSBUIFRoZSB0YXJnZXQgdHlwZS5cbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHRhcmdldCB0byBvYnNlcnZlLlxuICAgICAqIEBwYXJhbSBvYnNlcnZlcnMgLSBBbiBvYmplY3Qgd2hvc2Uga2V5cyBhcmUgdGFyZ2V0IHByb3BlcnRpZXMgYW5kIHZhbHVlc1xuICAgICAqICAgICBhcmUgb2JzZXJ2ZXIgZnVuY3Rpb25zIHRoYXQgYXJlIGNhbGxlZCB3aGVuIHRoZSBhc3NvY2lhdGVkIHByb3BlcnR5XG4gICAgICogICAgIGNoYW5nZXMuXG4gICAgICogQHJldHVybiBBIGNsZWFudXAgZnVuY3Rpb24gdGhhdCBjYW4gYmUgY2FsbGVkIHRvIHVub2JzZXJ2ZSB0aGVcbiAgICAgKiAgICAgdGFyZ2V0LlxuICAgICAqL1xuICAgIE1EQ09ic2VydmVyRm91bmRhdGlvbi5wcm90b3R5cGUub2JzZXJ2ZSA9IGZ1bmN0aW9uICh0YXJnZXQsIG9ic2VydmVycykge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdmFyIGNsZWFudXAgPSBbXTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXMoT2JqZWN0LmtleXMob2JzZXJ2ZXJzKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgcHJvcGVydHkgPSBfYy52YWx1ZTtcbiAgICAgICAgICAgICAgICB2YXIgb2JzZXJ2ZXIgPSBvYnNlcnZlcnNbcHJvcGVydHldLmJpbmQodGhpcyk7XG4gICAgICAgICAgICAgICAgY2xlYW51cC5wdXNoKHRoaXMub2JzZXJ2ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIG9ic2VydmVyKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8xKSB0aHJvdyBlXzEuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICB2YXIgdW5vYnNlcnZlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIGVfMiwgX2E7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGNsZWFudXBfMSA9IF9fdmFsdWVzKGNsZWFudXApLCBjbGVhbnVwXzFfMSA9IGNsZWFudXBfMS5uZXh0KCk7ICFjbGVhbnVwXzFfMS5kb25lOyBjbGVhbnVwXzFfMSA9IGNsZWFudXBfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICAgICAgdmFyIGNsZWFudXBGbiA9IGNsZWFudXBfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgICAgICBjbGVhbnVwRm4oKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKGNsZWFudXBfMV8xICYmICFjbGVhbnVwXzFfMS5kb25lICYmIChfYSA9IGNsZWFudXBfMS5yZXR1cm4pKSBfYS5jYWxsKGNsZWFudXBfMSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIF90aGlzLnVub2JzZXJ2ZXMuZGVsZXRlKHVub2JzZXJ2ZSk7XG4gICAgICAgIH07XG4gICAgICAgIHRoaXMudW5vYnNlcnZlcy5hZGQodW5vYnNlcnZlKTtcbiAgICAgICAgcmV0dXJuIHVub2JzZXJ2ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIE9ic2VydmUgYSB0YXJnZXQncyBwcm9wZXJ0eSBmb3IgY2hhbmdlcy4gV2hlbiBhIHByb3BlcnR5IGNoYW5nZXMsIHRoZVxuICAgICAqIHByb3ZpZGVkIGBPYnNlcnZlcmAgZnVuY3Rpb24gd2lsbCBiZSBpbnZva2VkIHdpdGggdGhlIHByb3BlcnRpZXMgY3VycmVudFxuICAgICAqIGFuZCBwcmV2aW91cyB2YWx1ZXMuXG4gICAgICpcbiAgICAgKiBUaGUgcmV0dXJuZWQgY2xlYW51cCBmdW5jdGlvbiB3aWxsIHN0b3AgbGlzdGVuaW5nIHRvIGNoYW5nZXMgZm9yIHRoZVxuICAgICAqIHByb3ZpZGVkIGBPYnNlcnZlcmAuXG4gICAgICpcbiAgICAgKiBAdGVtcGxhdGUgVCBUaGUgb2JzZXJ2ZWQgdGFyZ2V0IHR5cGUuXG4gICAgICogQHRlbXBsYXRlIEsgVGhlIG9ic2VydmVkIHByb3BlcnR5LlxuICAgICAqIEBwYXJhbSB0YXJnZXQgLSBUaGUgdGFyZ2V0IHRvIG9ic2VydmUuXG4gICAgICogQHBhcmFtIHByb3BlcnR5IC0gVGhlIHByb3BlcnR5IG9mIHRoZSB0YXJnZXQgdG8gb2JzZXJ2ZS5cbiAgICAgKiBAcGFyYW0gb2JzZXJ2ZXIgLSBBbiBvYnNlcnZlciBmdW5jdGlvbiB0byBpbnZva2UgZWFjaCB0aW1lIHRoZSBwcm9wZXJ0eVxuICAgICAqICAgICBjaGFuZ2VzLlxuICAgICAqIEByZXR1cm4gQSBjbGVhbnVwIGZ1bmN0aW9uIHRoYXQgd2lsbCBzdG9wIG9ic2VydmluZyBjaGFuZ2VzIGZvciB0aGVcbiAgICAgKiAgICAgcHJvdmlkZWQgYE9ic2VydmVyYC5cbiAgICAgKi9cbiAgICBNRENPYnNlcnZlckZvdW5kYXRpb24ucHJvdG90eXBlLm9ic2VydmVQcm9wZXJ0eSA9IGZ1bmN0aW9uICh0YXJnZXQsIHByb3BlcnR5LCBvYnNlcnZlcikge1xuICAgICAgICByZXR1cm4gb2JzZXJ2ZVByb3BlcnR5KHRhcmdldCwgcHJvcGVydHksIG9ic2VydmVyKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEVuYWJsZXMgb3IgZGlzYWJsZXMgYWxsIG9ic2VydmVycyBmb3IgdGhlIHByb3ZpZGVkIHRhcmdldC4gRGlzYWJsaW5nXG4gICAgICogb2JzZXJ2ZXJzIHdpbGwgcHJldmVudCB0aGVtIGZyb20gYmVpbmcgY2FsbGVkIHVudGlsIHRoZXkgYXJlIHJlLWVuYWJsZWQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gdGFyZ2V0IC0gVGhlIHRhcmdldCB0byBlbmFibGUgb3IgZGlzYWJsZSBvYnNlcnZlcnMgZm9yLlxuICAgICAqIEBwYXJhbSBlbmFibGVkIC0gV2hldGhlciBvciBub3Qgb2JzZXJ2ZXJzIHNob3VsZCBiZSBjYWxsZWQuXG4gICAgICovXG4gICAgTURDT2JzZXJ2ZXJGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRPYnNlcnZlcnNFbmFibGVkID0gZnVuY3Rpb24gKHRhcmdldCwgZW5hYmxlZCkge1xuICAgICAgICBzZXRPYnNlcnZlcnNFbmFibGVkKHRhcmdldCwgZW5hYmxlZCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBDbGVhbiB1cCBhbGwgb2JzZXJ2ZXJzIGFuZCBzdG9wIGxpc3RlbmluZyBmb3IgcHJvcGVydHkgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBNRENPYnNlcnZlckZvdW5kYXRpb24ucHJvdG90eXBlLnVub2JzZXJ2ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMywgX2E7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICAvLyBJdGVyYXRlIG92ZXIgYSBjb3B5IHNpbmNlIHVub2JzZXJ2ZSgpIHdpbGwgcmVtb3ZlIHRoZW1zZWx2ZXMgZnJvbSB0aGUgc2V0XG4gICAgICAgICAgICBmb3IgKHZhciBfYiA9IF9fdmFsdWVzKF9fc3ByZWFkQXJyYXkoW10sIF9fcmVhZCh0aGlzLnVub2JzZXJ2ZXMpKSksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgdW5vYnNlcnZlID0gX2MudmFsdWU7XG4gICAgICAgICAgICAgICAgdW5vYnNlcnZlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChfYyAmJiAhX2MuZG9uZSAmJiAoX2EgPSBfYi5yZXR1cm4pKSBfYS5jYWxsKF9iKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8zKSB0aHJvdyBlXzMuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ09ic2VydmVyRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDT2JzZXJ2ZXJGb3VuZGF0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1vYnNlcnZlci1mb3VuZGF0aW9uLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENPYnNlcnZlckZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9vYnNlcnZlci1mb3VuZGF0aW9uJztcbmltcG9ydCB7IENzc0NsYXNzZXMgfSBmcm9tICcuL2NvbnN0YW50cyc7XG4vKipcbiAqIGBNRENTd2l0Y2hGb3VuZGF0aW9uYCBwcm92aWRlcyBhIHN0YXRlLW9ubHkgZm91bmRhdGlvbiBmb3IgYSBzd2l0Y2hcbiAqIGNvbXBvbmVudC5cbiAqXG4gKiBTdGF0ZSBvYnNlcnZlcnMgYW5kIGV2ZW50IGhhbmRsZXIgZW50cnlwb2ludHMgdXBkYXRlIGEgY29tcG9uZW50J3MgYWRhcHRlcidzXG4gKiBzdGF0ZSB3aXRoIHRoZSBsb2dpYyBuZWVkZWQgZm9yIHN3aXRjaCB0byBmdW5jdGlvbi5cbiAqL1xudmFyIE1EQ1N3aXRjaEZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ1N3aXRjaEZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDU3dpdGNoRm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGFkYXB0ZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmhhbmRsZUNsaWNrID0gX3RoaXMuaGFuZGxlQ2xpY2suYmluZChfdGhpcyk7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGZvdW5kYXRpb24gYW5kIHN0YXJ0cyBvYnNlcnZpbmcgc3RhdGUgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBNRENTd2l0Y2hGb3VuZGF0aW9uLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm9ic2VydmUodGhpcy5hZGFwdGVyLnN0YXRlLCB7XG4gICAgICAgICAgICBkaXNhYmxlZDogdGhpcy5zdG9wUHJvY2Vzc2luZ0lmRGlzYWJsZWQsXG4gICAgICAgICAgICBwcm9jZXNzaW5nOiB0aGlzLnN0b3BQcm9jZXNzaW5nSWZEaXNhYmxlZCxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBFdmVudCBoYW5kbGVyIGZvciBzd2l0Y2ggY2xpY2sgZXZlbnRzLiBDbGlja2luZyBvbiBhIHN3aXRjaCB3aWxsIHRvZ2dsZSBpdHNcbiAgICAgKiBzZWxlY3RlZCBzdGF0ZS5cbiAgICAgKi9cbiAgICBNRENTd2l0Y2hGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVDbGljayA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlci5zdGF0ZS5kaXNhYmxlZCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5zdGF0ZS5zZWxlY3RlZCA9ICF0aGlzLmFkYXB0ZXIuc3RhdGUuc2VsZWN0ZWQ7XG4gICAgfTtcbiAgICBNRENTd2l0Y2hGb3VuZGF0aW9uLnByb3RvdHlwZS5zdG9wUHJvY2Vzc2luZ0lmRGlzYWJsZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuc3RhdGUuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zdGF0ZS5wcm9jZXNzaW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNRENTd2l0Y2hGb3VuZGF0aW9uO1xufShNRENPYnNlcnZlckZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ1N3aXRjaEZvdW5kYXRpb24gfTtcbi8qKlxuICogYE1EQ1N3aXRjaFJlbmRlckZvdW5kYXRpb25gIHByb3ZpZGVzIGEgc3RhdGUgYW5kIHJlbmRlcmluZyBmb3VuZGF0aW9uIGZvciBhXG4gKiBzd2l0Y2ggY29tcG9uZW50LlxuICpcbiAqIFN0YXRlIG9ic2VydmVycyBhbmQgZXZlbnQgaGFuZGxlciBlbnRyeXBvaW50cyB1cGRhdGUgYSBjb21wb25lbnQnc1xuICogYWRhcHRlcidzIHN0YXRlIHdpdGggdGhlIGxvZ2ljIG5lZWRlZCBmb3Igc3dpdGNoIHRvIGZ1bmN0aW9uLlxuICpcbiAqIEluIHJlc3BvbnNlIHRvIHN0YXRlIGNoYW5nZXMsIHRoZSByZW5kZXJpbmcgZm91bmRhdGlvbiB1c2VzIHRoZSBjb21wb25lbnQnc1xuICogcmVuZGVyIGFkYXB0ZXIgdG8ga2VlcCB0aGUgY29tcG9uZW50J3MgRE9NIHVwZGF0ZWQgd2l0aCB0aGUgc3RhdGUuXG4gKi9cbnZhciBNRENTd2l0Y2hSZW5kZXJGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENTd2l0Y2hSZW5kZXJGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1N3aXRjaFJlbmRlckZvdW5kYXRpb24oKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogSW5pdGlhbGl6ZXMgdGhlIGZvdW5kYXRpb24gYW5kIHN0YXJ0cyBvYnNlcnZpbmcgc3RhdGUgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBNRENTd2l0Y2hSZW5kZXJGb3VuZGF0aW9uLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgdGhpcy5vYnNlcnZlKHRoaXMuYWRhcHRlci5zdGF0ZSwge1xuICAgICAgICAgICAgZGlzYWJsZWQ6IHRoaXMub25EaXNhYmxlZENoYW5nZSxcbiAgICAgICAgICAgIHByb2Nlc3Npbmc6IHRoaXMub25Qcm9jZXNzaW5nQ2hhbmdlLFxuICAgICAgICAgICAgc2VsZWN0ZWQ6IHRoaXMub25TZWxlY3RlZENoYW5nZSxcbiAgICAgICAgfSk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBJbml0aWFsaXplcyB0aGUgZm91bmRhdGlvbiBmcm9tIGEgc2VydmVyIHNpZGUgcmVuZGVyZWQgKFNTUikgY29tcG9uZW50LlxuICAgICAqIFRoaXMgd2lsbCBzeW5jIHRoZSBhZGFwdGVyJ3Mgc3RhdGUgd2l0aCB0aGUgY3VycmVudCBzdGF0ZSBvZiB0aGUgRE9NLlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2Qgc2hvdWxkIGJlIGNhbGxlZCBhZnRlciBgaW5pdCgpYC5cbiAgICAgKi9cbiAgICBNRENTd2l0Y2hSZW5kZXJGb3VuZGF0aW9uLnByb3RvdHlwZS5pbml0RnJvbURPTSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gVHVybiBvZmYgb2JzZXJ2ZXJzIHdoaWxlIHNldHRpbmcgc3RhdGVcbiAgICAgICAgdGhpcy5zZXRPYnNlcnZlcnNFbmFibGVkKHRoaXMuYWRhcHRlci5zdGF0ZSwgZmFsc2UpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc3RhdGUuc2VsZWN0ZWQgPSB0aGlzLmFkYXB0ZXIuaGFzQ2xhc3MoQ3NzQ2xhc3Nlcy5TRUxFQ1RFRCk7XG4gICAgICAgIC8vIEVuc3VyZSBhcmlhLWNoZWNrZWQgaXMgc2V0IGlmIGF0dHJpYnV0ZSBpcyBub3QgcHJlc2VudFxuICAgICAgICB0aGlzLm9uU2VsZWN0ZWRDaGFuZ2UoKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnN0YXRlLmRpc2FibGVkID0gdGhpcy5hZGFwdGVyLmlzRGlzYWJsZWQoKTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnN0YXRlLnByb2Nlc3NpbmcgPVxuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmhhc0NsYXNzKENzc0NsYXNzZXMuUFJPQ0VTU0lORyk7XG4gICAgICAgIC8vIFJlLW9ic2VydmUgc3RhdGVcbiAgICAgICAgdGhpcy5zZXRPYnNlcnZlcnNFbmFibGVkKHRoaXMuYWRhcHRlci5zdGF0ZSwgdHJ1ZSk7XG4gICAgICAgIHRoaXMuc3RvcFByb2Nlc3NpbmdJZkRpc2FibGVkKCk7XG4gICAgfTtcbiAgICBNRENTd2l0Y2hSZW5kZXJGb3VuZGF0aW9uLnByb3RvdHlwZS5vbkRpc2FibGVkQ2hhbmdlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0RGlzYWJsZWQodGhpcy5hZGFwdGVyLnN0YXRlLmRpc2FibGVkKTtcbiAgICB9O1xuICAgIE1EQ1N3aXRjaFJlbmRlckZvdW5kYXRpb24ucHJvdG90eXBlLm9uUHJvY2Vzc2luZ0NoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy50b2dnbGVDbGFzcyh0aGlzLmFkYXB0ZXIuc3RhdGUucHJvY2Vzc2luZywgQ3NzQ2xhc3Nlcy5QUk9DRVNTSU5HKTtcbiAgICB9O1xuICAgIE1EQ1N3aXRjaFJlbmRlckZvdW5kYXRpb24ucHJvdG90eXBlLm9uU2VsZWN0ZWRDaGFuZ2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRBcmlhQ2hlY2tlZChTdHJpbmcodGhpcy5hZGFwdGVyLnN0YXRlLnNlbGVjdGVkKSk7XG4gICAgICAgIHRoaXMudG9nZ2xlQ2xhc3ModGhpcy5hZGFwdGVyLnN0YXRlLnNlbGVjdGVkLCBDc3NDbGFzc2VzLlNFTEVDVEVEKTtcbiAgICAgICAgdGhpcy50b2dnbGVDbGFzcyghdGhpcy5hZGFwdGVyLnN0YXRlLnNlbGVjdGVkLCBDc3NDbGFzc2VzLlVOU0VMRUNURUQpO1xuICAgIH07XG4gICAgTURDU3dpdGNoUmVuZGVyRm91bmRhdGlvbi5wcm90b3R5cGUudG9nZ2xlQ2xhc3MgPSBmdW5jdGlvbiAoYWRkQ2xhc3MsIGNsYXNzTmFtZSkge1xuICAgICAgICBpZiAoYWRkQ2xhc3MpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjbGFzc05hbWUpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKGNsYXNzTmFtZSk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNRENTd2l0Y2hSZW5kZXJGb3VuZGF0aW9uO1xufShNRENTd2l0Y2hGb3VuZGF0aW9uKSk7XG5leHBvcnQgeyBNRENTd2l0Y2hSZW5kZXJGb3VuZGF0aW9uIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1mb3VuZGF0aW9uLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDIxIEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDQ29tcG9uZW50IH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ1JpcHBsZSB9IGZyb20gJ0BtYXRlcmlhbC9yaXBwbGUvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ1JpcHBsZUZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvcmlwcGxlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgU2VsZWN0b3JzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgTURDU3dpdGNoUmVuZGVyRm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG4vKipcbiAqIGBNRENTd2l0Y2hgIHByb3ZpZGVzIGEgY29tcG9uZW50IGltcGxlbWVudGF0aW9uIG9mIGEgTWF0ZXJpYWwgRGVzaWduIHN3aXRjaC5cbiAqL1xudmFyIE1EQ1N3aXRjaCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDU3dpdGNoLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1N3aXRjaChyb290LCBmb3VuZGF0aW9uKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIHJvb3QsIGZvdW5kYXRpb24pIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLnJvb3QgPSByb290O1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENyZWF0ZXMgYSBuZXcgYE1EQ1N3aXRjaGAgYW5kIGF0dGFjaGVzIGl0IHRvIHRoZSBnaXZlbiByb290IGVsZW1lbnQuXG4gICAgICogQHBhcmFtIHJvb3QgVGhlIHJvb3QgdG8gYXR0YWNoIHRvLlxuICAgICAqIEByZXR1cm4gdGhlIG5ldyBjb21wb25lbnQgaW5zdGFuY2UuXG4gICAgICovXG4gICAgTURDU3dpdGNoLmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENTd2l0Y2gocm9vdCk7XG4gICAgfTtcbiAgICBNRENTd2l0Y2gucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMucmlwcGxlID0gbmV3IE1EQ1JpcHBsZSh0aGlzLnJvb3QsIHRoaXMuY3JlYXRlUmlwcGxlRm91bmRhdGlvbigpKTtcbiAgICB9O1xuICAgIE1EQ1N3aXRjaC5wcm90b3R5cGUuaW5pdGlhbFN5bmNXaXRoRE9NID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgcmlwcGxlRWxlbWVudCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKFNlbGVjdG9ycy5SSVBQTEUpO1xuICAgICAgICBpZiAoIXJpcHBsZUVsZW1lbnQpIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlN3aXRjaCBcIiArIFNlbGVjdG9ycy5SSVBQTEUgKyBcIiBlbGVtZW50IGlzIHJlcXVpcmVkLlwiKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJpcHBsZUVsZW1lbnQgPSByaXBwbGVFbGVtZW50O1xuICAgICAgICB0aGlzLnJvb3QuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmZvdW5kYXRpb24uaGFuZGxlQ2xpY2spO1xuICAgICAgICB0aGlzLmZvdW5kYXRpb24uaW5pdEZyb21ET00oKTtcbiAgICB9O1xuICAgIE1EQ1N3aXRjaC5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgX3N1cGVyLnByb3RvdHlwZS5kZXN0cm95LmNhbGwodGhpcyk7XG4gICAgICAgIHRoaXMucmlwcGxlLmRlc3Ryb3koKTtcbiAgICAgICAgdGhpcy5yb290LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5mb3VuZGF0aW9uLmhhbmRsZUNsaWNrKTtcbiAgICB9O1xuICAgIE1EQ1N3aXRjaC5wcm90b3R5cGUuZ2V0RGVmYXVsdEZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTURDU3dpdGNoUmVuZGVyRm91bmRhdGlvbih0aGlzLmNyZWF0ZUFkYXB0ZXIoKSk7XG4gICAgfTtcbiAgICBNRENTd2l0Y2gucHJvdG90eXBlLmNyZWF0ZUFkYXB0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBhZGRDbGFzczogZnVuY3Rpb24gKGNsYXNzTmFtZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJvb3QuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgaXNEaXNhYmxlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucm9vdC5kaXNhYmxlZDsgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdC5jbGFzc0xpc3QucmVtb3ZlKGNsYXNzTmFtZSk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc2V0QXJpYUNoZWNrZWQ6IGZ1bmN0aW9uIChhcmlhQ2hlY2tlZCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yb290LnNldEF0dHJpYnV0ZSgnYXJpYS1jaGVja2VkJywgYXJpYUNoZWNrZWQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHNldERpc2FibGVkOiBmdW5jdGlvbiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5yb290LmRpc2FibGVkID0gZGlzYWJsZWQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgc3RhdGU6IHRoaXMsXG4gICAgICAgIH07XG4gICAgfTtcbiAgICBNRENTd2l0Y2gucHJvdG90eXBlLmNyZWF0ZVJpcHBsZUZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiBuZXcgTURDUmlwcGxlRm91bmRhdGlvbih0aGlzLmNyZWF0ZVJpcHBsZUFkYXB0ZXIoKSk7XG4gICAgfTtcbiAgICBNRENTd2l0Y2gucHJvdG90eXBlLmNyZWF0ZVJpcHBsZUFkYXB0ZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDUmlwcGxlLmNyZWF0ZUFkYXB0ZXIodGhpcykpLCB7IGNvbXB1dGVCb3VuZGluZ1JlY3Q6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIF90aGlzLnJpcHBsZUVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7IH0sIGlzVW5ib3VuZGVkOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9IH0pO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1N3aXRjaDtcbn0oTURDQ29tcG9uZW50KSk7XG5leHBvcnQgeyBNRENTd2l0Y2ggfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBjc3NDbGFzc2VzID0ge1xuICAgIFJPT1Q6ICdtZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlcicsXG59O1xudmFyIHN0cmluZ3MgPSB7XG4gICAgUk9PVF9TRUxFQ1RPUjogXCIuXCIgKyBjc3NDbGFzc2VzLlJPT1QsXG59O1xuZXhwb3J0IHsgc3RyaW5ncywgY3NzQ2xhc3NlcyB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29uc3RhbnRzLmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE5IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xuaW1wb3J0IHsgX19hc3NpZ24sIF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgY3NzQ2xhc3Nlcywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbnZhciBNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyRm91bmRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24sIF9zdXBlcik7XG4gICAgZnVuY3Rpb24gTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24oYWRhcHRlcikge1xuICAgICAgICByZXR1cm4gX3N1cGVyLmNhbGwodGhpcywgX19hc3NpZ24oX19hc3NpZ24oe30sIE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXJGb3VuZGF0aW9uLmRlZmF1bHRBZGFwdGVyKSwgYWRhcHRlcikpIHx8IHRoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyRm91bmRhdGlvbiwgXCJjc3NDbGFzc2VzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gY3NzQ2xhc3NlcztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyRm91bmRhdGlvbiwgXCJzdHJpbmdzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyRm91bmRhdGlvbiwgXCJkZWZhdWx0QWRhcHRlclwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZWUge0BsaW5rIE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXJBZGFwdGVyfSBmb3IgdHlwaW5nIGluZm9ybWF0aW9uIG9uIHBhcmFtZXRlcnMgYW5kIHJldHVybiB0eXBlcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgICAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICB9O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24ucHJvdG90eXBlLnNldENvdW50ZXJWYWx1ZSA9IGZ1bmN0aW9uIChjdXJyZW50TGVuZ3RoLCBtYXhMZW5ndGgpIHtcbiAgICAgICAgY3VycmVudExlbmd0aCA9IE1hdGgubWluKGN1cnJlbnRMZW5ndGgsIG1heExlbmd0aCk7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRDb250ZW50KGN1cnJlbnRMZW5ndGggKyBcIiAvIFwiICsgbWF4TGVuZ3RoKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyRm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTkgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0NvbXBvbmVudCB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyRm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG52YXIgTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlciA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyKCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXIuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXIocm9vdCk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlci5wcm90b3R5cGUsIFwiZm91bmRhdGlvbkZvclRleHRGaWVsZFwiLCB7XG4gICAgICAgIC8vIFByb3ZpZGVkIGZvciBhY2Nlc3MgYnkgTURDVGV4dEZpZWxkIGNvbXBvbmVudFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvdW5kYXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyLnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IHtcbiAgICAgICAgICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgICAgICAgICAgX3RoaXMucm9vdC50ZXh0Q29udGVudCA9IGNvbnRlbnQ7XG4gICAgICAgICAgICB9LFxuICAgICAgICB9O1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXJGb3VuZGF0aW9uKGFkYXB0ZXIpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXI7XG59KE1EQ0NvbXBvbmVudCkpO1xuZXhwb3J0IHsgTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlciB9O1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Y29tcG9uZW50LmpzLm1hcCIsIi8qKlxuICogQGxpY2Vuc2VcbiAqIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4gKlxuICogUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuICogb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuICogaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuICogdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuICogY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4gKiBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuICpcbiAqIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4gKiBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbiAqXG4gKiBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4gKiBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbiAqIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuICogQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuICogTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbiAqIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbiAqIFRIRSBTT0ZUV0FSRS5cbiAqL1xudmFyIHN0cmluZ3MgPSB7XG4gICAgQVJJQV9DT05UUk9MUzogJ2FyaWEtY29udHJvbHMnLFxuICAgIEFSSUFfREVTQ1JJQkVEQlk6ICdhcmlhLWRlc2NyaWJlZGJ5JyxcbiAgICBJTlBVVF9TRUxFQ1RPUjogJy5tZGMtdGV4dC1maWVsZF9faW5wdXQnLFxuICAgIExBQkVMX1NFTEVDVE9SOiAnLm1kYy1mbG9hdGluZy1sYWJlbCcsXG4gICAgTEVBRElOR19JQ09OX1NFTEVDVE9SOiAnLm1kYy10ZXh0LWZpZWxkX19pY29uLS1sZWFkaW5nJyxcbiAgICBMSU5FX1JJUFBMRV9TRUxFQ1RPUjogJy5tZGMtbGluZS1yaXBwbGUnLFxuICAgIE9VVExJTkVfU0VMRUNUT1I6ICcubWRjLW5vdGNoZWQtb3V0bGluZScsXG4gICAgUFJFRklYX1NFTEVDVE9SOiAnLm1kYy10ZXh0LWZpZWxkX19hZmZpeC0tcHJlZml4JyxcbiAgICBTVUZGSVhfU0VMRUNUT1I6ICcubWRjLXRleHQtZmllbGRfX2FmZml4LS1zdWZmaXgnLFxuICAgIFRSQUlMSU5HX0lDT05fU0VMRUNUT1I6ICcubWRjLXRleHQtZmllbGRfX2ljb24tLXRyYWlsaW5nJ1xufTtcbnZhciBjc3NDbGFzc2VzID0ge1xuICAgIERJU0FCTEVEOiAnbWRjLXRleHQtZmllbGQtLWRpc2FibGVkJyxcbiAgICBGT0NVU0VEOiAnbWRjLXRleHQtZmllbGQtLWZvY3VzZWQnLFxuICAgIEhFTFBFUl9MSU5FOiAnbWRjLXRleHQtZmllbGQtaGVscGVyLWxpbmUnLFxuICAgIElOVkFMSUQ6ICdtZGMtdGV4dC1maWVsZC0taW52YWxpZCcsXG4gICAgTEFCRUxfRkxPQVRJTkc6ICdtZGMtdGV4dC1maWVsZC0tbGFiZWwtZmxvYXRpbmcnLFxuICAgIE5PX0xBQkVMOiAnbWRjLXRleHQtZmllbGQtLW5vLWxhYmVsJyxcbiAgICBPVVRMSU5FRDogJ21kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCcsXG4gICAgUk9PVDogJ21kYy10ZXh0LWZpZWxkJyxcbiAgICBURVhUQVJFQTogJ21kYy10ZXh0LWZpZWxkLS10ZXh0YXJlYScsXG4gICAgV0lUSF9MRUFESU5HX0lDT046ICdtZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24nLFxuICAgIFdJVEhfVFJBSUxJTkdfSUNPTjogJ21kYy10ZXh0LWZpZWxkLS13aXRoLXRyYWlsaW5nLWljb24nLFxufTtcbnZhciBudW1iZXJzID0ge1xuICAgIExBQkVMX1NDQUxFOiAwLjc1LFxufTtcbi8qKlxuICogV2hpdGVsaXN0IGJhc2VkIG9mZiBvZiBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9HdWlkZS9IVE1ML0hUTUw1L0NvbnN0cmFpbnRfdmFsaWRhdGlvblxuICogdW5kZXIgdGhlIFwiVmFsaWRhdGlvbi1yZWxhdGVkIGF0dHJpYnV0ZXNcIiBzZWN0aW9uLlxuICovXG52YXIgVkFMSURBVElPTl9BVFRSX1dISVRFTElTVCA9IFtcbiAgICAncGF0dGVybicsICdtaW4nLCAnbWF4JywgJ3JlcXVpcmVkJywgJ3N0ZXAnLCAnbWlubGVuZ3RoJywgJ21heGxlbmd0aCcsXG5dO1xuLyoqXG4gKiBMYWJlbCBzaG91bGQgYWx3YXlzIGZsb2F0IGZvciB0aGVzZSB0eXBlcyBhcyB0aGV5IHNob3cgc29tZSBVSSBldmVuIGlmIHZhbHVlIGlzIGVtcHR5LlxuICovXG52YXIgQUxXQVlTX0ZMT0FUX1RZUEVTID0gW1xuICAgICdjb2xvcicsICdkYXRlJywgJ2RhdGV0aW1lLWxvY2FsJywgJ21vbnRoJywgJ3JhbmdlJywgJ3RpbWUnLCAnd2VlaycsXG5dO1xuZXhwb3J0IHsgY3NzQ2xhc3Nlcywgc3RyaW5ncywgbnVtYmVycywgVkFMSURBVElPTl9BVFRSX1dISVRFTElTVCwgQUxXQVlTX0ZMT0FUX1RZUEVTIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzLCBfX3ZhbHVlcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgQUxXQVlTX0ZMT0FUX1RZUEVTLCBjc3NDbGFzc2VzLCBudW1iZXJzLCBzdHJpbmdzLCBWQUxJREFUSU9OX0FUVFJfV0hJVEVMSVNUIH0gZnJvbSAnLi9jb25zdGFudHMnO1xudmFyIFBPSU5URVJET1dOX0VWRU5UUyA9IFsnbW91c2Vkb3duJywgJ3RvdWNoc3RhcnQnXTtcbnZhciBJTlRFUkFDVElPTl9FVkVOVFMgPSBbJ2NsaWNrJywgJ2tleWRvd24nXTtcbnZhciBNRENUZXh0RmllbGRGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENUZXh0RmllbGRGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBhZGFwdGVyXG4gICAgICogQHBhcmFtIGZvdW5kYXRpb25NYXAgTWFwIGZyb20gc3ViY29tcG9uZW50IG5hbWVzIHRvIHRoZWlyIHN1YmZvdW5kYXRpb25zLlxuICAgICAqL1xuICAgIGZ1bmN0aW9uIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24oYWRhcHRlciwgZm91bmRhdGlvbk1hcCkge1xuICAgICAgICBpZiAoZm91bmRhdGlvbk1hcCA9PT0gdm9pZCAwKSB7IGZvdW5kYXRpb25NYXAgPSB7fTsgfVxuICAgICAgICB2YXIgX3RoaXMgPSBfc3VwZXIuY2FsbCh0aGlzLCBfX2Fzc2lnbihfX2Fzc2lnbih7fSwgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMucmVjZWl2ZWRVc2VySW5wdXQgPSBmYWxzZTtcbiAgICAgICAgX3RoaXMudmFsaWQgPSB0cnVlO1xuICAgICAgICBfdGhpcy51c2VOYXRpdmVWYWxpZGF0aW9uID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMudmFsaWRhdGVPblZhbHVlQ2hhbmdlID0gdHJ1ZTtcbiAgICAgICAgX3RoaXMuaGVscGVyVGV4dCA9IGZvdW5kYXRpb25NYXAuaGVscGVyVGV4dDtcbiAgICAgICAgX3RoaXMuY2hhcmFjdGVyQ291bnRlciA9IGZvdW5kYXRpb25NYXAuY2hhcmFjdGVyQ291bnRlcjtcbiAgICAgICAgX3RoaXMubGVhZGluZ0ljb24gPSBmb3VuZGF0aW9uTWFwLmxlYWRpbmdJY29uO1xuICAgICAgICBfdGhpcy50cmFpbGluZ0ljb24gPSBmb3VuZGF0aW9uTWFwLnRyYWlsaW5nSWNvbjtcbiAgICAgICAgX3RoaXMuaW5wdXRGb2N1c0hhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5hY3RpdmF0ZUZvY3VzKCk7XG4gICAgICAgIH07XG4gICAgICAgIF90aGlzLmlucHV0Qmx1ckhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5kZWFjdGl2YXRlRm9jdXMoKTtcbiAgICAgICAgfTtcbiAgICAgICAgX3RoaXMuaW5wdXRJbnB1dEhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVJbnB1dCgpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy5zZXRQb2ludGVyWE9mZnNldCA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgICAgIF90aGlzLnNldFRyYW5zZm9ybU9yaWdpbihldnQpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy50ZXh0RmllbGRJbnRlcmFjdGlvbkhhbmRsZXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBfdGhpcy5oYW5kbGVUZXh0RmllbGRJbnRlcmFjdGlvbigpO1xuICAgICAgICB9O1xuICAgICAgICBfdGhpcy52YWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlciA9IGZ1bmN0aW9uIChhdHRyaWJ1dGVzTGlzdCkge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlVmFsaWRhdGlvbkF0dHJpYnV0ZUNoYW5nZShhdHRyaWJ1dGVzTGlzdCk7XG4gICAgICAgIH07XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZEZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkRm91bmRhdGlvbiwgXCJzdHJpbmdzXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gc3RyaW5ncztcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGRGb3VuZGF0aW9uLCBcIm51bWJlcnNcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiBudW1iZXJzO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLCBcInNob3VsZEFsd2F5c0Zsb2F0XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICB2YXIgdHlwZSA9IHRoaXMuZ2V0TmF0aXZlSW5wdXQoKS50eXBlO1xuICAgICAgICAgICAgcmV0dXJuIEFMV0FZU19GTE9BVF9UWVBFUy5pbmRleE9mKHR5cGUpID49IDA7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUsIFwic2hvdWxkRmxvYXRcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnNob3VsZEFsd2F5c0Zsb2F0IHx8IHRoaXMuaXNGb2N1c2VkIHx8ICEhdGhpcy5nZXRWYWx1ZSgpIHx8XG4gICAgICAgICAgICAgICAgdGhpcy5pc0JhZElucHV0KCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUsIFwic2hvdWxkU2hha2VcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiAhdGhpcy5pc0ZvY3VzZWQgJiYgIXRoaXMuaXNWYWxpZCgpICYmICEhdGhpcy5nZXRWYWx1ZSgpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZEZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBNRENUZXh0RmllbGRBZGFwdGVyfSBmb3IgdHlwaW5nIGluZm9ybWF0aW9uIG9uIHBhcmFtZXRlcnMgYW5kXG4gICAgICAgICAqIHJldHVybiB0eXBlcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB0cnVlOyB9LFxuICAgICAgICAgICAgICAgIHNldElucHV0QXR0cjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZUlucHV0QXR0cjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVyVGV4dEZpZWxkSW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZGVyZWdpc3RlclRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBkZXJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZWdpc3RlclZhbGlkYXRpb25BdHRyaWJ1dGVDaGFuZ2VIYW5kbGVyOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiBuZXcgTXV0YXRpb25PYnNlcnZlcihmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0pO1xuICAgICAgICAgICAgICAgIH0sXG4gICAgICAgICAgICAgICAgZGVyZWdpc3RlclZhbGlkYXRpb25BdHRyaWJ1dGVDaGFuZ2VIYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZ2V0TmF0aXZlSW5wdXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgICAgICAgICAgaXNGb2N1c2VkOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBhY3RpdmF0ZUxpbmVSaXBwbGU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBkZWFjdGl2YXRlTGluZVJpcHBsZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNldExpbmVSaXBwbGVUcmFuc2Zvcm1PcmlnaW46IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBzaGFrZUxhYmVsOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgZmxvYXRMYWJlbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNldExhYmVsUmVxdWlyZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBoYXNMYWJlbDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgZ2V0TGFiZWxXaWR0aDogZnVuY3Rpb24gKCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgICAgICAgICBoYXNPdXRsaW5lOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBub3RjaE91dGxpbmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBjbG9zZU91dGxpbmU6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2EsIGVfMiwgX2I7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaGFzTGFiZWwoKSAmJiB0aGlzLmdldE5hdGl2ZUlucHV0KCkucmVxdWlyZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRMYWJlbFJlcXVpcmVkKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaXNGb2N1c2VkKCkpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXRGb2N1c0hhbmRsZXIoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLmFkYXB0ZXIuaGFzTGFiZWwoKSAmJiB0aGlzLnNob3VsZEZsb2F0KSB7XG4gICAgICAgICAgICB0aGlzLm5vdGNoT3V0bGluZSh0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5mbG9hdExhYmVsKHRydWUpO1xuICAgICAgICAgICAgdGhpcy5zdHlsZUZsb2F0aW5nKHRydWUpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZWdpc3RlcklucHV0SW50ZXJhY3Rpb25IYW5kbGVyKCdmb2N1cycsIHRoaXMuaW5wdXRGb2N1c0hhbmRsZXIpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJJbnB1dEludGVyYWN0aW9uSGFuZGxlcignYmx1cicsIHRoaXMuaW5wdXRCbHVySGFuZGxlcik7XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZWdpc3RlcklucHV0SW50ZXJhY3Rpb25IYW5kbGVyKCdpbnB1dCcsIHRoaXMuaW5wdXRJbnB1dEhhbmRsZXIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgUE9JTlRFUkRPV05fRVZFTlRTXzEgPSBfX3ZhbHVlcyhQT0lOVEVSRE9XTl9FVkVOVFMpLCBQT0lOVEVSRE9XTl9FVkVOVFNfMV8xID0gUE9JTlRFUkRPV05fRVZFTlRTXzEubmV4dCgpOyAhUE9JTlRFUkRPV05fRVZFTlRTXzFfMS5kb25lOyBQT0lOVEVSRE9XTl9FVkVOVFNfMV8xID0gUE9JTlRFUkRPV05fRVZFTlRTXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2dFR5cGUgPSBQT0lOVEVSRE9XTl9FVkVOVFNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZWdpc3RlcklucHV0SW50ZXJhY3Rpb25IYW5kbGVyKGV2dFR5cGUsIHRoaXMuc2V0UG9pbnRlclhPZmZzZXQpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoUE9JTlRFUkRPV05fRVZFTlRTXzFfMSAmJiAhUE9JTlRFUkRPV05fRVZFTlRTXzFfMS5kb25lICYmIChfYSA9IFBPSU5URVJET1dOX0VWRU5UU18xLnJldHVybikpIF9hLmNhbGwoUE9JTlRFUkRPV05fRVZFTlRTXzEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZmluYWxseSB7IGlmIChlXzEpIHRocm93IGVfMS5lcnJvcjsgfVxuICAgICAgICB9XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgICBmb3IgKHZhciBJTlRFUkFDVElPTl9FVkVOVFNfMSA9IF9fdmFsdWVzKElOVEVSQUNUSU9OX0VWRU5UUyksIElOVEVSQUNUSU9OX0VWRU5UU18xXzEgPSBJTlRFUkFDVElPTl9FVkVOVFNfMS5uZXh0KCk7ICFJTlRFUkFDVElPTl9FVkVOVFNfMV8xLmRvbmU7IElOVEVSQUNUSU9OX0VWRU5UU18xXzEgPSBJTlRFUkFDVElPTl9FVkVOVFNfMS5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgZXZ0VHlwZSA9IElOVEVSQUNUSU9OX0VWRU5UU18xXzEudmFsdWU7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlZ2lzdGVyVGV4dEZpZWxkSW50ZXJhY3Rpb25IYW5kbGVyKGV2dFR5cGUsIHRoaXMudGV4dEZpZWxkSW50ZXJhY3Rpb25IYW5kbGVyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBjYXRjaCAoZV8yXzEpIHsgZV8yID0geyBlcnJvcjogZV8yXzEgfTsgfVxuICAgICAgICBmaW5hbGx5IHtcbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgaWYgKElOVEVSQUNUSU9OX0VWRU5UU18xXzEgJiYgIUlOVEVSQUNUSU9OX0VWRU5UU18xXzEuZG9uZSAmJiAoX2IgPSBJTlRFUkFDVElPTl9FVkVOVFNfMS5yZXR1cm4pKSBfYi5jYWxsKElOVEVSQUNUSU9OX0VWRU5UU18xKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGZpbmFsbHkgeyBpZiAoZV8yKSB0aHJvdyBlXzIuZXJyb3I7IH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLnZhbGlkYXRpb25PYnNlcnZlciA9XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVnaXN0ZXJWYWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlcih0aGlzLnZhbGlkYXRpb25BdHRyaWJ1dGVDaGFuZ2VIYW5kbGVyKTtcbiAgICAgICAgdGhpcy5zZXRjaGFyYWN0ZXJDb3VudGVyKHRoaXMuZ2V0VmFsdWUoKS5sZW5ndGgpO1xuICAgIH07XG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMywgX2EsIGVfNCwgX2I7XG4gICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIoJ2ZvY3VzJywgdGhpcy5pbnB1dEZvY3VzSGFuZGxlcik7XG4gICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIoJ2JsdXInLCB0aGlzLmlucHV0Qmx1ckhhbmRsZXIpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlcklucHV0SW50ZXJhY3Rpb25IYW5kbGVyKCdpbnB1dCcsIHRoaXMuaW5wdXRJbnB1dEhhbmRsZXIpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgUE9JTlRFUkRPV05fRVZFTlRTXzIgPSBfX3ZhbHVlcyhQT0lOVEVSRE9XTl9FVkVOVFMpLCBQT0lOVEVSRE9XTl9FVkVOVFNfMl8xID0gUE9JTlRFUkRPV05fRVZFTlRTXzIubmV4dCgpOyAhUE9JTlRFUkRPV05fRVZFTlRTXzJfMS5kb25lOyBQT0lOVEVSRE9XTl9FVkVOVFNfMl8xID0gUE9JTlRFUkRPV05fRVZFTlRTXzIubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2dFR5cGUgPSBQT0lOVEVSRE9XTl9FVkVOVFNfMl8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5kZXJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIoZXZ0VHlwZSwgdGhpcy5zZXRQb2ludGVyWE9mZnNldCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfM18xKSB7IGVfMyA9IHsgZXJyb3I6IGVfM18xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChQT0lOVEVSRE9XTl9FVkVOVFNfMl8xICYmICFQT0lOVEVSRE9XTl9FVkVOVFNfMl8xLmRvbmUgJiYgKF9hID0gUE9JTlRFUkRPV05fRVZFTlRTXzIucmV0dXJuKSkgX2EuY2FsbChQT0lOVEVSRE9XTl9FVkVOVFNfMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMykgdGhyb3cgZV8zLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIElOVEVSQUNUSU9OX0VWRU5UU18yID0gX192YWx1ZXMoSU5URVJBQ1RJT05fRVZFTlRTKSwgSU5URVJBQ1RJT05fRVZFTlRTXzJfMSA9IElOVEVSQUNUSU9OX0VWRU5UU18yLm5leHQoKTsgIUlOVEVSQUNUSU9OX0VWRU5UU18yXzEuZG9uZTsgSU5URVJBQ1RJT05fRVZFTlRTXzJfMSA9IElOVEVSQUNUSU9OX0VWRU5UU18yLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBldnRUeXBlID0gSU5URVJBQ1RJT05fRVZFTlRTXzJfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlclRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlcihldnRUeXBlLCB0aGlzLnRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfNF8xKSB7IGVfNCA9IHsgZXJyb3I6IGVfNF8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChJTlRFUkFDVElPTl9FVkVOVFNfMl8xICYmICFJTlRFUkFDVElPTl9FVkVOVFNfMl8xLmRvbmUgJiYgKF9iID0gSU5URVJBQ1RJT05fRVZFTlRTXzIucmV0dXJuKSkgX2IuY2FsbChJTlRFUkFDVElPTl9FVkVOVFNfMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfNCkgdGhyb3cgZV80LmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5hZGFwdGVyLmRlcmVnaXN0ZXJWYWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlcih0aGlzLnZhbGlkYXRpb25PYnNlcnZlcik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIYW5kbGVzIHVzZXIgaW50ZXJhY3Rpb25zIHdpdGggdGhlIFRleHQgRmllbGQuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlVGV4dEZpZWxkSW50ZXJhY3Rpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBuYXRpdmVJbnB1dCA9IHRoaXMuYWRhcHRlci5nZXROYXRpdmVJbnB1dCgpO1xuICAgICAgICBpZiAobmF0aXZlSW5wdXQgJiYgbmF0aXZlSW5wdXQuZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlY2VpdmVkVXNlcklucHV0ID0gdHJ1ZTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgdmFsaWRhdGlvbiBhdHRyaWJ1dGUgY2hhbmdlc1xuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZVZhbGlkYXRpb25BdHRyaWJ1dGVDaGFuZ2UgPSBmdW5jdGlvbiAoYXR0cmlidXRlc0xpc3QpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgYXR0cmlidXRlc0xpc3Quc29tZShmdW5jdGlvbiAoYXR0cmlidXRlTmFtZSkge1xuICAgICAgICAgICAgaWYgKFZBTElEQVRJT05fQVRUUl9XSElURUxJU1QuaW5kZXhPZihhdHRyaWJ1dGVOYW1lKSA+IC0xKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuc3R5bGVWYWxpZGl0eSh0cnVlKTtcbiAgICAgICAgICAgICAgICBfdGhpcy5hZGFwdGVyLnNldExhYmVsUmVxdWlyZWQoX3RoaXMuZ2V0TmF0aXZlSW5wdXQoKS5yZXF1aXJlZCk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoYXR0cmlidXRlc0xpc3QuaW5kZXhPZignbWF4bGVuZ3RoJykgPiAtMSkge1xuICAgICAgICAgICAgdGhpcy5zZXRjaGFyYWN0ZXJDb3VudGVyKHRoaXMuZ2V0VmFsdWUoKS5sZW5ndGgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBPcGVucy9jbG9zZXMgdGhlIG5vdGNoZWQgb3V0bGluZS5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5ub3RjaE91dGxpbmUgPSBmdW5jdGlvbiAob3Blbk5vdGNoKSB7XG4gICAgICAgIGlmICghdGhpcy5hZGFwdGVyLmhhc091dGxpbmUoKSB8fCAhdGhpcy5hZGFwdGVyLmhhc0xhYmVsKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICBpZiAob3Blbk5vdGNoKSB7XG4gICAgICAgICAgICB2YXIgbGFiZWxXaWR0aCA9IHRoaXMuYWRhcHRlci5nZXRMYWJlbFdpZHRoKCkgKiBudW1iZXJzLkxBQkVMX1NDQUxFO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLm5vdGNoT3V0bGluZShsYWJlbFdpZHRoKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5jbG9zZU91dGxpbmUoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQWN0aXZhdGVzIHRoZSB0ZXh0IGZpZWxkIGZvY3VzIHN0YXRlLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLmFjdGl2YXRlRm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaXNGb2N1c2VkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5zdHlsZUZvY3VzZWQodGhpcy5pc0ZvY3VzZWQpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWN0aXZhdGVMaW5lUmlwcGxlKCk7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaGFzTGFiZWwoKSkge1xuICAgICAgICAgICAgdGhpcy5ub3RjaE91dGxpbmUodGhpcy5zaG91bGRGbG9hdCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuZmxvYXRMYWJlbCh0aGlzLnNob3VsZEZsb2F0KTtcbiAgICAgICAgICAgIHRoaXMuc3R5bGVGbG9hdGluZyh0aGlzLnNob3VsZEZsb2F0KTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zaGFrZUxhYmVsKHRoaXMuc2hvdWxkU2hha2UpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmhlbHBlclRleHQgJiZcbiAgICAgICAgICAgICh0aGlzLmhlbHBlclRleHQuaXNQZXJzaXN0ZW50KCkgfHwgIXRoaXMuaGVscGVyVGV4dC5pc1ZhbGlkYXRpb24oKSB8fFxuICAgICAgICAgICAgICAgICF0aGlzLnZhbGlkKSkge1xuICAgICAgICAgICAgdGhpcy5oZWxwZXJUZXh0LnNob3dUb1NjcmVlblJlYWRlcigpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBsaW5lIHJpcHBsZSdzIHRyYW5zZm9ybSBvcmlnaW4sIHNvIHRoYXQgdGhlIGxpbmUgcmlwcGxlIGFjdGl2YXRlXG4gICAgICogYW5pbWF0aW9uIHdpbGwgYW5pbWF0ZSBvdXQgZnJvbSB0aGUgdXNlcidzIGNsaWNrIGxvY2F0aW9uLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLnNldFRyYW5zZm9ybU9yaWdpbiA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNEaXNhYmxlZCgpIHx8IHRoaXMuYWRhcHRlci5oYXNPdXRsaW5lKCkpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgdG91Y2hlcyA9IGV2dC50b3VjaGVzO1xuICAgICAgICB2YXIgdGFyZ2V0RXZlbnQgPSB0b3VjaGVzID8gdG91Y2hlc1swXSA6IGV2dDtcbiAgICAgICAgdmFyIHRhcmdldENsaWVudFJlY3QgPSB0YXJnZXRFdmVudC50YXJnZXQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gICAgICAgIHZhciBub3JtYWxpemVkWCA9IHRhcmdldEV2ZW50LmNsaWVudFggLSB0YXJnZXRDbGllbnRSZWN0LmxlZnQ7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRMaW5lUmlwcGxlVHJhbnNmb3JtT3JpZ2luKG5vcm1hbGl6ZWRYKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEhhbmRsZXMgaW5wdXQgY2hhbmdlIG9mIHRleHQgaW5wdXQgYW5kIHRleHQgYXJlYS5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVJbnB1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hdXRvQ29tcGxldGVGb2N1cygpO1xuICAgICAgICB0aGlzLnNldGNoYXJhY3RlckNvdW50ZXIodGhpcy5nZXRWYWx1ZSgpLmxlbmd0aCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBBY3RpdmF0ZXMgdGhlIFRleHQgRmllbGQncyBmb2N1cyBzdGF0ZSBpbiBjYXNlcyB3aGVuIHRoZSBpbnB1dCB2YWx1ZVxuICAgICAqIGNoYW5nZXMgd2l0aG91dCB1c2VyIGlucHV0IChlLmcuIHByb2dyYW1tYXRpY2FsbHkpLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLmF1dG9Db21wbGV0ZUZvY3VzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoIXRoaXMucmVjZWl2ZWRVc2VySW5wdXQpIHtcbiAgICAgICAgICAgIHRoaXMuYWN0aXZhdGVGb2N1cygpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBEZWFjdGl2YXRlcyB0aGUgVGV4dCBGaWVsZCdzIGZvY3VzIHN0YXRlLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLmRlYWN0aXZhdGVGb2N1cyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5pc0ZvY3VzZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5hZGFwdGVyLmRlYWN0aXZhdGVMaW5lUmlwcGxlKCk7XG4gICAgICAgIHZhciBpc1ZhbGlkID0gdGhpcy5pc1ZhbGlkKCk7XG4gICAgICAgIHRoaXMuc3R5bGVWYWxpZGl0eShpc1ZhbGlkKTtcbiAgICAgICAgdGhpcy5zdHlsZUZvY3VzZWQodGhpcy5pc0ZvY3VzZWQpO1xuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLmhhc0xhYmVsKCkpIHtcbiAgICAgICAgICAgIHRoaXMubm90Y2hPdXRsaW5lKHRoaXMuc2hvdWxkRmxvYXQpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmZsb2F0TGFiZWwodGhpcy5zaG91bGRGbG9hdCk7XG4gICAgICAgICAgICB0aGlzLnN0eWxlRmxvYXRpbmcodGhpcy5zaG91bGRGbG9hdCk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2hha2VMYWJlbCh0aGlzLnNob3VsZFNoYWtlKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXRoaXMuc2hvdWxkRmxvYXQpIHtcbiAgICAgICAgICAgIHRoaXMucmVjZWl2ZWRVc2VySW5wdXQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuZ2V0VmFsdWUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5hdGl2ZUlucHV0KCkudmFsdWU7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gdmFsdWUgVGhlIHZhbHVlIHRvIHNldCBvbiB0aGUgaW5wdXQgRWxlbWVudC5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRWYWx1ZSA9IGZ1bmN0aW9uICh2YWx1ZSkge1xuICAgICAgICAvLyBQcmV2ZW50IFNhZmFyaSBmcm9tIG1vdmluZyB0aGUgY2FyZXQgdG8gdGhlIGVuZCBvZiB0aGUgaW5wdXQgd2hlbiB0aGVcbiAgICAgICAgLy8gdmFsdWUgaGFzIG5vdCBjaGFuZ2VkLlxuICAgICAgICBpZiAodGhpcy5nZXRWYWx1ZSgpICE9PSB2YWx1ZSkge1xuICAgICAgICAgICAgdGhpcy5nZXROYXRpdmVJbnB1dCgpLnZhbHVlID0gdmFsdWU7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zZXRjaGFyYWN0ZXJDb3VudGVyKHZhbHVlLmxlbmd0aCk7XG4gICAgICAgIGlmICh0aGlzLnZhbGlkYXRlT25WYWx1ZUNoYW5nZSkge1xuICAgICAgICAgICAgdmFyIGlzVmFsaWQgPSB0aGlzLmlzVmFsaWQoKTtcbiAgICAgICAgICAgIHRoaXMuc3R5bGVWYWxpZGl0eShpc1ZhbGlkKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5hZGFwdGVyLmhhc0xhYmVsKCkpIHtcbiAgICAgICAgICAgIHRoaXMubm90Y2hPdXRsaW5lKHRoaXMuc2hvdWxkRmxvYXQpO1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmZsb2F0TGFiZWwodGhpcy5zaG91bGRGbG9hdCk7XG4gICAgICAgICAgICB0aGlzLnN0eWxlRmxvYXRpbmcodGhpcy5zaG91bGRGbG9hdCk7XG4gICAgICAgICAgICBpZiAodGhpcy52YWxpZGF0ZU9uVmFsdWVDaGFuZ2UpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2hha2VMYWJlbCh0aGlzLnNob3VsZFNoYWtlKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiBUaGUgY3VzdG9tIHZhbGlkaXR5IHN0YXRlLCBpZiBzZXQ7IG90aGVyd2lzZSwgdGhlIHJlc3VsdCBvZiBhXG4gICAgICogICAgIG5hdGl2ZSB2YWxpZGl0eSBjaGVjay5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5pc1ZhbGlkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy51c2VOYXRpdmVWYWxpZGF0aW9uID8gdGhpcy5pc05hdGl2ZUlucHV0VmFsaWQoKSA6IHRoaXMudmFsaWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gaXNWYWxpZCBTZXRzIHRoZSBjdXN0b20gdmFsaWRpdHkgc3RhdGUgb2YgdGhlIFRleHQgRmllbGQuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VmFsaWQgPSBmdW5jdGlvbiAoaXNWYWxpZCkge1xuICAgICAgICB0aGlzLnZhbGlkID0gaXNWYWxpZDtcbiAgICAgICAgdGhpcy5zdHlsZVZhbGlkaXR5KGlzVmFsaWQpO1xuICAgICAgICB2YXIgc2hvdWxkU2hha2UgPSAhaXNWYWxpZCAmJiAhdGhpcy5pc0ZvY3VzZWQgJiYgISF0aGlzLmdldFZhbHVlKCk7XG4gICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuaGFzTGFiZWwoKSkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnNoYWtlTGFiZWwoc2hvdWxkU2hha2UpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gc2hvdWxkVmFsaWRhdGUgV2hldGhlciBvciBub3QgdmFsaWRpdHkgc2hvdWxkIGJlIHVwZGF0ZWQgb25cbiAgICAgKiAgICAgdmFsdWUgY2hhbmdlLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLnNldFZhbGlkYXRlT25WYWx1ZUNoYW5nZSA9IGZ1bmN0aW9uIChzaG91bGRWYWxpZGF0ZSkge1xuICAgICAgICB0aGlzLnZhbGlkYXRlT25WYWx1ZUNoYW5nZSA9IHNob3VsZFZhbGlkYXRlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiBXaGV0aGVyIG9yIG5vdCB2YWxpZGl0eSBzaG91bGQgYmUgdXBkYXRlZCBvbiB2YWx1ZSBjaGFuZ2UuIGB0cnVlYFxuICAgICAqICAgICBieSBkZWZhdWx0LlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLmdldFZhbGlkYXRlT25WYWx1ZUNoYW5nZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMudmFsaWRhdGVPblZhbHVlQ2hhbmdlO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgdXNlIG9mIG5hdGl2ZSB2YWxpZGF0aW9uLiBVc2UgdGhpcyBmb3IgY3VzdG9tXG4gICAgICogdmFsaWRhdGlvbi5cbiAgICAgKiBAcGFyYW0gdXNlTmF0aXZlVmFsaWRhdGlvbiBTZXQgdGhpcyB0byBmYWxzZSB0byBpZ25vcmUgbmF0aXZlIGlucHV0XG4gICAgICogICAgIHZhbGlkYXRpb24uXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0VXNlTmF0aXZlVmFsaWRhdGlvbiA9IGZ1bmN0aW9uICh1c2VOYXRpdmVWYWxpZGF0aW9uKSB7XG4gICAgICAgIHRoaXMudXNlTmF0aXZlVmFsaWRhdGlvbiA9IHVzZU5hdGl2ZVZhbGlkYXRpb247XG4gICAgfTtcbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5pc0Rpc2FibGVkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5nZXROYXRpdmVJbnB1dCgpLmRpc2FibGVkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGRpc2FibGVkIFNldHMgdGhlIHRleHQtZmllbGQgZGlzYWJsZWQgb3IgZW5hYmxlZC5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXREaXNhYmxlZCA9IGZ1bmN0aW9uIChkaXNhYmxlZCkge1xuICAgICAgICB0aGlzLmdldE5hdGl2ZUlucHV0KCkuZGlzYWJsZWQgPSBkaXNhYmxlZDtcbiAgICAgICAgdGhpcy5zdHlsZURpc2FibGVkKGRpc2FibGVkKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEBwYXJhbSBjb250ZW50IFNldHMgdGhlIGNvbnRlbnQgb2YgdGhlIGhlbHBlciB0ZXh0LlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLnNldEhlbHBlclRleHRDb250ZW50ID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMuaGVscGVyVGV4dCkge1xuICAgICAgICAgICAgdGhpcy5oZWxwZXJUZXh0LnNldENvbnRlbnQoY29udGVudCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGFyaWEgbGFiZWwgb2YgdGhlIGxlYWRpbmcgaWNvbi5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRMZWFkaW5nSWNvbkFyaWFMYWJlbCA9IGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgICBpZiAodGhpcy5sZWFkaW5nSWNvbikge1xuICAgICAgICAgICAgdGhpcy5sZWFkaW5nSWNvbi5zZXRBcmlhTGFiZWwobGFiZWwpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIGxlYWRpbmcgaWNvbi5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRMZWFkaW5nSWNvbkNvbnRlbnQgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICBpZiAodGhpcy5sZWFkaW5nSWNvbikge1xuICAgICAgICAgICAgdGhpcy5sZWFkaW5nSWNvbi5zZXRDb250ZW50KGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSBhcmlhIGxhYmVsIG9mIHRoZSB0cmFpbGluZyBpY29uLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLnNldFRyYWlsaW5nSWNvbkFyaWFMYWJlbCA9IGZ1bmN0aW9uIChsYWJlbCkge1xuICAgICAgICBpZiAodGhpcy50cmFpbGluZ0ljb24pIHtcbiAgICAgICAgICAgIHRoaXMudHJhaWxpbmdJY29uLnNldEFyaWFMYWJlbChsYWJlbCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIHRleHQgY29udGVudCBvZiB0aGUgdHJhaWxpbmcgaWNvbi5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRUcmFpbGluZ0ljb25Db250ZW50ID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgaWYgKHRoaXMudHJhaWxpbmdJY29uKSB7XG4gICAgICAgICAgICB0aGlzLnRyYWlsaW5nSWNvbi5zZXRDb250ZW50KGNvbnRlbnQpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIGNoYXJhY3RlciBjb3VudGVyIHZhbHVlcyB0aGF0IHNob3dzIGNoYXJhY3RlcnMgdXNlZCBhbmQgdGhlIHRvdGFsXG4gICAgICogY2hhcmFjdGVyIGxpbWl0LlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLnNldGNoYXJhY3RlckNvdW50ZXIgPSBmdW5jdGlvbiAoY3VycmVudExlbmd0aCkge1xuICAgICAgICBpZiAoIXRoaXMuY2hhcmFjdGVyQ291bnRlcikge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIHZhciBtYXhMZW5ndGggPSB0aGlzLmdldE5hdGl2ZUlucHV0KCkubWF4TGVuZ3RoO1xuICAgICAgICBpZiAobWF4TGVuZ3RoID09PSAtMSkge1xuICAgICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCdNRENUZXh0RmllbGRGb3VuZGF0aW9uOiBFeHBlY3RlZCBtYXhsZW5ndGggaHRtbCBwcm9wZXJ0eSBvbiB0ZXh0IGlucHV0IG9yIHRleHRhcmVhLicpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuY2hhcmFjdGVyQ291bnRlci5zZXRDb3VudGVyVmFsdWUoY3VycmVudExlbmd0aCwgbWF4TGVuZ3RoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEByZXR1cm4gVHJ1ZSBpZiB0aGUgVGV4dCBGaWVsZCBpbnB1dCBmYWlscyBpbiBjb252ZXJ0aW5nIHRoZSB1c2VyLXN1cHBsaWVkXG4gICAgICogICAgIHZhbHVlLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLmlzQmFkSW5wdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIFRoZSBiYWRJbnB1dCBwcm9wZXJ0eSBpcyBub3Qgc3VwcG9ydGVkIGluIElFIDExIPCfkqkuXG4gICAgICAgIHJldHVybiB0aGlzLmdldE5hdGl2ZUlucHV0KCkudmFsaWRpdHkuYmFkSW5wdXQgfHwgZmFsc2U7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIFRoZSByZXN1bHQgb2YgbmF0aXZlIHZhbGlkaXR5IGNoZWNraW5nIChWYWxpZGl0eVN0YXRlLnZhbGlkKS5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5pc05hdGl2ZUlucHV0VmFsaWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmdldE5hdGl2ZUlucHV0KCkudmFsaWRpdHkudmFsaWQ7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdHlsZXMgdGhlIGNvbXBvbmVudCBiYXNlZCBvbiB0aGUgdmFsaWRpdHkgc3RhdGUuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkRm91bmRhdGlvbi5wcm90b3R5cGUuc3R5bGVWYWxpZGl0eSA9IGZ1bmN0aW9uIChpc1ZhbGlkKSB7XG4gICAgICAgIHZhciBJTlZBTElEID0gTURDVGV4dEZpZWxkRm91bmRhdGlvbi5jc3NDbGFzc2VzLklOVkFMSUQ7XG4gICAgICAgIGlmIChpc1ZhbGlkKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoSU5WQUxJRCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoSU5WQUxJRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGVscGVyVGV4dCkge1xuICAgICAgICAgICAgdGhpcy5oZWxwZXJUZXh0LnNldFZhbGlkaXR5KGlzVmFsaWQpO1xuICAgICAgICAgICAgLy8gV2UgZHluYW1pY2FsbHkgc2V0IG9yIHVuc2V0IGFyaWEtZGVzY3JpYmVkYnkgZm9yIHZhbGlkYXRpb24gaGVscGVyIHRleHRcbiAgICAgICAgICAgIC8vIG9ubHksIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGZpZWxkIGlzIHZhbGlkXG4gICAgICAgICAgICB2YXIgaGVscGVyVGV4dFZhbGlkYXRpb24gPSB0aGlzLmhlbHBlclRleHQuaXNWYWxpZGF0aW9uKCk7XG4gICAgICAgICAgICBpZiAoIWhlbHBlclRleHRWYWxpZGF0aW9uKSB7XG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdmFyIGhlbHBlclRleHRWaXNpYmxlID0gdGhpcy5oZWxwZXJUZXh0LmlzVmlzaWJsZSgpO1xuICAgICAgICAgICAgdmFyIGhlbHBlclRleHRJZCA9IHRoaXMuaGVscGVyVGV4dC5nZXRJZCgpO1xuICAgICAgICAgICAgaWYgKGhlbHBlclRleHRWaXNpYmxlICYmIGhlbHBlclRleHRJZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRJbnB1dEF0dHIoc3RyaW5ncy5BUklBX0RFU0NSSUJFREJZLCBoZWxwZXJUZXh0SWQpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUlucHV0QXR0cihzdHJpbmdzLkFSSUFfREVTQ1JJQkVEQlkpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTdHlsZXMgdGhlIGNvbXBvbmVudCBiYXNlZCBvbiB0aGUgZm9jdXNlZCBzdGF0ZS5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5zdHlsZUZvY3VzZWQgPSBmdW5jdGlvbiAoaXNGb2N1c2VkKSB7XG4gICAgICAgIHZhciBGT0NVU0VEID0gTURDVGV4dEZpZWxkRm91bmRhdGlvbi5jc3NDbGFzc2VzLkZPQ1VTRUQ7XG4gICAgICAgIGlmIChpc0ZvY3VzZWQpIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhGT0NVU0VEKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhGT0NVU0VEKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU3R5bGVzIHRoZSBjb21wb25lbnQgYmFzZWQgb24gdGhlIGRpc2FibGVkIHN0YXRlLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLnN0eWxlRGlzYWJsZWQgPSBmdW5jdGlvbiAoaXNEaXNhYmxlZCkge1xuICAgICAgICB2YXIgX2EgPSBNRENUZXh0RmllbGRGb3VuZGF0aW9uLmNzc0NsYXNzZXMsIERJU0FCTEVEID0gX2EuRElTQUJMRUQsIElOVkFMSUQgPSBfYS5JTlZBTElEO1xuICAgICAgICBpZiAoaXNEaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKERJU0FCTEVEKTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhJTlZBTElEKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhESVNBQkxFRCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMubGVhZGluZ0ljb24pIHtcbiAgICAgICAgICAgIHRoaXMubGVhZGluZ0ljb24uc2V0RGlzYWJsZWQoaXNEaXNhYmxlZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMudHJhaWxpbmdJY29uKSB7XG4gICAgICAgICAgICB0aGlzLnRyYWlsaW5nSWNvbi5zZXREaXNhYmxlZChpc0Rpc2FibGVkKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogU3R5bGVzIHRoZSBjb21wb25lbnQgYmFzZWQgb24gdGhlIGxhYmVsIGZsb2F0aW5nIHN0YXRlLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEZvdW5kYXRpb24ucHJvdG90eXBlLnN0eWxlRmxvYXRpbmcgPSBmdW5jdGlvbiAoaXNGbG9hdGluZykge1xuICAgICAgICB2YXIgTEFCRUxfRkxPQVRJTkcgPSBNRENUZXh0RmllbGRGb3VuZGF0aW9uLmNzc0NsYXNzZXMuTEFCRUxfRkxPQVRJTkc7XG4gICAgICAgIGlmIChpc0Zsb2F0aW5nKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoTEFCRUxfRkxPQVRJTkcpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUNsYXNzKExBQkVMX0ZMT0FUSU5HKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiBUaGUgbmF0aXZlIHRleHQgaW5wdXQgZWxlbWVudCBmcm9tIHRoZSBob3N0IGVudmlyb25tZW50LCBvciBhblxuICAgICAqICAgICBvYmplY3Qgd2l0aCB0aGUgc2FtZSBzaGFwZSBmb3IgdW5pdCB0ZXN0cy5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXROYXRpdmVJbnB1dCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgLy8gdGhpcy5hZGFwdGVyIG1heSBiZSB1bmRlZmluZWQgaW4gZm91bmRhdGlvbiB1bml0IHRlc3RzLiBUaGlzIGhhcHBlbnMgd2hlblxuICAgICAgICAvLyB0ZXN0ZG91YmxlIGlzIGNyZWF0aW5nIGEgbW9jayBvYmplY3QgYW5kIGludm9rZXMgdGhlXG4gICAgICAgIC8vIHNob3VsZFNoYWtlL3Nob3VsZEZsb2F0IGdldHRlcnMgKHdoaWNoIGluIHR1cm4gY2FsbCBnZXRWYWx1ZSgpLCB3aGljaFxuICAgICAgICAvLyBjYWxscyB0aGlzIG1ldGhvZCkgYmVmb3JlIGluaXQoKSBoYXMgYmVlbiBjYWxsZWQgZnJvbSB0aGUgTURDVGV4dEZpZWxkXG4gICAgICAgIC8vIGNvbnN0cnVjdG9yLiBUbyB3b3JrIGFyb3VuZCB0aGF0IGlzc3VlLCB3ZSByZXR1cm4gYSBkdW1teSBvYmplY3QuXG4gICAgICAgIHZhciBuYXRpdmVJbnB1dCA9IHRoaXMuYWRhcHRlciA/IHRoaXMuYWRhcHRlci5nZXROYXRpdmVJbnB1dCgpIDogbnVsbDtcbiAgICAgICAgcmV0dXJuIG5hdGl2ZUlucHV0IHx8IHtcbiAgICAgICAgICAgIGRpc2FibGVkOiBmYWxzZSxcbiAgICAgICAgICAgIG1heExlbmd0aDogLTEsXG4gICAgICAgICAgICByZXF1aXJlZDogZmFsc2UsXG4gICAgICAgICAgICB0eXBlOiAnaW5wdXQnLFxuICAgICAgICAgICAgdmFsaWRpdHk6IHtcbiAgICAgICAgICAgICAgICBiYWRJbnB1dDogZmFsc2UsXG4gICAgICAgICAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgdmFsdWU6ICcnLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1RleHRGaWVsZEZvdW5kYXRpb247XG59KE1EQ0ZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ1RleHRGaWVsZEZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENUZXh0RmllbGRGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBjc3NDbGFzc2VzID0ge1xuICAgIEhFTFBFUl9URVhUX1BFUlNJU1RFTlQ6ICdtZGMtdGV4dC1maWVsZC1oZWxwZXItdGV4dC0tcGVyc2lzdGVudCcsXG4gICAgSEVMUEVSX1RFWFRfVkFMSURBVElPTl9NU0c6ICdtZGMtdGV4dC1maWVsZC1oZWxwZXItdGV4dC0tdmFsaWRhdGlvbi1tc2cnLFxuICAgIFJPT1Q6ICdtZGMtdGV4dC1maWVsZC1oZWxwZXItdGV4dCcsXG59O1xudmFyIHN0cmluZ3MgPSB7XG4gICAgQVJJQV9ISURERU46ICdhcmlhLWhpZGRlbicsXG4gICAgUk9MRTogJ3JvbGUnLFxuICAgIFJPT1RfU0VMRUNUT1I6IFwiLlwiICsgY3NzQ2xhc3Nlcy5ST09ULFxufTtcbmV4cG9ydCB7IHN0cmluZ3MsIGNzc0NsYXNzZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0ZvdW5kYXRpb24gfSBmcm9tICdAbWF0ZXJpYWwvYmFzZS9mb3VuZGF0aW9uJztcbmltcG9ydCB7IGNzc0NsYXNzZXMsIHN0cmluZ3MgfSBmcm9tICcuL2NvbnN0YW50cyc7XG52YXIgTURDVGV4dEZpZWxkSGVscGVyVGV4dEZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ1RleHRGaWVsZEhlbHBlclRleHRGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1RleHRGaWVsZEhlbHBlclRleHRGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENUZXh0RmllbGRIZWxwZXJUZXh0Rm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkSGVscGVyVGV4dEZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkSGVscGVyVGV4dEZvdW5kYXRpb24sIFwic3RyaW5nc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ3M7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkSGVscGVyVGV4dEZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBNRENUZXh0RmllbGRIZWxwZXJUZXh0QWRhcHRlcn0gZm9yIHR5cGluZyBpbmZvcm1hdGlvbiBvbiBwYXJhbWV0ZXJzIGFuZCByZXR1cm4gdHlwZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBoYXNDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gZmFsc2U7IH0sXG4gICAgICAgICAgICAgICAgZ2V0QXR0cjogZnVuY3Rpb24gKCkgeyByZXR1cm4gbnVsbDsgfSxcbiAgICAgICAgICAgICAgICBzZXRBdHRyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVtb3ZlQXR0cjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHNldENvbnRlbnQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDVGV4dEZpZWxkSGVscGVyVGV4dEZvdW5kYXRpb24ucHJvdG90eXBlLmdldElkID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmdldEF0dHIoJ2lkJyk7XG4gICAgfTtcbiAgICBNRENUZXh0RmllbGRIZWxwZXJUZXh0Rm91bmRhdGlvbi5wcm90b3R5cGUuaXNWaXNpYmxlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmdldEF0dHIoc3RyaW5ncy5BUklBX0hJRERFTikgIT09ICd0cnVlJztcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbnRlbnQgb2YgdGhlIGhlbHBlciB0ZXh0IGZpZWxkLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEhlbHBlclRleHRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRDb250ZW50ID0gZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnNldENvbnRlbnQoY29udGVudCk7XG4gICAgfTtcbiAgICBNRENUZXh0RmllbGRIZWxwZXJUZXh0Rm91bmRhdGlvbi5wcm90b3R5cGUuaXNQZXJzaXN0ZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmhhc0NsYXNzKGNzc0NsYXNzZXMuSEVMUEVSX1RFWFRfUEVSU0lTVEVOVCk7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcGFyYW0gaXNQZXJzaXN0ZW50IFNldHMgdGhlIHBlcnNpc3RlbmN5IG9mIHRoZSBoZWxwZXIgdGV4dC5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRIZWxwZXJUZXh0Rm91bmRhdGlvbi5wcm90b3R5cGUuc2V0UGVyc2lzdGVudCA9IGZ1bmN0aW9uIChpc1BlcnNpc3RlbnQpIHtcbiAgICAgICAgaWYgKGlzUGVyc2lzdGVudCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLmFkZENsYXNzKGNzc0NsYXNzZXMuSEVMUEVSX1RFWFRfUEVSU0lTVEVOVCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQ2xhc3MoY3NzQ2xhc3Nlcy5IRUxQRVJfVEVYVF9QRVJTSVNURU5UKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogQHJldHVybiB3aGV0aGVyIHRoZSBoZWxwZXIgdGV4dCBhY3RzIGFzIGFuIGVycm9yIHZhbGlkYXRpb24gbWVzc2FnZS5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGRIZWxwZXJUZXh0Rm91bmRhdGlvbi5wcm90b3R5cGUuaXNWYWxpZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5hZGFwdGVyLmhhc0NsYXNzKGNzc0NsYXNzZXMuSEVMUEVSX1RFWFRfVkFMSURBVElPTl9NU0cpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogQHBhcmFtIGlzVmFsaWRhdGlvbiBUcnVlIHRvIG1ha2UgdGhlIGhlbHBlciB0ZXh0IGFjdCBhcyBhbiBlcnJvciB2YWxpZGF0aW9uIG1lc3NhZ2UuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkSGVscGVyVGV4dEZvdW5kYXRpb24ucHJvdG90eXBlLnNldFZhbGlkYXRpb24gPSBmdW5jdGlvbiAoaXNWYWxpZGF0aW9uKSB7XG4gICAgICAgIGlmIChpc1ZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5hZGRDbGFzcyhjc3NDbGFzc2VzLkhFTFBFUl9URVhUX1ZBTElEQVRJT05fTVNHKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhjc3NDbGFzc2VzLkhFTFBFUl9URVhUX1ZBTElEQVRJT05fTVNHKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgLyoqXG4gICAgICogTWFrZXMgdGhlIGhlbHBlciB0ZXh0IHZpc2libGUgdG8gdGhlIHNjcmVlbiByZWFkZXIuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkSGVscGVyVGV4dEZvdW5kYXRpb24ucHJvdG90eXBlLnNob3dUb1NjcmVlblJlYWRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUF0dHIoc3RyaW5ncy5BUklBX0hJRERFTik7XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBTZXRzIHRoZSB2YWxpZGl0eSBvZiB0aGUgaGVscGVyIHRleHQgYmFzZWQgb24gdGhlIGlucHV0IHZhbGlkaXR5LlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZEhlbHBlclRleHRGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRWYWxpZGl0eSA9IGZ1bmN0aW9uIChpbnB1dElzVmFsaWQpIHtcbiAgICAgICAgdmFyIGhlbHBlclRleHRJc1BlcnNpc3RlbnQgPSB0aGlzLmFkYXB0ZXIuaGFzQ2xhc3MoY3NzQ2xhc3Nlcy5IRUxQRVJfVEVYVF9QRVJTSVNURU5UKTtcbiAgICAgICAgdmFyIGhlbHBlclRleHRJc1ZhbGlkYXRpb25Nc2cgPSB0aGlzLmFkYXB0ZXIuaGFzQ2xhc3MoY3NzQ2xhc3Nlcy5IRUxQRVJfVEVYVF9WQUxJREFUSU9OX01TRyk7XG4gICAgICAgIHZhciB2YWxpZGF0aW9uTXNnTmVlZHNEaXNwbGF5ID0gaGVscGVyVGV4dElzVmFsaWRhdGlvbk1zZyAmJiAhaW5wdXRJc1ZhbGlkO1xuICAgICAgICBpZiAodmFsaWRhdGlvbk1zZ05lZWRzRGlzcGxheSkge1xuICAgICAgICAgICAgdGhpcy5zaG93VG9TY3JlZW5SZWFkZXIoKTtcbiAgICAgICAgICAgIC8vIElmIHJvbGUgaXMgYWxyZWFkeSBhbGVydCwgcmVmcmVzaCBpdCB0byB0cmlnZ2VyIGFub3RoZXIgYW5ub3VuY2VtZW50XG4gICAgICAgICAgICAvLyBmcm9tIHNjcmVlbnJlYWRlci5cbiAgICAgICAgICAgIGlmICh0aGlzLmFkYXB0ZXIuZ2V0QXR0cihzdHJpbmdzLlJPTEUpID09PSAnYWxlcnQnKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5yZWZyZXNoQWxlcnRSb2xlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0QXR0cihzdHJpbmdzLlJPTEUsICdhbGVydCcpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUF0dHIoc3RyaW5ncy5ST0xFKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIWhlbHBlclRleHRJc1BlcnNpc3RlbnQgJiYgIXZhbGlkYXRpb25Nc2dOZWVkc0Rpc3BsYXkpIHtcbiAgICAgICAgICAgIHRoaXMuaGlkZSgpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBIaWRlcyB0aGUgaGVscCB0ZXh0IGZyb20gc2NyZWVuIHJlYWRlcnMuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkSGVscGVyVGV4dEZvdW5kYXRpb24ucHJvdG90eXBlLmhpZGUgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyKHN0cmluZ3MuQVJJQV9ISURERU4sICd0cnVlJyk7XG4gICAgfTtcbiAgICBNRENUZXh0RmllbGRIZWxwZXJUZXh0Rm91bmRhdGlvbi5wcm90b3R5cGUucmVmcmVzaEFsZXJ0Um9sZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgdGhpcy5hZGFwdGVyLnJlbW92ZUF0dHIoc3RyaW5ncy5ST0xFKTtcbiAgICAgICAgcmVxdWVzdEFuaW1hdGlvbkZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmFkYXB0ZXIuc2V0QXR0cihzdHJpbmdzLlJPTEUsICdhbGVydCcpO1xuICAgICAgICB9KTtcbiAgICB9O1xuICAgIHJldHVybiBNRENUZXh0RmllbGRIZWxwZXJUZXh0Rm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDVGV4dEZpZWxkSGVscGVyVGV4dEZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENUZXh0RmllbGRIZWxwZXJUZXh0Rm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0NvbXBvbmVudCB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBNRENUZXh0RmllbGRIZWxwZXJUZXh0Rm91bmRhdGlvbiB9IGZyb20gJy4vZm91bmRhdGlvbic7XG52YXIgTURDVGV4dEZpZWxkSGVscGVyVGV4dCA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDVGV4dEZpZWxkSGVscGVyVGV4dCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENUZXh0RmllbGRIZWxwZXJUZXh0KCkge1xuICAgICAgICByZXR1cm4gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgfVxuICAgIE1EQ1RleHRGaWVsZEhlbHBlclRleHQuYXR0YWNoVG8gPSBmdW5jdGlvbiAocm9vdCkge1xuICAgICAgICByZXR1cm4gbmV3IE1EQ1RleHRGaWVsZEhlbHBlclRleHQocm9vdCk7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkSGVscGVyVGV4dC5wcm90b3R5cGUsIFwiZm91bmRhdGlvbkZvclRleHRGaWVsZFwiLCB7XG4gICAgICAgIC8vIFByb3ZpZGVkIGZvciBhY2Nlc3MgYnkgTURDVGV4dEZpZWxkIGNvbXBvbmVudFxuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmZvdW5kYXRpb247XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENUZXh0RmllbGRIZWxwZXJUZXh0LnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IHtcbiAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgZ2V0QXR0cjogZnVuY3Rpb24gKGF0dHIpIHsgcmV0dXJuIF90aGlzLnJvb3QuZ2V0QXR0cmlidXRlKGF0dHIpOyB9LFxuICAgICAgICAgICAgc2V0QXR0cjogZnVuY3Rpb24gKGF0dHIsIHZhbHVlKSB7IHJldHVybiBfdGhpcy5yb290LnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7IH0sXG4gICAgICAgICAgICByZW1vdmVBdHRyOiBmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gX3RoaXMucm9vdC5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7IH0sXG4gICAgICAgICAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJvb3QudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgcmV0dXJuIG5ldyBNRENUZXh0RmllbGRIZWxwZXJUZXh0Rm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENUZXh0RmllbGRIZWxwZXJUZXh0O1xufShNRENDb21wb25lbnQpKTtcbmV4cG9ydCB7IE1EQ1RleHRGaWVsZEhlbHBlclRleHQgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbnZhciBzdHJpbmdzID0ge1xuICAgIElDT05fRVZFTlQ6ICdNRENUZXh0RmllbGQ6aWNvbicsXG4gICAgSUNPTl9ST0xFOiAnYnV0dG9uJyxcbn07XG52YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICBST09UOiAnbWRjLXRleHQtZmllbGRfX2ljb24nLFxufTtcbmV4cG9ydCB7IHN0cmluZ3MsIGNzc0NsYXNzZXMgfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbnN0YW50cy5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMsIF9fdmFsdWVzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBjc3NDbGFzc2VzLCBzdHJpbmdzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xudmFyIElOVEVSQUNUSU9OX0VWRU5UUyA9IFsnY2xpY2snLCAna2V5ZG93biddO1xudmFyIE1EQ1RleHRGaWVsZEljb25Gb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENUZXh0RmllbGRJY29uRm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENUZXh0RmllbGRJY29uRm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENUZXh0RmllbGRJY29uRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgICAgICBfdGhpcy5zYXZlZFRhYkluZGV4ID0gbnVsbDtcbiAgICAgICAgX3RoaXMuaW50ZXJhY3Rpb25IYW5kbGVyID0gZnVuY3Rpb24gKGV2dCkge1xuICAgICAgICAgICAgX3RoaXMuaGFuZGxlSW50ZXJhY3Rpb24oZXZ0KTtcbiAgICAgICAgfTtcbiAgICAgICAgcmV0dXJuIF90aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkSWNvbkZvdW5kYXRpb24sIFwic3RyaW5nc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ3M7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkSWNvbkZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkSWNvbkZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBNRENUZXh0RmllbGRJY29uQWRhcHRlcn0gZm9yIHR5cGluZyBpbmZvcm1hdGlvbiBvbiBwYXJhbWV0ZXJzIGFuZCByZXR1cm4gdHlwZXMuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgICAgIGdldEF0dHI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG51bGw7IH0sXG4gICAgICAgICAgICAgICAgc2V0QXR0cjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIHJlbW92ZUF0dHI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBkZXJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoKSB7IHJldHVybiB1bmRlZmluZWQ7IH0sXG4gICAgICAgICAgICAgICAgbm90aWZ5SWNvbkFjdGlvbjogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBNRENUZXh0RmllbGRJY29uRm91bmRhdGlvbi5wcm90b3R5cGUuaW5pdCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGVfMSwgX2E7XG4gICAgICAgIHRoaXMuc2F2ZWRUYWJJbmRleCA9IHRoaXMuYWRhcHRlci5nZXRBdHRyKCd0YWJpbmRleCcpO1xuICAgICAgICB0cnkge1xuICAgICAgICAgICAgZm9yICh2YXIgSU5URVJBQ1RJT05fRVZFTlRTXzEgPSBfX3ZhbHVlcyhJTlRFUkFDVElPTl9FVkVOVFMpLCBJTlRFUkFDVElPTl9FVkVOVFNfMV8xID0gSU5URVJBQ1RJT05fRVZFTlRTXzEubmV4dCgpOyAhSU5URVJBQ1RJT05fRVZFTlRTXzFfMS5kb25lOyBJTlRFUkFDVElPTl9FVkVOVFNfMV8xID0gSU5URVJBQ1RJT05fRVZFTlRTXzEubmV4dCgpKSB7XG4gICAgICAgICAgICAgICAgdmFyIGV2dFR5cGUgPSBJTlRFUkFDVElPTl9FVkVOVFNfMV8xLnZhbHVlO1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcihldnRUeXBlLCB0aGlzLmludGVyYWN0aW9uSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMV8xKSB7IGVfMSA9IHsgZXJyb3I6IGVfMV8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChJTlRFUkFDVElPTl9FVkVOVFNfMV8xICYmICFJTlRFUkFDVElPTl9FVkVOVFNfMV8xLmRvbmUgJiYgKF9hID0gSU5URVJBQ1RJT05fRVZFTlRTXzEucmV0dXJuKSkgX2EuY2FsbChJTlRFUkFDVElPTl9FVkVOVFNfMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1RleHRGaWVsZEljb25Gb3VuZGF0aW9uLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8yLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIElOVEVSQUNUSU9OX0VWRU5UU18yID0gX192YWx1ZXMoSU5URVJBQ1RJT05fRVZFTlRTKSwgSU5URVJBQ1RJT05fRVZFTlRTXzJfMSA9IElOVEVSQUNUSU9OX0VWRU5UU18yLm5leHQoKTsgIUlOVEVSQUNUSU9OX0VWRU5UU18yXzEuZG9uZTsgSU5URVJBQ1RJT05fRVZFTlRTXzJfMSA9IElOVEVSQUNUSU9OX0VWRU5UU18yLm5leHQoKSkge1xuICAgICAgICAgICAgICAgIHZhciBldnRUeXBlID0gSU5URVJBQ1RJT05fRVZFTlRTXzJfMS52YWx1ZTtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIuZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcihldnRUeXBlLCB0aGlzLmludGVyYWN0aW9uSGFuZGxlcik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgY2F0Y2ggKGVfMl8xKSB7IGVfMiA9IHsgZXJyb3I6IGVfMl8xIH07IH1cbiAgICAgICAgZmluYWxseSB7XG4gICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIGlmIChJTlRFUkFDVElPTl9FVkVOVFNfMl8xICYmICFJTlRFUkFDVElPTl9FVkVOVFNfMl8xLmRvbmUgJiYgKF9hID0gSU5URVJBQ1RJT05fRVZFTlRTXzIucmV0dXJuKSkgX2EuY2FsbChJTlRFUkFDVElPTl9FVkVOVFNfMik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMikgdGhyb3cgZV8yLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIE1EQ1RleHRGaWVsZEljb25Gb3VuZGF0aW9uLnByb3RvdHlwZS5zZXREaXNhYmxlZCA9IGZ1bmN0aW9uIChkaXNhYmxlZCkge1xuICAgICAgICBpZiAoIXRoaXMuc2F2ZWRUYWJJbmRleCkge1xuICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICB9XG4gICAgICAgIGlmIChkaXNhYmxlZCkge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnNldEF0dHIoJ3RhYmluZGV4JywgJy0xJyk7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIucmVtb3ZlQXR0cigncm9sZScpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLnNldEF0dHIoJ3RhYmluZGV4JywgdGhpcy5zYXZlZFRhYkluZGV4KTtcbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyKCdyb2xlJywgc3RyaW5ncy5JQ09OX1JPTEUpO1xuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENUZXh0RmllbGRJY29uRm91bmRhdGlvbi5wcm90b3R5cGUuc2V0QXJpYUxhYmVsID0gZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5zZXRBdHRyKCdhcmlhLWxhYmVsJywgbGFiZWwpO1xuICAgIH07XG4gICAgTURDVGV4dEZpZWxkSWNvbkZvdW5kYXRpb24ucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0Q29udGVudChjb250ZW50KTtcbiAgICB9O1xuICAgIE1EQ1RleHRGaWVsZEljb25Gb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVJbnRlcmFjdGlvbiA9IGZ1bmN0aW9uIChldnQpIHtcbiAgICAgICAgdmFyIGlzRW50ZXJLZXkgPSBldnQua2V5ID09PSAnRW50ZXInIHx8IGV2dC5rZXlDb2RlID09PSAxMztcbiAgICAgICAgaWYgKGV2dC50eXBlID09PSAnY2xpY2snIHx8IGlzRW50ZXJLZXkpIHtcbiAgICAgICAgICAgIGV2dC5wcmV2ZW50RGVmYXVsdCgpOyAvLyBzdG9wIGNsaWNrIGZyb20gY2F1c2luZyBob3N0IGxhYmVsIHRvIGZvY3VzXG4gICAgICAgICAgICAvLyBpbnB1dFxuICAgICAgICAgICAgdGhpcy5hZGFwdGVyLm5vdGlmeUljb25BY3Rpb24oKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgcmV0dXJuIE1EQ1RleHRGaWVsZEljb25Gb3VuZGF0aW9uO1xufShNRENGb3VuZGF0aW9uKSk7XG5leHBvcnQgeyBNRENUZXh0RmllbGRJY29uRm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ1RleHRGaWVsZEljb25Gb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcyB9IGZyb20gXCJ0c2xpYlwiO1xuaW1wb3J0IHsgTURDQ29tcG9uZW50IH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ1RleHRGaWVsZEljb25Gb3VuZGF0aW9uIH0gZnJvbSAnLi9mb3VuZGF0aW9uJztcbnZhciBNRENUZXh0RmllbGRJY29uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENUZXh0RmllbGRJY29uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ1RleHRGaWVsZEljb24oKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTURDVGV4dEZpZWxkSWNvbi5hdHRhY2hUbyA9IGZ1bmN0aW9uIChyb290KSB7XG4gICAgICAgIHJldHVybiBuZXcgTURDVGV4dEZpZWxkSWNvbihyb290KTtcbiAgICB9O1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGRJY29uLnByb3RvdHlwZSwgXCJmb3VuZGF0aW9uRm9yVGV4dEZpZWxkXCIsIHtcbiAgICAgICAgLy8gUHJvdmlkZWQgZm9yIGFjY2VzcyBieSBNRENUZXh0RmllbGQgY29tcG9uZW50XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm91bmRhdGlvbjtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE1EQ1RleHRGaWVsZEljb24ucHJvdG90eXBlLmdldERlZmF1bHRGb3VuZGF0aW9uID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICAvLyBETyBOT1QgSU5MSU5FIHRoaXMgdmFyaWFibGUuIEZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LCBmb3VuZGF0aW9ucyB0YWtlIGEgUGFydGlhbDxNRENGb29BZGFwdGVyPi5cbiAgICAgICAgLy8gVG8gZW5zdXJlIHdlIGRvbid0IGFjY2lkZW50YWxseSBvbWl0IGFueSBtZXRob2RzLCB3ZSBuZWVkIGEgc2VwYXJhdGUsIHN0cm9uZ2x5IHR5cGVkIGFkYXB0ZXIgdmFyaWFibGUuXG4gICAgICAgIC8vIHRzbGludDpkaXNhYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5cyBNZXRob2RzIHNob3VsZCBiZSBpbiB0aGUgc2FtZSBvcmRlciBhcyB0aGUgYWRhcHRlciBpbnRlcmZhY2UuXG4gICAgICAgIHZhciBhZGFwdGVyID0ge1xuICAgICAgICAgICAgZ2V0QXR0cjogZnVuY3Rpb24gKGF0dHIpIHsgcmV0dXJuIF90aGlzLnJvb3QuZ2V0QXR0cmlidXRlKGF0dHIpOyB9LFxuICAgICAgICAgICAgc2V0QXR0cjogZnVuY3Rpb24gKGF0dHIsIHZhbHVlKSB7IHJldHVybiBfdGhpcy5yb290LnNldEF0dHJpYnV0ZShhdHRyLCB2YWx1ZSk7IH0sXG4gICAgICAgICAgICByZW1vdmVBdHRyOiBmdW5jdGlvbiAoYXR0cikgeyByZXR1cm4gX3RoaXMucm9vdC5yZW1vdmVBdHRyaWJ1dGUoYXR0cik7IH0sXG4gICAgICAgICAgICBzZXRDb250ZW50OiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJvb3QudGV4dENvbnRlbnQgPSBjb250ZW50O1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIHJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlcikgeyByZXR1cm4gX3RoaXMubGlzdGVuKGV2dFR5cGUsIGhhbmRsZXIpOyB9LFxuICAgICAgICAgICAgZGVyZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHsgcmV0dXJuIF90aGlzLnVubGlzdGVuKGV2dFR5cGUsIGhhbmRsZXIpOyB9LFxuICAgICAgICAgICAgbm90aWZ5SWNvbkFjdGlvbjogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMuZW1pdChNRENUZXh0RmllbGRJY29uRm91bmRhdGlvbi5zdHJpbmdzLklDT05fRVZFTlQsIHt9IC8qIGV2dERhdGEgKi8sIHRydWUgLyogc2hvdWxkQnViYmxlICovKTsgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgcmV0dXJuIG5ldyBNRENUZXh0RmllbGRJY29uRm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENUZXh0RmllbGRJY29uO1xufShNRENDb21wb25lbnQpKTtcbmV4cG9ydCB7IE1EQ1RleHRGaWVsZEljb24gfTtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWNvbXBvbmVudC5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fYXNzaWduLCBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0NvbXBvbmVudCB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBhcHBseVBhc3NpdmUgfSBmcm9tICdAbWF0ZXJpYWwvZG9tL2V2ZW50cyc7XG5pbXBvcnQgKiBhcyBwb255ZmlsbCBmcm9tICdAbWF0ZXJpYWwvZG9tL3BvbnlmaWxsJztcbmltcG9ydCB7IE1EQ0Zsb2F0aW5nTGFiZWwgfSBmcm9tICdAbWF0ZXJpYWwvZmxvYXRpbmctbGFiZWwvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ0xpbmVSaXBwbGUgfSBmcm9tICdAbWF0ZXJpYWwvbGluZS1yaXBwbGUvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ05vdGNoZWRPdXRsaW5lIH0gZnJvbSAnQG1hdGVyaWFsL25vdGNoZWQtb3V0bGluZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgTURDUmlwcGxlIH0gZnJvbSAnQG1hdGVyaWFsL3JpcHBsZS9jb21wb25lbnQnO1xuaW1wb3J0IHsgTURDUmlwcGxlRm91bmRhdGlvbiB9IGZyb20gJ0BtYXRlcmlhbC9yaXBwbGUvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyIH0gZnJvbSAnLi9jaGFyYWN0ZXItY291bnRlci9jb21wb25lbnQnO1xuaW1wb3J0IHsgTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24gfSBmcm9tICcuL2NoYXJhY3Rlci1jb3VudGVyL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgY3NzQ2xhc3Nlcywgc3RyaW5ncyB9IGZyb20gJy4vY29uc3RhbnRzJztcbmltcG9ydCB7IE1EQ1RleHRGaWVsZEZvdW5kYXRpb24gfSBmcm9tICcuL2ZvdW5kYXRpb24nO1xuaW1wb3J0IHsgTURDVGV4dEZpZWxkSGVscGVyVGV4dCB9IGZyb20gJy4vaGVscGVyLXRleHQvY29tcG9uZW50JztcbmltcG9ydCB7IE1EQ1RleHRGaWVsZEhlbHBlclRleHRGb3VuZGF0aW9uIH0gZnJvbSAnLi9oZWxwZXItdGV4dC9mb3VuZGF0aW9uJztcbmltcG9ydCB7IE1EQ1RleHRGaWVsZEljb24gfSBmcm9tICcuL2ljb24vY29tcG9uZW50JztcbnZhciBNRENUZXh0RmllbGQgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ1RleHRGaWVsZCwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENUZXh0RmllbGQoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTURDVGV4dEZpZWxkLmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENUZXh0RmllbGQocm9vdCk7XG4gICAgfTtcbiAgICBNRENUZXh0RmllbGQucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAocmlwcGxlRmFjdG9yeSwgbGluZVJpcHBsZUZhY3RvcnksIGhlbHBlclRleHRGYWN0b3J5LCBjaGFyYWN0ZXJDb3VudGVyRmFjdG9yeSwgaWNvbkZhY3RvcnksIGxhYmVsRmFjdG9yeSwgb3V0bGluZUZhY3RvcnkpIHtcbiAgICAgICAgaWYgKHJpcHBsZUZhY3RvcnkgPT09IHZvaWQgMCkgeyByaXBwbGVGYWN0b3J5ID0gZnVuY3Rpb24gKGVsLCBmb3VuZGF0aW9uKSB7IHJldHVybiBuZXcgTURDUmlwcGxlKGVsLCBmb3VuZGF0aW9uKTsgfTsgfVxuICAgICAgICBpZiAobGluZVJpcHBsZUZhY3RvcnkgPT09IHZvaWQgMCkgeyBsaW5lUmlwcGxlRmFjdG9yeSA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gbmV3IE1EQ0xpbmVSaXBwbGUoZWwpOyB9OyB9XG4gICAgICAgIGlmIChoZWxwZXJUZXh0RmFjdG9yeSA9PT0gdm9pZCAwKSB7IGhlbHBlclRleHRGYWN0b3J5ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiBuZXcgTURDVGV4dEZpZWxkSGVscGVyVGV4dChlbCk7IH07IH1cbiAgICAgICAgaWYgKGNoYXJhY3RlckNvdW50ZXJGYWN0b3J5ID09PSB2b2lkIDApIHsgY2hhcmFjdGVyQ291bnRlckZhY3RvcnkgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIG5ldyBNRENUZXh0RmllbGRDaGFyYWN0ZXJDb3VudGVyKGVsKTsgfTsgfVxuICAgICAgICBpZiAoaWNvbkZhY3RvcnkgPT09IHZvaWQgMCkgeyBpY29uRmFjdG9yeSA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gbmV3IE1EQ1RleHRGaWVsZEljb24oZWwpOyB9OyB9XG4gICAgICAgIGlmIChsYWJlbEZhY3RvcnkgPT09IHZvaWQgMCkgeyBsYWJlbEZhY3RvcnkgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIG5ldyBNRENGbG9hdGluZ0xhYmVsKGVsKTsgfTsgfVxuICAgICAgICBpZiAob3V0bGluZUZhY3RvcnkgPT09IHZvaWQgMCkgeyBvdXRsaW5lRmFjdG9yeSA9IGZ1bmN0aW9uIChlbCkgeyByZXR1cm4gbmV3IE1EQ05vdGNoZWRPdXRsaW5lKGVsKTsgfTsgfVxuICAgICAgICB0aGlzLmlucHV0ID1cbiAgICAgICAgICAgIHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuSU5QVVRfU0VMRUNUT1IpO1xuICAgICAgICB2YXIgbGFiZWxFbGVtZW50ID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3Ioc3RyaW5ncy5MQUJFTF9TRUxFQ1RPUik7XG4gICAgICAgIHRoaXMubGFiZWwgPSBsYWJlbEVsZW1lbnQgPyBsYWJlbEZhY3RvcnkobGFiZWxFbGVtZW50KSA6IG51bGw7XG4gICAgICAgIHZhciBsaW5lUmlwcGxlRWxlbWVudCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuTElORV9SSVBQTEVfU0VMRUNUT1IpO1xuICAgICAgICB0aGlzLmxpbmVSaXBwbGUgPVxuICAgICAgICAgICAgbGluZVJpcHBsZUVsZW1lbnQgPyBsaW5lUmlwcGxlRmFjdG9yeShsaW5lUmlwcGxlRWxlbWVudCkgOiBudWxsO1xuICAgICAgICB2YXIgb3V0bGluZUVsZW1lbnQgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzdHJpbmdzLk9VVExJTkVfU0VMRUNUT1IpO1xuICAgICAgICB0aGlzLm91dGxpbmUgPSBvdXRsaW5lRWxlbWVudCA/IG91dGxpbmVGYWN0b3J5KG91dGxpbmVFbGVtZW50KSA6IG51bGw7XG4gICAgICAgIC8vIEhlbHBlciB0ZXh0XG4gICAgICAgIHZhciBoZWxwZXJUZXh0U3RyaW5ncyA9IE1EQ1RleHRGaWVsZEhlbHBlclRleHRGb3VuZGF0aW9uLnN0cmluZ3M7XG4gICAgICAgIHZhciBuZXh0RWxlbWVudFNpYmxpbmcgPSB0aGlzLnJvb3QubmV4dEVsZW1lbnRTaWJsaW5nO1xuICAgICAgICB2YXIgaGFzSGVscGVyTGluZSA9IChuZXh0RWxlbWVudFNpYmxpbmcgJiYgbmV4dEVsZW1lbnRTaWJsaW5nLmNsYXNzTGlzdC5jb250YWlucyhjc3NDbGFzc2VzLkhFTFBFUl9MSU5FKSk7XG4gICAgICAgIHZhciBoZWxwZXJUZXh0RWwgPSBoYXNIZWxwZXJMaW5lICYmIG5leHRFbGVtZW50U2libGluZyAmJiBuZXh0RWxlbWVudFNpYmxpbmcucXVlcnlTZWxlY3RvcihoZWxwZXJUZXh0U3RyaW5ncy5ST09UX1NFTEVDVE9SKTtcbiAgICAgICAgdGhpcy5oZWxwZXJUZXh0ID0gaGVscGVyVGV4dEVsID8gaGVscGVyVGV4dEZhY3RvcnkoaGVscGVyVGV4dEVsKSA6IG51bGw7XG4gICAgICAgIC8vIENoYXJhY3RlciBjb3VudGVyXG4gICAgICAgIHZhciBjaGFyYWN0ZXJDb3VudGVyU3RyaW5ncyA9IE1EQ1RleHRGaWVsZENoYXJhY3RlckNvdW50ZXJGb3VuZGF0aW9uLnN0cmluZ3M7XG4gICAgICAgIHZhciBjaGFyYWN0ZXJDb3VudGVyRWwgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihjaGFyYWN0ZXJDb3VudGVyU3RyaW5ncy5ST09UX1NFTEVDVE9SKTtcbiAgICAgICAgLy8gSWYgY2hhcmFjdGVyIGNvdW50ZXIgaXMgbm90IGZvdW5kIGluIHJvb3QgZWxlbWVudCBzZWFyY2ggaW4gc2libGluZyBlbGVtZW50LlxuICAgICAgICBpZiAoIWNoYXJhY3RlckNvdW50ZXJFbCAmJiBoYXNIZWxwZXJMaW5lICYmIG5leHRFbGVtZW50U2libGluZykge1xuICAgICAgICAgICAgY2hhcmFjdGVyQ291bnRlckVsID0gbmV4dEVsZW1lbnRTaWJsaW5nLnF1ZXJ5U2VsZWN0b3IoY2hhcmFjdGVyQ291bnRlclN0cmluZ3MuUk9PVF9TRUxFQ1RPUik7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5jaGFyYWN0ZXJDb3VudGVyID1cbiAgICAgICAgICAgIGNoYXJhY3RlckNvdW50ZXJFbCA/IGNoYXJhY3RlckNvdW50ZXJGYWN0b3J5KGNoYXJhY3RlckNvdW50ZXJFbCkgOiBudWxsO1xuICAgICAgICAvLyBMZWFkaW5nIGljb25cbiAgICAgICAgdmFyIGxlYWRpbmdJY29uRWwgPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzdHJpbmdzLkxFQURJTkdfSUNPTl9TRUxFQ1RPUik7XG4gICAgICAgIHRoaXMubGVhZGluZ0ljb24gPSBsZWFkaW5nSWNvbkVsID8gaWNvbkZhY3RvcnkobGVhZGluZ0ljb25FbCkgOiBudWxsO1xuICAgICAgICAvLyBUcmFpbGluZyBpY29uXG4gICAgICAgIHZhciB0cmFpbGluZ0ljb25FbCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuVFJBSUxJTkdfSUNPTl9TRUxFQ1RPUik7XG4gICAgICAgIHRoaXMudHJhaWxpbmdJY29uID0gdHJhaWxpbmdJY29uRWwgPyBpY29uRmFjdG9yeSh0cmFpbGluZ0ljb25FbCkgOiBudWxsO1xuICAgICAgICAvLyBQcmVmaXggYW5kIFN1ZmZpeFxuICAgICAgICB0aGlzLnByZWZpeCA9IHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yKHN0cmluZ3MuUFJFRklYX1NFTEVDVE9SKTtcbiAgICAgICAgdGhpcy5zdWZmaXggPSB0aGlzLnJvb3QucXVlcnlTZWxlY3RvcihzdHJpbmdzLlNVRkZJWF9TRUxFQ1RPUik7XG4gICAgICAgIHRoaXMucmlwcGxlID0gdGhpcy5jcmVhdGVSaXBwbGUocmlwcGxlRmFjdG9yeSk7XG4gICAgfTtcbiAgICBNRENUZXh0RmllbGQucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLnJpcHBsZSkge1xuICAgICAgICAgICAgdGhpcy5yaXBwbGUuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxpbmVSaXBwbGUpIHtcbiAgICAgICAgICAgIHRoaXMubGluZVJpcHBsZS5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaGVscGVyVGV4dCkge1xuICAgICAgICAgICAgdGhpcy5oZWxwZXJUZXh0LmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jaGFyYWN0ZXJDb3VudGVyKSB7XG4gICAgICAgICAgICB0aGlzLmNoYXJhY3RlckNvdW50ZXIuZGVzdHJveSgpO1xuICAgICAgICB9XG4gICAgICAgIGlmICh0aGlzLmxlYWRpbmdJY29uKSB7XG4gICAgICAgICAgICB0aGlzLmxlYWRpbmdJY29uLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy50cmFpbGluZ0ljb24pIHtcbiAgICAgICAgICAgIHRoaXMudHJhaWxpbmdJY29uLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5sYWJlbCkge1xuICAgICAgICAgICAgdGhpcy5sYWJlbC5kZXN0cm95KCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMub3V0bGluZSkge1xuICAgICAgICAgICAgdGhpcy5vdXRsaW5lLmRlc3Ryb3koKTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEluaXRpYWxpemVzIHRoZSBUZXh0IEZpZWxkJ3MgaW50ZXJuYWwgc3RhdGUgYmFzZWQgb24gdGhlIGVudmlyb25tZW50J3NcbiAgICAgKiBzdGF0ZS5cbiAgICAgKi9cbiAgICBNRENUZXh0RmllbGQucHJvdG90eXBlLmluaXRpYWxTeW5jV2l0aERPTSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5kaXNhYmxlZCA9IHRoaXMuaW5wdXQuZGlzYWJsZWQ7XG4gICAgfTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJ2YWx1ZVwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm91bmRhdGlvbi5nZXRWYWx1ZSgpO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQgb24gdGhlIGlucHV0LlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRWYWx1ZSh2YWx1ZSk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJkaXNhYmxlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm91bmRhdGlvbi5pc0Rpc2FibGVkKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0gZGlzYWJsZWQgU2V0cyB0aGUgVGV4dCBGaWVsZCBkaXNhYmxlZCBvciBlbmFibGVkLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoZGlzYWJsZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXREaXNhYmxlZChkaXNhYmxlZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJ2YWxpZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuZm91bmRhdGlvbi5pc1ZhbGlkKCk7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0gdmFsaWQgU2V0cyB0aGUgVGV4dCBGaWVsZCB2YWxpZCBvciBpbnZhbGlkLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAodmFsaWQpIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRWYWxpZCh2YWxpZCk7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJyZXF1aXJlZFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXQucmVxdWlyZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0gcmVxdWlyZWQgU2V0cyB0aGUgVGV4dCBGaWVsZCB0byByZXF1aXJlZC5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHJlcXVpcmVkKSB7XG4gICAgICAgICAgICB0aGlzLmlucHV0LnJlcXVpcmVkID0gcmVxdWlyZWQ7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJwYXR0ZXJuXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC5wYXR0ZXJuO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogQHBhcmFtIHBhdHRlcm4gU2V0cyB0aGUgaW5wdXQgZWxlbWVudCdzIHZhbGlkYXRpb24gcGF0dGVybi5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHBhdHRlcm4pIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQucGF0dGVybiA9IHBhdHRlcm47XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJtaW5MZW5ndGhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0Lm1pbkxlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSBtaW5MZW5ndGggU2V0cyB0aGUgaW5wdXQgZWxlbWVudCdzIG1pbkxlbmd0aC5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG1pbkxlbmd0aCkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dC5taW5MZW5ndGggPSBtaW5MZW5ndGg7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVGV4dEZpZWxkLnByb3RvdHlwZSwgXCJtYXhMZW5ndGhcIiwge1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLmlucHV0Lm1heExlbmd0aDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSBtYXhMZW5ndGggU2V0cyB0aGUgaW5wdXQgZWxlbWVudCdzIG1heExlbmd0aC5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKG1heExlbmd0aCkge1xuICAgICAgICAgICAgLy8gQ2hyb21lIHRocm93cyBleGNlcHRpb24gaWYgbWF4TGVuZ3RoIGlzIHNldCB0byBhIHZhbHVlIGxlc3MgdGhhbiB6ZXJvXG4gICAgICAgICAgICBpZiAobWF4TGVuZ3RoIDwgMCkge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQucmVtb3ZlQXR0cmlidXRlKCdtYXhMZW5ndGgnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIHRoaXMuaW5wdXQubWF4TGVuZ3RoID0gbWF4TGVuZ3RoO1xuICAgICAgICAgICAgfVxuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZC5wcm90b3R5cGUsIFwibWluXCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC5taW47XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0gbWluIFNldHMgdGhlIGlucHV0IGVsZW1lbnQncyBtaW4uXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtaW4pIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQubWluID0gbWluO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZC5wcm90b3R5cGUsIFwibWF4XCIsIHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICByZXR1cm4gdGhpcy5pbnB1dC5tYXg7XG4gICAgICAgIH0sXG4gICAgICAgIC8qKlxuICAgICAgICAgKiBAcGFyYW0gbWF4IFNldHMgdGhlIGlucHV0IGVsZW1lbnQncyBtYXguXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChtYXgpIHtcbiAgICAgICAgICAgIHRoaXMuaW5wdXQubWF4ID0gbWF4O1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZC5wcm90b3R5cGUsIFwic3RlcFwiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5wdXQuc3RlcDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIEBwYXJhbSBzdGVwIFNldHMgdGhlIGlucHV0IGVsZW1lbnQncyBzdGVwLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoc3RlcCkge1xuICAgICAgICAgICAgdGhpcy5pbnB1dC5zdGVwID0gc3RlcDtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGQucHJvdG90eXBlLCBcImhlbHBlclRleHRDb250ZW50XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIGhlbHBlciB0ZXh0IGVsZW1lbnQgY29udGVudC5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGNvbnRlbnQpIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRIZWxwZXJUZXh0Q29udGVudChjb250ZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGQucHJvdG90eXBlLCBcImxlYWRpbmdJY29uQXJpYUxhYmVsXCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIGFyaWEgbGFiZWwgb2YgdGhlIGxlYWRpbmcgaWNvbi5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKGxhYmVsKSB7XG4gICAgICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0TGVhZGluZ0ljb25BcmlhTGFiZWwobGFiZWwpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZC5wcm90b3R5cGUsIFwibGVhZGluZ0ljb25Db250ZW50XCIsIHtcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHRleHQgY29udGVudCBvZiB0aGUgbGVhZGluZyBpY29uLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAoY29udGVudCkge1xuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLnNldExlYWRpbmdJY29uQ29udGVudChjb250ZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGQucHJvdG90eXBlLCBcInRyYWlsaW5nSWNvbkFyaWFMYWJlbFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSBhcmlhIGxhYmVsIG9mIHRoZSB0cmFpbGluZyBpY29uLlxuICAgICAgICAgKi9cbiAgICAgICAgc2V0OiBmdW5jdGlvbiAobGFiZWwpIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRUcmFpbGluZ0ljb25BcmlhTGFiZWwobGFiZWwpO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZC5wcm90b3R5cGUsIFwidHJhaWxpbmdJY29uQ29udGVudFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTZXRzIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHRyYWlsaW5nIGljb24uXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChjb250ZW50KSB7XG4gICAgICAgICAgICB0aGlzLmZvdW5kYXRpb24uc2V0VHJhaWxpbmdJY29uQ29udGVudChjb250ZW50KTtcbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGQucHJvdG90eXBlLCBcInVzZU5hdGl2ZVZhbGlkYXRpb25cIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogRW5hYmxlcyBvciBkaXNhYmxlcyB0aGUgdXNlIG9mIG5hdGl2ZSB2YWxpZGF0aW9uLiBVc2UgdGhpcyBmb3IgY3VzdG9tIHZhbGlkYXRpb24uXG4gICAgICAgICAqIEBwYXJhbSB1c2VOYXRpdmVWYWxpZGF0aW9uIFNldCB0aGlzIHRvIGZhbHNlIHRvIGlnbm9yZSBuYXRpdmUgaW5wdXQgdmFsaWRhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHVzZU5hdGl2ZVZhbGlkYXRpb24pIHtcbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5zZXRVc2VOYXRpdmVWYWxpZGF0aW9uKHVzZU5hdGl2ZVZhbGlkYXRpb24pO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KE1EQ1RleHRGaWVsZC5wcm90b3R5cGUsIFwicHJlZml4VGV4dFwiLCB7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBHZXRzIHRoZSB0ZXh0IGNvbnRlbnQgb2YgdGhlIHByZWZpeCwgb3IgbnVsbCBpZiBpdCBkb2VzIG5vdCBleGlzdC5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMucHJlZml4ID8gdGhpcy5wcmVmaXgudGV4dENvbnRlbnQgOiBudWxsO1xuICAgICAgICB9LFxuICAgICAgICAvKipcbiAgICAgICAgICogU2V0cyB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBwcmVmaXgsIGlmIGl0IGV4aXN0cy5cbiAgICAgICAgICovXG4gICAgICAgIHNldDogZnVuY3Rpb24gKHByZWZpeFRleHQpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLnByZWZpeCkge1xuICAgICAgICAgICAgICAgIHRoaXMucHJlZml4LnRleHRDb250ZW50ID0gcHJlZml4VGV4dDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfSxcbiAgICAgICAgZW51bWVyYWJsZTogZmFsc2UsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgIH0pO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENUZXh0RmllbGQucHJvdG90eXBlLCBcInN1ZmZpeFRleHRcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogR2V0cyB0aGUgdGV4dCBjb250ZW50IG9mIHRoZSBzdWZmaXgsIG9yIG51bGwgaWYgaXQgZG9lcyBub3QgZXhpc3QuXG4gICAgICAgICAqL1xuICAgICAgICBnZXQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIHJldHVybiB0aGlzLnN1ZmZpeCA/IHRoaXMuc3VmZml4LnRleHRDb250ZW50IDogbnVsbDtcbiAgICAgICAgfSxcbiAgICAgICAgLyoqXG4gICAgICAgICAqIFNldHMgdGhlIHRleHQgY29udGVudCBvZiB0aGUgc3VmZml4LCBpZiBpdCBleGlzdHMuXG4gICAgICAgICAqL1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIChzdWZmaXhUZXh0KSB7XG4gICAgICAgICAgICBpZiAodGhpcy5zdWZmaXgpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnN1ZmZpeC50ZXh0Q29udGVudCA9IHN1ZmZpeFRleHQ7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICAvKipcbiAgICAgKiBGb2N1c2VzIHRoZSBpbnB1dCBlbGVtZW50LlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZC5wcm90b3R5cGUuZm9jdXMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuaW5wdXQuZm9jdXMoKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFJlY29tcHV0ZXMgdGhlIG91dGxpbmUgU1ZHIHBhdGggZm9yIHRoZSBvdXRsaW5lIGVsZW1lbnQuXG4gICAgICovXG4gICAgTURDVGV4dEZpZWxkLnByb3RvdHlwZS5sYXlvdXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBvcGVuTm90Y2ggPSB0aGlzLmZvdW5kYXRpb24uc2hvdWxkRmxvYXQ7XG4gICAgICAgIHRoaXMuZm91bmRhdGlvbi5ub3RjaE91dGxpbmUob3Blbk5vdGNoKTtcbiAgICB9O1xuICAgIE1EQ1RleHRGaWVsZC5wcm90b3R5cGUuZ2V0RGVmYXVsdEZvdW5kYXRpb24gPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIC8vIERPIE5PVCBJTkxJTkUgdGhpcyB2YXJpYWJsZS4gRm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHksIGZvdW5kYXRpb25zIHRha2UgYSBQYXJ0aWFsPE1EQ0Zvb0FkYXB0ZXI+LlxuICAgICAgICAvLyBUbyBlbnN1cmUgd2UgZG9uJ3QgYWNjaWRlbnRhbGx5IG9taXQgYW55IG1ldGhvZHMsIHdlIG5lZWQgYSBzZXBhcmF0ZSwgc3Ryb25nbHkgdHlwZWQgYWRhcHRlciB2YXJpYWJsZS5cbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgdmFyIGFkYXB0ZXIgPSBfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbihfX2Fzc2lnbih7fSwgdGhpcy5nZXRSb290QWRhcHRlck1ldGhvZHMoKSksIHRoaXMuZ2V0SW5wdXRBZGFwdGVyTWV0aG9kcygpKSwgdGhpcy5nZXRMYWJlbEFkYXB0ZXJNZXRob2RzKCkpLCB0aGlzLmdldExpbmVSaXBwbGVBZGFwdGVyTWV0aG9kcygpKSwgdGhpcy5nZXRPdXRsaW5lQWRhcHRlck1ldGhvZHMoKSk7XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgICAgIHJldHVybiBuZXcgTURDVGV4dEZpZWxkRm91bmRhdGlvbihhZGFwdGVyLCB0aGlzLmdldEZvdW5kYXRpb25NYXAoKSk7XG4gICAgfTtcbiAgICBNRENUZXh0RmllbGQucHJvdG90eXBlLmdldFJvb3RBZGFwdGVyTWV0aG9kcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGFkZENsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5hZGQoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIHJlbW92ZUNsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5yZW1vdmUoY2xhc3NOYW1lKTsgfSxcbiAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgcmVnaXN0ZXJUZXh0RmllbGRJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMubGlzdGVuKGV2dFR5cGUsIGhhbmRsZXIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJUZXh0RmllbGRJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMudW5saXN0ZW4oZXZ0VHlwZSwgaGFuZGxlcik7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgcmVnaXN0ZXJWYWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlcjogZnVuY3Rpb24gKGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICB2YXIgZ2V0QXR0cmlidXRlc0xpc3QgPSBmdW5jdGlvbiAobXV0YXRpb25zTGlzdCkge1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gbXV0YXRpb25zTGlzdFxuICAgICAgICAgICAgICAgICAgICAgICAgLm1hcChmdW5jdGlvbiAobXV0YXRpb24pIHsgcmV0dXJuIG11dGF0aW9uLmF0dHJpYnV0ZU5hbWU7IH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmlsdGVyKGZ1bmN0aW9uIChhdHRyaWJ1dGVOYW1lKSB7IHJldHVybiBhdHRyaWJ1dGVOYW1lOyB9KTtcbiAgICAgICAgICAgICAgICB9O1xuICAgICAgICAgICAgICAgIHZhciBvYnNlcnZlciA9IG5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uIChtdXRhdGlvbnNMaXN0KSB7IHJldHVybiBoYW5kbGVyKGdldEF0dHJpYnV0ZXNMaXN0KG11dGF0aW9uc0xpc3QpKTsgfSk7XG4gICAgICAgICAgICAgICAgdmFyIGNvbmZpZyA9IHsgYXR0cmlidXRlczogdHJ1ZSB9O1xuICAgICAgICAgICAgICAgIG9ic2VydmVyLm9ic2VydmUoX3RoaXMuaW5wdXQsIGNvbmZpZyk7XG4gICAgICAgICAgICAgICAgcmV0dXJuIG9ic2VydmVyO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJWYWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlcjogZnVuY3Rpb24gKG9ic2VydmVyKSB7XG4gICAgICAgICAgICAgICAgb2JzZXJ2ZXIuZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICB9O1xuICAgIE1EQ1RleHRGaWVsZC5wcm90b3R5cGUuZ2V0SW5wdXRBZGFwdGVyTWV0aG9kcyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGdldE5hdGl2ZUlucHV0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBfdGhpcy5pbnB1dDsgfSxcbiAgICAgICAgICAgIHNldElucHV0QXR0cjogZnVuY3Rpb24gKGF0dHIsIHZhbHVlKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5wdXQuc2V0QXR0cmlidXRlKGF0dHIsIHZhbHVlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICByZW1vdmVJbnB1dEF0dHI6IGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5wdXQucmVtb3ZlQXR0cmlidXRlKGF0dHIpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGlzRm9jdXNlZDogZnVuY3Rpb24gKCkgeyByZXR1cm4gZG9jdW1lbnQuYWN0aXZlRWxlbWVudCA9PT0gX3RoaXMuaW5wdXQ7IH0sXG4gICAgICAgICAgICByZWdpc3RlcklucHV0SW50ZXJhY3Rpb25IYW5kbGVyOiBmdW5jdGlvbiAoZXZ0VHlwZSwgaGFuZGxlcikge1xuICAgICAgICAgICAgICAgIF90aGlzLmlucHV0LmFkZEV2ZW50TGlzdGVuZXIoZXZ0VHlwZSwgaGFuZGxlciwgYXBwbHlQYXNzaXZlKCkpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGRlcmVnaXN0ZXJJbnB1dEludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pbnB1dC5yZW1vdmVFdmVudExpc3RlbmVyKGV2dFR5cGUsIGhhbmRsZXIsIGFwcGx5UGFzc2l2ZSgpKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgICAgIC8vIHRzbGludDplbmFibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzXG4gICAgfTtcbiAgICBNRENUZXh0RmllbGQucHJvdG90eXBlLmdldExhYmVsQWRhcHRlck1ldGhvZHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IHRoaXM7XG4gICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICBmbG9hdExhYmVsOiBmdW5jdGlvbiAoc2hvdWxkRmxvYXQpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5sYWJlbCAmJiBfdGhpcy5sYWJlbC5mbG9hdChzaG91bGRGbG9hdCk7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0TGFiZWxXaWR0aDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMubGFiZWwgPyBfdGhpcy5sYWJlbC5nZXRXaWR0aCgpIDogMDsgfSxcbiAgICAgICAgICAgIGhhc0xhYmVsOiBmdW5jdGlvbiAoKSB7IHJldHVybiBCb29sZWFuKF90aGlzLmxhYmVsKTsgfSxcbiAgICAgICAgICAgIHNoYWtlTGFiZWw6IGZ1bmN0aW9uIChzaG91bGRTaGFrZSkge1xuICAgICAgICAgICAgICAgIF90aGlzLmxhYmVsICYmIF90aGlzLmxhYmVsLnNoYWtlKHNob3VsZFNoYWtlKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRMYWJlbFJlcXVpcmVkOiBmdW5jdGlvbiAoaXNSZXF1aXJlZCkge1xuICAgICAgICAgICAgICAgIF90aGlzLmxhYmVsICYmIF90aGlzLmxhYmVsLnNldFJlcXVpcmVkKGlzUmVxdWlyZWQpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIE1EQ1RleHRGaWVsZC5wcm90b3R5cGUuZ2V0TGluZVJpcHBsZUFkYXB0ZXJNZXRob2RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgYWN0aXZhdGVMaW5lUmlwcGxlOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgaWYgKF90aGlzLmxpbmVSaXBwbGUpIHtcbiAgICAgICAgICAgICAgICAgICAgX3RoaXMubGluZVJpcHBsZS5hY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBkZWFjdGl2YXRlTGluZVJpcHBsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIGlmIChfdGhpcy5saW5lUmlwcGxlKSB7XG4gICAgICAgICAgICAgICAgICAgIF90aGlzLmxpbmVSaXBwbGUuZGVhY3RpdmF0ZSgpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBzZXRMaW5lUmlwcGxlVHJhbnNmb3JtT3JpZ2luOiBmdW5jdGlvbiAobm9ybWFsaXplZFgpIHtcbiAgICAgICAgICAgICAgICBpZiAoX3RoaXMubGluZVJpcHBsZSkge1xuICAgICAgICAgICAgICAgICAgICBfdGhpcy5saW5lUmlwcGxlLnNldFJpcHBsZUNlbnRlcihub3JtYWxpemVkWCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICB9O1xuICAgIE1EQ1RleHRGaWVsZC5wcm90b3R5cGUuZ2V0T3V0bGluZUFkYXB0ZXJNZXRob2RzID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY2xvc2VPdXRsaW5lOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMub3V0bGluZSAmJiBfdGhpcy5vdXRsaW5lLmNsb3NlTm90Y2goKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBoYXNPdXRsaW5lOiBmdW5jdGlvbiAoKSB7IHJldHVybiBCb29sZWFuKF90aGlzLm91dGxpbmUpOyB9LFxuICAgICAgICAgICAgbm90Y2hPdXRsaW5lOiBmdW5jdGlvbiAobGFiZWxXaWR0aCkge1xuICAgICAgICAgICAgICAgIF90aGlzLm91dGxpbmUgJiYgX3RoaXMub3V0bGluZS5ub3RjaChsYWJlbFdpZHRoKTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgIH07XG4gICAgfTtcbiAgICAvKipcbiAgICAgKiBAcmV0dXJuIEEgbWFwIG9mIGFsbCBzdWJjb21wb25lbnRzIHRvIHN1YmZvdW5kYXRpb25zLlxuICAgICAqL1xuICAgIE1EQ1RleHRGaWVsZC5wcm90b3R5cGUuZ2V0Rm91bmRhdGlvbk1hcCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGNoYXJhY3RlckNvdW50ZXI6IHRoaXMuY2hhcmFjdGVyQ291bnRlciA/XG4gICAgICAgICAgICAgICAgdGhpcy5jaGFyYWN0ZXJDb3VudGVyLmZvdW5kYXRpb25Gb3JUZXh0RmllbGQgOlxuICAgICAgICAgICAgICAgIHVuZGVmaW5lZCxcbiAgICAgICAgICAgIGhlbHBlclRleHQ6IHRoaXMuaGVscGVyVGV4dCA/IHRoaXMuaGVscGVyVGV4dC5mb3VuZGF0aW9uRm9yVGV4dEZpZWxkIDpcbiAgICAgICAgICAgICAgICB1bmRlZmluZWQsXG4gICAgICAgICAgICBsZWFkaW5nSWNvbjogdGhpcy5sZWFkaW5nSWNvbiA/IHRoaXMubGVhZGluZ0ljb24uZm91bmRhdGlvbkZvclRleHRGaWVsZCA6XG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICAgICAgdHJhaWxpbmdJY29uOiB0aGlzLnRyYWlsaW5nSWNvbiA/XG4gICAgICAgICAgICAgICAgdGhpcy50cmFpbGluZ0ljb24uZm91bmRhdGlvbkZvclRleHRGaWVsZCA6XG4gICAgICAgICAgICAgICAgdW5kZWZpbmVkLFxuICAgICAgICB9O1xuICAgIH07XG4gICAgTURDVGV4dEZpZWxkLnByb3RvdHlwZS5jcmVhdGVSaXBwbGUgPSBmdW5jdGlvbiAocmlwcGxlRmFjdG9yeSkge1xuICAgICAgICB2YXIgX3RoaXMgPSB0aGlzO1xuICAgICAgICB2YXIgaXNUZXh0QXJlYSA9IHRoaXMucm9vdC5jbGFzc0xpc3QuY29udGFpbnMoY3NzQ2xhc3Nlcy5URVhUQVJFQSk7XG4gICAgICAgIHZhciBpc091dGxpbmVkID0gdGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhjc3NDbGFzc2VzLk9VVExJTkVEKTtcbiAgICAgICAgaWYgKGlzVGV4dEFyZWEgfHwgaXNPdXRsaW5lZCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgICAgIH1cbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENSaXBwbGUuY3JlYXRlQWRhcHRlcih0aGlzKSksIHsgaXNTdXJmYWNlQWN0aXZlOiBmdW5jdGlvbiAoKSB7IHJldHVybiBwb255ZmlsbC5tYXRjaGVzKF90aGlzLmlucHV0LCAnOmFjdGl2ZScpOyB9LCByZWdpc3RlckludGVyYWN0aW9uSGFuZGxlcjogZnVuY3Rpb24gKGV2dFR5cGUsIGhhbmRsZXIpIHtcbiAgICAgICAgICAgICAgICBfdGhpcy5pbnB1dC5hZGRFdmVudExpc3RlbmVyKGV2dFR5cGUsIGhhbmRsZXIsIGFwcGx5UGFzc2l2ZSgpKTtcbiAgICAgICAgICAgIH0sIGRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXI6IGZ1bmN0aW9uIChldnRUeXBlLCBoYW5kbGVyKSB7XG4gICAgICAgICAgICAgICAgX3RoaXMuaW5wdXQucmVtb3ZlRXZlbnRMaXN0ZW5lcihldnRUeXBlLCBoYW5kbGVyLCBhcHBseVBhc3NpdmUoKSk7XG4gICAgICAgICAgICB9IH0pO1xuICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICByZXR1cm4gcmlwcGxlRmFjdG9yeSh0aGlzLnJvb3QsIG5ldyBNRENSaXBwbGVGb3VuZGF0aW9uKGFkYXB0ZXIpKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENUZXh0RmllbGQ7XG59KE1EQ0NvbXBvbmVudCkpO1xuZXhwb3J0IHsgTURDVGV4dEZpZWxkIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb25lbnQuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG52YXIgY3NzQ2xhc3NlcyA9IHtcbiAgICBGSVhFRF9DTEFTUzogJ21kYy10b3AtYXBwLWJhci0tZml4ZWQnLFxuICAgIEZJWEVEX1NDUk9MTEVEX0NMQVNTOiAnbWRjLXRvcC1hcHAtYmFyLS1maXhlZC1zY3JvbGxlZCcsXG4gICAgU0hPUlRfQ0xBU1M6ICdtZGMtdG9wLWFwcC1iYXItLXNob3J0JyxcbiAgICBTSE9SVF9DT0xMQVBTRURfQ0xBU1M6ICdtZGMtdG9wLWFwcC1iYXItLXNob3J0LWNvbGxhcHNlZCcsXG4gICAgU0hPUlRfSEFTX0FDVElPTl9JVEVNX0NMQVNTOiAnbWRjLXRvcC1hcHAtYmFyLS1zaG9ydC1oYXMtYWN0aW9uLWl0ZW0nLFxufTtcbnZhciBudW1iZXJzID0ge1xuICAgIERFQk9VTkNFX1RIUk9UVExFX1JFU0laRV9USU1FX01TOiAxMDAsXG4gICAgTUFYX1RPUF9BUFBfQkFSX0hFSUdIVDogMTI4LFxufTtcbnZhciBzdHJpbmdzID0ge1xuICAgIEFDVElPTl9JVEVNX1NFTEVDVE9SOiAnLm1kYy10b3AtYXBwLWJhcl9fYWN0aW9uLWl0ZW0nLFxuICAgIE5BVklHQVRJT05fRVZFTlQ6ICdNRENUb3BBcHBCYXI6bmF2JyxcbiAgICBOQVZJR0FUSU9OX0lDT05fU0VMRUNUT1I6ICcubWRjLXRvcC1hcHAtYmFyX19uYXZpZ2F0aW9uLWljb24nLFxuICAgIFJPT1RfU0VMRUNUT1I6ICcubWRjLXRvcC1hcHAtYmFyJyxcbiAgICBUSVRMRV9TRUxFQ1RPUjogJy5tZGMtdG9wLWFwcC1iYXJfX3RpdGxlJyxcbn07XG5leHBvcnQgeyBjc3NDbGFzc2VzLCBudW1iZXJzLCBzdHJpbmdzIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb25zdGFudHMuanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2Fzc2lnbiwgX19leHRlbmRzIH0gZnJvbSBcInRzbGliXCI7XG5pbXBvcnQgeyBNRENGb3VuZGF0aW9uIH0gZnJvbSAnQG1hdGVyaWFsL2Jhc2UvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBjc3NDbGFzc2VzLCBudW1iZXJzLCBzdHJpbmdzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xudmFyIE1EQ1RvcEFwcEJhckJhc2VGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENUb3BBcHBCYXJCYXNlRm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogb3B0aW9uYWwgYXJndW1lbnQgaXMgbm90IGEgYnJhbmNoIHN0YXRlbWVudCAqL1xuICAgIGZ1bmN0aW9uIE1EQ1RvcEFwcEJhckJhc2VGb3VuZGF0aW9uKGFkYXB0ZXIpIHtcbiAgICAgICAgcmV0dXJuIF9zdXBlci5jYWxsKHRoaXMsIF9fYXNzaWduKF9fYXNzaWduKHt9LCBNRENUb3BBcHBCYXJCYXNlRm91bmRhdGlvbi5kZWZhdWx0QWRhcHRlciksIGFkYXB0ZXIpKSB8fCB0aGlzO1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVG9wQXBwQmFyQmFzZUZvdW5kYXRpb24sIFwic3RyaW5nc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHN0cmluZ3M7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVG9wQXBwQmFyQmFzZUZvdW5kYXRpb24sIFwiY3NzQ2xhc3Nlc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIGNzc0NsYXNzZXM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVG9wQXBwQmFyQmFzZUZvdW5kYXRpb24sIFwibnVtYmVyc1wiLCB7XG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIG51bWJlcnM7XG4gICAgICAgIH0sXG4gICAgICAgIGVudW1lcmFibGU6IGZhbHNlLFxuICAgICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoTURDVG9wQXBwQmFyQmFzZUZvdW5kYXRpb24sIFwiZGVmYXVsdEFkYXB0ZXJcIiwge1xuICAgICAgICAvKipcbiAgICAgICAgICogU2VlIHtAbGluayBNRENUb3BBcHBCYXJBZGFwdGVyfSBmb3IgdHlwaW5nIGluZm9ybWF0aW9uIG9uIHBhcmFtZXRlcnMgYW5kIHJldHVybiB0eXBlcy5cbiAgICAgICAgICovXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgLy8gdHNsaW50OmRpc2FibGU6b2JqZWN0LWxpdGVyYWwtc29ydC1rZXlzIE1ldGhvZHMgc2hvdWxkIGJlIGluIHRoZSBzYW1lIG9yZGVyIGFzIHRoZSBhZGFwdGVyIGludGVyZmFjZS5cbiAgICAgICAgICAgIHJldHVybiB7XG4gICAgICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICByZW1vdmVDbGFzczogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoKSB7IHJldHVybiBmYWxzZTsgfSxcbiAgICAgICAgICAgICAgICBzZXRTdHlsZTogZnVuY3Rpb24gKCkgeyByZXR1cm4gdW5kZWZpbmVkOyB9LFxuICAgICAgICAgICAgICAgIGdldFRvcEFwcEJhckhlaWdodDogZnVuY3Rpb24gKCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgICAgICAgICBub3RpZnlOYXZpZ2F0aW9uSWNvbkNsaWNrZWQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHVuZGVmaW5lZDsgfSxcbiAgICAgICAgICAgICAgICBnZXRWaWV3cG9ydFNjcm9sbFk6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIDA7IH0sXG4gICAgICAgICAgICAgICAgZ2V0VG90YWxBY3Rpb25JdGVtczogZnVuY3Rpb24gKCkgeyByZXR1cm4gMDsgfSxcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgICAvLyB0c2xpbnQ6ZW5hYmxlOm9iamVjdC1saXRlcmFsLXNvcnQta2V5c1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgLyoqIE90aGVyIHZhcmlhbnRzIG9mIFRvcEFwcEJhciBmb3VuZGF0aW9uIG92ZXJyaWRlcyB0aGlzIG1ldGhvZCAqL1xuICAgIE1EQ1RvcEFwcEJhckJhc2VGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVUYXJnZXRTY3JvbGwgPSBmdW5jdGlvbiAoKSB7IH07IC8vIHRzbGludDpkaXNhYmxlLWxpbmU6bm8tZW1wdHlcbiAgICAvKiogT3RoZXIgdmFyaWFudHMgb2YgVG9wQXBwQmFyIGZvdW5kYXRpb24gb3ZlcnJpZGVzIHRoaXMgbWV0aG9kICovXG4gICAgTURDVG9wQXBwQmFyQmFzZUZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZVdpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uICgpIHsgfTsgLy8gdHNsaW50OmRpc2FibGUtbGluZTpuby1lbXB0eVxuICAgIE1EQ1RvcEFwcEJhckJhc2VGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVOYXZpZ2F0aW9uQ2xpY2sgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5ub3RpZnlOYXZpZ2F0aW9uSWNvbkNsaWNrZWQoKTtcbiAgICB9O1xuICAgIHJldHVybiBNRENUb3BBcHBCYXJCYXNlRm91bmRhdGlvbjtcbn0oTURDRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDVG9wQXBwQmFyQmFzZUZvdW5kYXRpb24gfTtcbi8vIHRzbGludDpkaXNhYmxlLW5leHQtbGluZTpuby1kZWZhdWx0LWV4cG9ydCBOZWVkZWQgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkgd2l0aCBNREMgV2ViIHYwLjQ0LjAgYW5kIGVhcmxpZXIuXG5leHBvcnQgZGVmYXVsdCBNRENUb3BBcHBCYXJCYXNlRm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IG51bWJlcnMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgTURDVG9wQXBwQmFyQmFzZUZvdW5kYXRpb24gfSBmcm9tICcuLi9mb3VuZGF0aW9uJztcbnZhciBJTklUSUFMX1ZBTFVFID0gMDtcbnZhciBNRENUb3BBcHBCYXJGb3VuZGF0aW9uID0gLyoqIEBjbGFzcyAqLyAoZnVuY3Rpb24gKF9zdXBlcikge1xuICAgIF9fZXh0ZW5kcyhNRENUb3BBcHBCYXJGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0OiBvcHRpb25hbCBhcmd1bWVudCBpcyBub3QgYSBicmFuY2ggc3RhdGVtZW50ICovXG4gICAgZnVuY3Rpb24gTURDVG9wQXBwQmFyRm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGFkYXB0ZXIpIHx8IHRoaXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHRvcCBhcHAgYmFyIHdhcyBkb2NrZWQgaW4gdGhlIHByZXZpb3VzIHNjcm9sbCBoYW5kbGVyIGl0ZXJhdGlvbi5cbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLndhc0RvY2tlZCA9IHRydWU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBJbmRpY2F0ZXMgaWYgdGhlIHRvcCBhcHAgYmFyIGlzIGRvY2tlZCBpbiB0aGUgZnVsbHkgc2hvd24gcG9zaXRpb24uXG4gICAgICAgICAqL1xuICAgICAgICBfdGhpcy5pc0RvY2tlZFNob3dpbmcgPSB0cnVlO1xuICAgICAgICAvKipcbiAgICAgICAgICogVmFyaWFibGUgZm9yIGN1cnJlbnQgc2Nyb2xsIHBvc2l0aW9uIG9mIHRoZSB0b3AgYXBwIGJhclxuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMuY3VycmVudEFwcEJhck9mZnNldFRvcCA9IDA7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBVc2VkIHRvIHByZXZlbnQgdGhlIHRvcCBhcHAgYmFyIGZyb20gYmVpbmcgc2Nyb2xsZWQgb3V0IG9mIHZpZXcgZHVyaW5nIHJlc2l6ZSBldmVudHNcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLmlzQ3VycmVudGx5QmVpbmdSZXNpemVkID0gZmFsc2U7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdGltZW91dCB0aGF0J3MgdXNlZCB0byB0aHJvdHRsZSB0aGUgcmVzaXplIGV2ZW50c1xuICAgICAgICAgKi9cbiAgICAgICAgX3RoaXMucmVzaXplVGhyb3R0bGVJZCA9IElOSVRJQUxfVkFMVUU7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBUaGUgdGltZW91dCB0aGF0J3MgdXNlZCB0byBkZWJvdW5jZSB0b2dnbGluZyB0aGUgaXNDdXJyZW50bHlCZWluZ1Jlc2l6ZWRcbiAgICAgICAgICogdmFyaWFibGUgYWZ0ZXIgYSByZXNpemVcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLnJlc2l6ZURlYm91bmNlSWQgPSBJTklUSUFMX1ZBTFVFO1xuICAgICAgICBfdGhpcy5sYXN0U2Nyb2xsUG9zaXRpb24gPSBfdGhpcy5hZGFwdGVyLmdldFZpZXdwb3J0U2Nyb2xsWSgpO1xuICAgICAgICBfdGhpcy50b3BBcHBCYXJIZWlnaHQgPSBfdGhpcy5hZGFwdGVyLmdldFRvcEFwcEJhckhlaWdodCgpO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE1EQ1RvcEFwcEJhckZvdW5kYXRpb24ucHJvdG90eXBlLmRlc3Ryb3kgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIF9zdXBlci5wcm90b3R5cGUuZGVzdHJveS5jYWxsKHRoaXMpO1xuICAgICAgICB0aGlzLmFkYXB0ZXIuc2V0U3R5bGUoJ3RvcCcsICcnKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFNjcm9sbCBoYW5kbGVyIGZvciB0aGUgZGVmYXVsdCBzY3JvbGwgYmVoYXZpb3Igb2YgdGhlIHRvcCBhcHAgYmFyLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIE1EQ1RvcEFwcEJhckZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZVRhcmdldFNjcm9sbCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIGN1cnJlbnRTY3JvbGxQb3NpdGlvbiA9IE1hdGgubWF4KHRoaXMuYWRhcHRlci5nZXRWaWV3cG9ydFNjcm9sbFkoKSwgMCk7XG4gICAgICAgIHZhciBkaWZmID0gY3VycmVudFNjcm9sbFBvc2l0aW9uIC0gdGhpcy5sYXN0U2Nyb2xsUG9zaXRpb247XG4gICAgICAgIHRoaXMubGFzdFNjcm9sbFBvc2l0aW9uID0gY3VycmVudFNjcm9sbFBvc2l0aW9uO1xuICAgICAgICAvLyBJZiB0aGUgd2luZG93IGlzIGJlaW5nIHJlc2l6ZWQgdGhlIGxhc3RTY3JvbGxQb3NpdGlvbiBuZWVkcyB0byBiZSB1cGRhdGVkXG4gICAgICAgIC8vIGJ1dCB0aGUgY3VycmVudCBzY3JvbGwgb2YgdGhlIHRvcCBhcHAgYmFyIHNob3VsZCBzdGF5IGluIHRoZSBzYW1lXG4gICAgICAgIC8vIHBvc2l0aW9uLlxuICAgICAgICBpZiAoIXRoaXMuaXNDdXJyZW50bHlCZWluZ1Jlc2l6ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuY3VycmVudEFwcEJhck9mZnNldFRvcCAtPSBkaWZmO1xuICAgICAgICAgICAgaWYgKHRoaXMuY3VycmVudEFwcEJhck9mZnNldFRvcCA+IDApIHtcbiAgICAgICAgICAgICAgICB0aGlzLmN1cnJlbnRBcHBCYXJPZmZzZXRUb3AgPSAwO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSBpZiAoTWF0aC5hYnModGhpcy5jdXJyZW50QXBwQmFyT2Zmc2V0VG9wKSA+IHRoaXMudG9wQXBwQmFySGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jdXJyZW50QXBwQmFyT2Zmc2V0VG9wID0gLXRoaXMudG9wQXBwQmFySGVpZ2h0O1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgdGhpcy5tb3ZlVG9wQXBwQmFyKCk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRvcCBhcHAgYmFyIHJlc2l6ZSBoYW5kbGVyIHRoYXQgdGhyb3R0bGUvZGVib3VuY2UgZnVuY3Rpb25zIHRoYXQgZXhlY3V0ZSB1cGRhdGVzLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIE1EQ1RvcEFwcEJhckZvdW5kYXRpb24ucHJvdG90eXBlLmhhbmRsZVdpbmRvd1Jlc2l6ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gVGhyb3R0bGUgcmVzaXplIGV2ZW50cyAxMCBwL3NcbiAgICAgICAgaWYgKCF0aGlzLnJlc2l6ZVRocm90dGxlSWQpIHtcbiAgICAgICAgICAgIHRoaXMucmVzaXplVGhyb3R0bGVJZCA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIF90aGlzLnJlc2l6ZVRocm90dGxlSWQgPSBJTklUSUFMX1ZBTFVFO1xuICAgICAgICAgICAgICAgIF90aGlzLnRocm90dGxlZFJlc2l6ZUhhbmRsZXIoKTtcbiAgICAgICAgICAgIH0sIG51bWJlcnMuREVCT1VOQ0VfVEhST1RUTEVfUkVTSVpFX1RJTUVfTVMpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaXNDdXJyZW50bHlCZWluZ1Jlc2l6ZWQgPSB0cnVlO1xuICAgICAgICBpZiAodGhpcy5yZXNpemVEZWJvdW5jZUlkKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGhpcy5yZXNpemVEZWJvdW5jZUlkKTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnJlc2l6ZURlYm91bmNlSWQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIF90aGlzLmhhbmRsZVRhcmdldFNjcm9sbCgpO1xuICAgICAgICAgICAgX3RoaXMuaXNDdXJyZW50bHlCZWluZ1Jlc2l6ZWQgPSBmYWxzZTtcbiAgICAgICAgICAgIF90aGlzLnJlc2l6ZURlYm91bmNlSWQgPSBJTklUSUFMX1ZBTFVFO1xuICAgICAgICB9LCBudW1iZXJzLkRFQk9VTkNFX1RIUk9UVExFX1JFU0laRV9USU1FX01TKTtcbiAgICB9O1xuICAgIC8qKlxuICAgICAqIEZ1bmN0aW9uIHRvIGRldGVybWluZSBpZiB0aGUgRE9NIG5lZWRzIHRvIHVwZGF0ZS5cbiAgICAgKi9cbiAgICBNRENUb3BBcHBCYXJGb3VuZGF0aW9uLnByb3RvdHlwZS5jaGVja0ZvclVwZGF0ZSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG9mZnNjcmVlbkJvdW5kYXJ5VG9wID0gLXRoaXMudG9wQXBwQmFySGVpZ2h0O1xuICAgICAgICB2YXIgaGFzQW55UGl4ZWxzT2Zmc2NyZWVuID0gdGhpcy5jdXJyZW50QXBwQmFyT2Zmc2V0VG9wIDwgMDtcbiAgICAgICAgdmFyIGhhc0FueVBpeGVsc09uc2NyZWVuID0gdGhpcy5jdXJyZW50QXBwQmFyT2Zmc2V0VG9wID4gb2Zmc2NyZWVuQm91bmRhcnlUb3A7XG4gICAgICAgIHZhciBwYXJ0aWFsbHlTaG93aW5nID0gaGFzQW55UGl4ZWxzT2Zmc2NyZWVuICYmIGhhc0FueVBpeGVsc09uc2NyZWVuO1xuICAgICAgICAvLyBJZiBpdCdzIHBhcnRpYWxseSBzaG93aW5nLCBpdCBjYW4ndCBiZSBkb2NrZWQuXG4gICAgICAgIGlmIChwYXJ0aWFsbHlTaG93aW5nKSB7XG4gICAgICAgICAgICB0aGlzLndhc0RvY2tlZCA9IGZhbHNlO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgLy8gTm90IHByZXZpb3VzbHkgZG9ja2VkIGFuZCBub3QgcGFydGlhbGx5IHNob3dpbmcsIGl0J3Mgbm93IGRvY2tlZC5cbiAgICAgICAgICAgIGlmICghdGhpcy53YXNEb2NrZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLndhc0RvY2tlZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIGlmICh0aGlzLmlzRG9ja2VkU2hvd2luZyAhPT0gaGFzQW55UGl4ZWxzT25zY3JlZW4pIHtcbiAgICAgICAgICAgICAgICB0aGlzLmlzRG9ja2VkU2hvd2luZyA9IGhhc0FueVBpeGVsc09uc2NyZWVuO1xuICAgICAgICAgICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBwYXJ0aWFsbHlTaG93aW5nO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogRnVuY3Rpb24gdG8gbW92ZSB0aGUgdG9wIGFwcCBiYXIgaWYgbmVlZGVkLlxuICAgICAqL1xuICAgIE1EQ1RvcEFwcEJhckZvdW5kYXRpb24ucHJvdG90eXBlLm1vdmVUb3BBcHBCYXIgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh0aGlzLmNoZWNrRm9yVXBkYXRlKCkpIHtcbiAgICAgICAgICAgIC8vIE9uY2UgdGhlIHRvcCBhcHAgYmFyIGlzIGZ1bGx5IGhpZGRlbiB3ZSB1c2UgdGhlIG1heCBwb3RlbnRpYWwgdG9wIGFwcCBiYXIgaGVpZ2h0IGFzIG91ciBvZmZzZXRcbiAgICAgICAgICAgIC8vIHNvIHRoZSB0b3AgYXBwIGJhciBkb2Vzbid0IHNob3cgaWYgdGhlIHdpbmRvdyByZXNpemVzIGFuZCB0aGUgbmV3IGhlaWdodCA+IHRoZSBvbGQgaGVpZ2h0LlxuICAgICAgICAgICAgdmFyIG9mZnNldCA9IHRoaXMuY3VycmVudEFwcEJhck9mZnNldFRvcDtcbiAgICAgICAgICAgIGlmIChNYXRoLmFicyhvZmZzZXQpID49IHRoaXMudG9wQXBwQmFySGVpZ2h0KSB7XG4gICAgICAgICAgICAgICAgb2Zmc2V0ID0gLW51bWJlcnMuTUFYX1RPUF9BUFBfQkFSX0hFSUdIVDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuYWRhcHRlci5zZXRTdHlsZSgndG9wJywgb2Zmc2V0ICsgJ3B4Jyk7XG4gICAgICAgIH1cbiAgICB9O1xuICAgIC8qKlxuICAgICAqIFRocm90dGxlZCBmdW5jdGlvbiB0aGF0IHVwZGF0ZXMgdGhlIHRvcCBhcHAgYmFyIHNjcm9sbGVkIHZhbHVlcyBpZiB0aGVcbiAgICAgKiB0b3AgYXBwIGJhciBoZWlnaHQgY2hhbmdlcy5cbiAgICAgKi9cbiAgICBNRENUb3BBcHBCYXJGb3VuZGF0aW9uLnByb3RvdHlwZS50aHJvdHRsZWRSZXNpemVIYW5kbGVyID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgY3VycmVudEhlaWdodCA9IHRoaXMuYWRhcHRlci5nZXRUb3BBcHBCYXJIZWlnaHQoKTtcbiAgICAgICAgaWYgKHRoaXMudG9wQXBwQmFySGVpZ2h0ICE9PSBjdXJyZW50SGVpZ2h0KSB7XG4gICAgICAgICAgICB0aGlzLndhc0RvY2tlZCA9IGZhbHNlO1xuICAgICAgICAgICAgLy8gU2luY2UgdGhlIHRvcCBhcHAgYmFyIGhhcyBhIGRpZmZlcmVudCBoZWlnaHQgZGVwZW5kaW5nIG9uIHRoZSBzY3JlZW4gd2lkdGgsIHRoaXNcbiAgICAgICAgICAgIC8vIHdpbGwgZW5zdXJlIHRoYXQgdGhlIHRvcCBhcHAgYmFyIHJlbWFpbnMgaW4gdGhlIGNvcnJlY3QgbG9jYXRpb24gaWZcbiAgICAgICAgICAgIC8vIGNvbXBsZXRlbHkgaGlkZGVuIGFuZCBhIHJlc2l6ZSBtYWtlcyB0aGUgdG9wIGFwcCBiYXIgYSBkaWZmZXJlbnQgaGVpZ2h0LlxuICAgICAgICAgICAgdGhpcy5jdXJyZW50QXBwQmFyT2Zmc2V0VG9wIC09IHRoaXMudG9wQXBwQmFySGVpZ2h0IC0gY3VycmVudEhlaWdodDtcbiAgICAgICAgICAgIHRoaXMudG9wQXBwQmFySGVpZ2h0ID0gY3VycmVudEhlaWdodDtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmhhbmRsZVRhcmdldFNjcm9sbCgpO1xuICAgIH07XG4gICAgcmV0dXJuIE1EQ1RvcEFwcEJhckZvdW5kYXRpb247XG59KE1EQ1RvcEFwcEJhckJhc2VGb3VuZGF0aW9uKSk7XG5leHBvcnQgeyBNRENUb3BBcHBCYXJGb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDVG9wQXBwQmFyRm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGNzc0NsYXNzZXMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgTURDVG9wQXBwQmFyRm91bmRhdGlvbiB9IGZyb20gJy4uL3N0YW5kYXJkL2ZvdW5kYXRpb24nO1xudmFyIE1EQ0ZpeGVkVG9wQXBwQmFyRm91bmRhdGlvbiA9IC8qKiBAY2xhc3MgKi8gKGZ1bmN0aW9uIChfc3VwZXIpIHtcbiAgICBfX2V4dGVuZHMoTURDRml4ZWRUb3BBcHBCYXJGb3VuZGF0aW9uLCBfc3VwZXIpO1xuICAgIGZ1bmN0aW9uIE1EQ0ZpeGVkVG9wQXBwQmFyRm91bmRhdGlvbigpIHtcbiAgICAgICAgdmFyIF90aGlzID0gX3N1cGVyICE9PSBudWxsICYmIF9zdXBlci5hcHBseSh0aGlzLCBhcmd1bWVudHMpIHx8IHRoaXM7XG4gICAgICAgIC8qKlxuICAgICAgICAgKiBTdGF0ZSB2YXJpYWJsZSBmb3IgdGhlIHByZXZpb3VzIHNjcm9sbCBpdGVyYXRpb24gdG9wIGFwcCBiYXIgc3RhdGVcbiAgICAgICAgICovXG4gICAgICAgIF90aGlzLndhc1Njcm9sbGVkID0gZmFsc2U7XG4gICAgICAgIHJldHVybiBfdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2Nyb2xsIGhhbmRsZXIgZm9yIGFwcGx5aW5nL3JlbW92aW5nIHRoZSBtb2RpZmllciBjbGFzcyBvbiB0aGUgZml4ZWQgdG9wIGFwcCBiYXIuXG4gICAgICogQG92ZXJyaWRlXG4gICAgICovXG4gICAgTURDRml4ZWRUb3BBcHBCYXJGb3VuZGF0aW9uLnByb3RvdHlwZS5oYW5kbGVUYXJnZXRTY3JvbGwgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBjdXJyZW50U2Nyb2xsID0gdGhpcy5hZGFwdGVyLmdldFZpZXdwb3J0U2Nyb2xsWSgpO1xuICAgICAgICBpZiAoY3VycmVudFNjcm9sbCA8PSAwKSB7XG4gICAgICAgICAgICBpZiAodGhpcy53YXNTY3JvbGxlZCkge1xuICAgICAgICAgICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhjc3NDbGFzc2VzLkZJWEVEX1NDUk9MTEVEX0NMQVNTKTtcbiAgICAgICAgICAgICAgICB0aGlzLndhc1Njcm9sbGVkID0gZmFsc2U7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMud2FzU2Nyb2xsZWQpIHtcbiAgICAgICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5GSVhFRF9TQ1JPTExFRF9DTEFTUyk7XG4gICAgICAgICAgICAgICAgdGhpcy53YXNTY3JvbGxlZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9O1xuICAgIHJldHVybiBNRENGaXhlZFRvcEFwcEJhckZvdW5kYXRpb247XG59KE1EQ1RvcEFwcEJhckZvdW5kYXRpb24pKTtcbmV4cG9ydCB7IE1EQ0ZpeGVkVG9wQXBwQmFyRm91bmRhdGlvbiB9O1xuLy8gdHNsaW50OmRpc2FibGUtbmV4dC1saW5lOm5vLWRlZmF1bHQtZXhwb3J0IE5lZWRlZCBmb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSB3aXRoIE1EQyBXZWIgdjAuNDQuMCBhbmQgZWFybGllci5cbmV4cG9ydCBkZWZhdWx0IE1EQ0ZpeGVkVG9wQXBwQmFyRm91bmRhdGlvbjtcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWZvdW5kYXRpb24uanMubWFwIiwiLyoqXG4gKiBAbGljZW5zZVxuICogQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbiAqXG4gKiBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4gKiBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4gKiBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4gKiB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4gKiBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbiAqIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4gKlxuICogVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbiAqIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuICpcbiAqIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1JcbiAqIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuICogRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4gKiBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4gKiBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuICogT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuICogVEhFIFNPRlRXQVJFLlxuICovXG5pbXBvcnQgeyBfX2V4dGVuZHMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IGNzc0NsYXNzZXMgfSBmcm9tICcuLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgTURDVG9wQXBwQmFyQmFzZUZvdW5kYXRpb24gfSBmcm9tICcuLi9mb3VuZGF0aW9uJztcbnZhciBNRENTaG9ydFRvcEFwcEJhckZvdW5kYXRpb24gPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ1Nob3J0VG9wQXBwQmFyRm91bmRhdGlvbiwgX3N1cGVyKTtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dDogb3B0aW9uYWwgYXJndW1lbnQgaXMgbm90IGEgYnJhbmNoIHN0YXRlbWVudCAqL1xuICAgIGZ1bmN0aW9uIE1EQ1Nob3J0VG9wQXBwQmFyRm91bmRhdGlvbihhZGFwdGVyKSB7XG4gICAgICAgIHZhciBfdGhpcyA9IF9zdXBlci5jYWxsKHRoaXMsIGFkYXB0ZXIpIHx8IHRoaXM7XG4gICAgICAgIF90aGlzLmNvbGxhcHNlZCA9IGZhbHNlO1xuICAgICAgICBfdGhpcy5pc0Fsd2F5c0NvbGxhcHNlZCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gX3RoaXM7XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShNRENTaG9ydFRvcEFwcEJhckZvdW5kYXRpb24ucHJvdG90eXBlLCBcImlzQ29sbGFwc2VkXCIsIHtcbiAgICAgICAgLy8gUHVibGljIHZpc2liaWxpdHkgZm9yIGJhY2t3YXJkIGNvbXBhdGliaWxpdHkuXG4gICAgICAgIGdldDogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXMuY29sbGFwc2VkO1xuICAgICAgICB9LFxuICAgICAgICBlbnVtZXJhYmxlOiBmYWxzZSxcbiAgICAgICAgY29uZmlndXJhYmxlOiB0cnVlXG4gICAgfSk7XG4gICAgTURDU2hvcnRUb3BBcHBCYXJGb3VuZGF0aW9uLnByb3RvdHlwZS5pbml0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmluaXQuY2FsbCh0aGlzKTtcbiAgICAgICAgaWYgKHRoaXMuYWRhcHRlci5nZXRUb3RhbEFjdGlvbkl0ZW1zKCkgPiAwKSB7XG4gICAgICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5TSE9SVF9IQVNfQUNUSU9OX0lURU1fQ0xBU1MpO1xuICAgICAgICB9XG4gICAgICAgIC8vIElmIGluaXRpYWxpemVkIHdpdGggU0hPUlRfQ09MTEFQU0VEX0NMQVNTLCB0aGUgYmFyIHNob3VsZCBhbHdheXMgYmUgY29sbGFwc2VkXG4gICAgICAgIHRoaXMuc2V0QWx3YXlzQ29sbGFwc2VkKHRoaXMuYWRhcHRlci5oYXNDbGFzcyhjc3NDbGFzc2VzLlNIT1JUX0NPTExBUFNFRF9DTEFTUykpO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2V0IGlmIHRoZSBzaG9ydCB0b3AgYXBwIGJhciBzaG91bGQgYWx3YXlzIGJlIGNvbGxhcHNlZC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB2YWx1ZSBXaGVuIGB0cnVlYCwgYmFyIHdpbGwgYWx3YXlzIGJlIGNvbGxhcHNlZC4gV2hlbiBgZmFsc2VgLCBiYXIgbWF5IGNvbGxhcHNlIG9yIGV4cGFuZCBiYXNlZCBvbiBzY3JvbGwuXG4gICAgICovXG4gICAgTURDU2hvcnRUb3BBcHBCYXJGb3VuZGF0aW9uLnByb3RvdHlwZS5zZXRBbHdheXNDb2xsYXBzZWQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgICAgICAgdGhpcy5pc0Fsd2F5c0NvbGxhcHNlZCA9ICEhdmFsdWU7XG4gICAgICAgIGlmICh0aGlzLmlzQWx3YXlzQ29sbGFwc2VkKSB7XG4gICAgICAgICAgICB0aGlzLmNvbGxhcHNlKCk7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBsZXQgbWF5YmVDb2xsYXBzZUJhciBkZXRlcm1pbmUgaWYgdGhlIGJhciBzaG91bGQgYmUgY29sbGFwc2VkXG4gICAgICAgICAgICB0aGlzLm1heWJlQ29sbGFwc2VCYXIoKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDU2hvcnRUb3BBcHBCYXJGb3VuZGF0aW9uLnByb3RvdHlwZS5nZXRBbHdheXNDb2xsYXBzZWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmlzQWx3YXlzQ29sbGFwc2VkO1xuICAgIH07XG4gICAgLyoqXG4gICAgICogU2Nyb2xsIGhhbmRsZXIgZm9yIGFwcGx5aW5nL3JlbW92aW5nIHRoZSBjb2xsYXBzZWQgbW9kaWZpZXIgY2xhc3Mgb24gdGhlIHNob3J0IHRvcCBhcHAgYmFyLlxuICAgICAqIEBvdmVycmlkZVxuICAgICAqL1xuICAgIE1EQ1Nob3J0VG9wQXBwQmFyRm91bmRhdGlvbi5wcm90b3R5cGUuaGFuZGxlVGFyZ2V0U2Nyb2xsID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLm1heWJlQ29sbGFwc2VCYXIoKTtcbiAgICB9O1xuICAgIE1EQ1Nob3J0VG9wQXBwQmFyRm91bmRhdGlvbi5wcm90b3R5cGUubWF5YmVDb2xsYXBzZUJhciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHRoaXMuaXNBbHdheXNDb2xsYXBzZWQpIHtcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgfVxuICAgICAgICB2YXIgY3VycmVudFNjcm9sbCA9IHRoaXMuYWRhcHRlci5nZXRWaWV3cG9ydFNjcm9sbFkoKTtcbiAgICAgICAgaWYgKGN1cnJlbnRTY3JvbGwgPD0gMCkge1xuICAgICAgICAgICAgaWYgKHRoaXMuY29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy51bmNvbGxhcHNlKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoIXRoaXMuY29sbGFwc2VkKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5jb2xsYXBzZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgfTtcbiAgICBNRENTaG9ydFRvcEFwcEJhckZvdW5kYXRpb24ucHJvdG90eXBlLnVuY29sbGFwc2UgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHRoaXMuYWRhcHRlci5yZW1vdmVDbGFzcyhjc3NDbGFzc2VzLlNIT1JUX0NPTExBUFNFRF9DTEFTUyk7XG4gICAgICAgIHRoaXMuY29sbGFwc2VkID0gZmFsc2U7XG4gICAgfTtcbiAgICBNRENTaG9ydFRvcEFwcEJhckZvdW5kYXRpb24ucHJvdG90eXBlLmNvbGxhcHNlID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB0aGlzLmFkYXB0ZXIuYWRkQ2xhc3MoY3NzQ2xhc3Nlcy5TSE9SVF9DT0xMQVBTRURfQ0xBU1MpO1xuICAgICAgICB0aGlzLmNvbGxhcHNlZCA9IHRydWU7XG4gICAgfTtcbiAgICByZXR1cm4gTURDU2hvcnRUb3BBcHBCYXJGb3VuZGF0aW9uO1xufShNRENUb3BBcHBCYXJCYXNlRm91bmRhdGlvbikpO1xuZXhwb3J0IHsgTURDU2hvcnRUb3BBcHBCYXJGb3VuZGF0aW9uIH07XG4vLyB0c2xpbnQ6ZGlzYWJsZS1uZXh0LWxpbmU6bm8tZGVmYXVsdC1leHBvcnQgTmVlZGVkIGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5IHdpdGggTURDIFdlYiB2MC40NC4wIGFuZCBlYXJsaWVyLlxuZXhwb3J0IGRlZmF1bHQgTURDU2hvcnRUb3BBcHBCYXJGb3VuZGF0aW9uO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Zm91bmRhdGlvbi5qcy5tYXAiLCIvKipcbiAqIEBsaWNlbnNlXG4gKiBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuICpcbiAqIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbiAqIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbiAqIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbiAqIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbiAqIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuICogZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbiAqXG4gKiBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuICogYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4gKlxuICogVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuICogSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4gKiBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbiAqIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbiAqIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4gKiBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4gKiBUSEUgU09GVFdBUkUuXG4gKi9cbmltcG9ydCB7IF9fZXh0ZW5kcywgX192YWx1ZXMgfSBmcm9tIFwidHNsaWJcIjtcbmltcG9ydCB7IE1EQ0NvbXBvbmVudCB9IGZyb20gJ0BtYXRlcmlhbC9iYXNlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBNRENSaXBwbGUgfSBmcm9tICdAbWF0ZXJpYWwvcmlwcGxlL2NvbXBvbmVudCc7XG5pbXBvcnQgeyBjc3NDbGFzc2VzLCBzdHJpbmdzIH0gZnJvbSAnLi9jb25zdGFudHMnO1xuaW1wb3J0IHsgTURDRml4ZWRUb3BBcHBCYXJGb3VuZGF0aW9uIH0gZnJvbSAnLi9maXhlZC9mb3VuZGF0aW9uJztcbmltcG9ydCB7IE1EQ1Nob3J0VG9wQXBwQmFyRm91bmRhdGlvbiB9IGZyb20gJy4vc2hvcnQvZm91bmRhdGlvbic7XG5pbXBvcnQgeyBNRENUb3BBcHBCYXJGb3VuZGF0aW9uIH0gZnJvbSAnLi9zdGFuZGFyZC9mb3VuZGF0aW9uJztcbnZhciBNRENUb3BBcHBCYXIgPSAvKiogQGNsYXNzICovIChmdW5jdGlvbiAoX3N1cGVyKSB7XG4gICAgX19leHRlbmRzKE1EQ1RvcEFwcEJhciwgX3N1cGVyKTtcbiAgICBmdW5jdGlvbiBNRENUb3BBcHBCYXIoKSB7XG4gICAgICAgIHJldHVybiBfc3VwZXIgIT09IG51bGwgJiYgX3N1cGVyLmFwcGx5KHRoaXMsIGFyZ3VtZW50cykgfHwgdGhpcztcbiAgICB9XG4gICAgTURDVG9wQXBwQmFyLmF0dGFjaFRvID0gZnVuY3Rpb24gKHJvb3QpIHtcbiAgICAgICAgcmV0dXJuIG5ldyBNRENUb3BBcHBCYXIocm9vdCk7XG4gICAgfTtcbiAgICBNRENUb3BBcHBCYXIucHJvdG90eXBlLmluaXRpYWxpemUgPSBmdW5jdGlvbiAocmlwcGxlRmFjdG9yeSkge1xuICAgICAgICBpZiAocmlwcGxlRmFjdG9yeSA9PT0gdm9pZCAwKSB7IHJpcHBsZUZhY3RvcnkgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuIE1EQ1JpcHBsZS5hdHRhY2hUbyhlbCk7IH07IH1cbiAgICAgICAgdGhpcy5uYXZJY29uID0gdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3Ioc3RyaW5ncy5OQVZJR0FUSU9OX0lDT05fU0VMRUNUT1IpO1xuICAgICAgICAvLyBHZXQgYWxsIGljb25zIGluIHRoZSB0b29sYmFyIGFuZCBpbnN0YW50aWF0ZSB0aGUgcmlwcGxlc1xuICAgICAgICB2YXIgaWNvbnMgPSBbXS5zbGljZS5jYWxsKHRoaXMucm9vdC5xdWVyeVNlbGVjdG9yQWxsKHN0cmluZ3MuQUNUSU9OX0lURU1fU0VMRUNUT1IpKTtcbiAgICAgICAgaWYgKHRoaXMubmF2SWNvbikge1xuICAgICAgICAgICAgaWNvbnMucHVzaCh0aGlzLm5hdkljb24pO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaWNvblJpcHBsZXMgPSBpY29ucy5tYXAoZnVuY3Rpb24gKGljb24pIHtcbiAgICAgICAgICAgIHZhciByaXBwbGUgPSByaXBwbGVGYWN0b3J5KGljb24pO1xuICAgICAgICAgICAgcmlwcGxlLnVuYm91bmRlZCA9IHRydWU7XG4gICAgICAgICAgICByZXR1cm4gcmlwcGxlO1xuICAgICAgICB9KTtcbiAgICAgICAgdGhpcy5zY3JvbGxUYXJnZXQgPSB3aW5kb3c7XG4gICAgfTtcbiAgICBNRENUb3BBcHBCYXIucHJvdG90eXBlLmluaXRpYWxTeW5jV2l0aERPTSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdGhpcy5oYW5kbGVOYXZpZ2F0aW9uQ2xpY2sgPVxuICAgICAgICAgICAgdGhpcy5mb3VuZGF0aW9uLmhhbmRsZU5hdmlnYXRpb25DbGljay5iaW5kKHRoaXMuZm91bmRhdGlvbik7XG4gICAgICAgIHRoaXMuaGFuZGxlV2luZG93UmVzaXplID1cbiAgICAgICAgICAgIHRoaXMuZm91bmRhdGlvbi5oYW5kbGVXaW5kb3dSZXNpemUuYmluZCh0aGlzLmZvdW5kYXRpb24pO1xuICAgICAgICB0aGlzLmhhbmRsZVRhcmdldFNjcm9sbCA9XG4gICAgICAgICAgICB0aGlzLmZvdW5kYXRpb24uaGFuZGxlVGFyZ2V0U2Nyb2xsLmJpbmQodGhpcy5mb3VuZGF0aW9uKTtcbiAgICAgICAgdGhpcy5zY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVUYXJnZXRTY3JvbGwpO1xuICAgICAgICBpZiAodGhpcy5uYXZJY29uKSB7XG4gICAgICAgICAgICB0aGlzLm5hdkljb24uYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU5hdmlnYXRpb25DbGljayk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzRml4ZWQgPSB0aGlzLnJvb3QuY2xhc3NMaXN0LmNvbnRhaW5zKGNzc0NsYXNzZXMuRklYRURfQ0xBU1MpO1xuICAgICAgICB2YXIgaXNTaG9ydCA9IHRoaXMucm9vdC5jbGFzc0xpc3QuY29udGFpbnMoY3NzQ2xhc3Nlcy5TSE9SVF9DTEFTUyk7XG4gICAgICAgIGlmICghaXNTaG9ydCAmJiAhaXNGaXhlZCkge1xuICAgICAgICAgICAgd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlV2luZG93UmVzaXplKTtcbiAgICAgICAgfVxuICAgIH07XG4gICAgTURDVG9wQXBwQmFyLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgZV8xLCBfYTtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgIGZvciAodmFyIF9iID0gX192YWx1ZXModGhpcy5pY29uUmlwcGxlcyksIF9jID0gX2IubmV4dCgpOyAhX2MuZG9uZTsgX2MgPSBfYi5uZXh0KCkpIHtcbiAgICAgICAgICAgICAgICB2YXIgaWNvblJpcHBsZSA9IF9jLnZhbHVlO1xuICAgICAgICAgICAgICAgIGljb25SaXBwbGUuZGVzdHJveSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNhdGNoIChlXzFfMSkgeyBlXzEgPSB7IGVycm9yOiBlXzFfMSB9OyB9XG4gICAgICAgIGZpbmFsbHkge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAoX2MgJiYgIV9jLmRvbmUgJiYgKF9hID0gX2IucmV0dXJuKSkgX2EuY2FsbChfYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBmaW5hbGx5IHsgaWYgKGVfMSkgdGhyb3cgZV8xLmVycm9yOyB9XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5zY3JvbGxUYXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVUYXJnZXRTY3JvbGwpO1xuICAgICAgICBpZiAodGhpcy5uYXZJY29uKSB7XG4gICAgICAgICAgICB0aGlzLm5hdkljb24ucmVtb3ZlRXZlbnRMaXN0ZW5lcignY2xpY2snLCB0aGlzLmhhbmRsZU5hdmlnYXRpb25DbGljayk7XG4gICAgICAgIH1cbiAgICAgICAgdmFyIGlzRml4ZWQgPSB0aGlzLnJvb3QuY2xhc3NMaXN0LmNvbnRhaW5zKGNzc0NsYXNzZXMuRklYRURfQ0xBU1MpO1xuICAgICAgICB2YXIgaXNTaG9ydCA9IHRoaXMucm9vdC5jbGFzc0xpc3QuY29udGFpbnMoY3NzQ2xhc3Nlcy5TSE9SVF9DTEFTUyk7XG4gICAgICAgIGlmICghaXNTaG9ydCAmJiAhaXNGaXhlZCkge1xuICAgICAgICAgICAgd2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsIHRoaXMuaGFuZGxlV2luZG93UmVzaXplKTtcbiAgICAgICAgfVxuICAgICAgICBfc3VwZXIucHJvdG90eXBlLmRlc3Ryb3kuY2FsbCh0aGlzKTtcbiAgICB9O1xuICAgIE1EQ1RvcEFwcEJhci5wcm90b3R5cGUuc2V0U2Nyb2xsVGFyZ2V0ID0gZnVuY3Rpb24gKHRhcmdldCkge1xuICAgICAgICAvLyBSZW1vdmUgc2Nyb2xsIGhhbmRsZXIgZnJvbSB0aGUgcHJldmlvdXMgc2Nyb2xsIHRhcmdldFxuICAgICAgICB0aGlzLnNjcm9sbFRhcmdldC5yZW1vdmVFdmVudExpc3RlbmVyKCdzY3JvbGwnLCB0aGlzLmhhbmRsZVRhcmdldFNjcm9sbCk7XG4gICAgICAgIHRoaXMuc2Nyb2xsVGFyZ2V0ID0gdGFyZ2V0O1xuICAgICAgICAvLyBJbml0aWFsaXplIHNjcm9sbCBoYW5kbGVyIG9uIHRoZSBuZXcgc2Nyb2xsIHRhcmdldFxuICAgICAgICB0aGlzLmhhbmRsZVRhcmdldFNjcm9sbCA9XG4gICAgICAgICAgICB0aGlzLmZvdW5kYXRpb24uaGFuZGxlVGFyZ2V0U2Nyb2xsLmJpbmQodGhpcy5mb3VuZGF0aW9uKTtcbiAgICAgICAgdGhpcy5zY3JvbGxUYXJnZXQuYWRkRXZlbnRMaXN0ZW5lcignc2Nyb2xsJywgdGhpcy5oYW5kbGVUYXJnZXRTY3JvbGwpO1xuICAgIH07XG4gICAgTURDVG9wQXBwQmFyLnByb3RvdHlwZS5nZXREZWZhdWx0Rm91bmRhdGlvbiA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIF90aGlzID0gdGhpcztcbiAgICAgICAgLy8gRE8gTk9UIElOTElORSB0aGlzIHZhcmlhYmxlLiBGb3IgYmFja3dhcmQgY29tcGF0aWJpbGl0eSwgZm91bmRhdGlvbnMgdGFrZSBhIFBhcnRpYWw8TURDRm9vQWRhcHRlcj4uXG4gICAgICAgIC8vIFRvIGVuc3VyZSB3ZSBkb24ndCBhY2NpZGVudGFsbHkgb21pdCBhbnkgbWV0aG9kcywgd2UgbmVlZCBhIHNlcGFyYXRlLCBzdHJvbmdseSB0eXBlZCBhZGFwdGVyIHZhcmlhYmxlLlxuICAgICAgICAvLyB0c2xpbnQ6ZGlzYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXMgTWV0aG9kcyBzaG91bGQgYmUgaW4gdGhlIHNhbWUgb3JkZXIgYXMgdGhlIGFkYXB0ZXIgaW50ZXJmYWNlLlxuICAgICAgICB2YXIgYWRhcHRlciA9IHtcbiAgICAgICAgICAgIGhhc0NsYXNzOiBmdW5jdGlvbiAoY2xhc3NOYW1lKSB7IHJldHVybiBfdGhpcy5yb290LmNsYXNzTGlzdC5jb250YWlucyhjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgYWRkQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLnJvb3QuY2xhc3NMaXN0LmFkZChjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgcmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uIChjbGFzc05hbWUpIHsgcmV0dXJuIF90aGlzLnJvb3QuY2xhc3NMaXN0LnJlbW92ZShjbGFzc05hbWUpOyB9LFxuICAgICAgICAgICAgc2V0U3R5bGU6IGZ1bmN0aW9uIChwcm9wZXJ0eSwgdmFsdWUpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMucm9vdC5zdHlsZS5zZXRQcm9wZXJ0eShwcm9wZXJ0eSwgdmFsdWUpO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgICAgIGdldFRvcEFwcEJhckhlaWdodDogZnVuY3Rpb24gKCkgeyByZXR1cm4gX3RoaXMucm9vdC5jbGllbnRIZWlnaHQ7IH0sXG4gICAgICAgICAgICBub3RpZnlOYXZpZ2F0aW9uSWNvbkNsaWNrZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gX3RoaXMuZW1pdChzdHJpbmdzLk5BVklHQVRJT05fRVZFTlQsIHt9KTtcbiAgICAgICAgICAgIH0sXG4gICAgICAgICAgICBnZXRWaWV3cG9ydFNjcm9sbFk6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2YXIgd2luID0gX3RoaXMuc2Nyb2xsVGFyZ2V0O1xuICAgICAgICAgICAgICAgIHZhciBlbCA9IF90aGlzLnNjcm9sbFRhcmdldDtcbiAgICAgICAgICAgICAgICByZXR1cm4gd2luLnBhZ2VZT2Zmc2V0ICE9PSB1bmRlZmluZWQgPyB3aW4ucGFnZVlPZmZzZXQgOiBlbC5zY3JvbGxUb3A7XG4gICAgICAgICAgICB9LFxuICAgICAgICAgICAgZ2V0VG90YWxBY3Rpb25JdGVtczogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgICAgIHJldHVybiBfdGhpcy5yb290LnF1ZXJ5U2VsZWN0b3JBbGwoc3RyaW5ncy5BQ1RJT05fSVRFTV9TRUxFQ1RPUikubGVuZ3RoO1xuICAgICAgICAgICAgfSxcbiAgICAgICAgfTtcbiAgICAgICAgLy8gdHNsaW50OmVuYWJsZTpvYmplY3QtbGl0ZXJhbC1zb3J0LWtleXNcbiAgICAgICAgdmFyIGZvdW5kYXRpb247XG4gICAgICAgIGlmICh0aGlzLnJvb3QuY2xhc3NMaXN0LmNvbnRhaW5zKGNzc0NsYXNzZXMuU0hPUlRfQ0xBU1MpKSB7XG4gICAgICAgICAgICBmb3VuZGF0aW9uID0gbmV3IE1EQ1Nob3J0VG9wQXBwQmFyRm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmICh0aGlzLnJvb3QuY2xhc3NMaXN0LmNvbnRhaW5zKGNzc0NsYXNzZXMuRklYRURfQ0xBU1MpKSB7XG4gICAgICAgICAgICBmb3VuZGF0aW9uID0gbmV3IE1EQ0ZpeGVkVG9wQXBwQmFyRm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGZvdW5kYXRpb24gPSBuZXcgTURDVG9wQXBwQmFyRm91bmRhdGlvbihhZGFwdGVyKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZm91bmRhdGlvbjtcbiAgICB9O1xuICAgIHJldHVybiBNRENUb3BBcHBCYXI7XG59KE1EQ0NvbXBvbmVudCkpO1xuZXhwb3J0IHsgTURDVG9wQXBwQmFyIH07XG4vLyMgc291cmNlTWFwcGluZ1VSTD1jb21wb25lbnQuanMubWFwIiwiXG4vKipcbiAqIEV4cG9zZSBgQmFja29mZmAuXG4gKi9cblxubW9kdWxlLmV4cG9ydHMgPSBCYWNrb2ZmO1xuXG4vKipcbiAqIEluaXRpYWxpemUgYmFja29mZiB0aW1lciB3aXRoIGBvcHRzYC5cbiAqXG4gKiAtIGBtaW5gIGluaXRpYWwgdGltZW91dCBpbiBtaWxsaXNlY29uZHMgWzEwMF1cbiAqIC0gYG1heGAgbWF4IHRpbWVvdXQgWzEwMDAwXVxuICogLSBgaml0dGVyYCBbMF1cbiAqIC0gYGZhY3RvcmAgWzJdXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuZnVuY3Rpb24gQmFja29mZihvcHRzKSB7XG4gIG9wdHMgPSBvcHRzIHx8IHt9O1xuICB0aGlzLm1zID0gb3B0cy5taW4gfHwgMTAwO1xuICB0aGlzLm1heCA9IG9wdHMubWF4IHx8IDEwMDAwO1xuICB0aGlzLmZhY3RvciA9IG9wdHMuZmFjdG9yIHx8IDI7XG4gIHRoaXMuaml0dGVyID0gb3B0cy5qaXR0ZXIgPiAwICYmIG9wdHMuaml0dGVyIDw9IDEgPyBvcHRzLmppdHRlciA6IDA7XG4gIHRoaXMuYXR0ZW1wdHMgPSAwO1xufVxuXG4vKipcbiAqIFJldHVybiB0aGUgYmFja29mZiBkdXJhdGlvbi5cbiAqXG4gKiBAcmV0dXJuIHtOdW1iZXJ9XG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLmR1cmF0aW9uID0gZnVuY3Rpb24oKXtcbiAgdmFyIG1zID0gdGhpcy5tcyAqIE1hdGgucG93KHRoaXMuZmFjdG9yLCB0aGlzLmF0dGVtcHRzKyspO1xuICBpZiAodGhpcy5qaXR0ZXIpIHtcbiAgICB2YXIgcmFuZCA9ICBNYXRoLnJhbmRvbSgpO1xuICAgIHZhciBkZXZpYXRpb24gPSBNYXRoLmZsb29yKHJhbmQgKiB0aGlzLmppdHRlciAqIG1zKTtcbiAgICBtcyA9IChNYXRoLmZsb29yKHJhbmQgKiAxMCkgJiAxKSA9PSAwICA/IG1zIC0gZGV2aWF0aW9uIDogbXMgKyBkZXZpYXRpb247XG4gIH1cbiAgcmV0dXJuIE1hdGgubWluKG1zLCB0aGlzLm1heCkgfCAwO1xufTtcblxuLyoqXG4gKiBSZXNldCB0aGUgbnVtYmVyIG9mIGF0dGVtcHRzLlxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUucmVzZXQgPSBmdW5jdGlvbigpe1xuICB0aGlzLmF0dGVtcHRzID0gMDtcbn07XG5cbi8qKlxuICogU2V0IHRoZSBtaW5pbXVtIGR1cmF0aW9uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5CYWNrb2ZmLnByb3RvdHlwZS5zZXRNaW4gPSBmdW5jdGlvbihtaW4pe1xuICB0aGlzLm1zID0gbWluO1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIG1heGltdW0gZHVyYXRpb25cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5cbkJhY2tvZmYucHJvdG90eXBlLnNldE1heCA9IGZ1bmN0aW9uKG1heCl7XG4gIHRoaXMubWF4ID0gbWF4O1xufTtcblxuLyoqXG4gKiBTZXQgdGhlIGppdHRlclxuICpcbiAqIEBhcGkgcHVibGljXG4gKi9cblxuQmFja29mZi5wcm90b3R5cGUuc2V0Sml0dGVyID0gZnVuY3Rpb24oaml0dGVyKXtcbiAgdGhpcy5qaXR0ZXIgPSBqaXR0ZXI7XG59O1xuXG4iLCIvKlxuICogYmFzZTY0LWFycmF5YnVmZmVyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vbmlrbGFzdmgvYmFzZTY0LWFycmF5YnVmZmVyXG4gKlxuICogQ29weXJpZ2h0IChjKSAyMDEyIE5pa2xhcyB2b24gSGVydHplblxuICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlLlxuICovXG4oZnVuY3Rpb24oY2hhcnMpe1xuICBcInVzZSBzdHJpY3RcIjtcblxuICBleHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uKGFycmF5YnVmZmVyKSB7XG4gICAgdmFyIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpLFxuICAgIGksIGxlbiA9IGJ5dGVzLmxlbmd0aCwgYmFzZTY0ID0gXCJcIjtcblxuICAgIGZvciAoaSA9IDA7IGkgPCBsZW47IGkrPTMpIHtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1tieXRlc1tpXSA+PiAyXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2ldICYgMykgPDwgNCkgfCAoYnl0ZXNbaSArIDFdID4+IDQpXTtcbiAgICAgIGJhc2U2NCArPSBjaGFyc1soKGJ5dGVzW2kgKyAxXSAmIDE1KSA8PCAyKSB8IChieXRlc1tpICsgMl0gPj4gNildO1xuICAgICAgYmFzZTY0ICs9IGNoYXJzW2J5dGVzW2kgKyAyXSAmIDYzXTtcbiAgICB9XG5cbiAgICBpZiAoKGxlbiAlIDMpID09PSAyKSB7XG4gICAgICBiYXNlNjQgPSBiYXNlNjQuc3Vic3RyaW5nKDAsIGJhc2U2NC5sZW5ndGggLSAxKSArIFwiPVwiO1xuICAgIH0gZWxzZSBpZiAobGVuICUgMyA9PT0gMSkge1xuICAgICAgYmFzZTY0ID0gYmFzZTY0LnN1YnN0cmluZygwLCBiYXNlNjQubGVuZ3RoIC0gMikgKyBcIj09XCI7XG4gICAgfVxuXG4gICAgcmV0dXJuIGJhc2U2NDtcbiAgfTtcblxuICBleHBvcnRzLmRlY29kZSA9ICBmdW5jdGlvbihiYXNlNjQpIHtcbiAgICB2YXIgYnVmZmVyTGVuZ3RoID0gYmFzZTY0Lmxlbmd0aCAqIDAuNzUsXG4gICAgbGVuID0gYmFzZTY0Lmxlbmd0aCwgaSwgcCA9IDAsXG4gICAgZW5jb2RlZDEsIGVuY29kZWQyLCBlbmNvZGVkMywgZW5jb2RlZDQ7XG5cbiAgICBpZiAoYmFzZTY0W2Jhc2U2NC5sZW5ndGggLSAxXSA9PT0gXCI9XCIpIHtcbiAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgaWYgKGJhc2U2NFtiYXNlNjQubGVuZ3RoIC0gMl0gPT09IFwiPVwiKSB7XG4gICAgICAgIGJ1ZmZlckxlbmd0aC0tO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBhcnJheWJ1ZmZlciA9IG5ldyBBcnJheUJ1ZmZlcihidWZmZXJMZW5ndGgpLFxuICAgIGJ5dGVzID0gbmV3IFVpbnQ4QXJyYXkoYXJyYXlidWZmZXIpO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGxlbjsgaSs9NCkge1xuICAgICAgZW5jb2RlZDEgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpXSk7XG4gICAgICBlbmNvZGVkMiA9IGNoYXJzLmluZGV4T2YoYmFzZTY0W2krMV0pO1xuICAgICAgZW5jb2RlZDMgPSBjaGFycy5pbmRleE9mKGJhc2U2NFtpKzJdKTtcbiAgICAgIGVuY29kZWQ0ID0gY2hhcnMuaW5kZXhPZihiYXNlNjRbaSszXSk7XG5cbiAgICAgIGJ5dGVzW3ArK10gPSAoZW5jb2RlZDEgPDwgMikgfCAoZW5jb2RlZDIgPj4gNCk7XG4gICAgICBieXRlc1twKytdID0gKChlbmNvZGVkMiAmIDE1KSA8PCA0KSB8IChlbmNvZGVkMyA+PiAyKTtcbiAgICAgIGJ5dGVzW3ArK10gPSAoKGVuY29kZWQzICYgMykgPDwgNikgfCAoZW5jb2RlZDQgJiA2Myk7XG4gICAgfVxuXG4gICAgcmV0dXJuIGFycmF5YnVmZmVyO1xuICB9O1xufSkoXCJBQkNERUZHSElKS0xNTk9QUVJTVFVWV1hZWmFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6MDEyMzQ1Njc4OSsvXCIpO1xuIiwiXHJcbi8qKlxyXG4gKiBFeHBvc2UgYEVtaXR0ZXJgLlxyXG4gKi9cclxuXHJcbmlmICh0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJykge1xyXG4gIG1vZHVsZS5leHBvcnRzID0gRW1pdHRlcjtcclxufVxyXG5cclxuLyoqXHJcbiAqIEluaXRpYWxpemUgYSBuZXcgYEVtaXR0ZXJgLlxyXG4gKlxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIEVtaXR0ZXIob2JqKSB7XHJcbiAgaWYgKG9iaikgcmV0dXJuIG1peGluKG9iaik7XHJcbn07XHJcblxyXG4vKipcclxuICogTWl4aW4gdGhlIGVtaXR0ZXIgcHJvcGVydGllcy5cclxuICpcclxuICogQHBhcmFtIHtPYmplY3R9IG9ialxyXG4gKiBAcmV0dXJuIHtPYmplY3R9XHJcbiAqIEBhcGkgcHJpdmF0ZVxyXG4gKi9cclxuXHJcbmZ1bmN0aW9uIG1peGluKG9iaikge1xyXG4gIGZvciAodmFyIGtleSBpbiBFbWl0dGVyLnByb3RvdHlwZSkge1xyXG4gICAgb2JqW2tleV0gPSBFbWl0dGVyLnByb3RvdHlwZVtrZXldO1xyXG4gIH1cclxuICByZXR1cm4gb2JqO1xyXG59XHJcblxyXG4vKipcclxuICogTGlzdGVuIG9uIHRoZSBnaXZlbiBgZXZlbnRgIHdpdGggYGZuYC5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUub24gPVxyXG5FbWl0dGVyLnByb3RvdHlwZS5hZGRFdmVudExpc3RlbmVyID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcbiAgKHRoaXMuX2NhbGxiYWNrc1snJCcgKyBldmVudF0gPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdKVxyXG4gICAgLnB1c2goZm4pO1xyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEFkZHMgYW4gYGV2ZW50YCBsaXN0ZW5lciB0aGF0IHdpbGwgYmUgaW52b2tlZCBhIHNpbmdsZVxyXG4gKiB0aW1lIHRoZW4gYXV0b21hdGljYWxseSByZW1vdmVkLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtGdW5jdGlvbn0gZm5cclxuICogQHJldHVybiB7RW1pdHRlcn1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5vbmNlID0gZnVuY3Rpb24oZXZlbnQsIGZuKXtcclxuICBmdW5jdGlvbiBvbigpIHtcclxuICAgIHRoaXMub2ZmKGV2ZW50LCBvbik7XHJcbiAgICBmbi5hcHBseSh0aGlzLCBhcmd1bWVudHMpO1xyXG4gIH1cclxuXHJcbiAgb24uZm4gPSBmbjtcclxuICB0aGlzLm9uKGV2ZW50LCBvbik7XHJcbiAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlIHRoZSBnaXZlbiBjYWxsYmFjayBmb3IgYGV2ZW50YCBvciBhbGxcclxuICogcmVnaXN0ZXJlZCBjYWxsYmFja3MuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBmblxyXG4gKiBAcmV0dXJuIHtFbWl0dGVyfVxyXG4gKiBAYXBpIHB1YmxpY1xyXG4gKi9cclxuXHJcbkVtaXR0ZXIucHJvdG90eXBlLm9mZiA9XHJcbkVtaXR0ZXIucHJvdG90eXBlLnJlbW92ZUxpc3RlbmVyID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlQWxsTGlzdGVuZXJzID1cclxuRW1pdHRlci5wcm90b3R5cGUucmVtb3ZlRXZlbnRMaXN0ZW5lciA9IGZ1bmN0aW9uKGV2ZW50LCBmbil7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG5cclxuICAvLyBhbGxcclxuICBpZiAoMCA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICB0aGlzLl9jYWxsYmFja3MgPSB7fTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gc3BlY2lmaWMgZXZlbnRcclxuICB2YXIgY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICBpZiAoIWNhbGxiYWNrcykgcmV0dXJuIHRoaXM7XHJcblxyXG4gIC8vIHJlbW92ZSBhbGwgaGFuZGxlcnNcclxuICBpZiAoMSA9PSBhcmd1bWVudHMubGVuZ3RoKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICAgIHJldHVybiB0aGlzO1xyXG4gIH1cclxuXHJcbiAgLy8gcmVtb3ZlIHNwZWNpZmljIGhhbmRsZXJcclxuICB2YXIgY2I7XHJcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBjYWxsYmFja3MubGVuZ3RoOyBpKyspIHtcclxuICAgIGNiID0gY2FsbGJhY2tzW2ldO1xyXG4gICAgaWYgKGNiID09PSBmbiB8fCBjYi5mbiA9PT0gZm4pIHtcclxuICAgICAgY2FsbGJhY2tzLnNwbGljZShpLCAxKTtcclxuICAgICAgYnJlYWs7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBSZW1vdmUgZXZlbnQgc3BlY2lmaWMgYXJyYXlzIGZvciBldmVudCB0eXBlcyB0aGF0IG5vXHJcbiAgLy8gb25lIGlzIHN1YnNjcmliZWQgZm9yIHRvIGF2b2lkIG1lbW9yeSBsZWFrLlxyXG4gIGlmIChjYWxsYmFja3MubGVuZ3RoID09PSAwKSB7XHJcbiAgICBkZWxldGUgdGhpcy5fY2FsbGJhY2tzWyckJyArIGV2ZW50XTtcclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIEVtaXQgYGV2ZW50YCB3aXRoIHRoZSBnaXZlbiBhcmdzLlxyXG4gKlxyXG4gKiBAcGFyYW0ge1N0cmluZ30gZXZlbnRcclxuICogQHBhcmFtIHtNaXhlZH0gLi4uXHJcbiAqIEByZXR1cm4ge0VtaXR0ZXJ9XHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuZW1pdCA9IGZ1bmN0aW9uKGV2ZW50KXtcclxuICB0aGlzLl9jYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3MgfHwge307XHJcblxyXG4gIHZhciBhcmdzID0gbmV3IEFycmF5KGFyZ3VtZW50cy5sZW5ndGggLSAxKVxyXG4gICAgLCBjYWxsYmFja3MgPSB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdO1xyXG5cclxuICBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykge1xyXG4gICAgYXJnc1tpIC0gMV0gPSBhcmd1bWVudHNbaV07XHJcbiAgfVxyXG5cclxuICBpZiAoY2FsbGJhY2tzKSB7XHJcbiAgICBjYWxsYmFja3MgPSBjYWxsYmFja3Muc2xpY2UoMCk7XHJcbiAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gY2FsbGJhY2tzLmxlbmd0aDsgaSA8IGxlbjsgKytpKSB7XHJcbiAgICAgIGNhbGxiYWNrc1tpXS5hcHBseSh0aGlzLCBhcmdzKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJldHVybiBhcnJheSBvZiBjYWxsYmFja3MgZm9yIGBldmVudGAuXHJcbiAqXHJcbiAqIEBwYXJhbSB7U3RyaW5nfSBldmVudFxyXG4gKiBAcmV0dXJuIHtBcnJheX1cclxuICogQGFwaSBwdWJsaWNcclxuICovXHJcblxyXG5FbWl0dGVyLnByb3RvdHlwZS5saXN0ZW5lcnMgPSBmdW5jdGlvbihldmVudCl7XHJcbiAgdGhpcy5fY2FsbGJhY2tzID0gdGhpcy5fY2FsbGJhY2tzIHx8IHt9O1xyXG4gIHJldHVybiB0aGlzLl9jYWxsYmFja3NbJyQnICsgZXZlbnRdIHx8IFtdO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIENoZWNrIGlmIHRoaXMgZW1pdHRlciBoYXMgYGV2ZW50YCBoYW5kbGVycy5cclxuICpcclxuICogQHBhcmFtIHtTdHJpbmd9IGV2ZW50XHJcbiAqIEByZXR1cm4ge0Jvb2xlYW59XHJcbiAqIEBhcGkgcHVibGljXHJcbiAqL1xyXG5cclxuRW1pdHRlci5wcm90b3R5cGUuaGFzTGlzdGVuZXJzID0gZnVuY3Rpb24oZXZlbnQpe1xyXG4gIHJldHVybiAhISB0aGlzLmxpc3RlbmVycyhldmVudCkubGVuZ3RoO1xyXG59O1xyXG4iLCIvLyBJbXBvcnRzXG5pbXBvcnQgX19fQ1NTX0xPQURFUl9BUElfU09VUkNFTUFQX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvY3NzV2l0aE1hcHBpbmdUb1N0cmluZy5qc1wiO1xuaW1wb3J0IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvYXBpLmpzXCI7XG5pbXBvcnQgX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyBmcm9tIFwiLi4vLi4vY3NzLWxvYWRlci9kaXN0L3J1bnRpbWUvZ2V0VXJsLmpzXCI7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18gPSBuZXcgVVJMKFwiLi9tYXRlcmlhbC1pY29ucy53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8xX19fID0gbmV3IFVSTChcIi4vbWF0ZXJpYWwtaWNvbnMud29mZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fID0gbmV3IFVSTChcIi4vbWF0ZXJpYWwtaWNvbnMtb3V0bGluZWQud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyA9IG5ldyBVUkwoXCIuL21hdGVyaWFsLWljb25zLW91dGxpbmVkLndvZmZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyA9IG5ldyBVUkwoXCIuL21hdGVyaWFsLWljb25zLXJvdW5kLndvZmYyXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzVfX18gPSBuZXcgVVJMKFwiLi9tYXRlcmlhbC1pY29ucy1yb3VuZC53b2ZmXCIsIGltcG9ydC5tZXRhLnVybCk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18gPSBuZXcgVVJMKFwiLi9tYXRlcmlhbC1pY29ucy1zaGFycC53b2ZmMlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF83X19fID0gbmV3IFVSTChcIi4vbWF0ZXJpYWwtaWNvbnMtc2hhcnAud29mZlwiLCBpbXBvcnQubWV0YS51cmwpO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF84X19fID0gbmV3IFVSTChcIi4vbWF0ZXJpYWwtaWNvbnMtdHdvLXRvbmUud29mZjJcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyA9IG5ldyBVUkwoXCIuL21hdGVyaWFsLWljb25zLXR3by10b25lLndvZmZcIiwgaW1wb3J0Lm1ldGEudXJsKTtcbnZhciBfX19DU1NfTE9BREVSX0VYUE9SVF9fXyA9IF9fX0NTU19MT0FERVJfQVBJX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX0FQSV9TT1VSQ0VNQVBfSU1QT1JUX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8wX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMF9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMV9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzFfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzJfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8zX19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfM19fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzRfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzVfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF82X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNl9fXyk7XG52YXIgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfN19fXyA9IF9fX0NTU19MT0FERVJfR0VUX1VSTF9JTVBPUlRfX18oX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzdfX18pO1xudmFyIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzhfX18gPSBfX19DU1NfTE9BREVSX0dFVF9VUkxfSU1QT1JUX19fKF9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF84X19fKTtcbnZhciBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF85X19fID0gX19fQ1NTX0xPQURFUl9HRVRfVVJMX0lNUE9SVF9fXyhfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfOV9fXyk7XG4vLyBNb2R1bGVcbl9fX0NTU19MT0FERVJfRVhQT1JUX19fLnB1c2goW21vZHVsZS5pZCwgXCJAZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTWF0ZXJpYWwgSWNvbnNcXFwiO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGZvbnQtZGlzcGxheTogYmxvY2s7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcbn1cXG4ubWF0ZXJpYWwtaWNvbnMge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJNYXRlcmlhbCBJY29uc1xcXCI7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgd29yZC13cmFwOiBub3JtYWw7XFxuICBkaXJlY3Rpb246IGx0cjtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XFxuICBmb250LWZlYXR1cmUtc2V0dGluZ3M6IFxcXCJsaWdhXFxcIjtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIk1hdGVyaWFsIEljb25zIE91dGxpbmVkXFxcIjtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LWRpc3BsYXk6IGJsb2NrO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8yX19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfM19fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXG59XFxuLm1hdGVyaWFsLWljb25zLW91dGxpbmVkIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTWF0ZXJpYWwgSWNvbnMgT3V0bGluZWRcXFwiO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtc2l6ZTogMjRweDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHdvcmQtd3JhcDogbm9ybWFsO1xcbiAgZGlyZWN0aW9uOiBsdHI7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xcbiAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiBcXFwibGlnYVxcXCI7XFxufVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJNYXRlcmlhbCBJY29ucyBSb3VuZFxcXCI7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1kaXNwbGF5OiBibG9jaztcXG4gIHNyYzogdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNF9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzVfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxufVxcbi5tYXRlcmlhbC1pY29ucy1yb3VuZCB7XFxuICBmb250LWZhbWlseTogXFxcIk1hdGVyaWFsIEljb25zIFJvdW5kXFxcIjtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXNpemU6IDI0cHg7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB3b3JkLXdyYXA6IG5vcm1hbDtcXG4gIGRpcmVjdGlvbjogbHRyO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcXG4gIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogXFxcImxpZ2FcXFwiO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTWF0ZXJpYWwgSWNvbnMgU2hhcnBcXFwiO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGZvbnQtZGlzcGxheTogYmxvY2s7XFxuICBzcmM6IHVybChcIiArIF9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18gKyBcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fICsgXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcbn1cXG4ubWF0ZXJpYWwtaWNvbnMtc2hhcnAge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJNYXRlcmlhbCBJY29ucyBTaGFycFxcXCI7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgd29yZC13cmFwOiBub3JtYWw7XFxuICBkaXJlY3Rpb246IGx0cjtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XFxuICBmb250LWZlYXR1cmUtc2V0dGluZ3M6IFxcXCJsaWdhXFxcIjtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIk1hdGVyaWFsIEljb25zIFR3byBUb25lXFxcIjtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LWRpc3BsYXk6IGJsb2NrO1xcbiAgc3JjOiB1cmwoXCIgKyBfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF84X19fICsgXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFwiICsgX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOV9fXyArIFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXG59XFxuLm1hdGVyaWFsLWljb25zLXR3by10b25lIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTWF0ZXJpYWwgSWNvbnMgVHdvIFRvbmVcXFwiO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtc2l6ZTogMjRweDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHdvcmQtd3JhcDogbm9ybWFsO1xcbiAgZGlyZWN0aW9uOiBsdHI7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xcbiAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiBcXFwibGlnYVxcXCI7XFxufVxcblwiLCBcIlwiLHtcInZlcnNpb25cIjozLFwic291cmNlc1wiOltcIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9tYXRlcmlhbC1pY29ucy9pY29uZm9udC9tYXRlcmlhbC1pY29ucy5jc3NcIl0sXCJuYW1lc1wiOltdLFwibWFwcGluZ3NcIjpcIkFBQUE7RUFDRSw2QkFBNkI7RUFDN0Isa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsb0hBQStGO0FBQ2pHO0FBQ0E7RUFDRSw2QkFBNkI7RUFDN0IsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQixlQUFlO0VBQ2YsY0FBYztFQUNkLHNCQUFzQjtFQUN0QixvQkFBb0I7RUFDcEIscUJBQXFCO0VBQ3JCLG1CQUFtQjtFQUNuQixpQkFBaUI7RUFDakIsY0FBYztFQUNkLG1DQUFtQztFQUNuQyxrQ0FBa0M7RUFDbEMsa0NBQWtDO0VBQ2xDLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLHNDQUFzQztFQUN0QyxrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLG1CQUFtQjtFQUNuQixvSEFBaUg7QUFDbkg7QUFDQTtFQUNFLHNDQUFzQztFQUN0QyxtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixjQUFjO0VBQ2Qsc0JBQXNCO0VBQ3RCLG9CQUFvQjtFQUNwQixxQkFBcUI7RUFDckIsbUJBQW1CO0VBQ25CLGlCQUFpQjtFQUNqQixjQUFjO0VBQ2QsbUNBQW1DO0VBQ25DLGtDQUFrQztFQUNsQyxrQ0FBa0M7RUFDbEMsNkJBQTZCO0FBQy9COztBQUVBO0VBQ0UsbUNBQW1DO0VBQ25DLGtCQUFrQjtFQUNsQixnQkFBZ0I7RUFDaEIsbUJBQW1CO0VBQ25CLG9IQUEyRztBQUM3RztBQUNBO0VBQ0UsbUNBQW1DO0VBQ25DLG1CQUFtQjtFQUNuQixrQkFBa0I7RUFDbEIsZUFBZTtFQUNmLGNBQWM7RUFDZCxzQkFBc0I7RUFDdEIsb0JBQW9CO0VBQ3BCLHFCQUFxQjtFQUNyQixtQkFBbUI7RUFDbkIsaUJBQWlCO0VBQ2pCLGNBQWM7RUFDZCxtQ0FBbUM7RUFDbkMsa0NBQWtDO0VBQ2xDLGtDQUFrQztFQUNsQyw2QkFBNkI7QUFDL0I7O0FBRUE7RUFDRSxtQ0FBbUM7RUFDbkMsa0JBQWtCO0VBQ2xCLGdCQUFnQjtFQUNoQixtQkFBbUI7RUFDbkIsb0hBQTJHO0FBQzdHO0FBQ0E7RUFDRSxtQ0FBbUM7RUFDbkMsbUJBQW1CO0VBQ25CLGtCQUFrQjtFQUNsQixlQUFlO0VBQ2YsY0FBYztFQUNkLHNCQUFzQjtFQUN0QixvQkFBb0I7RUFDcEIscUJBQXFCO0VBQ3JCLG1CQUFtQjtFQUNuQixpQkFBaUI7RUFDakIsY0FBYztFQUNkLG1DQUFtQztFQUNuQyxrQ0FBa0M7RUFDbEMsa0NBQWtDO0VBQ2xDLDZCQUE2QjtBQUMvQjs7QUFFQTtFQUNFLHNDQUFzQztFQUN0QyxrQkFBa0I7RUFDbEIsZ0JBQWdCO0VBQ2hCLG1CQUFtQjtFQUNuQixvSEFBaUg7QUFDbkg7QUFDQTtFQUNFLHNDQUFzQztFQUN0QyxtQkFBbUI7RUFDbkIsa0JBQWtCO0VBQ2xCLGVBQWU7RUFDZixjQUFjO0VBQ2Qsc0JBQXNCO0VBQ3RCLG9CQUFvQjtFQUNwQixxQkFBcUI7RUFDckIsbUJBQW1CO0VBQ25CLGlCQUFpQjtFQUNqQixjQUFjO0VBQ2QsbUNBQW1DO0VBQ25DLGtDQUFrQztFQUNsQyxrQ0FBa0M7RUFDbEMsNkJBQTZCO0FBQy9CXCIsXCJzb3VyY2VzQ29udGVudFwiOltcIkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJNYXRlcmlhbCBJY29uc1xcXCI7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1kaXNwbGF5OiBibG9jaztcXG4gIHNyYzogdXJsKFxcXCIuL21hdGVyaWFsLWljb25zLndvZmYyXFxcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXFxcIi4vbWF0ZXJpYWwtaWNvbnMud29mZlxcXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcbn1cXG4ubWF0ZXJpYWwtaWNvbnMge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJNYXRlcmlhbCBJY29uc1xcXCI7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgd29yZC13cmFwOiBub3JtYWw7XFxuICBkaXJlY3Rpb246IGx0cjtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XFxuICBmb250LWZlYXR1cmUtc2V0dGluZ3M6IFxcXCJsaWdhXFxcIjtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIk1hdGVyaWFsIEljb25zIE91dGxpbmVkXFxcIjtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LWRpc3BsYXk6IGJsb2NrO1xcbiAgc3JjOiB1cmwoXFxcIi4vbWF0ZXJpYWwtaWNvbnMtb3V0bGluZWQud29mZjJcXFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcXFwiLi9tYXRlcmlhbC1pY29ucy1vdXRsaW5lZC53b2ZmXFxcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxufVxcbi5tYXRlcmlhbC1pY29ucy1vdXRsaW5lZCB7XFxuICBmb250LWZhbWlseTogXFxcIk1hdGVyaWFsIEljb25zIE91dGxpbmVkXFxcIjtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXNpemU6IDI0cHg7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB3b3JkLXdyYXA6IG5vcm1hbDtcXG4gIGRpcmVjdGlvbjogbHRyO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcXG4gIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogXFxcImxpZ2FcXFwiO1xcbn1cXG5cXG5AZm9udC1mYWNlIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTWF0ZXJpYWwgSWNvbnMgUm91bmRcXFwiO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC13ZWlnaHQ6IDQwMDtcXG4gIGZvbnQtZGlzcGxheTogYmxvY2s7XFxuICBzcmM6IHVybChcXFwiLi9tYXRlcmlhbC1pY29ucy1yb3VuZC53b2ZmMlxcXCIpIGZvcm1hdChcXFwid29mZjJcXFwiKSwgdXJsKFxcXCIuL21hdGVyaWFsLWljb25zLXJvdW5kLndvZmZcXFwiKSBmb3JtYXQoXFxcIndvZmZcXFwiKTtcXG59XFxuLm1hdGVyaWFsLWljb25zLXJvdW5kIHtcXG4gIGZvbnQtZmFtaWx5OiBcXFwiTWF0ZXJpYWwgSWNvbnMgUm91bmRcXFwiO1xcbiAgZm9udC13ZWlnaHQ6IG5vcm1hbDtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtc2l6ZTogMjRweDtcXG4gIGxpbmUtaGVpZ2h0OiAxO1xcbiAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbDtcXG4gIHRleHQtdHJhbnNmb3JtOiBub25lO1xcbiAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xcbiAgd2hpdGUtc3BhY2U6IG5vd3JhcDtcXG4gIHdvcmQtd3JhcDogbm9ybWFsO1xcbiAgZGlyZWN0aW9uOiBsdHI7XFxuICAtd2Via2l0LWZvbnQtc21vb3RoaW5nOiBhbnRpYWxpYXNlZDtcXG4gIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XFxuICB0ZXh0LXJlbmRlcmluZzogb3B0aW1pemVMZWdpYmlsaXR5O1xcbiAgZm9udC1mZWF0dXJlLXNldHRpbmdzOiBcXFwibGlnYVxcXCI7XFxufVxcblxcbkBmb250LWZhY2Uge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJNYXRlcmlhbCBJY29ucyBTaGFycFxcXCI7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXdlaWdodDogNDAwO1xcbiAgZm9udC1kaXNwbGF5OiBibG9jaztcXG4gIHNyYzogdXJsKFxcXCIuL21hdGVyaWFsLWljb25zLXNoYXJwLndvZmYyXFxcIikgZm9ybWF0KFxcXCJ3b2ZmMlxcXCIpLCB1cmwoXFxcIi4vbWF0ZXJpYWwtaWNvbnMtc2hhcnAud29mZlxcXCIpIGZvcm1hdChcXFwid29mZlxcXCIpO1xcbn1cXG4ubWF0ZXJpYWwtaWNvbnMtc2hhcnAge1xcbiAgZm9udC1mYW1pbHk6IFxcXCJNYXRlcmlhbCBJY29ucyBTaGFycFxcXCI7XFxuICBmb250LXdlaWdodDogbm9ybWFsO1xcbiAgZm9udC1zdHlsZTogbm9ybWFsO1xcbiAgZm9udC1zaXplOiAyNHB4O1xcbiAgbGluZS1oZWlnaHQ6IDE7XFxuICBsZXR0ZXItc3BhY2luZzogbm9ybWFsO1xcbiAgdGV4dC10cmFuc2Zvcm06IG5vbmU7XFxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XFxuICB3aGl0ZS1zcGFjZTogbm93cmFwO1xcbiAgd29yZC13cmFwOiBub3JtYWw7XFxuICBkaXJlY3Rpb246IGx0cjtcXG4gIC13ZWJraXQtZm9udC1zbW9vdGhpbmc6IGFudGlhbGlhc2VkO1xcbiAgLW1vei1vc3gtZm9udC1zbW9vdGhpbmc6IGdyYXlzY2FsZTtcXG4gIHRleHQtcmVuZGVyaW5nOiBvcHRpbWl6ZUxlZ2liaWxpdHk7XFxuICBmb250LWZlYXR1cmUtc2V0dGluZ3M6IFxcXCJsaWdhXFxcIjtcXG59XFxuXFxuQGZvbnQtZmFjZSB7XFxuICBmb250LWZhbWlseTogXFxcIk1hdGVyaWFsIEljb25zIFR3byBUb25lXFxcIjtcXG4gIGZvbnQtc3R5bGU6IG5vcm1hbDtcXG4gIGZvbnQtd2VpZ2h0OiA0MDA7XFxuICBmb250LWRpc3BsYXk6IGJsb2NrO1xcbiAgc3JjOiB1cmwoXFxcIi4vbWF0ZXJpYWwtaWNvbnMtdHdvLXRvbmUud29mZjJcXFwiKSBmb3JtYXQoXFxcIndvZmYyXFxcIiksIHVybChcXFwiLi9tYXRlcmlhbC1pY29ucy10d28tdG9uZS53b2ZmXFxcIikgZm9ybWF0KFxcXCJ3b2ZmXFxcIik7XFxufVxcbi5tYXRlcmlhbC1pY29ucy10d28tdG9uZSB7XFxuICBmb250LWZhbWlseTogXFxcIk1hdGVyaWFsIEljb25zIFR3byBUb25lXFxcIjtcXG4gIGZvbnQtd2VpZ2h0OiBub3JtYWw7XFxuICBmb250LXN0eWxlOiBub3JtYWw7XFxuICBmb250LXNpemU6IDI0cHg7XFxuICBsaW5lLWhlaWdodDogMTtcXG4gIGxldHRlci1zcGFjaW5nOiBub3JtYWw7XFxuICB0ZXh0LXRyYW5zZm9ybTogbm9uZTtcXG4gIGRpc3BsYXk6IGlubGluZS1ibG9jaztcXG4gIHdoaXRlLXNwYWNlOiBub3dyYXA7XFxuICB3b3JkLXdyYXA6IG5vcm1hbDtcXG4gIGRpcmVjdGlvbjogbHRyO1xcbiAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XFxuICAtbW96LW9zeC1mb250LXNtb290aGluZzogZ3JheXNjYWxlO1xcbiAgdGV4dC1yZW5kZXJpbmc6IG9wdGltaXplTGVnaWJpbGl0eTtcXG4gIGZvbnQtZmVhdHVyZS1zZXR0aW5nczogXFxcImxpZ2FcXFwiO1xcbn1cXG5cIl0sXCJzb3VyY2VSb290XCI6XCJcIn1dKTtcbi8vIEV4cG9ydHNcbmV4cG9ydCBkZWZhdWx0IF9fX0NTU19MT0FERVJfRVhQT1JUX19fO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qXG4gIE1JVCBMaWNlbnNlIGh0dHA6Ly93d3cub3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvbWl0LWxpY2Vuc2UucGhwXG4gIEF1dGhvciBUb2JpYXMgS29wcGVycyBAc29rcmFcbiovXG4vLyBjc3MgYmFzZSBjb2RlLCBpbmplY3RlZCBieSB0aGUgY3NzLWxvYWRlclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGZ1bmMtbmFtZXNcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcpIHtcbiAgdmFyIGxpc3QgPSBbXTsgLy8gcmV0dXJuIHRoZSBsaXN0IG9mIG1vZHVsZXMgYXMgY3NzIHN0cmluZ1xuXG4gIGxpc3QudG9TdHJpbmcgPSBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy5tYXAoZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIHZhciBjb250ZW50ID0gY3NzV2l0aE1hcHBpbmdUb1N0cmluZyhpdGVtKTtcblxuICAgICAgaWYgKGl0ZW1bMl0pIHtcbiAgICAgICAgcmV0dXJuIFwiQG1lZGlhIFwiLmNvbmNhdChpdGVtWzJdLCBcIiB7XCIpLmNvbmNhdChjb250ZW50LCBcIn1cIik7XG4gICAgICB9XG5cbiAgICAgIHJldHVybiBjb250ZW50O1xuICAgIH0pLmpvaW4oXCJcIik7XG4gIH07IC8vIGltcG9ydCBhIGxpc3Qgb2YgbW9kdWxlcyBpbnRvIHRoZSBsaXN0XG4gIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBmdW5jLW5hbWVzXG5cblxuICBsaXN0LmkgPSBmdW5jdGlvbiAobW9kdWxlcywgbWVkaWFRdWVyeSwgZGVkdXBlKSB7XG4gICAgaWYgKHR5cGVvZiBtb2R1bGVzID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICAgIG1vZHVsZXMgPSBbW251bGwsIG1vZHVsZXMsIFwiXCJdXTtcbiAgICB9XG5cbiAgICB2YXIgYWxyZWFkeUltcG9ydGVkTW9kdWxlcyA9IHt9O1xuXG4gICAgaWYgKGRlZHVwZSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0aGlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBwcmVmZXItZGVzdHJ1Y3R1cmluZ1xuICAgICAgICB2YXIgaWQgPSB0aGlzW2ldWzBdO1xuXG4gICAgICAgIGlmIChpZCAhPSBudWxsKSB7XG4gICAgICAgICAgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpZF0gPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IG1vZHVsZXMubGVuZ3RoOyBfaSsrKSB7XG4gICAgICB2YXIgaXRlbSA9IFtdLmNvbmNhdChtb2R1bGVzW19pXSk7XG5cbiAgICAgIGlmIChkZWR1cGUgJiYgYWxyZWFkeUltcG9ydGVkTW9kdWxlc1tpdGVtWzBdXSkge1xuICAgICAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tY29udGludWVcbiAgICAgICAgY29udGludWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChtZWRpYVF1ZXJ5KSB7XG4gICAgICAgIGlmICghaXRlbVsyXSkge1xuICAgICAgICAgIGl0ZW1bMl0gPSBtZWRpYVF1ZXJ5O1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGl0ZW1bMl0gPSBcIlwiLmNvbmNhdChtZWRpYVF1ZXJ5LCBcIiBhbmQgXCIpLmNvbmNhdChpdGVtWzJdKTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBsaXN0LnB1c2goaXRlbSk7XG4gICAgfVxuICB9O1xuXG4gIHJldHVybiBsaXN0O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxuZnVuY3Rpb24gX3NsaWNlZFRvQXJyYXkoYXJyLCBpKSB7IHJldHVybiBfYXJyYXlXaXRoSG9sZXMoYXJyKSB8fCBfaXRlcmFibGVUb0FycmF5TGltaXQoYXJyLCBpKSB8fCBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkoYXJyLCBpKSB8fCBfbm9uSXRlcmFibGVSZXN0KCk7IH1cblxuZnVuY3Rpb24gX25vbkl0ZXJhYmxlUmVzdCgpIHsgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkludmFsaWQgYXR0ZW1wdCB0byBkZXN0cnVjdHVyZSBub24taXRlcmFibGUgaW5zdGFuY2UuXFxuSW4gb3JkZXIgdG8gYmUgaXRlcmFibGUsIG5vbi1hcnJheSBvYmplY3RzIG11c3QgaGF2ZSBhIFtTeW1ib2wuaXRlcmF0b3JdKCkgbWV0aG9kLlwiKTsgfVxuXG5mdW5jdGlvbiBfdW5zdXBwb3J0ZWRJdGVyYWJsZVRvQXJyYXkobywgbWluTGVuKSB7IGlmICghbykgcmV0dXJuOyBpZiAodHlwZW9mIG8gPT09IFwic3RyaW5nXCIpIHJldHVybiBfYXJyYXlMaWtlVG9BcnJheShvLCBtaW5MZW4pOyB2YXIgbiA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmcuY2FsbChvKS5zbGljZSg4LCAtMSk7IGlmIChuID09PSBcIk9iamVjdFwiICYmIG8uY29uc3RydWN0b3IpIG4gPSBvLmNvbnN0cnVjdG9yLm5hbWU7IGlmIChuID09PSBcIk1hcFwiIHx8IG4gPT09IFwiU2V0XCIpIHJldHVybiBBcnJheS5mcm9tKG8pOyBpZiAobiA9PT0gXCJBcmd1bWVudHNcIiB8fCAvXig/OlVpfEkpbnQoPzo4fDE2fDMyKSg/OkNsYW1wZWQpP0FycmF5JC8udGVzdChuKSkgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IH1cblxuZnVuY3Rpb24gX2FycmF5TGlrZVRvQXJyYXkoYXJyLCBsZW4pIHsgaWYgKGxlbiA9PSBudWxsIHx8IGxlbiA+IGFyci5sZW5ndGgpIGxlbiA9IGFyci5sZW5ndGg7IGZvciAodmFyIGkgPSAwLCBhcnIyID0gbmV3IEFycmF5KGxlbik7IGkgPCBsZW47IGkrKykgeyBhcnIyW2ldID0gYXJyW2ldOyB9IHJldHVybiBhcnIyOyB9XG5cbmZ1bmN0aW9uIF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHsgdmFyIF9pID0gYXJyID09IG51bGwgPyBudWxsIDogdHlwZW9mIFN5bWJvbCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBhcnJbU3ltYm9sLml0ZXJhdG9yXSB8fCBhcnJbXCJAQGl0ZXJhdG9yXCJdOyBpZiAoX2kgPT0gbnVsbCkgcmV0dXJuOyB2YXIgX2FyciA9IFtdOyB2YXIgX24gPSB0cnVlOyB2YXIgX2QgPSBmYWxzZTsgdmFyIF9zLCBfZTsgdHJ5IHsgZm9yIChfaSA9IF9pLmNhbGwoYXJyKTsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIGNzc1dpdGhNYXBwaW5nVG9TdHJpbmcoaXRlbSkge1xuICB2YXIgX2l0ZW0gPSBfc2xpY2VkVG9BcnJheShpdGVtLCA0KSxcbiAgICAgIGNvbnRlbnQgPSBfaXRlbVsxXSxcbiAgICAgIGNzc01hcHBpbmcgPSBfaXRlbVszXTtcblxuICBpZiAoIWNzc01hcHBpbmcpIHtcbiAgICByZXR1cm4gY29udGVudDtcbiAgfVxuXG4gIGlmICh0eXBlb2YgYnRvYSA9PT0gXCJmdW5jdGlvblwiKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVuZGVmXG4gICAgdmFyIGJhc2U2NCA9IGJ0b2EodW5lc2NhcGUoZW5jb2RlVVJJQ29tcG9uZW50KEpTT04uc3RyaW5naWZ5KGNzc01hcHBpbmcpKSkpO1xuICAgIHZhciBkYXRhID0gXCJzb3VyY2VNYXBwaW5nVVJMPWRhdGE6YXBwbGljYXRpb24vanNvbjtjaGFyc2V0PXV0Zi04O2Jhc2U2NCxcIi5jb25jYXQoYmFzZTY0KTtcbiAgICB2YXIgc291cmNlTWFwcGluZyA9IFwiLyojIFwiLmNvbmNhdChkYXRhLCBcIiAqL1wiKTtcbiAgICB2YXIgc291cmNlVVJMcyA9IGNzc01hcHBpbmcuc291cmNlcy5tYXAoZnVuY3Rpb24gKHNvdXJjZSkge1xuICAgICAgcmV0dXJuIFwiLyojIHNvdXJjZVVSTD1cIi5jb25jYXQoY3NzTWFwcGluZy5zb3VyY2VSb290IHx8IFwiXCIpLmNvbmNhdChzb3VyY2UsIFwiICovXCIpO1xuICAgIH0pO1xuICAgIHJldHVybiBbY29udGVudF0uY29uY2F0KHNvdXJjZVVSTHMpLmNvbmNhdChbc291cmNlTWFwcGluZ10pLmpvaW4oXCJcXG5cIik7XG4gIH1cblxuICByZXR1cm4gW2NvbnRlbnRdLmpvaW4oXCJcXG5cIik7XG59OyIsIlwidXNlIHN0cmljdFwiO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uICh1cmwsIG9wdGlvbnMpIHtcbiAgaWYgKCFvcHRpb25zKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgb3B0aW9ucyA9IHt9O1xuICB9XG5cbiAgaWYgKCF1cmwpIHtcbiAgICByZXR1cm4gdXJsO1xuICB9IC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bmRlcnNjb3JlLWRhbmdsZSwgbm8tcGFyYW0tcmVhc3NpZ25cblxuXG4gIHVybCA9IFN0cmluZyh1cmwuX19lc01vZHVsZSA/IHVybC5kZWZhdWx0IDogdXJsKTsgLy8gSWYgdXJsIGlzIGFscmVhZHkgd3JhcHBlZCBpbiBxdW90ZXMsIHJlbW92ZSB0aGVtXG5cbiAgaWYgKC9eWydcIl0uKlsnXCJdJC8udGVzdCh1cmwpKSB7XG4gICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXBhcmFtLXJlYXNzaWduXG4gICAgdXJsID0gdXJsLnNsaWNlKDEsIC0xKTtcbiAgfVxuXG4gIGlmIChvcHRpb25zLmhhc2gpIHtcbiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tcGFyYW0tcmVhc3NpZ25cbiAgICB1cmwgKz0gb3B0aW9ucy5oYXNoO1xuICB9IC8vIFNob3VsZCB1cmwgYmUgd3JhcHBlZD9cbiAgLy8gU2VlIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3MtdmFsdWVzLTMvI3VybHNcblxuXG4gIGlmICgvW1wiJygpIFxcdFxcbl18KCUyMCkvLnRlc3QodXJsKSB8fCBvcHRpb25zLm5lZWRRdW90ZXMpIHtcbiAgICByZXR1cm4gXCJcXFwiXCIuY29uY2F0KHVybC5yZXBsYWNlKC9cIi9nLCAnXFxcXFwiJykucmVwbGFjZSgvXFxuL2csIFwiXFxcXG5cIiksIFwiXFxcIlwiKTtcbiAgfVxuXG4gIHJldHVybiB1cmw7XG59OyIsIi8qIGVzbGludC1lbnYgYnJvd3NlciAqL1xuXG4vKipcbiAqIFRoaXMgaXMgdGhlIHdlYiBicm93c2VyIGltcGxlbWVudGF0aW9uIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5leHBvcnRzLmZvcm1hdEFyZ3MgPSBmb3JtYXRBcmdzO1xuZXhwb3J0cy5zYXZlID0gc2F2ZTtcbmV4cG9ydHMubG9hZCA9IGxvYWQ7XG5leHBvcnRzLnVzZUNvbG9ycyA9IHVzZUNvbG9ycztcbmV4cG9ydHMuc3RvcmFnZSA9IGxvY2Fsc3RvcmFnZSgpO1xuZXhwb3J0cy5kZXN0cm95ID0gKCgpID0+IHtcblx0bGV0IHdhcm5lZCA9IGZhbHNlO1xuXG5cdHJldHVybiAoKSA9PiB7XG5cdFx0aWYgKCF3YXJuZWQpIHtcblx0XHRcdHdhcm5lZCA9IHRydWU7XG5cdFx0XHRjb25zb2xlLndhcm4oJ0luc3RhbmNlIG1ldGhvZCBgZGVidWcuZGVzdHJveSgpYCBpcyBkZXByZWNhdGVkIGFuZCBubyBsb25nZXIgZG9lcyBhbnl0aGluZy4gSXQgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBuZXh0IG1ham9yIHZlcnNpb24gb2YgYGRlYnVnYC4nKTtcblx0XHR9XG5cdH07XG59KSgpO1xuXG4vKipcbiAqIENvbG9ycy5cbiAqL1xuXG5leHBvcnRzLmNvbG9ycyA9IFtcblx0JyMwMDAwQ0MnLFxuXHQnIzAwMDBGRicsXG5cdCcjMDAzM0NDJyxcblx0JyMwMDMzRkYnLFxuXHQnIzAwNjZDQycsXG5cdCcjMDA2NkZGJyxcblx0JyMwMDk5Q0MnLFxuXHQnIzAwOTlGRicsXG5cdCcjMDBDQzAwJyxcblx0JyMwMENDMzMnLFxuXHQnIzAwQ0M2NicsXG5cdCcjMDBDQzk5Jyxcblx0JyMwMENDQ0MnLFxuXHQnIzAwQ0NGRicsXG5cdCcjMzMwMENDJyxcblx0JyMzMzAwRkYnLFxuXHQnIzMzMzNDQycsXG5cdCcjMzMzM0ZGJyxcblx0JyMzMzY2Q0MnLFxuXHQnIzMzNjZGRicsXG5cdCcjMzM5OUNDJyxcblx0JyMzMzk5RkYnLFxuXHQnIzMzQ0MwMCcsXG5cdCcjMzNDQzMzJyxcblx0JyMzM0NDNjYnLFxuXHQnIzMzQ0M5OScsXG5cdCcjMzNDQ0NDJyxcblx0JyMzM0NDRkYnLFxuXHQnIzY2MDBDQycsXG5cdCcjNjYwMEZGJyxcblx0JyM2NjMzQ0MnLFxuXHQnIzY2MzNGRicsXG5cdCcjNjZDQzAwJyxcblx0JyM2NkNDMzMnLFxuXHQnIzk5MDBDQycsXG5cdCcjOTkwMEZGJyxcblx0JyM5OTMzQ0MnLFxuXHQnIzk5MzNGRicsXG5cdCcjOTlDQzAwJyxcblx0JyM5OUNDMzMnLFxuXHQnI0NDMDAwMCcsXG5cdCcjQ0MwMDMzJyxcblx0JyNDQzAwNjYnLFxuXHQnI0NDMDA5OScsXG5cdCcjQ0MwMENDJyxcblx0JyNDQzAwRkYnLFxuXHQnI0NDMzMwMCcsXG5cdCcjQ0MzMzMzJyxcblx0JyNDQzMzNjYnLFxuXHQnI0NDMzM5OScsXG5cdCcjQ0MzM0NDJyxcblx0JyNDQzMzRkYnLFxuXHQnI0NDNjYwMCcsXG5cdCcjQ0M2NjMzJyxcblx0JyNDQzk5MDAnLFxuXHQnI0NDOTkzMycsXG5cdCcjQ0NDQzAwJyxcblx0JyNDQ0NDMzMnLFxuXHQnI0ZGMDAwMCcsXG5cdCcjRkYwMDMzJyxcblx0JyNGRjAwNjYnLFxuXHQnI0ZGMDA5OScsXG5cdCcjRkYwMENDJyxcblx0JyNGRjAwRkYnLFxuXHQnI0ZGMzMwMCcsXG5cdCcjRkYzMzMzJyxcblx0JyNGRjMzNjYnLFxuXHQnI0ZGMzM5OScsXG5cdCcjRkYzM0NDJyxcblx0JyNGRjMzRkYnLFxuXHQnI0ZGNjYwMCcsXG5cdCcjRkY2NjMzJyxcblx0JyNGRjk5MDAnLFxuXHQnI0ZGOTkzMycsXG5cdCcjRkZDQzAwJyxcblx0JyNGRkNDMzMnXG5dO1xuXG4vKipcbiAqIEN1cnJlbnRseSBvbmx5IFdlYktpdC1iYXNlZCBXZWIgSW5zcGVjdG9ycywgRmlyZWZveCA+PSB2MzEsXG4gKiBhbmQgdGhlIEZpcmVidWcgZXh0ZW5zaW9uIChhbnkgRmlyZWZveCB2ZXJzaW9uKSBhcmUga25vd25cbiAqIHRvIHN1cHBvcnQgXCIlY1wiIENTUyBjdXN0b21pemF0aW9ucy5cbiAqXG4gKiBUT0RPOiBhZGQgYSBgbG9jYWxTdG9yYWdlYCB2YXJpYWJsZSB0byBleHBsaWNpdGx5IGVuYWJsZS9kaXNhYmxlIGNvbG9yc1xuICovXG5cbi8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBjb21wbGV4aXR5XG5mdW5jdGlvbiB1c2VDb2xvcnMoKSB7XG5cdC8vIE5COiBJbiBhbiBFbGVjdHJvbiBwcmVsb2FkIHNjcmlwdCwgZG9jdW1lbnQgd2lsbCBiZSBkZWZpbmVkIGJ1dCBub3QgZnVsbHlcblx0Ly8gaW5pdGlhbGl6ZWQuIFNpbmNlIHdlIGtub3cgd2UncmUgaW4gQ2hyb21lLCB3ZSdsbCBqdXN0IGRldGVjdCB0aGlzIGNhc2Vcblx0Ly8gZXhwbGljaXRseVxuXHRpZiAodHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCcgJiYgd2luZG93LnByb2Nlc3MgJiYgKHdpbmRvdy5wcm9jZXNzLnR5cGUgPT09ICdyZW5kZXJlcicgfHwgd2luZG93LnByb2Nlc3MuX19ud2pzKSkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0Ly8gSW50ZXJuZXQgRXhwbG9yZXIgYW5kIEVkZ2UgZG8gbm90IHN1cHBvcnQgY29sb3JzLlxuXHRpZiAodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goLyhlZGdlfHRyaWRlbnQpXFwvKFxcZCspLykpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cblxuXHQvLyBJcyB3ZWJraXQ/IGh0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9hLzE2NDU5NjA2LzM3Njc3M1xuXHQvLyBkb2N1bWVudCBpcyB1bmRlZmluZWQgaW4gcmVhY3QtbmF0aXZlOiBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svcmVhY3QtbmF0aXZlL3B1bGwvMTYzMlxuXHRyZXR1cm4gKHR5cGVvZiBkb2N1bWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50ICYmIGRvY3VtZW50LmRvY3VtZW50RWxlbWVudC5zdHlsZSAmJiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc3R5bGUuV2Via2l0QXBwZWFyYW5jZSkgfHxcblx0XHQvLyBJcyBmaXJlYnVnPyBodHRwOi8vc3RhY2tvdmVyZmxvdy5jb20vYS8zOTgxMjAvMzc2NzczXG5cdFx0KHR5cGVvZiB3aW5kb3cgIT09ICd1bmRlZmluZWQnICYmIHdpbmRvdy5jb25zb2xlICYmICh3aW5kb3cuY29uc29sZS5maXJlYnVnIHx8ICh3aW5kb3cuY29uc29sZS5leGNlcHRpb24gJiYgd2luZG93LmNvbnNvbGUudGFibGUpKSkgfHxcblx0XHQvLyBJcyBmaXJlZm94ID49IHYzMT9cblx0XHQvLyBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1Rvb2xzL1dlYl9Db25zb2xlI1N0eWxpbmdfbWVzc2FnZXNcblx0XHQodHlwZW9mIG5hdmlnYXRvciAhPT0gJ3VuZGVmaW5lZCcgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudCAmJiBuYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCkubWF0Y2goL2ZpcmVmb3hcXC8oXFxkKykvKSAmJiBwYXJzZUludChSZWdFeHAuJDEsIDEwKSA+PSAzMSkgfHxcblx0XHQvLyBEb3VibGUgY2hlY2sgd2Via2l0IGluIHVzZXJBZ2VudCBqdXN0IGluIGNhc2Ugd2UgYXJlIGluIGEgd29ya2VyXG5cdFx0KHR5cGVvZiBuYXZpZ2F0b3IgIT09ICd1bmRlZmluZWQnICYmIG5hdmlnYXRvci51c2VyQWdlbnQgJiYgbmF2aWdhdG9yLnVzZXJBZ2VudC50b0xvd2VyQ2FzZSgpLm1hdGNoKC9hcHBsZXdlYmtpdFxcLyhcXGQrKS8pKTtcbn1cblxuLyoqXG4gKiBDb2xvcml6ZSBsb2cgYXJndW1lbnRzIGlmIGVuYWJsZWQuXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5mdW5jdGlvbiBmb3JtYXRBcmdzKGFyZ3MpIHtcblx0YXJnc1swXSA9ICh0aGlzLnVzZUNvbG9ycyA/ICclYycgOiAnJykgK1xuXHRcdHRoaXMubmFtZXNwYWNlICtcblx0XHQodGhpcy51c2VDb2xvcnMgPyAnICVjJyA6ICcgJykgK1xuXHRcdGFyZ3NbMF0gK1xuXHRcdCh0aGlzLnVzZUNvbG9ycyA/ICclYyAnIDogJyAnKSArXG5cdFx0JysnICsgbW9kdWxlLmV4cG9ydHMuaHVtYW5pemUodGhpcy5kaWZmKTtcblxuXHRpZiAoIXRoaXMudXNlQ29sb3JzKSB7XG5cdFx0cmV0dXJuO1xuXHR9XG5cblx0Y29uc3QgYyA9ICdjb2xvcjogJyArIHRoaXMuY29sb3I7XG5cdGFyZ3Muc3BsaWNlKDEsIDAsIGMsICdjb2xvcjogaW5oZXJpdCcpO1xuXG5cdC8vIFRoZSBmaW5hbCBcIiVjXCIgaXMgc29tZXdoYXQgdHJpY2t5LCBiZWNhdXNlIHRoZXJlIGNvdWxkIGJlIG90aGVyXG5cdC8vIGFyZ3VtZW50cyBwYXNzZWQgZWl0aGVyIGJlZm9yZSBvciBhZnRlciB0aGUgJWMsIHNvIHdlIG5lZWQgdG9cblx0Ly8gZmlndXJlIG91dCB0aGUgY29ycmVjdCBpbmRleCB0byBpbnNlcnQgdGhlIENTUyBpbnRvXG5cdGxldCBpbmRleCA9IDA7XG5cdGxldCBsYXN0QyA9IDA7XG5cdGFyZ3NbMF0ucmVwbGFjZSgvJVthLXpBLVolXS9nLCBtYXRjaCA9PiB7XG5cdFx0aWYgKG1hdGNoID09PSAnJSUnKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXHRcdGluZGV4Kys7XG5cdFx0aWYgKG1hdGNoID09PSAnJWMnKSB7XG5cdFx0XHQvLyBXZSBvbmx5IGFyZSBpbnRlcmVzdGVkIGluIHRoZSAqbGFzdCogJWNcblx0XHRcdC8vICh0aGUgdXNlciBtYXkgaGF2ZSBwcm92aWRlZCB0aGVpciBvd24pXG5cdFx0XHRsYXN0QyA9IGluZGV4O1xuXHRcdH1cblx0fSk7XG5cblx0YXJncy5zcGxpY2UobGFzdEMsIDAsIGMpO1xufVxuXG4vKipcbiAqIEludm9rZXMgYGNvbnNvbGUuZGVidWcoKWAgd2hlbiBhdmFpbGFibGUuXG4gKiBOby1vcCB3aGVuIGBjb25zb2xlLmRlYnVnYCBpcyBub3QgYSBcImZ1bmN0aW9uXCIuXG4gKiBJZiBgY29uc29sZS5kZWJ1Z2AgaXMgbm90IGF2YWlsYWJsZSwgZmFsbHMgYmFja1xuICogdG8gYGNvbnNvbGUubG9nYC5cbiAqXG4gKiBAYXBpIHB1YmxpY1xuICovXG5leHBvcnRzLmxvZyA9IGNvbnNvbGUuZGVidWcgfHwgY29uc29sZS5sb2cgfHwgKCgpID0+IHt9KTtcblxuLyoqXG4gKiBTYXZlIGBuYW1lc3BhY2VzYC5cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuICogQGFwaSBwcml2YXRlXG4gKi9cbmZ1bmN0aW9uIHNhdmUobmFtZXNwYWNlcykge1xuXHR0cnkge1xuXHRcdGlmIChuYW1lc3BhY2VzKSB7XG5cdFx0XHRleHBvcnRzLnN0b3JhZ2Uuc2V0SXRlbSgnZGVidWcnLCBuYW1lc3BhY2VzKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0ZXhwb3J0cy5zdG9yYWdlLnJlbW92ZUl0ZW0oJ2RlYnVnJyk7XG5cdFx0fVxuXHR9IGNhdGNoIChlcnJvcikge1xuXHRcdC8vIFN3YWxsb3dcblx0XHQvLyBYWFggKEBRaXgtKSBzaG91bGQgd2UgYmUgbG9nZ2luZyB0aGVzZT9cblx0fVxufVxuXG4vKipcbiAqIExvYWQgYG5hbWVzcGFjZXNgLlxuICpcbiAqIEByZXR1cm4ge1N0cmluZ30gcmV0dXJucyB0aGUgcHJldmlvdXNseSBwZXJzaXN0ZWQgZGVidWcgbW9kZXNcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5mdW5jdGlvbiBsb2FkKCkge1xuXHRsZXQgcjtcblx0dHJ5IHtcblx0XHRyID0gZXhwb3J0cy5zdG9yYWdlLmdldEl0ZW0oJ2RlYnVnJyk7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0Ly8gU3dhbGxvd1xuXHRcdC8vIFhYWCAoQFFpeC0pIHNob3VsZCB3ZSBiZSBsb2dnaW5nIHRoZXNlP1xuXHR9XG5cblx0Ly8gSWYgZGVidWcgaXNuJ3Qgc2V0IGluIExTLCBhbmQgd2UncmUgaW4gRWxlY3Ryb24sIHRyeSB0byBsb2FkICRERUJVR1xuXHRpZiAoIXIgJiYgdHlwZW9mIHByb2Nlc3MgIT09ICd1bmRlZmluZWQnICYmICdlbnYnIGluIHByb2Nlc3MpIHtcblx0XHRyID0gcHJvY2Vzcy5lbnYuREVCVUc7XG5cdH1cblxuXHRyZXR1cm4gcjtcbn1cblxuLyoqXG4gKiBMb2NhbHN0b3JhZ2UgYXR0ZW1wdHMgdG8gcmV0dXJuIHRoZSBsb2NhbHN0b3JhZ2UuXG4gKlxuICogVGhpcyBpcyBuZWNlc3NhcnkgYmVjYXVzZSBzYWZhcmkgdGhyb3dzXG4gKiB3aGVuIGEgdXNlciBkaXNhYmxlcyBjb29raWVzL2xvY2Fsc3RvcmFnZVxuICogYW5kIHlvdSBhdHRlbXB0IHRvIGFjY2VzcyBpdC5cbiAqXG4gKiBAcmV0dXJuIHtMb2NhbFN0b3JhZ2V9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBsb2NhbHN0b3JhZ2UoKSB7XG5cdHRyeSB7XG5cdFx0Ly8gVFZNTEtpdCAoQXBwbGUgVFYgSlMgUnVudGltZSkgZG9lcyBub3QgaGF2ZSBhIHdpbmRvdyBvYmplY3QsIGp1c3QgbG9jYWxTdG9yYWdlIGluIHRoZSBnbG9iYWwgY29udGV4dFxuXHRcdC8vIFRoZSBCcm93c2VyIGFsc28gaGFzIGxvY2FsU3RvcmFnZSBpbiB0aGUgZ2xvYmFsIGNvbnRleHQuXG5cdFx0cmV0dXJuIGxvY2FsU3RvcmFnZTtcblx0fSBjYXRjaCAoZXJyb3IpIHtcblx0XHQvLyBTd2FsbG93XG5cdFx0Ly8gWFhYIChAUWl4LSkgc2hvdWxkIHdlIGJlIGxvZ2dpbmcgdGhlc2U/XG5cdH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCcuL2NvbW1vbicpKGV4cG9ydHMpO1xuXG5jb25zdCB7Zm9ybWF0dGVyc30gPSBtb2R1bGUuZXhwb3J0cztcblxuLyoqXG4gKiBNYXAgJWogdG8gYEpTT04uc3RyaW5naWZ5KClgLCBzaW5jZSBubyBXZWIgSW5zcGVjdG9ycyBkbyB0aGF0IGJ5IGRlZmF1bHQuXG4gKi9cblxuZm9ybWF0dGVycy5qID0gZnVuY3Rpb24gKHYpIHtcblx0dHJ5IHtcblx0XHRyZXR1cm4gSlNPTi5zdHJpbmdpZnkodik7XG5cdH0gY2F0Y2ggKGVycm9yKSB7XG5cdFx0cmV0dXJuICdbVW5leHBlY3RlZEpTT05QYXJzZUVycm9yXTogJyArIGVycm9yLm1lc3NhZ2U7XG5cdH1cbn07XG4iLCJcbi8qKlxuICogVGhpcyBpcyB0aGUgY29tbW9uIGxvZ2ljIGZvciBib3RoIHRoZSBOb2RlLmpzIGFuZCB3ZWIgYnJvd3NlclxuICogaW1wbGVtZW50YXRpb25zIG9mIGBkZWJ1ZygpYC5cbiAqL1xuXG5mdW5jdGlvbiBzZXR1cChlbnYpIHtcblx0Y3JlYXRlRGVidWcuZGVidWcgPSBjcmVhdGVEZWJ1Zztcblx0Y3JlYXRlRGVidWcuZGVmYXVsdCA9IGNyZWF0ZURlYnVnO1xuXHRjcmVhdGVEZWJ1Zy5jb2VyY2UgPSBjb2VyY2U7XG5cdGNyZWF0ZURlYnVnLmRpc2FibGUgPSBkaXNhYmxlO1xuXHRjcmVhdGVEZWJ1Zy5lbmFibGUgPSBlbmFibGU7XG5cdGNyZWF0ZURlYnVnLmVuYWJsZWQgPSBlbmFibGVkO1xuXHRjcmVhdGVEZWJ1Zy5odW1hbml6ZSA9IHJlcXVpcmUoJ21zJyk7XG5cdGNyZWF0ZURlYnVnLmRlc3Ryb3kgPSBkZXN0cm95O1xuXG5cdE9iamVjdC5rZXlzKGVudikuZm9yRWFjaChrZXkgPT4ge1xuXHRcdGNyZWF0ZURlYnVnW2tleV0gPSBlbnZba2V5XTtcblx0fSk7XG5cblx0LyoqXG5cdCogVGhlIGN1cnJlbnRseSBhY3RpdmUgZGVidWcgbW9kZSBuYW1lcywgYW5kIG5hbWVzIHRvIHNraXAuXG5cdCovXG5cblx0Y3JlYXRlRGVidWcubmFtZXMgPSBbXTtcblx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHQvKipcblx0KiBNYXAgb2Ygc3BlY2lhbCBcIiVuXCIgaGFuZGxpbmcgZnVuY3Rpb25zLCBmb3IgdGhlIGRlYnVnIFwiZm9ybWF0XCIgYXJndW1lbnQuXG5cdCpcblx0KiBWYWxpZCBrZXkgbmFtZXMgYXJlIGEgc2luZ2xlLCBsb3dlciBvciB1cHBlci1jYXNlIGxldHRlciwgaS5lLiBcIm5cIiBhbmQgXCJOXCIuXG5cdCovXG5cdGNyZWF0ZURlYnVnLmZvcm1hdHRlcnMgPSB7fTtcblxuXHQvKipcblx0KiBTZWxlY3RzIGEgY29sb3IgZm9yIGEgZGVidWcgbmFtZXNwYWNlXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZSBUaGUgbmFtZXNwYWNlIHN0cmluZyBmb3IgdGhlIGZvciB0aGUgZGVidWcgaW5zdGFuY2UgdG8gYmUgY29sb3JlZFxuXHQqIEByZXR1cm4ge051bWJlcnxTdHJpbmd9IEFuIEFOU0kgY29sb3IgY29kZSBmb3IgdGhlIGdpdmVuIG5hbWVzcGFjZVxuXHQqIEBhcGkgcHJpdmF0ZVxuXHQqL1xuXHRmdW5jdGlvbiBzZWxlY3RDb2xvcihuYW1lc3BhY2UpIHtcblx0XHRsZXQgaGFzaCA9IDA7XG5cblx0XHRmb3IgKGxldCBpID0gMDsgaSA8IG5hbWVzcGFjZS5sZW5ndGg7IGkrKykge1xuXHRcdFx0aGFzaCA9ICgoaGFzaCA8PCA1KSAtIGhhc2gpICsgbmFtZXNwYWNlLmNoYXJDb2RlQXQoaSk7XG5cdFx0XHRoYXNoIHw9IDA7IC8vIENvbnZlcnQgdG8gMzJiaXQgaW50ZWdlclxuXHRcdH1cblxuXHRcdHJldHVybiBjcmVhdGVEZWJ1Zy5jb2xvcnNbTWF0aC5hYnMoaGFzaCkgJSBjcmVhdGVEZWJ1Zy5jb2xvcnMubGVuZ3RoXTtcblx0fVxuXHRjcmVhdGVEZWJ1Zy5zZWxlY3RDb2xvciA9IHNlbGVjdENvbG9yO1xuXG5cdC8qKlxuXHQqIENyZWF0ZSBhIGRlYnVnZ2VyIHdpdGggdGhlIGdpdmVuIGBuYW1lc3BhY2VgLlxuXHQqXG5cdCogQHBhcmFtIHtTdHJpbmd9IG5hbWVzcGFjZVxuXHQqIEByZXR1cm4ge0Z1bmN0aW9ufVxuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGNyZWF0ZURlYnVnKG5hbWVzcGFjZSkge1xuXHRcdGxldCBwcmV2VGltZTtcblx0XHRsZXQgZW5hYmxlT3ZlcnJpZGUgPSBudWxsO1xuXHRcdGxldCBuYW1lc3BhY2VzQ2FjaGU7XG5cdFx0bGV0IGVuYWJsZWRDYWNoZTtcblxuXHRcdGZ1bmN0aW9uIGRlYnVnKC4uLmFyZ3MpIHtcblx0XHRcdC8vIERpc2FibGVkP1xuXHRcdFx0aWYgKCFkZWJ1Zy5lbmFibGVkKSB7XG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Y29uc3Qgc2VsZiA9IGRlYnVnO1xuXG5cdFx0XHQvLyBTZXQgYGRpZmZgIHRpbWVzdGFtcFxuXHRcdFx0Y29uc3QgY3VyciA9IE51bWJlcihuZXcgRGF0ZSgpKTtcblx0XHRcdGNvbnN0IG1zID0gY3VyciAtIChwcmV2VGltZSB8fCBjdXJyKTtcblx0XHRcdHNlbGYuZGlmZiA9IG1zO1xuXHRcdFx0c2VsZi5wcmV2ID0gcHJldlRpbWU7XG5cdFx0XHRzZWxmLmN1cnIgPSBjdXJyO1xuXHRcdFx0cHJldlRpbWUgPSBjdXJyO1xuXG5cdFx0XHRhcmdzWzBdID0gY3JlYXRlRGVidWcuY29lcmNlKGFyZ3NbMF0pO1xuXG5cdFx0XHRpZiAodHlwZW9mIGFyZ3NbMF0gIT09ICdzdHJpbmcnKSB7XG5cdFx0XHRcdC8vIEFueXRoaW5nIGVsc2UgbGV0J3MgaW5zcGVjdCB3aXRoICVPXG5cdFx0XHRcdGFyZ3MudW5zaGlmdCgnJU8nKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQXBwbHkgYW55IGBmb3JtYXR0ZXJzYCB0cmFuc2Zvcm1hdGlvbnNcblx0XHRcdGxldCBpbmRleCA9IDA7XG5cdFx0XHRhcmdzWzBdID0gYXJnc1swXS5yZXBsYWNlKC8lKFthLXpBLVolXSkvZywgKG1hdGNoLCBmb3JtYXQpID0+IHtcblx0XHRcdFx0Ly8gSWYgd2UgZW5jb3VudGVyIGFuIGVzY2FwZWQgJSB0aGVuIGRvbid0IGluY3JlYXNlIHRoZSBhcnJheSBpbmRleFxuXHRcdFx0XHRpZiAobWF0Y2ggPT09ICclJScpIHtcblx0XHRcdFx0XHRyZXR1cm4gJyUnO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGluZGV4Kys7XG5cdFx0XHRcdGNvbnN0IGZvcm1hdHRlciA9IGNyZWF0ZURlYnVnLmZvcm1hdHRlcnNbZm9ybWF0XTtcblx0XHRcdFx0aWYgKHR5cGVvZiBmb3JtYXR0ZXIgPT09ICdmdW5jdGlvbicpIHtcblx0XHRcdFx0XHRjb25zdCB2YWwgPSBhcmdzW2luZGV4XTtcblx0XHRcdFx0XHRtYXRjaCA9IGZvcm1hdHRlci5jYWxsKHNlbGYsIHZhbCk7XG5cblx0XHRcdFx0XHQvLyBOb3cgd2UgbmVlZCB0byByZW1vdmUgYGFyZ3NbaW5kZXhdYCBzaW5jZSBpdCdzIGlubGluZWQgaW4gdGhlIGBmb3JtYXRgXG5cdFx0XHRcdFx0YXJncy5zcGxpY2UoaW5kZXgsIDEpO1xuXHRcdFx0XHRcdGluZGV4LS07XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdFx0fSk7XG5cblx0XHRcdC8vIEFwcGx5IGVudi1zcGVjaWZpYyBmb3JtYXR0aW5nIChjb2xvcnMsIGV0Yy4pXG5cdFx0XHRjcmVhdGVEZWJ1Zy5mb3JtYXRBcmdzLmNhbGwoc2VsZiwgYXJncyk7XG5cblx0XHRcdGNvbnN0IGxvZ0ZuID0gc2VsZi5sb2cgfHwgY3JlYXRlRGVidWcubG9nO1xuXHRcdFx0bG9nRm4uYXBwbHkoc2VsZiwgYXJncyk7XG5cdFx0fVxuXG5cdFx0ZGVidWcubmFtZXNwYWNlID0gbmFtZXNwYWNlO1xuXHRcdGRlYnVnLnVzZUNvbG9ycyA9IGNyZWF0ZURlYnVnLnVzZUNvbG9ycygpO1xuXHRcdGRlYnVnLmNvbG9yID0gY3JlYXRlRGVidWcuc2VsZWN0Q29sb3IobmFtZXNwYWNlKTtcblx0XHRkZWJ1Zy5leHRlbmQgPSBleHRlbmQ7XG5cdFx0ZGVidWcuZGVzdHJveSA9IGNyZWF0ZURlYnVnLmRlc3Ryb3k7IC8vIFhYWCBUZW1wb3JhcnkuIFdpbGwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXG5cdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGRlYnVnLCAnZW5hYmxlZCcsIHtcblx0XHRcdGVudW1lcmFibGU6IHRydWUsXG5cdFx0XHRjb25maWd1cmFibGU6IGZhbHNlLFxuXHRcdFx0Z2V0OiAoKSA9PiB7XG5cdFx0XHRcdGlmIChlbmFibGVPdmVycmlkZSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdHJldHVybiBlbmFibGVPdmVycmlkZTtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAobmFtZXNwYWNlc0NhY2hlICE9PSBjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzKSB7XG5cdFx0XHRcdFx0bmFtZXNwYWNlc0NhY2hlID0gY3JlYXRlRGVidWcubmFtZXNwYWNlcztcblx0XHRcdFx0XHRlbmFibGVkQ2FjaGUgPSBjcmVhdGVEZWJ1Zy5lbmFibGVkKG5hbWVzcGFjZSk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gZW5hYmxlZENhY2hlO1xuXHRcdFx0fSxcblx0XHRcdHNldDogdiA9PiB7XG5cdFx0XHRcdGVuYWJsZU92ZXJyaWRlID0gdjtcblx0XHRcdH1cblx0XHR9KTtcblxuXHRcdC8vIEVudi1zcGVjaWZpYyBpbml0aWFsaXphdGlvbiBsb2dpYyBmb3IgZGVidWcgaW5zdGFuY2VzXG5cdFx0aWYgKHR5cGVvZiBjcmVhdGVEZWJ1Zy5pbml0ID09PSAnZnVuY3Rpb24nKSB7XG5cdFx0XHRjcmVhdGVEZWJ1Zy5pbml0KGRlYnVnKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gZGVidWc7XG5cdH1cblxuXHRmdW5jdGlvbiBleHRlbmQobmFtZXNwYWNlLCBkZWxpbWl0ZXIpIHtcblx0XHRjb25zdCBuZXdEZWJ1ZyA9IGNyZWF0ZURlYnVnKHRoaXMubmFtZXNwYWNlICsgKHR5cGVvZiBkZWxpbWl0ZXIgPT09ICd1bmRlZmluZWQnID8gJzonIDogZGVsaW1pdGVyKSArIG5hbWVzcGFjZSk7XG5cdFx0bmV3RGVidWcubG9nID0gdGhpcy5sb2c7XG5cdFx0cmV0dXJuIG5ld0RlYnVnO1xuXHR9XG5cblx0LyoqXG5cdCogRW5hYmxlcyBhIGRlYnVnIG1vZGUgYnkgbmFtZXNwYWNlcy4gVGhpcyBjYW4gaW5jbHVkZSBtb2Rlc1xuXHQqIHNlcGFyYXRlZCBieSBhIGNvbG9uIGFuZCB3aWxkY2FyZHMuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGVuYWJsZShuYW1lc3BhY2VzKSB7XG5cdFx0Y3JlYXRlRGVidWcuc2F2ZShuYW1lc3BhY2VzKTtcblx0XHRjcmVhdGVEZWJ1Zy5uYW1lc3BhY2VzID0gbmFtZXNwYWNlcztcblxuXHRcdGNyZWF0ZURlYnVnLm5hbWVzID0gW107XG5cdFx0Y3JlYXRlRGVidWcuc2tpcHMgPSBbXTtcblxuXHRcdGxldCBpO1xuXHRcdGNvbnN0IHNwbGl0ID0gKHR5cGVvZiBuYW1lc3BhY2VzID09PSAnc3RyaW5nJyA/IG5hbWVzcGFjZXMgOiAnJykuc3BsaXQoL1tcXHMsXSsvKTtcblx0XHRjb25zdCBsZW4gPSBzcGxpdC5sZW5ndGg7XG5cblx0XHRmb3IgKGkgPSAwOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmICghc3BsaXRbaV0pIHtcblx0XHRcdFx0Ly8gaWdub3JlIGVtcHR5IHN0cmluZ3Ncblx0XHRcdFx0Y29udGludWU7XG5cdFx0XHR9XG5cblx0XHRcdG5hbWVzcGFjZXMgPSBzcGxpdFtpXS5yZXBsYWNlKC9cXCovZywgJy4qPycpO1xuXG5cdFx0XHRpZiAobmFtZXNwYWNlc1swXSA9PT0gJy0nKSB7XG5cdFx0XHRcdGNyZWF0ZURlYnVnLnNraXBzLnB1c2gobmV3IFJlZ0V4cCgnXicgKyBuYW1lc3BhY2VzLnN1YnN0cigxKSArICckJykpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y3JlYXRlRGVidWcubmFtZXMucHVzaChuZXcgUmVnRXhwKCdeJyArIG5hbWVzcGFjZXMgKyAnJCcpKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvKipcblx0KiBEaXNhYmxlIGRlYnVnIG91dHB1dC5cblx0KlxuXHQqIEByZXR1cm4ge1N0cmluZ30gbmFtZXNwYWNlc1xuXHQqIEBhcGkgcHVibGljXG5cdCovXG5cdGZ1bmN0aW9uIGRpc2FibGUoKSB7XG5cdFx0Y29uc3QgbmFtZXNwYWNlcyA9IFtcblx0XHRcdC4uLmNyZWF0ZURlYnVnLm5hbWVzLm1hcCh0b05hbWVzcGFjZSksXG5cdFx0XHQuLi5jcmVhdGVEZWJ1Zy5za2lwcy5tYXAodG9OYW1lc3BhY2UpLm1hcChuYW1lc3BhY2UgPT4gJy0nICsgbmFtZXNwYWNlKVxuXHRcdF0uam9pbignLCcpO1xuXHRcdGNyZWF0ZURlYnVnLmVuYWJsZSgnJyk7XG5cdFx0cmV0dXJuIG5hbWVzcGFjZXM7XG5cdH1cblxuXHQvKipcblx0KiBSZXR1cm5zIHRydWUgaWYgdGhlIGdpdmVuIG1vZGUgbmFtZSBpcyBlbmFibGVkLCBmYWxzZSBvdGhlcndpc2UuXG5cdCpcblx0KiBAcGFyYW0ge1N0cmluZ30gbmFtZVxuXHQqIEByZXR1cm4ge0Jvb2xlYW59XG5cdCogQGFwaSBwdWJsaWNcblx0Ki9cblx0ZnVuY3Rpb24gZW5hYmxlZChuYW1lKSB7XG5cdFx0aWYgKG5hbWVbbmFtZS5sZW5ndGggLSAxXSA9PT0gJyonKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHRsZXQgaTtcblx0XHRsZXQgbGVuO1xuXG5cdFx0Zm9yIChpID0gMCwgbGVuID0gY3JlYXRlRGVidWcuc2tpcHMubGVuZ3RoOyBpIDwgbGVuOyBpKyspIHtcblx0XHRcdGlmIChjcmVhdGVEZWJ1Zy5za2lwc1tpXS50ZXN0KG5hbWUpKSB7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRmb3IgKGkgPSAwLCBsZW4gPSBjcmVhdGVEZWJ1Zy5uYW1lcy5sZW5ndGg7IGkgPCBsZW47IGkrKykge1xuXHRcdFx0aWYgKGNyZWF0ZURlYnVnLm5hbWVzW2ldLnRlc3QobmFtZSkpIHtcblx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0LyoqXG5cdCogQ29udmVydCByZWdleHAgdG8gbmFtZXNwYWNlXG5cdCpcblx0KiBAcGFyYW0ge1JlZ0V4cH0gcmVneGVwXG5cdCogQHJldHVybiB7U3RyaW5nfSBuYW1lc3BhY2Vcblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gdG9OYW1lc3BhY2UocmVnZXhwKSB7XG5cdFx0cmV0dXJuIHJlZ2V4cC50b1N0cmluZygpXG5cdFx0XHQuc3Vic3RyaW5nKDIsIHJlZ2V4cC50b1N0cmluZygpLmxlbmd0aCAtIDIpXG5cdFx0XHQucmVwbGFjZSgvXFwuXFwqXFw/JC8sICcqJyk7XG5cdH1cblxuXHQvKipcblx0KiBDb2VyY2UgYHZhbGAuXG5cdCpcblx0KiBAcGFyYW0ge01peGVkfSB2YWxcblx0KiBAcmV0dXJuIHtNaXhlZH1cblx0KiBAYXBpIHByaXZhdGVcblx0Ki9cblx0ZnVuY3Rpb24gY29lcmNlKHZhbCkge1xuXHRcdGlmICh2YWwgaW5zdGFuY2VvZiBFcnJvcikge1xuXHRcdFx0cmV0dXJuIHZhbC5zdGFjayB8fCB2YWwubWVzc2FnZTtcblx0XHR9XG5cdFx0cmV0dXJuIHZhbDtcblx0fVxuXG5cdC8qKlxuXHQqIFhYWCBETyBOT1QgVVNFLiBUaGlzIGlzIGEgdGVtcG9yYXJ5IHN0dWIgZnVuY3Rpb24uXG5cdCogWFhYIEl0IFdJTEwgYmUgcmVtb3ZlZCBpbiB0aGUgbmV4dCBtYWpvciByZWxlYXNlLlxuXHQqL1xuXHRmdW5jdGlvbiBkZXN0cm95KCkge1xuXHRcdGNvbnNvbGUud2FybignSW5zdGFuY2UgbWV0aG9kIGBkZWJ1Zy5kZXN0cm95KClgIGlzIGRlcHJlY2F0ZWQgYW5kIG5vIGxvbmdlciBkb2VzIGFueXRoaW5nLiBJdCB3aWxsIGJlIHJlbW92ZWQgaW4gdGhlIG5leHQgbWFqb3IgdmVyc2lvbiBvZiBgZGVidWdgLicpO1xuXHR9XG5cblx0Y3JlYXRlRGVidWcuZW5hYmxlKGNyZWF0ZURlYnVnLmxvYWQoKSk7XG5cblx0cmV0dXJuIGNyZWF0ZURlYnVnO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHNldHVwO1xuIiwibW9kdWxlLmV4cG9ydHMgPSAoKCkgPT4ge1xuICBpZiAodHlwZW9mIHNlbGYgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICByZXR1cm4gc2VsZjtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgcmV0dXJuIHdpbmRvdztcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gRnVuY3Rpb24oXCJyZXR1cm4gdGhpc1wiKSgpO1xuICB9XG59KSgpO1xuIiwiY29uc3QgU29ja2V0ID0gcmVxdWlyZShcIi4vc29ja2V0XCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9ICh1cmksIG9wdHMpID0+IG5ldyBTb2NrZXQodXJpLCBvcHRzKTtcblxuLyoqXG4gKiBFeHBvc2UgZGVwcyBmb3IgbGVnYWN5IGNvbXBhdGliaWxpdHlcbiAqIGFuZCBzdGFuZGFsb25lIGJyb3dzZXIgYWNjZXNzLlxuICovXG5cbm1vZHVsZS5leHBvcnRzLlNvY2tldCA9IFNvY2tldDtcbm1vZHVsZS5leHBvcnRzLnByb3RvY29sID0gU29ja2V0LnByb3RvY29sOyAvLyB0aGlzIGlzIGFuIGludFxubW9kdWxlLmV4cG9ydHMuVHJhbnNwb3J0ID0gcmVxdWlyZShcIi4vdHJhbnNwb3J0XCIpO1xubW9kdWxlLmV4cG9ydHMudHJhbnNwb3J0cyA9IHJlcXVpcmUoXCIuL3RyYW5zcG9ydHMvaW5kZXhcIik7XG5tb2R1bGUuZXhwb3J0cy5wYXJzZXIgPSByZXF1aXJlKFwiZW5naW5lLmlvLXBhcnNlclwiKTtcbiIsImNvbnN0IHRyYW5zcG9ydHMgPSByZXF1aXJlKFwiLi90cmFuc3BvcnRzL2luZGV4XCIpO1xuY29uc3QgRW1pdHRlciA9IHJlcXVpcmUoXCJjb21wb25lbnQtZW1pdHRlclwiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDpzb2NrZXRcIik7XG5jb25zdCBwYXJzZXIgPSByZXF1aXJlKFwiZW5naW5lLmlvLXBhcnNlclwiKTtcbmNvbnN0IHBhcnNldXJpID0gcmVxdWlyZShcInBhcnNldXJpXCIpO1xuY29uc3QgcGFyc2VxcyA9IHJlcXVpcmUoXCJwYXJzZXFzXCIpO1xuXG5jbGFzcyBTb2NrZXQgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgLyoqXG4gICAqIFNvY2tldCBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd8T2JqZWN0fSB1cmkgb3Igb3B0aW9uc1xuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9uc1xuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgY29uc3RydWN0b3IodXJpLCBvcHRzID0ge30pIHtcbiAgICBzdXBlcigpO1xuXG4gICAgaWYgKHVyaSAmJiBcIm9iamVjdFwiID09PSB0eXBlb2YgdXJpKSB7XG4gICAgICBvcHRzID0gdXJpO1xuICAgICAgdXJpID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAodXJpKSB7XG4gICAgICB1cmkgPSBwYXJzZXVyaSh1cmkpO1xuICAgICAgb3B0cy5ob3N0bmFtZSA9IHVyaS5ob3N0O1xuICAgICAgb3B0cy5zZWN1cmUgPSB1cmkucHJvdG9jb2wgPT09IFwiaHR0cHNcIiB8fCB1cmkucHJvdG9jb2wgPT09IFwid3NzXCI7XG4gICAgICBvcHRzLnBvcnQgPSB1cmkucG9ydDtcbiAgICAgIGlmICh1cmkucXVlcnkpIG9wdHMucXVlcnkgPSB1cmkucXVlcnk7XG4gICAgfSBlbHNlIGlmIChvcHRzLmhvc3QpIHtcbiAgICAgIG9wdHMuaG9zdG5hbWUgPSBwYXJzZXVyaShvcHRzLmhvc3QpLmhvc3Q7XG4gICAgfVxuXG4gICAgdGhpcy5zZWN1cmUgPVxuICAgICAgbnVsbCAhPSBvcHRzLnNlY3VyZVxuICAgICAgICA/IG9wdHMuc2VjdXJlXG4gICAgICAgIDogdHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmIFwiaHR0cHM6XCIgPT09IGxvY2F0aW9uLnByb3RvY29sO1xuXG4gICAgaWYgKG9wdHMuaG9zdG5hbWUgJiYgIW9wdHMucG9ydCkge1xuICAgICAgLy8gaWYgbm8gcG9ydCBpcyBzcGVjaWZpZWQgbWFudWFsbHksIHVzZSB0aGUgcHJvdG9jb2wgZGVmYXVsdFxuICAgICAgb3B0cy5wb3J0ID0gdGhpcy5zZWN1cmUgPyBcIjQ0M1wiIDogXCI4MFwiO1xuICAgIH1cblxuICAgIHRoaXMuaG9zdG5hbWUgPVxuICAgICAgb3B0cy5ob3N0bmFtZSB8fFxuICAgICAgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiA/IGxvY2F0aW9uLmhvc3RuYW1lIDogXCJsb2NhbGhvc3RcIik7XG4gICAgdGhpcy5wb3J0ID1cbiAgICAgIG9wdHMucG9ydCB8fFxuICAgICAgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIiAmJiBsb2NhdGlvbi5wb3J0XG4gICAgICAgID8gbG9jYXRpb24ucG9ydFxuICAgICAgICA6IHRoaXMuc2VjdXJlXG4gICAgICAgID8gNDQzXG4gICAgICAgIDogODApO1xuXG4gICAgdGhpcy50cmFuc3BvcnRzID0gb3B0cy50cmFuc3BvcnRzIHx8IFtcInBvbGxpbmdcIiwgXCJ3ZWJzb2NrZXRcIl07XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJcIjtcbiAgICB0aGlzLndyaXRlQnVmZmVyID0gW107XG4gICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcblxuICAgIHRoaXMub3B0cyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7XG4gICAgICAgIHBhdGg6IFwiL2VuZ2luZS5pb1wiLFxuICAgICAgICBhZ2VudDogZmFsc2UsXG4gICAgICAgIHdpdGhDcmVkZW50aWFsczogZmFsc2UsXG4gICAgICAgIHVwZ3JhZGU6IHRydWUsXG4gICAgICAgIGpzb25wOiB0cnVlLFxuICAgICAgICB0aW1lc3RhbXBQYXJhbTogXCJ0XCIsXG4gICAgICAgIHJlbWVtYmVyVXBncmFkZTogZmFsc2UsXG4gICAgICAgIHJlamVjdFVuYXV0aG9yaXplZDogdHJ1ZSxcbiAgICAgICAgcGVyTWVzc2FnZURlZmxhdGU6IHtcbiAgICAgICAgICB0aHJlc2hvbGQ6IDEwMjRcbiAgICAgICAgfSxcbiAgICAgICAgdHJhbnNwb3J0T3B0aW9uczoge30sXG4gICAgICAgIGNsb3NlT25CZWZvcmV1bmxvYWQ6IHRydWVcbiAgICAgIH0sXG4gICAgICBvcHRzXG4gICAgKTtcblxuICAgIHRoaXMub3B0cy5wYXRoID0gdGhpcy5vcHRzLnBhdGgucmVwbGFjZSgvXFwvJC8sIFwiXCIpICsgXCIvXCI7XG5cbiAgICBpZiAodHlwZW9mIHRoaXMub3B0cy5xdWVyeSA9PT0gXCJzdHJpbmdcIikge1xuICAgICAgdGhpcy5vcHRzLnF1ZXJ5ID0gcGFyc2Vxcy5kZWNvZGUodGhpcy5vcHRzLnF1ZXJ5KTtcbiAgICB9XG5cbiAgICAvLyBzZXQgb24gaGFuZHNoYWtlXG4gICAgdGhpcy5pZCA9IG51bGw7XG4gICAgdGhpcy51cGdyYWRlcyA9IG51bGw7XG4gICAgdGhpcy5waW5nSW50ZXJ2YWwgPSBudWxsO1xuICAgIHRoaXMucGluZ1RpbWVvdXQgPSBudWxsO1xuXG4gICAgLy8gc2V0IG9uIGhlYXJ0YmVhdFxuICAgIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IG51bGw7XG5cbiAgICBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgICAgaWYgKHRoaXMub3B0cy5jbG9zZU9uQmVmb3JldW5sb2FkKSB7XG4gICAgICAgIC8vIEZpcmVmb3ggY2xvc2VzIHRoZSBjb25uZWN0aW9uIHdoZW4gdGhlIFwiYmVmb3JldW5sb2FkXCIgZXZlbnQgaXMgZW1pdHRlZCBidXQgbm90IENocm9tZS4gVGhpcyBldmVudCBsaXN0ZW5lclxuICAgICAgICAvLyBlbnN1cmVzIGV2ZXJ5IGJyb3dzZXIgYmVoYXZlcyB0aGUgc2FtZSAobm8gXCJkaXNjb25uZWN0XCIgZXZlbnQgYXQgdGhlIFNvY2tldC5JTyBsZXZlbCB3aGVuIHRoZSBwYWdlIGlzXG4gICAgICAgIC8vIGNsb3NlZC9yZWxvYWRlZClcbiAgICAgICAgYWRkRXZlbnRMaXN0ZW5lcihcbiAgICAgICAgICBcImJlZm9yZXVubG9hZFwiLFxuICAgICAgICAgICgpID0+IHtcbiAgICAgICAgICAgIGlmICh0aGlzLnRyYW5zcG9ydCkge1xuICAgICAgICAgICAgICAvLyBzaWxlbnRseSBjbG9zZSB0aGUgdHJhbnNwb3J0XG4gICAgICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgICAgICAgICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0sXG4gICAgICAgICAgZmFsc2VcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLmhvc3RuYW1lICE9PSBcImxvY2FsaG9zdFwiKSB7XG4gICAgICAgIHRoaXMub2ZmbGluZUV2ZW50TGlzdGVuZXIgPSAoKSA9PiB7XG4gICAgICAgICAgdGhpcy5vbkNsb3NlKFwidHJhbnNwb3J0IGNsb3NlXCIpO1xuICAgICAgICB9O1xuICAgICAgICBhZGRFdmVudExpc3RlbmVyKFwib2ZmbGluZVwiLCB0aGlzLm9mZmxpbmVFdmVudExpc3RlbmVyLCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgdGhpcy5vcGVuKCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0cmFuc3BvcnQgb2YgdGhlIGdpdmVuIHR5cGUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSB0cmFuc3BvcnQgbmFtZVxuICAgKiBAcmV0dXJuIHtUcmFuc3BvcnR9XG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY3JlYXRlVHJhbnNwb3J0KG5hbWUpIHtcbiAgICBkZWJ1ZygnY3JlYXRpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICAgIGNvbnN0IHF1ZXJ5ID0gY2xvbmUodGhpcy5vcHRzLnF1ZXJ5KTtcblxuICAgIC8vIGFwcGVuZCBlbmdpbmUuaW8gcHJvdG9jb2wgaWRlbnRpZmllclxuICAgIHF1ZXJ5LkVJTyA9IHBhcnNlci5wcm90b2NvbDtcblxuICAgIC8vIHRyYW5zcG9ydCBuYW1lXG4gICAgcXVlcnkudHJhbnNwb3J0ID0gbmFtZTtcblxuICAgIC8vIHNlc3Npb24gaWQgaWYgd2UgYWxyZWFkeSBoYXZlIG9uZVxuICAgIGlmICh0aGlzLmlkKSBxdWVyeS5zaWQgPSB0aGlzLmlkO1xuXG4gICAgY29uc3Qgb3B0cyA9IE9iamVjdC5hc3NpZ24oXG4gICAgICB7fSxcbiAgICAgIHRoaXMub3B0cy50cmFuc3BvcnRPcHRpb25zW25hbWVdLFxuICAgICAgdGhpcy5vcHRzLFxuICAgICAge1xuICAgICAgICBxdWVyeSxcbiAgICAgICAgc29ja2V0OiB0aGlzLFxuICAgICAgICBob3N0bmFtZTogdGhpcy5ob3N0bmFtZSxcbiAgICAgICAgc2VjdXJlOiB0aGlzLnNlY3VyZSxcbiAgICAgICAgcG9ydDogdGhpcy5wb3J0XG4gICAgICB9XG4gICAgKTtcblxuICAgIGRlYnVnKFwib3B0aW9uczogJWpcIiwgb3B0cyk7XG5cbiAgICByZXR1cm4gbmV3IHRyYW5zcG9ydHNbbmFtZV0ob3B0cyk7XG4gIH1cblxuICAvKipcbiAgICogSW5pdGlhbGl6ZXMgdHJhbnNwb3J0IHRvIHVzZSBhbmQgc3RhcnRzIHByb2JlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9wZW4oKSB7XG4gICAgbGV0IHRyYW5zcG9ydDtcbiAgICBpZiAoXG4gICAgICB0aGlzLm9wdHMucmVtZW1iZXJVcGdyYWRlICYmXG4gICAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzICYmXG4gICAgICB0aGlzLnRyYW5zcG9ydHMuaW5kZXhPZihcIndlYnNvY2tldFwiKSAhPT0gLTFcbiAgICApIHtcbiAgICAgIHRyYW5zcG9ydCA9IFwid2Vic29ja2V0XCI7XG4gICAgfSBlbHNlIGlmICgwID09PSB0aGlzLnRyYW5zcG9ydHMubGVuZ3RoKSB7XG4gICAgICAvLyBFbWl0IGVycm9yIG9uIG5leHQgdGljayBzbyBpdCBjYW4gYmUgbGlzdGVuZWQgdG9cbiAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBcIk5vIHRyYW5zcG9ydHMgYXZhaWxhYmxlXCIpO1xuICAgICAgfSwgMCk7XG4gICAgICByZXR1cm47XG4gICAgfSBlbHNlIHtcbiAgICAgIHRyYW5zcG9ydCA9IHRoaXMudHJhbnNwb3J0c1swXTtcbiAgICB9XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuaW5nXCI7XG5cbiAgICAvLyBSZXRyeSB3aXRoIHRoZSBuZXh0IHRyYW5zcG9ydCBpZiB0aGUgdHJhbnNwb3J0IGlzIGRpc2FibGVkIChqc29ucDogZmFsc2UpXG4gICAgdHJ5IHtcbiAgICAgIHRyYW5zcG9ydCA9IHRoaXMuY3JlYXRlVHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgZGVidWcoXCJlcnJvciB3aGlsZSBjcmVhdGluZyB0cmFuc3BvcnQ6ICVzXCIsIGUpO1xuICAgICAgdGhpcy50cmFuc3BvcnRzLnNoaWZ0KCk7XG4gICAgICB0aGlzLm9wZW4oKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICB0cmFuc3BvcnQub3BlbigpO1xuICAgIHRoaXMuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gIH1cblxuICAvKipcbiAgICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQuIERpc2FibGVzIHRoZSBleGlzdGluZyBvbmUgKGlmIGFueSkuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCkge1xuICAgIGRlYnVnKFwic2V0dGluZyB0cmFuc3BvcnQgJXNcIiwgdHJhbnNwb3J0Lm5hbWUpO1xuXG4gICAgaWYgKHRoaXMudHJhbnNwb3J0KSB7XG4gICAgICBkZWJ1ZyhcImNsZWFyaW5nIGV4aXN0aW5nIHRyYW5zcG9ydCAlc1wiLCB0aGlzLnRyYW5zcG9ydC5uYW1lKTtcbiAgICAgIHRoaXMudHJhbnNwb3J0LnJlbW92ZUFsbExpc3RlbmVycygpO1xuICAgIH1cblxuICAgIC8vIHNldCB1cCB0cmFuc3BvcnRcbiAgICB0aGlzLnRyYW5zcG9ydCA9IHRyYW5zcG9ydDtcblxuICAgIC8vIHNldCB1cCB0cmFuc3BvcnQgbGlzdGVuZXJzXG4gICAgdHJhbnNwb3J0XG4gICAgICAub24oXCJkcmFpblwiLCB0aGlzLm9uRHJhaW4uYmluZCh0aGlzKSlcbiAgICAgIC5vbihcInBhY2tldFwiLCB0aGlzLm9uUGFja2V0LmJpbmQodGhpcykpXG4gICAgICAub24oXCJlcnJvclwiLCB0aGlzLm9uRXJyb3IuYmluZCh0aGlzKSlcbiAgICAgIC5vbihcImNsb3NlXCIsICgpID0+IHtcbiAgICAgICAgdGhpcy5vbkNsb3NlKFwidHJhbnNwb3J0IGNsb3NlXCIpO1xuICAgICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogUHJvYmVzIGEgdHJhbnNwb3J0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gdHJhbnNwb3J0IG5hbWVcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBwcm9iZShuYW1lKSB7XG4gICAgZGVidWcoJ3Byb2JpbmcgdHJhbnNwb3J0IFwiJXNcIicsIG5hbWUpO1xuICAgIGxldCB0cmFuc3BvcnQgPSB0aGlzLmNyZWF0ZVRyYW5zcG9ydChuYW1lLCB7IHByb2JlOiAxIH0pO1xuICAgIGxldCBmYWlsZWQgPSBmYWxzZTtcblxuICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBmYWxzZTtcblxuICAgIGNvbnN0IG9uVHJhbnNwb3J0T3BlbiA9ICgpID0+IHtcbiAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcblxuICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgb3BlbmVkJywgbmFtZSk7XG4gICAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiBcInBpbmdcIiwgZGF0YTogXCJwcm9iZVwiIH1dKTtcbiAgICAgIHRyYW5zcG9ydC5vbmNlKFwicGFja2V0XCIsIG1zZyA9PiB7XG4gICAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgICAgaWYgKFwicG9uZ1wiID09PSBtc2cudHlwZSAmJiBcInByb2JlXCIgPT09IG1zZy5kYXRhKSB7XG4gICAgICAgICAgZGVidWcoJ3Byb2JlIHRyYW5zcG9ydCBcIiVzXCIgcG9uZycsIG5hbWUpO1xuICAgICAgICAgIHRoaXMudXBncmFkaW5nID0gdHJ1ZTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJ1cGdyYWRpbmdcIiwgdHJhbnNwb3J0KTtcbiAgICAgICAgICBpZiAoIXRyYW5zcG9ydCkgcmV0dXJuO1xuICAgICAgICAgIFNvY2tldC5wcmlvcldlYnNvY2tldFN1Y2Nlc3MgPSBcIndlYnNvY2tldFwiID09PSB0cmFuc3BvcnQubmFtZTtcblxuICAgICAgICAgIGRlYnVnKCdwYXVzaW5nIGN1cnJlbnQgdHJhbnNwb3J0IFwiJXNcIicsIHRoaXMudHJhbnNwb3J0Lm5hbWUpO1xuICAgICAgICAgIHRoaXMudHJhbnNwb3J0LnBhdXNlKCgpID0+IHtcbiAgICAgICAgICAgIGlmIChmYWlsZWQpIHJldHVybjtcbiAgICAgICAgICAgIGlmIChcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICAgICAgICAgIGRlYnVnKFwiY2hhbmdpbmcgdHJhbnNwb3J0IGFuZCBzZW5kaW5nIHVwZ3JhZGUgcGFja2V0XCIpO1xuXG4gICAgICAgICAgICBjbGVhbnVwKCk7XG5cbiAgICAgICAgICAgIHRoaXMuc2V0VHJhbnNwb3J0KHRyYW5zcG9ydCk7XG4gICAgICAgICAgICB0cmFuc3BvcnQuc2VuZChbeyB0eXBlOiBcInVwZ3JhZGVcIiB9XSk7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJ1cGdyYWRlXCIsIHRyYW5zcG9ydCk7XG4gICAgICAgICAgICB0cmFuc3BvcnQgPSBudWxsO1xuICAgICAgICAgICAgdGhpcy51cGdyYWRpbmcgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMuZmx1c2goKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQnLCBuYW1lKTtcbiAgICAgICAgICBjb25zdCBlcnIgPSBuZXcgRXJyb3IoXCJwcm9iZSBlcnJvclwiKTtcbiAgICAgICAgICBlcnIudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG4gICAgICAgICAgdGhpcy5lbWl0KFwidXBncmFkZUVycm9yXCIsIGVycik7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBmcmVlemVUcmFuc3BvcnQoKSB7XG4gICAgICBpZiAoZmFpbGVkKSByZXR1cm47XG5cbiAgICAgIC8vIEFueSBjYWxsYmFjayBjYWxsZWQgYnkgdHJhbnNwb3J0IHNob3VsZCBiZSBpZ25vcmVkIHNpbmNlIG5vd1xuICAgICAgZmFpbGVkID0gdHJ1ZTtcblxuICAgICAgY2xlYW51cCgpO1xuXG4gICAgICB0cmFuc3BvcnQuY2xvc2UoKTtcbiAgICAgIHRyYW5zcG9ydCA9IG51bGw7XG4gICAgfVxuXG4gICAgLy8gSGFuZGxlIGFueSBlcnJvciB0aGF0IGhhcHBlbnMgd2hpbGUgcHJvYmluZ1xuICAgIGNvbnN0IG9uZXJyb3IgPSBlcnIgPT4ge1xuICAgICAgY29uc3QgZXJyb3IgPSBuZXcgRXJyb3IoXCJwcm9iZSBlcnJvcjogXCIgKyBlcnIpO1xuICAgICAgZXJyb3IudHJhbnNwb3J0ID0gdHJhbnNwb3J0Lm5hbWU7XG5cbiAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuXG4gICAgICBkZWJ1ZygncHJvYmUgdHJhbnNwb3J0IFwiJXNcIiBmYWlsZWQgYmVjYXVzZSBvZiBlcnJvcjogJXMnLCBuYW1lLCBlcnIpO1xuXG4gICAgICB0aGlzLmVtaXQoXCJ1cGdyYWRlRXJyb3JcIiwgZXJyb3IpO1xuICAgIH07XG5cbiAgICBmdW5jdGlvbiBvblRyYW5zcG9ydENsb3NlKCkge1xuICAgICAgb25lcnJvcihcInRyYW5zcG9ydCBjbG9zZWRcIik7XG4gICAgfVxuXG4gICAgLy8gV2hlbiB0aGUgc29ja2V0IGlzIGNsb3NlZCB3aGlsZSB3ZSdyZSBwcm9iaW5nXG4gICAgZnVuY3Rpb24gb25jbG9zZSgpIHtcbiAgICAgIG9uZXJyb3IoXCJzb2NrZXQgY2xvc2VkXCIpO1xuICAgIH1cblxuICAgIC8vIFdoZW4gdGhlIHNvY2tldCBpcyB1cGdyYWRlZCB3aGlsZSB3ZSdyZSBwcm9iaW5nXG4gICAgZnVuY3Rpb24gb251cGdyYWRlKHRvKSB7XG4gICAgICBpZiAodHJhbnNwb3J0ICYmIHRvLm5hbWUgIT09IHRyYW5zcG9ydC5uYW1lKSB7XG4gICAgICAgIGRlYnVnKCdcIiVzXCIgd29ya3MgLSBhYm9ydGluZyBcIiVzXCInLCB0by5uYW1lLCB0cmFuc3BvcnQubmFtZSk7XG4gICAgICAgIGZyZWV6ZVRyYW5zcG9ydCgpO1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIFJlbW92ZSBhbGwgbGlzdGVuZXJzIG9uIHRoZSB0cmFuc3BvcnQgYW5kIG9uIHNlbGZcbiAgICBjb25zdCBjbGVhbnVwID0gKCkgPT4ge1xuICAgICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKFwib3BlblwiLCBvblRyYW5zcG9ydE9wZW4pO1xuICAgICAgdHJhbnNwb3J0LnJlbW92ZUxpc3RlbmVyKFwiZXJyb3JcIiwgb25lcnJvcik7XG4gICAgICB0cmFuc3BvcnQucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLCBvblRyYW5zcG9ydENsb3NlKTtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoXCJjbG9zZVwiLCBvbmNsb3NlKTtcbiAgICAgIHRoaXMucmVtb3ZlTGlzdGVuZXIoXCJ1cGdyYWRpbmdcIiwgb251cGdyYWRlKTtcbiAgICB9O1xuXG4gICAgdHJhbnNwb3J0Lm9uY2UoXCJvcGVuXCIsIG9uVHJhbnNwb3J0T3Blbik7XG4gICAgdHJhbnNwb3J0Lm9uY2UoXCJlcnJvclwiLCBvbmVycm9yKTtcbiAgICB0cmFuc3BvcnQub25jZShcImNsb3NlXCIsIG9uVHJhbnNwb3J0Q2xvc2UpO1xuXG4gICAgdGhpcy5vbmNlKFwiY2xvc2VcIiwgb25jbG9zZSk7XG4gICAgdGhpcy5vbmNlKFwidXBncmFkaW5nXCIsIG9udXBncmFkZSk7XG5cbiAgICB0cmFuc3BvcnQub3BlbigpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB3aGVuIGNvbm5lY3Rpb24gaXMgZGVlbWVkIG9wZW4uXG4gICAqXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBvbk9wZW4oKSB7XG4gICAgZGVidWcoXCJzb2NrZXQgb3BlblwiKTtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5cIjtcbiAgICBTb2NrZXQucHJpb3JXZWJzb2NrZXRTdWNjZXNzID0gXCJ3ZWJzb2NrZXRcIiA9PT0gdGhpcy50cmFuc3BvcnQubmFtZTtcbiAgICB0aGlzLmVtaXQoXCJvcGVuXCIpO1xuICAgIHRoaXMuZmx1c2goKTtcblxuICAgIC8vIHdlIGNoZWNrIGZvciBgcmVhZHlTdGF0ZWAgaW4gY2FzZSBhbiBgb3BlbmBcbiAgICAvLyBsaXN0ZW5lciBhbHJlYWR5IGNsb3NlZCB0aGUgc29ja2V0XG4gICAgaWYgKFxuICAgICAgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSAmJlxuICAgICAgdGhpcy5vcHRzLnVwZ3JhZGUgJiZcbiAgICAgIHRoaXMudHJhbnNwb3J0LnBhdXNlXG4gICAgKSB7XG4gICAgICBkZWJ1ZyhcInN0YXJ0aW5nIHVwZ3JhZGUgcHJvYmVzXCIpO1xuICAgICAgbGV0IGkgPSAwO1xuICAgICAgY29uc3QgbCA9IHRoaXMudXBncmFkZXMubGVuZ3RoO1xuICAgICAgZm9yICg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgdGhpcy5wcm9iZSh0aGlzLnVwZ3JhZGVzW2ldKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogSGFuZGxlcyBhIHBhY2tldC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvblBhY2tldChwYWNrZXQpIHtcbiAgICBpZiAoXG4gICAgICBcIm9wZW5pbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICBcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8XG4gICAgICBcImNsb3NpbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlXG4gICAgKSB7XG4gICAgICBkZWJ1Zygnc29ja2V0IHJlY2VpdmU6IHR5cGUgXCIlc1wiLCBkYXRhIFwiJXNcIicsIHBhY2tldC50eXBlLCBwYWNrZXQuZGF0YSk7XG5cbiAgICAgIHRoaXMuZW1pdChcInBhY2tldFwiLCBwYWNrZXQpO1xuXG4gICAgICAvLyBTb2NrZXQgaXMgbGl2ZSAtIGFueSBwYWNrZXQgY291bnRzXG4gICAgICB0aGlzLmVtaXQoXCJoZWFydGJlYXRcIik7XG5cbiAgICAgIHN3aXRjaCAocGFja2V0LnR5cGUpIHtcbiAgICAgICAgY2FzZSBcIm9wZW5cIjpcbiAgICAgICAgICB0aGlzLm9uSGFuZHNoYWtlKEpTT04ucGFyc2UocGFja2V0LmRhdGEpKTtcbiAgICAgICAgICBicmVhaztcblxuICAgICAgICBjYXNlIFwicGluZ1wiOlxuICAgICAgICAgIHRoaXMucmVzZXRQaW5nVGltZW91dCgpO1xuICAgICAgICAgIHRoaXMuc2VuZFBhY2tldChcInBvbmdcIik7XG4gICAgICAgICAgdGhpcy5lbWl0KFwicGluZ1wiKTtcbiAgICAgICAgICB0aGlzLmVtaXQoXCJwb25nXCIpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJlcnJvclwiOlxuICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihcInNlcnZlciBlcnJvclwiKTtcbiAgICAgICAgICBlcnIuY29kZSA9IHBhY2tldC5kYXRhO1xuICAgICAgICAgIHRoaXMub25FcnJvcihlcnIpO1xuICAgICAgICAgIGJyZWFrO1xuXG4gICAgICAgIGNhc2UgXCJtZXNzYWdlXCI6XG4gICAgICAgICAgdGhpcy5lbWl0KFwiZGF0YVwiLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgICAgdGhpcy5lbWl0KFwibWVzc2FnZVwiLCBwYWNrZXQuZGF0YSk7XG4gICAgICAgICAgYnJlYWs7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGRlYnVnKCdwYWNrZXQgcmVjZWl2ZWQgd2l0aCBzb2NrZXQgcmVhZHlTdGF0ZSBcIiVzXCInLCB0aGlzLnJlYWR5U3RhdGUpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBoYW5kc2hha2UgY29tcGxldGlvbi5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IGhhbmRzaGFrZSBvYmpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkhhbmRzaGFrZShkYXRhKSB7XG4gICAgdGhpcy5lbWl0KFwiaGFuZHNoYWtlXCIsIGRhdGEpO1xuICAgIHRoaXMuaWQgPSBkYXRhLnNpZDtcbiAgICB0aGlzLnRyYW5zcG9ydC5xdWVyeS5zaWQgPSBkYXRhLnNpZDtcbiAgICB0aGlzLnVwZ3JhZGVzID0gdGhpcy5maWx0ZXJVcGdyYWRlcyhkYXRhLnVwZ3JhZGVzKTtcbiAgICB0aGlzLnBpbmdJbnRlcnZhbCA9IGRhdGEucGluZ0ludGVydmFsO1xuICAgIHRoaXMucGluZ1RpbWVvdXQgPSBkYXRhLnBpbmdUaW1lb3V0O1xuICAgIHRoaXMub25PcGVuKCk7XG4gICAgLy8gSW4gY2FzZSBvcGVuIGhhbmRsZXIgY2xvc2VzIHNvY2tldFxuICAgIGlmIChcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHJldHVybjtcbiAgICB0aGlzLnJlc2V0UGluZ1RpbWVvdXQoKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZXRzIGFuZCByZXNldHMgcGluZyB0aW1lb3V0IHRpbWVyIGJhc2VkIG9uIHNlcnZlciBwaW5ncy5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICByZXNldFBpbmdUaW1lb3V0KCkge1xuICAgIGNsZWFyVGltZW91dCh0aGlzLnBpbmdUaW1lb3V0VGltZXIpO1xuICAgIHRoaXMucGluZ1RpbWVvdXRUaW1lciA9IHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgdGhpcy5vbkNsb3NlKFwicGluZyB0aW1lb3V0XCIpO1xuICAgIH0sIHRoaXMucGluZ0ludGVydmFsICsgdGhpcy5waW5nVGltZW91dCk7XG4gICAgaWYgKHRoaXMub3B0cy5hdXRvVW5yZWYpIHtcbiAgICAgIHRoaXMucGluZ1RpbWVvdXRUaW1lci51bnJlZigpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgb24gYGRyYWluYCBldmVudFxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uRHJhaW4oKSB7XG4gICAgdGhpcy53cml0ZUJ1ZmZlci5zcGxpY2UoMCwgdGhpcy5wcmV2QnVmZmVyTGVuKTtcblxuICAgIC8vIHNldHRpbmcgcHJldkJ1ZmZlckxlbiA9IDAgaXMgdmVyeSBpbXBvcnRhbnRcbiAgICAvLyBmb3IgZXhhbXBsZSwgd2hlbiB1cGdyYWRpbmcsIHVwZ3JhZGUgcGFja2V0IGlzIHNlbnQgb3ZlcixcbiAgICAvLyBhbmQgYSBub256ZXJvIHByZXZCdWZmZXJMZW4gY291bGQgY2F1c2UgcHJvYmxlbXMgb24gYGRyYWluYFxuICAgIHRoaXMucHJldkJ1ZmZlckxlbiA9IDA7XG5cbiAgICBpZiAoMCA9PT0gdGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgIHRoaXMuZW1pdChcImRyYWluXCIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmZsdXNoKCk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZsdXNoIHdyaXRlIGJ1ZmZlcnMuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZmx1c2goKSB7XG4gICAgaWYgKFxuICAgICAgXCJjbG9zZWRcIiAhPT0gdGhpcy5yZWFkeVN0YXRlICYmXG4gICAgICB0aGlzLnRyYW5zcG9ydC53cml0YWJsZSAmJlxuICAgICAgIXRoaXMudXBncmFkaW5nICYmXG4gICAgICB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aFxuICAgICkge1xuICAgICAgZGVidWcoXCJmbHVzaGluZyAlZCBwYWNrZXRzIGluIHNvY2tldFwiLCB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aCk7XG4gICAgICB0aGlzLnRyYW5zcG9ydC5zZW5kKHRoaXMud3JpdGVCdWZmZXIpO1xuICAgICAgLy8ga2VlcCB0cmFjayBvZiBjdXJyZW50IGxlbmd0aCBvZiB3cml0ZUJ1ZmZlclxuICAgICAgLy8gc3BsaWNlIHdyaXRlQnVmZmVyIGFuZCBjYWxsYmFja0J1ZmZlciBvbiBgZHJhaW5gXG4gICAgICB0aGlzLnByZXZCdWZmZXJMZW4gPSB0aGlzLndyaXRlQnVmZmVyLmxlbmd0aDtcbiAgICAgIHRoaXMuZW1pdChcImZsdXNoXCIpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBhIG1lc3NhZ2UuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBtZXNzYWdlLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayBmdW5jdGlvbi5cbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdGlvbnMuXG4gICAqIEByZXR1cm4ge1NvY2tldH0gZm9yIGNoYWluaW5nLlxuICAgKiBAYXBpIHB1YmxpY1xuICAgKi9cbiAgd3JpdGUobXNnLCBvcHRpb25zLCBmbikge1xuICAgIHRoaXMuc2VuZFBhY2tldChcIm1lc3NhZ2VcIiwgbXNnLCBvcHRpb25zLCBmbik7XG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICBzZW5kKG1zZywgb3B0aW9ucywgZm4pIHtcbiAgICB0aGlzLnNlbmRQYWNrZXQoXCJtZXNzYWdlXCIsIG1zZywgb3B0aW9ucywgZm4pO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIFNlbmRzIGEgcGFja2V0LlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gcGFja2V0IHR5cGUuXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhLlxuICAgKiBAcGFyYW0ge09iamVjdH0gb3B0aW9ucy5cbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGJhY2sgZnVuY3Rpb24uXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2VuZFBhY2tldCh0eXBlLCBkYXRhLCBvcHRpb25zLCBmbikge1xuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBkYXRhKSB7XG4gICAgICBmbiA9IGRhdGE7XG4gICAgICBkYXRhID0gdW5kZWZpbmVkO1xuICAgIH1cblxuICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBvcHRpb25zKSB7XG4gICAgICBmbiA9IG9wdGlvbnM7XG4gICAgICBvcHRpb25zID0gbnVsbDtcbiAgICB9XG5cbiAgICBpZiAoXCJjbG9zaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fCBcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHJldHVybjtcbiAgICB9XG5cbiAgICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgICBvcHRpb25zLmNvbXByZXNzID0gZmFsc2UgIT09IG9wdGlvbnMuY29tcHJlc3M7XG5cbiAgICBjb25zdCBwYWNrZXQgPSB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgZGF0YTogZGF0YSxcbiAgICAgIG9wdGlvbnM6IG9wdGlvbnNcbiAgICB9O1xuICAgIHRoaXMuZW1pdChcInBhY2tldENyZWF0ZVwiLCBwYWNrZXQpO1xuICAgIHRoaXMud3JpdGVCdWZmZXIucHVzaChwYWNrZXQpO1xuICAgIGlmIChmbikgdGhpcy5vbmNlKFwiZmx1c2hcIiwgZm4pO1xuICAgIHRoaXMuZmx1c2goKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIGNvbm5lY3Rpb24uXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgY29uc3QgY2xvc2UgPSAoKSA9PiB7XG4gICAgICB0aGlzLm9uQ2xvc2UoXCJmb3JjZWQgY2xvc2VcIik7XG4gICAgICBkZWJ1ZyhcInNvY2tldCBjbG9zaW5nIC0gdGVsbGluZyB0cmFuc3BvcnQgdG8gY2xvc2VcIik7XG4gICAgICB0aGlzLnRyYW5zcG9ydC5jbG9zZSgpO1xuICAgIH07XG5cbiAgICBjb25zdCBjbGVhbnVwQW5kQ2xvc2UgPSAoKSA9PiB7XG4gICAgICB0aGlzLnJlbW92ZUxpc3RlbmVyKFwidXBncmFkZVwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgdGhpcy5yZW1vdmVMaXN0ZW5lcihcInVwZ3JhZGVFcnJvclwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgY2xvc2UoKTtcbiAgICB9O1xuXG4gICAgY29uc3Qgd2FpdEZvclVwZ3JhZGUgPSAoKSA9PiB7XG4gICAgICAvLyB3YWl0IGZvciB1cGdyYWRlIHRvIGZpbmlzaCBzaW5jZSB3ZSBjYW4ndCBzZW5kIHBhY2tldHMgd2hpbGUgcGF1c2luZyBhIHRyYW5zcG9ydFxuICAgICAgdGhpcy5vbmNlKFwidXBncmFkZVwiLCBjbGVhbnVwQW5kQ2xvc2UpO1xuICAgICAgdGhpcy5vbmNlKFwidXBncmFkZUVycm9yXCIsIGNsZWFudXBBbmRDbG9zZSk7XG4gICAgfTtcblxuICAgIGlmIChcIm9wZW5pbmdcIiA9PT0gdGhpcy5yZWFkeVN0YXRlIHx8IFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2luZ1wiO1xuXG4gICAgICBpZiAodGhpcy53cml0ZUJ1ZmZlci5sZW5ndGgpIHtcbiAgICAgICAgdGhpcy5vbmNlKFwiZHJhaW5cIiwgKCkgPT4ge1xuICAgICAgICAgIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICAgICAgd2FpdEZvclVwZ3JhZGUoKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY2xvc2UoKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIGlmICh0aGlzLnVwZ3JhZGluZykge1xuICAgICAgICB3YWl0Rm9yVXBncmFkZSgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgY2xvc2UoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgZXJyb3JcbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkVycm9yKGVycikge1xuICAgIGRlYnVnKFwic29ja2V0IGVycm9yICVqXCIsIGVycik7XG4gICAgU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuICAgIHRoaXMuZW1pdChcImVycm9yXCIsIGVycik7XG4gICAgdGhpcy5vbkNsb3NlKFwidHJhbnNwb3J0IGVycm9yXCIsIGVycik7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gdHJhbnNwb3J0IGNsb3NlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uQ2xvc2UocmVhc29uLCBkZXNjKSB7XG4gICAgaWYgKFxuICAgICAgXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSB8fFxuICAgICAgXCJjbG9zaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZVxuICAgICkge1xuICAgICAgZGVidWcoJ3NvY2tldCBjbG9zZSB3aXRoIHJlYXNvbjogXCIlc1wiJywgcmVhc29uKTtcblxuICAgICAgLy8gY2xlYXIgdGltZXJzXG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nSW50ZXJ2YWxUaW1lcik7XG4gICAgICBjbGVhclRpbWVvdXQodGhpcy5waW5nVGltZW91dFRpbWVyKTtcblxuICAgICAgLy8gc3RvcCBldmVudCBmcm9tIGZpcmluZyBhZ2FpbiBmb3IgdHJhbnNwb3J0XG4gICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoXCJjbG9zZVwiKTtcblxuICAgICAgLy8gZW5zdXJlIHRyYW5zcG9ydCB3b24ndCBzdGF5IG9wZW5cbiAgICAgIHRoaXMudHJhbnNwb3J0LmNsb3NlKCk7XG5cbiAgICAgIC8vIGlnbm9yZSBmdXJ0aGVyIHRyYW5zcG9ydCBjb21tdW5pY2F0aW9uXG4gICAgICB0aGlzLnRyYW5zcG9ydC5yZW1vdmVBbGxMaXN0ZW5lcnMoKTtcblxuICAgICAgaWYgKHR5cGVvZiByZW1vdmVFdmVudExpc3RlbmVyID09PSBcImZ1bmN0aW9uXCIpIHtcbiAgICAgICAgcmVtb3ZlRXZlbnRMaXN0ZW5lcihcIm9mZmxpbmVcIiwgdGhpcy5vZmZsaW5lRXZlbnRMaXN0ZW5lciwgZmFsc2UpO1xuICAgICAgfVxuXG4gICAgICAvLyBzZXQgcmVhZHkgc3RhdGVcbiAgICAgIHRoaXMucmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG5cbiAgICAgIC8vIGNsZWFyIHNlc3Npb24gaWRcbiAgICAgIHRoaXMuaWQgPSBudWxsO1xuXG4gICAgICAvLyBlbWl0IGNsb3NlIGV2ZW50XG4gICAgICB0aGlzLmVtaXQoXCJjbG9zZVwiLCByZWFzb24sIGRlc2MpO1xuXG4gICAgICAvLyBjbGVhbiBidWZmZXJzIGFmdGVyLCBzbyB1c2VycyBjYW4gc3RpbGxcbiAgICAgIC8vIGdyYWIgdGhlIGJ1ZmZlcnMgb24gYGNsb3NlYCBldmVudFxuICAgICAgdGhpcy53cml0ZUJ1ZmZlciA9IFtdO1xuICAgICAgdGhpcy5wcmV2QnVmZmVyTGVuID0gMDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRmlsdGVycyB1cGdyYWRlcywgcmV0dXJuaW5nIG9ubHkgdGhvc2UgbWF0Y2hpbmcgY2xpZW50IHRyYW5zcG9ydHMuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IHNlcnZlciB1cGdyYWRlc1xuICAgKiBAYXBpIHByaXZhdGVcbiAgICpcbiAgICovXG4gIGZpbHRlclVwZ3JhZGVzKHVwZ3JhZGVzKSB7XG4gICAgY29uc3QgZmlsdGVyZWRVcGdyYWRlcyA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICBjb25zdCBqID0gdXBncmFkZXMubGVuZ3RoO1xuICAgIGZvciAoOyBpIDwgajsgaSsrKSB7XG4gICAgICBpZiAofnRoaXMudHJhbnNwb3J0cy5pbmRleE9mKHVwZ3JhZGVzW2ldKSlcbiAgICAgICAgZmlsdGVyZWRVcGdyYWRlcy5wdXNoKHVwZ3JhZGVzW2ldKTtcbiAgICB9XG4gICAgcmV0dXJuIGZpbHRlcmVkVXBncmFkZXM7XG4gIH1cbn1cblxuU29ja2V0LnByaW9yV2Vic29ja2V0U3VjY2VzcyA9IGZhbHNlO1xuXG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5Tb2NrZXQucHJvdG9jb2wgPSBwYXJzZXIucHJvdG9jb2w7IC8vIHRoaXMgaXMgYW4gaW50XG5cbmZ1bmN0aW9uIGNsb25lKG9iaikge1xuICBjb25zdCBvID0ge307XG4gIGZvciAobGV0IGkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgb1tpXSA9IG9ialtpXTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIG87XG59XG5cbm1vZHVsZS5leHBvcnRzID0gU29ja2V0O1xuIiwiY29uc3QgcGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJlbmdpbmUuaW8tY2xpZW50OnRyYW5zcG9ydFwiKTtcblxuY2xhc3MgVHJhbnNwb3J0IGV4dGVuZHMgRW1pdHRlciB7XG4gIC8qKlxuICAgKiBUcmFuc3BvcnQgYWJzdHJhY3QgY29uc3RydWN0b3IuXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zLlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcigpO1xuXG4gICAgdGhpcy5vcHRzID0gb3B0cztcbiAgICB0aGlzLnF1ZXJ5ID0gb3B0cy5xdWVyeTtcbiAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIlwiO1xuICAgIHRoaXMuc29ja2V0ID0gb3B0cy5zb2NrZXQ7XG4gIH1cblxuICAvKipcbiAgICogRW1pdHMgYW4gZXJyb3IuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICogQHJldHVybiB7VHJhbnNwb3J0fSBmb3IgY2hhaW5pbmdcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIG9uRXJyb3IobXNnLCBkZXNjKSB7XG4gICAgY29uc3QgZXJyID0gbmV3IEVycm9yKG1zZyk7XG4gICAgZXJyLnR5cGUgPSBcIlRyYW5zcG9ydEVycm9yXCI7XG4gICAgZXJyLmRlc2NyaXB0aW9uID0gZGVzYztcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIHJldHVybiB0aGlzO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSB0cmFuc3BvcnQuXG4gICAqXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBvcGVuKCkge1xuICAgIGlmIChcImNsb3NlZFwiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJcIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICB0aGlzLnJlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcbiAgICAgIHRoaXMuZG9PcGVuKCk7XG4gICAgfVxuXG4gICAgcmV0dXJuIHRoaXM7XG4gIH1cblxuICAvKipcbiAgICogQ2xvc2VzIHRoZSB0cmFuc3BvcnQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2xvc2UoKSB7XG4gICAgaWYgKFwib3BlbmluZ1wiID09PSB0aGlzLnJlYWR5U3RhdGUgfHwgXCJvcGVuXCIgPT09IHRoaXMucmVhZHlTdGF0ZSkge1xuICAgICAgdGhpcy5kb0Nsb3NlKCk7XG4gICAgICB0aGlzLm9uQ2xvc2UoKTtcbiAgICB9XG5cbiAgICByZXR1cm4gdGhpcztcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBtdWx0aXBsZSBwYWNrZXRzLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBwYWNrZXRzXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgc2VuZChwYWNrZXRzKSB7XG4gICAgaWYgKFwib3BlblwiID09PSB0aGlzLnJlYWR5U3RhdGUpIHtcbiAgICAgIHRoaXMud3JpdGUocGFja2V0cyk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIHRoaXMgbWlnaHQgaGFwcGVuIGlmIHRoZSB0cmFuc3BvcnQgd2FzIHNpbGVudGx5IGNsb3NlZCBpbiB0aGUgYmVmb3JldW5sb2FkIGV2ZW50IGhhbmRsZXJcbiAgICAgIGRlYnVnKFwidHJhbnNwb3J0IGlzIG5vdCBvcGVuLCBkaXNjYXJkaW5nIHBhY2tldHNcIik7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIG9wZW5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbk9wZW4oKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJvcGVuXCI7XG4gICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgdGhpcy5lbWl0KFwib3BlblwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgd2l0aCBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YVxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uRGF0YShkYXRhKSB7XG4gICAgY29uc3QgcGFja2V0ID0gcGFyc2VyLmRlY29kZVBhY2tldChkYXRhLCB0aGlzLnNvY2tldC5iaW5hcnlUeXBlKTtcbiAgICB0aGlzLm9uUGFja2V0KHBhY2tldCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHdpdGggYSBkZWNvZGVkIHBhY2tldC5cbiAgICovXG4gIG9uUGFja2V0KHBhY2tldCkge1xuICAgIHRoaXMuZW1pdChcInBhY2tldFwiLCBwYWNrZXQpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGNsb3NlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uQ2xvc2UoKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJjbG9zZWRcIjtcbiAgICB0aGlzLmVtaXQoXCJjbG9zZVwiKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFRyYW5zcG9ydDtcbiIsImNvbnN0IFhNTEh0dHBSZXF1ZXN0ID0gcmVxdWlyZShcIi4uLy4uL2NvbnRyaWIveG1saHR0cHJlcXVlc3Qtc3NsL1hNTEh0dHBSZXF1ZXN0XCIpO1xuY29uc3QgWEhSID0gcmVxdWlyZShcIi4vcG9sbGluZy14aHJcIik7XG5jb25zdCBKU09OUCA9IHJlcXVpcmUoXCIuL3BvbGxpbmctanNvbnBcIik7XG5jb25zdCB3ZWJzb2NrZXQgPSByZXF1aXJlKFwiLi93ZWJzb2NrZXRcIik7XG5cbmV4cG9ydHMucG9sbGluZyA9IHBvbGxpbmc7XG5leHBvcnRzLndlYnNvY2tldCA9IHdlYnNvY2tldDtcblxuLyoqXG4gKiBQb2xsaW5nIHRyYW5zcG9ydCBwb2x5bW9ycGhpYyBjb25zdHJ1Y3Rvci5cbiAqIERlY2lkZXMgb24geGhyIHZzIGpzb25wIGJhc2VkIG9uIGZlYXR1cmUgZGV0ZWN0aW9uLlxuICpcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIHBvbGxpbmcob3B0cykge1xuICBsZXQgeGhyO1xuICBsZXQgeGQgPSBmYWxzZTtcbiAgbGV0IHhzID0gZmFsc2U7XG4gIGNvbnN0IGpzb25wID0gZmFsc2UgIT09IG9wdHMuanNvbnA7XG5cbiAgaWYgKHR5cGVvZiBsb2NhdGlvbiAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgIGNvbnN0IGlzU1NMID0gXCJodHRwczpcIiA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgbGV0IHBvcnQgPSBsb2NhdGlvbi5wb3J0O1xuXG4gICAgLy8gc29tZSB1c2VyIGFnZW50cyBoYXZlIGVtcHR5IGBsb2NhdGlvbi5wb3J0YFxuICAgIGlmICghcG9ydCkge1xuICAgICAgcG9ydCA9IGlzU1NMID8gNDQzIDogODA7XG4gICAgfVxuXG4gICAgeGQgPSBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSB8fCBwb3J0ICE9PSBvcHRzLnBvcnQ7XG4gICAgeHMgPSBvcHRzLnNlY3VyZSAhPT0gaXNTU0w7XG4gIH1cblxuICBvcHRzLnhkb21haW4gPSB4ZDtcbiAgb3B0cy54c2NoZW1lID0geHM7XG4gIHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKTtcblxuICBpZiAoXCJvcGVuXCIgaW4geGhyICYmICFvcHRzLmZvcmNlSlNPTlApIHtcbiAgICByZXR1cm4gbmV3IFhIUihvcHRzKTtcbiAgfSBlbHNlIHtcbiAgICBpZiAoIWpzb25wKSB0aHJvdyBuZXcgRXJyb3IoXCJKU09OUCBkaXNhYmxlZFwiKTtcbiAgICByZXR1cm4gbmV3IEpTT05QKG9wdHMpO1xuICB9XG59XG4iLCJjb25zdCBQb2xsaW5nID0gcmVxdWlyZShcIi4vcG9sbGluZ1wiKTtcbmNvbnN0IGdsb2JhbFRoaXMgPSByZXF1aXJlKFwiLi4vZ2xvYmFsVGhpc1wiKTtcblxuY29uc3Qgck5ld2xpbmUgPSAvXFxuL2c7XG5jb25zdCByRXNjYXBlZE5ld2xpbmUgPSAvXFxcXG4vZztcblxuLyoqXG4gKiBHbG9iYWwgSlNPTlAgY2FsbGJhY2tzLlxuICovXG5cbmxldCBjYWxsYmFja3M7XG5cbmNsYXNzIEpTT05QUG9sbGluZyBleHRlbmRzIFBvbGxpbmcge1xuICAvKipcbiAgICogSlNPTlAgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHMuXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjb25zdHJ1Y3RvcihvcHRzKSB7XG4gICAgc3VwZXIob3B0cyk7XG5cbiAgICB0aGlzLnF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcblxuICAgIC8vIGRlZmluZSBnbG9iYWwgY2FsbGJhY2tzIGFycmF5IGlmIG5vdCBwcmVzZW50XG4gICAgLy8gd2UgZG8gdGhpcyBoZXJlIChsYXppbHkpIHRvIGF2b2lkIHVubmVlZGVkIGdsb2JhbCBwb2xsdXRpb25cbiAgICBpZiAoIWNhbGxiYWNrcykge1xuICAgICAgLy8gd2UgbmVlZCB0byBjb25zaWRlciBtdWx0aXBsZSBlbmdpbmVzIGluIHRoZSBzYW1lIHBhZ2VcbiAgICAgIGNhbGxiYWNrcyA9IGdsb2JhbFRoaXMuX19fZWlvID0gZ2xvYmFsVGhpcy5fX19laW8gfHwgW107XG4gICAgfVxuXG4gICAgLy8gY2FsbGJhY2sgaWRlbnRpZmllclxuICAgIHRoaXMuaW5kZXggPSBjYWxsYmFja3MubGVuZ3RoO1xuXG4gICAgLy8gYWRkIGNhbGxiYWNrIHRvIGpzb25wIGdsb2JhbFxuICAgIGNhbGxiYWNrcy5wdXNoKHRoaXMub25EYXRhLmJpbmQodGhpcykpO1xuXG4gICAgLy8gYXBwZW5kIHRvIHF1ZXJ5IHN0cmluZ1xuICAgIHRoaXMucXVlcnkuaiA9IHRoaXMuaW5kZXg7XG4gIH1cblxuICAvKipcbiAgICogSlNPTlAgb25seSBzdXBwb3J0cyBiaW5hcnkgYXMgYmFzZTY0IGVuY29kZWQgc3RyaW5nc1xuICAgKi9cbiAgZ2V0IHN1cHBvcnRzQmluYXJ5KCkge1xuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgdGhlIHNvY2tldC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkb0Nsb3NlKCkge1xuICAgIGlmICh0aGlzLnNjcmlwdCkge1xuICAgICAgLy8gcHJldmVudCBzcHVyaW91cyBlcnJvcnMgZnJvbSBiZWluZyBlbWl0dGVkIHdoZW4gdGhlIHdpbmRvdyBpcyB1bmxvYWRlZFxuICAgICAgdGhpcy5zY3JpcHQub25lcnJvciA9ICgpID0+IHt9O1xuICAgICAgdGhpcy5zY3JpcHQucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCh0aGlzLnNjcmlwdCk7XG4gICAgICB0aGlzLnNjcmlwdCA9IG51bGw7XG4gICAgfVxuXG4gICAgaWYgKHRoaXMuZm9ybSkge1xuICAgICAgdGhpcy5mb3JtLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5mb3JtKTtcbiAgICAgIHRoaXMuZm9ybSA9IG51bGw7XG4gICAgICB0aGlzLmlmcmFtZSA9IG51bGw7XG4gICAgfVxuXG4gICAgc3VwZXIuZG9DbG9zZSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFN0YXJ0cyBhIHBvbGwgY3ljbGUuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9Qb2xsKCkge1xuICAgIGNvbnN0IHNjcmlwdCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzY3JpcHRcIik7XG5cbiAgICBpZiAodGhpcy5zY3JpcHQpIHtcbiAgICAgIHRoaXMuc2NyaXB0LnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQodGhpcy5zY3JpcHQpO1xuICAgICAgdGhpcy5zY3JpcHQgPSBudWxsO1xuICAgIH1cblxuICAgIHNjcmlwdC5hc3luYyA9IHRydWU7XG4gICAgc2NyaXB0LnNyYyA9IHRoaXMudXJpKCk7XG4gICAgc2NyaXB0Lm9uZXJyb3IgPSBlID0+IHtcbiAgICAgIHRoaXMub25FcnJvcihcImpzb25wIHBvbGwgZXJyb3JcIiwgZSk7XG4gICAgfTtcblxuICAgIGNvbnN0IGluc2VydEF0ID0gZG9jdW1lbnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoXCJzY3JpcHRcIilbMF07XG4gICAgaWYgKGluc2VydEF0KSB7XG4gICAgICBpbnNlcnRBdC5wYXJlbnROb2RlLmluc2VydEJlZm9yZShzY3JpcHQsIGluc2VydEF0KTtcbiAgICB9IGVsc2Uge1xuICAgICAgKGRvY3VtZW50LmhlYWQgfHwgZG9jdW1lbnQuYm9keSkuYXBwZW5kQ2hpbGQoc2NyaXB0KTtcbiAgICB9XG4gICAgdGhpcy5zY3JpcHQgPSBzY3JpcHQ7XG5cbiAgICBjb25zdCBpc1VBZ2Vja28gPVxuICAgICAgXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIG5hdmlnYXRvciAmJiAvZ2Vja28vaS50ZXN0KG5hdmlnYXRvci51c2VyQWdlbnQpO1xuXG4gICAgaWYgKGlzVUFnZWNrbykge1xuICAgICAgc2V0VGltZW91dChmdW5jdGlvbigpIHtcbiAgICAgICAgY29uc3QgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChpZnJhbWUpO1xuICAgICAgICBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKGlmcmFtZSk7XG4gICAgICB9LCAxMDApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZXMgd2l0aCBhIGhpZGRlbiBpZnJhbWUuXG4gICAqXG4gICAqIEBwYXJhbSB7U3RyaW5nfSBkYXRhIHRvIHNlbmRcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gY2FsbGVkIHVwb24gZmx1c2guXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9Xcml0ZShkYXRhLCBmbikge1xuICAgIGxldCBpZnJhbWU7XG5cbiAgICBpZiAoIXRoaXMuZm9ybSkge1xuICAgICAgY29uc3QgZm9ybSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmb3JtXCIpO1xuICAgICAgY29uc3QgYXJlYSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJ0ZXh0YXJlYVwiKTtcbiAgICAgIGNvbnN0IGlkID0gKHRoaXMuaWZyYW1lSWQgPSBcImVpb19pZnJhbWVfXCIgKyB0aGlzLmluZGV4KTtcblxuICAgICAgZm9ybS5jbGFzc05hbWUgPSBcInNvY2tldGlvXCI7XG4gICAgICBmb3JtLnN0eWxlLnBvc2l0aW9uID0gXCJhYnNvbHV0ZVwiO1xuICAgICAgZm9ybS5zdHlsZS50b3AgPSBcIi0xMDAwcHhcIjtcbiAgICAgIGZvcm0uc3R5bGUubGVmdCA9IFwiLTEwMDBweFwiO1xuICAgICAgZm9ybS50YXJnZXQgPSBpZDtcbiAgICAgIGZvcm0ubWV0aG9kID0gXCJQT1NUXCI7XG4gICAgICBmb3JtLnNldEF0dHJpYnV0ZShcImFjY2VwdC1jaGFyc2V0XCIsIFwidXRmLThcIik7XG4gICAgICBhcmVhLm5hbWUgPSBcImRcIjtcbiAgICAgIGZvcm0uYXBwZW5kQ2hpbGQoYXJlYSk7XG4gICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZvcm0pO1xuXG4gICAgICB0aGlzLmZvcm0gPSBmb3JtO1xuICAgICAgdGhpcy5hcmVhID0gYXJlYTtcbiAgICB9XG5cbiAgICB0aGlzLmZvcm0uYWN0aW9uID0gdGhpcy51cmkoKTtcblxuICAgIGZ1bmN0aW9uIGNvbXBsZXRlKCkge1xuICAgICAgaW5pdElmcmFtZSgpO1xuICAgICAgZm4oKTtcbiAgICB9XG5cbiAgICBjb25zdCBpbml0SWZyYW1lID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMuaWZyYW1lKSB7XG4gICAgICAgIHRyeSB7XG4gICAgICAgICAgdGhpcy5mb3JtLnJlbW92ZUNoaWxkKHRoaXMuaWZyYW1lKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIHRoaXMub25FcnJvcihcImpzb25wIHBvbGxpbmcgaWZyYW1lIHJlbW92YWwgZXJyb3JcIiwgZSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gaWU2IGR5bmFtaWMgaWZyYW1lcyB3aXRoIHRhcmdldD1cIlwiIHN1cHBvcnQgKHRoYW5rcyBDaHJpcyBMYW1iYWNoZXIpXG4gICAgICAgIGNvbnN0IGh0bWwgPSAnPGlmcmFtZSBzcmM9XCJqYXZhc2NyaXB0OjBcIiBuYW1lPVwiJyArIHRoaXMuaWZyYW1lSWQgKyAnXCI+JztcbiAgICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChodG1sKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgaWZyYW1lID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImlmcmFtZVwiKTtcbiAgICAgICAgaWZyYW1lLm5hbWUgPSB0aGlzLmlmcmFtZUlkO1xuICAgICAgICBpZnJhbWUuc3JjID0gXCJqYXZhc2NyaXB0OjBcIjtcbiAgICAgIH1cblxuICAgICAgaWZyYW1lLmlkID0gdGhpcy5pZnJhbWVJZDtcblxuICAgICAgdGhpcy5mb3JtLmFwcGVuZENoaWxkKGlmcmFtZSk7XG4gICAgICB0aGlzLmlmcmFtZSA9IGlmcmFtZTtcbiAgICB9O1xuXG4gICAgaW5pdElmcmFtZSgpO1xuXG4gICAgLy8gZXNjYXBlIFxcbiB0byBwcmV2ZW50IGl0IGZyb20gYmVpbmcgY29udmVydGVkIGludG8gXFxyXFxuIGJ5IHNvbWUgVUFzXG4gICAgLy8gZG91YmxlIGVzY2FwaW5nIGlzIHJlcXVpcmVkIGZvciBlc2NhcGVkIG5ldyBsaW5lcyBiZWNhdXNlIHVuZXNjYXBpbmcgb2YgbmV3IGxpbmVzIGNhbiBiZSBkb25lIHNhZmVseSBvbiBzZXJ2ZXItc2lkZVxuICAgIGRhdGEgPSBkYXRhLnJlcGxhY2UockVzY2FwZWROZXdsaW5lLCBcIlxcXFxcXG5cIik7XG4gICAgdGhpcy5hcmVhLnZhbHVlID0gZGF0YS5yZXBsYWNlKHJOZXdsaW5lLCBcIlxcXFxuXCIpO1xuXG4gICAgdHJ5IHtcbiAgICAgIHRoaXMuZm9ybS5zdWJtaXQoKTtcbiAgICB9IGNhdGNoIChlKSB7fVxuXG4gICAgaWYgKHRoaXMuaWZyYW1lLmF0dGFjaEV2ZW50KSB7XG4gICAgICB0aGlzLmlmcmFtZS5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgIGlmICh0aGlzLmlmcmFtZS5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIpIHtcbiAgICAgICAgICBjb21wbGV0ZSgpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLmlmcmFtZS5vbmxvYWQgPSBjb21wbGV0ZTtcbiAgICB9XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBKU09OUFBvbGxpbmc7XG4iLCIvKiBnbG9iYWwgYXR0YWNoRXZlbnQgKi9cblxuY29uc3QgWE1MSHR0cFJlcXVlc3QgPSByZXF1aXJlKFwiLi4vLi4vY29udHJpYi94bWxodHRwcmVxdWVzdC1zc2wvWE1MSHR0cFJlcXVlc3RcIik7XG5jb25zdCBQb2xsaW5nID0gcmVxdWlyZShcIi4vcG9sbGluZ1wiKTtcbmNvbnN0IEVtaXR0ZXIgPSByZXF1aXJlKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCB7IHBpY2sgfSA9IHJlcXVpcmUoXCIuLi91dGlsXCIpO1xuY29uc3QgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoXCIuLi9nbG9iYWxUaGlzXCIpO1xuXG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcImVuZ2luZS5pby1jbGllbnQ6cG9sbGluZy14aHJcIik7XG5cbi8qKlxuICogRW1wdHkgZnVuY3Rpb25cbiAqL1xuXG5mdW5jdGlvbiBlbXB0eSgpIHt9XG5cbmNvbnN0IGhhc1hIUjIgPSAoZnVuY3Rpb24oKSB7XG4gIGNvbnN0IHhociA9IG5ldyBYTUxIdHRwUmVxdWVzdCh7IHhkb21haW46IGZhbHNlIH0pO1xuICByZXR1cm4gbnVsbCAhPSB4aHIucmVzcG9uc2VUeXBlO1xufSkoKTtcblxuY2xhc3MgWEhSIGV4dGVuZHMgUG9sbGluZyB7XG4gIC8qKlxuICAgKiBYSFIgUG9sbGluZyBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQHBhcmFtIHtPYmplY3R9IG9wdHNcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcihvcHRzKTtcblxuICAgIGlmICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIGNvbnN0IGlzU1NMID0gXCJodHRwczpcIiA9PT0gbG9jYXRpb24ucHJvdG9jb2w7XG4gICAgICBsZXQgcG9ydCA9IGxvY2F0aW9uLnBvcnQ7XG5cbiAgICAgIC8vIHNvbWUgdXNlciBhZ2VudHMgaGF2ZSBlbXB0eSBgbG9jYXRpb24ucG9ydGBcbiAgICAgIGlmICghcG9ydCkge1xuICAgICAgICBwb3J0ID0gaXNTU0wgPyA0NDMgOiA4MDtcbiAgICAgIH1cblxuICAgICAgdGhpcy54ZCA9XG4gICAgICAgICh0eXBlb2YgbG9jYXRpb24gIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgICAgICAgICBvcHRzLmhvc3RuYW1lICE9PSBsb2NhdGlvbi5ob3N0bmFtZSkgfHxcbiAgICAgICAgcG9ydCAhPT0gb3B0cy5wb3J0O1xuICAgICAgdGhpcy54cyA9IG9wdHMuc2VjdXJlICE9PSBpc1NTTDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogWEhSIHN1cHBvcnRzIGJpbmFyeVxuICAgICAqL1xuICAgIGNvbnN0IGZvcmNlQmFzZTY0ID0gb3B0cyAmJiBvcHRzLmZvcmNlQmFzZTY0O1xuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSBoYXNYSFIyICYmICFmb3JjZUJhc2U2NDtcbiAgfVxuXG4gIC8qKlxuICAgKiBDcmVhdGVzIGEgcmVxdWVzdC5cbiAgICpcbiAgICogQHBhcmFtIHtTdHJpbmd9IG1ldGhvZFxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHJlcXVlc3Qob3B0cyA9IHt9KSB7XG4gICAgT2JqZWN0LmFzc2lnbihvcHRzLCB7IHhkOiB0aGlzLnhkLCB4czogdGhpcy54cyB9LCB0aGlzLm9wdHMpO1xuICAgIHJldHVybiBuZXcgUmVxdWVzdCh0aGlzLnVyaSgpLCBvcHRzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBTZW5kcyBkYXRhLlxuICAgKlxuICAgKiBAcGFyYW0ge1N0cmluZ30gZGF0YSB0byBzZW5kLlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsZWQgdXBvbiBmbHVzaC5cbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkb1dyaXRlKGRhdGEsIGZuKSB7XG4gICAgY29uc3QgcmVxID0gdGhpcy5yZXF1ZXN0KHtcbiAgICAgIG1ldGhvZDogXCJQT1NUXCIsXG4gICAgICBkYXRhOiBkYXRhXG4gICAgfSk7XG4gICAgcmVxLm9uKFwic3VjY2Vzc1wiLCBmbik7XG4gICAgcmVxLm9uKFwiZXJyb3JcIiwgZXJyID0+IHtcbiAgICAgIHRoaXMub25FcnJvcihcInhociBwb3N0IGVycm9yXCIsIGVycik7XG4gICAgfSk7XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIGEgcG9sbCBjeWNsZS5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkb1BvbGwoKSB7XG4gICAgZGVidWcoXCJ4aHIgcG9sbFwiKTtcbiAgICBjb25zdCByZXEgPSB0aGlzLnJlcXVlc3QoKTtcbiAgICByZXEub24oXCJkYXRhXCIsIHRoaXMub25EYXRhLmJpbmQodGhpcykpO1xuICAgIHJlcS5vbihcImVycm9yXCIsIGVyciA9PiB7XG4gICAgICB0aGlzLm9uRXJyb3IoXCJ4aHIgcG9sbCBlcnJvclwiLCBlcnIpO1xuICAgIH0pO1xuICAgIHRoaXMucG9sbFhociA9IHJlcTtcbiAgfVxufVxuXG5jbGFzcyBSZXF1ZXN0IGV4dGVuZHMgRW1pdHRlciB7XG4gIC8qKlxuICAgKiBSZXF1ZXN0IGNvbnN0cnVjdG9yXG4gICAqXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBvcHRpb25zXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBjb25zdHJ1Y3Rvcih1cmksIG9wdHMpIHtcbiAgICBzdXBlcigpO1xuICAgIHRoaXMub3B0cyA9IG9wdHM7XG5cbiAgICB0aGlzLm1ldGhvZCA9IG9wdHMubWV0aG9kIHx8IFwiR0VUXCI7XG4gICAgdGhpcy51cmkgPSB1cmk7XG4gICAgdGhpcy5hc3luYyA9IGZhbHNlICE9PSBvcHRzLmFzeW5jO1xuICAgIHRoaXMuZGF0YSA9IHVuZGVmaW5lZCAhPT0gb3B0cy5kYXRhID8gb3B0cy5kYXRhIDogbnVsbDtcblxuICAgIHRoaXMuY3JlYXRlKCk7XG4gIH1cblxuICAvKipcbiAgICogQ3JlYXRlcyB0aGUgWEhSIG9iamVjdCBhbmQgc2VuZHMgdGhlIHJlcXVlc3QuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY3JlYXRlKCkge1xuICAgIGNvbnN0IG9wdHMgPSBwaWNrKFxuICAgICAgdGhpcy5vcHRzLFxuICAgICAgXCJhZ2VudFwiLFxuICAgICAgXCJlbmFibGVzWERSXCIsXG4gICAgICBcInBmeFwiLFxuICAgICAgXCJrZXlcIixcbiAgICAgIFwicGFzc3BocmFzZVwiLFxuICAgICAgXCJjZXJ0XCIsXG4gICAgICBcImNhXCIsXG4gICAgICBcImNpcGhlcnNcIixcbiAgICAgIFwicmVqZWN0VW5hdXRob3JpemVkXCIsXG4gICAgICBcImF1dG9VbnJlZlwiXG4gICAgKTtcbiAgICBvcHRzLnhkb21haW4gPSAhIXRoaXMub3B0cy54ZDtcbiAgICBvcHRzLnhzY2hlbWUgPSAhIXRoaXMub3B0cy54cztcblxuICAgIGNvbnN0IHhociA9ICh0aGlzLnhociA9IG5ldyBYTUxIdHRwUmVxdWVzdChvcHRzKSk7XG5cbiAgICB0cnkge1xuICAgICAgZGVidWcoXCJ4aHIgb3BlbiAlczogJXNcIiwgdGhpcy5tZXRob2QsIHRoaXMudXJpKTtcbiAgICAgIHhoci5vcGVuKHRoaXMubWV0aG9kLCB0aGlzLnVyaSwgdGhpcy5hc3luYyk7XG4gICAgICB0cnkge1xuICAgICAgICBpZiAodGhpcy5vcHRzLmV4dHJhSGVhZGVycykge1xuICAgICAgICAgIHhoci5zZXREaXNhYmxlSGVhZGVyQ2hlY2sgJiYgeGhyLnNldERpc2FibGVIZWFkZXJDaGVjayh0cnVlKTtcbiAgICAgICAgICBmb3IgKGxldCBpIGluIHRoaXMub3B0cy5leHRyYUhlYWRlcnMpIHtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzLmhhc093blByb3BlcnR5KGkpKSB7XG4gICAgICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKGksIHRoaXMub3B0cy5leHRyYUhlYWRlcnNbaV0pO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBjYXRjaCAoZSkge31cblxuICAgICAgaWYgKFwiUE9TVFwiID09PSB0aGlzLm1ldGhvZCkge1xuICAgICAgICB0cnkge1xuICAgICAgICAgIHhoci5zZXRSZXF1ZXN0SGVhZGVyKFwiQ29udGVudC10eXBlXCIsIFwidGV4dC9wbGFpbjtjaGFyc2V0PVVURi04XCIpO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuXG4gICAgICB0cnkge1xuICAgICAgICB4aHIuc2V0UmVxdWVzdEhlYWRlcihcIkFjY2VwdFwiLCBcIiovKlwiKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG5cbiAgICAgIC8vIGllNiBjaGVja1xuICAgICAgaWYgKFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyKSB7XG4gICAgICAgIHhoci53aXRoQ3JlZGVudGlhbHMgPSB0aGlzLm9wdHMud2l0aENyZWRlbnRpYWxzO1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5vcHRzLnJlcXVlc3RUaW1lb3V0KSB7XG4gICAgICAgIHhoci50aW1lb3V0ID0gdGhpcy5vcHRzLnJlcXVlc3RUaW1lb3V0O1xuICAgICAgfVxuXG4gICAgICBpZiAodGhpcy5oYXNYRFIoKSkge1xuICAgICAgICB4aHIub25sb2FkID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMub25Mb2FkKCk7XG4gICAgICAgIH07XG4gICAgICAgIHhoci5vbmVycm9yID0gKCkgPT4ge1xuICAgICAgICAgIHRoaXMub25FcnJvcih4aHIucmVzcG9uc2VUZXh0KTtcbiAgICAgICAgfTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSAoKSA9PiB7XG4gICAgICAgICAgaWYgKDQgIT09IHhoci5yZWFkeVN0YXRlKSByZXR1cm47XG4gICAgICAgICAgaWYgKDIwMCA9PT0geGhyLnN0YXR1cyB8fCAxMjIzID09PSB4aHIuc3RhdHVzKSB7XG4gICAgICAgICAgICB0aGlzLm9uTG9hZCgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAvLyBtYWtlIHN1cmUgdGhlIGBlcnJvcmAgZXZlbnQgaGFuZGxlciB0aGF0J3MgdXNlci1zZXRcbiAgICAgICAgICAgIC8vIGRvZXMgbm90IHRocm93IGluIHRoZSBzYW1lIHRpY2sgYW5kIGdldHMgY2F1Z2h0IGhlcmVcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICB0aGlzLm9uRXJyb3IodHlwZW9mIHhoci5zdGF0dXMgPT09IFwibnVtYmVyXCIgPyB4aHIuc3RhdHVzIDogMCk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgICB9XG4gICAgICAgIH07XG4gICAgICB9XG5cbiAgICAgIGRlYnVnKFwieGhyIGRhdGEgJXNcIiwgdGhpcy5kYXRhKTtcbiAgICAgIHhoci5zZW5kKHRoaXMuZGF0YSk7XG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgLy8gTmVlZCB0byBkZWZlciBzaW5jZSAuY3JlYXRlKCkgaXMgY2FsbGVkIGRpcmVjdGx5IGZyb20gdGhlIGNvbnN0cnVjdG9yXG4gICAgICAvLyBhbmQgdGh1cyB0aGUgJ2Vycm9yJyBldmVudCBjYW4gb25seSBiZSBvbmx5IGJvdW5kICphZnRlciogdGhpcyBleGNlcHRpb25cbiAgICAgIC8vIG9jY3Vycy4gIFRoZXJlZm9yZSwgYWxzbywgd2UgY2Fubm90IHRocm93IGhlcmUgYXQgYWxsLlxuICAgICAgc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgIHRoaXMub25FcnJvcihlKTtcbiAgICAgIH0sIDApO1xuICAgICAgcmV0dXJuO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgZG9jdW1lbnQgIT09IFwidW5kZWZpbmVkXCIpIHtcbiAgICAgIHRoaXMuaW5kZXggPSBSZXF1ZXN0LnJlcXVlc3RzQ291bnQrKztcbiAgICAgIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF0gPSB0aGlzO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDYWxsZWQgdXBvbiBzdWNjZXNzZnVsIHJlc3BvbnNlLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIG9uU3VjY2VzcygpIHtcbiAgICB0aGlzLmVtaXQoXCJzdWNjZXNzXCIpO1xuICAgIHRoaXMuY2xlYW51cCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCBpZiB3ZSBoYXZlIGRhdGEuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25EYXRhKGRhdGEpIHtcbiAgICB0aGlzLmVtaXQoXCJkYXRhXCIsIGRhdGEpO1xuICAgIHRoaXMub25TdWNjZXNzKCk7XG4gIH1cblxuICAvKipcbiAgICogQ2FsbGVkIHVwb24gZXJyb3IuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25FcnJvcihlcnIpIHtcbiAgICB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIHRoaXMuY2xlYW51cCh0cnVlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbGVhbnMgdXAgaG91c2UuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgY2xlYW51cChmcm9tRXJyb3IpIHtcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiA9PT0gdHlwZW9mIHRoaXMueGhyIHx8IG51bGwgPT09IHRoaXMueGhyKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIC8vIHhtbGh0dHByZXF1ZXN0XG4gICAgaWYgKHRoaXMuaGFzWERSKCkpIHtcbiAgICAgIHRoaXMueGhyLm9ubG9hZCA9IHRoaXMueGhyLm9uZXJyb3IgPSBlbXB0eTtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy54aHIub25yZWFkeXN0YXRlY2hhbmdlID0gZW1wdHk7XG4gICAgfVxuXG4gICAgaWYgKGZyb21FcnJvcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgdGhpcy54aHIuYWJvcnQoKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHt9XG4gICAgfVxuXG4gICAgaWYgKHR5cGVvZiBkb2N1bWVudCAhPT0gXCJ1bmRlZmluZWRcIikge1xuICAgICAgZGVsZXRlIFJlcXVlc3QucmVxdWVzdHNbdGhpcy5pbmRleF07XG4gICAgfVxuXG4gICAgdGhpcy54aHIgPSBudWxsO1xuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGxvYWQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25Mb2FkKCkge1xuICAgIGNvbnN0IGRhdGEgPSB0aGlzLnhoci5yZXNwb25zZVRleHQ7XG4gICAgaWYgKGRhdGEgIT09IG51bGwpIHtcbiAgICAgIHRoaXMub25EYXRhKGRhdGEpO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBpdCBoYXMgWERvbWFpblJlcXVlc3QuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgaGFzWERSKCkge1xuICAgIHJldHVybiB0eXBlb2YgWERvbWFpblJlcXVlc3QgIT09IFwidW5kZWZpbmVkXCIgJiYgIXRoaXMueHMgJiYgdGhpcy5lbmFibGVzWERSO1xuICB9XG5cbiAgLyoqXG4gICAqIEFib3J0cyB0aGUgcmVxdWVzdC5cbiAgICpcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGFib3J0KCkge1xuICAgIHRoaXMuY2xlYW51cCgpO1xuICB9XG59XG5cbi8qKlxuICogQWJvcnRzIHBlbmRpbmcgcmVxdWVzdHMgd2hlbiB1bmxvYWRpbmcgdGhlIHdpbmRvdy4gVGhpcyBpcyBuZWVkZWQgdG8gcHJldmVudFxuICogbWVtb3J5IGxlYWtzIChlLmcuIHdoZW4gdXNpbmcgSUUpIGFuZCB0byBlbnN1cmUgdGhhdCBubyBzcHVyaW91cyBlcnJvciBpc1xuICogZW1pdHRlZC5cbiAqL1xuXG5SZXF1ZXN0LnJlcXVlc3RzQ291bnQgPSAwO1xuUmVxdWVzdC5yZXF1ZXN0cyA9IHt9O1xuXG5pZiAodHlwZW9mIGRvY3VtZW50ICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gIGlmICh0eXBlb2YgYXR0YWNoRXZlbnQgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGF0dGFjaEV2ZW50KFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlcik7XG4gIH0gZWxzZSBpZiAodHlwZW9mIGFkZEV2ZW50TGlzdGVuZXIgPT09IFwiZnVuY3Rpb25cIikge1xuICAgIGNvbnN0IHRlcm1pbmF0aW9uRXZlbnQgPSBcIm9ucGFnZWhpZGVcIiBpbiBnbG9iYWxUaGlzID8gXCJwYWdlaGlkZVwiIDogXCJ1bmxvYWRcIjtcbiAgICBhZGRFdmVudExpc3RlbmVyKHRlcm1pbmF0aW9uRXZlbnQsIHVubG9hZEhhbmRsZXIsIGZhbHNlKTtcbiAgfVxufVxuXG5mdW5jdGlvbiB1bmxvYWRIYW5kbGVyKCkge1xuICBmb3IgKGxldCBpIGluIFJlcXVlc3QucmVxdWVzdHMpIHtcbiAgICBpZiAoUmVxdWVzdC5yZXF1ZXN0cy5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgUmVxdWVzdC5yZXF1ZXN0c1tpXS5hYm9ydCgpO1xuICAgIH1cbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFhIUjtcbm1vZHVsZS5leHBvcnRzLlJlcXVlc3QgPSBSZXF1ZXN0O1xuIiwiY29uc3QgVHJhbnNwb3J0ID0gcmVxdWlyZShcIi4uL3RyYW5zcG9ydFwiKTtcbmNvbnN0IHBhcnNlcXMgPSByZXF1aXJlKFwicGFyc2Vxc1wiKTtcbmNvbnN0IHBhcnNlciA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tcGFyc2VyXCIpO1xuY29uc3QgeWVhc3QgPSByZXF1aXJlKFwieWVhc3RcIik7XG5cbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDpwb2xsaW5nXCIpO1xuXG5jbGFzcyBQb2xsaW5nIGV4dGVuZHMgVHJhbnNwb3J0IHtcbiAgLyoqXG4gICAqIFRyYW5zcG9ydCBuYW1lLlxuICAgKi9cbiAgZ2V0IG5hbWUoKSB7XG4gICAgcmV0dXJuIFwicG9sbGluZ1wiO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHRoZSBzb2NrZXQgKHRyaWdnZXJzIHBvbGxpbmcpLiBXZSB3cml0ZSBhIFBJTkcgbWVzc2FnZSB0byBkZXRlcm1pbmVcbiAgICogd2hlbiB0aGUgdHJhbnNwb3J0IGlzIG9wZW4uXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9PcGVuKCkge1xuICAgIHRoaXMucG9sbCgpO1xuICB9XG5cbiAgLyoqXG4gICAqIFBhdXNlcyBwb2xsaW5nLlxuICAgKlxuICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBjYWxsYmFjayB1cG9uIGJ1ZmZlcnMgYXJlIGZsdXNoZWQgYW5kIHRyYW5zcG9ydCBpcyBwYXVzZWRcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBwYXVzZShvblBhdXNlKSB7XG4gICAgdGhpcy5yZWFkeVN0YXRlID0gXCJwYXVzaW5nXCI7XG5cbiAgICBjb25zdCBwYXVzZSA9ICgpID0+IHtcbiAgICAgIGRlYnVnKFwicGF1c2VkXCIpO1xuICAgICAgdGhpcy5yZWFkeVN0YXRlID0gXCJwYXVzZWRcIjtcbiAgICAgIG9uUGF1c2UoKTtcbiAgICB9O1xuXG4gICAgaWYgKHRoaXMucG9sbGluZyB8fCAhdGhpcy53cml0YWJsZSkge1xuICAgICAgbGV0IHRvdGFsID0gMDtcblxuICAgICAgaWYgKHRoaXMucG9sbGluZykge1xuICAgICAgICBkZWJ1ZyhcIndlIGFyZSBjdXJyZW50bHkgcG9sbGluZyAtIHdhaXRpbmcgdG8gcGF1c2VcIik7XG4gICAgICAgIHRvdGFsKys7XG4gICAgICAgIHRoaXMub25jZShcInBvbGxDb21wbGV0ZVwiLCBmdW5jdGlvbigpIHtcbiAgICAgICAgICBkZWJ1ZyhcInByZS1wYXVzZSBwb2xsaW5nIGNvbXBsZXRlXCIpO1xuICAgICAgICAgIC0tdG90YWwgfHwgcGF1c2UoKTtcbiAgICAgICAgfSk7XG4gICAgICB9XG5cbiAgICAgIGlmICghdGhpcy53cml0YWJsZSkge1xuICAgICAgICBkZWJ1ZyhcIndlIGFyZSBjdXJyZW50bHkgd3JpdGluZyAtIHdhaXRpbmcgdG8gcGF1c2VcIik7XG4gICAgICAgIHRvdGFsKys7XG4gICAgICAgIHRoaXMub25jZShcImRyYWluXCIsIGZ1bmN0aW9uKCkge1xuICAgICAgICAgIGRlYnVnKFwicHJlLXBhdXNlIHdyaXRpbmcgY29tcGxldGVcIik7XG4gICAgICAgICAgLS10b3RhbCB8fCBwYXVzZSgpO1xuICAgICAgICB9KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgcGF1c2UoKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogU3RhcnRzIHBvbGxpbmcgY3ljbGUuXG4gICAqXG4gICAqIEBhcGkgcHVibGljXG4gICAqL1xuICBwb2xsKCkge1xuICAgIGRlYnVnKFwicG9sbGluZ1wiKTtcbiAgICB0aGlzLnBvbGxpbmcgPSB0cnVlO1xuICAgIHRoaXMuZG9Qb2xsKCk7XG4gICAgdGhpcy5lbWl0KFwicG9sbFwiKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPdmVybG9hZHMgb25EYXRhIHRvIGRldGVjdCBwYXlsb2Fkcy5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBvbkRhdGEoZGF0YSkge1xuICAgIGRlYnVnKFwicG9sbGluZyBnb3QgZGF0YSAlc1wiLCBkYXRhKTtcbiAgICBjb25zdCBjYWxsYmFjayA9IHBhY2tldCA9PiB7XG4gICAgICAvLyBpZiBpdHMgdGhlIGZpcnN0IG1lc3NhZ2Ugd2UgY29uc2lkZXIgdGhlIHRyYW5zcG9ydCBvcGVuXG4gICAgICBpZiAoXCJvcGVuaW5nXCIgPT09IHRoaXMucmVhZHlTdGF0ZSAmJiBwYWNrZXQudHlwZSA9PT0gXCJvcGVuXCIpIHtcbiAgICAgICAgdGhpcy5vbk9wZW4oKTtcbiAgICAgIH1cblxuICAgICAgLy8gaWYgaXRzIGEgY2xvc2UgcGFja2V0LCB3ZSBjbG9zZSB0aGUgb25nb2luZyByZXF1ZXN0c1xuICAgICAgaWYgKFwiY2xvc2VcIiA9PT0gcGFja2V0LnR5cGUpIHtcbiAgICAgICAgdGhpcy5vbkNsb3NlKCk7XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIH1cblxuICAgICAgLy8gb3RoZXJ3aXNlIGJ5cGFzcyBvbkRhdGEgYW5kIGhhbmRsZSB0aGUgbWVzc2FnZVxuICAgICAgdGhpcy5vblBhY2tldChwYWNrZXQpO1xuICAgIH07XG5cbiAgICAvLyBkZWNvZGUgcGF5bG9hZFxuICAgIHBhcnNlci5kZWNvZGVQYXlsb2FkKGRhdGEsIHRoaXMuc29ja2V0LmJpbmFyeVR5cGUpLmZvckVhY2goY2FsbGJhY2spO1xuXG4gICAgLy8gaWYgYW4gZXZlbnQgZGlkIG5vdCB0cmlnZ2VyIGNsb3NpbmdcbiAgICBpZiAoXCJjbG9zZWRcIiAhPT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAvLyBpZiB3ZSBnb3QgZGF0YSB3ZSdyZSBub3QgcG9sbGluZ1xuICAgICAgdGhpcy5wb2xsaW5nID0gZmFsc2U7XG4gICAgICB0aGlzLmVtaXQoXCJwb2xsQ29tcGxldGVcIik7XG5cbiAgICAgIGlmIChcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICAgIHRoaXMucG9sbCgpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZGVidWcoJ2lnbm9yaW5nIHBvbGwgLSB0cmFuc3BvcnQgc3RhdGUgXCIlc1wiJywgdGhpcy5yZWFkeVN0YXRlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogRm9yIHBvbGxpbmcsIHNlbmQgYSBjbG9zZSBwYWNrZXQuXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgZG9DbG9zZSgpIHtcbiAgICBjb25zdCBjbG9zZSA9ICgpID0+IHtcbiAgICAgIGRlYnVnKFwid3JpdGluZyBjbG9zZSBwYWNrZXRcIik7XG4gICAgICB0aGlzLndyaXRlKFt7IHR5cGU6IFwiY2xvc2VcIiB9XSk7XG4gICAgfTtcblxuICAgIGlmIChcIm9wZW5cIiA9PT0gdGhpcy5yZWFkeVN0YXRlKSB7XG4gICAgICBkZWJ1ZyhcInRyYW5zcG9ydCBvcGVuIC0gY2xvc2luZ1wiKTtcbiAgICAgIGNsb3NlKCk7XG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGluIGNhc2Ugd2UncmUgdHJ5aW5nIHRvIGNsb3NlIHdoaWxlXG4gICAgICAvLyBoYW5kc2hha2luZyBpcyBpbiBwcm9ncmVzcyAoR0gtMTY0KVxuICAgICAgZGVidWcoXCJ0cmFuc3BvcnQgbm90IG9wZW4gLSBkZWZlcnJpbmcgY2xvc2VcIik7XG4gICAgICB0aGlzLm9uY2UoXCJvcGVuXCIsIGNsb3NlKTtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogV3JpdGVzIGEgcGFja2V0cyBwYXlsb2FkLlxuICAgKlxuICAgKiBAcGFyYW0ge0FycmF5fSBkYXRhIHBhY2tldHNcbiAgICogQHBhcmFtIHtGdW5jdGlvbn0gZHJhaW4gY2FsbGJhY2tcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB3cml0ZShwYWNrZXRzKSB7XG4gICAgdGhpcy53cml0YWJsZSA9IGZhbHNlO1xuXG4gICAgcGFyc2VyLmVuY29kZVBheWxvYWQocGFja2V0cywgZGF0YSA9PiB7XG4gICAgICB0aGlzLmRvV3JpdGUoZGF0YSwgKCkgPT4ge1xuICAgICAgICB0aGlzLndyaXRhYmxlID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5lbWl0KFwiZHJhaW5cIik7XG4gICAgICB9KTtcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZXMgdXJpIGZvciBjb25uZWN0aW9uLlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIHVyaSgpIHtcbiAgICBsZXQgcXVlcnkgPSB0aGlzLnF1ZXJ5IHx8IHt9O1xuICAgIGNvbnN0IHNjaGVtYSA9IHRoaXMub3B0cy5zZWN1cmUgPyBcImh0dHBzXCIgOiBcImh0dHBcIjtcbiAgICBsZXQgcG9ydCA9IFwiXCI7XG5cbiAgICAvLyBjYWNoZSBidXN0aW5nIGlzIGZvcmNlZFxuICAgIGlmIChmYWxzZSAhPT0gdGhpcy5vcHRzLnRpbWVzdGFtcFJlcXVlc3RzKSB7XG4gICAgICBxdWVyeVt0aGlzLm9wdHMudGltZXN0YW1wUGFyYW1dID0geWVhc3QoKTtcbiAgICB9XG5cbiAgICBpZiAoIXRoaXMuc3VwcG9ydHNCaW5hcnkgJiYgIXF1ZXJ5LnNpZCkge1xuICAgICAgcXVlcnkuYjY0ID0gMTtcbiAgICB9XG5cbiAgICBxdWVyeSA9IHBhcnNlcXMuZW5jb2RlKHF1ZXJ5KTtcblxuICAgIC8vIGF2b2lkIHBvcnQgaWYgZGVmYXVsdCBmb3Igc2NoZW1hXG4gICAgaWYgKFxuICAgICAgdGhpcy5vcHRzLnBvcnQgJiZcbiAgICAgICgoXCJodHRwc1wiID09PSBzY2hlbWEgJiYgTnVtYmVyKHRoaXMub3B0cy5wb3J0KSAhPT0gNDQzKSB8fFxuICAgICAgICAoXCJodHRwXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA4MCkpXG4gICAgKSB7XG4gICAgICBwb3J0ID0gXCI6XCIgKyB0aGlzLm9wdHMucG9ydDtcbiAgICB9XG5cbiAgICAvLyBwcmVwZW5kID8gdG8gcXVlcnlcbiAgICBpZiAocXVlcnkubGVuZ3RoKSB7XG4gICAgICBxdWVyeSA9IFwiP1wiICsgcXVlcnk7XG4gICAgfVxuXG4gICAgY29uc3QgaXB2NiA9IHRoaXMub3B0cy5ob3N0bmFtZS5pbmRleE9mKFwiOlwiKSAhPT0gLTE7XG4gICAgcmV0dXJuIChcbiAgICAgIHNjaGVtYSArXG4gICAgICBcIjovL1wiICtcbiAgICAgIChpcHY2ID8gXCJbXCIgKyB0aGlzLm9wdHMuaG9zdG5hbWUgKyBcIl1cIiA6IHRoaXMub3B0cy5ob3N0bmFtZSkgK1xuICAgICAgcG9ydCArXG4gICAgICB0aGlzLm9wdHMucGF0aCArXG4gICAgICBxdWVyeVxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBQb2xsaW5nO1xuIiwiY29uc3QgZ2xvYmFsVGhpcyA9IHJlcXVpcmUoXCIuLi9nbG9iYWxUaGlzXCIpO1xuY29uc3QgbmV4dFRpY2sgPSAoKCkgPT4ge1xuICBjb25zdCBpc1Byb21pc2VBdmFpbGFibGUgPVxuICAgIHR5cGVvZiBQcm9taXNlID09PSBcImZ1bmN0aW9uXCIgJiYgdHlwZW9mIFByb21pc2UucmVzb2x2ZSA9PT0gXCJmdW5jdGlvblwiO1xuICBpZiAoaXNQcm9taXNlQXZhaWxhYmxlKSB7XG4gICAgcmV0dXJuIGNiID0+IFByb21pc2UucmVzb2x2ZSgpLnRoZW4oY2IpO1xuICB9IGVsc2Uge1xuICAgIHJldHVybiBjYiA9PiBzZXRUaW1lb3V0KGNiLCAwKTtcbiAgfVxufSkoKTtcblxubW9kdWxlLmV4cG9ydHMgPSB7XG4gIFdlYlNvY2tldDogZ2xvYmFsVGhpcy5XZWJTb2NrZXQgfHwgZ2xvYmFsVGhpcy5Nb3pXZWJTb2NrZXQsXG4gIHVzaW5nQnJvd3NlcldlYlNvY2tldDogdHJ1ZSxcbiAgZGVmYXVsdEJpbmFyeVR5cGU6IFwiYXJyYXlidWZmZXJcIixcbiAgbmV4dFRpY2tcbn07XG4iLCJjb25zdCBUcmFuc3BvcnQgPSByZXF1aXJlKFwiLi4vdHJhbnNwb3J0XCIpO1xuY29uc3QgcGFyc2VyID0gcmVxdWlyZShcImVuZ2luZS5pby1wYXJzZXJcIik7XG5jb25zdCBwYXJzZXFzID0gcmVxdWlyZShcInBhcnNlcXNcIik7XG5jb25zdCB5ZWFzdCA9IHJlcXVpcmUoXCJ5ZWFzdFwiKTtcbmNvbnN0IHsgcGljayB9ID0gcmVxdWlyZShcIi4uL3V0aWxcIik7XG5jb25zdCB7XG4gIFdlYlNvY2tldCxcbiAgdXNpbmdCcm93c2VyV2ViU29ja2V0LFxuICBkZWZhdWx0QmluYXJ5VHlwZSxcbiAgbmV4dFRpY2tcbn0gPSByZXF1aXJlKFwiLi93ZWJzb2NrZXQtY29uc3RydWN0b3JcIik7XG5cbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwiZW5naW5lLmlvLWNsaWVudDp3ZWJzb2NrZXRcIik7XG5cbi8vIGRldGVjdCBSZWFjdE5hdGl2ZSBlbnZpcm9ubWVudFxuY29uc3QgaXNSZWFjdE5hdGl2ZSA9XG4gIHR5cGVvZiBuYXZpZ2F0b3IgIT09IFwidW5kZWZpbmVkXCIgJiZcbiAgdHlwZW9mIG5hdmlnYXRvci5wcm9kdWN0ID09PSBcInN0cmluZ1wiICYmXG4gIG5hdmlnYXRvci5wcm9kdWN0LnRvTG93ZXJDYXNlKCkgPT09IFwicmVhY3RuYXRpdmVcIjtcblxuY2xhc3MgV1MgZXh0ZW5kcyBUcmFuc3BvcnQge1xuICAvKipcbiAgICogV2ViU29ja2V0IHRyYW5zcG9ydCBjb25zdHJ1Y3Rvci5cbiAgICpcbiAgICogQGFwaSB7T2JqZWN0fSBjb25uZWN0aW9uIG9wdGlvbnNcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGNvbnN0cnVjdG9yKG9wdHMpIHtcbiAgICBzdXBlcihvcHRzKTtcblxuICAgIHRoaXMuc3VwcG9ydHNCaW5hcnkgPSAhb3B0cy5mb3JjZUJhc2U2NDtcbiAgfVxuXG4gIC8qKlxuICAgKiBUcmFuc3BvcnQgbmFtZS5cbiAgICpcbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGdldCBuYW1lKCkge1xuICAgIHJldHVybiBcIndlYnNvY2tldFwiO1xuICB9XG5cbiAgLyoqXG4gICAqIE9wZW5zIHNvY2tldC5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICBkb09wZW4oKSB7XG4gICAgaWYgKCF0aGlzLmNoZWNrKCkpIHtcbiAgICAgIC8vIGxldCBwcm9iZSB0aW1lb3V0XG4gICAgICByZXR1cm47XG4gICAgfVxuXG4gICAgY29uc3QgdXJpID0gdGhpcy51cmkoKTtcbiAgICBjb25zdCBwcm90b2NvbHMgPSB0aGlzLm9wdHMucHJvdG9jb2xzO1xuXG4gICAgLy8gUmVhY3QgTmF0aXZlIG9ubHkgc3VwcG9ydHMgdGhlICdoZWFkZXJzJyBvcHRpb24sIGFuZCB3aWxsIHByaW50IGEgd2FybmluZyBpZiBhbnl0aGluZyBlbHNlIGlzIHBhc3NlZFxuICAgIGNvbnN0IG9wdHMgPSBpc1JlYWN0TmF0aXZlXG4gICAgICA/IHt9XG4gICAgICA6IHBpY2soXG4gICAgICAgICAgdGhpcy5vcHRzLFxuICAgICAgICAgIFwiYWdlbnRcIixcbiAgICAgICAgICBcInBlck1lc3NhZ2VEZWZsYXRlXCIsXG4gICAgICAgICAgXCJwZnhcIixcbiAgICAgICAgICBcImtleVwiLFxuICAgICAgICAgIFwicGFzc3BocmFzZVwiLFxuICAgICAgICAgIFwiY2VydFwiLFxuICAgICAgICAgIFwiY2FcIixcbiAgICAgICAgICBcImNpcGhlcnNcIixcbiAgICAgICAgICBcInJlamVjdFVuYXV0aG9yaXplZFwiLFxuICAgICAgICAgIFwibG9jYWxBZGRyZXNzXCIsXG4gICAgICAgICAgXCJwcm90b2NvbFZlcnNpb25cIixcbiAgICAgICAgICBcIm9yaWdpblwiLFxuICAgICAgICAgIFwibWF4UGF5bG9hZFwiLFxuICAgICAgICAgIFwiZmFtaWx5XCIsXG4gICAgICAgICAgXCJjaGVja1NlcnZlcklkZW50aXR5XCJcbiAgICAgICAgKTtcblxuICAgIGlmICh0aGlzLm9wdHMuZXh0cmFIZWFkZXJzKSB7XG4gICAgICBvcHRzLmhlYWRlcnMgPSB0aGlzLm9wdHMuZXh0cmFIZWFkZXJzO1xuICAgIH1cblxuICAgIHRyeSB7XG4gICAgICB0aGlzLndzID1cbiAgICAgICAgdXNpbmdCcm93c2VyV2ViU29ja2V0ICYmICFpc1JlYWN0TmF0aXZlXG4gICAgICAgICAgPyBwcm90b2NvbHNcbiAgICAgICAgICAgID8gbmV3IFdlYlNvY2tldCh1cmksIHByb3RvY29scylcbiAgICAgICAgICAgIDogbmV3IFdlYlNvY2tldCh1cmkpXG4gICAgICAgICAgOiBuZXcgV2ViU29ja2V0KHVyaSwgcHJvdG9jb2xzLCBvcHRzKTtcbiAgICB9IGNhdGNoIChlcnIpIHtcbiAgICAgIHJldHVybiB0aGlzLmVtaXQoXCJlcnJvclwiLCBlcnIpO1xuICAgIH1cblxuICAgIHRoaXMud3MuYmluYXJ5VHlwZSA9IHRoaXMuc29ja2V0LmJpbmFyeVR5cGUgfHwgZGVmYXVsdEJpbmFyeVR5cGU7XG5cbiAgICB0aGlzLmFkZEV2ZW50TGlzdGVuZXJzKCk7XG4gIH1cblxuICAvKipcbiAgICogQWRkcyBldmVudCBsaXN0ZW5lcnMgdG8gdGhlIHNvY2tldFxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGFkZEV2ZW50TGlzdGVuZXJzKCkge1xuICAgIHRoaXMud3Mub25vcGVuID0gKCkgPT4ge1xuICAgICAgaWYgKHRoaXMub3B0cy5hdXRvVW5yZWYpIHtcbiAgICAgICAgdGhpcy53cy5fc29ja2V0LnVucmVmKCk7XG4gICAgICB9XG4gICAgICB0aGlzLm9uT3BlbigpO1xuICAgIH07XG4gICAgdGhpcy53cy5vbmNsb3NlID0gdGhpcy5vbkNsb3NlLmJpbmQodGhpcyk7XG4gICAgdGhpcy53cy5vbm1lc3NhZ2UgPSBldiA9PiB0aGlzLm9uRGF0YShldi5kYXRhKTtcbiAgICB0aGlzLndzLm9uZXJyb3IgPSBlID0+IHRoaXMub25FcnJvcihcIndlYnNvY2tldCBlcnJvclwiLCBlKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBXcml0ZXMgZGF0YSB0byBzb2NrZXQuXG4gICAqXG4gICAqIEBwYXJhbSB7QXJyYXl9IGFycmF5IG9mIHBhY2tldHMuXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgd3JpdGUocGFja2V0cykge1xuICAgIHRoaXMud3JpdGFibGUgPSBmYWxzZTtcblxuICAgIC8vIGVuY29kZVBhY2tldCBlZmZpY2llbnQgYXMgaXQgdXNlcyBXUyBmcmFtaW5nXG4gICAgLy8gbm8gbmVlZCBmb3IgZW5jb2RlUGF5bG9hZFxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgcGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgICAgY29uc3QgcGFja2V0ID0gcGFja2V0c1tpXTtcbiAgICAgIGNvbnN0IGxhc3RQYWNrZXQgPSBpID09PSBwYWNrZXRzLmxlbmd0aCAtIDE7XG5cbiAgICAgIHBhcnNlci5lbmNvZGVQYWNrZXQocGFja2V0LCB0aGlzLnN1cHBvcnRzQmluYXJ5LCBkYXRhID0+IHtcbiAgICAgICAgLy8gYWx3YXlzIGNyZWF0ZSBhIG5ldyBvYmplY3QgKEdILTQzNylcbiAgICAgICAgY29uc3Qgb3B0cyA9IHt9O1xuICAgICAgICBpZiAoIXVzaW5nQnJvd3NlcldlYlNvY2tldCkge1xuICAgICAgICAgIGlmIChwYWNrZXQub3B0aW9ucykge1xuICAgICAgICAgICAgb3B0cy5jb21wcmVzcyA9IHBhY2tldC5vcHRpb25zLmNvbXByZXNzO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmICh0aGlzLm9wdHMucGVyTWVzc2FnZURlZmxhdGUpIHtcbiAgICAgICAgICAgIGNvbnN0IGxlbiA9XG4gICAgICAgICAgICAgIFwic3RyaW5nXCIgPT09IHR5cGVvZiBkYXRhID8gQnVmZmVyLmJ5dGVMZW5ndGgoZGF0YSkgOiBkYXRhLmxlbmd0aDtcbiAgICAgICAgICAgIGlmIChsZW4gPCB0aGlzLm9wdHMucGVyTWVzc2FnZURlZmxhdGUudGhyZXNob2xkKSB7XG4gICAgICAgICAgICAgIG9wdHMuY29tcHJlc3MgPSBmYWxzZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTb21ldGltZXMgdGhlIHdlYnNvY2tldCBoYXMgYWxyZWFkeSBiZWVuIGNsb3NlZCBidXQgdGhlIGJyb3dzZXIgZGlkbid0XG4gICAgICAgIC8vIGhhdmUgYSBjaGFuY2Ugb2YgaW5mb3JtaW5nIHVzIGFib3V0IGl0IHlldCwgaW4gdGhhdCBjYXNlIHNlbmQgd2lsbFxuICAgICAgICAvLyB0aHJvdyBhbiBlcnJvclxuICAgICAgICB0cnkge1xuICAgICAgICAgIGlmICh1c2luZ0Jyb3dzZXJXZWJTb2NrZXQpIHtcbiAgICAgICAgICAgIC8vIFR5cGVFcnJvciBpcyB0aHJvd24gd2hlbiBwYXNzaW5nIHRoZSBzZWNvbmQgYXJndW1lbnQgb24gU2FmYXJpXG4gICAgICAgICAgICB0aGlzLndzLnNlbmQoZGF0YSk7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMud3Muc2VuZChkYXRhLCBvcHRzKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBkZWJ1ZyhcIndlYnNvY2tldCBjbG9zZWQgYmVmb3JlIG9uY2xvc2UgZXZlbnRcIik7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAobGFzdFBhY2tldCkge1xuICAgICAgICAgIC8vIGZha2UgZHJhaW5cbiAgICAgICAgICAvLyBkZWZlciB0byBuZXh0IHRpY2sgdG8gYWxsb3cgU29ja2V0IHRvIGNsZWFyIHdyaXRlQnVmZmVyXG4gICAgICAgICAgbmV4dFRpY2soKCkgPT4ge1xuICAgICAgICAgICAgdGhpcy53cml0YWJsZSA9IHRydWU7XG4gICAgICAgICAgICB0aGlzLmVtaXQoXCJkcmFpblwiKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgfSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIENhbGxlZCB1cG9uIGNsb3NlXG4gICAqXG4gICAqIEBhcGkgcHJpdmF0ZVxuICAgKi9cbiAgb25DbG9zZSgpIHtcbiAgICBUcmFuc3BvcnQucHJvdG90eXBlLm9uQ2xvc2UuY2FsbCh0aGlzKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBDbG9zZXMgc29ja2V0LlxuICAgKlxuICAgKiBAYXBpIHByaXZhdGVcbiAgICovXG4gIGRvQ2xvc2UoKSB7XG4gICAgaWYgKHR5cGVvZiB0aGlzLndzICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgICB0aGlzLndzLmNsb3NlKCk7XG4gICAgICB0aGlzLndzID0gbnVsbDtcbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogR2VuZXJhdGVzIHVyaSBmb3IgY29ubmVjdGlvbi5cbiAgICpcbiAgICogQGFwaSBwcml2YXRlXG4gICAqL1xuICB1cmkoKSB7XG4gICAgbGV0IHF1ZXJ5ID0gdGhpcy5xdWVyeSB8fCB7fTtcbiAgICBjb25zdCBzY2hlbWEgPSB0aGlzLm9wdHMuc2VjdXJlID8gXCJ3c3NcIiA6IFwid3NcIjtcbiAgICBsZXQgcG9ydCA9IFwiXCI7XG5cbiAgICAvLyBhdm9pZCBwb3J0IGlmIGRlZmF1bHQgZm9yIHNjaGVtYVxuICAgIGlmIChcbiAgICAgIHRoaXMub3B0cy5wb3J0ICYmXG4gICAgICAoKFwid3NzXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA0NDMpIHx8XG4gICAgICAgIChcIndzXCIgPT09IHNjaGVtYSAmJiBOdW1iZXIodGhpcy5vcHRzLnBvcnQpICE9PSA4MCkpXG4gICAgKSB7XG4gICAgICBwb3J0ID0gXCI6XCIgKyB0aGlzLm9wdHMucG9ydDtcbiAgICB9XG5cbiAgICAvLyBhcHBlbmQgdGltZXN0YW1wIHRvIFVSSVxuICAgIGlmICh0aGlzLm9wdHMudGltZXN0YW1wUmVxdWVzdHMpIHtcbiAgICAgIHF1ZXJ5W3RoaXMub3B0cy50aW1lc3RhbXBQYXJhbV0gPSB5ZWFzdCgpO1xuICAgIH1cblxuICAgIC8vIGNvbW11bmljYXRlIGJpbmFyeSBzdXBwb3J0IGNhcGFiaWxpdGllc1xuICAgIGlmICghdGhpcy5zdXBwb3J0c0JpbmFyeSkge1xuICAgICAgcXVlcnkuYjY0ID0gMTtcbiAgICB9XG5cbiAgICBxdWVyeSA9IHBhcnNlcXMuZW5jb2RlKHF1ZXJ5KTtcblxuICAgIC8vIHByZXBlbmQgPyB0byBxdWVyeVxuICAgIGlmIChxdWVyeS5sZW5ndGgpIHtcbiAgICAgIHF1ZXJ5ID0gXCI/XCIgKyBxdWVyeTtcbiAgICB9XG5cbiAgICBjb25zdCBpcHY2ID0gdGhpcy5vcHRzLmhvc3RuYW1lLmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICByZXR1cm4gKFxuICAgICAgc2NoZW1hICtcbiAgICAgIFwiOi8vXCIgK1xuICAgICAgKGlwdjYgPyBcIltcIiArIHRoaXMub3B0cy5ob3N0bmFtZSArIFwiXVwiIDogdGhpcy5vcHRzLmhvc3RuYW1lKSArXG4gICAgICBwb3J0ICtcbiAgICAgIHRoaXMub3B0cy5wYXRoICtcbiAgICAgIHF1ZXJ5XG4gICAgKTtcbiAgfVxuXG4gIC8qKlxuICAgKiBGZWF0dXJlIGRldGVjdGlvbiBmb3IgV2ViU29ja2V0LlxuICAgKlxuICAgKiBAcmV0dXJuIHtCb29sZWFufSB3aGV0aGVyIHRoaXMgdHJhbnNwb3J0IGlzIGF2YWlsYWJsZS5cbiAgICogQGFwaSBwdWJsaWNcbiAgICovXG4gIGNoZWNrKCkge1xuICAgIHJldHVybiAoXG4gICAgICAhIVdlYlNvY2tldCAmJlxuICAgICAgIShcIl9faW5pdGlhbGl6ZVwiIGluIFdlYlNvY2tldCAmJiB0aGlzLm5hbWUgPT09IFdTLnByb3RvdHlwZS5uYW1lKVxuICAgICk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBXUztcbiIsIm1vZHVsZS5leHBvcnRzLnBpY2sgPSAob2JqLCAuLi5hdHRyKSA9PiB7XG4gIHJldHVybiBhdHRyLnJlZHVjZSgoYWNjLCBrKSA9PiB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrKSkge1xuICAgICAgYWNjW2tdID0gb2JqW2tdO1xuICAgIH1cbiAgICByZXR1cm4gYWNjO1xuICB9LCB7fSk7XG59O1xuIiwiLy8gYnJvd3NlciBzaGltIGZvciB4bWxodHRwcmVxdWVzdCBtb2R1bGVcblxuY29uc3QgaGFzQ09SUyA9IHJlcXVpcmUoXCJoYXMtY29yc1wiKTtcbmNvbnN0IGdsb2JhbFRoaXMgPSByZXF1aXJlKFwiLi9nbG9iYWxUaGlzXCIpO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKG9wdHMpIHtcbiAgY29uc3QgeGRvbWFpbiA9IG9wdHMueGRvbWFpbjtcblxuICAvLyBzY2hlbWUgbXVzdCBiZSBzYW1lIHdoZW4gdXNpZ24gWERvbWFpblJlcXVlc3RcbiAgLy8gaHR0cDovL2Jsb2dzLm1zZG4uY29tL2IvaWVpbnRlcm5hbHMvYXJjaGl2ZS8yMDEwLzA1LzEzL3hkb21haW5yZXF1ZXN0LXJlc3RyaWN0aW9ucy1saW1pdGF0aW9ucy1hbmQtd29ya2Fyb3VuZHMuYXNweFxuICBjb25zdCB4c2NoZW1lID0gb3B0cy54c2NoZW1lO1xuXG4gIC8vIFhEb21haW5SZXF1ZXN0IGhhcyBhIGZsb3cgb2Ygbm90IHNlbmRpbmcgY29va2llLCB0aGVyZWZvcmUgaXQgc2hvdWxkIGJlIGRpc2FibGVkIGFzIGEgZGVmYXVsdC5cbiAgLy8gaHR0cHM6Ly9naXRodWIuY29tL0F1dG9tYXR0aWMvZW5naW5lLmlvLWNsaWVudC9wdWxsLzIxN1xuICBjb25zdCBlbmFibGVzWERSID0gb3B0cy5lbmFibGVzWERSO1xuXG4gIC8vIFhNTEh0dHBSZXF1ZXN0IGNhbiBiZSBkaXNhYmxlZCBvbiBJRVxuICB0cnkge1xuICAgIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgJiYgKCF4ZG9tYWluIHx8IGhhc0NPUlMpKSB7XG4gICAgICByZXR1cm4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG4gICAgfVxuICB9IGNhdGNoIChlKSB7fVxuXG4gIC8vIFVzZSBYRG9tYWluUmVxdWVzdCBmb3IgSUU4IGlmIGVuYWJsZXNYRFIgaXMgdHJ1ZVxuICAvLyBiZWNhdXNlIGxvYWRpbmcgYmFyIGtlZXBzIGZsYXNoaW5nIHdoZW4gdXNpbmcganNvbnAtcG9sbGluZ1xuICAvLyBodHRwczovL2dpdGh1Yi5jb20veXVqaW9zYWthL3NvY2tlLmlvLWllOC1sb2FkaW5nLWV4YW1wbGVcbiAgdHJ5IHtcbiAgICBpZiAoXCJ1bmRlZmluZWRcIiAhPT0gdHlwZW9mIFhEb21haW5SZXF1ZXN0ICYmICF4c2NoZW1lICYmIGVuYWJsZXNYRFIpIHtcbiAgICAgIHJldHVybiBuZXcgWERvbWFpblJlcXVlc3QoKTtcbiAgICB9XG4gIH0gY2F0Y2ggKGUpIHt9XG5cbiAgaWYgKCF4ZG9tYWluKSB7XG4gICAgdHJ5IHtcbiAgICAgIHJldHVybiBuZXcgZ2xvYmFsVGhpc1tbXCJBY3RpdmVcIl0uY29uY2F0KFwiT2JqZWN0XCIpLmpvaW4oXCJYXCIpXShcbiAgICAgICAgXCJNaWNyb3NvZnQuWE1MSFRUUFwiXG4gICAgICApO1xuICAgIH0gY2F0Y2ggKGUpIHt9XG4gIH1cbn07XG4iLCJjb25zdCBQQUNLRVRfVFlQRVMgPSBPYmplY3QuY3JlYXRlKG51bGwpOyAvLyBubyBNYXAgPSBubyBwb2x5ZmlsbFxuUEFDS0VUX1RZUEVTW1wib3BlblwiXSA9IFwiMFwiO1xuUEFDS0VUX1RZUEVTW1wiY2xvc2VcIl0gPSBcIjFcIjtcblBBQ0tFVF9UWVBFU1tcInBpbmdcIl0gPSBcIjJcIjtcblBBQ0tFVF9UWVBFU1tcInBvbmdcIl0gPSBcIjNcIjtcblBBQ0tFVF9UWVBFU1tcIm1lc3NhZ2VcIl0gPSBcIjRcIjtcblBBQ0tFVF9UWVBFU1tcInVwZ3JhZGVcIl0gPSBcIjVcIjtcblBBQ0tFVF9UWVBFU1tcIm5vb3BcIl0gPSBcIjZcIjtcblxuY29uc3QgUEFDS0VUX1RZUEVTX1JFVkVSU0UgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuT2JqZWN0LmtleXMoUEFDS0VUX1RZUEVTKS5mb3JFYWNoKGtleSA9PiB7XG4gIFBBQ0tFVF9UWVBFU19SRVZFUlNFW1BBQ0tFVF9UWVBFU1trZXldXSA9IGtleTtcbn0pO1xuXG5jb25zdCBFUlJPUl9QQUNLRVQgPSB7IHR5cGU6IFwiZXJyb3JcIiwgZGF0YTogXCJwYXJzZXIgZXJyb3JcIiB9O1xuXG5tb2R1bGUuZXhwb3J0cyA9IHtcbiAgUEFDS0VUX1RZUEVTLFxuICBQQUNLRVRfVFlQRVNfUkVWRVJTRSxcbiAgRVJST1JfUEFDS0VUXG59O1xuIiwiY29uc3QgeyBQQUNLRVRfVFlQRVNfUkVWRVJTRSwgRVJST1JfUEFDS0VUIH0gPSByZXF1aXJlKFwiLi9jb21tb25zXCIpO1xuXG5jb25zdCB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgPSB0eXBlb2YgQXJyYXlCdWZmZXIgPT09IFwiZnVuY3Rpb25cIjtcblxubGV0IGJhc2U2NGRlY29kZXI7XG5pZiAod2l0aE5hdGl2ZUFycmF5QnVmZmVyKSB7XG4gIGJhc2U2NGRlY29kZXIgPSByZXF1aXJlKFwiYmFzZTY0LWFycmF5YnVmZmVyXCIpO1xufVxuXG5jb25zdCBkZWNvZGVQYWNrZXQgPSAoZW5jb2RlZFBhY2tldCwgYmluYXJ5VHlwZSkgPT4ge1xuICBpZiAodHlwZW9mIGVuY29kZWRQYWNrZXQgIT09IFwic3RyaW5nXCIpIHtcbiAgICByZXR1cm4ge1xuICAgICAgdHlwZTogXCJtZXNzYWdlXCIsXG4gICAgICBkYXRhOiBtYXBCaW5hcnkoZW5jb2RlZFBhY2tldCwgYmluYXJ5VHlwZSlcbiAgICB9O1xuICB9XG4gIGNvbnN0IHR5cGUgPSBlbmNvZGVkUGFja2V0LmNoYXJBdCgwKTtcbiAgaWYgKHR5cGUgPT09IFwiYlwiKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIHR5cGU6IFwibWVzc2FnZVwiLFxuICAgICAgZGF0YTogZGVjb2RlQmFzZTY0UGFja2V0KGVuY29kZWRQYWNrZXQuc3Vic3RyaW5nKDEpLCBiaW5hcnlUeXBlKVxuICAgIH07XG4gIH1cbiAgY29uc3QgcGFja2V0VHlwZSA9IFBBQ0tFVF9UWVBFU19SRVZFUlNFW3R5cGVdO1xuICBpZiAoIXBhY2tldFR5cGUpIHtcbiAgICByZXR1cm4gRVJST1JfUEFDS0VUO1xuICB9XG4gIHJldHVybiBlbmNvZGVkUGFja2V0Lmxlbmd0aCA+IDFcbiAgICA/IHtcbiAgICAgICAgdHlwZTogUEFDS0VUX1RZUEVTX1JFVkVSU0VbdHlwZV0sXG4gICAgICAgIGRhdGE6IGVuY29kZWRQYWNrZXQuc3Vic3RyaW5nKDEpXG4gICAgICB9XG4gICAgOiB7XG4gICAgICAgIHR5cGU6IFBBQ0tFVF9UWVBFU19SRVZFUlNFW3R5cGVdXG4gICAgICB9O1xufTtcblxuY29uc3QgZGVjb2RlQmFzZTY0UGFja2V0ID0gKGRhdGEsIGJpbmFyeVR5cGUpID0+IHtcbiAgaWYgKGJhc2U2NGRlY29kZXIpIHtcbiAgICBjb25zdCBkZWNvZGVkID0gYmFzZTY0ZGVjb2Rlci5kZWNvZGUoZGF0YSk7XG4gICAgcmV0dXJuIG1hcEJpbmFyeShkZWNvZGVkLCBiaW5hcnlUeXBlKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4geyBiYXNlNjQ6IHRydWUsIGRhdGEgfTsgLy8gZmFsbGJhY2sgZm9yIG9sZCBicm93c2Vyc1xuICB9XG59O1xuXG5jb25zdCBtYXBCaW5hcnkgPSAoZGF0YSwgYmluYXJ5VHlwZSkgPT4ge1xuICBzd2l0Y2ggKGJpbmFyeVR5cGUpIHtcbiAgICBjYXNlIFwiYmxvYlwiOlxuICAgICAgcmV0dXJuIGRhdGEgaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciA/IG5ldyBCbG9iKFtkYXRhXSkgOiBkYXRhO1xuICAgIGNhc2UgXCJhcnJheWJ1ZmZlclwiOlxuICAgIGRlZmF1bHQ6XG4gICAgICByZXR1cm4gZGF0YTsgLy8gYXNzdW1pbmcgdGhlIGRhdGEgaXMgYWxyZWFkeSBhbiBBcnJheUJ1ZmZlclxuICB9XG59O1xuXG5tb2R1bGUuZXhwb3J0cyA9IGRlY29kZVBhY2tldDtcbiIsImNvbnN0IHsgUEFDS0VUX1RZUEVTIH0gPSByZXF1aXJlKFwiLi9jb21tb25zXCIpO1xuXG5jb25zdCB3aXRoTmF0aXZlQmxvYiA9XG4gIHR5cGVvZiBCbG9iID09PSBcImZ1bmN0aW9uXCIgfHxcbiAgKHR5cGVvZiBCbG9iICE9PSBcInVuZGVmaW5lZFwiICYmXG4gICAgT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKEJsb2IpID09PSBcIltvYmplY3QgQmxvYkNvbnN0cnVjdG9yXVwiKTtcbmNvbnN0IHdpdGhOYXRpdmVBcnJheUJ1ZmZlciA9IHR5cGVvZiBBcnJheUJ1ZmZlciA9PT0gXCJmdW5jdGlvblwiO1xuXG4vLyBBcnJheUJ1ZmZlci5pc1ZpZXcgbWV0aG9kIGlzIG5vdCBkZWZpbmVkIGluIElFMTBcbmNvbnN0IGlzVmlldyA9IG9iaiA9PiB7XG4gIHJldHVybiB0eXBlb2YgQXJyYXlCdWZmZXIuaXNWaWV3ID09PSBcImZ1bmN0aW9uXCJcbiAgICA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopXG4gICAgOiBvYmogJiYgb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufTtcblxuY29uc3QgZW5jb2RlUGFja2V0ID0gKHsgdHlwZSwgZGF0YSB9LCBzdXBwb3J0c0JpbmFyeSwgY2FsbGJhY2spID0+IHtcbiAgaWYgKHdpdGhOYXRpdmVCbG9iICYmIGRhdGEgaW5zdGFuY2VvZiBCbG9iKSB7XG4gICAgaWYgKHN1cHBvcnRzQmluYXJ5KSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZGF0YSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBlbmNvZGVCbG9iQXNCYXNlNjQoZGF0YSwgY2FsbGJhY2spO1xuICAgIH1cbiAgfSBlbHNlIGlmIChcbiAgICB3aXRoTmF0aXZlQXJyYXlCdWZmZXIgJiZcbiAgICAoZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyIHx8IGlzVmlldyhkYXRhKSlcbiAgKSB7XG4gICAgaWYgKHN1cHBvcnRzQmluYXJ5KSB7XG4gICAgICByZXR1cm4gY2FsbGJhY2soZGF0YSBpbnN0YW5jZW9mIEFycmF5QnVmZmVyID8gZGF0YSA6IGRhdGEuYnVmZmVyKTtcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGVuY29kZUJsb2JBc0Jhc2U2NChuZXcgQmxvYihbZGF0YV0pLCBjYWxsYmFjayk7XG4gICAgfVxuICB9XG4gIC8vIHBsYWluIHN0cmluZ1xuICByZXR1cm4gY2FsbGJhY2soUEFDS0VUX1RZUEVTW3R5cGVdICsgKGRhdGEgfHwgXCJcIikpO1xufTtcblxuY29uc3QgZW5jb2RlQmxvYkFzQmFzZTY0ID0gKGRhdGEsIGNhbGxiYWNrKSA9PiB7XG4gIGNvbnN0IGZpbGVSZWFkZXIgPSBuZXcgRmlsZVJlYWRlcigpO1xuICBmaWxlUmVhZGVyLm9ubG9hZCA9IGZ1bmN0aW9uKCkge1xuICAgIGNvbnN0IGNvbnRlbnQgPSBmaWxlUmVhZGVyLnJlc3VsdC5zcGxpdChcIixcIilbMV07XG4gICAgY2FsbGJhY2soXCJiXCIgKyBjb250ZW50KTtcbiAgfTtcbiAgcmV0dXJuIGZpbGVSZWFkZXIucmVhZEFzRGF0YVVSTChkYXRhKTtcbn07XG5cbm1vZHVsZS5leHBvcnRzID0gZW5jb2RlUGFja2V0O1xuIiwiY29uc3QgZW5jb2RlUGFja2V0ID0gcmVxdWlyZShcIi4vZW5jb2RlUGFja2V0XCIpO1xuY29uc3QgZGVjb2RlUGFja2V0ID0gcmVxdWlyZShcIi4vZGVjb2RlUGFja2V0XCIpO1xuXG5jb25zdCBTRVBBUkFUT1IgPSBTdHJpbmcuZnJvbUNoYXJDb2RlKDMwKTsgLy8gc2VlIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0RlbGltaXRlciNBU0NJSV9kZWxpbWl0ZWRfdGV4dFxuXG5jb25zdCBlbmNvZGVQYXlsb2FkID0gKHBhY2tldHMsIGNhbGxiYWNrKSA9PiB7XG4gIC8vIHNvbWUgcGFja2V0cyBtYXkgYmUgYWRkZWQgdG8gdGhlIGFycmF5IHdoaWxlIGVuY29kaW5nLCBzbyB0aGUgaW5pdGlhbCBsZW5ndGggbXVzdCBiZSBzYXZlZFxuICBjb25zdCBsZW5ndGggPSBwYWNrZXRzLmxlbmd0aDtcbiAgY29uc3QgZW5jb2RlZFBhY2tldHMgPSBuZXcgQXJyYXkobGVuZ3RoKTtcbiAgbGV0IGNvdW50ID0gMDtcblxuICBwYWNrZXRzLmZvckVhY2goKHBhY2tldCwgaSkgPT4ge1xuICAgIC8vIGZvcmNlIGJhc2U2NCBlbmNvZGluZyBmb3IgYmluYXJ5IHBhY2tldHNcbiAgICBlbmNvZGVQYWNrZXQocGFja2V0LCBmYWxzZSwgZW5jb2RlZFBhY2tldCA9PiB7XG4gICAgICBlbmNvZGVkUGFja2V0c1tpXSA9IGVuY29kZWRQYWNrZXQ7XG4gICAgICBpZiAoKytjb3VudCA9PT0gbGVuZ3RoKSB7XG4gICAgICAgIGNhbGxiYWNrKGVuY29kZWRQYWNrZXRzLmpvaW4oU0VQQVJBVE9SKSk7XG4gICAgICB9XG4gICAgfSk7XG4gIH0pO1xufTtcblxuY29uc3QgZGVjb2RlUGF5bG9hZCA9IChlbmNvZGVkUGF5bG9hZCwgYmluYXJ5VHlwZSkgPT4ge1xuICBjb25zdCBlbmNvZGVkUGFja2V0cyA9IGVuY29kZWRQYXlsb2FkLnNwbGl0KFNFUEFSQVRPUik7XG4gIGNvbnN0IHBhY2tldHMgPSBbXTtcbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBlbmNvZGVkUGFja2V0cy5sZW5ndGg7IGkrKykge1xuICAgIGNvbnN0IGRlY29kZWRQYWNrZXQgPSBkZWNvZGVQYWNrZXQoZW5jb2RlZFBhY2tldHNbaV0sIGJpbmFyeVR5cGUpO1xuICAgIHBhY2tldHMucHVzaChkZWNvZGVkUGFja2V0KTtcbiAgICBpZiAoZGVjb2RlZFBhY2tldC50eXBlID09PSBcImVycm9yXCIpIHtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuICByZXR1cm4gcGFja2V0cztcbn07XG5cbm1vZHVsZS5leHBvcnRzID0ge1xuICBwcm90b2NvbDogNCxcbiAgZW5jb2RlUGFja2V0LFxuICBlbmNvZGVQYXlsb2FkLFxuICBkZWNvZGVQYWNrZXQsXG4gIGRlY29kZVBheWxvYWRcbn07XG4iLCJcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKlxuICogTG9naWMgYm9ycm93ZWQgZnJvbSBNb2Rlcm5penI6XG4gKlxuICogICAtIGh0dHBzOi8vZ2l0aHViLmNvbS9Nb2Rlcm5penIvTW9kZXJuaXpyL2Jsb2IvbWFzdGVyL2ZlYXR1cmUtZGV0ZWN0cy9jb3JzLmpzXG4gKi9cblxudHJ5IHtcbiAgbW9kdWxlLmV4cG9ydHMgPSB0eXBlb2YgWE1MSHR0cFJlcXVlc3QgIT09ICd1bmRlZmluZWQnICYmXG4gICAgJ3dpdGhDcmVkZW50aWFscycgaW4gbmV3IFhNTEh0dHBSZXF1ZXN0KCk7XG59IGNhdGNoIChlcnIpIHtcbiAgLy8gaWYgWE1MSHR0cCBzdXBwb3J0IGlzIGRpc2FibGVkIGluIElFIHRoZW4gaXQgd2lsbCB0aHJvd1xuICAvLyB3aGVuIHRyeWluZyB0byBjcmVhdGVcbiAgbW9kdWxlLmV4cG9ydHMgPSBmYWxzZTtcbn1cbiIsIm1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSgnLi9saWIvbGlua2lmeScpO1xuIiwiJ3VzZSBzdHJpY3QnO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgJ19fZXNNb2R1bGUnLCB7IHZhbHVlOiB0cnVlIH0pO1xuXG4vKipcbiAqIEZpbml0ZSBTdGF0ZSBNYWNoaW5lIGdlbmVyYXRpb24gdXRpbGl0aWVzXG4gKi9cblxuLyoqXG4gKiBEZWZpbmUgYSBiYXNpYyBzdGF0ZSBtYWNoaW5lIHN0YXRlLiBqIGlzIHRoZSBsaXN0IG9mIGNoYXJhY3RlciB0cmFuc2l0aW9ucyxcbiAqIGpyIGlzIHRoZSBsaXN0IG9mIHJlZ2V4LW1hdGNoIHRyYW5zaXRpb25zLCBqZCBpcyB0aGUgZGVmYXVsdCBzdGF0ZSB0b1xuICogdHJhbnNpdGlvbiB0byB0IGlzIHRoZSBhY2NlcHRpbmcgdG9rZW4gdHlwZSwgaWYgYW55LiBJZiB0aGlzIGlzIHRoZSB0ZXJtaW5hbFxuICogc3RhdGUsIHRoZW4gaXQgZG9lcyBub3QgZW1pdCBhIHRva2VuLlxuICogQHBhcmFtIHtzdHJpbmd8Y2xhc3N9IHRva2VuIHRvIGVtaXRcbiAqL1xuZnVuY3Rpb24gU3RhdGUodG9rZW4pIHtcbiAgdGhpcy5qID0ge307IC8vIElNUExFTUVOVEFUSU9OIDFcbiAgLy8gdGhpcy5qID0gW107IC8vIElNUExFTUVOVEFUSU9OIDJcblxuICB0aGlzLmpyID0gW107XG4gIHRoaXMuamQgPSBudWxsO1xuICB0aGlzLnQgPSB0b2tlbjtcbn1cbi8qKlxuICogVGFrZSB0aGUgdHJhbnNpdGlvbiBmcm9tIHRoaXMgc3RhdGUgdG8gdGhlIG5leHQgb25lIG9uIHRoZSBnaXZlbiBpbnB1dC5cbiAqIElmIHRoaXMgc3RhdGUgZG9lcyBub3QgZXhpc3QgZGV0ZXJtaW5pc3RpY2FsbHksIHdpbGwgY3JlYXRlIGl0LlxuICpcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBjaGFyYWN0ZXIgb3IgdG9rZW4gdG8gdHJhbnNpdGlvbiBvblxuICogQHBhcmFtIHtzdHJpbmd8Y2xhc3N9IFt0b2tlbl0gdG9rZW4gb3IgbXVsdGktdG9rZW4gdG8gZW1pdCB3aGVuIHJlYWNoaW5nXG4gKiB0aGlzIHN0YXRlXG4gKi9cblxuU3RhdGUucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAgICovXG4gIGFjY2VwdHM6IGZ1bmN0aW9uIGFjY2VwdHMoKSB7XG4gICAgcmV0dXJuICEhdGhpcy50O1xuICB9LFxuXG4gIC8qKlxuICAgKiBTaG9ydCBmb3IgXCJ0YWtlIHRyYW5zaXRpb25cIiwgdGhpcyBpcyBhIG1ldGhvZCBmb3IgYnVpbGRpbmcvd29ya2luZyB3aXRoXG4gICAqIHN0YXRlIG1hY2hpbmVzLlxuICAgKlxuICAgKiBJZiBhIHN0YXRlIGFscmVhZHkgZXhpc3RzIGZvciB0aGUgZ2l2ZW4gaW5wdXQsIHJldHVybnMgaXQuXG4gICAqXG4gICAqIElmIGEgdG9rZW4gaXMgc3BlY2lmaWVkLCB0aGF0IHN0YXRlIHdpbGwgZW1pdCB0aGF0IHRva2VuIHdoZW4gcmVhY2hlZCBieVxuICAgKiB0aGUgbGlua2lmeSBlbmdpbmUuXG4gICAqXG4gICAqIElmIG5vIHN0YXRlIGV4aXN0cywgaXQgd2lsbCBiZSBpbml0aWFsaXplZCB3aXRoIHNvbWUgZGVmYXVsdCB0cmFuc2l0aW9uc1xuICAgKiB0aGF0IHJlc2VtYmxlIGV4aXN0aW5nIGRlZmF1bHQgdHJhbnNpdGlvbnMuXG4gICAqXG4gICAqIElmIGEgc3RhdGUgaXMgZ2l2ZW4gZm9yIHRoZSBzZWNvbmQgYXJndW1lbnQsIHRoYXQgc3RhdGUgd2lsbCBiZVxuICAgKiB0cmFuc2l0aW9uZWQgdG8gb24gdGhlIGdpdmVuIGlucHV0IHJlZ2FyZGxlc3Mgb2Ygd2hhdCB0aGF0IGlucHV0XG4gICAqIHByZXZpb3VzbHkgZGlkLlxuICAgKlxuICAgKiBAcGFyYW0ge3N0cmluZ30gaW5wdXQgY2hhcmFjdGVyIG9yIHRva2VuIHRvIHRyYW5zaXRpb24gb25cbiAgICogQHBhcmFtIHtUb2tlbnxTdGF0ZX0gdG9rZW5PclN0YXRlIHRyYW5zaXRpb24gdG8gYSBtYXRjaGluZyBzdGF0ZVxuICAgKiBAcmV0dXJucyBTdGF0ZSB0YWtlbiBhZnRlciB0aGUgZ2l2ZW4gaW5wdXRcbiAgICovXG4gIHR0OiBmdW5jdGlvbiB0dChpbnB1dCwgdG9rZW5PclN0YXRlKSB7XG4gICAgaWYgKHRva2VuT3JTdGF0ZSAmJiB0b2tlbk9yU3RhdGUuaikge1xuICAgICAgLy8gU3RhdGUsIGRlZmF1bHQgYSBiYXNpYyB0cmFuc2l0aW9uXG4gICAgICB0aGlzLmpbaW5wdXRdID0gdG9rZW5PclN0YXRlO1xuICAgICAgcmV0dXJuIHRva2VuT3JTdGF0ZTtcbiAgICB9IC8vIFNlZSBpZiB0aGVyZSdzIGEgZGlyZWN0IHN0YXRlIHRyYW5zaXRpb24gKG5vdCByZWdleCBvciBkZWZhdWx0KVxuXG5cbiAgICB2YXIgdG9rZW4gPSB0b2tlbk9yU3RhdGU7XG4gICAgdmFyIG5leHRTdGF0ZSA9IHRoaXMualtpbnB1dF07XG5cbiAgICBpZiAobmV4dFN0YXRlKSB7XG4gICAgICBpZiAodG9rZW4pIHtcbiAgICAgICAgbmV4dFN0YXRlLnQgPSB0b2tlbjtcbiAgICAgIH0gLy8gb3ZlcnJ3aXRlcyBwcmV2aW91cyB0b2tlblxuXG5cbiAgICAgIHJldHVybiBuZXh0U3RhdGU7XG4gICAgfSAvLyBDcmVhdGUgYSBuZXcgc3RhdGUgZm9yIHRoaXMgaW5wdXRcblxuXG4gICAgbmV4dFN0YXRlID0gbWFrZVN0YXRlKCk7IC8vIFRha2UgdGhlIHRyYW5zaXRpb24gdXNpbmcgdGhlIHVzdWFsIGRlZmF1bHQgbWVjaGFuaXNtc1xuXG4gICAgdmFyIHRlbXBsYXRlU3RhdGUgPSB0YWtlVCh0aGlzLCBpbnB1dCk7XG5cbiAgICBpZiAodGVtcGxhdGVTdGF0ZSkge1xuICAgICAgLy8gU29tZSBkZWZhdWx0IHN0YXRlIHRyYW5zaXRpb24sIG1ha2UgYSBwcmltZSBzdGF0ZSBiYXNlZCBvbiB0aGlzIG9uZVxuICAgICAgT2JqZWN0LmFzc2lnbihuZXh0U3RhdGUuaiwgdGVtcGxhdGVTdGF0ZS5qKTtcbiAgICAgIG5leHRTdGF0ZS5qci5hcHBlbmQodGVtcGxhdGVTdGF0ZS5qcik7XG4gICAgICBuZXh0U3RhdGUuanIgPSB0ZW1wbGF0ZVN0YXRlLmpkO1xuICAgICAgbmV4dFN0YXRlLnQgPSB0b2tlbiB8fCB0ZW1wbGF0ZVN0YXRlLnQ7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5leHRTdGF0ZS50ID0gdG9rZW47XG4gICAgfVxuXG4gICAgdGhpcy5qW2lucHV0XSA9IG5leHRTdGF0ZTtcbiAgICByZXR1cm4gbmV4dFN0YXRlO1xuICB9XG59O1xuLyoqXG4gKiBVdGlsaXR5IGZ1bmN0aW9uIHRvIGNyZWF0ZSBzdGF0ZSB3aXRob3V0IHVzaW5nIG5ldyBrZXl3b3JkIChyZWR1Y2VkIGZpbGUgc2l6ZVxuICogd2hlbiBtaW5pZmllZClcbiAqL1xuXG52YXIgbWFrZVN0YXRlID0gZnVuY3Rpb24gbWFrZVN0YXRlKCkge1xuICByZXR1cm4gbmV3IFN0YXRlKCk7XG59O1xuLyoqXG4gKiBTaW1pbGFyIHRvIHByZXZpb3VzIGV4Y2VwdCBpdCBpcyBhbiBhY2NlcHRpbmcgc3RhdGUgdGhhdCBlbWl0cyBhIHRva2VuXG4gKiBAcGFyYW0ge1Rva2VufSB0b2tlblxuICovXG5cbnZhciBtYWtlQWNjZXB0aW5nU3RhdGUgPSBmdW5jdGlvbiBtYWtlQWNjZXB0aW5nU3RhdGUodG9rZW4pIHtcbiAgcmV0dXJuIG5ldyBTdGF0ZSh0b2tlbik7XG59O1xuLyoqXG4gKiBDcmVhdGUgYSB0cmFuc2l0aW9uIGZyb20gc3RhcnRTdGF0ZSB0byBuZXh0U3RhdGUgdmlhIHRoZSBnaXZlbiBjaGFyYWN0ZXJcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXJ0U3RhdGUgdHJhbnNpdGlvbiBmcm9tIHRoaWUgc3RhcnRpbmcgc3RhdGVcbiAqIEBwYXJhbSB7VG9rZW59IGlucHV0IHZpYSB0aGlzIGlucHV0IGNoYXJhY3RlciBvciBvdGhlciBjb25jcmV0ZSB0b2tlbiB0eXBlXG4gKiBAcGFyYW0ge1N0YXRlfSBuZXh0U3RhdGUgdG8gdGhpcyBuZXh0IHN0YXRlXG4gKi9cblxudmFyIG1ha2VUID0gZnVuY3Rpb24gbWFrZVQoc3RhcnRTdGF0ZSwgaW5wdXQsIG5leHRTdGF0ZSkge1xuICAvLyBJTVBMRU1FTlRBVElPTiAxOiBBZGQgdG8gb2JqZWN0IChmYXN0KVxuICBpZiAoIXN0YXJ0U3RhdGUualtpbnB1dF0pIHtcbiAgICBzdGFydFN0YXRlLmpbaW5wdXRdID0gbmV4dFN0YXRlO1xuICB9IC8vIElNUExFTUVOVEFUSU9OIDI6IEFkZCB0byBhcnJheSAoc2xvd2VyKVxuICAvLyBzdGFydFN0YXRlLmoucHVzaChbaW5wdXQsIG5leHRTdGF0ZV0pO1xuXG59O1xuLyoqXG4gKlxuICogQHBhcmFtIHtTdGF0ZX0gc3RhcnRTdGF0ZSBzdHJhbnNpdGlvbiBmcm9tIHRoaXMgc3RhcnRpbmcgc3RhdGVcbiAqIEBwYXJhbSB7UmVnRXhwfSByZWdleCBSZWd1bGFyIGV4cHJlc3Npb24gdG8gbWF0Y2ggb24gaW5wdXRcbiAqIEBwYXJhbSB7U3RhdGV9IG5leHRTdGF0ZSB0cmFuc2l0aW9uIHRvIHRoaXMgbmV4dCBzdGF0ZSBpZiB0aGVyZSdzIGFyZSByZWdleCBtYXRjaFxuICovXG5cbnZhciBtYWtlUmVnZXhUID0gZnVuY3Rpb24gbWFrZVJlZ2V4VChzdGFydFN0YXRlLCByZWdleCwgbmV4dFN0YXRlKSB7XG4gIHN0YXJ0U3RhdGUuanIucHVzaChbcmVnZXgsIG5leHRTdGF0ZV0pO1xufTtcbi8qKlxuICogRm9sbG93IHRoZSB0cmFuc2l0aW9uIGZyb20gdGhlIGdpdmVuIGNoYXJhY3RlciB0byB0aGUgbmV4dCBzdGF0ZVxuICogQHBhcmFtIHtTdGF0ZX0gc3RhdGVcbiAqIEBwYXJhbSB7VG9rZW59IGlucHV0IGNoYXJhY3RlciBvciBvdGhlciBjb25jcmV0ZSB0b2tlbiB0eXBlIHRvIHRyYW5zaXRpb25cbiAqIEByZXR1cm5zIHs/U3RhdGV9IHRoZSBuZXh0IHN0YXRlLCBpZiBhbnlcbiAqL1xuXG52YXIgdGFrZVQgPSBmdW5jdGlvbiB0YWtlVChzdGF0ZSwgaW5wdXQpIHtcbiAgLy8gSU1QTEVNRU5UQVRJT04gMTogT2JqZWN0IGtleSBsb29rdXAgKGZhc3RlcilcbiAgdmFyIG5leHRTdGF0ZSA9IHN0YXRlLmpbaW5wdXRdO1xuXG4gIGlmIChuZXh0U3RhdGUpIHtcbiAgICByZXR1cm4gbmV4dFN0YXRlO1xuICB9IC8vIElNUExFTUVOVEFUSU9OIDI6IExpc3QgbG9va3VwIChzbG93ZXIpXG4gIC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHN0YXRlIHRyYW5zaXRpb25zIGFuZCBzZWUgaWYgdGhlcmUncyBhIG1hdGNoXG4gIC8vIGZvciAobGV0IGkgPSAwOyBpIDwgc3RhdGUuai5sZW5ndGg7IGkrKykge1xuICAvL1x0Y29uc3QgdmFsID0gc3RhdGUualtpXVswXTtcbiAgLy9cdGNvbnN0IG5leHRTdGF0ZSA9IHN0YXRlLmpbaV1bMV07XG4gIC8vIFx0aWYgKGlucHV0ID09PSB2YWwpIHsgcmV0dXJuIG5leHRTdGF0ZTsgfVxuICAvLyB9XG5cblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHN0YXRlLmpyLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIHJlZ2V4ID0gc3RhdGUuanJbaV1bMF07XG4gICAgdmFyIF9uZXh0U3RhdGUgPSBzdGF0ZS5qcltpXVsxXTtcblxuICAgIGlmIChyZWdleC50ZXN0KGlucHV0KSkge1xuICAgICAgcmV0dXJuIF9uZXh0U3RhdGU7XG4gICAgfVxuICB9IC8vIE5vd2hlcmUgbGVmdCB0byBqdW1wISBSZXR1cm4gZGVmYXVsdCwgaWYgYW55XG5cblxuICByZXR1cm4gc3RhdGUuamQ7XG59O1xuLyoqXG4gKiBTaW1pbGFyIHRvIG1ha2VULCBidXQgdGFrZXMgYSBsaXN0IG9mIGNoYXJhY3RlcnMgdGhhdCBhbGwgdHJhbnNpdGlvbiB0byB0aGVcbiAqIHNhbWUgbmV4dFN0YXRlIHN0YXJ0U3RhdGVcbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXJ0U3RhdGVcbiAqIEBwYXJhbSB7QXJyYXl9IGNoYXJzXG4gKiBAcGFyYW0ge1N0YXRlfSBuZXh0U3RhdGVcbiAqL1xuXG52YXIgbWFrZU11bHRpVCA9IGZ1bmN0aW9uIG1ha2VNdWx0aVQoc3RhcnRTdGF0ZSwgY2hhcnMsIG5leHRTdGF0ZSkge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IGNoYXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgbWFrZVQoc3RhcnRTdGF0ZSwgY2hhcnNbaV0sIG5leHRTdGF0ZSk7XG4gIH1cbn07XG4vKipcbiAqIFNldCB1cCBhIGxpc3Qgb2YgbXVsdGlwbGUgdHJhbnNpdGlvbnMgYXQgb25jZS4gdHJhbnNpdGlvbnMgaXMgYSBsaXN0IG9mXG4gKiB0dXBsZXMsIHdoZXJlIHRoZSBmaXJzdCBlbGVtZW50IGlzIHRoZSB0cmFuc2l0aW9ucyBjaGFyYWN0ZXIgYW5kIHRoZSBzZWNvbmRcbiAqIGlzIHRoZSBzdGF0ZSB0byB0cmFuc2l0aW9uIHRvXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGFydFN0YXRlXG4gKiBAcGFyYW0ge0FycmF5fSB0cmFuc2l0aW9uc1xuICovXG5cbnZhciBtYWtlQmF0Y2hUID0gZnVuY3Rpb24gbWFrZUJhdGNoVChzdGFydFN0YXRlLCB0cmFuc2l0aW9ucykge1xuICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zaXRpb25zLmxlbmd0aDsgaSsrKSB7XG4gICAgdmFyIGlucHV0ID0gdHJhbnNpdGlvbnNbaV1bMF07XG4gICAgdmFyIG5leHRTdGF0ZSA9IHRyYW5zaXRpb25zW2ldWzFdO1xuICAgIG1ha2VUKHN0YXJ0U3RhdGUsIGlucHV0LCBuZXh0U3RhdGUpO1xuICB9XG59O1xuLyoqXG4gKiBGb3Igc3RhdGUgbWFjaGluZXMgdGhhdCB0cmFuc2l0aW9uIG9uIGNoYXJhY3RlcnMgb25seTsgZ2l2ZW4gYSBub24tZW1wdHlcbiAqIHRhcmdldCBzdHJpbmcsIGdlbmVyYXRlcyBzdGF0ZXMgKGlmIHJlcXVpcmVkKSBmb3IgZWFjaCBjb25zZWN1dGl2ZSBzdWJzdHJpbmdcbiAqIG9mIGNoYXJhY3RlcnMgc3RhcnRpbmcgZnJvbSB0aGUgYmVnaW5uaW5nIG9mIHRoZSBzdHJpbmcuIFRoZSBmaW5hbCBzdGF0ZSB3aWxsXG4gKiBoYXZlIGEgc3BlY2lhbCB2YWx1ZSwgYXMgc3BlY2lmaWVkIGluIG9wdGlvbnMuIEFsbCBvdGhlciBcImluIGJldHdlZW5cIlxuICogc3Vic3RyaW5ncyB3aWxsIGhhdmUgYSBkZWZhdWx0IGVuZCBzdGF0ZS5cbiAqXG4gKiBUaGlzIHR1cm5zIHRoZSBzdGF0ZSBtYWNoaW5lIGludG8gYSBUcmllLWxpa2UgZGF0YSBzdHJ1Y3R1cmUgKHJhdGhlciB0aGFuIGFcbiAqIGludGVsbGlnZW50bHktZGVzaWduZWQgREZBKS5cbiAqIEBwYXJhbSB7U3RhdGV9IHN0YXRlXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyXG4gKiBAcGFyYW0ge1Rva2VufSBlbmRTdGF0ZUZhY3RvcnlcbiAqIEBwYXJhbSB7VG9rZW59IGRlZmF1bHRTdGF0ZUZhY3RvcnlcbiAqL1xuXG52YXIgbWFrZUNoYWluVCA9IGZ1bmN0aW9uIG1ha2VDaGFpblQoc3RhdGUsIHN0ciwgZW5kU3RhdGUsIGRlZmF1bHRTdGF0ZUZhY3RvcnkpIHtcbiAgdmFyIGkgPSAwLFxuICAgICAgbGVuID0gc3RyLmxlbmd0aCxcbiAgICAgIG5leHRTdGF0ZTsgLy8gRmluZCB0aGUgbmV4dCBzdGF0ZSB3aXRob3V0IGEganVtcCB0byB0aGUgbmV4dCBjaGFyYWN0ZXJcblxuICB3aGlsZSAoaSA8IGxlbiAmJiAobmV4dFN0YXRlID0gc3RhdGUualtzdHJbaV1dKSkge1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIGkrKztcbiAgfVxuXG4gIGlmIChpID49IGxlbikge1xuICAgIHJldHVybiBbXTtcbiAgfSAvLyBubyBuZXcgdG9rZW5zIHdlcmUgYWRkZWRcblxuXG4gIHdoaWxlIChpIDwgbGVuIC0gMSkge1xuICAgIG5leHRTdGF0ZSA9IGRlZmF1bHRTdGF0ZUZhY3RvcnkoKTtcbiAgICBtYWtlVChzdGF0ZSwgc3RyW2ldLCBuZXh0U3RhdGUpO1xuICAgIHN0YXRlID0gbmV4dFN0YXRlO1xuICAgIGkrKztcbiAgfVxuXG4gIG1ha2VUKHN0YXRlLCBzdHJbbGVuIC0gMV0sIGVuZFN0YXRlKTtcbn07XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0VGV4dCBUb2tlbnNcblx0VG9rZW5zIGNvbXBvc2VkIG9mIHN0cmluZ3NcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKi9cbi8vIEEgdmFsaWQgd2ViIGRvbWFpbiB0b2tlblxudmFyIERPTUFJTiA9ICdET01BSU4nO1xudmFyIExPQ0FMSE9TVCA9ICdMT0NBTEhPU1QnOyAvLyBzcGVjaWFsIGNhc2Ugb2YgZG9tYWluXG4vLyBWYWxpZCB0b3AtbGV2ZWwgZG9tYWluIChzZWUgdGxkcy5qcylcblxudmFyIFRMRCA9ICdUTEQnOyAvLyBWYXJpb3VzIHB1bmN0aW9uYXRpb25cblxudmFyIEFUID0gJ0FUJzsgLy8gJ0AnXG5cbnZhciBDT0xPTiA9ICdDT0xPTic7IC8vICc6J1xuXG52YXIgRE9UID0gJ0RPVCc7IC8vICcuJ1xuLy8gQSBjaGFyYWN0ZXIgY2xhc3MgdGhhdCBjYW4gc3Vycm91bmQgdGhlIFVSTCwgYnV0IHdoaWNoIHRoZSBVUkwgY2Fubm90IGJlZ2luXG4vLyBvciBlbmQgd2l0aC4gRG9lcyBub3QgaW5jbHVkZSBjZXJ0YWluIEVuZ2xpc2ggcHVuY3R1YXRpb24gbGlrZSBwYXJlbnRoZXNlcy5cblxudmFyIFBVTkNUVUFUSU9OID0gJ1BVTkNUVUFUSU9OJzsgLy8gTmV3IGxpbmUgKHVuaXggc3R5bGUpXG5cbnZhciBOTCA9ICdOTCc7IC8vICdcXG4nXG4vLyBBbnkgc2VxdWVuY2Ugb2YgZGlnaWVzIDAtOVxuXG52YXIgTlVNID0gJ05VTSc7IC8vIFZhcmlvdXMgc3ltYm9sc1xuXG52YXIgUExVUyA9ICdQTFVTJzsgLy8gJysnXG5cbnZhciBQT1VORCA9ICdQT1VORCc7IC8vICcjJ1xuXG52YXIgUVVFUlkgPSAnUVVFUlknOyAvLyAnPydcblxudmFyIFNMQVNIID0gJ1NMQVNIJzsgLy8gJy8nXG5cbnZhciBVTkRFUlNDT1JFID0gJ1VOREVSU0NPUkUnOyAvLyAnXydcbi8vIEEgd2ViIFVSTCBwcm90b2NvbC4gU3VwcG9ydGVkIHR5cGVzIGluY2x1ZGVcbi8vIC0gYGh0dHA6YFxuLy8gLSBgaHR0cHM6YFxuLy8gLSBgZnRwOmBcbi8vIC0gYGZ0cHM6YFxuXG52YXIgUFJPVE9DT0wgPSAnUFJPVE9DT0wnOyAvLyBTdGFydCBvZiB0aGUgZW1haWwgVVJJIHByb3RvY29sXG5cbnZhciBNQUlMVE8gPSAnTUFJTFRPJzsgLy8gJ21haWx0bzonXG4vLyBBbnkgbnVtYmVyIG9mIGNvbnNlY3V0aXZlIHdoaXRlc3BhY2UgY2hhcmFjdGVycyB0aGF0IGFyZSBub3QgbmV3bGluZVxuXG52YXIgV1MgPSAnV1MnOyAvLyBPcGVuaW5nL2Nsb3NpbmcgYnJhY2tldCBjbGFzc2VzXG5cbnZhciBPUEVOQlJBQ0UgPSAnT1BFTkJSQUNFJzsgLy8gJ3snXG5cbnZhciBPUEVOQlJBQ0tFVCA9ICdPUEVOQlJBQ0tFVCc7IC8vICdbJ1xuXG52YXIgT1BFTkFOR0xFQlJBQ0tFVCA9ICdPUEVOQU5HTEVCUkFDS0VUJzsgLy8gJzwnXG5cbnZhciBPUEVOUEFSRU4gPSAnT1BFTlBBUkVOJzsgLy8gJygnXG5cbnZhciBDTE9TRUJSQUNFID0gJ0NMT1NFQlJBQ0UnOyAvLyAnfSdcblxudmFyIENMT1NFQlJBQ0tFVCA9ICdDTE9TRUJSQUNLRVQnOyAvLyAnXSdcblxudmFyIENMT1NFQU5HTEVCUkFDS0VUID0gJ0NMT1NFQU5HTEVCUkFDS0VUJzsgLy8gJz4nXG5cbnZhciBDTE9TRVBBUkVOID0gJ0NMT1NFUEFSRU4nOyAvLyAnKSdcblxudmFyIEFNUEVSU0FORCA9ICdBTVBFUlNBTkQnOyAvLyAnJidcbi8vIERlZmF1bHQgdG9rZW4gLSBhbnl0aGluZyB0aGF0IGlzIG5vdCBvbmUgb2YgdGhlIGFib3ZlXG5cbnZhciBTWU0gPSAnU1lNJztcblxudmFyIHRleHQgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0RE9NQUlOOiBET01BSU4sXG5cdExPQ0FMSE9TVDogTE9DQUxIT1NULFxuXHRUTEQ6IFRMRCxcblx0QVQ6IEFULFxuXHRDT0xPTjogQ09MT04sXG5cdERPVDogRE9ULFxuXHRQVU5DVFVBVElPTjogUFVOQ1RVQVRJT04sXG5cdE5MOiBOTCxcblx0TlVNOiBOVU0sXG5cdFBMVVM6IFBMVVMsXG5cdFBPVU5EOiBQT1VORCxcblx0UVVFUlk6IFFVRVJZLFxuXHRTTEFTSDogU0xBU0gsXG5cdFVOREVSU0NPUkU6IFVOREVSU0NPUkUsXG5cdFBST1RPQ09MOiBQUk9UT0NPTCxcblx0TUFJTFRPOiBNQUlMVE8sXG5cdFdTOiBXUyxcblx0T1BFTkJSQUNFOiBPUEVOQlJBQ0UsXG5cdE9QRU5CUkFDS0VUOiBPUEVOQlJBQ0tFVCxcblx0T1BFTkFOR0xFQlJBQ0tFVDogT1BFTkFOR0xFQlJBQ0tFVCxcblx0T1BFTlBBUkVOOiBPUEVOUEFSRU4sXG5cdENMT1NFQlJBQ0U6IENMT1NFQlJBQ0UsXG5cdENMT1NFQlJBQ0tFVDogQ0xPU0VCUkFDS0VULFxuXHRDTE9TRUFOR0xFQlJBQ0tFVDogQ0xPU0VBTkdMRUJSQUNLRVQsXG5cdENMT1NFUEFSRU46IENMT1NFUEFSRU4sXG5cdEFNUEVSU0FORDogQU1QRVJTQU5ELFxuXHRTWU06IFNZTVxufSk7XG5cbi8vIE5PVEU6IHB1bnljb2RlIHZlcnNpb25zIG9mIElETnMgYXJlIG5vdCBpbmNsdWRlZCBoZXJlIGJlY2F1c2UgdGhlc2Ugd2lsbCBub3Rcbi8vIGJlIGFzIGNvbW1vbmx5IHVzZWQgd2l0aG91dCB0aGUgaHR0cCBwcmVmaXggYW55d2F5IGFuZCBsaW5raWZ5IHdpbGwgYWxyZWFkeVxuLy8gZm9yY2UtZW5jb2RlIHRob3NlLlxuLy8gVG8gYmUgdXBkYXRlZCB3aXRoIHRoZSB2YWx1ZXMgaW4gdGhpcyBsaXN0XG4vLyBodHRwOi8vZGF0YS5pYW5hLm9yZy9UTEQvdGxkcy1hbHBoYS1ieS1kb21haW4udHh0XG4vLyBWZXJzaW9uIDIwMjEwMjI4MDAsIExhc3QgVXBkYXRlZCBTdW4gRmViIDI4IDA3OjA3OjAxIDIwMjEgVVRDXG52YXIgdGxkcyA9ICdhYWEgXFxcbmFhcnAgXFxcbmFiYXJ0aCBcXFxuYWJiIFxcXG5hYmJvdHQgXFxcbmFiYnZpZSBcXFxuYWJjIFxcXG5hYmxlIFxcXG5hYm9nYWRvIFxcXG5hYnVkaGFiaSBcXFxuYWMgXFxcbmFjYWRlbXkgXFxcbmFjY2VudHVyZSBcXFxuYWNjb3VudGFudCBcXFxuYWNjb3VudGFudHMgXFxcbmFjbyBcXFxuYWN0b3IgXFxcbmFkIFxcXG5hZGFjIFxcXG5hZHMgXFxcbmFkdWx0IFxcXG5hZSBcXFxuYWVnIFxcXG5hZXJvIFxcXG5hZXRuYSBcXFxuYWYgXFxcbmFmYW1pbHljb21wYW55IFxcXG5hZmwgXFxcbmFmcmljYSBcXFxuYWcgXFxcbmFnYWtoYW4gXFxcbmFnZW5jeSBcXFxuYWkgXFxcbmFpZyBcXFxuYWlyYnVzIFxcXG5haXJmb3JjZSBcXFxuYWlydGVsIFxcXG5ha2RuIFxcXG5hbCBcXFxuYWxmYXJvbWVvIFxcXG5hbGliYWJhIFxcXG5hbGlwYXkgXFxcbmFsbGZpbmFueiBcXFxuYWxsc3RhdGUgXFxcbmFsbHkgXFxcbmFsc2FjZSBcXFxuYWxzdG9tIFxcXG5hbSBcXFxuYW1hem9uIFxcXG5hbWVyaWNhbmV4cHJlc3MgXFxcbmFtZXJpY2FuZmFtaWx5IFxcXG5hbWV4IFxcXG5hbWZhbSBcXFxuYW1pY2EgXFxcbmFtc3RlcmRhbSBcXFxuYW5hbHl0aWNzIFxcXG5hbmRyb2lkIFxcXG5hbnF1YW4gXFxcbmFueiBcXFxuYW8gXFxcbmFvbCBcXFxuYXBhcnRtZW50cyBcXFxuYXBwIFxcXG5hcHBsZSBcXFxuYXEgXFxcbmFxdWFyZWxsZSBcXFxuYXIgXFxcbmFyYWIgXFxcbmFyYW1jbyBcXFxuYXJjaGkgXFxcbmFybXkgXFxcbmFycGEgXFxcbmFydCBcXFxuYXJ0ZSBcXFxuYXMgXFxcbmFzZGEgXFxcbmFzaWEgXFxcbmFzc29jaWF0ZXMgXFxcbmF0IFxcXG5hdGhsZXRhIFxcXG5hdHRvcm5leSBcXFxuYXUgXFxcbmF1Y3Rpb24gXFxcbmF1ZGkgXFxcbmF1ZGlibGUgXFxcbmF1ZGlvIFxcXG5hdXNwb3N0IFxcXG5hdXRob3IgXFxcbmF1dG8gXFxcbmF1dG9zIFxcXG5hdmlhbmNhIFxcXG5hdyBcXFxuYXdzIFxcXG5heCBcXFxuYXhhIFxcXG5heiBcXFxuYXp1cmUgXFxcbmJhIFxcXG5iYWJ5IFxcXG5iYWlkdSBcXFxuYmFuYW1leCBcXFxuYmFuYW5hcmVwdWJsaWMgXFxcbmJhbmQgXFxcbmJhbmsgXFxcbmJhciBcXFxuYmFyY2Vsb25hIFxcXG5iYXJjbGF5Y2FyZCBcXFxuYmFyY2xheXMgXFxcbmJhcmVmb290IFxcXG5iYXJnYWlucyBcXFxuYmFzZWJhbGwgXFxcbmJhc2tldGJhbGwgXFxcbmJhdWhhdXMgXFxcbmJheWVybiBcXFxuYmIgXFxcbmJiYyBcXFxuYmJ0IFxcXG5iYnZhIFxcXG5iY2cgXFxcbmJjbiBcXFxuYmQgXFxcbmJlIFxcXG5iZWF0cyBcXFxuYmVhdXR5IFxcXG5iZWVyIFxcXG5iZW50bGV5IFxcXG5iZXJsaW4gXFxcbmJlc3QgXFxcbmJlc3RidXkgXFxcbmJldCBcXFxuYmYgXFxcbmJnIFxcXG5iaCBcXFxuYmhhcnRpIFxcXG5iaSBcXFxuYmlibGUgXFxcbmJpZCBcXFxuYmlrZSBcXFxuYmluZyBcXFxuYmluZ28gXFxcbmJpbyBcXFxuYml6IFxcXG5iaiBcXFxuYmxhY2sgXFxcbmJsYWNrZnJpZGF5IFxcXG5ibG9ja2J1c3RlciBcXFxuYmxvZyBcXFxuYmxvb21iZXJnIFxcXG5ibHVlIFxcXG5ibSBcXFxuYm1zIFxcXG5ibXcgXFxcbmJuIFxcXG5ibnBwYXJpYmFzIFxcXG5ibyBcXFxuYm9hdHMgXFxcbmJvZWhyaW5nZXIgXFxcbmJvZmEgXFxcbmJvbSBcXFxuYm9uZCBcXFxuYm9vIFxcXG5ib29rIFxcXG5ib29raW5nIFxcXG5ib3NjaCBcXFxuYm9zdGlrIFxcXG5ib3N0b24gXFxcbmJvdCBcXFxuYm91dGlxdWUgXFxcbmJveCBcXFxuYnIgXFxcbmJyYWRlc2NvIFxcXG5icmlkZ2VzdG9uZSBcXFxuYnJvYWR3YXkgXFxcbmJyb2tlciBcXFxuYnJvdGhlciBcXFxuYnJ1c3NlbHMgXFxcbmJzIFxcXG5idCBcXFxuYnVkYXBlc3QgXFxcbmJ1Z2F0dGkgXFxcbmJ1aWxkIFxcXG5idWlsZGVycyBcXFxuYnVzaW5lc3MgXFxcbmJ1eSBcXFxuYnV6eiBcXFxuYnYgXFxcbmJ3IFxcXG5ieSBcXFxuYnogXFxcbmJ6aCBcXFxuY2EgXFxcbmNhYiBcXFxuY2FmZSBcXFxuY2FsIFxcXG5jYWxsIFxcXG5jYWx2aW5rbGVpbiBcXFxuY2FtIFxcXG5jYW1lcmEgXFxcbmNhbXAgXFxcbmNhbmNlcnJlc2VhcmNoIFxcXG5jYW5vbiBcXFxuY2FwZXRvd24gXFxcbmNhcGl0YWwgXFxcbmNhcGl0YWxvbmUgXFxcbmNhciBcXFxuY2FyYXZhbiBcXFxuY2FyZHMgXFxcbmNhcmUgXFxcbmNhcmVlciBcXFxuY2FyZWVycyBcXFxuY2FycyBcXFxuY2FzYSBcXFxuY2FzZSBcXFxuY2FzaCBcXFxuY2FzaW5vIFxcXG5jYXQgXFxcbmNhdGVyaW5nIFxcXG5jYXRob2xpYyBcXFxuY2JhIFxcXG5jYm4gXFxcbmNicmUgXFxcbmNicyBcXFxuY2MgXFxcbmNkIFxcXG5jZW50ZXIgXFxcbmNlbyBcXFxuY2VybiBcXFxuY2YgXFxcbmNmYSBcXFxuY2ZkIFxcXG5jZyBcXFxuY2ggXFxcbmNoYW5lbCBcXFxuY2hhbm5lbCBcXFxuY2hhcml0eSBcXFxuY2hhc2UgXFxcbmNoYXQgXFxcbmNoZWFwIFxcXG5jaGludGFpIFxcXG5jaHJpc3RtYXMgXFxcbmNocm9tZSBcXFxuY2h1cmNoIFxcXG5jaSBcXFxuY2lwcmlhbmkgXFxcbmNpcmNsZSBcXFxuY2lzY28gXFxcbmNpdGFkZWwgXFxcbmNpdGkgXFxcbmNpdGljIFxcXG5jaXR5IFxcXG5jaXR5ZWF0cyBcXFxuY2sgXFxcbmNsIFxcXG5jbGFpbXMgXFxcbmNsZWFuaW5nIFxcXG5jbGljayBcXFxuY2xpbmljIFxcXG5jbGluaXF1ZSBcXFxuY2xvdGhpbmcgXFxcbmNsb3VkIFxcXG5jbHViIFxcXG5jbHVibWVkIFxcXG5jbSBcXFxuY24gXFxcbmNvIFxcXG5jb2FjaCBcXFxuY29kZXMgXFxcbmNvZmZlZSBcXFxuY29sbGVnZSBcXFxuY29sb2duZSBcXFxuY29tIFxcXG5jb21jYXN0IFxcXG5jb21tYmFuayBcXFxuY29tbXVuaXR5IFxcXG5jb21wYW55IFxcXG5jb21wYXJlIFxcXG5jb21wdXRlciBcXFxuY29tc2VjIFxcXG5jb25kb3MgXFxcbmNvbnN0cnVjdGlvbiBcXFxuY29uc3VsdGluZyBcXFxuY29udGFjdCBcXFxuY29udHJhY3RvcnMgXFxcbmNvb2tpbmcgXFxcbmNvb2tpbmdjaGFubmVsIFxcXG5jb29sIFxcXG5jb29wIFxcXG5jb3JzaWNhIFxcXG5jb3VudHJ5IFxcXG5jb3Vwb24gXFxcbmNvdXBvbnMgXFxcbmNvdXJzZXMgXFxcbmNwYSBcXFxuY3IgXFxcbmNyZWRpdCBcXFxuY3JlZGl0Y2FyZCBcXFxuY3JlZGl0dW5pb24gXFxcbmNyaWNrZXQgXFxcbmNyb3duIFxcXG5jcnMgXFxcbmNydWlzZSBcXFxuY3J1aXNlcyBcXFxuY3NjIFxcXG5jdSBcXFxuY3Vpc2luZWxsYSBcXFxuY3YgXFxcbmN3IFxcXG5jeCBcXFxuY3kgXFxcbmN5bXJ1IFxcXG5jeW91IFxcXG5jeiBcXFxuZGFidXIgXFxcbmRhZCBcXFxuZGFuY2UgXFxcbmRhdGEgXFxcbmRhdGUgXFxcbmRhdGluZyBcXFxuZGF0c3VuIFxcXG5kYXkgXFxcbmRjbGsgXFxcbmRkcyBcXFxuZGUgXFxcbmRlYWwgXFxcbmRlYWxlciBcXFxuZGVhbHMgXFxcbmRlZ3JlZSBcXFxuZGVsaXZlcnkgXFxcbmRlbGwgXFxcbmRlbG9pdHRlIFxcXG5kZWx0YSBcXFxuZGVtb2NyYXQgXFxcbmRlbnRhbCBcXFxuZGVudGlzdCBcXFxuZGVzaSBcXFxuZGVzaWduIFxcXG5kZXYgXFxcbmRobCBcXFxuZGlhbW9uZHMgXFxcbmRpZXQgXFxcbmRpZ2l0YWwgXFxcbmRpcmVjdCBcXFxuZGlyZWN0b3J5IFxcXG5kaXNjb3VudCBcXFxuZGlzY292ZXIgXFxcbmRpc2ggXFxcbmRpeSBcXFxuZGogXFxcbmRrIFxcXG5kbSBcXFxuZG5wIFxcXG5kbyBcXFxuZG9jcyBcXFxuZG9jdG9yIFxcXG5kb2cgXFxcbmRvbWFpbnMgXFxcbmRvdCBcXFxuZG93bmxvYWQgXFxcbmRyaXZlIFxcXG5kdHYgXFxcbmR1YmFpIFxcXG5kdWNrIFxcXG5kdW5sb3AgXFxcbmR1cG9udCBcXFxuZHVyYmFuIFxcXG5kdmFnIFxcXG5kdnIgXFxcbmR6IFxcXG5lYXJ0aCBcXFxuZWF0IFxcXG5lYyBcXFxuZWNvIFxcXG5lZGVrYSBcXFxuZWR1IFxcXG5lZHVjYXRpb24gXFxcbmVlIFxcXG5lZyBcXFxuZW1haWwgXFxcbmVtZXJjayBcXFxuZW5lcmd5IFxcXG5lbmdpbmVlciBcXFxuZW5naW5lZXJpbmcgXFxcbmVudGVycHJpc2VzIFxcXG5lcHNvbiBcXFxuZXF1aXBtZW50IFxcXG5lciBcXFxuZXJpY3Nzb24gXFxcbmVybmkgXFxcbmVzIFxcXG5lc3EgXFxcbmVzdGF0ZSBcXFxuZXQgXFxcbmV0aXNhbGF0IFxcXG5ldSBcXFxuZXVyb3Zpc2lvbiBcXFxuZXVzIFxcXG5ldmVudHMgXFxcbmV4Y2hhbmdlIFxcXG5leHBlcnQgXFxcbmV4cG9zZWQgXFxcbmV4cHJlc3MgXFxcbmV4dHJhc3BhY2UgXFxcbmZhZ2UgXFxcbmZhaWwgXFxcbmZhaXJ3aW5kcyBcXFxuZmFpdGggXFxcbmZhbWlseSBcXFxuZmFuIFxcXG5mYW5zIFxcXG5mYXJtIFxcXG5mYXJtZXJzIFxcXG5mYXNoaW9uIFxcXG5mYXN0IFxcXG5mZWRleCBcXFxuZmVlZGJhY2sgXFxcbmZlcnJhcmkgXFxcbmZlcnJlcm8gXFxcbmZpIFxcXG5maWF0IFxcXG5maWRlbGl0eSBcXFxuZmlkbyBcXFxuZmlsbSBcXFxuZmluYWwgXFxcbmZpbmFuY2UgXFxcbmZpbmFuY2lhbCBcXFxuZmlyZSBcXFxuZmlyZXN0b25lIFxcXG5maXJtZGFsZSBcXFxuZmlzaCBcXFxuZmlzaGluZyBcXFxuZml0IFxcXG5maXRuZXNzIFxcXG5maiBcXFxuZmsgXFxcbmZsaWNrciBcXFxuZmxpZ2h0cyBcXFxuZmxpciBcXFxuZmxvcmlzdCBcXFxuZmxvd2VycyBcXFxuZmx5IFxcXG5mbSBcXFxuZm8gXFxcbmZvbyBcXFxuZm9vZCBcXFxuZm9vZG5ldHdvcmsgXFxcbmZvb3RiYWxsIFxcXG5mb3JkIFxcXG5mb3JleCBcXFxuZm9yc2FsZSBcXFxuZm9ydW0gXFxcbmZvdW5kYXRpb24gXFxcbmZveCBcXFxuZnIgXFxcbmZyZWUgXFxcbmZyZXNlbml1cyBcXFxuZnJsIFxcXG5mcm9nYW5zIFxcXG5mcm9udGRvb3IgXFxcbmZyb250aWVyIFxcXG5mdHIgXFxcbmZ1aml0c3UgXFxcbmZ1aml4ZXJveCBcXFxuZnVuIFxcXG5mdW5kIFxcXG5mdXJuaXR1cmUgXFxcbmZ1dGJvbCBcXFxuZnlpIFxcXG5nYSBcXFxuZ2FsIFxcXG5nYWxsZXJ5IFxcXG5nYWxsbyBcXFxuZ2FsbHVwIFxcXG5nYW1lIFxcXG5nYW1lcyBcXFxuZ2FwIFxcXG5nYXJkZW4gXFxcbmdheSBcXFxuZ2IgXFxcbmdiaXogXFxcbmdkIFxcXG5nZG4gXFxcbmdlIFxcXG5nZWEgXFxcbmdlbnQgXFxcbmdlbnRpbmcgXFxcbmdlb3JnZSBcXFxuZ2YgXFxcbmdnIFxcXG5nZ2VlIFxcXG5naCBcXFxuZ2kgXFxcbmdpZnQgXFxcbmdpZnRzIFxcXG5naXZlcyBcXFxuZ2l2aW5nIFxcXG5nbCBcXFxuZ2xhZGUgXFxcbmdsYXNzIFxcXG5nbGUgXFxcbmdsb2JhbCBcXFxuZ2xvYm8gXFxcbmdtIFxcXG5nbWFpbCBcXFxuZ21iaCBcXFxuZ21vIFxcXG5nbXggXFxcbmduIFxcXG5nb2RhZGR5IFxcXG5nb2xkIFxcXG5nb2xkcG9pbnQgXFxcbmdvbGYgXFxcbmdvbyBcXFxuZ29vZHllYXIgXFxcbmdvb2cgXFxcbmdvb2dsZSBcXFxuZ29wIFxcXG5nb3QgXFxcbmdvdiBcXFxuZ3AgXFxcbmdxIFxcXG5nciBcXFxuZ3JhaW5nZXIgXFxcbmdyYXBoaWNzIFxcXG5ncmF0aXMgXFxcbmdyZWVuIFxcXG5ncmlwZSBcXFxuZ3JvY2VyeSBcXFxuZ3JvdXAgXFxcbmdzIFxcXG5ndCBcXFxuZ3UgXFxcbmd1YXJkaWFuIFxcXG5ndWNjaSBcXFxuZ3VnZSBcXFxuZ3VpZGUgXFxcbmd1aXRhcnMgXFxcbmd1cnUgXFxcbmd3IFxcXG5neSBcXFxuaGFpciBcXFxuaGFtYnVyZyBcXFxuaGFuZ291dCBcXFxuaGF1cyBcXFxuaGJvIFxcXG5oZGZjIFxcXG5oZGZjYmFuayBcXFxuaGVhbHRoIFxcXG5oZWFsdGhjYXJlIFxcXG5oZWxwIFxcXG5oZWxzaW5raSBcXFxuaGVyZSBcXFxuaGVybWVzIFxcXG5oZ3R2IFxcXG5oaXBob3AgXFxcbmhpc2FtaXRzdSBcXFxuaGl0YWNoaSBcXFxuaGl2IFxcXG5oayBcXFxuaGt0IFxcXG5obSBcXFxuaG4gXFxcbmhvY2tleSBcXFxuaG9sZGluZ3MgXFxcbmhvbGlkYXkgXFxcbmhvbWVkZXBvdCBcXFxuaG9tZWdvb2RzIFxcXG5ob21lcyBcXFxuaG9tZXNlbnNlIFxcXG5ob25kYSBcXFxuaG9yc2UgXFxcbmhvc3BpdGFsIFxcXG5ob3N0IFxcXG5ob3N0aW5nIFxcXG5ob3QgXFxcbmhvdGVsZXMgXFxcbmhvdGVscyBcXFxuaG90bWFpbCBcXFxuaG91c2UgXFxcbmhvdyBcXFxuaHIgXFxcbmhzYmMgXFxcbmh0IFxcXG5odSBcXFxuaHVnaGVzIFxcXG5oeWF0dCBcXFxuaHl1bmRhaSBcXFxuaWJtIFxcXG5pY2JjIFxcXG5pY2UgXFxcbmljdSBcXFxuaWQgXFxcbmllIFxcXG5pZWVlIFxcXG5pZm0gXFxcbmlrYW5vIFxcXG5pbCBcXFxuaW0gXFxcbmltYW1hdCBcXFxuaW1kYiBcXFxuaW1tbyBcXFxuaW1tb2JpbGllbiBcXFxuaW4gXFxcbmluYyBcXFxuaW5kdXN0cmllcyBcXFxuaW5maW5pdGkgXFxcbmluZm8gXFxcbmluZyBcXFxuaW5rIFxcXG5pbnN0aXR1dGUgXFxcbmluc3VyYW5jZSBcXFxuaW5zdXJlIFxcXG5pbnQgXFxcbmludGVybmF0aW9uYWwgXFxcbmludHVpdCBcXFxuaW52ZXN0bWVudHMgXFxcbmlvIFxcXG5pcGlyYW5nYSBcXFxuaXEgXFxcbmlyIFxcXG5pcmlzaCBcXFxuaXMgXFxcbmlzbWFpbGkgXFxcbmlzdCBcXFxuaXN0YW5idWwgXFxcbml0IFxcXG5pdGF1IFxcXG5pdHYgXFxcbml2ZWNvIFxcXG5qYWd1YXIgXFxcbmphdmEgXFxcbmpjYiBcXFxuamUgXFxcbmplZXAgXFxcbmpldHp0IFxcXG5qZXdlbHJ5IFxcXG5qaW8gXFxcbmpsbCBcXFxuam0gXFxcbmptcCBcXFxuam5qIFxcXG5qbyBcXFxuam9icyBcXFxuam9idXJnIFxcXG5qb3QgXFxcbmpveSBcXFxuanAgXFxcbmpwbW9yZ2FuIFxcXG5qcHJzIFxcXG5qdWVnb3MgXFxcbmp1bmlwZXIgXFxcbmthdWZlbiBcXFxua2RkaSBcXFxua2UgXFxcbmtlcnJ5aG90ZWxzIFxcXG5rZXJyeWxvZ2lzdGljcyBcXFxua2Vycnlwcm9wZXJ0aWVzIFxcXG5rZmggXFxcbmtnIFxcXG5raCBcXFxua2kgXFxcbmtpYSBcXFxua2ltIFxcXG5raW5kZXIgXFxcbmtpbmRsZSBcXFxua2l0Y2hlbiBcXFxua2l3aSBcXFxua20gXFxcbmtuIFxcXG5rb2VsbiBcXFxua29tYXRzdSBcXFxua29zaGVyIFxcXG5rcCBcXFxua3BtZyBcXFxua3BuIFxcXG5rciBcXFxua3JkIFxcXG5rcmVkIFxcXG5rdW9rZ3JvdXAgXFxcbmt3IFxcXG5reSBcXFxua3lvdG8gXFxcbmt6IFxcXG5sYSBcXFxubGFjYWl4YSBcXFxubGFtYm9yZ2hpbmkgXFxcbmxhbWVyIFxcXG5sYW5jYXN0ZXIgXFxcbmxhbmNpYSBcXFxubGFuZCBcXFxubGFuZHJvdmVyIFxcXG5sYW54ZXNzIFxcXG5sYXNhbGxlIFxcXG5sYXQgXFxcbmxhdGlubyBcXFxubGF0cm9iZSBcXFxubGF3IFxcXG5sYXd5ZXIgXFxcbmxiIFxcXG5sYyBcXFxubGRzIFxcXG5sZWFzZSBcXFxubGVjbGVyYyBcXFxubGVmcmFrIFxcXG5sZWdhbCBcXFxubGVnbyBcXFxubGV4dXMgXFxcbmxnYnQgXFxcbmxpIFxcXG5saWRsIFxcXG5saWZlIFxcXG5saWZlaW5zdXJhbmNlIFxcXG5saWZlc3R5bGUgXFxcbmxpZ2h0aW5nIFxcXG5saWtlIFxcXG5saWxseSBcXFxubGltaXRlZCBcXFxubGltbyBcXFxubGluY29sbiBcXFxubGluZGUgXFxcbmxpbmsgXFxcbmxpcHN5IFxcXG5saXZlIFxcXG5saXZpbmcgXFxcbmxpeGlsIFxcXG5sayBcXFxubGxjIFxcXG5sbHAgXFxcbmxvYW4gXFxcbmxvYW5zIFxcXG5sb2NrZXIgXFxcbmxvY3VzIFxcXG5sb2Z0IFxcXG5sb2wgXFxcbmxvbmRvbiBcXFxubG90dGUgXFxcbmxvdHRvIFxcXG5sb3ZlIFxcXG5scGwgXFxcbmxwbGZpbmFuY2lhbCBcXFxubHIgXFxcbmxzIFxcXG5sdCBcXFxubHRkIFxcXG5sdGRhIFxcXG5sdSBcXFxubHVuZGJlY2sgXFxcbmx1eGUgXFxcbmx1eHVyeSBcXFxubHYgXFxcbmx5IFxcXG5tYSBcXFxubWFjeXMgXFxcbm1hZHJpZCBcXFxubWFpZiBcXFxubWFpc29uIFxcXG5tYWtldXAgXFxcbm1hbiBcXFxubWFuYWdlbWVudCBcXFxubWFuZ28gXFxcbm1hcCBcXFxubWFya2V0IFxcXG5tYXJrZXRpbmcgXFxcbm1hcmtldHMgXFxcbm1hcnJpb3R0IFxcXG5tYXJzaGFsbHMgXFxcbm1hc2VyYXRpIFxcXG5tYXR0ZWwgXFxcbm1iYSBcXFxubWMgXFxcbm1ja2luc2V5IFxcXG5tZCBcXFxubWUgXFxcbm1lZCBcXFxubWVkaWEgXFxcbm1lZXQgXFxcbm1lbGJvdXJuZSBcXFxubWVtZSBcXFxubWVtb3JpYWwgXFxcbm1lbiBcXFxubWVudSBcXFxubWVyY2ttc2QgXFxcbm1nIFxcXG5taCBcXFxubWlhbWkgXFxcbm1pY3Jvc29mdCBcXFxubWlsIFxcXG5taW5pIFxcXG5taW50IFxcXG5taXQgXFxcbm1pdHN1YmlzaGkgXFxcbm1rIFxcXG5tbCBcXFxubWxiIFxcXG5tbHMgXFxcbm1tIFxcXG5tbWEgXFxcbm1uIFxcXG5tbyBcXFxubW9iaSBcXFxubW9iaWxlIFxcXG5tb2RhIFxcXG5tb2UgXFxcbm1vaSBcXFxubW9tIFxcXG5tb25hc2ggXFxcbm1vbmV5IFxcXG5tb25zdGVyIFxcXG5tb3Jtb24gXFxcbm1vcnRnYWdlIFxcXG5tb3Njb3cgXFxcbm1vdG8gXFxcbm1vdG9yY3ljbGVzIFxcXG5tb3YgXFxcbm1vdmllIFxcXG5tcCBcXFxubXEgXFxcbm1yIFxcXG5tcyBcXFxubXNkIFxcXG5tdCBcXFxubXRuIFxcXG5tdHIgXFxcbm11IFxcXG5tdXNldW0gXFxcbm11dHVhbCBcXFxubXYgXFxcbm13IFxcXG5teCBcXFxubXkgXFxcbm16IFxcXG5uYSBcXFxubmFiIFxcXG5uYWdveWEgXFxcbm5hbWUgXFxcbm5hdGlvbndpZGUgXFxcbm5hdHVyYSBcXFxubmF2eSBcXFxubmJhIFxcXG5uYyBcXFxubmUgXFxcbm5lYyBcXFxubmV0IFxcXG5uZXRiYW5rIFxcXG5uZXRmbGl4IFxcXG5uZXR3b3JrIFxcXG5uZXVzdGFyIFxcXG5uZXcgXFxcbm5ld3MgXFxcbm5leHQgXFxcbm5leHRkaXJlY3QgXFxcbm5leHVzIFxcXG5uZiBcXFxubmZsIFxcXG5uZyBcXFxubmdvIFxcXG5uaGsgXFxcbm5pIFxcXG5uaWNvIFxcXG5uaWtlIFxcXG5uaWtvbiBcXFxubmluamEgXFxcbm5pc3NhbiBcXFxubmlzc2F5IFxcXG5ubCBcXFxubm8gXFxcbm5va2lhIFxcXG5ub3J0aHdlc3Rlcm5tdXR1YWwgXFxcbm5vcnRvbiBcXFxubm93IFxcXG5ub3dydXogXFxcbm5vd3R2IFxcXG5ucCBcXFxubnIgXFxcbm5yYSBcXFxubnJ3IFxcXG5udHQgXFxcbm51IFxcXG5ueWMgXFxcbm56IFxcXG5vYmkgXFxcbm9ic2VydmVyIFxcXG5vZmYgXFxcbm9mZmljZSBcXFxub2tpbmF3YSBcXFxub2xheWFuIFxcXG5vbGF5YW5ncm91cCBcXFxub2xkbmF2eSBcXFxub2xsbyBcXFxub20gXFxcbm9tZWdhIFxcXG5vbmUgXFxcbm9uZyBcXFxub25sIFxcXG5vbmxpbmUgXFxcbm9ueW91cnNpZGUgXFxcbm9vbyBcXFxub3BlbiBcXFxub3JhY2xlIFxcXG5vcmFuZ2UgXFxcbm9yZyBcXFxub3JnYW5pYyBcXFxub3JpZ2lucyBcXFxub3Nha2EgXFxcbm90c3VrYSBcXFxub3R0IFxcXG5vdmggXFxcbnBhIFxcXG5wYWdlIFxcXG5wYW5hc29uaWMgXFxcbnBhcmlzIFxcXG5wYXJzIFxcXG5wYXJ0bmVycyBcXFxucGFydHMgXFxcbnBhcnR5IFxcXG5wYXNzYWdlbnMgXFxcbnBheSBcXFxucGNjdyBcXFxucGUgXFxcbnBldCBcXFxucGYgXFxcbnBmaXplciBcXFxucGcgXFxcbnBoIFxcXG5waGFybWFjeSBcXFxucGhkIFxcXG5waGlsaXBzIFxcXG5waG9uZSBcXFxucGhvdG8gXFxcbnBob3RvZ3JhcGh5IFxcXG5waG90b3MgXFxcbnBoeXNpbyBcXFxucGljcyBcXFxucGljdGV0IFxcXG5waWN0dXJlcyBcXFxucGlkIFxcXG5waW4gXFxcbnBpbmcgXFxcbnBpbmsgXFxcbnBpb25lZXIgXFxcbnBpenphIFxcXG5wayBcXFxucGwgXFxcbnBsYWNlIFxcXG5wbGF5IFxcXG5wbGF5c3RhdGlvbiBcXFxucGx1bWJpbmcgXFxcbnBsdXMgXFxcbnBtIFxcXG5wbiBcXFxucG5jIFxcXG5wb2hsIFxcXG5wb2tlciBcXFxucG9saXRpZSBcXFxucG9ybiBcXFxucG9zdCBcXFxucHIgXFxcbnByYW1lcmljYSBcXFxucHJheGkgXFxcbnByZXNzIFxcXG5wcmltZSBcXFxucHJvIFxcXG5wcm9kIFxcXG5wcm9kdWN0aW9ucyBcXFxucHJvZiBcXFxucHJvZ3Jlc3NpdmUgXFxcbnByb21vIFxcXG5wcm9wZXJ0aWVzIFxcXG5wcm9wZXJ0eSBcXFxucHJvdGVjdGlvbiBcXFxucHJ1IFxcXG5wcnVkZW50aWFsIFxcXG5wcyBcXFxucHQgXFxcbnB1YiBcXFxucHcgXFxcbnB3YyBcXFxucHkgXFxcbnFhIFxcXG5xcG9uIFxcXG5xdWViZWMgXFxcbnF1ZXN0IFxcXG5xdmMgXFxcbnJhY2luZyBcXFxucmFkaW8gXFxcbnJhaWQgXFxcbnJlIFxcXG5yZWFkIFxcXG5yZWFsZXN0YXRlIFxcXG5yZWFsdG9yIFxcXG5yZWFsdHkgXFxcbnJlY2lwZXMgXFxcbnJlZCBcXFxucmVkc3RvbmUgXFxcbnJlZHVtYnJlbGxhIFxcXG5yZWhhYiBcXFxucmVpc2UgXFxcbnJlaXNlbiBcXFxucmVpdCBcXFxucmVsaWFuY2UgXFxcbnJlbiBcXFxucmVudCBcXFxucmVudGFscyBcXFxucmVwYWlyIFxcXG5yZXBvcnQgXFxcbnJlcHVibGljYW4gXFxcbnJlc3QgXFxcbnJlc3RhdXJhbnQgXFxcbnJldmlldyBcXFxucmV2aWV3cyBcXFxucmV4cm90aCBcXFxucmljaCBcXFxucmljaGFyZGxpIFxcXG5yaWNvaCBcXFxucmlsIFxcXG5yaW8gXFxcbnJpcCBcXFxucm1pdCBcXFxucm8gXFxcbnJvY2hlciBcXFxucm9ja3MgXFxcbnJvZGVvIFxcXG5yb2dlcnMgXFxcbnJvb20gXFxcbnJzIFxcXG5yc3ZwIFxcXG5ydSBcXFxucnVnYnkgXFxcbnJ1aHIgXFxcbnJ1biBcXFxucncgXFxcbnJ3ZSBcXFxucnl1a3l1IFxcXG5zYSBcXFxuc2FhcmxhbmQgXFxcbnNhZmUgXFxcbnNhZmV0eSBcXFxuc2FrdXJhIFxcXG5zYWxlIFxcXG5zYWxvbiBcXFxuc2Ftc2NsdWIgXFxcbnNhbXN1bmcgXFxcbnNhbmR2aWsgXFxcbnNhbmR2aWtjb3JvbWFudCBcXFxuc2Fub2ZpIFxcXG5zYXAgXFxcbnNhcmwgXFxcbnNhcyBcXFxuc2F2ZSBcXFxuc2F4byBcXFxuc2IgXFxcbnNiaSBcXFxuc2JzIFxcXG5zYyBcXFxuc2NhIFxcXG5zY2IgXFxcbnNjaGFlZmZsZXIgXFxcbnNjaG1pZHQgXFxcbnNjaG9sYXJzaGlwcyBcXFxuc2Nob29sIFxcXG5zY2h1bGUgXFxcbnNjaHdhcnogXFxcbnNjaWVuY2UgXFxcbnNjam9obnNvbiBcXFxuc2NvdCBcXFxuc2QgXFxcbnNlIFxcXG5zZWFyY2ggXFxcbnNlYXQgXFxcbnNlY3VyZSBcXFxuc2VjdXJpdHkgXFxcbnNlZWsgXFxcbnNlbGVjdCBcXFxuc2VuZXIgXFxcbnNlcnZpY2VzIFxcXG5zZXMgXFxcbnNldmVuIFxcXG5zZXcgXFxcbnNleCBcXFxuc2V4eSBcXFxuc2ZyIFxcXG5zZyBcXFxuc2ggXFxcbnNoYW5ncmlsYSBcXFxuc2hhcnAgXFxcbnNoYXcgXFxcbnNoZWxsIFxcXG5zaGlhIFxcXG5zaGlrc2hhIFxcXG5zaG9lcyBcXFxuc2hvcCBcXFxuc2hvcHBpbmcgXFxcbnNob3VqaSBcXFxuc2hvdyBcXFxuc2hvd3RpbWUgXFxcbnNpIFxcXG5zaWxrIFxcXG5zaW5hIFxcXG5zaW5nbGVzIFxcXG5zaXRlIFxcXG5zaiBcXFxuc2sgXFxcbnNraSBcXFxuc2tpbiBcXFxuc2t5IFxcXG5za3lwZSBcXFxuc2wgXFxcbnNsaW5nIFxcXG5zbSBcXFxuc21hcnQgXFxcbnNtaWxlIFxcXG5zbiBcXFxuc25jZiBcXFxuc28gXFxcbnNvY2NlciBcXFxuc29jaWFsIFxcXG5zb2Z0YmFuayBcXFxuc29mdHdhcmUgXFxcbnNvaHUgXFxcbnNvbGFyIFxcXG5zb2x1dGlvbnMgXFxcbnNvbmcgXFxcbnNvbnkgXFxcbnNveSBcXFxuc3BhIFxcXG5zcGFjZSBcXFxuc3BvcnQgXFxcbnNwb3QgXFxcbnNwcmVhZGJldHRpbmcgXFxcbnNyIFxcXG5zcmwgXFxcbnNzIFxcXG5zdCBcXFxuc3RhZGEgXFxcbnN0YXBsZXMgXFxcbnN0YXIgXFxcbnN0YXRlYmFuayBcXFxuc3RhdGVmYXJtIFxcXG5zdGMgXFxcbnN0Y2dyb3VwIFxcXG5zdG9ja2hvbG0gXFxcbnN0b3JhZ2UgXFxcbnN0b3JlIFxcXG5zdHJlYW0gXFxcbnN0dWRpbyBcXFxuc3R1ZHkgXFxcbnN0eWxlIFxcXG5zdSBcXFxuc3Vja3MgXFxcbnN1cHBsaWVzIFxcXG5zdXBwbHkgXFxcbnN1cHBvcnQgXFxcbnN1cmYgXFxcbnN1cmdlcnkgXFxcbnN1enVraSBcXFxuc3YgXFxcbnN3YXRjaCBcXFxuc3dpZnRjb3ZlciBcXFxuc3dpc3MgXFxcbnN4IFxcXG5zeSBcXFxuc3lkbmV5IFxcXG5zeXN0ZW1zIFxcXG5zeiBcXFxudGFiIFxcXG50YWlwZWkgXFxcbnRhbGsgXFxcbnRhb2JhbyBcXFxudGFyZ2V0IFxcXG50YXRhbW90b3JzIFxcXG50YXRhciBcXFxudGF0dG9vIFxcXG50YXggXFxcbnRheGkgXFxcbnRjIFxcXG50Y2kgXFxcbnRkIFxcXG50ZGsgXFxcbnRlYW0gXFxcbnRlY2ggXFxcbnRlY2hub2xvZ3kgXFxcbnRlbCBcXFxudGVtYXNlayBcXFxudGVubmlzIFxcXG50ZXZhIFxcXG50ZiBcXFxudGcgXFxcbnRoIFxcXG50aGQgXFxcbnRoZWF0ZXIgXFxcbnRoZWF0cmUgXFxcbnRpYWEgXFxcbnRpY2tldHMgXFxcbnRpZW5kYSBcXFxudGlmZmFueSBcXFxudGlwcyBcXFxudGlyZXMgXFxcbnRpcm9sIFxcXG50aiBcXFxudGptYXh4IFxcXG50anggXFxcbnRrIFxcXG50a21heHggXFxcbnRsIFxcXG50bSBcXFxudG1hbGwgXFxcbnRuIFxcXG50byBcXFxudG9kYXkgXFxcbnRva3lvIFxcXG50b29scyBcXFxudG9wIFxcXG50b3JheSBcXFxudG9zaGliYSBcXFxudG90YWwgXFxcbnRvdXJzIFxcXG50b3duIFxcXG50b3lvdGEgXFxcbnRveXMgXFxcbnRyIFxcXG50cmFkZSBcXFxudHJhZGluZyBcXFxudHJhaW5pbmcgXFxcbnRyYXZlbCBcXFxudHJhdmVsY2hhbm5lbCBcXFxudHJhdmVsZXJzIFxcXG50cmF2ZWxlcnNpbnN1cmFuY2UgXFxcbnRydXN0IFxcXG50cnYgXFxcbnR0IFxcXG50dWJlIFxcXG50dWkgXFxcbnR1bmVzIFxcXG50dXNodSBcXFxudHYgXFxcbnR2cyBcXFxudHcgXFxcbnR6IFxcXG51YSBcXFxudWJhbmsgXFxcbnVicyBcXFxudWcgXFxcbnVrIFxcXG51bmljb20gXFxcbnVuaXZlcnNpdHkgXFxcbnVubyBcXFxudW9sIFxcXG51cHMgXFxcbnVzIFxcXG51eSBcXFxudXogXFxcbnZhIFxcXG52YWNhdGlvbnMgXFxcbnZhbmEgXFxcbnZhbmd1YXJkIFxcXG52YyBcXFxudmUgXFxcbnZlZ2FzIFxcXG52ZW50dXJlcyBcXFxudmVyaXNpZ24gXFxcbnZlcnNpY2hlcnVuZyBcXFxudmV0IFxcXG52ZyBcXFxudmkgXFxcbnZpYWplcyBcXFxudmlkZW8gXFxcbnZpZyBcXFxudmlraW5nIFxcXG52aWxsYXMgXFxcbnZpbiBcXFxudmlwIFxcXG52aXJnaW4gXFxcbnZpc2EgXFxcbnZpc2lvbiBcXFxudml2YSBcXFxudml2byBcXFxudmxhYW5kZXJlbiBcXFxudm4gXFxcbnZvZGthIFxcXG52b2xrc3dhZ2VuIFxcXG52b2x2byBcXFxudm90ZSBcXFxudm90aW5nIFxcXG52b3RvIFxcXG52b3lhZ2UgXFxcbnZ1IFxcXG52dWVsb3MgXFxcbndhbGVzIFxcXG53YWxtYXJ0IFxcXG53YWx0ZXIgXFxcbndhbmcgXFxcbndhbmdnb3UgXFxcbndhdGNoIFxcXG53YXRjaGVzIFxcXG53ZWF0aGVyIFxcXG53ZWF0aGVyY2hhbm5lbCBcXFxud2ViY2FtIFxcXG53ZWJlciBcXFxud2Vic2l0ZSBcXFxud2VkIFxcXG53ZWRkaW5nIFxcXG53ZWlibyBcXFxud2VpciBcXFxud2YgXFxcbndob3N3aG8gXFxcbndpZW4gXFxcbndpa2kgXFxcbndpbGxpYW1oaWxsIFxcXG53aW4gXFxcbndpbmRvd3MgXFxcbndpbmUgXFxcbndpbm5lcnMgXFxcbndtZSBcXFxud29sdGVyc2tsdXdlciBcXFxud29vZHNpZGUgXFxcbndvcmsgXFxcbndvcmtzIFxcXG53b3JsZCBcXFxud293IFxcXG53cyBcXFxud3RjIFxcXG53dGYgXFxcbnhib3ggXFxcbnhlcm94IFxcXG54ZmluaXR5IFxcXG54aWh1YW4gXFxcbnhpbiBcXFxueHh4IFxcXG54eXogXFxcbnlhY2h0cyBcXFxueWFob28gXFxcbnlhbWF4dW4gXFxcbnlhbmRleCBcXFxueWUgXFxcbnlvZG9iYXNoaSBcXFxueW9nYSBcXFxueW9rb2hhbWEgXFxcbnlvdSBcXFxueW91dHViZSBcXFxueXQgXFxcbnl1biBcXFxuemEgXFxcbnphcHBvcyBcXFxuemFyYSBcXFxuemVybyBcXFxuemlwIFxcXG56bSBcXFxuem9uZSBcXFxuenVlcmljaCBcXFxuencgXFxcbnZlcm3DtmdlbnNiZXJhdGVyLWN0YiBcXFxudmVybcO2Z2Vuc2JlcmF0dW5nLXB3YiBcXFxuzrXOuyBcXFxuzrXPhSBcXFxu0LHQsyBcXFxu0LHQtdC7IFxcXG7QtNC10YLQuCBcXFxu0LXRjiBcXFxu0LrQsNGC0L7Qu9C40LogXFxcbtC60L7QvCBcXFxu0pvQsNC3IFxcXG7QvNC60LQgXFxcbtC80L7QvSBcXFxu0LzQvtGB0LrQstCwIFxcXG7QvtC90LvQsNC50L0gXFxcbtC+0YDQsyBcXFxu0YDRg9GBIFxcXG7RgNGEIFxcXG7RgdCw0LnRgiBcXFxu0YHRgNCxIFxcXG7Rg9C60YAgXFxcbuGDkuGDlCBcXFxu1bDVodW1IFxcXG7Xmdep16jXkNecIFxcXG7Xp9eV150gXFxcbtin2KjZiNi42KjZiiBcXFxu2KfYqti12KfZhNin2KogXFxcbtin2LHYp9mF2YPZiCBcXFxu2KfZhNin2LHYr9mGIFxcXG7Yp9mE2KjYrdix2YrZhiBcXFxu2KfZhNis2LLYp9im2LEgXFxcbtin2YTYs9i52YjYr9mK2KkgXFxcbtin2YTYudmE2YrYp9mGIFxcXG7Yp9mE2YXYutix2KggXFxcbtin2YXYp9ix2KfYqiBcXFxu2KfbjNix2KfZhiBcXFxu2KjYp9ix2KogXFxcbtio2KfYstin2LEgXFxcbtio2r7Yp9ix2KogXFxcbtio2YrYqtmDIFxcXG7Zvtin2qnYs9iq2KfZhiBcXFxu2oDYp9ix2KogXFxcbtiq2YjZhtizIFxcXG7Ys9mI2K/Yp9mGIFxcXG7Ys9mI2LHZitipIFxcXG7YtNio2YPYqSBcXFxu2LnYsdin2YIgXFxcbti52LHYqCBcXFxu2LnZhdin2YYgXFxcbtmB2YTYs9i32YrZhiBcXFxu2YLYt9ixIFxcXG7Zg9in2KvZiNmE2YrZgyBcXFxu2YPZiNmFIFxcXG7Zhdi12LEgXFxcbtmF2YTZitiz2YrYpyBcXFxu2YXZiNix2YrYqtin2YbZitinIFxcXG7ZhdmI2YLYuSBcXFxu2YfZhdix2KfZhyBcXFxu4KSV4KWJ4KSuIFxcXG7gpKjgpYfgpJ8gXFxcbuCkreCkvuCksOCkpCBcXFxu4KSt4KS+4KSw4KSk4KSu4KWNIFxcXG7gpK3gpL7gpLDgpYvgpKQgXFxcbuCkuOCkguCkl+CkoOCkqCBcXFxu4Kas4Ka+4KaC4Kay4Ka+IFxcXG7gpq3gpr7gprDgpqQgXFxcbuCmreCmvuCnsOCmpCBcXFxu4Kit4Ki+4Kiw4KikIFxcXG7gqq3gqr7gqrDgqqQgXFxcbuCsreCsvuCssOCspCBcXFxu4K6H4K6o4K+N4K6k4K6/4K6v4K6+IFxcXG7grofgrrLgrpngr43grpXgr4ggXFxcbuCumuCuv+CumeCvjeCuleCuquCvjeCuquCvguCusOCvjSBcXFxu4LCt4LC+4LCw4LCk4LGNIFxcXG7gsq3gsr7gsrDgsqQgXFxcbuC0reC0vuC0sOC0pOC0giBcXFxu4La94LaC4Laa4LePIFxcXG7guITguK3guKEgXFxcbuC5hOC4l+C4oiBcXFxu4Lql4Lqy4LqnIFxcXG7ri7frhLcgXFxcbuuLt+y7tCBcXFxu7IK87ISxIFxcXG7tlZzqta0gXFxcbuOCouODnuOCvuODsyBcXFxu44Kw44O844Kw44OrIFxcXG7jgq/jg6njgqbjg4kgXFxcbuOCs+ODoCBcXFxu44K544OI44KiIFxcXG7jgrvjg7zjg6sgXFxcbuODleOCoeODg+OCt+ODp+ODsyBcXFxu44Od44Kk44Oz44OIIFxcXG7jgb/jgpPjgaogXFxcbuS4lueVjCBcXFxu5Lit5L+hIFxcXG7kuK3lm70gXFxcbuS4reWciyBcXFxu5Lit5paH572RIFxcXG7kuprpqazpgIogXFxcbuS8geS4miBcXFxu5L2b5bGxIFxcXG7kv6Hmga8gXFxcbuWBpeW6tyBcXFxu5YWr5Y2mIFxcXG7lhazlj7ggXFxcbuWFrOebiiBcXFxu5Y+w5rm+IFxcXG7lj7DngaMgXFxcbuWVhuWfjiBcXFxu5ZWG5bqXIFxcXG7llYbmoIcgXFxcbuWYiemHjCBcXFxu5ZiJ6YeM5aSn6YWS5bqXIFxcXG7lnKjnur8gXFxcbuWkp+S8l+axvei9piBcXFxu5aSn5ou/IFxcXG7lpKnkuLvmlZkgXFxcbuWoseS5kCBcXFxu5a626Zu7IFxcXG7lub/kuJwgXFxcbuW+ruWNmiBcXFxu5oWI5ZaEIFxcXG7miJHniLHkvaAgXFxcbuaJi+acuiBcXFxu5oub6IGYIFxcXG7mlL/liqEgXFxcbuaUv+W6nCBcXFxu5paw5Yqg5Z2hIFxcXG7mlrDpl7sgXFxcbuaXtuWwmiBcXFxu5pu457GNIFxcXG7mnLrmnoQgXFxcbua3oemprOmUoSBcXFxu5ri45oiPIFxcXG7mvrPploAgXFxcbueCueeciyBcXFxu56e75YqoIFxcXG7nu4Tnu4fmnLrmnoQgXFxcbue9keWdgCBcXFxu572R5bqXIFxcXG7nvZHnq5kgXFxcbue9kee7nCBcXFxu6IGU6YCaIFxcXG7or7rln7rkupogXFxcbuiwt+atjCBcXFxu6LSt54mpIFxcXG7pgJrosqkgXFxcbumbhuWboiBcXFxu6Zu76KiK55uI56eRIFxcXG7po57liKnmtaYgXFxcbumjn+WTgSBcXFxu6aSQ5Y6FIFxcXG7pppnmoLzph4zmi4kgXFxcbummmea4rycuc3BsaXQoJyAnKTtcblxuLyoqXG5cdFRoZSBzY2FubmVyIHByb3ZpZGVzIGFuIGludGVyZmFjZSB0aGF0IHRha2VzIGEgc3RyaW5nIG9mIHRleHQgYXMgaW5wdXQsIGFuZFxuXHRvdXRwdXRzIGFuIGFycmF5IG9mIHRva2VucyBpbnN0YW5jZXMgdGhhdCBjYW4gYmUgdXNlZCBmb3IgZWFzeSBVUkwgcGFyc2luZy5cblxuXHRAbW9kdWxlIGxpbmtpZnlcblx0QHN1Ym1vZHVsZSBzY2FubmVyXG5cdEBtYWluIHNjYW5uZXJcbiovXG5cbnZhciBMRVRURVIgPSAvKD86W0EtWmEtelxceEFBXFx4QjVcXHhCQVxceEMwLVxceEQ2XFx4RDgtXFx4RjZcXHhGOC1cXHUwMkMxXFx1MDJDNi1cXHUwMkQxXFx1MDJFMC1cXHUwMkU0XFx1MDJFQ1xcdTAyRUVcXHUwMzcwLVxcdTAzNzRcXHUwMzc2XFx1MDM3N1xcdTAzN0EtXFx1MDM3RFxcdTAzN0ZcXHUwMzg2XFx1MDM4OC1cXHUwMzhBXFx1MDM4Q1xcdTAzOEUtXFx1MDNBMVxcdTAzQTMtXFx1MDNGNVxcdTAzRjctXFx1MDQ4MVxcdTA0OEEtXFx1MDUyRlxcdTA1MzEtXFx1MDU1NlxcdTA1NTlcXHUwNTYwLVxcdTA1ODhcXHUwNUQwLVxcdTA1RUFcXHUwNUVGLVxcdTA1RjJcXHUwNjIwLVxcdTA2NEFcXHUwNjZFXFx1MDY2RlxcdTA2NzEtXFx1MDZEM1xcdTA2RDVcXHUwNkU1XFx1MDZFNlxcdTA2RUVcXHUwNkVGXFx1MDZGQS1cXHUwNkZDXFx1MDZGRlxcdTA3MTBcXHUwNzEyLVxcdTA3MkZcXHUwNzRELVxcdTA3QTVcXHUwN0IxXFx1MDdDQS1cXHUwN0VBXFx1MDdGNFxcdTA3RjVcXHUwN0ZBXFx1MDgwMC1cXHUwODE1XFx1MDgxQVxcdTA4MjRcXHUwODI4XFx1MDg0MC1cXHUwODU4XFx1MDg2MC1cXHUwODZBXFx1MDhBMC1cXHUwOEI0XFx1MDhCNi1cXHUwOEM3XFx1MDkwNC1cXHUwOTM5XFx1MDkzRFxcdTA5NTBcXHUwOTU4LVxcdTA5NjFcXHUwOTcxLVxcdTA5ODBcXHUwOTg1LVxcdTA5OENcXHUwOThGXFx1MDk5MFxcdTA5OTMtXFx1MDlBOFxcdTA5QUEtXFx1MDlCMFxcdTA5QjJcXHUwOUI2LVxcdTA5QjlcXHUwOUJEXFx1MDlDRVxcdTA5RENcXHUwOUREXFx1MDlERi1cXHUwOUUxXFx1MDlGMFxcdTA5RjFcXHUwOUZDXFx1MEEwNS1cXHUwQTBBXFx1MEEwRlxcdTBBMTBcXHUwQTEzLVxcdTBBMjhcXHUwQTJBLVxcdTBBMzBcXHUwQTMyXFx1MEEzM1xcdTBBMzVcXHUwQTM2XFx1MEEzOFxcdTBBMzlcXHUwQTU5LVxcdTBBNUNcXHUwQTVFXFx1MEE3Mi1cXHUwQTc0XFx1MEE4NS1cXHUwQThEXFx1MEE4Ri1cXHUwQTkxXFx1MEE5My1cXHUwQUE4XFx1MEFBQS1cXHUwQUIwXFx1MEFCMlxcdTBBQjNcXHUwQUI1LVxcdTBBQjlcXHUwQUJEXFx1MEFEMFxcdTBBRTBcXHUwQUUxXFx1MEFGOVxcdTBCMDUtXFx1MEIwQ1xcdTBCMEZcXHUwQjEwXFx1MEIxMy1cXHUwQjI4XFx1MEIyQS1cXHUwQjMwXFx1MEIzMlxcdTBCMzNcXHUwQjM1LVxcdTBCMzlcXHUwQjNEXFx1MEI1Q1xcdTBCNURcXHUwQjVGLVxcdTBCNjFcXHUwQjcxXFx1MEI4M1xcdTBCODUtXFx1MEI4QVxcdTBCOEUtXFx1MEI5MFxcdTBCOTItXFx1MEI5NVxcdTBCOTlcXHUwQjlBXFx1MEI5Q1xcdTBCOUVcXHUwQjlGXFx1MEJBM1xcdTBCQTRcXHUwQkE4LVxcdTBCQUFcXHUwQkFFLVxcdTBCQjlcXHUwQkQwXFx1MEMwNS1cXHUwQzBDXFx1MEMwRS1cXHUwQzEwXFx1MEMxMi1cXHUwQzI4XFx1MEMyQS1cXHUwQzM5XFx1MEMzRFxcdTBDNTgtXFx1MEM1QVxcdTBDNjBcXHUwQzYxXFx1MEM4MFxcdTBDODUtXFx1MEM4Q1xcdTBDOEUtXFx1MEM5MFxcdTBDOTItXFx1MENBOFxcdTBDQUEtXFx1MENCM1xcdTBDQjUtXFx1MENCOVxcdTBDQkRcXHUwQ0RFXFx1MENFMFxcdTBDRTFcXHUwQ0YxXFx1MENGMlxcdTBEMDQtXFx1MEQwQ1xcdTBEMEUtXFx1MEQxMFxcdTBEMTItXFx1MEQzQVxcdTBEM0RcXHUwRDRFXFx1MEQ1NC1cXHUwRDU2XFx1MEQ1Ri1cXHUwRDYxXFx1MEQ3QS1cXHUwRDdGXFx1MEQ4NS1cXHUwRDk2XFx1MEQ5QS1cXHUwREIxXFx1MERCMy1cXHUwREJCXFx1MERCRFxcdTBEQzAtXFx1MERDNlxcdTBFMDEtXFx1MEUzMFxcdTBFMzJcXHUwRTMzXFx1MEU0MC1cXHUwRTQ2XFx1MEU4MVxcdTBFODJcXHUwRTg0XFx1MEU4Ni1cXHUwRThBXFx1MEU4Qy1cXHUwRUEzXFx1MEVBNVxcdTBFQTctXFx1MEVCMFxcdTBFQjJcXHUwRUIzXFx1MEVCRFxcdTBFQzAtXFx1MEVDNFxcdTBFQzZcXHUwRURDLVxcdTBFREZcXHUwRjAwXFx1MEY0MC1cXHUwRjQ3XFx1MEY0OS1cXHUwRjZDXFx1MEY4OC1cXHUwRjhDXFx1MTAwMC1cXHUxMDJBXFx1MTAzRlxcdTEwNTAtXFx1MTA1NVxcdTEwNUEtXFx1MTA1RFxcdTEwNjFcXHUxMDY1XFx1MTA2NlxcdTEwNkUtXFx1MTA3MFxcdTEwNzUtXFx1MTA4MVxcdTEwOEVcXHUxMEEwLVxcdTEwQzVcXHUxMEM3XFx1MTBDRFxcdTEwRDAtXFx1MTBGQVxcdTEwRkMtXFx1MTI0OFxcdTEyNEEtXFx1MTI0RFxcdTEyNTAtXFx1MTI1NlxcdTEyNThcXHUxMjVBLVxcdTEyNURcXHUxMjYwLVxcdTEyODhcXHUxMjhBLVxcdTEyOERcXHUxMjkwLVxcdTEyQjBcXHUxMkIyLVxcdTEyQjVcXHUxMkI4LVxcdTEyQkVcXHUxMkMwXFx1MTJDMi1cXHUxMkM1XFx1MTJDOC1cXHUxMkQ2XFx1MTJEOC1cXHUxMzEwXFx1MTMxMi1cXHUxMzE1XFx1MTMxOC1cXHUxMzVBXFx1MTM4MC1cXHUxMzhGXFx1MTNBMC1cXHUxM0Y1XFx1MTNGOC1cXHUxM0ZEXFx1MTQwMS1cXHUxNjZDXFx1MTY2Ri1cXHUxNjdGXFx1MTY4MS1cXHUxNjlBXFx1MTZBMC1cXHUxNkVBXFx1MTZGMS1cXHUxNkY4XFx1MTcwMC1cXHUxNzBDXFx1MTcwRS1cXHUxNzExXFx1MTcyMC1cXHUxNzMxXFx1MTc0MC1cXHUxNzUxXFx1MTc2MC1cXHUxNzZDXFx1MTc2RS1cXHUxNzcwXFx1MTc4MC1cXHUxN0IzXFx1MTdEN1xcdTE3RENcXHUxODIwLVxcdTE4NzhcXHUxODgwLVxcdTE4ODRcXHUxODg3LVxcdTE4QThcXHUxOEFBXFx1MThCMC1cXHUxOEY1XFx1MTkwMC1cXHUxOTFFXFx1MTk1MC1cXHUxOTZEXFx1MTk3MC1cXHUxOTc0XFx1MTk4MC1cXHUxOUFCXFx1MTlCMC1cXHUxOUM5XFx1MUEwMC1cXHUxQTE2XFx1MUEyMC1cXHUxQTU0XFx1MUFBN1xcdTFCMDUtXFx1MUIzM1xcdTFCNDUtXFx1MUI0QlxcdTFCODMtXFx1MUJBMFxcdTFCQUVcXHUxQkFGXFx1MUJCQS1cXHUxQkU1XFx1MUMwMC1cXHUxQzIzXFx1MUM0RC1cXHUxQzRGXFx1MUM1QS1cXHUxQzdEXFx1MUM4MC1cXHUxQzg4XFx1MUM5MC1cXHUxQ0JBXFx1MUNCRC1cXHUxQ0JGXFx1MUNFOS1cXHUxQ0VDXFx1MUNFRS1cXHUxQ0YzXFx1MUNGNVxcdTFDRjZcXHUxQ0ZBXFx1MUQwMC1cXHUxREJGXFx1MUUwMC1cXHUxRjE1XFx1MUYxOC1cXHUxRjFEXFx1MUYyMC1cXHUxRjQ1XFx1MUY0OC1cXHUxRjREXFx1MUY1MC1cXHUxRjU3XFx1MUY1OVxcdTFGNUJcXHUxRjVEXFx1MUY1Ri1cXHUxRjdEXFx1MUY4MC1cXHUxRkI0XFx1MUZCNi1cXHUxRkJDXFx1MUZCRVxcdTFGQzItXFx1MUZDNFxcdTFGQzYtXFx1MUZDQ1xcdTFGRDAtXFx1MUZEM1xcdTFGRDYtXFx1MUZEQlxcdTFGRTAtXFx1MUZFQ1xcdTFGRjItXFx1MUZGNFxcdTFGRjYtXFx1MUZGQ1xcdTIwNzFcXHUyMDdGXFx1MjA5MC1cXHUyMDlDXFx1MjEwMlxcdTIxMDdcXHUyMTBBLVxcdTIxMTNcXHUyMTE1XFx1MjExOS1cXHUyMTFEXFx1MjEyNFxcdTIxMjZcXHUyMTI4XFx1MjEyQS1cXHUyMTJEXFx1MjEyRi1cXHUyMTM5XFx1MjEzQy1cXHUyMTNGXFx1MjE0NS1cXHUyMTQ5XFx1MjE0RVxcdTIxODNcXHUyMTg0XFx1MkMwMC1cXHUyQzJFXFx1MkMzMC1cXHUyQzVFXFx1MkM2MC1cXHUyQ0U0XFx1MkNFQi1cXHUyQ0VFXFx1MkNGMlxcdTJDRjNcXHUyRDAwLVxcdTJEMjVcXHUyRDI3XFx1MkQyRFxcdTJEMzAtXFx1MkQ2N1xcdTJENkZcXHUyRDgwLVxcdTJEOTZcXHUyREEwLVxcdTJEQTZcXHUyREE4LVxcdTJEQUVcXHUyREIwLVxcdTJEQjZcXHUyREI4LVxcdTJEQkVcXHUyREMwLVxcdTJEQzZcXHUyREM4LVxcdTJEQ0VcXHUyREQwLVxcdTJERDZcXHUyREQ4LVxcdTJEREVcXHUyRTJGXFx1MzAwNVxcdTMwMDZcXHUzMDMxLVxcdTMwMzVcXHUzMDNCXFx1MzAzQ1xcdTMwNDEtXFx1MzA5NlxcdTMwOUQtXFx1MzA5RlxcdTMwQTEtXFx1MzBGQVxcdTMwRkMtXFx1MzBGRlxcdTMxMDUtXFx1MzEyRlxcdTMxMzEtXFx1MzE4RVxcdTMxQTAtXFx1MzFCRlxcdTMxRjAtXFx1MzFGRlxcdTM0MDAtXFx1NERCRlxcdTRFMDAtXFx1OUZGQ1xcdUEwMDAtXFx1QTQ4Q1xcdUE0RDAtXFx1QTRGRFxcdUE1MDAtXFx1QTYwQ1xcdUE2MTAtXFx1QTYxRlxcdUE2MkFcXHVBNjJCXFx1QTY0MC1cXHVBNjZFXFx1QTY3Ri1cXHVBNjlEXFx1QTZBMC1cXHVBNkU1XFx1QTcxNy1cXHVBNzFGXFx1QTcyMi1cXHVBNzg4XFx1QTc4Qi1cXHVBN0JGXFx1QTdDMi1cXHVBN0NBXFx1QTdGNS1cXHVBODAxXFx1QTgwMy1cXHVBODA1XFx1QTgwNy1cXHVBODBBXFx1QTgwQy1cXHVBODIyXFx1QTg0MC1cXHVBODczXFx1QTg4Mi1cXHVBOEIzXFx1QThGMi1cXHVBOEY3XFx1QThGQlxcdUE4RkRcXHVBOEZFXFx1QTkwQS1cXHVBOTI1XFx1QTkzMC1cXHVBOTQ2XFx1QTk2MC1cXHVBOTdDXFx1QTk4NC1cXHVBOUIyXFx1QTlDRlxcdUE5RTAtXFx1QTlFNFxcdUE5RTYtXFx1QTlFRlxcdUE5RkEtXFx1QTlGRVxcdUFBMDAtXFx1QUEyOFxcdUFBNDAtXFx1QUE0MlxcdUFBNDQtXFx1QUE0QlxcdUFBNjAtXFx1QUE3NlxcdUFBN0FcXHVBQTdFLVxcdUFBQUZcXHVBQUIxXFx1QUFCNVxcdUFBQjZcXHVBQUI5LVxcdUFBQkRcXHVBQUMwXFx1QUFDMlxcdUFBREItXFx1QUFERFxcdUFBRTAtXFx1QUFFQVxcdUFBRjItXFx1QUFGNFxcdUFCMDEtXFx1QUIwNlxcdUFCMDktXFx1QUIwRVxcdUFCMTEtXFx1QUIxNlxcdUFCMjAtXFx1QUIyNlxcdUFCMjgtXFx1QUIyRVxcdUFCMzAtXFx1QUI1QVxcdUFCNUMtXFx1QUI2OVxcdUFCNzAtXFx1QUJFMlxcdUFDMDAtXFx1RDdBM1xcdUQ3QjAtXFx1RDdDNlxcdUQ3Q0ItXFx1RDdGQlxcdUY5MDAtXFx1RkE2RFxcdUZBNzAtXFx1RkFEOVxcdUZCMDAtXFx1RkIwNlxcdUZCMTMtXFx1RkIxN1xcdUZCMURcXHVGQjFGLVxcdUZCMjhcXHVGQjJBLVxcdUZCMzZcXHVGQjM4LVxcdUZCM0NcXHVGQjNFXFx1RkI0MFxcdUZCNDFcXHVGQjQzXFx1RkI0NFxcdUZCNDYtXFx1RkJCMVxcdUZCRDMtXFx1RkQzRFxcdUZENTAtXFx1RkQ4RlxcdUZEOTItXFx1RkRDN1xcdUZERjAtXFx1RkRGQlxcdUZFNzAtXFx1RkU3NFxcdUZFNzYtXFx1RkVGQ1xcdUZGMjEtXFx1RkYzQVxcdUZGNDEtXFx1RkY1QVxcdUZGNjYtXFx1RkZCRVxcdUZGQzItXFx1RkZDN1xcdUZGQ0EtXFx1RkZDRlxcdUZGRDItXFx1RkZEN1xcdUZGREEtXFx1RkZEQ118XFx1RDgwMFtcXHVEQzAwLVxcdURDMEJcXHVEQzBELVxcdURDMjZcXHVEQzI4LVxcdURDM0FcXHVEQzNDXFx1REMzRFxcdURDM0YtXFx1REM0RFxcdURDNTAtXFx1REM1RFxcdURDODAtXFx1RENGQVxcdURFODAtXFx1REU5Q1xcdURFQTAtXFx1REVEMFxcdURGMDAtXFx1REYxRlxcdURGMkQtXFx1REY0MFxcdURGNDItXFx1REY0OVxcdURGNTAtXFx1REY3NVxcdURGODAtXFx1REY5RFxcdURGQTAtXFx1REZDM1xcdURGQzgtXFx1REZDRl18XFx1RDgwMVtcXHVEQzAwLVxcdURDOURcXHVEQ0IwLVxcdURDRDNcXHVEQ0Q4LVxcdURDRkJcXHVERDAwLVxcdUREMjdcXHVERDMwLVxcdURENjNcXHVERTAwLVxcdURGMzZcXHVERjQwLVxcdURGNTVcXHVERjYwLVxcdURGNjddfFxcdUQ4MDJbXFx1REMwMC1cXHVEQzA1XFx1REMwOFxcdURDMEEtXFx1REMzNVxcdURDMzdcXHVEQzM4XFx1REMzQ1xcdURDM0YtXFx1REM1NVxcdURDNjAtXFx1REM3NlxcdURDODAtXFx1REM5RVxcdURDRTAtXFx1RENGMlxcdURDRjRcXHVEQ0Y1XFx1REQwMC1cXHVERDE1XFx1REQyMC1cXHVERDM5XFx1REQ4MC1cXHVEREI3XFx1RERCRVxcdUREQkZcXHVERTAwXFx1REUxMC1cXHVERTEzXFx1REUxNS1cXHVERTE3XFx1REUxOS1cXHVERTM1XFx1REU2MC1cXHVERTdDXFx1REU4MC1cXHVERTlDXFx1REVDMC1cXHVERUM3XFx1REVDOS1cXHVERUU0XFx1REYwMC1cXHVERjM1XFx1REY0MC1cXHVERjU1XFx1REY2MC1cXHVERjcyXFx1REY4MC1cXHVERjkxXXxcXHVEODAzW1xcdURDMDAtXFx1REM0OFxcdURDODAtXFx1RENCMlxcdURDQzAtXFx1RENGMlxcdUREMDAtXFx1REQyM1xcdURFODAtXFx1REVBOVxcdURFQjBcXHVERUIxXFx1REYwMC1cXHVERjFDXFx1REYyN1xcdURGMzAtXFx1REY0NVxcdURGQjAtXFx1REZDNFxcdURGRTAtXFx1REZGNl18XFx1RDgwNFtcXHVEQzAzLVxcdURDMzdcXHVEQzgzLVxcdURDQUZcXHVEQ0QwLVxcdURDRThcXHVERDAzLVxcdUREMjZcXHVERDQ0XFx1REQ0N1xcdURENTAtXFx1REQ3MlxcdURENzZcXHVERDgzLVxcdUREQjJcXHVEREMxLVxcdUREQzRcXHVERERBXFx1REREQ1xcdURFMDAtXFx1REUxMVxcdURFMTMtXFx1REUyQlxcdURFODAtXFx1REU4NlxcdURFODhcXHVERThBLVxcdURFOERcXHVERThGLVxcdURFOURcXHVERTlGLVxcdURFQThcXHVERUIwLVxcdURFREVcXHVERjA1LVxcdURGMENcXHVERjBGXFx1REYxMFxcdURGMTMtXFx1REYyOFxcdURGMkEtXFx1REYzMFxcdURGMzJcXHVERjMzXFx1REYzNS1cXHVERjM5XFx1REYzRFxcdURGNTBcXHVERjVELVxcdURGNjFdfFxcdUQ4MDVbXFx1REMwMC1cXHVEQzM0XFx1REM0Ny1cXHVEQzRBXFx1REM1Ri1cXHVEQzYxXFx1REM4MC1cXHVEQ0FGXFx1RENDNFxcdURDQzVcXHVEQ0M3XFx1REQ4MC1cXHVEREFFXFx1REREOC1cXHVERERCXFx1REUwMC1cXHVERTJGXFx1REU0NFxcdURFODAtXFx1REVBQVxcdURFQjhcXHVERjAwLVxcdURGMUFdfFxcdUQ4MDZbXFx1REMwMC1cXHVEQzJCXFx1RENBMC1cXHVEQ0RGXFx1RENGRi1cXHVERDA2XFx1REQwOVxcdUREMEMtXFx1REQxM1xcdUREMTVcXHVERDE2XFx1REQxOC1cXHVERDJGXFx1REQzRlxcdURENDFcXHVEREEwLVxcdUREQTdcXHVEREFBLVxcdURERDBcXHVEREUxXFx1RERFM1xcdURFMDBcXHVERTBCLVxcdURFMzJcXHVERTNBXFx1REU1MFxcdURFNUMtXFx1REU4OVxcdURFOURcXHVERUMwLVxcdURFRjhdfFxcdUQ4MDdbXFx1REMwMC1cXHVEQzA4XFx1REMwQS1cXHVEQzJFXFx1REM0MFxcdURDNzItXFx1REM4RlxcdUREMDAtXFx1REQwNlxcdUREMDhcXHVERDA5XFx1REQwQi1cXHVERDMwXFx1REQ0NlxcdURENjAtXFx1REQ2NVxcdURENjdcXHVERDY4XFx1REQ2QS1cXHVERDg5XFx1REQ5OFxcdURFRTAtXFx1REVGMlxcdURGQjBdfFxcdUQ4MDhbXFx1REMwMC1cXHVERjk5XXxcXHVEODA5W1xcdURDODAtXFx1REQ0M118W1xcdUQ4MENcXHVEODFDLVxcdUQ4MjBcXHVEODIyXFx1RDg0MC1cXHVEODY4XFx1RDg2QS1cXHVEODZDXFx1RDg2Ri1cXHVEODcyXFx1RDg3NC1cXHVEODc5XFx1RDg4MC1cXHVEODgzXVtcXHVEQzAwLVxcdURGRkZdfFxcdUQ4MERbXFx1REMwMC1cXHVEQzJFXXxcXHVEODExW1xcdURDMDAtXFx1REU0Nl18XFx1RDgxQVtcXHVEQzAwLVxcdURFMzhcXHVERTQwLVxcdURFNUVcXHVERUQwLVxcdURFRURcXHVERjAwLVxcdURGMkZcXHVERjQwLVxcdURGNDNcXHVERjYzLVxcdURGNzdcXHVERjdELVxcdURGOEZdfFxcdUQ4MUJbXFx1REU0MC1cXHVERTdGXFx1REYwMC1cXHVERjRBXFx1REY1MFxcdURGOTMtXFx1REY5RlxcdURGRTBcXHVERkUxXFx1REZFM118XFx1RDgyMVtcXHVEQzAwLVxcdURGRjddfFxcdUQ4MjNbXFx1REMwMC1cXHVEQ0Q1XFx1REQwMC1cXHVERDA4XXxcXHVEODJDW1xcdURDMDAtXFx1REQxRVxcdURENTAtXFx1REQ1MlxcdURENjQtXFx1REQ2N1xcdURENzAtXFx1REVGQl18XFx1RDgyRltcXHVEQzAwLVxcdURDNkFcXHVEQzcwLVxcdURDN0NcXHVEQzgwLVxcdURDODhcXHVEQzkwLVxcdURDOTldfFxcdUQ4MzVbXFx1REMwMC1cXHVEQzU0XFx1REM1Ni1cXHVEQzlDXFx1REM5RVxcdURDOUZcXHVEQ0EyXFx1RENBNVxcdURDQTZcXHVEQ0E5LVxcdURDQUNcXHVEQ0FFLVxcdURDQjlcXHVEQ0JCXFx1RENCRC1cXHVEQ0MzXFx1RENDNS1cXHVERDA1XFx1REQwNy1cXHVERDBBXFx1REQwRC1cXHVERDE0XFx1REQxNi1cXHVERDFDXFx1REQxRS1cXHVERDM5XFx1REQzQi1cXHVERDNFXFx1REQ0MC1cXHVERDQ0XFx1REQ0NlxcdURENEEtXFx1REQ1MFxcdURENTItXFx1REVBNVxcdURFQTgtXFx1REVDMFxcdURFQzItXFx1REVEQVxcdURFREMtXFx1REVGQVxcdURFRkMtXFx1REYxNFxcdURGMTYtXFx1REYzNFxcdURGMzYtXFx1REY0RVxcdURGNTAtXFx1REY2RVxcdURGNzAtXFx1REY4OFxcdURGOEEtXFx1REZBOFxcdURGQUEtXFx1REZDMlxcdURGQzQtXFx1REZDQl18XFx1RDgzOFtcXHVERDAwLVxcdUREMkNcXHVERDM3LVxcdUREM0RcXHVERDRFXFx1REVDMC1cXHVERUVCXXxcXHVEODNBW1xcdURDMDAtXFx1RENDNFxcdUREMDAtXFx1REQ0M1xcdURENEJdfFxcdUQ4M0JbXFx1REUwMC1cXHVERTAzXFx1REUwNS1cXHVERTFGXFx1REUyMVxcdURFMjJcXHVERTI0XFx1REUyN1xcdURFMjktXFx1REUzMlxcdURFMzQtXFx1REUzN1xcdURFMzlcXHVERTNCXFx1REU0MlxcdURFNDdcXHVERTQ5XFx1REU0QlxcdURFNEQtXFx1REU0RlxcdURFNTFcXHVERTUyXFx1REU1NFxcdURFNTdcXHVERTU5XFx1REU1QlxcdURFNURcXHVERTVGXFx1REU2MVxcdURFNjJcXHVERTY0XFx1REU2Ny1cXHVERTZBXFx1REU2Qy1cXHVERTcyXFx1REU3NC1cXHVERTc3XFx1REU3OS1cXHVERTdDXFx1REU3RVxcdURFODAtXFx1REU4OVxcdURFOEItXFx1REU5QlxcdURFQTEtXFx1REVBM1xcdURFQTUtXFx1REVBOVxcdURFQUItXFx1REVCQl18XFx1RDg2OVtcXHVEQzAwLVxcdURFRERcXHVERjAwLVxcdURGRkZdfFxcdUQ4NkRbXFx1REMwMC1cXHVERjM0XFx1REY0MC1cXHVERkZGXXxcXHVEODZFW1xcdURDMDAtXFx1REMxRFxcdURDMjAtXFx1REZGRl18XFx1RDg3M1tcXHVEQzAwLVxcdURFQTFcXHVERUIwLVxcdURGRkZdfFxcdUQ4N0FbXFx1REMwMC1cXHVERkUwXXxcXHVEODdFW1xcdURDMDAtXFx1REUxRF18XFx1RDg4NFtcXHVEQzAwLVxcdURGNEFdKS87IC8vIEFueSBVbmljb2RlIGNoYXJhY3RlciB3aXRoIGxldHRlciBkYXRhIHR5cGVcblxudmFyIEVNT0pJID0gLyg/OlsjXFwqMC05XFx4QTlcXHhBRVxcdTIwM0NcXHUyMDQ5XFx1MjEyMlxcdTIxMzlcXHUyMTk0LVxcdTIxOTlcXHUyMUE5XFx1MjFBQVxcdTIzMUFcXHUyMzFCXFx1MjMyOFxcdTIzQ0ZcXHUyM0U5LVxcdTIzRjNcXHUyM0Y4LVxcdTIzRkFcXHUyNEMyXFx1MjVBQVxcdTI1QUJcXHUyNUI2XFx1MjVDMFxcdTI1RkItXFx1MjVGRVxcdTI2MDAtXFx1MjYwNFxcdTI2MEVcXHUyNjExXFx1MjYxNFxcdTI2MTVcXHUyNjE4XFx1MjYxRFxcdTI2MjBcXHUyNjIyXFx1MjYyM1xcdTI2MjZcXHUyNjJBXFx1MjYyRVxcdTI2MkZcXHUyNjM4LVxcdTI2M0FcXHUyNjQwXFx1MjY0MlxcdTI2NDgtXFx1MjY1M1xcdTI2NUZcXHUyNjYwXFx1MjY2M1xcdTI2NjVcXHUyNjY2XFx1MjY2OFxcdTI2N0JcXHUyNjdFXFx1MjY3RlxcdTI2OTItXFx1MjY5N1xcdTI2OTlcXHUyNjlCXFx1MjY5Q1xcdTI2QTBcXHUyNkExXFx1MjZBN1xcdTI2QUFcXHUyNkFCXFx1MjZCMFxcdTI2QjFcXHUyNkJEXFx1MjZCRVxcdTI2QzRcXHUyNkM1XFx1MjZDOFxcdTI2Q0VcXHUyNkNGXFx1MjZEMVxcdTI2RDNcXHUyNkQ0XFx1MjZFOVxcdTI2RUFcXHUyNkYwLVxcdTI2RjVcXHUyNkY3LVxcdTI2RkFcXHUyNkZEXFx1MjcwMlxcdTI3MDVcXHUyNzA4LVxcdTI3MERcXHUyNzBGXFx1MjcxMlxcdTI3MTRcXHUyNzE2XFx1MjcxRFxcdTI3MjFcXHUyNzI4XFx1MjczM1xcdTI3MzRcXHUyNzQ0XFx1Mjc0N1xcdTI3NENcXHUyNzRFXFx1Mjc1My1cXHUyNzU1XFx1Mjc1N1xcdTI3NjNcXHUyNzY0XFx1Mjc5NS1cXHUyNzk3XFx1MjdBMVxcdTI3QjBcXHUyN0JGXFx1MjkzNFxcdTI5MzVcXHUyQjA1LVxcdTJCMDdcXHUyQjFCXFx1MkIxQ1xcdTJCNTBcXHUyQjU1XFx1MzAzMFxcdTMwM0RcXHUzMjk3XFx1MzI5OV18XFx1RDgzQ1tcXHVEQzA0XFx1RENDRlxcdURENzBcXHVERDcxXFx1REQ3RVxcdUREN0ZcXHVERDhFXFx1REQ5MS1cXHVERDlBXFx1RERFNi1cXHVEREZGXFx1REUwMVxcdURFMDJcXHVERTFBXFx1REUyRlxcdURFMzItXFx1REUzQVxcdURFNTBcXHVERTUxXFx1REYwMC1cXHVERjIxXFx1REYyNC1cXHVERjkzXFx1REY5NlxcdURGOTdcXHVERjk5LVxcdURGOUJcXHVERjlFLVxcdURGRjBcXHVERkYzLVxcdURGRjVcXHVERkY3LVxcdURGRkZdfFxcdUQ4M0RbXFx1REMwMC1cXHVEQ0ZEXFx1RENGRi1cXHVERDNEXFx1REQ0OS1cXHVERDRFXFx1REQ1MC1cXHVERDY3XFx1REQ2RlxcdURENzBcXHVERDczLVxcdUREN0FcXHVERDg3XFx1REQ4QS1cXHVERDhEXFx1REQ5MFxcdUREOTVcXHVERDk2XFx1RERBNFxcdUREQTVcXHVEREE4XFx1RERCMVxcdUREQjJcXHVEREJDXFx1RERDMi1cXHVEREM0XFx1REREMS1cXHVEREQzXFx1REREQy1cXHVERERFXFx1RERFMVxcdURERTNcXHVEREU4XFx1RERFRlxcdURERjNcXHVEREZBLVxcdURFNEZcXHVERTgwLVxcdURFQzVcXHVERUNCLVxcdURFRDJcXHVERUQ1LVxcdURFRDdcXHVERUUwLVxcdURFRTVcXHVERUU5XFx1REVFQlxcdURFRUNcXHVERUYwXFx1REVGMy1cXHVERUZDXFx1REZFMC1cXHVERkVCXXxcXHVEODNFW1xcdUREMEMtXFx1REQzQVxcdUREM0MtXFx1REQ0NVxcdURENDctXFx1REQ3OFxcdUREN0EtXFx1RERDQlxcdUREQ0QtXFx1RERGRlxcdURFNzAtXFx1REU3NFxcdURFNzgtXFx1REU3QVxcdURFODAtXFx1REU4NlxcdURFOTAtXFx1REVBOFxcdURFQjAtXFx1REVCNlxcdURFQzAtXFx1REVDMlxcdURFRDAtXFx1REVENl0pLzsgLy8gQW55IFVuaWNvZGUgZW1vamkgY2hhcmFjdGVyXG5cbnZhciBESUdJVCA9IC9cXGQvO1xudmFyIFNQQUNFID0gL1xccy87XG4vKipcbiAqIEluaXRpYWxpemUgdGhlIHNjYW5uZXIgY2hhcmFjdGVyLWJhc2VkIHN0YXRlIG1hY2hpbmUgZm9yIHRoZSBnaXZlbiBzdGFydCBzdGF0ZVxuICogQHJldHVybiB7U3RhdGV9IHNjYW5uZXIgc3RhcnRpbmcgc3RhdGVcbiAqL1xuXG5mdW5jdGlvbiBpbml0JDIoKSB7XG4gIHZhciBjdXN0b21Qcm90b2NvbHMgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IFtdO1xuICAvLyBGcmVxdWVudGx5IHVzZWQgc3RhdGVzXG4gIHZhciBTX1NUQVJUID0gbWFrZVN0YXRlKCk7XG4gIHZhciBTX05VTSA9IG1ha2VBY2NlcHRpbmdTdGF0ZShOVU0pO1xuICB2YXIgU19ET01BSU4gPSBtYWtlQWNjZXB0aW5nU3RhdGUoRE9NQUlOKTtcbiAgdmFyIFNfRE9NQUlOX0hZUEhFTiA9IG1ha2VTdGF0ZSgpOyAvLyBkb21haW4gZm9sbG93ZWQgYnkgMSBvciBtb3JlIGh5cGhlbiBjaGFyYWN0ZXJzXG5cbiAgdmFyIFNfV1MgPSBtYWtlQWNjZXB0aW5nU3RhdGUoV1MpO1xuICB2YXIgRE9NQUlOX1JFR0VYX1RSQU5TSVRJT05TID0gW1tESUdJVCwgU19ET01BSU5dLCBbTEVUVEVSLCBTX0RPTUFJTl0sIFtFTU9KSSwgU19ET01BSU5dXTsgLy8gQ3JlYXRlIGEgc3RhdGUgd2hpY2ggZW1pdHMgYSBkb21haW4gdG9rZW5cblxuICB2YXIgbWFrZURvbWFpblN0YXRlID0gZnVuY3Rpb24gbWFrZURvbWFpblN0YXRlKCkge1xuICAgIHZhciBzdGF0ZSA9IG1ha2VBY2NlcHRpbmdTdGF0ZShET01BSU4pO1xuICAgIHN0YXRlLmogPSB7XG4gICAgICAnLSc6IFNfRE9NQUlOX0hZUEhFTlxuICAgIH07XG4gICAgc3RhdGUuanIgPSBbXS5jb25jYXQoRE9NQUlOX1JFR0VYX1RSQU5TSVRJT05TKTtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH07IC8vIENyZWF0ZSBhIHN0YXRlIHdoaWNoIGRvZXMgbm90IGVtaXQgYSBkb21haW4gc3RhdGUgYnV0IHRoZSB1c3VhbCBhbHBoYW51bWVyaWNcbiAgLy8gdHJhbnNpdGlvbnMgYXJlIGRvbWFpbnNcblxuXG4gIHZhciBtYWtlTmVhckRvbWFpblN0YXRlID0gZnVuY3Rpb24gbWFrZU5lYXJEb21haW5TdGF0ZSh0b2tlbikge1xuICAgIHZhciBzdGF0ZSA9IG1ha2VEb21haW5TdGF0ZSgpO1xuICAgIHN0YXRlLnQgPSB0b2tlbjtcbiAgICByZXR1cm4gc3RhdGU7XG4gIH07IC8vIFN0YXRlcyBmb3Igc3BlY2lhbCBVUkwgc3ltYm9scyB0aGF0IGFjY2VwdCBpbW1lZGlhdGVseSBhZnRlciBzdGFydFxuXG5cbiAgbWFrZUJhdGNoVChTX1NUQVJULCBbWydAJywgbWFrZUFjY2VwdGluZ1N0YXRlKEFUKV0sIFsnLicsIG1ha2VBY2NlcHRpbmdTdGF0ZShET1QpXSwgWycrJywgbWFrZUFjY2VwdGluZ1N0YXRlKFBMVVMpXSwgWycjJywgbWFrZUFjY2VwdGluZ1N0YXRlKFBPVU5EKV0sIFsnPycsIG1ha2VBY2NlcHRpbmdTdGF0ZShRVUVSWSldLCBbJy8nLCBtYWtlQWNjZXB0aW5nU3RhdGUoU0xBU0gpXSwgWydfJywgbWFrZUFjY2VwdGluZ1N0YXRlKFVOREVSU0NPUkUpXSwgWyc6JywgbWFrZUFjY2VwdGluZ1N0YXRlKENPTE9OKV0sIFsneycsIG1ha2VBY2NlcHRpbmdTdGF0ZShPUEVOQlJBQ0UpXSwgWydbJywgbWFrZUFjY2VwdGluZ1N0YXRlKE9QRU5CUkFDS0VUKV0sIFsnPCcsIG1ha2VBY2NlcHRpbmdTdGF0ZShPUEVOQU5HTEVCUkFDS0VUKV0sIFsnKCcsIG1ha2VBY2NlcHRpbmdTdGF0ZShPUEVOUEFSRU4pXSwgWyd9JywgbWFrZUFjY2VwdGluZ1N0YXRlKENMT1NFQlJBQ0UpXSwgWyddJywgbWFrZUFjY2VwdGluZ1N0YXRlKENMT1NFQlJBQ0tFVCldLCBbJz4nLCBtYWtlQWNjZXB0aW5nU3RhdGUoQ0xPU0VBTkdMRUJSQUNLRVQpXSwgWycpJywgbWFrZUFjY2VwdGluZ1N0YXRlKENMT1NFUEFSRU4pXSwgWycmJywgbWFrZUFjY2VwdGluZ1N0YXRlKEFNUEVSU0FORCldXSk7XG4gIG1ha2VNdWx0aVQoU19TVEFSVCwgWycsJywgJzsnLCAnIScsICdcIicsICdcXCcnXSwgbWFrZUFjY2VwdGluZ1N0YXRlKFBVTkNUVUFUSU9OKSk7IC8vIFdoaXRlc3BhY2UganVtcHNcbiAgLy8gVG9rZW5zIG9mIG9ubHkgbm9uLW5ld2xpbmUgd2hpdGVzcGFjZSBhcmUgYXJiaXRyYXJpbHkgbG9uZ1xuXG4gIG1ha2VUKFNfU1RBUlQsICdcXG4nLCBtYWtlQWNjZXB0aW5nU3RhdGUoTkwpKTtcbiAgbWFrZVJlZ2V4VChTX1NUQVJULCBTUEFDRSwgU19XUyk7IC8vIElmIGFueSB3aGl0ZXNwYWNlIGV4Y2VwdCBuZXdsaW5lLCBtb3JlIHdoaXRlc3BhY2UhXG5cbiAgbWFrZVQoU19XUywgJ1xcbicsIG1ha2VTdGF0ZSgpKTsgLy8gbm9uLWFjY2VwdGluZyBzdGF0ZVxuXG4gIG1ha2VSZWdleFQoU19XUywgU1BBQ0UsIFNfV1MpOyAvLyBHZW5lcmF0ZXMgc3RhdGVzIGZvciB0b3AtbGV2ZWwgZG9tYWluc1xuICAvLyBOb3RlIHRoYXQgdGhpcyBpcyBtb3N0IGFjY3VyYXRlIHdoZW4gdGxkcyBhcmUgaW4gYWxwaGFiZXRpY2FsIG9yZGVyXG5cbiAgZm9yICh2YXIgaSA9IDA7IGkgPCB0bGRzLmxlbmd0aDsgaSsrKSB7XG4gICAgbWFrZUNoYWluVChTX1NUQVJULCB0bGRzW2ldLCBtYWtlTmVhckRvbWFpblN0YXRlKFRMRCksIG1ha2VEb21haW5TdGF0ZSk7XG4gIH0gLy8gQ29sbGVjdCB0aGUgc3RhdGVzIGdlbmVyYXRlZCBieSBkaWZmZXJlbnQgcHJvdG9jbHNcblxuXG4gIHZhciBTX1BST1RPQ09MX0ZJTEUgPSBtYWtlRG9tYWluU3RhdGUoKTtcbiAgdmFyIFNfUFJPVE9DT0xfRlRQID0gbWFrZURvbWFpblN0YXRlKCk7XG4gIHZhciBTX1BST1RPQ09MX0hUVFAgPSBtYWtlRG9tYWluU3RhdGUoKTtcbiAgdmFyIFNfTUFJTFRPID0gbWFrZURvbWFpblN0YXRlKCk7XG4gIG1ha2VDaGFpblQoU19TVEFSVCwgJ2ZpbGUnLCBTX1BST1RPQ09MX0ZJTEUsIG1ha2VEb21haW5TdGF0ZSk7XG4gIG1ha2VDaGFpblQoU19TVEFSVCwgJ2Z0cCcsIFNfUFJPVE9DT0xfRlRQLCBtYWtlRG9tYWluU3RhdGUpO1xuICBtYWtlQ2hhaW5UKFNfU1RBUlQsICdodHRwJywgU19QUk9UT0NPTF9IVFRQLCBtYWtlRG9tYWluU3RhdGUpO1xuICBtYWtlQ2hhaW5UKFNfU1RBUlQsICdtYWlsdG8nLCBTX01BSUxUTywgbWFrZURvbWFpblN0YXRlKTsgLy8gUHJvdG9jb2wgc3RhdGVzXG5cbiAgdmFyIFNfUFJPVE9DT0xfU0VDVVJFID0gbWFrZURvbWFpblN0YXRlKCk7XG4gIHZhciBTX0ZVTExfUFJPVE9DT0wgPSBtYWtlQWNjZXB0aW5nU3RhdGUoUFJPVE9DT0wpOyAvLyBGdWxsIHByb3RvY29sIGVuZHMgd2l0aCBDT0xPTlxuXG4gIHZhciBTX0ZVTExfTUFJTFRPID0gbWFrZUFjY2VwdGluZ1N0YXRlKE1BSUxUTyk7IC8vIE1haWx0byBlbmRzIHdpdGggQ09MT05cbiAgLy8gU2VjdXJlIHByb3RvY29scyAoZW5kIHdpdGggJ3MnKVxuXG4gIG1ha2VUKFNfUFJPVE9DT0xfRlRQLCAncycsIFNfUFJPVE9DT0xfU0VDVVJFKTtcbiAgbWFrZVQoU19QUk9UT0NPTF9GVFAsICc6JywgU19GVUxMX1BST1RPQ09MKTtcbiAgbWFrZVQoU19QUk9UT0NPTF9IVFRQLCAncycsIFNfUFJPVE9DT0xfU0VDVVJFKTtcbiAgbWFrZVQoU19QUk9UT0NPTF9IVFRQLCAnOicsIFNfRlVMTF9QUk9UT0NPTCk7IC8vIEJlY29tZSBwcm90b2NvbCB0b2tlbnMgYWZ0ZXIgYSBDT0xPTlxuXG4gIG1ha2VUKFNfUFJPVE9DT0xfRklMRSwgJzonLCBTX0ZVTExfUFJPVE9DT0wpO1xuICBtYWtlVChTX1BST1RPQ09MX1NFQ1VSRSwgJzonLCBTX0ZVTExfUFJPVE9DT0wpO1xuICBtYWtlVChTX01BSUxUTywgJzonLCBTX0ZVTExfTUFJTFRPKTsgLy8gUmVnaXN0ZXIgY3VzdG9tIHByb3RvY29sc1xuXG4gIHZhciBTX0NVU1RPTV9QUk9UT0NPTCA9IG1ha2VEb21haW5TdGF0ZSgpO1xuXG4gIGZvciAodmFyIF9pID0gMDsgX2kgPCBjdXN0b21Qcm90b2NvbHMubGVuZ3RoOyBfaSsrKSB7XG4gICAgbWFrZUNoYWluVChTX1NUQVJULCBjdXN0b21Qcm90b2NvbHNbX2ldLCBTX0NVU1RPTV9QUk9UT0NPTCwgbWFrZURvbWFpblN0YXRlKTtcbiAgfVxuXG4gIG1ha2VUKFNfQ1VTVE9NX1BST1RPQ09MLCAnOicsIFNfRlVMTF9QUk9UT0NPTCk7IC8vIExvY2FsaG9zdFxuXG4gIG1ha2VDaGFpblQoU19TVEFSVCwgJ2xvY2FsaG9zdCcsIG1ha2VOZWFyRG9tYWluU3RhdGUoTE9DQUxIT1NUKSwgbWFrZURvbWFpblN0YXRlKTsgLy8gRXZlcnl0aGluZyBlbHNlXG4gIC8vIERPTUFJTnMgbWFrZSBtb3JlIERPTUFJTnNcbiAgLy8gTnVtYmVyIGFuZCBjaGFyYWN0ZXIgdHJhbnNpdGlvbnNcblxuICBtYWtlUmVnZXhUKFNfU1RBUlQsIERJR0lULCBTX05VTSk7XG4gIG1ha2VSZWdleFQoU19TVEFSVCwgTEVUVEVSLCBTX0RPTUFJTik7XG4gIG1ha2VSZWdleFQoU19TVEFSVCwgRU1PSkksIFNfRE9NQUlOKTtcbiAgbWFrZVJlZ2V4VChTX05VTSwgRElHSVQsIFNfTlVNKTtcbiAgbWFrZVJlZ2V4VChTX05VTSwgTEVUVEVSLCBTX0RPTUFJTik7IC8vIG51bWJlciBiZWNvbWVzIERPTUFJTlxuXG4gIG1ha2VSZWdleFQoU19OVU0sIEVNT0pJLCBTX0RPTUFJTik7IC8vIG51bWJlciBiZWNvbWVzIERPTUFJTlxuXG4gIG1ha2VUKFNfTlVNLCAnLScsIFNfRE9NQUlOX0hZUEhFTik7IC8vIERlZmF1bHQgZG9tYWluIHRyYW5zaXRpb25zXG5cbiAgbWFrZVQoU19ET01BSU4sICctJywgU19ET01BSU5fSFlQSEVOKTtcbiAgbWFrZVQoU19ET01BSU5fSFlQSEVOLCAnLScsIFNfRE9NQUlOX0hZUEhFTik7XG4gIG1ha2VSZWdleFQoU19ET01BSU4sIERJR0lULCBTX0RPTUFJTik7XG4gIG1ha2VSZWdleFQoU19ET01BSU4sIExFVFRFUiwgU19ET01BSU4pO1xuICBtYWtlUmVnZXhUKFNfRE9NQUlOLCBFTU9KSSwgU19ET01BSU4pO1xuICBtYWtlUmVnZXhUKFNfRE9NQUlOX0hZUEhFTiwgRElHSVQsIFNfRE9NQUlOKTtcbiAgbWFrZVJlZ2V4VChTX0RPTUFJTl9IWVBIRU4sIExFVFRFUiwgU19ET01BSU4pO1xuICBtYWtlUmVnZXhUKFNfRE9NQUlOX0hZUEhFTiwgRU1PSkksIFNfRE9NQUlOKTsgLy8gU2V0IGRlZmF1bHQgdHJhbnNpdGlvbiBmb3Igc3RhcnQgc3RhdGUgKHNvbWUgc3ltYm9sKVxuXG4gIFNfU1RBUlQuamQgPSBtYWtlQWNjZXB0aW5nU3RhdGUoU1lNKTtcbiAgcmV0dXJuIFNfU1RBUlQ7XG59XG4vKipcblx0R2l2ZW4gYSBzdHJpbmcsIHJldHVybnMgYW4gYXJyYXkgb2YgVE9LRU4gaW5zdGFuY2VzIHJlcHJlc2VudGluZyB0aGVcblx0Y29tcG9zaXRpb24gb2YgdGhhdCBzdHJpbmcuXG5cblx0QG1ldGhvZCBydW5cblx0QHBhcmFtIHtTdGF0ZX0gc3RhcnQgc2Nhbm5lciBzdGFydGluZyBzdGF0ZVxuXHRAcGFyYW0ge3N0cmluZ30gc3RyIGlucHV0IHN0cmluZyB0byBzY2FuXG5cdEByZXR1cm4ge0FycmF5PHt0OiBzdHJpbmcsIHY6IHN0cmluZywgczogbnVtYmVyLCBsOiBudW1iZXJ9Pn0gbGlzdCBvZiB0b2tlbnMsIGVhY2ggd2l0aCBhIHR5cGUgYW5kIHZhbHVlXG4qL1xuXG5mdW5jdGlvbiBydW4kMShzdGFydCwgc3RyKSB7XG4gIC8vIFN0YXRlIG1hY2hpbmUgaXMgbm90IGNhc2Ugc2Vuc2l0aXZlLCBzbyBpbnB1dCBpcyB0b2tlbml6ZWQgaW4gbG93ZXJjYXNlZFxuICAvLyBmb3JtIChzdGlsbCByZXR1cm5zIHRoZSByZWd1bGFyIGNhc2UgdGhvdWdoKSBVc2VzIHNlbGVjdGl2ZSBgdG9Mb3dlckNhc2VgXG4gIC8vIGlzIHVzZWQgYmVjYXVzZSBsb3dlcmNhc2luZyB0aGUgZW50aXJlIHN0cmluZyBjYXVzZXMgdGhlIGxlbmd0aCBhbmRcbiAgLy8gY2hhcmFjdGVyIHBvc2l0aW9uIHRvIHZhcnkgaW4gc29tZSBub24tRW5nbGlzaCBzdHJpbmdzIHdpdGggVjgtYmFzZWRcbiAgLy8gcnVudGltZXMuXG4gIHZhciBpdGVyYWJsZSA9IEFycmF5LmZyb20oc3RyLnJlcGxhY2UoL1tBLVpdL2csIGZ1bmN0aW9uIChjKSB7XG4gICAgcmV0dXJuIGMudG9Mb3dlckNhc2UoKTtcbiAgfSkpO1xuICB2YXIgY2hhckNvdW50ID0gaXRlcmFibGUubGVuZ3RoOyAvLyA8PSBsZW4gaWYgdGhlcmUgYXJlIGVtb2ppcywgZXRjXG5cbiAgdmFyIHRva2VucyA9IFtdOyAvLyByZXR1cm4gdmFsdWVcbiAgLy8gY3Vyc29yIHRocm91Z2ggdGhlIHN0cmluZyBpdHNlbGYsIGFjY291bnRpbmcgZm9yIGNoYXJhY3RlcnMgdGhhdCBoYXZlXG4gIC8vIHdpZHRoIHdpdGggbGVuZ3RoIDIgc3VjaCBhcyBlbW9qaXNcblxuICB2YXIgY3Vyc29yID0gMDsgLy8gQ3Vyc29yIHRocm91Z2ggdGhlIGFycmF5LXJlcHJlc2VudGF0aW9uIG9mIHRoZSBzdHJpbmdcblxuICB2YXIgY2hhckN1cnNvciA9IDA7IC8vIFRva2VuaXplIHRoZSBzdHJpbmdcblxuICB3aGlsZSAoY2hhckN1cnNvciA8IGNoYXJDb3VudCkge1xuICAgIHZhciBzdGF0ZSA9IHN0YXJ0O1xuICAgIHZhciBuZXh0U3RhdGUgPSBudWxsO1xuICAgIHZhciB0b2tlbkxlbmd0aCA9IDA7XG4gICAgdmFyIGxhdGVzdEFjY2VwdGluZyA9IG51bGw7XG4gICAgdmFyIHNpbmNlQWNjZXB0cyA9IC0xO1xuICAgIHZhciBjaGFyc1NpbmNlQWNjZXB0cyA9IC0xO1xuXG4gICAgd2hpbGUgKGNoYXJDdXJzb3IgPCBjaGFyQ291bnQgJiYgKG5leHRTdGF0ZSA9IHRha2VUKHN0YXRlLCBpdGVyYWJsZVtjaGFyQ3Vyc29yXSkpKSB7XG4gICAgICBzdGF0ZSA9IG5leHRTdGF0ZTsgLy8gS2VlcCB0cmFjayBvZiB0aGUgbGF0ZXN0IGFjY2VwdGluZyBzdGF0ZVxuXG4gICAgICBpZiAoc3RhdGUuYWNjZXB0cygpKSB7XG4gICAgICAgIHNpbmNlQWNjZXB0cyA9IDA7XG4gICAgICAgIGNoYXJzU2luY2VBY2NlcHRzID0gMDtcbiAgICAgICAgbGF0ZXN0QWNjZXB0aW5nID0gc3RhdGU7XG4gICAgICB9IGVsc2UgaWYgKHNpbmNlQWNjZXB0cyA+PSAwKSB7XG4gICAgICAgIHNpbmNlQWNjZXB0cyArPSBpdGVyYWJsZVtjaGFyQ3Vyc29yXS5sZW5ndGg7XG4gICAgICAgIGNoYXJzU2luY2VBY2NlcHRzKys7XG4gICAgICB9XG5cbiAgICAgIHRva2VuTGVuZ3RoICs9IGl0ZXJhYmxlW2NoYXJDdXJzb3JdLmxlbmd0aDtcbiAgICAgIGN1cnNvciArPSBpdGVyYWJsZVtjaGFyQ3Vyc29yXS5sZW5ndGg7XG4gICAgICBjaGFyQ3Vyc29yKys7XG4gICAgfVxuXG4gICAgaWYgKHNpbmNlQWNjZXB0cyA8IDApIHtcbiAgICAgIGNvbnRpbnVlO1xuICAgIH0gLy8gU2hvdWxkIG5ldmVyIGhhcHBlblxuICAgIC8vIFJvbGwgYmFjayB0byB0aGUgbGF0ZXN0IGFjY2VwdGluZyBzdGF0ZVxuXG5cbiAgICBjdXJzb3IgLT0gc2luY2VBY2NlcHRzO1xuICAgIGNoYXJDdXJzb3IgLT0gY2hhcnNTaW5jZUFjY2VwdHM7XG4gICAgdG9rZW5MZW5ndGggLT0gc2luY2VBY2NlcHRzOyAvLyBObyBtb3JlIGp1bXBzLCBqdXN0IG1ha2UgYSBuZXcgdG9rZW4gZnJvbSB0aGUgbGFzdCBhY2NlcHRpbmcgb25lXG4gICAgLy8gVE9ETzogSWYgcG9zc2libGUsIGRvbid0IG91dHB1dCB2LCBpbnN0ZWFkIG91dHB1dCByYW5nZSB3aGVyZSB2YWx1ZXMgb2N1clxuXG4gICAgdG9rZW5zLnB1c2goe1xuICAgICAgdDogbGF0ZXN0QWNjZXB0aW5nLnQsXG4gICAgICAvLyB0b2tlbiB0eXBlL25hbWVcbiAgICAgIHY6IHN0ci5zdWJzdHIoY3Vyc29yIC0gdG9rZW5MZW5ndGgsIHRva2VuTGVuZ3RoKSxcbiAgICAgIC8vIHN0cmluZyB2YWx1ZVxuICAgICAgczogY3Vyc29yIC0gdG9rZW5MZW5ndGgsXG4gICAgICAvLyBzdGFydCBpbmRleFxuICAgICAgZTogY3Vyc29yIC8vIGVuZCBpbmRleCAoZXhjbHVkaW5nKVxuXG4gICAgfSk7XG4gIH1cblxuICByZXR1cm4gdG9rZW5zO1xufVxuXG5mdW5jdGlvbiBfdHlwZW9mKG9iaikge1xuICBcIkBiYWJlbC9oZWxwZXJzIC0gdHlwZW9mXCI7XG5cbiAgaWYgKHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2YgU3ltYm9sLml0ZXJhdG9yID09PSBcInN5bWJvbFwiKSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH0gZWxzZSB7XG4gICAgX3R5cGVvZiA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIHJldHVybiBvYmogJiYgdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIG9iai5jb25zdHJ1Y3RvciA9PT0gU3ltYm9sICYmIG9iaiAhPT0gU3ltYm9sLnByb3RvdHlwZSA/IFwic3ltYm9sXCIgOiB0eXBlb2Ygb2JqO1xuICAgIH07XG4gIH1cblxuICByZXR1cm4gX3R5cGVvZihvYmopO1xufVxuXG52YXIgZGVmYXVsdHMgPSB7XG4gIGRlZmF1bHRQcm90b2NvbDogJ2h0dHAnLFxuICBldmVudHM6IG51bGwsXG4gIGZvcm1hdDogbm9vcCxcbiAgZm9ybWF0SHJlZjogbm9vcCxcbiAgbmwyYnI6IGZhbHNlLFxuICB0YWdOYW1lOiAnYScsXG4gIHRhcmdldDogbnVsbCxcbiAgcmVsOiBudWxsLFxuICB2YWxpZGF0ZTogdHJ1ZSxcbiAgdHJ1bmNhdGU6IDAsXG4gIGNsYXNzTmFtZTogbnVsbCxcbiAgYXR0cmlidXRlczogbnVsbCxcbiAgaWdub3JlVGFnczogW11cbn07XG5mdW5jdGlvbiBPcHRpb25zKG9wdHMpIHtcbiAgb3B0cyA9IG9wdHMgfHwge307XG4gIHRoaXMuZGVmYXVsdFByb3RvY29sID0gJ2RlZmF1bHRQcm90b2NvbCcgaW4gb3B0cyA/IG9wdHMuZGVmYXVsdFByb3RvY29sIDogZGVmYXVsdHMuZGVmYXVsdFByb3RvY29sO1xuICB0aGlzLmV2ZW50cyA9ICdldmVudHMnIGluIG9wdHMgPyBvcHRzLmV2ZW50cyA6IGRlZmF1bHRzLmV2ZW50cztcbiAgdGhpcy5mb3JtYXQgPSAnZm9ybWF0JyBpbiBvcHRzID8gb3B0cy5mb3JtYXQgOiBkZWZhdWx0cy5mb3JtYXQ7XG4gIHRoaXMuZm9ybWF0SHJlZiA9ICdmb3JtYXRIcmVmJyBpbiBvcHRzID8gb3B0cy5mb3JtYXRIcmVmIDogZGVmYXVsdHMuZm9ybWF0SHJlZjtcbiAgdGhpcy5ubDJiciA9ICdubDJicicgaW4gb3B0cyA/IG9wdHMubmwyYnIgOiBkZWZhdWx0cy5ubDJicjtcbiAgdGhpcy50YWdOYW1lID0gJ3RhZ05hbWUnIGluIG9wdHMgPyBvcHRzLnRhZ05hbWUgOiBkZWZhdWx0cy50YWdOYW1lO1xuICB0aGlzLnRhcmdldCA9ICd0YXJnZXQnIGluIG9wdHMgPyBvcHRzLnRhcmdldCA6IGRlZmF1bHRzLnRhcmdldDtcbiAgdGhpcy5yZWwgPSAncmVsJyBpbiBvcHRzID8gb3B0cy5yZWwgOiBkZWZhdWx0cy5yZWw7XG4gIHRoaXMudmFsaWRhdGUgPSAndmFsaWRhdGUnIGluIG9wdHMgPyBvcHRzLnZhbGlkYXRlIDogZGVmYXVsdHMudmFsaWRhdGU7XG4gIHRoaXMudHJ1bmNhdGUgPSAndHJ1bmNhdGUnIGluIG9wdHMgPyBvcHRzLnRydW5jYXRlIDogZGVmYXVsdHMudHJ1bmNhdGU7XG4gIHRoaXMuY2xhc3NOYW1lID0gJ2NsYXNzTmFtZScgaW4gb3B0cyA/IG9wdHMuY2xhc3NOYW1lIDogZGVmYXVsdHMuY2xhc3NOYW1lO1xuICB0aGlzLmF0dHJpYnV0ZXMgPSBvcHRzLmF0dHJpYnV0ZXMgfHwgZGVmYXVsdHMuYXR0cmlidXRlcztcbiAgdGhpcy5pZ25vcmVUYWdzID0gW107IC8vIE1ha2UgYWxsIHRhZ3MgbmFtZXMgdXBwZXIgY2FzZVxuXG4gIHZhciBpZ25vcmVkVGFncyA9ICdpZ25vcmVUYWdzJyBpbiBvcHRzID8gb3B0cy5pZ25vcmVUYWdzIDogZGVmYXVsdHMuaWdub3JlVGFncztcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IGlnbm9yZWRUYWdzLmxlbmd0aDsgaSsrKSB7XG4gICAgdGhpcy5pZ25vcmVUYWdzLnB1c2goaWdub3JlZFRhZ3NbaV0udG9VcHBlckNhc2UoKSk7XG4gIH1cbn1cbk9wdGlvbnMucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogR2l2ZW4gdGhlIHRva2VuLCByZXR1cm4gYWxsIG9wdGlvbnMgZm9yIGhvdyBpdCBzaG91bGQgYmUgZGlzcGxheWVkXG4gICAqL1xuICByZXNvbHZlOiBmdW5jdGlvbiByZXNvbHZlKHRva2VuKSB7XG4gICAgdmFyIGhyZWYgPSB0b2tlbi50b0hyZWYodGhpcy5kZWZhdWx0UHJvdG9jb2wpO1xuICAgIHJldHVybiB7XG4gICAgICBmb3JtYXR0ZWQ6IHRoaXMuZ2V0KCdmb3JtYXQnLCB0b2tlbi50b1N0cmluZygpLCB0b2tlbiksXG4gICAgICBmb3JtYXR0ZWRIcmVmOiB0aGlzLmdldCgnZm9ybWF0SHJlZicsIGhyZWYsIHRva2VuKSxcbiAgICAgIHRhZ05hbWU6IHRoaXMuZ2V0KCd0YWdOYW1lJywgaHJlZiwgdG9rZW4pLFxuICAgICAgY2xhc3NOYW1lOiB0aGlzLmdldCgnY2xhc3NOYW1lJywgaHJlZiwgdG9rZW4pLFxuICAgICAgdGFyZ2V0OiB0aGlzLmdldCgndGFyZ2V0JywgaHJlZiwgdG9rZW4pLFxuICAgICAgcmVsOiB0aGlzLmdldCgncmVsJywgaHJlZiwgdG9rZW4pLFxuICAgICAgZXZlbnRzOiB0aGlzLmdldE9iamVjdCgnZXZlbnRzJywgaHJlZiwgdG9rZW4pLFxuICAgICAgYXR0cmlidXRlczogdGhpcy5nZXRPYmplY3QoJ2F0dHJpYnV0ZXMnLCBocmVmLCB0b2tlbiksXG4gICAgICB0cnVuY2F0ZTogdGhpcy5nZXQoJ3RydW5jYXRlJywgaHJlZiwgdG9rZW4pXG4gICAgfTtcbiAgfSxcblxuICAvKipcbiAgICogUmV0dXJucyB0cnVlIG9yIGZhbHNlIGJhc2VkIG9uIHdoZXRoZXIgYSB0b2tlbiBzaG91bGQgYmUgZGlzcGxheWVkIGFzIGFcbiAgICogbGluayBiYXNlZCBvbiB0aGUgdXNlciBvcHRpb25zLiBCeSBkZWZhdWx0LFxuICAgKi9cbiAgY2hlY2s6IGZ1bmN0aW9uIGNoZWNrKHRva2VuKSB7XG4gICAgcmV0dXJuIHRoaXMuZ2V0KCd2YWxpZGF0ZScsIHRva2VuLnRvU3RyaW5nKCksIHRva2VuKTtcbiAgfSxcbiAgLy8gUHJpdmF0ZSBtZXRob2RzXG5cbiAgLyoqXG4gICAqIFJlc29sdmUgYW4gb3B0aW9uJ3MgdmFsdWUgYmFzZWQgb24gdGhlIHZhbHVlIG9mIHRoZSBvcHRpb24gYW5kIHRoZSBnaXZlblxuICAgKiBwYXJhbXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSBrZXkgTmFtZSBvZiBvcHRpb24gdG8gdXNlXG4gICAqIEBwYXJhbSBvcGVyYXRvciB3aWxsIGJlIHBhc3NlZCB0byB0aGUgdGFyZ2V0IG9wdGlvbiBpZiBpdCdzIG1ldGhvZFxuICAgKiBAcGFyYW0ge011bHRpVG9rZW59IHRva2VuIFRoZSB0b2tlbiBmcm9tIGxpbmtpZnkudG9rZW5pemVcbiAgICovXG4gIGdldDogZnVuY3Rpb24gZ2V0KGtleSwgb3BlcmF0b3IsIHRva2VuKSB7XG4gICAgdmFyIG9wdGlvbiA9IHRoaXNba2V5XTtcblxuICAgIGlmICghb3B0aW9uKSB7XG4gICAgICByZXR1cm4gb3B0aW9uO1xuICAgIH1cblxuICAgIHZhciBvcHRpb25WYWx1ZTtcblxuICAgIHN3aXRjaCAoX3R5cGVvZihvcHRpb24pKSB7XG4gICAgICBjYXNlICdmdW5jdGlvbic6XG4gICAgICAgIHJldHVybiBvcHRpb24ob3BlcmF0b3IsIHRva2VuLnQpO1xuXG4gICAgICBjYXNlICdvYmplY3QnOlxuICAgICAgICBvcHRpb25WYWx1ZSA9IHRva2VuLnQgaW4gb3B0aW9uID8gb3B0aW9uW3Rva2VuLnRdIDogZGVmYXVsdHNba2V5XTtcbiAgICAgICAgcmV0dXJuIHR5cGVvZiBvcHRpb25WYWx1ZSA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvblZhbHVlKG9wZXJhdG9yLCB0b2tlbi50KSA6IG9wdGlvblZhbHVlO1xuICAgIH1cblxuICAgIHJldHVybiBvcHRpb247XG4gIH0sXG4gIGdldE9iamVjdDogZnVuY3Rpb24gZ2V0T2JqZWN0KGtleSwgb3BlcmF0b3IsIHRva2VuKSB7XG4gICAgdmFyIG9wdGlvbiA9IHRoaXNba2V5XTtcbiAgICByZXR1cm4gdHlwZW9mIG9wdGlvbiA9PT0gJ2Z1bmN0aW9uJyA/IG9wdGlvbihvcGVyYXRvciwgdG9rZW4udCkgOiBvcHRpb247XG4gIH1cbn07XG5cbmZ1bmN0aW9uIG5vb3AodmFsKSB7XG4gIHJldHVybiB2YWw7XG59XG5cbnZhciBvcHRpb25zID0gLyojX19QVVJFX18qL09iamVjdC5mcmVlemUoe1xuXHRfX3Byb3RvX186IG51bGwsXG5cdGRlZmF1bHRzOiBkZWZhdWx0cyxcblx0T3B0aW9uczogT3B0aW9uc1xufSk7XG5cbi8qKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKipcblx0TXVsdGktVG9rZW5zXG5cdFRva2VucyBjb21wb3NlZCBvZiBhcnJheXMgb2YgVGV4dFRva2Vuc1xuKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqL1xuXG5mdW5jdGlvbiBpbmhlcml0cyhwYXJlbnQsIGNoaWxkKSB7XG4gIHZhciBwcm9wcyA9IGFyZ3VtZW50cy5sZW5ndGggPiAyICYmIGFyZ3VtZW50c1syXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzJdIDoge307XG4gIHZhciBleHRlbmRlZCA9IE9iamVjdC5jcmVhdGUocGFyZW50LnByb3RvdHlwZSk7XG5cbiAgZm9yICh2YXIgcCBpbiBwcm9wcykge1xuICAgIGV4dGVuZGVkW3BdID0gcHJvcHNbcF07XG4gIH1cblxuICBleHRlbmRlZC5jb25zdHJ1Y3RvciA9IGNoaWxkO1xuICBjaGlsZC5wcm90b3R5cGUgPSBleHRlbmRlZDtcbiAgcmV0dXJuIGNoaWxkO1xufVxuLyoqXG5cdEFic3RyYWN0IGNsYXNzIHVzZWQgZm9yIG1hbnVmYWN0dXJpbmcgdG9rZW5zIG9mIHRleHQgdG9rZW5zLiBUaGF0IGlzIHJhdGhlclxuXHR0aGFuIHRoZSB2YWx1ZSBmb3IgYSB0b2tlbiBiZWluZyBhIHNtYWxsIHN0cmluZyBvZiB0ZXh0LCBpdCdzIHZhbHVlIGFuIGFycmF5XG5cdG9mIHRleHQgdG9rZW5zLlxuXG5cdFVzZWQgZm9yIGdyb3VwaW5nIHRvZ2V0aGVyIFVSTHMsIGVtYWlscywgaGFzaHRhZ3MsIGFuZCBvdGhlciBwb3RlbnRpYWxcblx0Y3JlYXRpb25zLlxuXG5cdEBjbGFzcyBNdWx0aVRva2VuXG5cdEBwYXJhbSB7c3RyaW5nfSB0eXBlXG5cdEBwYXJhbSB7c3RyaW5nfSB2YWx1ZVxuXHRAcGFyYW0ge0FycmF5PHt0OiBzdHJpbmcsIHY6IHN0cmluZywgczogbnVtYmVyLCBlOiBudW1iZXJ9Pn0gdG9rZW5zXG5cdEBhYnN0cmFjdFxuKi9cblxuXG5mdW5jdGlvbiBNdWx0aVRva2VuKHR5cGUsIHZhbHVlLCB0b2tlbnMpIHtcbiAgdGhpcy50ID0gdHlwZTtcbiAgdGhpcy52ID0gdmFsdWU7XG4gIHRoaXMudGsgPSB0b2tlbnM7XG4gIHRoaXMuaXNMaW5rID0gZmFsc2U7XG59XG5NdWx0aVRva2VuLnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gIFx0U3RyaW5nIHJlcHJlc2VudGluZyB0aGUgdHlwZSBmb3IgdGhpcyB0b2tlblxuICBcdEBwcm9wZXJ0eSB0XG4gIFx0QGRlZmF1bHQgJ3Rva2VuJ1xuICAqL1xuICB0OiAndG9rZW4nLFxuXG4gIC8qKlxuICBcdElzIHRoaXMgbXVsdGl0b2tlbiBhIGxpbms/XG4gIFx0QHByb3BlcnR5IGlzTGlua1xuICBcdEBkZWZhdWx0IGZhbHNlXG4gICovXG4gIGlzTGluazogZmFsc2UsXG5cbiAgLyoqXG4gIFx0UmV0dXJuIHRoZSBzdHJpbmcgdGhpcyB0b2tlbiByZXByZXNlbnRzLlxuICBcdEBtZXRob2QgdG9TdHJpbmdcbiAgXHRAcmV0dXJuIHtzdHJpbmd9XG4gICovXG4gIHRvU3RyaW5nOiBmdW5jdGlvbiB0b1N0cmluZygpIHtcbiAgICByZXR1cm4gdGhpcy52O1xuICB9LFxuXG4gIC8qKlxuICBcdFdoYXQgc2hvdWxkIHRoZSB2YWx1ZSBmb3IgdGhpcyB0b2tlbiBiZSBpbiB0aGUgYGhyZWZgIEhUTUwgYXR0cmlidXRlP1xuICBcdFJldHVybnMgdGhlIGAudG9TdHJpbmdgIHZhbHVlIGJ5IGRlZmF1bHQuXG4gIFx0XHRAbWV0aG9kIHRvSHJlZlxuICBcdEByZXR1cm4ge3N0cmluZ31cbiAgKi9cbiAgdG9IcmVmOiBmdW5jdGlvbiB0b0hyZWYoKSB7XG4gICAgcmV0dXJuIHRoaXMudG9TdHJpbmcoKTtcbiAgfSxcblxuICAvKipcbiAgICogVGhlIHN0YXJ0IGluZGV4IG9mIHRoaXMgdG9rZW4gaW4gdGhlIG9yaWdpbmFsIGlucHV0IHN0cmluZ1xuICAgKiBAcmV0dXJucyB7bnVtYmVyfVxuICAgKi9cbiAgc3RhcnRJbmRleDogZnVuY3Rpb24gc3RhcnRJbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy50a1swXS5zO1xuICB9LFxuXG4gIC8qKlxuICAgKiBUaGUgZW5kIGluZGV4IG9mIHRoaXMgdG9rZW4gaW4gdGhlIG9yaWdpbmFsIGlucHV0IHN0cmluZyAodXAgdG8gdGhpc1xuICAgKiBpbmRleCBidXQgbm90IGluY2x1ZGluZyBpdClcbiAgICogQHJldHVybnMge251bWJlcn1cbiAgICovXG4gIGVuZEluZGV4OiBmdW5jdGlvbiBlbmRJbmRleCgpIHtcbiAgICByZXR1cm4gdGhpcy50a1t0aGlzLnRrLmxlbmd0aCAtIDFdLmU7XG4gIH0sXG5cbiAgLyoqXG4gIFx0UmV0dXJucyBhIGhhc2ggb2YgcmVsZXZhbnQgdmFsdWVzIGZvciB0aGlzIHRva2VuLCB3aGljaCBpbmNsdWRlcyBrZXlzXG4gIFx0KiB0eXBlIC0gS2luZCBvZiB0b2tlbiAoJ3VybCcsICdlbWFpbCcsIGV0Yy4pXG4gIFx0KiB2YWx1ZSAtIE9yaWdpbmFsIHRleHRcbiAgXHQqIGhyZWYgLSBUaGUgdmFsdWUgdGhhdCBzaG91bGQgYmUgYWRkZWQgdG8gdGhlIGFuY2hvciB0YWcncyBocmVmXG4gIFx0XHRhdHRyaWJ1dGVcbiAgXHRcdEBtZXRob2QgdG9PYmplY3RcbiAgXHRAcGFyYW0ge3N0cmluZ30gW3Byb3RvY29sXSBgJ2h0dHAnYCBieSBkZWZhdWx0XG4gIFx0QHJldHVybiB7e3R5cGU6IHN0cmluZywgdmFsdWU6IHN0cmluZywgaHJlZjogc3RyaW5nfX1cbiAgKi9cbiAgdG9PYmplY3Q6IGZ1bmN0aW9uIHRvT2JqZWN0KCkge1xuICAgIHZhciBwcm90b2NvbCA9IGFyZ3VtZW50cy5sZW5ndGggPiAwICYmIGFyZ3VtZW50c1swXSAhPT0gdW5kZWZpbmVkID8gYXJndW1lbnRzWzBdIDogZGVmYXVsdHMuZGVmYXVsdFByb3RvY29sO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0aGlzLnQsXG4gICAgICB2YWx1ZTogdGhpcy52LFxuICAgICAgaXNMaW5rOiB0aGlzLmlzTGluayxcbiAgICAgIGhyZWY6IHRoaXMudG9IcmVmKHByb3RvY29sKSxcbiAgICAgIHN0YXJ0OiB0aGlzLnN0YXJ0SW5kZXgoKSxcbiAgICAgIGVuZDogdGhpcy5lbmRJbmRleCgpXG4gICAgfTtcbiAgfVxufTsgLy8gQmFzZSB0b2tlblxuLyoqXG4gKiBDcmVhdGUgYSBuZXcgdG9rZW4gdGhhdCBjYW4gYmUgZW1pdHRlZCBieSB0aGUgcGFyc2VyIHN0YXRlIG1hY2hpbmVcbiAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlIHJlYWRhYmxlIHR5cGUgb2YgdGhlIHRva2VuXG4gKiBAcGFyYW0ge29iamVjdH0gcHJvcHMgcHJvcGVydGllcyB0byBhc3NpZ24gb3Igb3ZlcnJpZGUsIGluY2x1ZGluZyBpc0xpbmsgPSB0cnVlIG9yIGZhbHNlXG4gKiBAcmV0dXJucyB7KHZhbHVlOiBzdHJpbmcsIHRva2Vuczoge3Q6IHN0cmluZywgdjogc3RyaW5nLCBzOiBudW1iZXIsIGU6IG51bWJlcn0pID0+IE11bHRpVG9rZW59IG5ldyB0b2tlbiBjbGFzc1xuICovXG5cbmZ1bmN0aW9uIGNyZWF0ZVRva2VuQ2xhc3ModHlwZSwgcHJvcHMpIHtcbiAgZnVuY3Rpb24gVG9rZW4odmFsdWUsIHRva2Vucykge1xuICAgIHRoaXMudCA9IHR5cGU7XG4gICAgdGhpcy52ID0gdmFsdWU7XG4gICAgdGhpcy50ayA9IHRva2VucztcbiAgfVxuXG4gIGluaGVyaXRzKE11bHRpVG9rZW4sIFRva2VuLCBwcm9wcyk7XG4gIHJldHVybiBUb2tlbjtcbn1cbi8qKlxuXHRSZXByZXNlbnRzIGFuIGFyYml0cmFyaWx5IG1haWx0byBlbWFpbCBhZGRyZXNzIHdpdGggdGhlIHByZWZpeCBpbmNsdWRlZFxuXHRAY2xhc3MgTWFpbHRvRW1haWxcblx0QGV4dGVuZHMgTXVsdGlUb2tlblxuKi9cblxudmFyIE1haWx0b0VtYWlsID0gY3JlYXRlVG9rZW5DbGFzcygnZW1haWwnLCB7XG4gIGlzTGluazogdHJ1ZVxufSk7XG4vKipcblx0UmVwcmVzZW50cyBhIGxpc3Qgb2YgdG9rZW5zIG1ha2luZyB1cCBhIHZhbGlkIGVtYWlsIGFkZHJlc3Ncblx0QGNsYXNzIEVtYWlsXG5cdEBleHRlbmRzIE11bHRpVG9rZW5cbiovXG5cbnZhciBFbWFpbCA9IGNyZWF0ZVRva2VuQ2xhc3MoJ2VtYWlsJywge1xuICBpc0xpbms6IHRydWUsXG4gIHRvSHJlZjogZnVuY3Rpb24gdG9IcmVmKCkge1xuICAgIHJldHVybiAnbWFpbHRvOicgKyB0aGlzLnRvU3RyaW5nKCk7XG4gIH1cbn0pO1xuLyoqXG5cdFJlcHJlc2VudHMgc29tZSBwbGFpbiB0ZXh0XG5cdEBjbGFzcyBUZXh0XG5cdEBleHRlbmRzIE11bHRpVG9rZW5cbiovXG5cbnZhciBUZXh0ID0gY3JlYXRlVG9rZW5DbGFzcygndGV4dCcpO1xuLyoqXG5cdE11bHRpLWxpbmVicmVhayB0b2tlbiAtIHJlcHJlc2VudHMgYSBsaW5lIGJyZWFrXG5cdEBjbGFzcyBObFxuXHRAZXh0ZW5kcyBNdWx0aVRva2VuXG4qL1xuXG52YXIgTmwgPSBjcmVhdGVUb2tlbkNsYXNzKCdubCcpO1xuLyoqXG5cdFJlcHJlc2VudHMgYSBsaXN0IG9mIHRleHQgdG9rZW5zIG1ha2luZyB1cCBhIHZhbGlkIFVSTFxuXHRAY2xhc3MgVXJsXG5cdEBleHRlbmRzIE11bHRpVG9rZW5cbiovXG5cbnZhciBVcmwgPSBjcmVhdGVUb2tlbkNsYXNzKCd1cmwnLCB7XG4gIGlzTGluazogdHJ1ZSxcblxuICAvKipcbiAgXHRMb3dlcmNhc2VzIHJlbGV2YW50IHBhcnRzIG9mIHRoZSBkb21haW4gYW5kIGFkZHMgdGhlIHByb3RvY29sIGlmXG4gIFx0cmVxdWlyZWQuIE5vdGUgdGhhdCB0aGlzIHdpbGwgbm90IGVzY2FwZSB1bnNhZmUgSFRNTCBjaGFyYWN0ZXJzIGluIHRoZVxuICBcdFVSTC5cbiAgXHRcdEBtZXRob2QgaHJlZlxuICBcdEBwYXJhbSB7c3RyaW5nfSBwcm90b2NvbFxuICBcdEByZXR1cm4ge3N0cmluZ31cbiAgKi9cbiAgdG9IcmVmOiBmdW5jdGlvbiB0b0hyZWYoKSB7XG4gICAgdmFyIHByb3RvY29sID0gYXJndW1lbnRzLmxlbmd0aCA+IDAgJiYgYXJndW1lbnRzWzBdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMF0gOiBkZWZhdWx0cy5kZWZhdWx0UHJvdG9jb2w7XG4gICAgdmFyIHRva2VucyA9IHRoaXMudGs7XG4gICAgdmFyIGhhc1Byb3RvY29sID0gZmFsc2U7XG4gICAgdmFyIGhhc1NsYXNoU2xhc2ggPSBmYWxzZTtcbiAgICB2YXIgcmVzdWx0ID0gW107XG4gICAgdmFyIGkgPSAwOyAvLyBNYWtlIHRoZSBmaXJzdCBwYXJ0IG9mIHRoZSBkb21haW4gbG93ZXJjYXNlXG4gICAgLy8gTG93ZXJjYXNlIHByb3RvY29sXG5cbiAgICB3aGlsZSAodG9rZW5zW2ldLnQgPT09IFBST1RPQ09MKSB7XG4gICAgICBoYXNQcm90b2NvbCA9IHRydWU7XG4gICAgICByZXN1bHQucHVzaCh0b2tlbnNbaV0udik7XG4gICAgICBpKys7XG4gICAgfSAvLyBTa2lwIHNsYXNoLXNsYXNoXG5cblxuICAgIHdoaWxlICh0b2tlbnNbaV0udCA9PT0gU0xBU0gpIHtcbiAgICAgIGhhc1NsYXNoU2xhc2ggPSB0cnVlO1xuICAgICAgcmVzdWx0LnB1c2godG9rZW5zW2ldLnYpO1xuICAgICAgaSsrO1xuICAgIH0gLy8gQ29udGludWUgcHVzaGluZyBjaGFyYWN0ZXJzXG5cblxuICAgIGZvciAoOyBpIDwgdG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICByZXN1bHQucHVzaCh0b2tlbnNbaV0udik7XG4gICAgfVxuXG4gICAgcmVzdWx0ID0gcmVzdWx0LmpvaW4oJycpO1xuXG4gICAgaWYgKCEoaGFzUHJvdG9jb2wgfHwgaGFzU2xhc2hTbGFzaCkpIHtcbiAgICAgIHJlc3VsdCA9IFwiXCIuY29uY2F0KHByb3RvY29sLCBcIjovL1wiKS5jb25jYXQocmVzdWx0KTtcbiAgICB9XG5cbiAgICByZXR1cm4gcmVzdWx0O1xuICB9LFxuICBoYXNQcm90b2NvbDogZnVuY3Rpb24gaGFzUHJvdG9jb2woKSB7XG4gICAgcmV0dXJuIHRoaXMudGtbMF0udCA9PT0gUFJPVE9DT0w7XG4gIH1cbn0pO1xuXG52YXIgbXVsdGkgPSAvKiNfX1BVUkVfXyovT2JqZWN0LmZyZWV6ZSh7XG5cdF9fcHJvdG9fXzogbnVsbCxcblx0TXVsdGlUb2tlbjogTXVsdGlUb2tlbixcblx0QmFzZTogTXVsdGlUb2tlbixcblx0Y3JlYXRlVG9rZW5DbGFzczogY3JlYXRlVG9rZW5DbGFzcyxcblx0TWFpbHRvRW1haWw6IE1haWx0b0VtYWlsLFxuXHRFbWFpbDogRW1haWwsXG5cdFRleHQ6IFRleHQsXG5cdE5sOiBObCxcblx0VXJsOiBVcmxcbn0pO1xuXG4vKipcblx0Tm90IGV4YWN0bHkgcGFyc2VyLCBtb3JlIGxpa2UgdGhlIHNlY29uZC1zdGFnZSBzY2FubmVyIChhbHRob3VnaCB3ZSBjYW5cblx0dGhlb3JldGljYWxseSBob3Rzd2FwIHRoZSBjb2RlIGhlcmUgd2l0aCBhIHJlYWwgcGFyc2VyIGluIHRoZSBmdXR1cmUuLi4gYnV0XG5cdGZvciBhIGxpdHRsZSBVUkwtZmluZGluZyB1dGlsaXR5IGFic3RyYWN0IHN5bnRheCB0cmVlcyBtYXkgYmUgYSBsaXR0bGVcblx0b3ZlcmtpbGwpLlxuXG5cdFVSTCBmb3JtYXQ6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvVVJJX3NjaGVtZVxuXHRFbWFpbCBmb3JtYXQ6IGh0dHA6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvRW1haWxfYWRkcmVzcyAobGlua3MgdG8gUkZDIGluXG5cdHJlZmVyZW5jZSlcblxuXHRAbW9kdWxlIGxpbmtpZnlcblx0QHN1Ym1vZHVsZSBwYXJzZXJcblx0QG1haW4gcnVuXG4qL1xuLyoqXG4gKiBHZW5lcmF0ZSB0aGUgcGFyc2VyIG11bHRpIHRva2VuLWJhc2VkIHN0YXRlIG1hY2hpbmVcbiAqIEByZXR1cm5zIHtTdGF0ZX0gdGhlIHN0YXJ0aW5nIHN0YXRlXG4gKi9cblxuZnVuY3Rpb24gaW5pdCQxKCkge1xuICAvLyBUaGUgdW5pdmVyc2FsIHN0YXJ0aW5nIHN0YXRlLlxuICB2YXIgU19TVEFSVCA9IG1ha2VTdGF0ZSgpOyAvLyBJbnRlcm1lZGlhdGUgc3RhdGVzIGZvciBVUkxzLiBOb3RlIHRoYXQgZG9tYWlucyB0aGF0IGJlZ2luIHdpdGggYSBwcm90b2NvbFxuICAvLyBhcmUgdHJlYXRlZCBzbGlnaGx5IGRpZmZlcmVudGx5IGZyb20gdGhvc2UgdGhhdCBkb24ndC5cblxuICB2YXIgU19QUk9UT0NPTCA9IG1ha2VTdGF0ZSgpOyAvLyBlLmcuLCAnaHR0cDonXG5cbiAgdmFyIFNfTUFJTFRPID0gbWFrZVN0YXRlKCk7IC8vICdtYWlsdG86J1xuXG4gIHZhciBTX1BST1RPQ09MX1NMQVNIID0gbWFrZVN0YXRlKCk7IC8vIGUuZy4sICdodHRwOi8nJ1xuXG4gIHZhciBTX1BST1RPQ09MX1NMQVNIX1NMQVNIID0gbWFrZVN0YXRlKCk7IC8vIGUuZy4sJ2h0dHA6Ly8nXG5cbiAgdmFyIFNfRE9NQUlOID0gbWFrZVN0YXRlKCk7IC8vIHBhcnNlZCBzdHJpbmcgZW5kcyB3aXRoIGEgcG90ZW50aWFsIGRvbWFpbiBuYW1lIChBKVxuXG4gIHZhciBTX0RPTUFJTl9ET1QgPSBtYWtlU3RhdGUoKTsgLy8gKEEpIGRvbWFpbiBmb2xsb3dlZCBieSBET1RcblxuICB2YXIgU19UTEQgPSBtYWtlQWNjZXB0aW5nU3RhdGUoVXJsKTsgLy8gKEEpIFNpbXBsZXN0IHBvc3NpYmxlIFVSTCB3aXRoIG5vIHF1ZXJ5IHN0cmluZ1xuXG4gIHZhciBTX1RMRF9DT0xPTiA9IG1ha2VTdGF0ZSgpOyAvLyAoQSkgVVJMIGZvbGxvd2VkIGJ5IGNvbG9uIChwb3RlbnRpYWwgcG9ydCBudW1iZXIgaGVyZSlcblxuICB2YXIgU19UTERfUE9SVCA9IG1ha2VBY2NlcHRpbmdTdGF0ZShVcmwpOyAvLyBUTEQgZm9sbG93ZWQgYnkgYSBwb3J0IG51bWJlclxuXG4gIHZhciBTX1VSTCA9IG1ha2VBY2NlcHRpbmdTdGF0ZShVcmwpOyAvLyBMb25nIFVSTCB3aXRoIG9wdGlvbmFsIHBvcnQgYW5kIG1heWJlIHF1ZXJ5IHN0cmluZ1xuXG4gIHZhciBTX1VSTF9OT05fQUNDRVBUSU5HID0gbWFrZVN0YXRlKCk7IC8vIFVSTCBmb2xsb3dlZCBieSBzb21lIHN5bWJvbHMgKHdpbGwgbm90IGJlIHBhcnQgb2YgdGhlIGZpbmFsIFVSTClcblxuICB2YXIgU19VUkxfT1BFTkJSQUNFID0gbWFrZVN0YXRlKCk7IC8vIFVSTCBmb2xsb3dlZCBieSB7XG5cbiAgdmFyIFNfVVJMX09QRU5CUkFDS0VUID0gbWFrZVN0YXRlKCk7IC8vIFVSTCBmb2xsb3dlZCBieSBbXG5cbiAgdmFyIFNfVVJMX09QRU5BTkdMRUJSQUNLRVQgPSBtYWtlU3RhdGUoKTsgLy8gVVJMIGZvbGxvd2VkIGJ5IDxcblxuICB2YXIgU19VUkxfT1BFTlBBUkVOID0gbWFrZVN0YXRlKCk7IC8vIFVSTCBmb2xsb3dlZCBieSAoXG5cbiAgdmFyIFNfVVJMX09QRU5CUkFDRV9RID0gbWFrZUFjY2VwdGluZ1N0YXRlKFVybCk7IC8vIFVSTCBmb2xsb3dlZCBieSB7IGFuZCBzb21lIHN5bWJvbHMgdGhhdCB0aGUgVVJMIGNhbiBlbmQgaXRcblxuICB2YXIgU19VUkxfT1BFTkJSQUNLRVRfUSA9IG1ha2VBY2NlcHRpbmdTdGF0ZShVcmwpOyAvLyBVUkwgZm9sbG93ZWQgYnkgWyBhbmQgc29tZSBzeW1ib2xzIHRoYXQgdGhlIFVSTCBjYW4gZW5kIGl0XG5cbiAgdmFyIFNfVVJMX09QRU5BTkdMRUJSQUNLRVRfUSA9IG1ha2VBY2NlcHRpbmdTdGF0ZShVcmwpOyAvLyBVUkwgZm9sbG93ZWQgYnkgPCBhbmQgc29tZSBzeW1ib2xzIHRoYXQgdGhlIFVSTCBjYW4gZW5kIGl0XG5cbiAgdmFyIFNfVVJMX09QRU5QQVJFTl9RID0gbWFrZUFjY2VwdGluZ1N0YXRlKFVybCk7IC8vIFVSTCBmb2xsb3dlZCBieSAoIGFuZCBzb21lIHN5bWJvbHMgdGhhdCB0aGUgVVJMIGNhbiBlbmQgaXRcblxuICB2YXIgU19VUkxfT1BFTkJSQUNFX1NZTVMgPSBtYWtlU3RhdGUoKTsgLy8gU19VUkxfT1BFTkJSQUNFX1EgZm9sbG93ZWQgYnkgc29tZSBzeW1ib2xzIGl0IGNhbm5vdCBlbmQgaXRcblxuICB2YXIgU19VUkxfT1BFTkJSQUNLRVRfU1lNUyA9IG1ha2VTdGF0ZSgpOyAvLyBTX1VSTF9PUEVOQlJBQ0tFVF9RIGZvbGxvd2VkIGJ5IHNvbWUgc3ltYm9scyBpdCBjYW5ub3QgZW5kIGl0XG5cbiAgdmFyIFNfVVJMX09QRU5BTkdMRUJSQUNLRVRfU1lNUyA9IG1ha2VTdGF0ZSgpOyAvLyBTX1VSTF9PUEVOQU5HTEVCUkFDS0VUX1EgZm9sbG93ZWQgYnkgc29tZSBzeW1ib2xzIGl0IGNhbm5vdCBlbmQgaXRcblxuICB2YXIgU19VUkxfT1BFTlBBUkVOX1NZTVMgPSBtYWtlU3RhdGUoKTsgLy8gU19VUkxfT1BFTlBBUkVOX1EgZm9sbG93ZWQgYnkgc29tZSBzeW1ib2xzIGl0IGNhbm5vdCBlbmQgaXRcblxuICB2YXIgU19FTUFJTF9ET01BSU4gPSBtYWtlU3RhdGUoKTsgLy8gcGFyc2VkIHN0cmluZyBzdGFydHMgd2l0aCBsb2NhbCBlbWFpbCBpbmZvICsgQCB3aXRoIGEgcG90ZW50aWFsIGRvbWFpbiBuYW1lIChDKVxuXG4gIHZhciBTX0VNQUlMX0RPTUFJTl9ET1QgPSBtYWtlU3RhdGUoKTsgLy8gKEMpIGRvbWFpbiBmb2xsb3dlZCBieSBET1RcblxuICB2YXIgU19FTUFJTCA9IG1ha2VBY2NlcHRpbmdTdGF0ZShFbWFpbCk7IC8vIChDKSBQb3NzaWJsZSBlbWFpbCBhZGRyZXNzIChjb3VsZCBoYXZlIG1vcmUgdGxkcylcblxuICB2YXIgU19FTUFJTF9DT0xPTiA9IG1ha2VTdGF0ZSgpOyAvLyAoQykgVVJMIGZvbGxvd2VkIGJ5IGNvbG9uIChwb3RlbnRpYWwgcG9ydCBudW1iZXIgaGVyZSlcblxuICB2YXIgU19FTUFJTF9QT1JUID0gbWFrZUFjY2VwdGluZ1N0YXRlKEVtYWlsKTsgLy8gKEMpIEVtYWlsIGFkZHJlc3Mgd2l0aCBhIHBvcnRcblxuICB2YXIgU19NQUlMVE9fRU1BSUwgPSBtYWtlQWNjZXB0aW5nU3RhdGUoTWFpbHRvRW1haWwpOyAvLyBFbWFpbCB0aGF0IGJlZ2lucyB3aXRoIHRoZSBtYWlsdG8gcHJlZml4IChEKVxuXG4gIHZhciBTX01BSUxUT19FTUFJTF9OT05fQUNDRVBUSU5HID0gbWFrZVN0YXRlKCk7IC8vIChEKSBGb2xsb3dlZCBieSBzb21lIG5vbi1xdWVyeSBzdHJpbmcgY2hhcnNcblxuICB2YXIgU19MT0NBTFBBUlQgPSBtYWtlU3RhdGUoKTsgLy8gTG9jYWwgcGFydCBvZiB0aGUgZW1haWwgYWRkcmVzc1xuXG4gIHZhciBTX0xPQ0FMUEFSVF9BVCA9IG1ha2VTdGF0ZSgpOyAvLyBMb2NhbCBwYXJ0IG9mIHRoZSBlbWFpbCBhZGRyZXNzIHBsdXMgQFxuXG4gIHZhciBTX0xPQ0FMUEFSVF9ET1QgPSBtYWtlU3RhdGUoKTsgLy8gTG9jYWwgcGFydCBvZiB0aGUgZW1haWwgYWRkcmVzcyBwbHVzICcuJyAobG9jYWxwYXJ0IGNhbm5vdCBlbmQgaW4gLilcblxuICB2YXIgU19OTCA9IG1ha2VBY2NlcHRpbmdTdGF0ZShObCk7IC8vIHNpbmdsZSBuZXcgbGluZVxuICAvLyBNYWtlIHBhdGggZnJvbSBzdGFydCB0byBwcm90b2NvbCAod2l0aCAnLy8nKVxuXG4gIG1ha2VUKFNfU1RBUlQsIE5MLCBTX05MKTtcbiAgbWFrZVQoU19TVEFSVCwgUFJPVE9DT0wsIFNfUFJPVE9DT0wpO1xuICBtYWtlVChTX1NUQVJULCBNQUlMVE8sIFNfTUFJTFRPKTtcbiAgbWFrZVQoU19QUk9UT0NPTCwgU0xBU0gsIFNfUFJPVE9DT0xfU0xBU0gpO1xuICBtYWtlVChTX1BST1RPQ09MX1NMQVNILCBTTEFTSCwgU19QUk9UT0NPTF9TTEFTSF9TTEFTSCk7IC8vIFRoZSB2ZXJ5IGZpcnN0IHBvdGVudGlhbCBkb21haW4gbmFtZVxuXG4gIG1ha2VUKFNfU1RBUlQsIFRMRCwgU19ET01BSU4pO1xuICBtYWtlVChTX1NUQVJULCBET01BSU4sIFNfRE9NQUlOKTtcbiAgbWFrZVQoU19TVEFSVCwgTE9DQUxIT1NULCBTX1RMRCk7XG4gIG1ha2VUKFNfU1RBUlQsIE5VTSwgU19ET01BSU4pOyAvLyBGb3JjZSBVUkwgZm9yIHByb3RvY29sIGZvbGxvd2VkIGJ5IGFueXRoaW5nIHNhbmVcblxuICBtYWtlVChTX1BST1RPQ09MX1NMQVNIX1NMQVNILCBUTEQsIFNfVVJMKTtcbiAgbWFrZVQoU19QUk9UT0NPTF9TTEFTSF9TTEFTSCwgRE9NQUlOLCBTX1VSTCk7XG4gIG1ha2VUKFNfUFJPVE9DT0xfU0xBU0hfU0xBU0gsIE5VTSwgU19VUkwpO1xuICBtYWtlVChTX1BST1RPQ09MX1NMQVNIX1NMQVNILCBMT0NBTEhPU1QsIFNfVVJMKTsgLy8gQWNjb3VudCBmb3IgZG90cyBhbmQgaHlwaGVuc1xuICAvLyBoeXBoZW5zIGFyZSB1c3VhbGx5IHBhcnRzIG9mIGRvbWFpbiBuYW1lc1xuXG4gIG1ha2VUKFNfRE9NQUlOLCBET1QsIFNfRE9NQUlOX0RPVCk7XG4gIG1ha2VUKFNfRU1BSUxfRE9NQUlOLCBET1QsIFNfRU1BSUxfRE9NQUlOX0RPVCk7IC8vIEh5cGhlbiBjYW4ganVtcCBiYWNrIHRvIGEgZG9tYWluIG5hbWVcbiAgLy8gQWZ0ZXIgdGhlIGZpcnN0IGRvbWFpbiBhbmQgYSBkb3QsIHdlIGNhbiBmaW5kIGVpdGhlciBhIFVSTCBvciBhbm90aGVyIGRvbWFpblxuXG4gIG1ha2VUKFNfRE9NQUlOX0RPVCwgVExELCBTX1RMRCk7XG4gIG1ha2VUKFNfRE9NQUlOX0RPVCwgRE9NQUlOLCBTX0RPTUFJTik7XG4gIG1ha2VUKFNfRE9NQUlOX0RPVCwgTlVNLCBTX0RPTUFJTik7XG4gIG1ha2VUKFNfRE9NQUlOX0RPVCwgTE9DQUxIT1NULCBTX0RPTUFJTik7XG4gIG1ha2VUKFNfRU1BSUxfRE9NQUlOX0RPVCwgVExELCBTX0VNQUlMKTtcbiAgbWFrZVQoU19FTUFJTF9ET01BSU5fRE9ULCBET01BSU4sIFNfRU1BSUxfRE9NQUlOKTtcbiAgbWFrZVQoU19FTUFJTF9ET01BSU5fRE9ULCBOVU0sIFNfRU1BSUxfRE9NQUlOKTtcbiAgbWFrZVQoU19FTUFJTF9ET01BSU5fRE9ULCBMT0NBTEhPU1QsIFNfRU1BSUxfRE9NQUlOKTsgLy8gU19UTEQgYWNjZXB0cyEgQnV0IHRoZSBVUkwgY291bGQgYmUgbG9uZ2VyLCB0cnkgdG8gZmluZCBhIG1hdGNoIGdyZWVkaWx5XG4gIC8vIFRoZSBgcnVuYCBmdW5jdGlvbiBzaG91bGQgYmUgYWJsZSB0byBcInJvbGxiYWNrXCIgdG8gdGhlIGFjY2VwdGluZyBzdGF0ZVxuXG4gIG1ha2VUKFNfVExELCBET1QsIFNfRE9NQUlOX0RPVCk7XG4gIG1ha2VUKFNfRU1BSUwsIERPVCwgU19FTUFJTF9ET01BSU5fRE9UKTsgLy8gQmVjb21lIHJlYWwgVVJMcyBhZnRlciBgU0xBU0hgIG9yIGBDT0xPTiBOVU0gU0xBU0hgXG4gIC8vIEhlcmUgUFNTIGFuZCBub24tUFNTIGNvbnZlcmdlXG5cbiAgbWFrZVQoU19UTEQsIENPTE9OLCBTX1RMRF9DT0xPTik7XG4gIG1ha2VUKFNfVExELCBTTEFTSCwgU19VUkwpO1xuICBtYWtlVChTX1RMRF9DT0xPTiwgTlVNLCBTX1RMRF9QT1JUKTtcbiAgbWFrZVQoU19UTERfUE9SVCwgU0xBU0gsIFNfVVJMKTtcbiAgbWFrZVQoU19FTUFJTCwgQ09MT04sIFNfRU1BSUxfQ09MT04pO1xuICBtYWtlVChTX0VNQUlMX0NPTE9OLCBOVU0sIFNfRU1BSUxfUE9SVCk7IC8vIFR5cGVzIG9mIGNoYXJhY3RlcnMgdGhlIFVSTCBjYW4gZGVmaW5pdGVseSBlbmQgaW5cblxuICB2YXIgcXNBY2NlcHRpbmcgPSBbRE9NQUlOLCBBVCwgTE9DQUxIT1NULCBOVU0sIFBMVVMsIFBPVU5ELCBQUk9UT0NPTCwgU0xBU0gsIFRMRCwgVU5ERVJTQ09SRSwgU1lNLCBBTVBFUlNBTkRdOyAvLyBUeXBlcyBvZiB0b2tlbnMgdGhhdCBjYW4gZm9sbG93IGEgVVJMIGFuZCBiZSBwYXJ0IG9mIHRoZSBxdWVyeSBzdHJpbmdcbiAgLy8gYnV0IGNhbm5vdCBiZSB0aGUgdmVyeSBsYXN0IGNoYXJhY3RlcnNcbiAgLy8gQ2hhcmFjdGVycyB0aGF0IGNhbm5vdCBhcHBlYXIgaW4gdGhlIFVSTCBhdCBhbGwgc2hvdWxkIGJlIGV4Y2x1ZGVkXG5cbiAgdmFyIHFzTm9uQWNjZXB0aW5nID0gW0NPTE9OLCBET1QsIFFVRVJZLCBQVU5DVFVBVElPTiwgQ0xPU0VCUkFDRSwgQ0xPU0VCUkFDS0VULCBDTE9TRUFOR0xFQlJBQ0tFVCwgQ0xPU0VQQVJFTiwgT1BFTkJSQUNFLCBPUEVOQlJBQ0tFVCwgT1BFTkFOR0xFQlJBQ0tFVCwgT1BFTlBBUkVOXTsgLy8gVGhlc2Ugc3RhdGVzIGFyZSByZXNwb25zaWJsZSBwcmltYXJpbHkgZm9yIGRldGVybWluaW5nIHdoZXRoZXIgb3Igbm90IHRvXG4gIC8vIGluY2x1ZGUgdGhlIGZpbmFsIHJvdW5kIGJyYWNrZXQuXG4gIC8vIFVSTCwgZm9sbG93ZWQgYnkgYW4gb3BlbmluZyBicmFja2V0XG5cbiAgbWFrZVQoU19VUkwsIE9QRU5CUkFDRSwgU19VUkxfT1BFTkJSQUNFKTtcbiAgbWFrZVQoU19VUkwsIE9QRU5CUkFDS0VULCBTX1VSTF9PUEVOQlJBQ0tFVCk7XG4gIG1ha2VUKFNfVVJMLCBPUEVOQU5HTEVCUkFDS0VULCBTX1VSTF9PUEVOQU5HTEVCUkFDS0VUKTtcbiAgbWFrZVQoU19VUkwsIE9QRU5QQVJFTiwgU19VUkxfT1BFTlBBUkVOKTsgLy8gVVJMIHdpdGggZXh0cmEgc3ltYm9scyBhdCB0aGUgZW5kLCBmb2xsb3dlZCBieSBhbiBvcGVuaW5nIGJyYWNrZXRcblxuICBtYWtlVChTX1VSTF9OT05fQUNDRVBUSU5HLCBPUEVOQlJBQ0UsIFNfVVJMX09QRU5CUkFDRSk7XG4gIG1ha2VUKFNfVVJMX05PTl9BQ0NFUFRJTkcsIE9QRU5CUkFDS0VULCBTX1VSTF9PUEVOQlJBQ0tFVCk7XG4gIG1ha2VUKFNfVVJMX05PTl9BQ0NFUFRJTkcsIE9QRU5BTkdMRUJSQUNLRVQsIFNfVVJMX09QRU5BTkdMRUJSQUNLRVQpO1xuICBtYWtlVChTX1VSTF9OT05fQUNDRVBUSU5HLCBPUEVOUEFSRU4sIFNfVVJMX09QRU5QQVJFTik7IC8vIENsb3NpbmcgYnJhY2tldCBjb21wb25lbnQuIFRoaXMgY2hhcmFjdGVyIFdJTEwgYmUgaW5jbHVkZWQgaW4gdGhlIFVSTFxuXG4gIG1ha2VUKFNfVVJMX09QRU5CUkFDRSwgQ0xPU0VCUkFDRSwgU19VUkwpO1xuICBtYWtlVChTX1VSTF9PUEVOQlJBQ0tFVCwgQ0xPU0VCUkFDS0VULCBTX1VSTCk7XG4gIG1ha2VUKFNfVVJMX09QRU5BTkdMRUJSQUNLRVQsIENMT1NFQU5HTEVCUkFDS0VULCBTX1VSTCk7XG4gIG1ha2VUKFNfVVJMX09QRU5QQVJFTiwgQ0xPU0VQQVJFTiwgU19VUkwpO1xuICBtYWtlVChTX1VSTF9PUEVOQlJBQ0VfUSwgQ0xPU0VCUkFDRSwgU19VUkwpO1xuICBtYWtlVChTX1VSTF9PUEVOQlJBQ0tFVF9RLCBDTE9TRUJSQUNLRVQsIFNfVVJMKTtcbiAgbWFrZVQoU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9RLCBDTE9TRUFOR0xFQlJBQ0tFVCwgU19VUkwpO1xuICBtYWtlVChTX1VSTF9PUEVOUEFSRU5fUSwgQ0xPU0VQQVJFTiwgU19VUkwpO1xuICBtYWtlVChTX1VSTF9PUEVOQlJBQ0VfU1lNUywgQ0xPU0VCUkFDRSwgU19VUkwpO1xuICBtYWtlVChTX1VSTF9PUEVOQlJBQ0tFVF9TWU1TLCBDTE9TRUJSQUNLRVQsIFNfVVJMKTtcbiAgbWFrZVQoU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9TWU1TLCBDTE9TRUFOR0xFQlJBQ0tFVCwgU19VUkwpO1xuICBtYWtlVChTX1VSTF9PUEVOUEFSRU5fU1lNUywgQ0xPU0VQQVJFTiwgU19VUkwpOyAvLyBVUkwgdGhhdCBiZWluZ3Mgd2l0aCBhbiBvcGVuaW5nIGJyYWNrZXQsIGZvbGxvd2VkIGJ5IGEgc3ltYm9scy5cbiAgLy8gTm90ZSB0aGF0IHRoZSBmaW5hbCBzdGF0ZSBjYW4gc3RpbGwgYmUgYFNfVVJMX09QRU5CUkFDRV9RYCAoaWYgdGhlIFVSTCBvbmx5XG4gIC8vIGhhcyBhIHNpbmdsZSBvcGVuaW5nIGJyYWNrZXQgZm9yIHNvbWUgcmVhc29uKS5cblxuICBtYWtlTXVsdGlUKFNfVVJMX09QRU5CUkFDRSwgcXNBY2NlcHRpbmcsIFNfVVJMX09QRU5CUkFDRV9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQlJBQ0tFVCwgcXNBY2NlcHRpbmcsIFNfVVJMX09QRU5CUkFDS0VUX1EpO1xuICBtYWtlTXVsdGlUKFNfVVJMX09QRU5BTkdMRUJSQUNLRVQsIHFzQWNjZXB0aW5nLCBTX1VSTF9PUEVOQU5HTEVCUkFDS0VUX1EpO1xuICBtYWtlTXVsdGlUKFNfVVJMX09QRU5QQVJFTiwgcXNBY2NlcHRpbmcsIFNfVVJMX09QRU5QQVJFTl9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQlJBQ0UsIHFzTm9uQWNjZXB0aW5nLCBTX1VSTF9PUEVOQlJBQ0VfU1lNUyk7XG4gIG1ha2VNdWx0aVQoU19VUkxfT1BFTkJSQUNLRVQsIHFzTm9uQWNjZXB0aW5nLCBTX1VSTF9PUEVOQlJBQ0tFVF9TWU1TKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQU5HTEVCUkFDS0VULCBxc05vbkFjY2VwdGluZywgU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9TWU1TKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOUEFSRU4sIHFzTm9uQWNjZXB0aW5nLCBTX1VSTF9PUEVOUEFSRU5fU1lNUyk7IC8vIFVSTCB0aGF0IGJlZ2lucyB3aXRoIGFuIG9wZW5pbmcgYnJhY2tldCwgZm9sbG93ZWQgYnkgc29tZSBzeW1ib2xzXG5cbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQlJBQ0VfUSwgcXNBY2NlcHRpbmcsIFNfVVJMX09QRU5CUkFDRV9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQlJBQ0tFVF9RLCBxc0FjY2VwdGluZywgU19VUkxfT1BFTkJSQUNLRVRfUSk7XG4gIG1ha2VNdWx0aVQoU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9RLCBxc0FjY2VwdGluZywgU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOUEFSRU5fUSwgcXNBY2NlcHRpbmcsIFNfVVJMX09QRU5QQVJFTl9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQlJBQ0VfUSwgcXNOb25BY2NlcHRpbmcsIFNfVVJMX09QRU5CUkFDRV9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQlJBQ0tFVF9RLCBxc05vbkFjY2VwdGluZywgU19VUkxfT1BFTkJSQUNLRVRfUSk7XG4gIG1ha2VNdWx0aVQoU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9RLCBxc05vbkFjY2VwdGluZywgU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOUEFSRU5fUSwgcXNOb25BY2NlcHRpbmcsIFNfVVJMX09QRU5QQVJFTl9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQlJBQ0VfU1lNUywgcXNBY2NlcHRpbmcsIFNfVVJMX09QRU5CUkFDRV9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQlJBQ0tFVF9TWU1TLCBxc0FjY2VwdGluZywgU19VUkxfT1BFTkJSQUNLRVRfUSk7XG4gIG1ha2VNdWx0aVQoU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9TWU1TLCBxc0FjY2VwdGluZywgU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOUEFSRU5fU1lNUywgcXNBY2NlcHRpbmcsIFNfVVJMX09QRU5QQVJFTl9RKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQlJBQ0VfU1lNUywgcXNOb25BY2NlcHRpbmcsIFNfVVJMX09QRU5CUkFDRV9TWU1TKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOQlJBQ0tFVF9TWU1TLCBxc05vbkFjY2VwdGluZywgU19VUkxfT1BFTkJSQUNLRVRfU1lNUyk7XG4gIG1ha2VNdWx0aVQoU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9TWU1TLCBxc05vbkFjY2VwdGluZywgU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9TWU1TKTtcbiAgbWFrZU11bHRpVChTX1VSTF9PUEVOUEFSRU5fU1lNUywgcXNOb25BY2NlcHRpbmcsIFNfVVJMX09QRU5QQVJFTl9TWU1TKTsgLy8gQWNjb3VudCBmb3IgdGhlIHF1ZXJ5IHN0cmluZ1xuXG4gIG1ha2VNdWx0aVQoU19VUkwsIHFzQWNjZXB0aW5nLCBTX1VSTCk7XG4gIG1ha2VNdWx0aVQoU19VUkxfTk9OX0FDQ0VQVElORywgcXNBY2NlcHRpbmcsIFNfVVJMKTtcbiAgbWFrZU11bHRpVChTX1VSTCwgcXNOb25BY2NlcHRpbmcsIFNfVVJMX05PTl9BQ0NFUFRJTkcpO1xuICBtYWtlTXVsdGlUKFNfVVJMX05PTl9BQ0NFUFRJTkcsIHFzTm9uQWNjZXB0aW5nLCBTX1VSTF9OT05fQUNDRVBUSU5HKTsgLy8gRW1haWwgYWRkcmVzcy1zcGVjaWZpYyBzdGF0ZSBkZWZpbml0aW9uc1xuICAvLyBOb3RlOiBXZSBhcmUgbm90IGFsbG93aW5nICcvJyBpbiBlbWFpbCBhZGRyZXNzZXMgc2luY2UgdGhpcyB3b3VsZCBpbnRlcmZlcmVcbiAgLy8gd2l0aCByZWFsIFVSTHNcbiAgLy8gRm9yIGFkZHJlc3NlcyB3aXRoIHRoZSBtYWlsdG8gcHJlZml4XG4gIC8vICdtYWlsdG86JyBmb2xsb3dlZCBieSBhbnl0aGluZyBzYW5lIGlzIGEgdmFsaWQgZW1haWxcblxuICBtYWtlVChTX01BSUxUTywgVExELCBTX01BSUxUT19FTUFJTCk7XG4gIG1ha2VUKFNfTUFJTFRPLCBET01BSU4sIFNfTUFJTFRPX0VNQUlMKTtcbiAgbWFrZVQoU19NQUlMVE8sIE5VTSwgU19NQUlMVE9fRU1BSUwpO1xuICBtYWtlVChTX01BSUxUTywgTE9DQUxIT1NULCBTX01BSUxUT19FTUFJTCk7IC8vIEdyZWVkaWx5IGdldCBtb3JlIHBvdGVudGlhbCB2YWxpZCBlbWFpbCB2YWx1ZXNcblxuICBtYWtlTXVsdGlUKFNfTUFJTFRPX0VNQUlMLCBxc0FjY2VwdGluZywgU19NQUlMVE9fRU1BSUwpO1xuICBtYWtlTXVsdGlUKFNfTUFJTFRPX0VNQUlMLCBxc05vbkFjY2VwdGluZywgU19NQUlMVE9fRU1BSUxfTk9OX0FDQ0VQVElORyk7XG4gIG1ha2VNdWx0aVQoU19NQUlMVE9fRU1BSUxfTk9OX0FDQ0VQVElORywgcXNBY2NlcHRpbmcsIFNfTUFJTFRPX0VNQUlMKTtcbiAgbWFrZU11bHRpVChTX01BSUxUT19FTUFJTF9OT05fQUNDRVBUSU5HLCBxc05vbkFjY2VwdGluZywgU19NQUlMVE9fRU1BSUxfTk9OX0FDQ0VQVElORyk7IC8vIEZvciBhZGRyZXNzZXMgd2l0aG91dCB0aGUgbWFpbHRvIHByZWZpeFxuICAvLyBUb2tlbnMgYWxsb3dlZCBpbiB0aGUgbG9jYWxwYXJ0IG9mIHRoZSBlbWFpbFxuXG4gIHZhciBsb2NhbHBhcnRBY2NlcHRpbmcgPSBbRE9NQUlOLCBOVU0sIFBMVVMsIFBPVU5ELCBRVUVSWSwgVU5ERVJTQ09SRSwgU1lNLCBBTVBFUlNBTkQsIFRMRF07IC8vIFNvbWUgb2YgdGhlIHRva2VucyBpbiBgbG9jYWxwYXJ0QWNjZXB0aW5nYCBhcmUgYWxyZWFkeSBhY2NvdW50ZWQgZm9yIGhlcmUgYW5kXG4gIC8vIHdpbGwgbm90IGJlIG92ZXJ3cml0dGVuIChkb24ndCB3b3JyeSlcblxuICBtYWtlTXVsdGlUKFNfRE9NQUlOLCBsb2NhbHBhcnRBY2NlcHRpbmcsIFNfTE9DQUxQQVJUKTtcbiAgbWFrZVQoU19ET01BSU4sIEFULCBTX0xPQ0FMUEFSVF9BVCk7XG4gIG1ha2VNdWx0aVQoU19UTEQsIGxvY2FscGFydEFjY2VwdGluZywgU19MT0NBTFBBUlQpO1xuICBtYWtlVChTX1RMRCwgQVQsIFNfTE9DQUxQQVJUX0FUKTtcbiAgbWFrZU11bHRpVChTX0RPTUFJTl9ET1QsIGxvY2FscGFydEFjY2VwdGluZywgU19MT0NBTFBBUlQpOyAvLyBOb3cgaW4gbG9jYWxwYXJ0IG9mIGFkZHJlc3NcbiAgLy8gVE9ETzogSVAgYWRkcmVzc2VzIGFuZCB3aGF0IGlmIHRoZSBlbWFpbCBzdGFydHMgd2l0aCBudW1iZXJzP1xuXG4gIG1ha2VNdWx0aVQoU19MT0NBTFBBUlQsIGxvY2FscGFydEFjY2VwdGluZywgU19MT0NBTFBBUlQpO1xuICBtYWtlVChTX0xPQ0FMUEFSVCwgQVQsIFNfTE9DQUxQQVJUX0FUKTsgLy8gY2xvc2UgdG8gYW4gZW1haWwgYWRkcmVzcyBub3dcblxuICBtYWtlVChTX0xPQ0FMUEFSVCwgRE9ULCBTX0xPQ0FMUEFSVF9ET1QpO1xuICBtYWtlTXVsdGlUKFNfTE9DQUxQQVJUX0RPVCwgbG9jYWxwYXJ0QWNjZXB0aW5nLCBTX0xPQ0FMUEFSVCk7XG4gIG1ha2VUKFNfTE9DQUxQQVJUX0FULCBUTEQsIFNfRU1BSUxfRE9NQUlOKTtcbiAgbWFrZVQoU19MT0NBTFBBUlRfQVQsIERPTUFJTiwgU19FTUFJTF9ET01BSU4pO1xuICBtYWtlVChTX0xPQ0FMUEFSVF9BVCwgTlVNLCBTX0VNQUlMX0RPTUFJTik7XG4gIG1ha2VUKFNfTE9DQUxQQVJUX0FULCBMT0NBTEhPU1QsIFNfRU1BSUwpOyAvLyBTdGF0ZXMgZm9sbG93aW5nIGBAYCBkZWZpbmVkIGFib3ZlXG5cbiAgcmV0dXJuIFNfU1RBUlQ7XG59XG4vKipcbiAqIFJ1biB0aGUgcGFyc2VyIHN0YXRlIG1hY2hpbmUgb24gYSBsaXN0IG9mIHNjYW5uZWQgc3RyaW5nLWJhc2VkIHRva2VucyB0b1xuICogY3JlYXRlIGEgbGlzdCBvZiBtdWx0aSB0b2tlbnMsIGVhY2ggb2Ygd2hpY2ggcmVwcmVzZW50cyBhIFVSTCwgZW1haWwgYWRkcmVzcyxcbiAqIHBsYWluIHRleHQsIGV0Yy5cbiAqXG4gKiBAcGFyYW0ge1N0YXRlfSBzdGFydCBwYXJzZXIgc3RhcnQgc3RhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCB0aGUgb3JpZ2luYWwgaW5wdXQgdXNlZCB0byBnZW5lcmF0ZSB0aGUgZ2l2ZW4gdG9rZW5zXG4gKiBAcGFyYW0ge0FycmF5PHt0OiBzdHJpbmcsIHY6IHN0cmluZywgczogbnVtYmVyLCBlOiBudW1iZXJ9Pn0gdG9rZW5zIGxpc3Qgb2Ygc2Nhbm5lZCB0b2tlbnNcbiAqIEByZXR1cm5zIHtBcnJheTxNdWx0aVRva2VuPn1cbiAqL1xuXG5mdW5jdGlvbiBydW4oc3RhcnQsIGlucHV0LCB0b2tlbnMpIHtcbiAgdmFyIGxlbiA9IHRva2Vucy5sZW5ndGg7XG4gIHZhciBjdXJzb3IgPSAwO1xuICB2YXIgbXVsdGlzID0gW107XG4gIHZhciB0ZXh0VG9rZW5zID0gW107XG5cbiAgd2hpbGUgKGN1cnNvciA8IGxlbikge1xuICAgIHZhciBzdGF0ZSA9IHN0YXJ0O1xuICAgIHZhciBzZWNvbmRTdGF0ZSA9IG51bGw7XG4gICAgdmFyIG5leHRTdGF0ZSA9IG51bGw7XG4gICAgdmFyIG11bHRpTGVuZ3RoID0gMDtcbiAgICB2YXIgbGF0ZXN0QWNjZXB0aW5nID0gbnVsbDtcbiAgICB2YXIgc2luY2VBY2NlcHRzID0gLTE7XG5cbiAgICB3aGlsZSAoY3Vyc29yIDwgbGVuICYmICEoc2Vjb25kU3RhdGUgPSB0YWtlVChzdGF0ZSwgdG9rZW5zW2N1cnNvcl0udCkpKSB7XG4gICAgICAvLyBTdGFydGluZyB0b2tlbnMgd2l0aCBub3doZXJlIHRvIGp1bXAgdG8uXG4gICAgICAvLyBDb25zaWRlciB0aGVzZSB0byBiZSBqdXN0IHBsYWluIHRleHRcbiAgICAgIHRleHRUb2tlbnMucHVzaCh0b2tlbnNbY3Vyc29yKytdKTtcbiAgICB9XG5cbiAgICB3aGlsZSAoY3Vyc29yIDwgbGVuICYmIChuZXh0U3RhdGUgPSBzZWNvbmRTdGF0ZSB8fCB0YWtlVChzdGF0ZSwgdG9rZW5zW2N1cnNvcl0udCkpKSB7XG4gICAgICAvLyBHZXQgdGhlIG5leHQgc3RhdGVcbiAgICAgIHNlY29uZFN0YXRlID0gbnVsbDtcbiAgICAgIHN0YXRlID0gbmV4dFN0YXRlOyAvLyBLZWVwIHRyYWNrIG9mIHRoZSBsYXRlc3QgYWNjZXB0aW5nIHN0YXRlXG5cbiAgICAgIGlmIChzdGF0ZS5hY2NlcHRzKCkpIHtcbiAgICAgICAgc2luY2VBY2NlcHRzID0gMDtcbiAgICAgICAgbGF0ZXN0QWNjZXB0aW5nID0gc3RhdGU7XG4gICAgICB9IGVsc2UgaWYgKHNpbmNlQWNjZXB0cyA+PSAwKSB7XG4gICAgICAgIHNpbmNlQWNjZXB0cysrO1xuICAgICAgfVxuXG4gICAgICBjdXJzb3IrKztcbiAgICAgIG11bHRpTGVuZ3RoKys7XG4gICAgfVxuXG4gICAgaWYgKHNpbmNlQWNjZXB0cyA8IDApIHtcbiAgICAgIC8vIE5vIGFjY2VwdGluZyBzdGF0ZSB3YXMgZm91bmQsIHBhcnQgb2YgYSByZWd1bGFyIHRleHQgdG9rZW5cbiAgICAgIC8vIEFkZCBhbGwgdGhlIHRva2VucyB3ZSBsb29rZWQgYXQgdG8gdGhlIHRleHQgdG9rZW5zIGFycmF5XG4gICAgICBmb3IgKHZhciBpID0gY3Vyc29yIC0gbXVsdGlMZW5ndGg7IGkgPCBjdXJzb3I7IGkrKykge1xuICAgICAgICB0ZXh0VG9rZW5zLnB1c2godG9rZW5zW2ldKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgLy8gQWNjZXB0aW5nIHN0YXRlIVxuICAgICAgLy8gRmlyc3QgY2xvc2Ugb2ZmIHRoZSB0ZXh0VG9rZW5zIChpZiBhdmFpbGFibGUpXG4gICAgICBpZiAodGV4dFRva2Vucy5sZW5ndGggPiAwKSB7XG4gICAgICAgIG11bHRpcy5wdXNoKHBhcnNlckNyZWF0ZU11bHRpVG9rZW4oVGV4dCwgaW5wdXQsIHRleHRUb2tlbnMpKTtcbiAgICAgICAgdGV4dFRva2VucyA9IFtdO1xuICAgICAgfSAvLyBSb2xsIGJhY2sgdG8gdGhlIGxhdGVzdCBhY2NlcHRpbmcgc3RhdGVcblxuXG4gICAgICBjdXJzb3IgLT0gc2luY2VBY2NlcHRzO1xuICAgICAgbXVsdGlMZW5ndGggLT0gc2luY2VBY2NlcHRzOyAvLyBDcmVhdGUgYSBuZXcgbXVsdGl0b2tlblxuXG4gICAgICB2YXIgTXVsdGkgPSBsYXRlc3RBY2NlcHRpbmcudDtcbiAgICAgIHZhciBzdWJ0b2tlbnMgPSB0b2tlbnMuc2xpY2UoY3Vyc29yIC0gbXVsdGlMZW5ndGgsIGN1cnNvcik7XG4gICAgICBtdWx0aXMucHVzaChwYXJzZXJDcmVhdGVNdWx0aVRva2VuKE11bHRpLCBpbnB1dCwgc3VidG9rZW5zKSk7XG4gICAgfVxuICB9IC8vIEZpbmFsbHkgY2xvc2Ugb2ZmIHRoZSB0ZXh0VG9rZW5zIChpZiBhdmFpbGFibGUpXG5cblxuICBpZiAodGV4dFRva2Vucy5sZW5ndGggPiAwKSB7XG4gICAgbXVsdGlzLnB1c2gocGFyc2VyQ3JlYXRlTXVsdGlUb2tlbihUZXh0LCBpbnB1dCwgdGV4dFRva2VucykpO1xuICB9XG5cbiAgcmV0dXJuIG11bHRpcztcbn1cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgaW5zdGFudGlhdGluZyBhIG5ldyBtdWx0aXRva2VuIHdpdGggYWxsIHRoZSByZWxldmFudFxuICogZmllbGRzIGR1cmluZyBwYXJzaW5nLlxuICogQHBhcmFtIHtDbGFzczxNdWx0aVRva2VuPn0gTXVsdGkgY2xhc3MgdG8gaW5zdGFudGlhdGVcbiAqIEBwYXJhbSB7c3RyaW5nfSBpbnB1dCBvcmlnaW5hbCBpbnB1dCBzdHJpbmdcbiAqIEBwYXJhbSB7QXJyYXk8e3Q6IHN0cmluZywgdjogc3RyaW5nLCBzOiBudW1iZXIsIGU6IG51bWJlcn0+fSB0b2tlbnMgY29uc2VjdXRpdmUgdG9rZW5zIHNjYW5uZWQgZnJvbSBpbnB1dCBzdHJpbmdcbiAqIEByZXR1cm5zIHtNdWx0aVRva2VufVxuICovXG5cbmZ1bmN0aW9uIHBhcnNlckNyZWF0ZU11bHRpVG9rZW4oTXVsdGksIGlucHV0LCB0b2tlbnMpIHtcbiAgdmFyIHN0YXJ0SWR4ID0gdG9rZW5zWzBdLnM7XG4gIHZhciBlbmRJZHggPSB0b2tlbnNbdG9rZW5zLmxlbmd0aCAtIDFdLmU7XG4gIHZhciB2YWx1ZSA9IGlucHV0LnN1YnN0cihzdGFydElkeCwgZW5kSWR4IC0gc3RhcnRJZHgpO1xuICByZXR1cm4gbmV3IE11bHRpKHZhbHVlLCB0b2tlbnMpO1xufVxuXG52YXIgd2FybiA9IHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJiBjb25zb2xlICYmIGNvbnNvbGUud2FybiB8fCBmdW5jdGlvbiAoKSB7fTsgLy8gU2lkZS1lZmZlY3QgaW5pdGlhbGl6YXRpb24gc3RhdGVcblxuXG52YXIgSU5JVCA9IHtcbiAgc2Nhbm5lcjogbnVsbCxcbiAgcGFyc2VyOiBudWxsLFxuICBwbHVnaW5RdWV1ZTogW10sXG4gIGN1c3RvbVByb3RvY29sczogW10sXG4gIGluaXRpYWxpemVkOiBmYWxzZVxufTtcbi8qKlxuICogRGUtcmVnaXN0ZXIgYWxsIHBsdWdpbnMgYW5kIHJlc2V0IHRoZSBpbnRlcm5hbCBzdGF0ZS1tYWNoaW5lLiBVc2VkIGZvclxuICogdGVzdGluZzsgbm90IHJlcXVpcmVkIGluIHByYWN0aWNlLlxuICogQHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiByZXNldCgpIHtcbiAgSU5JVC5zY2FubmVyID0gbnVsbDtcbiAgSU5JVC5wYXJzZXIgPSBudWxsO1xuICBJTklULnBsdWdpblF1ZXVlID0gW107XG4gIElOSVQuY3VzdG9tUHJvdG9jb2xzID0gW107XG4gIElOSVQuaW5pdGlhbGl6ZWQgPSBmYWxzZTtcbn1cbi8qKlxuICogUmVnaXN0ZXIgYSBsaW5raWZ5IGV4dGVuc2lvbiBwbHVnaW5cbiAqIEBwYXJhbSB7c3RyaW5nfSBuYW1lIG9mIHBsdWdpbiB0byByZWdpc3RlclxuICogQHBhcmFtIHtGdW5jdGlvbn0gcGx1Z2luIGZ1bmN0aW9uIHRoYXQgYWNjZXB0cyBtdXRhYmxlIGxpbmtpZnkgc3RhdGVcbiAqL1xuXG5mdW5jdGlvbiByZWdpc3RlclBsdWdpbihuYW1lLCBwbHVnaW4pIHtcbiAgZm9yICh2YXIgaSA9IDA7IGkgPCBJTklULnBsdWdpblF1ZXVlLmxlbmd0aDsgaSsrKSB7XG4gICAgaWYgKG5hbWUgPT09IElOSVQucGx1Z2luUXVldWVbaV1bMF0pIHtcbiAgICAgIHdhcm4oXCJsaW5raWZ5anM6IHBsdWdpbiBcXFwiXCIuY29uY2F0KG5hbWUsIFwiXFxcIiBhbHJlYWR5IHJlZ2lzdGVyZWQgLSB3aWxsIGJlIG92ZXJ3cml0dGVuXCIpKTtcbiAgICAgIElOSVQucGx1Z2luUXVldWVbaV0gPSBbbmFtZSwgcGx1Z2luXTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gIH1cblxuICBJTklULnBsdWdpblF1ZXVlLnB1c2goW25hbWUsIHBsdWdpbl0pO1xuXG4gIGlmIChJTklULmluaXRpYWxpemVkKSB7XG4gICAgd2FybihcImxpbmtpZnlqczogYWxyZWFkeSBpbml0aWFsaXplZCAtIHdpbGwgbm90IHJlZ2lzdGVyIHBsdWdpbiBcXFwiXCIuY29uY2F0KG5hbWUsIFwiXFxcIiB1bnRpbCB5b3UgbWFudWFsbHkgY2FsbCBsaW5raWZ5LmluaXQoKS4gVG8gYXZvaWQgdGhpcyB3YXJuaW5nLCBwbGVhc2UgcmVnaXN0ZXIgYWxsIHBsdWdpbnMgYmVmb3JlIGludm9raW5nIGxpbmtpZnkgdGhlIGZpcnN0IHRpbWUuXCIpKTtcbiAgfVxufVxuLyoqXG4gKiBEZXRlY3QgVVJMcyB3aXRoIHRoZSBmb2xsb3dpbmcgYWRkaXRpb25hbCBwcm90b2NvbC4gQW55dGhpbmcgZm9sbG93aW5nXG4gKiBcInByb3RvY29sOlwiIHdpbGwgYmUgY29uc2lkZXJlZCBhIGxpbmsuXG4gKiBAcGFyYW0ge3N0cmluZ30gcHJvdG9jb2xcbiAqL1xuXG5mdW5jdGlvbiByZWdpc3RlckN1c3RvbVByb3RvY29sKHByb3RvY29sKSB7XG4gIGlmIChJTklULmluaXRpYWxpemVkKSB7XG4gICAgd2FybihcImxpbmtpZnlqczogYWxyZWFkeSBpbml0aWFsaXplZCAtIHdpbGwgbm90IHJlZ2lzdGVyIGN1c3RvbSBwcm90b2NvbCBcXFwiXCIuY29uY2F0KHByb3RvY29sLCBcIlxcXCIgdW50aWwgeW91IG1hbnVhbGx5IGNhbGwgbGlua2lmeS5pbml0KCkuIFRvIGF2b2lkIHRoaXMgd2FybmluZywgcGxlYXNlIHJlZ2lzdGVyIGFsbCBjdXN0b20gcHJvdG9jb2xzIGJlZm9yZSBpbnZva2luZyBsaW5raWZ5IHRoZSBmaXJzdCB0aW1lLlwiKSk7XG4gIH1cblxuICBpZiAoIS9eW2Etel0rJC8udGVzdChwcm90b2NvbCkpIHtcbiAgICB0aHJvdyBFcnJvcignbGlua2lmeWpzIC0gcHJvdG9jb2xzIGNvbnRhaW5pbmcgY2hhcmFjdGVycyBvdGhlciB0aGFuIGEgLSB6IGFyZSBub3Qgc3VwcG9ydGVkJyk7XG4gIH1cblxuICBJTklULmN1c3RvbVByb3RvY29scy5wdXNoKHByb3RvY29sKTtcbn1cbi8qKlxuICogSW5pdGlhbGl6ZSB0aGUgbGlua2lmeSBzdGF0ZSBtYWNoaW5lLiBDYWxsZWQgYXV0b21hdGljYWxseSB0aGUgZmlyc3QgdGltZVxuICogbGlua2lmeSBpcyBjYWxsZWQgb24gYSBzdHJpbmcsIGJ1dCBtYXkgYmUgY2FsbGVkIG1hbnVhbGx5IGFzIHdlbGwuXG4gKi9cblxuZnVuY3Rpb24gaW5pdCgpIHtcbiAgLy8gSW5pdGlhbGl6ZSBzdGF0ZSBtYWNoaW5lc1xuICBJTklULnNjYW5uZXIgPSB7XG4gICAgc3RhcnQ6IGluaXQkMihJTklULmN1c3RvbVByb3RvY29scyksXG4gICAgdG9rZW5zOiB0ZXh0XG4gIH07XG4gIElOSVQucGFyc2VyID0ge1xuICAgIHN0YXJ0OiBpbml0JDEoKSxcbiAgICB0b2tlbnM6IG11bHRpXG4gIH07XG4gIHZhciB1dGlscyA9IHtcbiAgICBjcmVhdGVUb2tlbkNsYXNzOiBjcmVhdGVUb2tlbkNsYXNzXG4gIH07IC8vIEluaXRpYWxpemUgcGx1Z2luc1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgSU5JVC5wbHVnaW5RdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgIElOSVQucGx1Z2luUXVldWVbaV1bMV0oe1xuICAgICAgc2Nhbm5lcjogSU5JVC5zY2FubmVyLFxuICAgICAgcGFyc2VyOiBJTklULnBhcnNlcixcbiAgICAgIHV0aWxzOiB1dGlsc1xuICAgIH0pO1xuICB9XG5cbiAgSU5JVC5pbml0aWFsaXplZCA9IHRydWU7XG59XG4vKipcblx0Q29udmVydHMgYSBzdHJpbmcgaW50byB0b2tlbnMgdGhhdCByZXByZXNlbnQgbGlua2FibGUgYW5kIG5vbi1saW5rYWJsZSBiaXRzXG5cdEBwYXJhbSB7c3RyaW5nfSBzdHJcblx0QHJldHVybiB7QXJyYXk8TXVsdGlUb2tlbj59IHRva2Vuc1xuKi9cblxuZnVuY3Rpb24gdG9rZW5pemUoc3RyKSB7XG4gIGlmICghSU5JVC5pbml0aWFsaXplZCkge1xuICAgIGluaXQoKTtcbiAgfVxuXG4gIHJldHVybiBydW4oSU5JVC5wYXJzZXIuc3RhcnQsIHN0ciwgcnVuJDEoSU5JVC5zY2FubmVyLnN0YXJ0LCBzdHIpKTtcbn1cbi8qKlxuXHRSZXR1cm5zIGEgbGlzdCBvZiBsaW5rYWJsZSBpdGVtcyBpbiB0aGUgZ2l2ZW4gc3RyaW5nLlxuXHRAcGFyYW0ge3N0cmluZ30gc3RyIHN0cmluZyB0byBmaW5kIGxpbmtzIGluXG5cdEBwYXJhbSB7c3RyaW5nfSB0eXBlIChvcHRpb25hbCkgb25seSBmaW5kIGxpbmtzIG9mIGEgc3BlY2lmaWMgdHlwZSwgZS5nLixcblx0J3VybCcgb3IgJ2VtYWlsJ1xuKi9cblxuZnVuY3Rpb24gZmluZChzdHIpIHtcbiAgdmFyIHR5cGUgPSBhcmd1bWVudHMubGVuZ3RoID4gMSAmJiBhcmd1bWVudHNbMV0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1sxXSA6IG51bGw7XG4gIHZhciB0b2tlbnMgPSB0b2tlbml6ZShzdHIpO1xuICB2YXIgZmlsdGVyZWQgPSBbXTtcblxuICBmb3IgKHZhciBpID0gMDsgaSA8IHRva2Vucy5sZW5ndGg7IGkrKykge1xuICAgIHZhciB0b2tlbiA9IHRva2Vuc1tpXTtcblxuICAgIGlmICh0b2tlbi5pc0xpbmsgJiYgKCF0eXBlIHx8IHRva2VuLnQgPT09IHR5cGUpKSB7XG4gICAgICBmaWx0ZXJlZC5wdXNoKHRva2VuLnRvT2JqZWN0KCkpO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiBmaWx0ZXJlZDtcbn1cbi8qKlxuICogSXMgdGhlIGdpdmVuIHN0cmluZyB2YWxpZCBsaW5rYWJsZSB0ZXh0IG9mIHNvbWUgc29ydC4gTm90ZSB0aGF0IHRoaXMgZG9lcyBub3RcbiAqIHRyaW0gdGhlIHRleHQgZm9yIHlvdS5cbiAqXG4gKiBPcHRpb25hbGx5IHBhc3MgaW4gYSBzZWNvbmQgYHR5cGVgIHBhcmFtLCB3aGljaCBpcyB0aGUgdHlwZSBvZiBsaW5rIHRvIHRlc3RcbiAqIGZvci5cbiAqXG4gKiBGb3IgZXhhbXBsZSxcbiAqXG4gKiAgICAgbGlua2lmeS50ZXN0KHN0ciwgJ2VtYWlsJyk7XG4gKlxuICogUmV0dXJucyBgdHJ1ZWAgaWYgc3RyIGlzIGEgdmFsaWQgZW1haWwuXG4gKiBAcGFyYW0ge3N0cmluZ30gc3RyIHN0cmluZyB0byB0ZXN0IGZvciBsaW5rc1xuICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlXSBvcHRpb25hbCBzcGVjaWZpYyBsaW5rIHR5cGUgdG8gbG9vayBmb3JcbiAqIEByZXR1cm5zIGJvb2xlYW4gdHJ1ZS9mYWxzZVxuICovXG5cbmZ1bmN0aW9uIHRlc3Qoc3RyKSB7XG4gIHZhciB0eXBlID0gYXJndW1lbnRzLmxlbmd0aCA+IDEgJiYgYXJndW1lbnRzWzFdICE9PSB1bmRlZmluZWQgPyBhcmd1bWVudHNbMV0gOiBudWxsO1xuICB2YXIgdG9rZW5zID0gdG9rZW5pemUoc3RyKTtcbiAgcmV0dXJuIHRva2Vucy5sZW5ndGggPT09IDEgJiYgdG9rZW5zWzBdLmlzTGluayAmJiAoIXR5cGUgfHwgdG9rZW5zWzBdLnQgPT09IHR5cGUpO1xufVxuXG5leHBvcnRzLmZpbmQgPSBmaW5kO1xuZXhwb3J0cy5pbml0ID0gaW5pdDtcbmV4cG9ydHMub3B0aW9ucyA9IG9wdGlvbnM7XG5leHBvcnRzLnJlZ2lzdGVyQ3VzdG9tUHJvdG9jb2wgPSByZWdpc3RlckN1c3RvbVByb3RvY29sO1xuZXhwb3J0cy5yZWdpc3RlclBsdWdpbiA9IHJlZ2lzdGVyUGx1Z2luO1xuZXhwb3J0cy5yZXNldCA9IHJlc2V0O1xuZXhwb3J0cy50ZXN0ID0gdGVzdDtcbmV4cG9ydHMudG9rZW5pemUgPSB0b2tlbml6ZTtcbiIsIi8qKlxuICogSGVscGVycy5cbiAqL1xuXG52YXIgcyA9IDEwMDA7XG52YXIgbSA9IHMgKiA2MDtcbnZhciBoID0gbSAqIDYwO1xudmFyIGQgPSBoICogMjQ7XG52YXIgdyA9IGQgKiA3O1xudmFyIHkgPSBkICogMzY1LjI1O1xuXG4vKipcbiAqIFBhcnNlIG9yIGZvcm1hdCB0aGUgZ2l2ZW4gYHZhbGAuXG4gKlxuICogT3B0aW9uczpcbiAqXG4gKiAgLSBgbG9uZ2AgdmVyYm9zZSBmb3JtYXR0aW5nIFtmYWxzZV1cbiAqXG4gKiBAcGFyYW0ge1N0cmluZ3xOdW1iZXJ9IHZhbFxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxuICogQHRocm93cyB7RXJyb3J9IHRocm93IGFuIGVycm9yIGlmIHZhbCBpcyBub3QgYSBub24tZW1wdHkgc3RyaW5nIG9yIGEgbnVtYmVyXG4gKiBAcmV0dXJuIHtTdHJpbmd8TnVtYmVyfVxuICogQGFwaSBwdWJsaWNcbiAqL1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKHZhbCwgb3B0aW9ucykge1xuICBvcHRpb25zID0gb3B0aW9ucyB8fCB7fTtcbiAgdmFyIHR5cGUgPSB0eXBlb2YgdmFsO1xuICBpZiAodHlwZSA9PT0gJ3N0cmluZycgJiYgdmFsLmxlbmd0aCA+IDApIHtcbiAgICByZXR1cm4gcGFyc2UodmFsKTtcbiAgfSBlbHNlIGlmICh0eXBlID09PSAnbnVtYmVyJyAmJiBpc0Zpbml0ZSh2YWwpKSB7XG4gICAgcmV0dXJuIG9wdGlvbnMubG9uZyA/IGZtdExvbmcodmFsKSA6IGZtdFNob3J0KHZhbCk7XG4gIH1cbiAgdGhyb3cgbmV3IEVycm9yKFxuICAgICd2YWwgaXMgbm90IGEgbm9uLWVtcHR5IHN0cmluZyBvciBhIHZhbGlkIG51bWJlci4gdmFsPScgK1xuICAgICAgSlNPTi5zdHJpbmdpZnkodmFsKVxuICApO1xufTtcblxuLyoqXG4gKiBQYXJzZSB0aGUgZ2l2ZW4gYHN0cmAgYW5kIHJldHVybiBtaWxsaXNlY29uZHMuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHN0clxuICogQHJldHVybiB7TnVtYmVyfVxuICogQGFwaSBwcml2YXRlXG4gKi9cblxuZnVuY3Rpb24gcGFyc2Uoc3RyKSB7XG4gIHN0ciA9IFN0cmluZyhzdHIpO1xuICBpZiAoc3RyLmxlbmd0aCA+IDEwMCkge1xuICAgIHJldHVybjtcbiAgfVxuICB2YXIgbWF0Y2ggPSAvXigtPyg/OlxcZCspP1xcLj9cXGQrKSAqKG1pbGxpc2Vjb25kcz98bXNlY3M/fG1zfHNlY29uZHM/fHNlY3M/fHN8bWludXRlcz98bWlucz98bXxob3Vycz98aHJzP3xofGRheXM/fGR8d2Vla3M/fHd8eWVhcnM/fHlycz98eSk/JC9pLmV4ZWMoXG4gICAgc3RyXG4gICk7XG4gIGlmICghbWF0Y2gpIHtcbiAgICByZXR1cm47XG4gIH1cbiAgdmFyIG4gPSBwYXJzZUZsb2F0KG1hdGNoWzFdKTtcbiAgdmFyIHR5cGUgPSAobWF0Y2hbMl0gfHwgJ21zJykudG9Mb3dlckNhc2UoKTtcbiAgc3dpdGNoICh0eXBlKSB7XG4gICAgY2FzZSAneWVhcnMnOlxuICAgIGNhc2UgJ3llYXInOlxuICAgIGNhc2UgJ3lycyc6XG4gICAgY2FzZSAneXInOlxuICAgIGNhc2UgJ3knOlxuICAgICAgcmV0dXJuIG4gKiB5O1xuICAgIGNhc2UgJ3dlZWtzJzpcbiAgICBjYXNlICd3ZWVrJzpcbiAgICBjYXNlICd3JzpcbiAgICAgIHJldHVybiBuICogdztcbiAgICBjYXNlICdkYXlzJzpcbiAgICBjYXNlICdkYXknOlxuICAgIGNhc2UgJ2QnOlxuICAgICAgcmV0dXJuIG4gKiBkO1xuICAgIGNhc2UgJ2hvdXJzJzpcbiAgICBjYXNlICdob3VyJzpcbiAgICBjYXNlICdocnMnOlxuICAgIGNhc2UgJ2hyJzpcbiAgICBjYXNlICdoJzpcbiAgICAgIHJldHVybiBuICogaDtcbiAgICBjYXNlICdtaW51dGVzJzpcbiAgICBjYXNlICdtaW51dGUnOlxuICAgIGNhc2UgJ21pbnMnOlxuICAgIGNhc2UgJ21pbic6XG4gICAgY2FzZSAnbSc6XG4gICAgICByZXR1cm4gbiAqIG07XG4gICAgY2FzZSAnc2Vjb25kcyc6XG4gICAgY2FzZSAnc2Vjb25kJzpcbiAgICBjYXNlICdzZWNzJzpcbiAgICBjYXNlICdzZWMnOlxuICAgIGNhc2UgJ3MnOlxuICAgICAgcmV0dXJuIG4gKiBzO1xuICAgIGNhc2UgJ21pbGxpc2Vjb25kcyc6XG4gICAgY2FzZSAnbWlsbGlzZWNvbmQnOlxuICAgIGNhc2UgJ21zZWNzJzpcbiAgICBjYXNlICdtc2VjJzpcbiAgICBjYXNlICdtcyc6XG4gICAgICByZXR1cm4gbjtcbiAgICBkZWZhdWx0OlxuICAgICAgcmV0dXJuIHVuZGVmaW5lZDtcbiAgfVxufVxuXG4vKipcbiAqIFNob3J0IGZvcm1hdCBmb3IgYG1zYC5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbXNcbiAqIEByZXR1cm4ge1N0cmluZ31cbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbmZ1bmN0aW9uIGZtdFNob3J0KG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIGQpICsgJ2QnO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIE1hdGgucm91bmQobXMgLyBoKSArICdoJztcbiAgfVxuICBpZiAobXNBYnMgPj0gbSkge1xuICAgIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbSkgKyAnbSc7XG4gIH1cbiAgaWYgKG1zQWJzID49IHMpIHtcbiAgICByZXR1cm4gTWF0aC5yb3VuZChtcyAvIHMpICsgJ3MnO1xuICB9XG4gIHJldHVybiBtcyArICdtcyc7XG59XG5cbi8qKlxuICogTG9uZyBmb3JtYXQgZm9yIGBtc2AuXG4gKlxuICogQHBhcmFtIHtOdW1iZXJ9IG1zXG4gKiBAcmV0dXJuIHtTdHJpbmd9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5mdW5jdGlvbiBmbXRMb25nKG1zKSB7XG4gIHZhciBtc0FicyA9IE1hdGguYWJzKG1zKTtcbiAgaWYgKG1zQWJzID49IGQpIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgZCwgJ2RheScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBoKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIGgsICdob3VyJyk7XG4gIH1cbiAgaWYgKG1zQWJzID49IG0pIHtcbiAgICByZXR1cm4gcGx1cmFsKG1zLCBtc0FicywgbSwgJ21pbnV0ZScpO1xuICB9XG4gIGlmIChtc0FicyA+PSBzKSB7XG4gICAgcmV0dXJuIHBsdXJhbChtcywgbXNBYnMsIHMsICdzZWNvbmQnKTtcbiAgfVxuICByZXR1cm4gbXMgKyAnIG1zJztcbn1cblxuLyoqXG4gKiBQbHVyYWxpemF0aW9uIGhlbHBlci5cbiAqL1xuXG5mdW5jdGlvbiBwbHVyYWwobXMsIG1zQWJzLCBuLCBuYW1lKSB7XG4gIHZhciBpc1BsdXJhbCA9IG1zQWJzID49IG4gKiAxLjU7XG4gIHJldHVybiBNYXRoLnJvdW5kKG1zIC8gbikgKyAnICcgKyBuYW1lICsgKGlzUGx1cmFsID8gJ3MnIDogJycpO1xufVxuIiwiLyoqXG4gKiBDb21waWxlcyBhIHF1ZXJ5c3RyaW5nXG4gKiBSZXR1cm5zIHN0cmluZyByZXByZXNlbnRhdGlvbiBvZiB0aGUgb2JqZWN0XG4gKlxuICogQHBhcmFtIHtPYmplY3R9XG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmVuY29kZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgdmFyIHN0ciA9ICcnO1xuXG4gIGZvciAodmFyIGkgaW4gb2JqKSB7XG4gICAgaWYgKG9iai5oYXNPd25Qcm9wZXJ0eShpKSkge1xuICAgICAgaWYgKHN0ci5sZW5ndGgpIHN0ciArPSAnJic7XG4gICAgICBzdHIgKz0gZW5jb2RlVVJJQ29tcG9uZW50KGkpICsgJz0nICsgZW5jb2RlVVJJQ29tcG9uZW50KG9ialtpXSk7XG4gICAgfVxuICB9XG5cbiAgcmV0dXJuIHN0cjtcbn07XG5cbi8qKlxuICogUGFyc2VzIGEgc2ltcGxlIHF1ZXJ5c3RyaW5nIGludG8gYW4gb2JqZWN0XG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHFzXG4gKiBAYXBpIHByaXZhdGVcbiAqL1xuXG5leHBvcnRzLmRlY29kZSA9IGZ1bmN0aW9uKHFzKXtcbiAgdmFyIHFyeSA9IHt9O1xuICB2YXIgcGFpcnMgPSBxcy5zcGxpdCgnJicpO1xuICBmb3IgKHZhciBpID0gMCwgbCA9IHBhaXJzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgIHZhciBwYWlyID0gcGFpcnNbaV0uc3BsaXQoJz0nKTtcbiAgICBxcnlbZGVjb2RlVVJJQ29tcG9uZW50KHBhaXJbMF0pXSA9IGRlY29kZVVSSUNvbXBvbmVudChwYWlyWzFdKTtcbiAgfVxuICByZXR1cm4gcXJ5O1xufTtcbiIsIi8qKlxuICogUGFyc2VzIGFuIFVSSVxuICpcbiAqIEBhdXRob3IgU3RldmVuIExldml0aGFuIDxzdGV2ZW5sZXZpdGhhbi5jb20+IChNSVQgbGljZW5zZSlcbiAqIEBhcGkgcHJpdmF0ZVxuICovXG5cbnZhciByZSA9IC9eKD86KD8hW146QF0rOlteOkBcXC9dKkApKGh0dHB8aHR0cHN8d3N8d3NzKTpcXC9cXC8pPygoPzooKFteOkBdKikoPzo6KFteOkBdKikpPyk/QCk/KCg/OlthLWYwLTldezAsNH06KXsyLDd9W2EtZjAtOV17MCw0fXxbXjpcXC8/I10qKSg/OjooXFxkKikpPykoKChcXC8oPzpbXj8jXSg/IVtePyNcXC9dKlxcLltePyNcXC8uXSsoPzpbPyNdfCQpKSkqXFwvPyk/KFtePyNcXC9dKikpKD86XFw/KFteI10qKSk/KD86IyguKikpPykvO1xuXG52YXIgcGFydHMgPSBbXG4gICAgJ3NvdXJjZScsICdwcm90b2NvbCcsICdhdXRob3JpdHknLCAndXNlckluZm8nLCAndXNlcicsICdwYXNzd29yZCcsICdob3N0JywgJ3BvcnQnLCAncmVsYXRpdmUnLCAncGF0aCcsICdkaXJlY3RvcnknLCAnZmlsZScsICdxdWVyeScsICdhbmNob3InXG5dO1xuXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uIHBhcnNldXJpKHN0cikge1xuICAgIHZhciBzcmMgPSBzdHIsXG4gICAgICAgIGIgPSBzdHIuaW5kZXhPZignWycpLFxuICAgICAgICBlID0gc3RyLmluZGV4T2YoJ10nKTtcblxuICAgIGlmIChiICE9IC0xICYmIGUgIT0gLTEpIHtcbiAgICAgICAgc3RyID0gc3RyLnN1YnN0cmluZygwLCBiKSArIHN0ci5zdWJzdHJpbmcoYiwgZSkucmVwbGFjZSgvOi9nLCAnOycpICsgc3RyLnN1YnN0cmluZyhlLCBzdHIubGVuZ3RoKTtcbiAgICB9XG5cbiAgICB2YXIgbSA9IHJlLmV4ZWMoc3RyIHx8ICcnKSxcbiAgICAgICAgdXJpID0ge30sXG4gICAgICAgIGkgPSAxNDtcblxuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdXJpW3BhcnRzW2ldXSA9IG1baV0gfHwgJyc7XG4gICAgfVxuXG4gICAgaWYgKGIgIT0gLTEgJiYgZSAhPSAtMSkge1xuICAgICAgICB1cmkuc291cmNlID0gc3JjO1xuICAgICAgICB1cmkuaG9zdCA9IHVyaS5ob3N0LnN1YnN0cmluZygxLCB1cmkuaG9zdC5sZW5ndGggLSAxKS5yZXBsYWNlKC87L2csICc6Jyk7XG4gICAgICAgIHVyaS5hdXRob3JpdHkgPSB1cmkuYXV0aG9yaXR5LnJlcGxhY2UoJ1snLCAnJykucmVwbGFjZSgnXScsICcnKS5yZXBsYWNlKC87L2csICc6Jyk7XG4gICAgICAgIHVyaS5pcHY2dXJpID0gdHJ1ZTtcbiAgICB9XG5cbiAgICB1cmkucGF0aE5hbWVzID0gcGF0aE5hbWVzKHVyaSwgdXJpWydwYXRoJ10pO1xuICAgIHVyaS5xdWVyeUtleSA9IHF1ZXJ5S2V5KHVyaSwgdXJpWydxdWVyeSddKTtcblxuICAgIHJldHVybiB1cmk7XG59O1xuXG5mdW5jdGlvbiBwYXRoTmFtZXMob2JqLCBwYXRoKSB7XG4gICAgdmFyIHJlZ3ggPSAvXFwvezIsOX0vZyxcbiAgICAgICAgbmFtZXMgPSBwYXRoLnJlcGxhY2UocmVneCwgXCIvXCIpLnNwbGl0KFwiL1wiKTtcblxuICAgIGlmIChwYXRoLnN1YnN0cigwLCAxKSA9PSAnLycgfHwgcGF0aC5sZW5ndGggPT09IDApIHtcbiAgICAgICAgbmFtZXMuc3BsaWNlKDAsIDEpO1xuICAgIH1cbiAgICBpZiAocGF0aC5zdWJzdHIocGF0aC5sZW5ndGggLSAxLCAxKSA9PSAnLycpIHtcbiAgICAgICAgbmFtZXMuc3BsaWNlKG5hbWVzLmxlbmd0aCAtIDEsIDEpO1xuICAgIH1cblxuICAgIHJldHVybiBuYW1lcztcbn1cblxuZnVuY3Rpb24gcXVlcnlLZXkodXJpLCBxdWVyeSkge1xuICAgIHZhciBkYXRhID0ge307XG5cbiAgICBxdWVyeS5yZXBsYWNlKC8oPzpefCYpKFteJj1dKik9PyhbXiZdKikvZywgZnVuY3Rpb24gKCQwLCAkMSwgJDIpIHtcbiAgICAgICAgaWYgKCQxKSB7XG4gICAgICAgICAgICBkYXRhWyQxXSA9ICQyO1xuICAgICAgICB9XG4gICAgfSk7XG5cbiAgICByZXR1cm4gZGF0YTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5pbyA9IGV4cG9ydHMuU29ja2V0ID0gZXhwb3J0cy5NYW5hZ2VyID0gZXhwb3J0cy5wcm90b2NvbCA9IHZvaWQgMDtcbmNvbnN0IHVybF8xID0gcmVxdWlyZShcIi4vdXJsXCIpO1xuY29uc3QgbWFuYWdlcl8xID0gcmVxdWlyZShcIi4vbWFuYWdlclwiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwic29ja2V0LmlvLWNsaWVudFwiKTtcbi8qKlxuICogTW9kdWxlIGV4cG9ydHMuXG4gKi9cbm1vZHVsZS5leHBvcnRzID0gZXhwb3J0cyA9IGxvb2t1cDtcbi8qKlxuICogTWFuYWdlcnMgY2FjaGUuXG4gKi9cbmNvbnN0IGNhY2hlID0gKGV4cG9ydHMubWFuYWdlcnMgPSB7fSk7XG5mdW5jdGlvbiBsb29rdXAodXJpLCBvcHRzKSB7XG4gICAgaWYgKHR5cGVvZiB1cmkgPT09IFwib2JqZWN0XCIpIHtcbiAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgdXJpID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICBjb25zdCBwYXJzZWQgPSB1cmxfMS51cmwodXJpLCBvcHRzLnBhdGggfHwgXCIvc29ja2V0LmlvXCIpO1xuICAgIGNvbnN0IHNvdXJjZSA9IHBhcnNlZC5zb3VyY2U7XG4gICAgY29uc3QgaWQgPSBwYXJzZWQuaWQ7XG4gICAgY29uc3QgcGF0aCA9IHBhcnNlZC5wYXRoO1xuICAgIGNvbnN0IHNhbWVOYW1lc3BhY2UgPSBjYWNoZVtpZF0gJiYgcGF0aCBpbiBjYWNoZVtpZF1bXCJuc3BzXCJdO1xuICAgIGNvbnN0IG5ld0Nvbm5lY3Rpb24gPSBvcHRzLmZvcmNlTmV3IHx8XG4gICAgICAgIG9wdHNbXCJmb3JjZSBuZXcgY29ubmVjdGlvblwiXSB8fFxuICAgICAgICBmYWxzZSA9PT0gb3B0cy5tdWx0aXBsZXggfHxcbiAgICAgICAgc2FtZU5hbWVzcGFjZTtcbiAgICBsZXQgaW87XG4gICAgaWYgKG5ld0Nvbm5lY3Rpb24pIHtcbiAgICAgICAgZGVidWcoXCJpZ25vcmluZyBzb2NrZXQgY2FjaGUgZm9yICVzXCIsIHNvdXJjZSk7XG4gICAgICAgIGlvID0gbmV3IG1hbmFnZXJfMS5NYW5hZ2VyKHNvdXJjZSwgb3B0cyk7XG4gICAgfVxuICAgIGVsc2Uge1xuICAgICAgICBpZiAoIWNhY2hlW2lkXSkge1xuICAgICAgICAgICAgZGVidWcoXCJuZXcgaW8gaW5zdGFuY2UgZm9yICVzXCIsIHNvdXJjZSk7XG4gICAgICAgICAgICBjYWNoZVtpZF0gPSBuZXcgbWFuYWdlcl8xLk1hbmFnZXIoc291cmNlLCBvcHRzKTtcbiAgICAgICAgfVxuICAgICAgICBpbyA9IGNhY2hlW2lkXTtcbiAgICB9XG4gICAgaWYgKHBhcnNlZC5xdWVyeSAmJiAhb3B0cy5xdWVyeSkge1xuICAgICAgICBvcHRzLnF1ZXJ5ID0gcGFyc2VkLnF1ZXJ5S2V5O1xuICAgIH1cbiAgICByZXR1cm4gaW8uc29ja2V0KHBhcnNlZC5wYXRoLCBvcHRzKTtcbn1cbmV4cG9ydHMuaW8gPSBsb29rdXA7XG4vKipcbiAqIFByb3RvY29sIHZlcnNpb24uXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgc29ja2V0X2lvX3BhcnNlcl8xID0gcmVxdWlyZShcInNvY2tldC5pby1wYXJzZXJcIik7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJwcm90b2NvbFwiLCB7IGVudW1lcmFibGU6IHRydWUsIGdldDogZnVuY3Rpb24gKCkgeyByZXR1cm4gc29ja2V0X2lvX3BhcnNlcl8xLnByb3RvY29sOyB9IH0pO1xuLyoqXG4gKiBgY29ubmVjdGAuXG4gKlxuICogQHBhcmFtIHtTdHJpbmd9IHVyaVxuICogQHB1YmxpY1xuICovXG5leHBvcnRzLmNvbm5lY3QgPSBsb29rdXA7XG4vKipcbiAqIEV4cG9zZSBjb25zdHJ1Y3RvcnMgZm9yIHN0YW5kYWxvbmUgYnVpbGQuXG4gKlxuICogQHB1YmxpY1xuICovXG52YXIgbWFuYWdlcl8yID0gcmVxdWlyZShcIi4vbWFuYWdlclwiKTtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIk1hbmFnZXJcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGZ1bmN0aW9uICgpIHsgcmV0dXJuIG1hbmFnZXJfMi5NYW5hZ2VyOyB9IH0pO1xudmFyIHNvY2tldF8xID0gcmVxdWlyZShcIi4vc29ja2V0XCIpO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiU29ja2V0XCIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbiAoKSB7IHJldHVybiBzb2NrZXRfMS5Tb2NrZXQ7IH0gfSk7XG5leHBvcnRzLmRlZmF1bHQgPSBsb29rdXA7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuTWFuYWdlciA9IHZvaWQgMDtcbmNvbnN0IGVpbyA9IHJlcXVpcmUoXCJlbmdpbmUuaW8tY2xpZW50XCIpO1xuY29uc3Qgc29ja2V0XzEgPSByZXF1aXJlKFwiLi9zb2NrZXRcIik7XG5jb25zdCBwYXJzZXIgPSByZXF1aXJlKFwic29ja2V0LmlvLXBhcnNlclwiKTtcbmNvbnN0IG9uXzEgPSByZXF1aXJlKFwiLi9vblwiKTtcbmNvbnN0IEJhY2tvZmYgPSByZXF1aXJlKFwiYmFja28yXCIpO1xuY29uc3QgdHlwZWRfZXZlbnRzXzEgPSByZXF1aXJlKFwiLi90eXBlZC1ldmVudHNcIik7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcInNvY2tldC5pby1jbGllbnQ6bWFuYWdlclwiKTtcbmNsYXNzIE1hbmFnZXIgZXh0ZW5kcyB0eXBlZF9ldmVudHNfMS5TdHJpY3RFdmVudEVtaXR0ZXIge1xuICAgIGNvbnN0cnVjdG9yKHVyaSwgb3B0cykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLm5zcHMgPSB7fTtcbiAgICAgICAgdGhpcy5zdWJzID0gW107XG4gICAgICAgIGlmICh1cmkgJiYgXCJvYmplY3RcIiA9PT0gdHlwZW9mIHVyaSkge1xuICAgICAgICAgICAgb3B0cyA9IHVyaTtcbiAgICAgICAgICAgIHVyaSA9IHVuZGVmaW5lZDtcbiAgICAgICAgfVxuICAgICAgICBvcHRzID0gb3B0cyB8fCB7fTtcbiAgICAgICAgb3B0cy5wYXRoID0gb3B0cy5wYXRoIHx8IFwiL3NvY2tldC5pb1wiO1xuICAgICAgICB0aGlzLm9wdHMgPSBvcHRzO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbihvcHRzLnJlY29ubmVjdGlvbiAhPT0gZmFsc2UpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkF0dGVtcHRzKG9wdHMucmVjb25uZWN0aW9uQXR0ZW1wdHMgfHwgSW5maW5pdHkpO1xuICAgICAgICB0aGlzLnJlY29ubmVjdGlvbkRlbGF5KG9wdHMucmVjb25uZWN0aW9uRGVsYXkgfHwgMTAwMCk7XG4gICAgICAgIHRoaXMucmVjb25uZWN0aW9uRGVsYXlNYXgob3B0cy5yZWNvbm5lY3Rpb25EZWxheU1heCB8fCA1MDAwKTtcbiAgICAgICAgdGhpcy5yYW5kb21pemF0aW9uRmFjdG9yKG9wdHMucmFuZG9taXphdGlvbkZhY3RvciB8fCAwLjUpO1xuICAgICAgICB0aGlzLmJhY2tvZmYgPSBuZXcgQmFja29mZih7XG4gICAgICAgICAgICBtaW46IHRoaXMucmVjb25uZWN0aW9uRGVsYXkoKSxcbiAgICAgICAgICAgIG1heDogdGhpcy5yZWNvbm5lY3Rpb25EZWxheU1heCgpLFxuICAgICAgICAgICAgaml0dGVyOiB0aGlzLnJhbmRvbWl6YXRpb25GYWN0b3IoKSxcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMudGltZW91dChudWxsID09IG9wdHMudGltZW91dCA/IDIwMDAwIDogb3B0cy50aW1lb3V0KTtcbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgIHRoaXMudXJpID0gdXJpO1xuICAgICAgICBjb25zdCBfcGFyc2VyID0gb3B0cy5wYXJzZXIgfHwgcGFyc2VyO1xuICAgICAgICB0aGlzLmVuY29kZXIgPSBuZXcgX3BhcnNlci5FbmNvZGVyKCk7XG4gICAgICAgIHRoaXMuZGVjb2RlciA9IG5ldyBfcGFyc2VyLkRlY29kZXIoKTtcbiAgICAgICAgdGhpcy5fYXV0b0Nvbm5lY3QgPSBvcHRzLmF1dG9Db25uZWN0ICE9PSBmYWxzZTtcbiAgICAgICAgaWYgKHRoaXMuX2F1dG9Db25uZWN0KVxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbih2KSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb247XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbiA9ICEhdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIHJlY29ubmVjdGlvbkF0dGVtcHRzKHYpIHtcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yZWNvbm5lY3Rpb25BdHRlbXB0cztcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMgPSB2O1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVjb25uZWN0aW9uRGVsYXkodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXk7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5ID0gdjtcbiAgICAgICAgKF9hID0gdGhpcy5iYWNrb2ZmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0TWluKHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmFuZG9taXphdGlvbkZhY3Rvcih2KSB7XG4gICAgICAgIHZhciBfYTtcbiAgICAgICAgaWYgKHYgPT09IHVuZGVmaW5lZClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yO1xuICAgICAgICB0aGlzLl9yYW5kb21pemF0aW9uRmFjdG9yID0gdjtcbiAgICAgICAgKF9hID0gdGhpcy5iYWNrb2ZmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0Sml0dGVyKHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgcmVjb25uZWN0aW9uRGVsYXlNYXgodikge1xuICAgICAgICB2YXIgX2E7XG4gICAgICAgIGlmICh2ID09PSB1bmRlZmluZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcy5fcmVjb25uZWN0aW9uRGVsYXlNYXg7XG4gICAgICAgIHRoaXMuX3JlY29ubmVjdGlvbkRlbGF5TWF4ID0gdjtcbiAgICAgICAgKF9hID0gdGhpcy5iYWNrb2ZmKSA9PT0gbnVsbCB8fCBfYSA9PT0gdm9pZCAwID8gdm9pZCAwIDogX2Euc2V0TWF4KHYpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgdGltZW91dCh2KSB7XG4gICAgICAgIGlmICghYXJndW1lbnRzLmxlbmd0aClcbiAgICAgICAgICAgIHJldHVybiB0aGlzLl90aW1lb3V0O1xuICAgICAgICB0aGlzLl90aW1lb3V0ID0gdjtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN0YXJ0cyB0cnlpbmcgdG8gcmVjb25uZWN0IGlmIHJlY29ubmVjdGlvbiBpcyBlbmFibGVkIGFuZCB3ZSBoYXZlIG5vdFxuICAgICAqIHN0YXJ0ZWQgcmVjb25uZWN0aW5nIHlldFxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBtYXliZVJlY29ubmVjdE9uT3BlbigpIHtcbiAgICAgICAgLy8gT25seSB0cnkgdG8gcmVjb25uZWN0IGlmIGl0J3MgdGhlIGZpcnN0IHRpbWUgd2UncmUgY29ubmVjdGluZ1xuICAgICAgICBpZiAoIXRoaXMuX3JlY29ubmVjdGluZyAmJlxuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW9uICYmXG4gICAgICAgICAgICB0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPT09IDApIHtcbiAgICAgICAgICAgIC8vIGtlZXBzIHJlY29ubmVjdGlvbiBmcm9tIGZpcmluZyB0d2ljZSBmb3IgdGhlIHNhbWUgcmVjb25uZWN0aW9uIGxvb3BcbiAgICAgICAgICAgIHRoaXMucmVjb25uZWN0KCk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgLyoqXG4gICAgICogU2V0cyB0aGUgY3VycmVudCB0cmFuc3BvcnQgYHNvY2tldGAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge0Z1bmN0aW9ufSBmbiAtIG9wdGlvbmFsLCBjYWxsYmFja1xuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBvcGVuKGZuKSB7XG4gICAgICAgIGRlYnVnKFwicmVhZHlTdGF0ZSAlc1wiLCB0aGlzLl9yZWFkeVN0YXRlKTtcbiAgICAgICAgaWYgKH50aGlzLl9yZWFkeVN0YXRlLmluZGV4T2YoXCJvcGVuXCIpKVxuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIGRlYnVnKFwib3BlbmluZyAlc1wiLCB0aGlzLnVyaSk7XG4gICAgICAgIHRoaXMuZW5naW5lID0gZWlvKHRoaXMudXJpLCB0aGlzLm9wdHMpO1xuICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcIm9wZW5pbmdcIjtcbiAgICAgICAgdGhpcy5za2lwUmVjb25uZWN0ID0gZmFsc2U7XG4gICAgICAgIC8vIGVtaXQgYG9wZW5gXG4gICAgICAgIGNvbnN0IG9wZW5TdWJEZXN0cm95ID0gb25fMS5vbihzb2NrZXQsIFwib3BlblwiLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBzZWxmLm9ub3BlbigpO1xuICAgICAgICAgICAgZm4gJiYgZm4oKTtcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIGVtaXQgYGVycm9yYFxuICAgICAgICBjb25zdCBlcnJvclN1YiA9IG9uXzEub24oc29ja2V0LCBcImVycm9yXCIsIChlcnIpID0+IHtcbiAgICAgICAgICAgIGRlYnVnKFwiZXJyb3JcIik7XG4gICAgICAgICAgICBzZWxmLmNsZWFudXAoKTtcbiAgICAgICAgICAgIHNlbGYuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgaWYgKGZuKSB7XG4gICAgICAgICAgICAgICAgZm4oZXJyKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgICAgIC8vIE9ubHkgZG8gdGhpcyBpZiB0aGVyZSBpcyBubyBmbiB0byBoYW5kbGUgdGhlIGVycm9yXG4gICAgICAgICAgICAgICAgc2VsZi5tYXliZVJlY29ubmVjdE9uT3BlbigpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgICAgaWYgKGZhbHNlICE9PSB0aGlzLl90aW1lb3V0KSB7XG4gICAgICAgICAgICBjb25zdCB0aW1lb3V0ID0gdGhpcy5fdGltZW91dDtcbiAgICAgICAgICAgIGRlYnVnKFwiY29ubmVjdCBhdHRlbXB0IHdpbGwgdGltZW91dCBhZnRlciAlZFwiLCB0aW1lb3V0KTtcbiAgICAgICAgICAgIGlmICh0aW1lb3V0ID09PSAwKSB7XG4gICAgICAgICAgICAgICAgb3BlblN1YkRlc3Ryb3koKTsgLy8gcHJldmVudHMgYSByYWNlIGNvbmRpdGlvbiB3aXRoIHRoZSAnb3BlbicgZXZlbnRcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIC8vIHNldCB0aW1lclxuICAgICAgICAgICAgY29uc3QgdGltZXIgPSBzZXRUaW1lb3V0KCgpID0+IHtcbiAgICAgICAgICAgICAgICBkZWJ1ZyhcImNvbm5lY3QgYXR0ZW1wdCB0aW1lZCBvdXQgYWZ0ZXIgJWRcIiwgdGltZW91dCk7XG4gICAgICAgICAgICAgICAgb3BlblN1YkRlc3Ryb3koKTtcbiAgICAgICAgICAgICAgICBzb2NrZXQuY2xvc2UoKTtcbiAgICAgICAgICAgICAgICBzb2NrZXQuZW1pdChcImVycm9yXCIsIG5ldyBFcnJvcihcInRpbWVvdXRcIikpO1xuICAgICAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgICAgICBpZiAodGhpcy5vcHRzLmF1dG9VbnJlZikge1xuICAgICAgICAgICAgICAgIHRpbWVyLnVucmVmKCk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICB0aGlzLnN1YnMucHVzaChmdW5jdGlvbiBzdWJEZXN0cm95KCkge1xuICAgICAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLnN1YnMucHVzaChvcGVuU3ViRGVzdHJveSk7XG4gICAgICAgIHRoaXMuc3Vicy5wdXNoKGVycm9yU3ViKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFsaWFzIGZvciBvcGVuKClcbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25uZWN0KGZuKSB7XG4gICAgICAgIHJldHVybiB0aGlzLm9wZW4oZm4pO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiB0cmFuc3BvcnQgb3Blbi5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25vcGVuKCkge1xuICAgICAgICBkZWJ1ZyhcIm9wZW5cIik7XG4gICAgICAgIC8vIGNsZWFyIG9sZCBzdWJzXG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICAvLyBtYXJrIGFzIG9wZW5cbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwib3BlblwiO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcIm9wZW5cIik7XG4gICAgICAgIC8vIGFkZCBuZXcgc3Vic1xuICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLmVuZ2luZTtcbiAgICAgICAgdGhpcy5zdWJzLnB1c2gob25fMS5vbihzb2NrZXQsIFwicGluZ1wiLCB0aGlzLm9ucGluZy5iaW5kKHRoaXMpKSwgb25fMS5vbihzb2NrZXQsIFwiZGF0YVwiLCB0aGlzLm9uZGF0YS5iaW5kKHRoaXMpKSwgb25fMS5vbihzb2NrZXQsIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLCBvbl8xLm9uKHNvY2tldCwgXCJjbG9zZVwiLCB0aGlzLm9uY2xvc2UuYmluZCh0aGlzKSksIG9uXzEub24odGhpcy5kZWNvZGVyLCBcImRlY29kZWRcIiwgdGhpcy5vbmRlY29kZWQuYmluZCh0aGlzKSkpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHBpbmcuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucGluZygpIHtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJwaW5nXCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2l0aCBkYXRhLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRhdGEoZGF0YSkge1xuICAgICAgICB0aGlzLmRlY29kZXIuYWRkKGRhdGEpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgd2hlbiBwYXJzZXIgZnVsbHkgZGVjb2RlcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25kZWNvZGVkKHBhY2tldCkge1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInBhY2tldFwiLCBwYWNrZXQpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBzb2NrZXQgZXJyb3IuXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uZXJyb3IoZXJyKSB7XG4gICAgICAgIGRlYnVnKFwiZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJlcnJvclwiLCBlcnIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDcmVhdGVzIGEgbmV3IHNvY2tldCBmb3IgdGhlIGdpdmVuIGBuc3BgLlxuICAgICAqXG4gICAgICogQHJldHVybiB7U29ja2V0fVxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBzb2NrZXQobnNwLCBvcHRzKSB7XG4gICAgICAgIGxldCBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgICAgICAgaWYgKCFzb2NrZXQpIHtcbiAgICAgICAgICAgIHNvY2tldCA9IG5ldyBzb2NrZXRfMS5Tb2NrZXQodGhpcywgbnNwLCBvcHRzKTtcbiAgICAgICAgICAgIHRoaXMubnNwc1tuc3BdID0gc29ja2V0O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBzb2NrZXQ7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc29ja2V0IGNsb3NlLlxuICAgICAqXG4gICAgICogQHBhcmFtIHNvY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgX2Rlc3Ryb3koc29ja2V0KSB7XG4gICAgICAgIGNvbnN0IG5zcHMgPSBPYmplY3Qua2V5cyh0aGlzLm5zcHMpO1xuICAgICAgICBmb3IgKGNvbnN0IG5zcCBvZiBuc3BzKSB7XG4gICAgICAgICAgICBjb25zdCBzb2NrZXQgPSB0aGlzLm5zcHNbbnNwXTtcbiAgICAgICAgICAgIGlmIChzb2NrZXQuYWN0aXZlKSB7XG4gICAgICAgICAgICAgICAgZGVidWcoXCJzb2NrZXQgJXMgaXMgc3RpbGwgYWN0aXZlLCBza2lwcGluZyBjbG9zZVwiLCBuc3ApO1xuICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICB0aGlzLl9jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBXcml0ZXMgYSBwYWNrZXQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gcGFja2V0XG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfcGFja2V0KHBhY2tldCkge1xuICAgICAgICBkZWJ1ZyhcIndyaXRpbmcgcGFja2V0ICVqXCIsIHBhY2tldCk7XG4gICAgICAgIGNvbnN0IGVuY29kZWRQYWNrZXRzID0gdGhpcy5lbmNvZGVyLmVuY29kZShwYWNrZXQpO1xuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGVuY29kZWRQYWNrZXRzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICB0aGlzLmVuZ2luZS53cml0ZShlbmNvZGVkUGFja2V0c1tpXSwgcGFja2V0Lm9wdGlvbnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFuIHVwIHRyYW5zcG9ydCBzdWJzY3JpcHRpb25zIGFuZCBwYWNrZXQgYnVmZmVyLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBjbGVhbnVwKCkge1xuICAgICAgICBkZWJ1ZyhcImNsZWFudXBcIik7XG4gICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKChzdWJEZXN0cm95KSA9PiBzdWJEZXN0cm95KCkpO1xuICAgICAgICB0aGlzLnN1YnMubGVuZ3RoID0gMDtcbiAgICAgICAgdGhpcy5kZWNvZGVyLmRlc3Ryb3koKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2xvc2UgdGhlIGN1cnJlbnQgc29ja2V0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBfY2xvc2UoKSB7XG4gICAgICAgIGRlYnVnKFwiZGlzY29ubmVjdFwiKTtcbiAgICAgICAgdGhpcy5za2lwUmVjb25uZWN0ID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIGlmIChcIm9wZW5pbmdcIiA9PT0gdGhpcy5fcmVhZHlTdGF0ZSkge1xuICAgICAgICAgICAgLy8gYG9uY2xvc2VgIHdpbGwgbm90IGZpcmUgYmVjYXVzZVxuICAgICAgICAgICAgLy8gYW4gb3BlbiBldmVudCBuZXZlciBoYXBwZW5lZFxuICAgICAgICAgICAgdGhpcy5jbGVhbnVwKCk7XG4gICAgICAgIH1cbiAgICAgICAgdGhpcy5iYWNrb2ZmLnJlc2V0KCk7XG4gICAgICAgIHRoaXMuX3JlYWR5U3RhdGUgPSBcImNsb3NlZFwiO1xuICAgICAgICBpZiAodGhpcy5lbmdpbmUpXG4gICAgICAgICAgICB0aGlzLmVuZ2luZS5jbG9zZSgpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBbGlhcyBmb3IgY2xvc2UoKVxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICByZXR1cm4gdGhpcy5fY2xvc2UoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGNsb3NlLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNsb3NlKHJlYXNvbikge1xuICAgICAgICBkZWJ1ZyhcIm9uY2xvc2VcIik7XG4gICAgICAgIHRoaXMuY2xlYW51cCgpO1xuICAgICAgICB0aGlzLmJhY2tvZmYucmVzZXQoKTtcbiAgICAgICAgdGhpcy5fcmVhZHlTdGF0ZSA9IFwiY2xvc2VkXCI7XG4gICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY2xvc2VcIiwgcmVhc29uKTtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGlvbiAmJiAhdGhpcy5za2lwUmVjb25uZWN0KSB7XG4gICAgICAgICAgICB0aGlzLnJlY29ubmVjdCgpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEF0dGVtcHQgYSByZWNvbm5lY3Rpb24uXG4gICAgICpcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHJlY29ubmVjdCgpIHtcbiAgICAgICAgaWYgKHRoaXMuX3JlY29ubmVjdGluZyB8fCB0aGlzLnNraXBSZWNvbm5lY3QpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgY29uc3Qgc2VsZiA9IHRoaXM7XG4gICAgICAgIGlmICh0aGlzLmJhY2tvZmYuYXR0ZW1wdHMgPj0gdGhpcy5fcmVjb25uZWN0aW9uQXR0ZW1wdHMpIHtcbiAgICAgICAgICAgIGRlYnVnKFwicmVjb25uZWN0IGZhaWxlZFwiKTtcbiAgICAgICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZmFpbGVkXCIpO1xuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBjb25zdCBkZWxheSA9IHRoaXMuYmFja29mZi5kdXJhdGlvbigpO1xuICAgICAgICAgICAgZGVidWcoXCJ3aWxsIHdhaXQgJWRtcyBiZWZvcmUgcmVjb25uZWN0IGF0dGVtcHRcIiwgZGVsYXkpO1xuICAgICAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gdHJ1ZTtcbiAgICAgICAgICAgIGNvbnN0IHRpbWVyID0gc2V0VGltZW91dCgoKSA9PiB7XG4gICAgICAgICAgICAgICAgaWYgKHNlbGYuc2tpcFJlY29ubmVjdClcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgIGRlYnVnKFwiYXR0ZW1wdGluZyByZWNvbm5lY3RcIik7XG4gICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfYXR0ZW1wdFwiLCBzZWxmLmJhY2tvZmYuYXR0ZW1wdHMpO1xuICAgICAgICAgICAgICAgIC8vIGNoZWNrIGFnYWluIGZvciB0aGUgY2FzZSBzb2NrZXQgY2xvc2VkIGluIGFib3ZlIGV2ZW50c1xuICAgICAgICAgICAgICAgIGlmIChzZWxmLnNraXBSZWNvbm5lY3QpXG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICBzZWxmLm9wZW4oKGVycikgPT4ge1xuICAgICAgICAgICAgICAgICAgICBpZiAoZXJyKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBkZWJ1ZyhcInJlY29ubmVjdCBhdHRlbXB0IGVycm9yXCIpO1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLnJlY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJyZWNvbm5lY3RfZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIGRlYnVnKFwicmVjb25uZWN0IHN1Y2Nlc3NcIik7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLm9ucmVjb25uZWN0KCk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH0sIGRlbGF5KTtcbiAgICAgICAgICAgIGlmICh0aGlzLm9wdHMuYXV0b1VucmVmKSB7XG4gICAgICAgICAgICAgICAgdGltZXIudW5yZWYoKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIHRoaXMuc3Vicy5wdXNoKGZ1bmN0aW9uIHN1YkRlc3Ryb3koKSB7XG4gICAgICAgICAgICAgICAgY2xlYXJUaW1lb3V0KHRpbWVyKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHN1Y2Nlc3NmdWwgcmVjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbnJlY29ubmVjdCgpIHtcbiAgICAgICAgY29uc3QgYXR0ZW1wdCA9IHRoaXMuYmFja29mZi5hdHRlbXB0cztcbiAgICAgICAgdGhpcy5fcmVjb25uZWN0aW5nID0gZmFsc2U7XG4gICAgICAgIHRoaXMuYmFja29mZi5yZXNldCgpO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcInJlY29ubmVjdFwiLCBhdHRlbXB0KTtcbiAgICB9XG59XG5leHBvcnRzLk1hbmFnZXIgPSBNYW5hZ2VyO1xuIiwiXCJ1c2Ugc3RyaWN0XCI7XG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHsgdmFsdWU6IHRydWUgfSk7XG5leHBvcnRzLm9uID0gdm9pZCAwO1xuZnVuY3Rpb24gb24ob2JqLCBldiwgZm4pIHtcbiAgICBvYmoub24oZXYsIGZuKTtcbiAgICByZXR1cm4gZnVuY3Rpb24gc3ViRGVzdHJveSgpIHtcbiAgICAgICAgb2JqLm9mZihldiwgZm4pO1xuICAgIH07XG59XG5leHBvcnRzLm9uID0gb247XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMuU29ja2V0ID0gdm9pZCAwO1xuY29uc3Qgc29ja2V0X2lvX3BhcnNlcl8xID0gcmVxdWlyZShcInNvY2tldC5pby1wYXJzZXJcIik7XG5jb25zdCBvbl8xID0gcmVxdWlyZShcIi4vb25cIik7XG5jb25zdCB0eXBlZF9ldmVudHNfMSA9IHJlcXVpcmUoXCIuL3R5cGVkLWV2ZW50c1wiKTtcbmNvbnN0IGRlYnVnID0gcmVxdWlyZShcImRlYnVnXCIpKFwic29ja2V0LmlvLWNsaWVudDpzb2NrZXRcIik7XG4vKipcbiAqIEludGVybmFsIGV2ZW50cy5cbiAqIFRoZXNlIGV2ZW50cyBjYW4ndCBiZSBlbWl0dGVkIGJ5IHRoZSB1c2VyLlxuICovXG5jb25zdCBSRVNFUlZFRF9FVkVOVFMgPSBPYmplY3QuZnJlZXplKHtcbiAgICBjb25uZWN0OiAxLFxuICAgIGNvbm5lY3RfZXJyb3I6IDEsXG4gICAgZGlzY29ubmVjdDogMSxcbiAgICBkaXNjb25uZWN0aW5nOiAxLFxuICAgIC8vIEV2ZW50RW1pdHRlciByZXNlcnZlZCBldmVudHM6IGh0dHBzOi8vbm9kZWpzLm9yZy9hcGkvZXZlbnRzLmh0bWwjZXZlbnRzX2V2ZW50X25ld2xpc3RlbmVyXG4gICAgbmV3TGlzdGVuZXI6IDEsXG4gICAgcmVtb3ZlTGlzdGVuZXI6IDEsXG59KTtcbmNsYXNzIFNvY2tldCBleHRlbmRzIHR5cGVkX2V2ZW50c18xLlN0cmljdEV2ZW50RW1pdHRlciB7XG4gICAgLyoqXG4gICAgICogYFNvY2tldGAgY29uc3RydWN0b3IuXG4gICAgICpcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgY29uc3RydWN0b3IoaW8sIG5zcCwgb3B0cykge1xuICAgICAgICBzdXBlcigpO1xuICAgICAgICB0aGlzLnJlY2VpdmVCdWZmZXIgPSBbXTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuaWRzID0gMDtcbiAgICAgICAgdGhpcy5hY2tzID0ge307XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgdGhpcy5pbyA9IGlvO1xuICAgICAgICB0aGlzLm5zcCA9IG5zcDtcbiAgICAgICAgdGhpcy5pZHMgPSAwO1xuICAgICAgICB0aGlzLmFja3MgPSB7fTtcbiAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyID0gW107XG4gICAgICAgIHRoaXMuc2VuZEJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIHRoaXMuZmxhZ3MgPSB7fTtcbiAgICAgICAgaWYgKG9wdHMgJiYgb3B0cy5hdXRoKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGggPSBvcHRzLmF1dGg7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuaW8uX2F1dG9Db25uZWN0KVxuICAgICAgICAgICAgdGhpcy5vcGVuKCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFN1YnNjcmliZSB0byBvcGVuLCBjbG9zZSBhbmQgcGFja2V0IGV2ZW50c1xuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBzdWJFdmVudHMoKSB7XG4gICAgICAgIGlmICh0aGlzLnN1YnMpXG4gICAgICAgICAgICByZXR1cm47XG4gICAgICAgIGNvbnN0IGlvID0gdGhpcy5pbztcbiAgICAgICAgdGhpcy5zdWJzID0gW1xuICAgICAgICAgICAgb25fMS5vbihpbywgXCJvcGVuXCIsIHRoaXMub25vcGVuLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb25fMS5vbihpbywgXCJwYWNrZXRcIiwgdGhpcy5vbnBhY2tldC5iaW5kKHRoaXMpKSxcbiAgICAgICAgICAgIG9uXzEub24oaW8sIFwiZXJyb3JcIiwgdGhpcy5vbmVycm9yLmJpbmQodGhpcykpLFxuICAgICAgICAgICAgb25fMS5vbihpbywgXCJjbG9zZVwiLCB0aGlzLm9uY2xvc2UuYmluZCh0aGlzKSksXG4gICAgICAgIF07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdGhlIFNvY2tldCB3aWxsIHRyeSB0byByZWNvbm5lY3Qgd2hlbiBpdHMgTWFuYWdlciBjb25uZWN0cyBvciByZWNvbm5lY3RzXG4gICAgICovXG4gICAgZ2V0IGFjdGl2ZSgpIHtcbiAgICAgICAgcmV0dXJuICEhdGhpcy5zdWJzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBcIk9wZW5zXCIgdGhlIHNvY2tldC5cbiAgICAgKlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpXG4gICAgICAgICAgICByZXR1cm4gdGhpcztcbiAgICAgICAgdGhpcy5zdWJFdmVudHMoKTtcbiAgICAgICAgaWYgKCF0aGlzLmlvW1wiX3JlY29ubmVjdGluZ1wiXSlcbiAgICAgICAgICAgIHRoaXMuaW8ub3BlbigpOyAvLyBlbnN1cmUgb3BlblxuICAgICAgICBpZiAoXCJvcGVuXCIgPT09IHRoaXMuaW8uX3JlYWR5U3RhdGUpXG4gICAgICAgICAgICB0aGlzLm9ub3BlbigpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGNvbm5lY3QoKVxuICAgICAqL1xuICAgIG9wZW4oKSB7XG4gICAgICAgIHJldHVybiB0aGlzLmNvbm5lY3QoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogU2VuZHMgYSBgbWVzc2FnZWAgZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcmV0dXJuIHNlbGZcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgc2VuZCguLi5hcmdzKSB7XG4gICAgICAgIGFyZ3MudW5zaGlmdChcIm1lc3NhZ2VcIik7XG4gICAgICAgIHRoaXMuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIE92ZXJyaWRlIGBlbWl0YC5cbiAgICAgKiBJZiB0aGUgZXZlbnQgaXMgaW4gYGV2ZW50c2AsIGl0J3MgZW1pdHRlZCBub3JtYWxseS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBlbWl0KGV2LCAuLi5hcmdzKSB7XG4gICAgICAgIGlmIChSRVNFUlZFRF9FVkVOVFMuaGFzT3duUHJvcGVydHkoZXYpKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1wiJyArIGV2ICsgJ1wiIGlzIGEgcmVzZXJ2ZWQgZXZlbnQgbmFtZScpO1xuICAgICAgICB9XG4gICAgICAgIGFyZ3MudW5zaGlmdChldik7XG4gICAgICAgIGNvbnN0IHBhY2tldCA9IHtcbiAgICAgICAgICAgIHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkVWRU5ULFxuICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgfTtcbiAgICAgICAgcGFja2V0Lm9wdGlvbnMgPSB7fTtcbiAgICAgICAgcGFja2V0Lm9wdGlvbnMuY29tcHJlc3MgPSB0aGlzLmZsYWdzLmNvbXByZXNzICE9PSBmYWxzZTtcbiAgICAgICAgLy8gZXZlbnQgYWNrIGNhbGxiYWNrXG4gICAgICAgIGlmIChcImZ1bmN0aW9uXCIgPT09IHR5cGVvZiBhcmdzW2FyZ3MubGVuZ3RoIC0gMV0pIHtcbiAgICAgICAgICAgIGRlYnVnKFwiZW1pdHRpbmcgcGFja2V0IHdpdGggYWNrIGlkICVkXCIsIHRoaXMuaWRzKTtcbiAgICAgICAgICAgIHRoaXMuYWNrc1t0aGlzLmlkc10gPSBhcmdzLnBvcCgpO1xuICAgICAgICAgICAgcGFja2V0LmlkID0gdGhpcy5pZHMrKztcbiAgICAgICAgfVxuICAgICAgICBjb25zdCBpc1RyYW5zcG9ydFdyaXRhYmxlID0gdGhpcy5pby5lbmdpbmUgJiZcbiAgICAgICAgICAgIHRoaXMuaW8uZW5naW5lLnRyYW5zcG9ydCAmJlxuICAgICAgICAgICAgdGhpcy5pby5lbmdpbmUudHJhbnNwb3J0LndyaXRhYmxlO1xuICAgICAgICBjb25zdCBkaXNjYXJkUGFja2V0ID0gdGhpcy5mbGFncy52b2xhdGlsZSAmJiAoIWlzVHJhbnNwb3J0V3JpdGFibGUgfHwgIXRoaXMuY29ubmVjdGVkKTtcbiAgICAgICAgaWYgKGRpc2NhcmRQYWNrZXQpIHtcbiAgICAgICAgICAgIGRlYnVnKFwiZGlzY2FyZCBwYWNrZXQgYXMgdGhlIHRyYW5zcG9ydCBpcyBub3QgY3VycmVudGx5IHdyaXRhYmxlXCIpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKHRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLnBhY2tldChwYWNrZXQpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5zZW5kQnVmZmVyLnB1c2gocGFja2V0KTtcbiAgICAgICAgfVxuICAgICAgICB0aGlzLmZsYWdzID0ge307XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZW5kcyBhIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIHBhY2tldChwYWNrZXQpIHtcbiAgICAgICAgcGFja2V0Lm5zcCA9IHRoaXMubnNwO1xuICAgICAgICB0aGlzLmlvLl9wYWNrZXQocGFja2V0KTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZW5naW5lIGBvcGVuYC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25vcGVuKCkge1xuICAgICAgICBkZWJ1ZyhcInRyYW5zcG9ydCBpcyBvcGVuIC0gY29ubmVjdGluZ1wiKTtcbiAgICAgICAgaWYgKHR5cGVvZiB0aGlzLmF1dGggPT0gXCJmdW5jdGlvblwiKSB7XG4gICAgICAgICAgICB0aGlzLmF1dGgoKGRhdGEpID0+IHtcbiAgICAgICAgICAgICAgICB0aGlzLnBhY2tldCh7IHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkNPTk5FQ1QsIGRhdGEgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMucGFja2V0KHsgdHlwZTogc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQ09OTkVDVCwgZGF0YTogdGhpcy5hdXRoIH0pO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGVuZ2luZSBvciBtYW5hZ2VyIGBlcnJvcmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXJyXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmVycm9yKGVycikge1xuICAgICAgICBpZiAoIXRoaXMuY29ubmVjdGVkKSB7XG4gICAgICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImNvbm5lY3RfZXJyb3JcIiwgZXJyKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBlbmdpbmUgYGNsb3NlYC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSByZWFzb25cbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uY2xvc2UocmVhc29uKSB7XG4gICAgICAgIGRlYnVnKFwiY2xvc2UgKCVzKVwiLCByZWFzb24pO1xuICAgICAgICB0aGlzLmNvbm5lY3RlZCA9IGZhbHNlO1xuICAgICAgICB0aGlzLmRpc2Nvbm5lY3RlZCA9IHRydWU7XG4gICAgICAgIGRlbGV0ZSB0aGlzLmlkO1xuICAgICAgICB0aGlzLmVtaXRSZXNlcnZlZChcImRpc2Nvbm5lY3RcIiwgcmVhc29uKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHdpdGggc29ja2V0IHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9ucGFja2V0KHBhY2tldCkge1xuICAgICAgICBjb25zdCBzYW1lTmFtZXNwYWNlID0gcGFja2V0Lm5zcCA9PT0gdGhpcy5uc3A7XG4gICAgICAgIGlmICghc2FtZU5hbWVzcGFjZSlcbiAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgc3dpdGNoIChwYWNrZXQudHlwZSkge1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5DT05ORUNUOlxuICAgICAgICAgICAgICAgIGlmIChwYWNrZXQuZGF0YSAmJiBwYWNrZXQuZGF0YS5zaWQpIHtcbiAgICAgICAgICAgICAgICAgICAgY29uc3QgaWQgPSBwYWNrZXQuZGF0YS5zaWQ7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMub25jb25uZWN0KGlkKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBuZXcgRXJyb3IoXCJJdCBzZWVtcyB5b3UgYXJlIHRyeWluZyB0byByZWFjaCBhIFNvY2tldC5JTyBzZXJ2ZXIgaW4gdjIueCB3aXRoIGEgdjMueCBjbGllbnQsIGJ1dCB0aGV5IGFyZSBub3QgY29tcGF0aWJsZSAobW9yZSBpbmZvcm1hdGlvbiBoZXJlOiBodHRwczovL3NvY2tldC5pby9kb2NzL3YzL21pZ3JhdGluZy1mcm9tLTIteC10by0zLTAvKVwiKSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5FVkVOVDpcbiAgICAgICAgICAgICAgICB0aGlzLm9uZXZlbnQocGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuQklOQVJZX0VWRU5UOlxuICAgICAgICAgICAgICAgIHRoaXMub25ldmVudChwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5BQ0s6XG4gICAgICAgICAgICAgICAgdGhpcy5vbmFjayhwYWNrZXQpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5CSU5BUllfQUNLOlxuICAgICAgICAgICAgICAgIHRoaXMub25hY2socGFja2V0KTtcbiAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgIGNhc2Ugc29ja2V0X2lvX3BhcnNlcl8xLlBhY2tldFR5cGUuRElTQ09OTkVDVDpcbiAgICAgICAgICAgICAgICB0aGlzLm9uZGlzY29ubmVjdCgpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgY2FzZSBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5DT05ORUNUX0VSUk9SOlxuICAgICAgICAgICAgICAgIGNvbnN0IGVyciA9IG5ldyBFcnJvcihwYWNrZXQuZGF0YS5tZXNzYWdlKTtcbiAgICAgICAgICAgICAgICAvLyBAdHMtaWdub3JlXG4gICAgICAgICAgICAgICAgZXJyLmRhdGEgPSBwYWNrZXQuZGF0YS5kYXRhO1xuICAgICAgICAgICAgICAgIHRoaXMuZW1pdFJlc2VydmVkKFwiY29ubmVjdF9lcnJvclwiLCBlcnIpO1xuICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIGEgc2VydmVyIGV2ZW50LlxuICAgICAqXG4gICAgICogQHBhcmFtIHBhY2tldFxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgb25ldmVudChwYWNrZXQpIHtcbiAgICAgICAgY29uc3QgYXJncyA9IHBhY2tldC5kYXRhIHx8IFtdO1xuICAgICAgICBkZWJ1ZyhcImVtaXR0aW5nIGV2ZW50ICVqXCIsIGFyZ3MpO1xuICAgICAgICBpZiAobnVsbCAhPSBwYWNrZXQuaWQpIHtcbiAgICAgICAgICAgIGRlYnVnKFwiYXR0YWNoaW5nIGFjayBjYWxsYmFjayB0byBldmVudFwiKTtcbiAgICAgICAgICAgIGFyZ3MucHVzaCh0aGlzLmFjayhwYWNrZXQuaWQpKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIHRoaXMuZW1pdEV2ZW50KGFyZ3MpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgdGhpcy5yZWNlaXZlQnVmZmVyLnB1c2goT2JqZWN0LmZyZWV6ZShhcmdzKSk7XG4gICAgICAgIH1cbiAgICB9XG4gICAgZW1pdEV2ZW50KGFyZ3MpIHtcbiAgICAgICAgaWYgKHRoaXMuX2FueUxpc3RlbmVycyAmJiB0aGlzLl9hbnlMaXN0ZW5lcnMubGVuZ3RoKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMuc2xpY2UoKTtcbiAgICAgICAgICAgIGZvciAoY29uc3QgbGlzdGVuZXIgb2YgbGlzdGVuZXJzKSB7XG4gICAgICAgICAgICAgICAgbGlzdGVuZXIuYXBwbHkodGhpcywgYXJncyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgc3VwZXIuZW1pdC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogUHJvZHVjZXMgYW4gYWNrIGNhbGxiYWNrIHRvIGVtaXQgd2l0aCBhbiBldmVudC5cbiAgICAgKlxuICAgICAqIEBwcml2YXRlXG4gICAgICovXG4gICAgYWNrKGlkKSB7XG4gICAgICAgIGNvbnN0IHNlbGYgPSB0aGlzO1xuICAgICAgICBsZXQgc2VudCA9IGZhbHNlO1xuICAgICAgICByZXR1cm4gZnVuY3Rpb24gKC4uLmFyZ3MpIHtcbiAgICAgICAgICAgIC8vIHByZXZlbnQgZG91YmxlIGNhbGxiYWNrc1xuICAgICAgICAgICAgaWYgKHNlbnQpXG4gICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgc2VudCA9IHRydWU7XG4gICAgICAgICAgICBkZWJ1ZyhcInNlbmRpbmcgYWNrICVqXCIsIGFyZ3MpO1xuICAgICAgICAgICAgc2VsZi5wYWNrZXQoe1xuICAgICAgICAgICAgICAgIHR5cGU6IHNvY2tldF9pb19wYXJzZXJfMS5QYWNrZXRUeXBlLkFDSyxcbiAgICAgICAgICAgICAgICBpZDogaWQsXG4gICAgICAgICAgICAgICAgZGF0YTogYXJncyxcbiAgICAgICAgICAgIH0pO1xuICAgICAgICB9O1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBDYWxsZWQgdXBvbiBhIHNlcnZlciBhY2tub3dsZWdlbWVudC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSBwYWNrZXRcbiAgICAgKiBAcHJpdmF0ZVxuICAgICAqL1xuICAgIG9uYWNrKHBhY2tldCkge1xuICAgICAgICBjb25zdCBhY2sgPSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgaWYgKFwiZnVuY3Rpb25cIiA9PT0gdHlwZW9mIGFjaykge1xuICAgICAgICAgICAgZGVidWcoXCJjYWxsaW5nIGFjayAlcyB3aXRoICVqXCIsIHBhY2tldC5pZCwgcGFja2V0LmRhdGEpO1xuICAgICAgICAgICAgYWNrLmFwcGx5KHRoaXMsIHBhY2tldC5kYXRhKTtcbiAgICAgICAgICAgIGRlbGV0ZSB0aGlzLmFja3NbcGFja2V0LmlkXTtcbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIGRlYnVnKFwiYmFkIGFjayAlc1wiLCBwYWNrZXQuaWQpO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNlcnZlciBjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmNvbm5lY3QoaWQpIHtcbiAgICAgICAgZGVidWcoXCJzb2NrZXQgY29ubmVjdGVkIHdpdGggaWQgJXNcIiwgaWQpO1xuICAgICAgICB0aGlzLmlkID0gaWQ7XG4gICAgICAgIHRoaXMuY29ubmVjdGVkID0gdHJ1ZTtcbiAgICAgICAgdGhpcy5kaXNjb25uZWN0ZWQgPSBmYWxzZTtcbiAgICAgICAgdGhpcy5lbWl0QnVmZmVyZWQoKTtcbiAgICAgICAgdGhpcy5lbWl0UmVzZXJ2ZWQoXCJjb25uZWN0XCIpO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0IGJ1ZmZlcmVkIGV2ZW50cyAocmVjZWl2ZWQgYW5kIGVtaXR0ZWQpLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBlbWl0QnVmZmVyZWQoKSB7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlci5mb3JFYWNoKChhcmdzKSA9PiB0aGlzLmVtaXRFdmVudChhcmdzKSk7XG4gICAgICAgIHRoaXMucmVjZWl2ZUJ1ZmZlciA9IFtdO1xuICAgICAgICB0aGlzLnNlbmRCdWZmZXIuZm9yRWFjaCgocGFja2V0KSA9PiB0aGlzLnBhY2tldChwYWNrZXQpKTtcbiAgICAgICAgdGhpcy5zZW5kQnVmZmVyID0gW107XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENhbGxlZCB1cG9uIHNlcnZlciBkaXNjb25uZWN0LlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBvbmRpc2Nvbm5lY3QoKSB7XG4gICAgICAgIGRlYnVnKFwic2VydmVyIGRpc2Nvbm5lY3QgKCVzKVwiLCB0aGlzLm5zcCk7XG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICB0aGlzLm9uY2xvc2UoXCJpbyBzZXJ2ZXIgZGlzY29ubmVjdFwiKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogQ2FsbGVkIHVwb24gZm9yY2VkIGNsaWVudC9zZXJ2ZXIgc2lkZSBkaXNjb25uZWN0aW9ucyxcbiAgICAgKiB0aGlzIG1ldGhvZCBlbnN1cmVzIHRoZSBtYW5hZ2VyIHN0b3BzIHRyYWNraW5nIHVzIGFuZFxuICAgICAqIHRoYXQgcmVjb25uZWN0aW9ucyBkb24ndCBnZXQgdHJpZ2dlcmVkIGZvciB0aGlzLlxuICAgICAqXG4gICAgICogQHByaXZhdGVcbiAgICAgKi9cbiAgICBkZXN0cm95KCkge1xuICAgICAgICBpZiAodGhpcy5zdWJzKSB7XG4gICAgICAgICAgICAvLyBjbGVhbiBzdWJzY3JpcHRpb25zIHRvIGF2b2lkIHJlY29ubmVjdGlvbnNcbiAgICAgICAgICAgIHRoaXMuc3Vicy5mb3JFYWNoKChzdWJEZXN0cm95KSA9PiBzdWJEZXN0cm95KCkpO1xuICAgICAgICAgICAgdGhpcy5zdWJzID0gdW5kZWZpbmVkO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMuaW9bXCJfZGVzdHJveVwiXSh0aGlzKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGlzY29ubmVjdHMgdGhlIHNvY2tldCBtYW51YWxseS5cbiAgICAgKlxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBkaXNjb25uZWN0KCkge1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIGRlYnVnKFwicGVyZm9ybWluZyBkaXNjb25uZWN0ICglcylcIiwgdGhpcy5uc3ApO1xuICAgICAgICAgICAgdGhpcy5wYWNrZXQoeyB0eXBlOiBzb2NrZXRfaW9fcGFyc2VyXzEuUGFja2V0VHlwZS5ESVNDT05ORUNUIH0pO1xuICAgICAgICB9XG4gICAgICAgIC8vIHJlbW92ZSBzb2NrZXQgZnJvbSBwb29sXG4gICAgICAgIHRoaXMuZGVzdHJveSgpO1xuICAgICAgICBpZiAodGhpcy5jb25uZWN0ZWQpIHtcbiAgICAgICAgICAgIC8vIGZpcmUgZXZlbnRzXG4gICAgICAgICAgICB0aGlzLm9uY2xvc2UoXCJpbyBjbGllbnQgZGlzY29ubmVjdFwiKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogQWxpYXMgZm9yIGRpc2Nvbm5lY3QoKVxuICAgICAqXG4gICAgICogQHJldHVybiBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGNsb3NlKCkge1xuICAgICAgICByZXR1cm4gdGhpcy5kaXNjb25uZWN0KCk7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFNldHMgdGhlIGNvbXByZXNzIGZsYWcuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gY29tcHJlc3MgLSBpZiBgdHJ1ZWAsIGNvbXByZXNzZXMgdGhlIHNlbmRpbmcgZGF0YVxuICAgICAqIEByZXR1cm4gc2VsZlxuICAgICAqIEBwdWJsaWNcbiAgICAgKi9cbiAgICBjb21wcmVzcyhjb21wcmVzcykge1xuICAgICAgICB0aGlzLmZsYWdzLmNvbXByZXNzID0gY29tcHJlc3M7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBTZXRzIGEgbW9kaWZpZXIgZm9yIGEgc3Vic2VxdWVudCBldmVudCBlbWlzc2lvbiB0aGF0IHRoZSBldmVudCBtZXNzYWdlIHdpbGwgYmUgZHJvcHBlZCB3aGVuIHRoaXMgc29ja2V0IGlzIG5vdFxuICAgICAqIHJlYWR5IHRvIHNlbmQgbWVzc2FnZXMuXG4gICAgICpcbiAgICAgKiBAcmV0dXJucyBzZWxmXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGdldCB2b2xhdGlsZSgpIHtcbiAgICAgICAgdGhpcy5mbGFncy52b2xhdGlsZSA9IHRydWU7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgb25BbnkobGlzdGVuZXIpIHtcbiAgICAgICAgdGhpcy5fYW55TGlzdGVuZXJzID0gdGhpcy5fYW55TGlzdGVuZXJzIHx8IFtdO1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMucHVzaChsaXN0ZW5lcik7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBBZGRzIGEgbGlzdGVuZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gYW55IGV2ZW50IGlzIGVtaXR0ZWQuIFRoZSBldmVudCBuYW1lIGlzIHBhc3NlZCBhcyB0aGUgZmlyc3QgYXJndW1lbnQgdG8gdGhlXG4gICAgICogY2FsbGJhY2suIFRoZSBsaXN0ZW5lciBpcyBhZGRlZCB0byB0aGUgYmVnaW5uaW5nIG9mIHRoZSBsaXN0ZW5lcnMgYXJyYXkuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXJcbiAgICAgKiBAcHVibGljXG4gICAgICovXG4gICAgcHJlcGVuZEFueShsaXN0ZW5lcikge1xuICAgICAgICB0aGlzLl9hbnlMaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnMgfHwgW107XG4gICAgICAgIHRoaXMuX2FueUxpc3RlbmVycy51bnNoaWZ0KGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJlbW92ZXMgdGhlIGxpc3RlbmVyIHRoYXQgd2lsbCBiZSBmaXJlZCB3aGVuIGFueSBldmVudCBpcyBlbWl0dGVkLlxuICAgICAqXG4gICAgICogQHBhcmFtIGxpc3RlbmVyXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIG9mZkFueShsaXN0ZW5lcikge1xuICAgICAgICBpZiAoIXRoaXMuX2FueUxpc3RlbmVycykge1xuICAgICAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGxpc3RlbmVyKSB7XG4gICAgICAgICAgICBjb25zdCBsaXN0ZW5lcnMgPSB0aGlzLl9hbnlMaXN0ZW5lcnM7XG4gICAgICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICAgIGlmIChsaXN0ZW5lciA9PT0gbGlzdGVuZXJzW2ldKSB7XG4gICAgICAgICAgICAgICAgICAgIGxpc3RlbmVycy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybiB0aGlzO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRoaXMuX2FueUxpc3RlbmVycyA9IFtdO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBSZXR1cm5zIGFuIGFycmF5IG9mIGxpc3RlbmVycyB0aGF0IGFyZSBsaXN0ZW5pbmcgZm9yIGFueSBldmVudCB0aGF0IGlzIHNwZWNpZmllZC4gVGhpcyBhcnJheSBjYW4gYmUgbWFuaXB1bGF0ZWQsXG4gICAgICogZS5nLiB0byByZW1vdmUgbGlzdGVuZXJzLlxuICAgICAqXG4gICAgICogQHB1YmxpY1xuICAgICAqL1xuICAgIGxpc3RlbmVyc0FueSgpIHtcbiAgICAgICAgcmV0dXJuIHRoaXMuX2FueUxpc3RlbmVycyB8fCBbXTtcbiAgICB9XG59XG5leHBvcnRzLlNvY2tldCA9IFNvY2tldDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5TdHJpY3RFdmVudEVtaXR0ZXIgPSB2b2lkIDA7XG5jb25zdCBFbWl0dGVyID0gcmVxdWlyZShcImNvbXBvbmVudC1lbWl0dGVyXCIpO1xuLyoqXG4gKiBTdHJpY3RseSB0eXBlZCB2ZXJzaW9uIG9mIGFuIGBFdmVudEVtaXR0ZXJgLiBBIGBUeXBlZEV2ZW50RW1pdHRlcmAgdGFrZXMgdHlwZVxuICogcGFyYW1ldGVycyBmb3IgbWFwcGluZ3Mgb2YgZXZlbnQgbmFtZXMgdG8gZXZlbnQgZGF0YSB0eXBlcywgYW5kIHN0cmljdGx5XG4gKiB0eXBlcyBtZXRob2QgY2FsbHMgdG8gdGhlIGBFdmVudEVtaXR0ZXJgIGFjY29yZGluZyB0byB0aGVzZSBldmVudCBtYXBzLlxuICpcbiAqIEB0eXBlUGFyYW0gTGlzdGVuRXZlbnRzIC0gYEV2ZW50c01hcGAgb2YgdXNlci1kZWZpbmVkIGV2ZW50cyB0aGF0IGNhbiBiZVxuICogbGlzdGVuZWQgdG8gd2l0aCBgb25gIG9yIGBvbmNlYFxuICogQHR5cGVQYXJhbSBFbWl0RXZlbnRzIC0gYEV2ZW50c01hcGAgb2YgdXNlci1kZWZpbmVkIGV2ZW50cyB0aGF0IGNhbiBiZVxuICogZW1pdHRlZCB3aXRoIGBlbWl0YFxuICogQHR5cGVQYXJhbSBSZXNlcnZlZEV2ZW50cyAtIGBFdmVudHNNYXBgIG9mIHJlc2VydmVkIGV2ZW50cywgdGhhdCBjYW4gYmVcbiAqIGVtaXR0ZWQgYnkgc29ja2V0LmlvIHdpdGggYGVtaXRSZXNlcnZlZGAsIGFuZCBjYW4gYmUgbGlzdGVuZWQgdG8gd2l0aFxuICogYGxpc3RlbmAuXG4gKi9cbmNsYXNzIFN0cmljdEV2ZW50RW1pdHRlciBleHRlbmRzIEVtaXR0ZXIge1xuICAgIC8qKlxuICAgICAqIEFkZHMgdGhlIGBsaXN0ZW5lcmAgZnVuY3Rpb24gYXMgYW4gZXZlbnQgbGlzdGVuZXIgZm9yIGBldmAuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXYgTmFtZSBvZiB0aGUgZXZlbnRcbiAgICAgKiBAcGFyYW0gbGlzdGVuZXIgQ2FsbGJhY2sgZnVuY3Rpb25cbiAgICAgKi9cbiAgICBvbihldiwgbGlzdGVuZXIpIHtcbiAgICAgICAgc3VwZXIub24oZXYsIGxpc3RlbmVyKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEFkZHMgYSBvbmUtdGltZSBgbGlzdGVuZXJgIGZ1bmN0aW9uIGFzIGFuIGV2ZW50IGxpc3RlbmVyIGZvciBgZXZgLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2IE5hbWUgb2YgdGhlIGV2ZW50XG4gICAgICogQHBhcmFtIGxpc3RlbmVyIENhbGxiYWNrIGZ1bmN0aW9uXG4gICAgICovXG4gICAgb25jZShldiwgbGlzdGVuZXIpIHtcbiAgICAgICAgc3VwZXIub25jZShldiwgbGlzdGVuZXIpO1xuICAgICAgICByZXR1cm4gdGhpcztcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW1pdHMgYW4gZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXYgTmFtZSBvZiB0aGUgZXZlbnRcbiAgICAgKiBAcGFyYW0gYXJncyBWYWx1ZXMgdG8gc2VuZCB0byBsaXN0ZW5lcnMgb2YgdGhpcyBldmVudFxuICAgICAqL1xuICAgIGVtaXQoZXYsIC4uLmFyZ3MpIHtcbiAgICAgICAgc3VwZXIuZW1pdChldiwgLi4uYXJncyk7XG4gICAgICAgIHJldHVybiB0aGlzO1xuICAgIH1cbiAgICAvKipcbiAgICAgKiBFbWl0cyBhIHJlc2VydmVkIGV2ZW50LlxuICAgICAqXG4gICAgICogVGhpcyBtZXRob2QgaXMgYHByb3RlY3RlZGAsIHNvIHRoYXQgb25seSBhIGNsYXNzIGV4dGVuZGluZ1xuICAgICAqIGBTdHJpY3RFdmVudEVtaXR0ZXJgIGNhbiBlbWl0IGl0cyBvd24gcmVzZXJ2ZWQgZXZlbnRzLlxuICAgICAqXG4gICAgICogQHBhcmFtIGV2IFJlc2VydmVkIGV2ZW50IG5hbWVcbiAgICAgKiBAcGFyYW0gYXJncyBBcmd1bWVudHMgdG8gZW1pdCBhbG9uZyB3aXRoIHRoZSBldmVudFxuICAgICAqL1xuICAgIGVtaXRSZXNlcnZlZChldiwgLi4uYXJncykge1xuICAgICAgICBzdXBlci5lbWl0KGV2LCAuLi5hcmdzKTtcbiAgICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIFJldHVybnMgdGhlIGxpc3RlbmVycyBsaXN0ZW5pbmcgdG8gYW4gZXZlbnQuXG4gICAgICpcbiAgICAgKiBAcGFyYW0gZXZlbnQgRXZlbnQgbmFtZVxuICAgICAqIEByZXR1cm5zIEFycmF5IG9mIGxpc3RlbmVycyBzdWJzY3JpYmVkIHRvIGBldmVudGBcbiAgICAgKi9cbiAgICBsaXN0ZW5lcnMoZXZlbnQpIHtcbiAgICAgICAgcmV0dXJuIHN1cGVyLmxpc3RlbmVycyhldmVudCk7XG4gICAgfVxufVxuZXhwb3J0cy5TdHJpY3RFdmVudEVtaXR0ZXIgPSBTdHJpY3RFdmVudEVtaXR0ZXI7XG4iLCJcInVzZSBzdHJpY3RcIjtcbk9iamVjdC5kZWZpbmVQcm9wZXJ0eShleHBvcnRzLCBcIl9fZXNNb2R1bGVcIiwgeyB2YWx1ZTogdHJ1ZSB9KTtcbmV4cG9ydHMudXJsID0gdm9pZCAwO1xuY29uc3QgcGFyc2V1cmkgPSByZXF1aXJlKFwicGFyc2V1cmlcIik7XG5jb25zdCBkZWJ1ZyA9IHJlcXVpcmUoXCJkZWJ1Z1wiKShcInNvY2tldC5pby1jbGllbnQ6dXJsXCIpO1xuLyoqXG4gKiBVUkwgcGFyc2VyLlxuICpcbiAqIEBwYXJhbSB1cmkgLSB1cmxcbiAqIEBwYXJhbSBwYXRoIC0gdGhlIHJlcXVlc3QgcGF0aCBvZiB0aGUgY29ubmVjdGlvblxuICogQHBhcmFtIGxvYyAtIEFuIG9iamVjdCBtZWFudCB0byBtaW1pYyB3aW5kb3cubG9jYXRpb24uXG4gKiAgICAgICAgRGVmYXVsdHMgdG8gd2luZG93LmxvY2F0aW9uLlxuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiB1cmwodXJpLCBwYXRoID0gXCJcIiwgbG9jKSB7XG4gICAgbGV0IG9iaiA9IHVyaTtcbiAgICAvLyBkZWZhdWx0IHRvIHdpbmRvdy5sb2NhdGlvblxuICAgIGxvYyA9IGxvYyB8fCAodHlwZW9mIGxvY2F0aW9uICE9PSBcInVuZGVmaW5lZFwiICYmIGxvY2F0aW9uKTtcbiAgICBpZiAobnVsbCA9PSB1cmkpXG4gICAgICAgIHVyaSA9IGxvYy5wcm90b2NvbCArIFwiLy9cIiArIGxvYy5ob3N0O1xuICAgIC8vIHJlbGF0aXZlIHBhdGggc3VwcG9ydFxuICAgIGlmICh0eXBlb2YgdXJpID09PSBcInN0cmluZ1wiKSB7XG4gICAgICAgIGlmIChcIi9cIiA9PT0gdXJpLmNoYXJBdCgwKSkge1xuICAgICAgICAgICAgaWYgKFwiL1wiID09PSB1cmkuY2hhckF0KDEpKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLmhvc3QgKyB1cmk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKCEvXihodHRwcz98d3NzPyk6XFwvXFwvLy50ZXN0KHVyaSkpIHtcbiAgICAgICAgICAgIGRlYnVnKFwicHJvdG9jb2wtbGVzcyB1cmwgJXNcIiwgdXJpKTtcbiAgICAgICAgICAgIGlmIChcInVuZGVmaW5lZFwiICE9PSB0eXBlb2YgbG9jKSB7XG4gICAgICAgICAgICAgICAgdXJpID0gbG9jLnByb3RvY29sICsgXCIvL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAgICAgdXJpID0gXCJodHRwczovL1wiICsgdXJpO1xuICAgICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIC8vIHBhcnNlXG4gICAgICAgIGRlYnVnKFwicGFyc2UgJXNcIiwgdXJpKTtcbiAgICAgICAgb2JqID0gcGFyc2V1cmkodXJpKTtcbiAgICB9XG4gICAgLy8gbWFrZSBzdXJlIHdlIHRyZWF0IGBsb2NhbGhvc3Q6ODBgIGFuZCBgbG9jYWxob3N0YCBlcXVhbGx5XG4gICAgaWYgKCFvYmoucG9ydCkge1xuICAgICAgICBpZiAoL14oaHR0cHx3cykkLy50ZXN0KG9iai5wcm90b2NvbCkpIHtcbiAgICAgICAgICAgIG9iai5wb3J0ID0gXCI4MFwiO1xuICAgICAgICB9XG4gICAgICAgIGVsc2UgaWYgKC9eKGh0dHB8d3MpcyQvLnRlc3Qob2JqLnByb3RvY29sKSkge1xuICAgICAgICAgICAgb2JqLnBvcnQgPSBcIjQ0M1wiO1xuICAgICAgICB9XG4gICAgfVxuICAgIG9iai5wYXRoID0gb2JqLnBhdGggfHwgXCIvXCI7XG4gICAgY29uc3QgaXB2NiA9IG9iai5ob3N0LmluZGV4T2YoXCI6XCIpICE9PSAtMTtcbiAgICBjb25zdCBob3N0ID0gaXB2NiA/IFwiW1wiICsgb2JqLmhvc3QgKyBcIl1cIiA6IG9iai5ob3N0O1xuICAgIC8vIGRlZmluZSB1bmlxdWUgaWRcbiAgICBvYmouaWQgPSBvYmoucHJvdG9jb2wgKyBcIjovL1wiICsgaG9zdCArIFwiOlwiICsgb2JqLnBvcnQgKyBwYXRoO1xuICAgIC8vIGRlZmluZSBocmVmXG4gICAgb2JqLmhyZWYgPVxuICAgICAgICBvYmoucHJvdG9jb2wgK1xuICAgICAgICAgICAgXCI6Ly9cIiArXG4gICAgICAgICAgICBob3N0ICtcbiAgICAgICAgICAgIChsb2MgJiYgbG9jLnBvcnQgPT09IG9iai5wb3J0ID8gXCJcIiA6IFwiOlwiICsgb2JqLnBvcnQpO1xuICAgIHJldHVybiBvYmo7XG59XG5leHBvcnRzLnVybCA9IHVybDtcbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IGV4cG9ydHMuZGVjb25zdHJ1Y3RQYWNrZXQgPSB2b2lkIDA7XG5jb25zdCBpc19iaW5hcnlfMSA9IHJlcXVpcmUoXCIuL2lzLWJpbmFyeVwiKTtcbi8qKlxuICogUmVwbGFjZXMgZXZlcnkgQnVmZmVyIHwgQXJyYXlCdWZmZXIgfCBCbG9iIHwgRmlsZSBpbiBwYWNrZXQgd2l0aCBhIG51bWJlcmVkIHBsYWNlaG9sZGVyLlxuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBzb2NrZXQuaW8gZXZlbnQgcGFja2V0XG4gKiBAcmV0dXJuIHtPYmplY3R9IHdpdGggZGVjb25zdHJ1Y3RlZCBwYWNrZXQgYW5kIGxpc3Qgb2YgYnVmZmVyc1xuICogQHB1YmxpY1xuICovXG5mdW5jdGlvbiBkZWNvbnN0cnVjdFBhY2tldChwYWNrZXQpIHtcbiAgICBjb25zdCBidWZmZXJzID0gW107XG4gICAgY29uc3QgcGFja2V0RGF0YSA9IHBhY2tldC5kYXRhO1xuICAgIGNvbnN0IHBhY2sgPSBwYWNrZXQ7XG4gICAgcGFjay5kYXRhID0gX2RlY29uc3RydWN0UGFja2V0KHBhY2tldERhdGEsIGJ1ZmZlcnMpO1xuICAgIHBhY2suYXR0YWNobWVudHMgPSBidWZmZXJzLmxlbmd0aDsgLy8gbnVtYmVyIG9mIGJpbmFyeSAnYXR0YWNobWVudHMnXG4gICAgcmV0dXJuIHsgcGFja2V0OiBwYWNrLCBidWZmZXJzOiBidWZmZXJzIH07XG59XG5leHBvcnRzLmRlY29uc3RydWN0UGFja2V0ID0gZGVjb25zdHJ1Y3RQYWNrZXQ7XG5mdW5jdGlvbiBfZGVjb25zdHJ1Y3RQYWNrZXQoZGF0YSwgYnVmZmVycykge1xuICAgIGlmICghZGF0YSlcbiAgICAgICAgcmV0dXJuIGRhdGE7XG4gICAgaWYgKGlzX2JpbmFyeV8xLmlzQmluYXJ5KGRhdGEpKSB7XG4gICAgICAgIGNvbnN0IHBsYWNlaG9sZGVyID0geyBfcGxhY2Vob2xkZXI6IHRydWUsIG51bTogYnVmZmVycy5sZW5ndGggfTtcbiAgICAgICAgYnVmZmVycy5wdXNoKGRhdGEpO1xuICAgICAgICByZXR1cm4gcGxhY2Vob2xkZXI7XG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IG5ldyBBcnJheShkYXRhLmxlbmd0aCk7XG4gICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgZGF0YS5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgbmV3RGF0YVtpXSA9IF9kZWNvbnN0cnVjdFBhY2tldChkYXRhW2ldLCBidWZmZXJzKTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gbmV3RGF0YTtcbiAgICB9XG4gICAgZWxzZSBpZiAodHlwZW9mIGRhdGEgPT09IFwib2JqZWN0XCIgJiYgIShkYXRhIGluc3RhbmNlb2YgRGF0ZSkpIHtcbiAgICAgICAgY29uc3QgbmV3RGF0YSA9IHt9O1xuICAgICAgICBmb3IgKGNvbnN0IGtleSBpbiBkYXRhKSB7XG4gICAgICAgICAgICBpZiAoZGF0YS5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG4gICAgICAgICAgICAgICAgbmV3RGF0YVtrZXldID0gX2RlY29uc3RydWN0UGFja2V0KGRhdGFba2V5XSwgYnVmZmVycyk7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG5ld0RhdGE7XG4gICAgfVxuICAgIHJldHVybiBkYXRhO1xufVxuLyoqXG4gKiBSZWNvbnN0cnVjdHMgYSBiaW5hcnkgcGFja2V0IGZyb20gaXRzIHBsYWNlaG9sZGVyIHBhY2tldCBhbmQgYnVmZmVyc1xuICpcbiAqIEBwYXJhbSB7T2JqZWN0fSBwYWNrZXQgLSBldmVudCBwYWNrZXQgd2l0aCBwbGFjZWhvbGRlcnNcbiAqIEBwYXJhbSB7QXJyYXl9IGJ1ZmZlcnMgLSBiaW5hcnkgYnVmZmVycyB0byBwdXQgaW4gcGxhY2Vob2xkZXIgcG9zaXRpb25zXG4gKiBAcmV0dXJuIHtPYmplY3R9IHJlY29uc3RydWN0ZWQgcGFja2V0XG4gKiBAcHVibGljXG4gKi9cbmZ1bmN0aW9uIHJlY29uc3RydWN0UGFja2V0KHBhY2tldCwgYnVmZmVycykge1xuICAgIHBhY2tldC5kYXRhID0gX3JlY29uc3RydWN0UGFja2V0KHBhY2tldC5kYXRhLCBidWZmZXJzKTtcbiAgICBwYWNrZXQuYXR0YWNobWVudHMgPSB1bmRlZmluZWQ7IC8vIG5vIGxvbmdlciB1c2VmdWxcbiAgICByZXR1cm4gcGFja2V0O1xufVxuZXhwb3J0cy5yZWNvbnN0cnVjdFBhY2tldCA9IHJlY29uc3RydWN0UGFja2V0O1xuZnVuY3Rpb24gX3JlY29uc3RydWN0UGFja2V0KGRhdGEsIGJ1ZmZlcnMpIHtcbiAgICBpZiAoIWRhdGEpXG4gICAgICAgIHJldHVybiBkYXRhO1xuICAgIGlmIChkYXRhICYmIGRhdGEuX3BsYWNlaG9sZGVyKSB7XG4gICAgICAgIHJldHVybiBidWZmZXJzW2RhdGEubnVtXTsgLy8gYXBwcm9wcmlhdGUgYnVmZmVyIChzaG91bGQgYmUgbmF0dXJhbCBvcmRlciBhbnl3YXkpXG4gICAgfVxuICAgIGVsc2UgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDA7IGkgPCBkYXRhLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgICBkYXRhW2ldID0gX3JlY29uc3RydWN0UGFja2V0KGRhdGFbaV0sIGJ1ZmZlcnMpO1xuICAgICAgICB9XG4gICAgfVxuICAgIGVsc2UgaWYgKHR5cGVvZiBkYXRhID09PSBcIm9iamVjdFwiKSB7XG4gICAgICAgIGZvciAoY29uc3Qga2V5IGluIGRhdGEpIHtcbiAgICAgICAgICAgIGlmIChkYXRhLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICAgICAgICBkYXRhW2tleV0gPSBfcmVjb25zdHJ1Y3RQYWNrZXQoZGF0YVtrZXldLCBidWZmZXJzKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZGF0YTtcbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5EZWNvZGVyID0gZXhwb3J0cy5FbmNvZGVyID0gZXhwb3J0cy5QYWNrZXRUeXBlID0gZXhwb3J0cy5wcm90b2NvbCA9IHZvaWQgMDtcbmNvbnN0IEVtaXR0ZXIgPSByZXF1aXJlKFwiY29tcG9uZW50LWVtaXR0ZXJcIik7XG5jb25zdCBiaW5hcnlfMSA9IHJlcXVpcmUoXCIuL2JpbmFyeVwiKTtcbmNvbnN0IGlzX2JpbmFyeV8xID0gcmVxdWlyZShcIi4vaXMtYmluYXJ5XCIpO1xuY29uc3QgZGVidWcgPSByZXF1aXJlKFwiZGVidWdcIikoXCJzb2NrZXQuaW8tcGFyc2VyXCIpO1xuLyoqXG4gKiBQcm90b2NvbCB2ZXJzaW9uLlxuICpcbiAqIEBwdWJsaWNcbiAqL1xuZXhwb3J0cy5wcm90b2NvbCA9IDU7XG52YXIgUGFja2V0VHlwZTtcbihmdW5jdGlvbiAoUGFja2V0VHlwZSkge1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkNPTk5FQ1RcIl0gPSAwXSA9IFwiQ09OTkVDVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkRJU0NPTk5FQ1RcIl0gPSAxXSA9IFwiRElTQ09OTkVDVFwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkVWRU5UXCJdID0gMl0gPSBcIkVWRU5UXCI7XG4gICAgUGFja2V0VHlwZVtQYWNrZXRUeXBlW1wiQUNLXCJdID0gM10gPSBcIkFDS1wiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkNPTk5FQ1RfRVJST1JcIl0gPSA0XSA9IFwiQ09OTkVDVF9FUlJPUlwiO1xuICAgIFBhY2tldFR5cGVbUGFja2V0VHlwZVtcIkJJTkFSWV9FVkVOVFwiXSA9IDVdID0gXCJCSU5BUllfRVZFTlRcIjtcbiAgICBQYWNrZXRUeXBlW1BhY2tldFR5cGVbXCJCSU5BUllfQUNLXCJdID0gNl0gPSBcIkJJTkFSWV9BQ0tcIjtcbn0pKFBhY2tldFR5cGUgPSBleHBvcnRzLlBhY2tldFR5cGUgfHwgKGV4cG9ydHMuUGFja2V0VHlwZSA9IHt9KSk7XG4vKipcbiAqIEEgc29ja2V0LmlvIEVuY29kZXIgaW5zdGFuY2VcbiAqL1xuY2xhc3MgRW5jb2RlciB7XG4gICAgLyoqXG4gICAgICogRW5jb2RlIGEgcGFja2V0IGFzIGEgc2luZ2xlIHN0cmluZyBpZiBub24tYmluYXJ5LCBvciBhcyBhXG4gICAgICogYnVmZmVyIHNlcXVlbmNlLCBkZXBlbmRpbmcgb24gcGFja2V0IHR5cGUuXG4gICAgICpcbiAgICAgKiBAcGFyYW0ge09iamVjdH0gb2JqIC0gcGFja2V0IG9iamVjdFxuICAgICAqL1xuICAgIGVuY29kZShvYmopIHtcbiAgICAgICAgZGVidWcoXCJlbmNvZGluZyBwYWNrZXQgJWpcIiwgb2JqKTtcbiAgICAgICAgaWYgKG9iai50eXBlID09PSBQYWNrZXRUeXBlLkVWRU5UIHx8IG9iai50eXBlID09PSBQYWNrZXRUeXBlLkFDSykge1xuICAgICAgICAgICAgaWYgKGlzX2JpbmFyeV8xLmhhc0JpbmFyeShvYmopKSB7XG4gICAgICAgICAgICAgICAgb2JqLnR5cGUgPVxuICAgICAgICAgICAgICAgICAgICBvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5FVkVOVFxuICAgICAgICAgICAgICAgICAgICAgICAgPyBQYWNrZXRUeXBlLkJJTkFSWV9FVkVOVFxuICAgICAgICAgICAgICAgICAgICAgICAgOiBQYWNrZXRUeXBlLkJJTkFSWV9BQ0s7XG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuZW5jb2RlQXNCaW5hcnkob2JqKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gW3RoaXMuZW5jb2RlQXNTdHJpbmcob2JqKV07XG4gICAgfVxuICAgIC8qKlxuICAgICAqIEVuY29kZSBwYWNrZXQgYXMgc3RyaW5nLlxuICAgICAqL1xuICAgIGVuY29kZUFzU3RyaW5nKG9iaikge1xuICAgICAgICAvLyBmaXJzdCBpcyB0eXBlXG4gICAgICAgIGxldCBzdHIgPSBcIlwiICsgb2JqLnR5cGU7XG4gICAgICAgIC8vIGF0dGFjaG1lbnRzIGlmIHdlIGhhdmUgdGhlbVxuICAgICAgICBpZiAob2JqLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UIHx8XG4gICAgICAgICAgICBvYmoudHlwZSA9PT0gUGFja2V0VHlwZS5CSU5BUllfQUNLKSB7XG4gICAgICAgICAgICBzdHIgKz0gb2JqLmF0dGFjaG1lbnRzICsgXCItXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaWYgd2UgaGF2ZSBhIG5hbWVzcGFjZSBvdGhlciB0aGFuIGAvYFxuICAgICAgICAvLyB3ZSBhcHBlbmQgaXQgZm9sbG93ZWQgYnkgYSBjb21tYSBgLGBcbiAgICAgICAgaWYgKG9iai5uc3AgJiYgXCIvXCIgIT09IG9iai5uc3ApIHtcbiAgICAgICAgICAgIHN0ciArPSBvYmoubnNwICsgXCIsXCI7XG4gICAgICAgIH1cbiAgICAgICAgLy8gaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgdGhlIGlkXG4gICAgICAgIGlmIChudWxsICE9IG9iai5pZCkge1xuICAgICAgICAgICAgc3RyICs9IG9iai5pZDtcbiAgICAgICAgfVxuICAgICAgICAvLyBqc29uIGRhdGFcbiAgICAgICAgaWYgKG51bGwgIT0gb2JqLmRhdGEpIHtcbiAgICAgICAgICAgIHN0ciArPSBKU09OLnN0cmluZ2lmeShvYmouZGF0YSk7XG4gICAgICAgIH1cbiAgICAgICAgZGVidWcoXCJlbmNvZGVkICVqIGFzICVzXCIsIG9iaiwgc3RyKTtcbiAgICAgICAgcmV0dXJuIHN0cjtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRW5jb2RlIHBhY2tldCBhcyAnYnVmZmVyIHNlcXVlbmNlJyBieSByZW1vdmluZyBibG9icywgYW5kXG4gICAgICogZGVjb25zdHJ1Y3RpbmcgcGFja2V0IGludG8gb2JqZWN0IHdpdGggcGxhY2Vob2xkZXJzIGFuZFxuICAgICAqIGEgbGlzdCBvZiBidWZmZXJzLlxuICAgICAqL1xuICAgIGVuY29kZUFzQmluYXJ5KG9iaikge1xuICAgICAgICBjb25zdCBkZWNvbnN0cnVjdGlvbiA9IGJpbmFyeV8xLmRlY29uc3RydWN0UGFja2V0KG9iaik7XG4gICAgICAgIGNvbnN0IHBhY2sgPSB0aGlzLmVuY29kZUFzU3RyaW5nKGRlY29uc3RydWN0aW9uLnBhY2tldCk7XG4gICAgICAgIGNvbnN0IGJ1ZmZlcnMgPSBkZWNvbnN0cnVjdGlvbi5idWZmZXJzO1xuICAgICAgICBidWZmZXJzLnVuc2hpZnQocGFjayk7IC8vIGFkZCBwYWNrZXQgaW5mbyB0byBiZWdpbm5pbmcgb2YgZGF0YSBsaXN0XG4gICAgICAgIHJldHVybiBidWZmZXJzOyAvLyB3cml0ZSBhbGwgdGhlIGJ1ZmZlcnNcbiAgICB9XG59XG5leHBvcnRzLkVuY29kZXIgPSBFbmNvZGVyO1xuLyoqXG4gKiBBIHNvY2tldC5pbyBEZWNvZGVyIGluc3RhbmNlXG4gKlxuICogQHJldHVybiB7T2JqZWN0fSBkZWNvZGVyXG4gKi9cbmNsYXNzIERlY29kZXIgZXh0ZW5kcyBFbWl0dGVyIHtcbiAgICBjb25zdHJ1Y3RvcigpIHtcbiAgICAgICAgc3VwZXIoKTtcbiAgICB9XG4gICAgLyoqXG4gICAgICogRGVjb2RlcyBhbiBlbmNvZGVkIHBhY2tldCBzdHJpbmcgaW50byBwYWNrZXQgSlNPTi5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBvYmogLSBlbmNvZGVkIHBhY2tldFxuICAgICAqL1xuICAgIGFkZChvYmopIHtcbiAgICAgICAgbGV0IHBhY2tldDtcbiAgICAgICAgaWYgKHR5cGVvZiBvYmogPT09IFwic3RyaW5nXCIpIHtcbiAgICAgICAgICAgIHBhY2tldCA9IHRoaXMuZGVjb2RlU3RyaW5nKG9iaik7XG4gICAgICAgICAgICBpZiAocGFja2V0LnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UIHx8XG4gICAgICAgICAgICAgICAgcGFja2V0LnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0FDSykge1xuICAgICAgICAgICAgICAgIC8vIGJpbmFyeSBwYWNrZXQncyBqc29uXG4gICAgICAgICAgICAgICAgdGhpcy5yZWNvbnN0cnVjdG9yID0gbmV3IEJpbmFyeVJlY29uc3RydWN0b3IocGFja2V0KTtcbiAgICAgICAgICAgICAgICAvLyBubyBhdHRhY2htZW50cywgbGFiZWxlZCBiaW5hcnkgYnV0IG5vIGJpbmFyeSBkYXRhIHRvIGZvbGxvd1xuICAgICAgICAgICAgICAgIGlmIChwYWNrZXQuYXR0YWNobWVudHMgPT09IDApIHtcbiAgICAgICAgICAgICAgICAgICAgc3VwZXIuZW1pdChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICAvLyBub24tYmluYXJ5IGZ1bGwgcGFja2V0XG4gICAgICAgICAgICAgICAgc3VwZXIuZW1pdChcImRlY29kZWRcIiwgcGFja2V0KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIGlmIChpc19iaW5hcnlfMS5pc0JpbmFyeShvYmopIHx8IG9iai5iYXNlNjQpIHtcbiAgICAgICAgICAgIC8vIHJhdyBiaW5hcnkgZGF0YVxuICAgICAgICAgICAgaWYgKCF0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJnb3QgYmluYXJ5IGRhdGEgd2hlbiBub3QgcmVjb25zdHJ1Y3RpbmcgYSBwYWNrZXRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICBwYWNrZXQgPSB0aGlzLnJlY29uc3RydWN0b3IudGFrZUJpbmFyeURhdGEob2JqKTtcbiAgICAgICAgICAgICAgICBpZiAocGFja2V0KSB7XG4gICAgICAgICAgICAgICAgICAgIC8vIHJlY2VpdmVkIGZpbmFsIGJ1ZmZlclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnJlY29uc3RydWN0b3IgPSBudWxsO1xuICAgICAgICAgICAgICAgICAgICBzdXBlci5lbWl0KFwiZGVjb2RlZFwiLCBwYWNrZXQpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgIHRocm93IG5ldyBFcnJvcihcIlVua25vd24gdHlwZTogXCIgKyBvYmopO1xuICAgICAgICB9XG4gICAgfVxuICAgIC8qKlxuICAgICAqIERlY29kZSBhIHBhY2tldCBTdHJpbmcgKEpTT04gZGF0YSlcbiAgICAgKlxuICAgICAqIEBwYXJhbSB7U3RyaW5nfSBzdHJcbiAgICAgKiBAcmV0dXJuIHtPYmplY3R9IHBhY2tldFxuICAgICAqL1xuICAgIGRlY29kZVN0cmluZyhzdHIpIHtcbiAgICAgICAgbGV0IGkgPSAwO1xuICAgICAgICAvLyBsb29rIHVwIHR5cGVcbiAgICAgICAgY29uc3QgcCA9IHtcbiAgICAgICAgICAgIHR5cGU6IE51bWJlcihzdHIuY2hhckF0KDApKSxcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKFBhY2tldFR5cGVbcC50eXBlXSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJ1bmtub3duIHBhY2tldCB0eXBlIFwiICsgcC50eXBlKTtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIGF0dGFjaG1lbnRzIGlmIHR5cGUgYmluYXJ5XG4gICAgICAgIGlmIChwLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0VWRU5UIHx8XG4gICAgICAgICAgICBwLnR5cGUgPT09IFBhY2tldFR5cGUuQklOQVJZX0FDSykge1xuICAgICAgICAgICAgY29uc3Qgc3RhcnQgPSBpICsgMTtcbiAgICAgICAgICAgIHdoaWxlIChzdHIuY2hhckF0KCsraSkgIT09IFwiLVwiICYmIGkgIT0gc3RyLmxlbmd0aCkgeyB9XG4gICAgICAgICAgICBjb25zdCBidWYgPSBzdHIuc3Vic3RyaW5nKHN0YXJ0LCBpKTtcbiAgICAgICAgICAgIGlmIChidWYgIT0gTnVtYmVyKGJ1ZikgfHwgc3RyLmNoYXJBdChpKSAhPT0gXCItXCIpIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJJbGxlZ2FsIGF0dGFjaG1lbnRzXCIpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgcC5hdHRhY2htZW50cyA9IE51bWJlcihidWYpO1xuICAgICAgICB9XG4gICAgICAgIC8vIGxvb2sgdXAgbmFtZXNwYWNlIChpZiBhbnkpXG4gICAgICAgIGlmIChcIi9cIiA9PT0gc3RyLmNoYXJBdChpICsgMSkpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKFwiLFwiID09PSBjKVxuICAgICAgICAgICAgICAgICAgICBicmVhaztcbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLm5zcCA9IHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkpO1xuICAgICAgICB9XG4gICAgICAgIGVsc2Uge1xuICAgICAgICAgICAgcC5uc3AgPSBcIi9cIjtcbiAgICAgICAgfVxuICAgICAgICAvLyBsb29rIHVwIGlkXG4gICAgICAgIGNvbnN0IG5leHQgPSBzdHIuY2hhckF0KGkgKyAxKTtcbiAgICAgICAgaWYgKFwiXCIgIT09IG5leHQgJiYgTnVtYmVyKG5leHQpID09IG5leHQpIHtcbiAgICAgICAgICAgIGNvbnN0IHN0YXJ0ID0gaSArIDE7XG4gICAgICAgICAgICB3aGlsZSAoKytpKSB7XG4gICAgICAgICAgICAgICAgY29uc3QgYyA9IHN0ci5jaGFyQXQoaSk7XG4gICAgICAgICAgICAgICAgaWYgKG51bGwgPT0gYyB8fCBOdW1iZXIoYykgIT0gYykge1xuICAgICAgICAgICAgICAgICAgICAtLWk7XG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAoaSA9PT0gc3RyLmxlbmd0aClcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBwLmlkID0gTnVtYmVyKHN0ci5zdWJzdHJpbmcoc3RhcnQsIGkgKyAxKSk7XG4gICAgICAgIH1cbiAgICAgICAgLy8gbG9vayB1cCBqc29uIGRhdGFcbiAgICAgICAgaWYgKHN0ci5jaGFyQXQoKytpKSkge1xuICAgICAgICAgICAgY29uc3QgcGF5bG9hZCA9IHRyeVBhcnNlKHN0ci5zdWJzdHIoaSkpO1xuICAgICAgICAgICAgaWYgKERlY29kZXIuaXNQYXlsb2FkVmFsaWQocC50eXBlLCBwYXlsb2FkKSkge1xuICAgICAgICAgICAgICAgIHAuZGF0YSA9IHBheWxvYWQ7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoXCJpbnZhbGlkIHBheWxvYWRcIik7XG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgZGVidWcoXCJkZWNvZGVkICVzIGFzICVqXCIsIHN0ciwgcCk7XG4gICAgICAgIHJldHVybiBwO1xuICAgIH1cbiAgICBzdGF0aWMgaXNQYXlsb2FkVmFsaWQodHlwZSwgcGF5bG9hZCkge1xuICAgICAgICBzd2l0Y2ggKHR5cGUpIHtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5DT05ORUNUOlxuICAgICAgICAgICAgICAgIHJldHVybiB0eXBlb2YgcGF5bG9hZCA9PT0gXCJvYmplY3RcIjtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5ESVNDT05ORUNUOlxuICAgICAgICAgICAgICAgIHJldHVybiBwYXlsb2FkID09PSB1bmRlZmluZWQ7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQ09OTkVDVF9FUlJPUjpcbiAgICAgICAgICAgICAgICByZXR1cm4gdHlwZW9mIHBheWxvYWQgPT09IFwic3RyaW5nXCIgfHwgdHlwZW9mIHBheWxvYWQgPT09IFwib2JqZWN0XCI7XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuRVZFTlQ6XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQklOQVJZX0VWRU5UOlxuICAgICAgICAgICAgICAgIHJldHVybiBBcnJheS5pc0FycmF5KHBheWxvYWQpICYmIHBheWxvYWQubGVuZ3RoID4gMDtcbiAgICAgICAgICAgIGNhc2UgUGFja2V0VHlwZS5BQ0s6XG4gICAgICAgICAgICBjYXNlIFBhY2tldFR5cGUuQklOQVJZX0FDSzpcbiAgICAgICAgICAgICAgICByZXR1cm4gQXJyYXkuaXNBcnJheShwYXlsb2FkKTtcbiAgICAgICAgfVxuICAgIH1cbiAgICAvKipcbiAgICAgKiBEZWFsbG9jYXRlcyBhIHBhcnNlcidzIHJlc291cmNlc1xuICAgICAqL1xuICAgIGRlc3Ryb3koKSB7XG4gICAgICAgIGlmICh0aGlzLnJlY29uc3RydWN0b3IpIHtcbiAgICAgICAgICAgIHRoaXMucmVjb25zdHJ1Y3Rvci5maW5pc2hlZFJlY29uc3RydWN0aW9uKCk7XG4gICAgICAgIH1cbiAgICB9XG59XG5leHBvcnRzLkRlY29kZXIgPSBEZWNvZGVyO1xuZnVuY3Rpb24gdHJ5UGFyc2Uoc3RyKSB7XG4gICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIEpTT04ucGFyc2Uoc3RyKTtcbiAgICB9XG4gICAgY2F0Y2ggKGUpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgIH1cbn1cbi8qKlxuICogQSBtYW5hZ2VyIG9mIGEgYmluYXJ5IGV2ZW50J3MgJ2J1ZmZlciBzZXF1ZW5jZScuIFNob3VsZFxuICogYmUgY29uc3RydWN0ZWQgd2hlbmV2ZXIgYSBwYWNrZXQgb2YgdHlwZSBCSU5BUllfRVZFTlQgaXNcbiAqIGRlY29kZWQuXG4gKlxuICogQHBhcmFtIHtPYmplY3R9IHBhY2tldFxuICogQHJldHVybiB7QmluYXJ5UmVjb25zdHJ1Y3Rvcn0gaW5pdGlhbGl6ZWQgcmVjb25zdHJ1Y3RvclxuICovXG5jbGFzcyBCaW5hcnlSZWNvbnN0cnVjdG9yIHtcbiAgICBjb25zdHJ1Y3RvcihwYWNrZXQpIHtcbiAgICAgICAgdGhpcy5wYWNrZXQgPSBwYWNrZXQ7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgICAgICB0aGlzLnJlY29uUGFjayA9IHBhY2tldDtcbiAgICB9XG4gICAgLyoqXG4gICAgICogTWV0aG9kIHRvIGJlIGNhbGxlZCB3aGVuIGJpbmFyeSBkYXRhIHJlY2VpdmVkIGZyb20gY29ubmVjdGlvblxuICAgICAqIGFmdGVyIGEgQklOQVJZX0VWRU5UIHBhY2tldC5cbiAgICAgKlxuICAgICAqIEBwYXJhbSB7QnVmZmVyIHwgQXJyYXlCdWZmZXJ9IGJpbkRhdGEgLSB0aGUgcmF3IGJpbmFyeSBkYXRhIHJlY2VpdmVkXG4gICAgICogQHJldHVybiB7bnVsbCB8IE9iamVjdH0gcmV0dXJucyBudWxsIGlmIG1vcmUgYmluYXJ5IGRhdGEgaXMgZXhwZWN0ZWQgb3JcbiAgICAgKiAgIGEgcmVjb25zdHJ1Y3RlZCBwYWNrZXQgb2JqZWN0IGlmIGFsbCBidWZmZXJzIGhhdmUgYmVlbiByZWNlaXZlZC5cbiAgICAgKi9cbiAgICB0YWtlQmluYXJ5RGF0YShiaW5EYXRhKSB7XG4gICAgICAgIHRoaXMuYnVmZmVycy5wdXNoKGJpbkRhdGEpO1xuICAgICAgICBpZiAodGhpcy5idWZmZXJzLmxlbmd0aCA9PT0gdGhpcy5yZWNvblBhY2suYXR0YWNobWVudHMpIHtcbiAgICAgICAgICAgIC8vIGRvbmUgd2l0aCBidWZmZXIgbGlzdFxuICAgICAgICAgICAgY29uc3QgcGFja2V0ID0gYmluYXJ5XzEucmVjb25zdHJ1Y3RQYWNrZXQodGhpcy5yZWNvblBhY2ssIHRoaXMuYnVmZmVycyk7XG4gICAgICAgICAgICB0aGlzLmZpbmlzaGVkUmVjb25zdHJ1Y3Rpb24oKTtcbiAgICAgICAgICAgIHJldHVybiBwYWNrZXQ7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIG51bGw7XG4gICAgfVxuICAgIC8qKlxuICAgICAqIENsZWFucyB1cCBiaW5hcnkgcGFja2V0IHJlY29uc3RydWN0aW9uIHZhcmlhYmxlcy5cbiAgICAgKi9cbiAgICBmaW5pc2hlZFJlY29uc3RydWN0aW9uKCkge1xuICAgICAgICB0aGlzLnJlY29uUGFjayA9IG51bGw7XG4gICAgICAgIHRoaXMuYnVmZmVycyA9IFtdO1xuICAgIH1cbn1cbiIsIlwidXNlIHN0cmljdFwiO1xuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7IHZhbHVlOiB0cnVlIH0pO1xuZXhwb3J0cy5oYXNCaW5hcnkgPSBleHBvcnRzLmlzQmluYXJ5ID0gdm9pZCAwO1xuY29uc3Qgd2l0aE5hdGl2ZUFycmF5QnVmZmVyID0gdHlwZW9mIEFycmF5QnVmZmVyID09PSBcImZ1bmN0aW9uXCI7XG5jb25zdCBpc1ZpZXcgPSAob2JqKSA9PiB7XG4gICAgcmV0dXJuIHR5cGVvZiBBcnJheUJ1ZmZlci5pc1ZpZXcgPT09IFwiZnVuY3Rpb25cIlxuICAgICAgICA/IEFycmF5QnVmZmVyLmlzVmlldyhvYmopXG4gICAgICAgIDogb2JqLmJ1ZmZlciBpbnN0YW5jZW9mIEFycmF5QnVmZmVyO1xufTtcbmNvbnN0IHRvU3RyaW5nID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZztcbmNvbnN0IHdpdGhOYXRpdmVCbG9iID0gdHlwZW9mIEJsb2IgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgQmxvYiAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKEJsb2IpID09PSBcIltvYmplY3QgQmxvYkNvbnN0cnVjdG9yXVwiKTtcbmNvbnN0IHdpdGhOYXRpdmVGaWxlID0gdHlwZW9mIEZpbGUgPT09IFwiZnVuY3Rpb25cIiB8fFxuICAgICh0eXBlb2YgRmlsZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuICAgICAgICB0b1N0cmluZy5jYWxsKEZpbGUpID09PSBcIltvYmplY3QgRmlsZUNvbnN0cnVjdG9yXVwiKTtcbi8qKlxuICogUmV0dXJucyB0cnVlIGlmIG9iaiBpcyBhIEJ1ZmZlciwgYW4gQXJyYXlCdWZmZXIsIGEgQmxvYiBvciBhIEZpbGUuXG4gKlxuICogQHByaXZhdGVcbiAqL1xuZnVuY3Rpb24gaXNCaW5hcnkob2JqKSB7XG4gICAgcmV0dXJuICgod2l0aE5hdGl2ZUFycmF5QnVmZmVyICYmIChvYmogaW5zdGFuY2VvZiBBcnJheUJ1ZmZlciB8fCBpc1ZpZXcob2JqKSkpIHx8XG4gICAgICAgICh3aXRoTmF0aXZlQmxvYiAmJiBvYmogaW5zdGFuY2VvZiBCbG9iKSB8fFxuICAgICAgICAod2l0aE5hdGl2ZUZpbGUgJiYgb2JqIGluc3RhbmNlb2YgRmlsZSkpO1xufVxuZXhwb3J0cy5pc0JpbmFyeSA9IGlzQmluYXJ5O1xuZnVuY3Rpb24gaGFzQmluYXJ5KG9iaiwgdG9KU09OKSB7XG4gICAgaWYgKCFvYmogfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIikge1xuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KG9iaikpIHtcbiAgICAgICAgZm9yIChsZXQgaSA9IDAsIGwgPSBvYmoubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgICBpZiAoaGFzQmluYXJ5KG9ialtpXSkpIHtcbiAgICAgICAgICAgICAgICByZXR1cm4gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgfVxuICAgIGlmIChpc0JpbmFyeShvYmopKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgIH1cbiAgICBpZiAob2JqLnRvSlNPTiAmJlxuICAgICAgICB0eXBlb2Ygb2JqLnRvSlNPTiA9PT0gXCJmdW5jdGlvblwiICYmXG4gICAgICAgIGFyZ3VtZW50cy5sZW5ndGggPT09IDEpIHtcbiAgICAgICAgcmV0dXJuIGhhc0JpbmFyeShvYmoudG9KU09OKCksIHRydWUpO1xuICAgIH1cbiAgICBmb3IgKGNvbnN0IGtleSBpbiBvYmopIHtcbiAgICAgICAgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkgJiYgaGFzQmluYXJ5KG9ialtrZXldKSkge1xuICAgICAgICAgICAgcmV0dXJuIHRydWU7XG4gICAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlO1xufVxuZXhwb3J0cy5oYXNCaW5hcnkgPSBoYXNCaW5hcnk7XG4iLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIHN0eWxlc0luRG9tID0gW107XG5cbmZ1bmN0aW9uIGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpIHtcbiAgdmFyIHJlc3VsdCA9IC0xO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgc3R5bGVzSW5Eb20ubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoc3R5bGVzSW5Eb21baV0uaWRlbnRpZmllciA9PT0gaWRlbnRpZmllcikge1xuICAgICAgcmVzdWx0ID0gaTtcbiAgICAgIGJyZWFrO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiByZXN1bHQ7XG59XG5cbmZ1bmN0aW9uIG1vZHVsZXNUb0RvbShsaXN0LCBvcHRpb25zKSB7XG4gIHZhciBpZENvdW50TWFwID0ge307XG4gIHZhciBpZGVudGlmaWVycyA9IFtdO1xuXG4gIGZvciAodmFyIGkgPSAwOyBpIDwgbGlzdC5sZW5ndGg7IGkrKykge1xuICAgIHZhciBpdGVtID0gbGlzdFtpXTtcbiAgICB2YXIgaWQgPSBvcHRpb25zLmJhc2UgPyBpdGVtWzBdICsgb3B0aW9ucy5iYXNlIDogaXRlbVswXTtcbiAgICB2YXIgY291bnQgPSBpZENvdW50TWFwW2lkXSB8fCAwO1xuICAgIHZhciBpZGVudGlmaWVyID0gXCJcIi5jb25jYXQoaWQsIFwiIFwiKS5jb25jYXQoY291bnQpO1xuICAgIGlkQ291bnRNYXBbaWRdID0gY291bnQgKyAxO1xuICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgIHZhciBvYmogPSB7XG4gICAgICBjc3M6IGl0ZW1bMV0sXG4gICAgICBtZWRpYTogaXRlbVsyXSxcbiAgICAgIHNvdXJjZU1hcDogaXRlbVszXVxuICAgIH07XG5cbiAgICBpZiAoaW5kZXggIT09IC0xKSB7XG4gICAgICBzdHlsZXNJbkRvbVtpbmRleF0ucmVmZXJlbmNlcysrO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnVwZGF0ZXIob2JqKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3R5bGVzSW5Eb20ucHVzaCh7XG4gICAgICAgIGlkZW50aWZpZXI6IGlkZW50aWZpZXIsXG4gICAgICAgIHVwZGF0ZXI6IGFkZFN0eWxlKG9iaiwgb3B0aW9ucyksXG4gICAgICAgIHJlZmVyZW5jZXM6IDFcbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlkZW50aWZpZXJzLnB1c2goaWRlbnRpZmllcik7XG4gIH1cblxuICByZXR1cm4gaWRlbnRpZmllcnM7XG59XG5cbmZ1bmN0aW9uIGFkZFN0eWxlKG9iaiwgb3B0aW9ucykge1xuICB2YXIgYXBpID0gb3B0aW9ucy5kb21BUEkob3B0aW9ucyk7XG4gIGFwaS51cGRhdGUob2JqKTtcbiAgcmV0dXJuIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlKG5ld09iaikge1xuICAgIGlmIChuZXdPYmopIHtcbiAgICAgIGlmIChuZXdPYmouY3NzID09PSBvYmouY3NzICYmIG5ld09iai5tZWRpYSA9PT0gb2JqLm1lZGlhICYmIG5ld09iai5zb3VyY2VNYXAgPT09IG9iai5zb3VyY2VNYXApIHtcbiAgICAgICAgcmV0dXJuO1xuICAgICAgfVxuXG4gICAgICBhcGkudXBkYXRlKG9iaiA9IG5ld09iaik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGFwaS5yZW1vdmUoKTtcbiAgICB9XG4gIH07XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24gKGxpc3QsIG9wdGlvbnMpIHtcbiAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gIGxpc3QgPSBsaXN0IHx8IFtdO1xuICB2YXIgbGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKGxpc3QsIG9wdGlvbnMpO1xuICByZXR1cm4gZnVuY3Rpb24gdXBkYXRlKG5ld0xpc3QpIHtcbiAgICBuZXdMaXN0ID0gbmV3TGlzdCB8fCBbXTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGFzdElkZW50aWZpZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tpXTtcbiAgICAgIHZhciBpbmRleCA9IGdldEluZGV4QnlJZGVudGlmaWVyKGlkZW50aWZpZXIpO1xuICAgICAgc3R5bGVzSW5Eb21baW5kZXhdLnJlZmVyZW5jZXMtLTtcbiAgICB9XG5cbiAgICB2YXIgbmV3TGFzdElkZW50aWZpZXJzID0gbW9kdWxlc1RvRG9tKG5ld0xpc3QsIG9wdGlvbnMpO1xuXG4gICAgZm9yICh2YXIgX2kgPSAwOyBfaSA8IGxhc3RJZGVudGlmaWVycy5sZW5ndGg7IF9pKyspIHtcbiAgICAgIHZhciBfaWRlbnRpZmllciA9IGxhc3RJZGVudGlmaWVyc1tfaV07XG5cbiAgICAgIHZhciBfaW5kZXggPSBnZXRJbmRleEJ5SWRlbnRpZmllcihfaWRlbnRpZmllcik7XG5cbiAgICAgIGlmIChzdHlsZXNJbkRvbVtfaW5kZXhdLnJlZmVyZW5jZXMgPT09IDApIHtcbiAgICAgICAgc3R5bGVzSW5Eb21bX2luZGV4XS51cGRhdGVyKCk7XG5cbiAgICAgICAgc3R5bGVzSW5Eb20uc3BsaWNlKF9pbmRleCwgMSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgbGFzdElkZW50aWZpZXJzID0gbmV3TGFzdElkZW50aWZpZXJzO1xuICB9O1xufTsiLCJcInVzZSBzdHJpY3RcIjtcblxudmFyIG1lbW8gPSB7fTtcbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5mdW5jdGlvbiBnZXRUYXJnZXQodGFyZ2V0KSB7XG4gIGlmICh0eXBlb2YgbWVtb1t0YXJnZXRdID09PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgdmFyIHN0eWxlVGFyZ2V0ID0gZG9jdW1lbnQucXVlcnlTZWxlY3Rvcih0YXJnZXQpOyAvLyBTcGVjaWFsIGNhc2UgdG8gcmV0dXJuIGhlYWQgb2YgaWZyYW1lIGluc3RlYWQgb2YgaWZyYW1lIGl0c2VsZlxuXG4gICAgaWYgKHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCAmJiBzdHlsZVRhcmdldCBpbnN0YW5jZW9mIHdpbmRvdy5IVE1MSUZyYW1lRWxlbWVudCkge1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhpcyB3aWxsIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhY2Nlc3MgdG8gaWZyYW1lIGlzIGJsb2NrZWRcbiAgICAgICAgLy8gZHVlIHRvIGNyb3NzLW9yaWdpbiByZXN0cmljdGlvbnNcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBzdHlsZVRhcmdldC5jb250ZW50RG9jdW1lbnQuaGVhZDtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgLy8gaXN0YW5idWwgaWdub3JlIG5leHRcbiAgICAgICAgc3R5bGVUYXJnZXQgPSBudWxsO1xuICAgICAgfVxuICAgIH1cblxuICAgIG1lbW9bdGFyZ2V0XSA9IHN0eWxlVGFyZ2V0O1xuICB9XG5cbiAgcmV0dXJuIG1lbW9bdGFyZ2V0XTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGluc2VydEJ5U2VsZWN0b3IoaW5zZXJ0LCBzdHlsZSkge1xuICB2YXIgdGFyZ2V0ID0gZ2V0VGFyZ2V0KGluc2VydCk7XG5cbiAgaWYgKCF0YXJnZXQpIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoXCJDb3VsZG4ndCBmaW5kIGEgc3R5bGUgdGFyZ2V0LiBUaGlzIHByb2JhYmx5IG1lYW5zIHRoYXQgdGhlIHZhbHVlIGZvciB0aGUgJ2luc2VydCcgcGFyYW1ldGVyIGlzIGludmFsaWQuXCIpO1xuICB9XG5cbiAgdGFyZ2V0LmFwcGVuZENoaWxkKHN0eWxlKTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRCeVNlbGVjdG9yOyIsIlwidXNlIHN0cmljdFwiO1xuXG4vKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAgKi9cbmZ1bmN0aW9uIGluc2VydFN0eWxlRWxlbWVudChvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJzdHlsZVwiKTtcbiAgb3B0aW9ucy5zZXRBdHRyaWJ1dGVzKHN0eWxlLCBvcHRpb25zLmF0dHJpYnV0ZXMpO1xuICBvcHRpb25zLmluc2VydChzdHlsZSk7XG4gIHJldHVybiBzdHlsZTtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBpbnNlcnRTdHlsZUVsZW1lbnQ7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzKHN0eWxlKSB7XG4gIHZhciBub25jZSA9IHR5cGVvZiBfX3dlYnBhY2tfbm9uY2VfXyAhPT0gXCJ1bmRlZmluZWRcIiA/IF9fd2VicGFja19ub25jZV9fIDogbnVsbDtcblxuICBpZiAobm9uY2UpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJub25jZVwiLCBub25jZSk7XG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBzZXRBdHRyaWJ1dGVzV2l0aG91dEF0dHJpYnV0ZXM7IiwiXCJ1c2Ugc3RyaWN0XCI7XG5cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuZnVuY3Rpb24gYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaikge1xuICB2YXIgY3NzID0gb2JqLmNzcztcbiAgdmFyIG1lZGlhID0gb2JqLm1lZGlhO1xuICB2YXIgc291cmNlTWFwID0gb2JqLnNvdXJjZU1hcDtcblxuICBpZiAobWVkaWEpIHtcbiAgICBzdHlsZS5zZXRBdHRyaWJ1dGUoXCJtZWRpYVwiLCBtZWRpYSk7XG4gIH0gZWxzZSB7XG4gICAgc3R5bGUucmVtb3ZlQXR0cmlidXRlKFwibWVkaWFcIik7XG4gIH1cblxuICBpZiAoc291cmNlTWFwICYmIHR5cGVvZiBidG9hICE9PSBcInVuZGVmaW5lZFwiKSB7XG4gICAgY3NzICs9IFwiXFxuLyojIHNvdXJjZU1hcHBpbmdVUkw9ZGF0YTphcHBsaWNhdGlvbi9qc29uO2Jhc2U2NCxcIi5jb25jYXQoYnRvYSh1bmVzY2FwZShlbmNvZGVVUklDb21wb25lbnQoSlNPTi5zdHJpbmdpZnkoc291cmNlTWFwKSkpKSwgXCIgKi9cIik7XG4gIH0gLy8gRm9yIG9sZCBJRVxuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAgKi9cblxuXG4gIG9wdGlvbnMuc3R5bGVUYWdUcmFuc2Zvcm0oY3NzLCBzdHlsZSk7XG59XG5cbmZ1bmN0aW9uIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSkge1xuICAvLyBpc3RhbmJ1bCBpZ25vcmUgaWZcbiAgaWYgKHN0eWxlLnBhcmVudE5vZGUgPT09IG51bGwpIHtcbiAgICByZXR1cm4gZmFsc2U7XG4gIH1cblxuICBzdHlsZS5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHN0eWxlKTtcbn1cbi8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICAqL1xuXG5cbmZ1bmN0aW9uIGRvbUFQSShvcHRpb25zKSB7XG4gIHZhciBzdHlsZSA9IG9wdGlvbnMuaW5zZXJ0U3R5bGVFbGVtZW50KG9wdGlvbnMpO1xuICByZXR1cm4ge1xuICAgIHVwZGF0ZTogZnVuY3Rpb24gdXBkYXRlKG9iaikge1xuICAgICAgYXBwbHkoc3R5bGUsIG9wdGlvbnMsIG9iaik7XG4gICAgfSxcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSgpIHtcbiAgICAgIHJlbW92ZVN0eWxlRWxlbWVudChzdHlsZSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGRvbUFQSTsiLCJcInVzZSBzdHJpY3RcIjtcblxuLyogaXN0YW5idWwgaWdub3JlIG5leHQgICovXG5mdW5jdGlvbiBzdHlsZVRhZ1RyYW5zZm9ybShjc3MsIHN0eWxlKSB7XG4gIGlmIChzdHlsZS5zdHlsZVNoZWV0KSB7XG4gICAgc3R5bGUuc3R5bGVTaGVldC5jc3NUZXh0ID0gY3NzO1xuICB9IGVsc2Uge1xuICAgIHdoaWxlIChzdHlsZS5maXJzdENoaWxkKSB7XG4gICAgICBzdHlsZS5yZW1vdmVDaGlsZChzdHlsZS5maXJzdENoaWxkKTtcbiAgICB9XG5cbiAgICBzdHlsZS5hcHBlbmRDaGlsZChkb2N1bWVudC5jcmVhdGVUZXh0Tm9kZShjc3MpKTtcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHN0eWxlVGFnVHJhbnNmb3JtOyIsIi8qISAqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKlxyXG5Db3B5cmlnaHQgKGMpIE1pY3Jvc29mdCBDb3Jwb3JhdGlvbi5cclxuXHJcblBlcm1pc3Npb24gdG8gdXNlLCBjb3B5LCBtb2RpZnksIGFuZC9vciBkaXN0cmlidXRlIHRoaXMgc29mdHdhcmUgZm9yIGFueVxyXG5wdXJwb3NlIHdpdGggb3Igd2l0aG91dCBmZWUgaXMgaGVyZWJ5IGdyYW50ZWQuXHJcblxyXG5USEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiIEFORCBUSEUgQVVUSE9SIERJU0NMQUlNUyBBTEwgV0FSUkFOVElFUyBXSVRIXHJcblJFR0FSRCBUTyBUSElTIFNPRlRXQVJFIElOQ0xVRElORyBBTEwgSU1QTElFRCBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWVxyXG5BTkQgRklUTkVTUy4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFIEFVVEhPUiBCRSBMSUFCTEUgRk9SIEFOWSBTUEVDSUFMLCBESVJFQ1QsXHJcbklORElSRUNULCBPUiBDT05TRVFVRU5USUFMIERBTUFHRVMgT1IgQU5ZIERBTUFHRVMgV0hBVFNPRVZFUiBSRVNVTFRJTkcgRlJPTVxyXG5MT1NTIE9GIFVTRSwgREFUQSBPUiBQUk9GSVRTLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgTkVHTElHRU5DRSBPUlxyXG5PVEhFUiBUT1JUSU9VUyBBQ1RJT04sIEFSSVNJTkcgT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgVVNFIE9SXHJcblBFUkZPUk1BTkNFIE9GIFRISVMgU09GVFdBUkUuXHJcbioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqKioqICovXHJcbi8qIGdsb2JhbCBSZWZsZWN0LCBQcm9taXNlICovXHJcblxyXG52YXIgZXh0ZW5kU3RhdGljcyA9IGZ1bmN0aW9uKGQsIGIpIHtcclxuICAgIGV4dGVuZFN0YXRpY3MgPSBPYmplY3Quc2V0UHJvdG90eXBlT2YgfHxcclxuICAgICAgICAoeyBfX3Byb3RvX186IFtdIH0gaW5zdGFuY2VvZiBBcnJheSAmJiBmdW5jdGlvbiAoZCwgYikgeyBkLl9fcHJvdG9fXyA9IGI7IH0pIHx8XHJcbiAgICAgICAgZnVuY3Rpb24gKGQsIGIpIHsgZm9yICh2YXIgcCBpbiBiKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKGIsIHApKSBkW3BdID0gYltwXTsgfTtcclxuICAgIHJldHVybiBleHRlbmRTdGF0aWNzKGQsIGIpO1xyXG59O1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZXh0ZW5kcyhkLCBiKSB7XHJcbiAgICBpZiAodHlwZW9mIGIgIT09IFwiZnVuY3Rpb25cIiAmJiBiICE9PSBudWxsKVxyXG4gICAgICAgIHRocm93IG5ldyBUeXBlRXJyb3IoXCJDbGFzcyBleHRlbmRzIHZhbHVlIFwiICsgU3RyaW5nKGIpICsgXCIgaXMgbm90IGEgY29uc3RydWN0b3Igb3IgbnVsbFwiKTtcclxuICAgIGV4dGVuZFN0YXRpY3MoZCwgYik7XHJcbiAgICBmdW5jdGlvbiBfXygpIHsgdGhpcy5jb25zdHJ1Y3RvciA9IGQ7IH1cclxuICAgIGQucHJvdG90eXBlID0gYiA9PT0gbnVsbCA/IE9iamVjdC5jcmVhdGUoYikgOiAoX18ucHJvdG90eXBlID0gYi5wcm90b3R5cGUsIG5ldyBfXygpKTtcclxufVxyXG5cclxuZXhwb3J0IHZhciBfX2Fzc2lnbiA9IGZ1bmN0aW9uKCkge1xyXG4gICAgX19hc3NpZ24gPSBPYmplY3QuYXNzaWduIHx8IGZ1bmN0aW9uIF9fYXNzaWduKHQpIHtcclxuICAgICAgICBmb3IgKHZhciBzLCBpID0gMSwgbiA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBuOyBpKyspIHtcclxuICAgICAgICAgICAgcyA9IGFyZ3VtZW50c1tpXTtcclxuICAgICAgICAgICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApKSB0W3BdID0gc1twXTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gX19hc3NpZ24uYXBwbHkodGhpcywgYXJndW1lbnRzKTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fcmVzdChzLCBlKSB7XHJcbiAgICB2YXIgdCA9IHt9O1xyXG4gICAgZm9yICh2YXIgcCBpbiBzKSBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHMsIHApICYmIGUuaW5kZXhPZihwKSA8IDApXHJcbiAgICAgICAgdFtwXSA9IHNbcF07XHJcbiAgICBpZiAocyAhPSBudWxsICYmIHR5cGVvZiBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzID09PSBcImZ1bmN0aW9uXCIpXHJcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIHAgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHMpOyBpIDwgcC5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgICAgICBpZiAoZS5pbmRleE9mKHBbaV0pIDwgMCAmJiBPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwocywgcFtpXSkpXHJcbiAgICAgICAgICAgICAgICB0W3BbaV1dID0gc1twW2ldXTtcclxuICAgICAgICB9XHJcbiAgICByZXR1cm4gdDtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpIHtcclxuICAgIHZhciBjID0gYXJndW1lbnRzLmxlbmd0aCwgciA9IGMgPCAzID8gdGFyZ2V0IDogZGVzYyA9PT0gbnVsbCA/IGRlc2MgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKHRhcmdldCwga2V5KSA6IGRlc2MsIGQ7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QuZGVjb3JhdGUgPT09IFwiZnVuY3Rpb25cIikgciA9IFJlZmxlY3QuZGVjb3JhdGUoZGVjb3JhdG9ycywgdGFyZ2V0LCBrZXksIGRlc2MpO1xyXG4gICAgZWxzZSBmb3IgKHZhciBpID0gZGVjb3JhdG9ycy5sZW5ndGggLSAxOyBpID49IDA7IGktLSkgaWYgKGQgPSBkZWNvcmF0b3JzW2ldKSByID0gKGMgPCAzID8gZChyKSA6IGMgPiAzID8gZCh0YXJnZXQsIGtleSwgcikgOiBkKHRhcmdldCwga2V5KSkgfHwgcjtcclxuICAgIHJldHVybiBjID4gMyAmJiByICYmIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgciksIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3BhcmFtKHBhcmFtSW5kZXgsIGRlY29yYXRvcikge1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uICh0YXJnZXQsIGtleSkgeyBkZWNvcmF0b3IodGFyZ2V0LCBrZXksIHBhcmFtSW5kZXgpOyB9XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX21ldGFkYXRhKG1ldGFkYXRhS2V5LCBtZXRhZGF0YVZhbHVlKSB7XHJcbiAgICBpZiAodHlwZW9mIFJlZmxlY3QgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIFJlZmxlY3QubWV0YWRhdGEgPT09IFwiZnVuY3Rpb25cIikgcmV0dXJuIFJlZmxlY3QubWV0YWRhdGEobWV0YWRhdGFLZXksIG1ldGFkYXRhVmFsdWUpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hd2FpdGVyKHRoaXNBcmcsIF9hcmd1bWVudHMsIFAsIGdlbmVyYXRvcikge1xyXG4gICAgZnVuY3Rpb24gYWRvcHQodmFsdWUpIHsgcmV0dXJuIHZhbHVlIGluc3RhbmNlb2YgUCA/IHZhbHVlIDogbmV3IFAoZnVuY3Rpb24gKHJlc29sdmUpIHsgcmVzb2x2ZSh2YWx1ZSk7IH0pOyB9XHJcbiAgICByZXR1cm4gbmV3IChQIHx8IChQID0gUHJvbWlzZSkpKGZ1bmN0aW9uIChyZXNvbHZlLCByZWplY3QpIHtcclxuICAgICAgICBmdW5jdGlvbiBmdWxmaWxsZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3IubmV4dCh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gcmVqZWN0ZWQodmFsdWUpIHsgdHJ5IHsgc3RlcChnZW5lcmF0b3JbXCJ0aHJvd1wiXSh2YWx1ZSkpOyB9IGNhdGNoIChlKSB7IHJlamVjdChlKTsgfSB9XHJcbiAgICAgICAgZnVuY3Rpb24gc3RlcChyZXN1bHQpIHsgcmVzdWx0LmRvbmUgPyByZXNvbHZlKHJlc3VsdC52YWx1ZSkgOiBhZG9wdChyZXN1bHQudmFsdWUpLnRoZW4oZnVsZmlsbGVkLCByZWplY3RlZCk7IH1cclxuICAgICAgICBzdGVwKChnZW5lcmF0b3IgPSBnZW5lcmF0b3IuYXBwbHkodGhpc0FyZywgX2FyZ3VtZW50cyB8fCBbXSkpLm5leHQoKSk7XHJcbiAgICB9KTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fZ2VuZXJhdG9yKHRoaXNBcmcsIGJvZHkpIHtcclxuICAgIHZhciBfID0geyBsYWJlbDogMCwgc2VudDogZnVuY3Rpb24oKSB7IGlmICh0WzBdICYgMSkgdGhyb3cgdFsxXTsgcmV0dXJuIHRbMV07IH0sIHRyeXM6IFtdLCBvcHM6IFtdIH0sIGYsIHksIHQsIGc7XHJcbiAgICByZXR1cm4gZyA9IHsgbmV4dDogdmVyYigwKSwgXCJ0aHJvd1wiOiB2ZXJiKDEpLCBcInJldHVyblwiOiB2ZXJiKDIpIH0sIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiAoZ1tTeW1ib2wuaXRlcmF0b3JdID0gZnVuY3Rpb24oKSB7IHJldHVybiB0aGlzOyB9KSwgZztcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyByZXR1cm4gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIHN0ZXAoW24sIHZdKTsgfTsgfVxyXG4gICAgZnVuY3Rpb24gc3RlcChvcCkge1xyXG4gICAgICAgIGlmIChmKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiR2VuZXJhdG9yIGlzIGFscmVhZHkgZXhlY3V0aW5nLlwiKTtcclxuICAgICAgICB3aGlsZSAoXykgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKGYgPSAxLCB5ICYmICh0ID0gb3BbMF0gJiAyID8geVtcInJldHVyblwiXSA6IG9wWzBdID8geVtcInRocm93XCJdIHx8ICgodCA9IHlbXCJyZXR1cm5cIl0pICYmIHQuY2FsbCh5KSwgMCkgOiB5Lm5leHQpICYmICEodCA9IHQuY2FsbCh5LCBvcFsxXSkpLmRvbmUpIHJldHVybiB0O1xyXG4gICAgICAgICAgICBpZiAoeSA9IDAsIHQpIG9wID0gW29wWzBdICYgMiwgdC52YWx1ZV07XHJcbiAgICAgICAgICAgIHN3aXRjaCAob3BbMF0pIHtcclxuICAgICAgICAgICAgICAgIGNhc2UgMDogY2FzZSAxOiB0ID0gb3A7IGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSA0OiBfLmxhYmVsKys7IHJldHVybiB7IHZhbHVlOiBvcFsxXSwgZG9uZTogZmFsc2UgfTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNTogXy5sYWJlbCsrOyB5ID0gb3BbMV07IG9wID0gWzBdOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGNhc2UgNzogb3AgPSBfLm9wcy5wb3AoKTsgXy50cnlzLnBvcCgpOyBjb250aW51ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKCEodCA9IF8udHJ5cywgdCA9IHQubGVuZ3RoID4gMCAmJiB0W3QubGVuZ3RoIC0gMV0pICYmIChvcFswXSA9PT0gNiB8fCBvcFswXSA9PT0gMikpIHsgXyA9IDA7IGNvbnRpbnVlOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKG9wWzBdID09PSAzICYmICghdCB8fCAob3BbMV0gPiB0WzBdICYmIG9wWzFdIDwgdFszXSkpKSB7IF8ubGFiZWwgPSBvcFsxXTsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAob3BbMF0gPT09IDYgJiYgXy5sYWJlbCA8IHRbMV0pIHsgXy5sYWJlbCA9IHRbMV07IHQgPSBvcDsgYnJlYWs7IH1cclxuICAgICAgICAgICAgICAgICAgICBpZiAodCAmJiBfLmxhYmVsIDwgdFsyXSkgeyBfLmxhYmVsID0gdFsyXTsgXy5vcHMucHVzaChvcCk7IGJyZWFrOyB9XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKHRbMl0pIF8ub3BzLnBvcCgpO1xyXG4gICAgICAgICAgICAgICAgICAgIF8udHJ5cy5wb3AoKTsgY29udGludWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3AgPSBib2R5LmNhbGwodGhpc0FyZywgXyk7XHJcbiAgICAgICAgfSBjYXRjaCAoZSkgeyBvcCA9IFs2LCBlXTsgeSA9IDA7IH0gZmluYWxseSB7IGYgPSB0ID0gMDsgfVxyXG4gICAgICAgIGlmIChvcFswXSAmIDUpIHRocm93IG9wWzFdOyByZXR1cm4geyB2YWx1ZTogb3BbMF0gPyBvcFsxXSA6IHZvaWQgMCwgZG9uZTogdHJ1ZSB9O1xyXG4gICAgfVxyXG59XHJcblxyXG5leHBvcnQgdmFyIF9fY3JlYXRlQmluZGluZyA9IE9iamVjdC5jcmVhdGUgPyAoZnVuY3Rpb24obywgbSwgaywgazIpIHtcclxuICAgIGlmIChrMiA9PT0gdW5kZWZpbmVkKSBrMiA9IGs7XHJcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobywgazIsIHsgZW51bWVyYWJsZTogdHJ1ZSwgZ2V0OiBmdW5jdGlvbigpIHsgcmV0dXJuIG1ba107IH0gfSk7XHJcbn0pIDogKGZ1bmN0aW9uKG8sIG0sIGssIGsyKSB7XHJcbiAgICBpZiAoazIgPT09IHVuZGVmaW5lZCkgazIgPSBrO1xyXG4gICAgb1trMl0gPSBtW2tdO1xyXG59KTtcclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2V4cG9ydFN0YXIobSwgbykge1xyXG4gICAgZm9yICh2YXIgcCBpbiBtKSBpZiAocCAhPT0gXCJkZWZhdWx0XCIgJiYgIU9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvLCBwKSkgX19jcmVhdGVCaW5kaW5nKG8sIG0sIHApO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX192YWx1ZXMobykge1xyXG4gICAgdmFyIHMgPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgU3ltYm9sLml0ZXJhdG9yLCBtID0gcyAmJiBvW3NdLCBpID0gMDtcclxuICAgIGlmIChtKSByZXR1cm4gbS5jYWxsKG8pO1xyXG4gICAgaWYgKG8gJiYgdHlwZW9mIG8ubGVuZ3RoID09PSBcIm51bWJlclwiKSByZXR1cm4ge1xyXG4gICAgICAgIG5leHQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgaWYgKG8gJiYgaSA+PSBvLmxlbmd0aCkgbyA9IHZvaWQgMDtcclxuICAgICAgICAgICAgcmV0dXJuIHsgdmFsdWU6IG8gJiYgb1tpKytdLCBkb25lOiAhbyB9O1xyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aHJvdyBuZXcgVHlwZUVycm9yKHMgPyBcIk9iamVjdCBpcyBub3QgaXRlcmFibGUuXCIgOiBcIlN5bWJvbC5pdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3JlYWQobywgbikge1xyXG4gICAgdmFyIG0gPSB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgJiYgb1tTeW1ib2wuaXRlcmF0b3JdO1xyXG4gICAgaWYgKCFtKSByZXR1cm4gbztcclxuICAgIHZhciBpID0gbS5jYWxsKG8pLCByLCBhciA9IFtdLCBlO1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB3aGlsZSAoKG4gPT09IHZvaWQgMCB8fCBuLS0gPiAwKSAmJiAhKHIgPSBpLm5leHQoKSkuZG9uZSkgYXIucHVzaChyLnZhbHVlKTtcclxuICAgIH1cclxuICAgIGNhdGNoIChlcnJvcikgeyBlID0geyBlcnJvcjogZXJyb3IgfTsgfVxyXG4gICAgZmluYWxseSB7XHJcbiAgICAgICAgdHJ5IHtcclxuICAgICAgICAgICAgaWYgKHIgJiYgIXIuZG9uZSAmJiAobSA9IGlbXCJyZXR1cm5cIl0pKSBtLmNhbGwoaSk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGZpbmFsbHkgeyBpZiAoZSkgdGhyb3cgZS5lcnJvcjsgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkKCkge1xyXG4gICAgZm9yICh2YXIgYXIgPSBbXSwgaSA9IDA7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspXHJcbiAgICAgICAgYXIgPSBhci5jb25jYXQoX19yZWFkKGFyZ3VtZW50c1tpXSkpO1xyXG4gICAgcmV0dXJuIGFyO1xyXG59XHJcblxyXG4vKiogQGRlcHJlY2F0ZWQgKi9cclxuZXhwb3J0IGZ1bmN0aW9uIF9fc3ByZWFkQXJyYXlzKCkge1xyXG4gICAgZm9yICh2YXIgcyA9IDAsIGkgPSAwLCBpbCA9IGFyZ3VtZW50cy5sZW5ndGg7IGkgPCBpbDsgaSsrKSBzICs9IGFyZ3VtZW50c1tpXS5sZW5ndGg7XHJcbiAgICBmb3IgKHZhciByID0gQXJyYXkocyksIGsgPSAwLCBpID0gMDsgaSA8IGlsOyBpKyspXHJcbiAgICAgICAgZm9yICh2YXIgYSA9IGFyZ3VtZW50c1tpXSwgaiA9IDAsIGpsID0gYS5sZW5ndGg7IGogPCBqbDsgaisrLCBrKyspXHJcbiAgICAgICAgICAgIHJba10gPSBhW2pdO1xyXG4gICAgcmV0dXJuIHI7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX3NwcmVhZEFycmF5KHRvLCBmcm9tLCBwYWNrKSB7XHJcbiAgICBpZiAocGFjayB8fCBhcmd1bWVudHMubGVuZ3RoID09PSAyKSBmb3IgKHZhciBpID0gMCwgbCA9IGZyb20ubGVuZ3RoLCBhcjsgaSA8IGw7IGkrKykge1xyXG4gICAgICAgIGlmIChhciB8fCAhKGkgaW4gZnJvbSkpIHtcclxuICAgICAgICAgICAgaWYgKCFhcikgYXIgPSBBcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChmcm9tLCAwLCBpKTtcclxuICAgICAgICAgICAgYXJbaV0gPSBmcm9tW2ldO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB0by5jb25jYXQoYXIgfHwgZnJvbSk7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2F3YWl0KHYpIHtcclxuICAgIHJldHVybiB0aGlzIGluc3RhbmNlb2YgX19hd2FpdCA/ICh0aGlzLnYgPSB2LCB0aGlzKSA6IG5ldyBfX2F3YWl0KHYpO1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY0dlbmVyYXRvcih0aGlzQXJnLCBfYXJndW1lbnRzLCBnZW5lcmF0b3IpIHtcclxuICAgIGlmICghU3ltYm9sLmFzeW5jSXRlcmF0b3IpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJTeW1ib2wuYXN5bmNJdGVyYXRvciBpcyBub3QgZGVmaW5lZC5cIik7XHJcbiAgICB2YXIgZyA9IGdlbmVyYXRvci5hcHBseSh0aGlzQXJnLCBfYXJndW1lbnRzIHx8IFtdKSwgaSwgcSA9IFtdO1xyXG4gICAgcmV0dXJuIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuKSB7IGlmIChnW25dKSBpW25dID0gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChhLCBiKSB7IHEucHVzaChbbiwgdiwgYSwgYl0pID4gMSB8fCByZXN1bWUobiwgdik7IH0pOyB9OyB9XHJcbiAgICBmdW5jdGlvbiByZXN1bWUobiwgdikgeyB0cnkgeyBzdGVwKGdbbl0odikpOyB9IGNhdGNoIChlKSB7IHNldHRsZShxWzBdWzNdLCBlKTsgfSB9XHJcbiAgICBmdW5jdGlvbiBzdGVwKHIpIHsgci52YWx1ZSBpbnN0YW5jZW9mIF9fYXdhaXQgPyBQcm9taXNlLnJlc29sdmUoci52YWx1ZS52KS50aGVuKGZ1bGZpbGwsIHJlamVjdCkgOiBzZXR0bGUocVswXVsyXSwgcik7IH1cclxuICAgIGZ1bmN0aW9uIGZ1bGZpbGwodmFsdWUpIHsgcmVzdW1lKFwibmV4dFwiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHJlamVjdCh2YWx1ZSkgeyByZXN1bWUoXCJ0aHJvd1wiLCB2YWx1ZSk7IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShmLCB2KSB7IGlmIChmKHYpLCBxLnNoaWZ0KCksIHEubGVuZ3RoKSByZXN1bWUocVswXVswXSwgcVswXVsxXSk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fYXN5bmNEZWxlZ2F0b3Iobykge1xyXG4gICAgdmFyIGksIHA7XHJcbiAgICByZXR1cm4gaSA9IHt9LCB2ZXJiKFwibmV4dFwiKSwgdmVyYihcInRocm93XCIsIGZ1bmN0aW9uIChlKSB7IHRocm93IGU7IH0pLCB2ZXJiKFwicmV0dXJuXCIpLCBpW1N5bWJvbC5pdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpO1xyXG4gICAgZnVuY3Rpb24gdmVyYihuLCBmKSB7IGlbbl0gPSBvW25dID8gZnVuY3Rpb24gKHYpIHsgcmV0dXJuIChwID0gIXApID8geyB2YWx1ZTogX19hd2FpdChvW25dKHYpKSwgZG9uZTogbiA9PT0gXCJyZXR1cm5cIiB9IDogZiA/IGYodikgOiB2OyB9IDogZjsgfVxyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19hc3luY1ZhbHVlcyhvKSB7XHJcbiAgICBpZiAoIVN5bWJvbC5hc3luY0l0ZXJhdG9yKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiU3ltYm9sLmFzeW5jSXRlcmF0b3IgaXMgbm90IGRlZmluZWQuXCIpO1xyXG4gICAgdmFyIG0gPSBvW1N5bWJvbC5hc3luY0l0ZXJhdG9yXSwgaTtcclxuICAgIHJldHVybiBtID8gbS5jYWxsKG8pIDogKG8gPSB0eXBlb2YgX192YWx1ZXMgPT09IFwiZnVuY3Rpb25cIiA/IF9fdmFsdWVzKG8pIDogb1tTeW1ib2wuaXRlcmF0b3JdKCksIGkgPSB7fSwgdmVyYihcIm5leHRcIiksIHZlcmIoXCJ0aHJvd1wiKSwgdmVyYihcInJldHVyblwiKSwgaVtTeW1ib2wuYXN5bmNJdGVyYXRvcl0gPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzOyB9LCBpKTtcclxuICAgIGZ1bmN0aW9uIHZlcmIobikgeyBpW25dID0gb1tuXSAmJiBmdW5jdGlvbiAodikgeyByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gKHJlc29sdmUsIHJlamVjdCkgeyB2ID0gb1tuXSh2KSwgc2V0dGxlKHJlc29sdmUsIHJlamVjdCwgdi5kb25lLCB2LnZhbHVlKTsgfSk7IH07IH1cclxuICAgIGZ1bmN0aW9uIHNldHRsZShyZXNvbHZlLCByZWplY3QsIGQsIHYpIHsgUHJvbWlzZS5yZXNvbHZlKHYpLnRoZW4oZnVuY3Rpb24odikgeyByZXNvbHZlKHsgdmFsdWU6IHYsIGRvbmU6IGQgfSk7IH0sIHJlamVjdCk7IH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fbWFrZVRlbXBsYXRlT2JqZWN0KGNvb2tlZCwgcmF3KSB7XHJcbiAgICBpZiAoT2JqZWN0LmRlZmluZVByb3BlcnR5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShjb29rZWQsIFwicmF3XCIsIHsgdmFsdWU6IHJhdyB9KTsgfSBlbHNlIHsgY29va2VkLnJhdyA9IHJhdzsgfVxyXG4gICAgcmV0dXJuIGNvb2tlZDtcclxufTtcclxuXHJcbnZhciBfX3NldE1vZHVsZURlZmF1bHQgPSBPYmplY3QuY3JlYXRlID8gKGZ1bmN0aW9uKG8sIHYpIHtcclxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvLCBcImRlZmF1bHRcIiwgeyBlbnVtZXJhYmxlOiB0cnVlLCB2YWx1ZTogdiB9KTtcclxufSkgOiBmdW5jdGlvbihvLCB2KSB7XHJcbiAgICBvW1wiZGVmYXVsdFwiXSA9IHY7XHJcbn07XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnRTdGFyKG1vZCkge1xyXG4gICAgaWYgKG1vZCAmJiBtb2QuX19lc01vZHVsZSkgcmV0dXJuIG1vZDtcclxuICAgIHZhciByZXN1bHQgPSB7fTtcclxuICAgIGlmIChtb2QgIT0gbnVsbCkgZm9yICh2YXIgayBpbiBtb2QpIGlmIChrICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwobW9kLCBrKSkgX19jcmVhdGVCaW5kaW5nKHJlc3VsdCwgbW9kLCBrKTtcclxuICAgIF9fc2V0TW9kdWxlRGVmYXVsdChyZXN1bHQsIG1vZCk7XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG59XHJcblxyXG5leHBvcnQgZnVuY3Rpb24gX19pbXBvcnREZWZhdWx0KG1vZCkge1xyXG4gICAgcmV0dXJuIChtb2QgJiYgbW9kLl9fZXNNb2R1bGUpID8gbW9kIDogeyBkZWZhdWx0OiBtb2QgfTtcclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIF9fY2xhc3NQcml2YXRlRmllbGRHZXQocmVjZWl2ZXIsIHN0YXRlLCBraW5kLCBmKSB7XHJcbiAgICBpZiAoa2luZCA9PT0gXCJhXCIgJiYgIWYpIHRocm93IG5ldyBUeXBlRXJyb3IoXCJQcml2YXRlIGFjY2Vzc29yIHdhcyBkZWZpbmVkIHdpdGhvdXQgYSBnZXR0ZXJcIik7XHJcbiAgICBpZiAodHlwZW9mIHN0YXRlID09PSBcImZ1bmN0aW9uXCIgPyByZWNlaXZlciAhPT0gc3RhdGUgfHwgIWYgOiAhc3RhdGUuaGFzKHJlY2VpdmVyKSkgdGhyb3cgbmV3IFR5cGVFcnJvcihcIkNhbm5vdCByZWFkIHByaXZhdGUgbWVtYmVyIGZyb20gYW4gb2JqZWN0IHdob3NlIGNsYXNzIGRpZCBub3QgZGVjbGFyZSBpdFwiKTtcclxuICAgIHJldHVybiBraW5kID09PSBcIm1cIiA/IGYgOiBraW5kID09PSBcImFcIiA/IGYuY2FsbChyZWNlaXZlcikgOiBmID8gZi52YWx1ZSA6IHN0YXRlLmdldChyZWNlaXZlcik7XHJcbn1cclxuXHJcbmV4cG9ydCBmdW5jdGlvbiBfX2NsYXNzUHJpdmF0ZUZpZWxkU2V0KHJlY2VpdmVyLCBzdGF0ZSwgdmFsdWUsIGtpbmQsIGYpIHtcclxuICAgIGlmIChraW5kID09PSBcIm1cIikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgbWV0aG9kIGlzIG5vdCB3cml0YWJsZVwiKTtcclxuICAgIGlmIChraW5kID09PSBcImFcIiAmJiAhZikgdGhyb3cgbmV3IFR5cGVFcnJvcihcIlByaXZhdGUgYWNjZXNzb3Igd2FzIGRlZmluZWQgd2l0aG91dCBhIHNldHRlclwiKTtcclxuICAgIGlmICh0eXBlb2Ygc3RhdGUgPT09IFwiZnVuY3Rpb25cIiA/IHJlY2VpdmVyICE9PSBzdGF0ZSB8fCAhZiA6ICFzdGF0ZS5oYXMocmVjZWl2ZXIpKSB0aHJvdyBuZXcgVHlwZUVycm9yKFwiQ2Fubm90IHdyaXRlIHByaXZhdGUgbWVtYmVyIHRvIGFuIG9iamVjdCB3aG9zZSBjbGFzcyBkaWQgbm90IGRlY2xhcmUgaXRcIik7XHJcbiAgICByZXR1cm4gKGtpbmQgPT09IFwiYVwiID8gZi5jYWxsKHJlY2VpdmVyLCB2YWx1ZSkgOiBmID8gZi52YWx1ZSA9IHZhbHVlIDogc3RhdGUuc2V0KHJlY2VpdmVyLCB2YWx1ZSkpLCB2YWx1ZTtcclxufVxyXG4iLCIvKiFcbiAqIFZ1ZS5qcyB2Mi42LjE0XG4gKiAoYykgMjAxNC0yMDIxIEV2YW4gWW91XG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIExpY2Vuc2UuXG4gKi9cbihmdW5jdGlvbiAoZ2xvYmFsLCBmYWN0b3J5KSB7XG4gIHR5cGVvZiBleHBvcnRzID09PSAnb2JqZWN0JyAmJiB0eXBlb2YgbW9kdWxlICE9PSAndW5kZWZpbmVkJyA/IG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeSgpIDpcbiAgdHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kID8gZGVmaW5lKGZhY3RvcnkpIDpcbiAgKGdsb2JhbCA9IGdsb2JhbCB8fCBzZWxmLCBnbG9iYWwuVnVlID0gZmFjdG9yeSgpKTtcbn0odGhpcywgZnVuY3Rpb24gKCkgeyAndXNlIHN0cmljdCc7XG5cbiAgLyogICovXG5cbiAgdmFyIGVtcHR5T2JqZWN0ID0gT2JqZWN0LmZyZWV6ZSh7fSk7XG5cbiAgLy8gVGhlc2UgaGVscGVycyBwcm9kdWNlIGJldHRlciBWTSBjb2RlIGluIEpTIGVuZ2luZXMgZHVlIHRvIHRoZWlyXG4gIC8vIGV4cGxpY2l0bmVzcyBhbmQgZnVuY3Rpb24gaW5saW5pbmcuXG4gIGZ1bmN0aW9uIGlzVW5kZWYgKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gdW5kZWZpbmVkIHx8IHYgPT09IG51bGxcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRGVmICh2KSB7XG4gICAgcmV0dXJuIHYgIT09IHVuZGVmaW5lZCAmJiB2ICE9PSBudWxsXG4gIH1cblxuICBmdW5jdGlvbiBpc1RydWUgKHYpIHtcbiAgICByZXR1cm4gdiA9PT0gdHJ1ZVxuICB9XG5cbiAgZnVuY3Rpb24gaXNGYWxzZSAodikge1xuICAgIHJldHVybiB2ID09PSBmYWxzZVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHZhbHVlIGlzIHByaW1pdGl2ZS5cbiAgICovXG4gIGZ1bmN0aW9uIGlzUHJpbWl0aXZlICh2YWx1ZSkge1xuICAgIHJldHVybiAoXG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnIHx8XG4gICAgICB0eXBlb2YgdmFsdWUgPT09ICdudW1iZXInIHx8XG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ3N5bWJvbCcgfHxcbiAgICAgIHR5cGVvZiB2YWx1ZSA9PT0gJ2Jvb2xlYW4nXG4gICAgKVxuICB9XG5cbiAgLyoqXG4gICAqIFF1aWNrIG9iamVjdCBjaGVjayAtIHRoaXMgaXMgcHJpbWFyaWx5IHVzZWQgdG8gdGVsbFxuICAgKiBPYmplY3RzIGZyb20gcHJpbWl0aXZlIHZhbHVlcyB3aGVuIHdlIGtub3cgdGhlIHZhbHVlXG4gICAqIGlzIGEgSlNPTi1jb21wbGlhbnQgdHlwZS5cbiAgICovXG4gIGZ1bmN0aW9uIGlzT2JqZWN0IChvYmopIHtcbiAgICByZXR1cm4gb2JqICE9PSBudWxsICYmIHR5cGVvZiBvYmogPT09ICdvYmplY3QnXG4gIH1cblxuICAvKipcbiAgICogR2V0IHRoZSByYXcgdHlwZSBzdHJpbmcgb2YgYSB2YWx1ZSwgZS5nLiwgW29iamVjdCBPYmplY3RdLlxuICAgKi9cbiAgdmFyIF90b1N0cmluZyA9IE9iamVjdC5wcm90b3R5cGUudG9TdHJpbmc7XG5cbiAgZnVuY3Rpb24gdG9SYXdUeXBlICh2YWx1ZSkge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2YWx1ZSkuc2xpY2UoOCwgLTEpXG4gIH1cblxuICAvKipcbiAgICogU3RyaWN0IG9iamVjdCB0eXBlIGNoZWNrLiBPbmx5IHJldHVybnMgdHJ1ZVxuICAgKiBmb3IgcGxhaW4gSmF2YVNjcmlwdCBvYmplY3RzLlxuICAgKi9cbiAgZnVuY3Rpb24gaXNQbGFpbk9iamVjdCAob2JqKSB7XG4gICAgcmV0dXJuIF90b1N0cmluZy5jYWxsKG9iaikgPT09ICdbb2JqZWN0IE9iamVjdF0nXG4gIH1cblxuICBmdW5jdGlvbiBpc1JlZ0V4cCAodikge1xuICAgIHJldHVybiBfdG9TdHJpbmcuY2FsbCh2KSA9PT0gJ1tvYmplY3QgUmVnRXhwXSdcbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiB2YWwgaXMgYSB2YWxpZCBhcnJheSBpbmRleC5cbiAgICovXG4gIGZ1bmN0aW9uIGlzVmFsaWRBcnJheUluZGV4ICh2YWwpIHtcbiAgICB2YXIgbiA9IHBhcnNlRmxvYXQoU3RyaW5nKHZhbCkpO1xuICAgIHJldHVybiBuID49IDAgJiYgTWF0aC5mbG9vcihuKSA9PT0gbiAmJiBpc0Zpbml0ZSh2YWwpXG4gIH1cblxuICBmdW5jdGlvbiBpc1Byb21pc2UgKHZhbCkge1xuICAgIHJldHVybiAoXG4gICAgICBpc0RlZih2YWwpICYmXG4gICAgICB0eXBlb2YgdmFsLnRoZW4gPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIHR5cGVvZiB2YWwuY2F0Y2ggPT09ICdmdW5jdGlvbidcbiAgICApXG4gIH1cblxuICAvKipcbiAgICogQ29udmVydCBhIHZhbHVlIHRvIGEgc3RyaW5nIHRoYXQgaXMgYWN0dWFsbHkgcmVuZGVyZWQuXG4gICAqL1xuICBmdW5jdGlvbiB0b1N0cmluZyAodmFsKSB7XG4gICAgcmV0dXJuIHZhbCA9PSBudWxsXG4gICAgICA/ICcnXG4gICAgICA6IEFycmF5LmlzQXJyYXkodmFsKSB8fCAoaXNQbGFpbk9iamVjdCh2YWwpICYmIHZhbC50b1N0cmluZyA9PT0gX3RvU3RyaW5nKVxuICAgICAgICA/IEpTT04uc3RyaW5naWZ5KHZhbCwgbnVsbCwgMilcbiAgICAgICAgOiBTdHJpbmcodmFsKVxuICB9XG5cbiAgLyoqXG4gICAqIENvbnZlcnQgYW4gaW5wdXQgdmFsdWUgdG8gYSBudW1iZXIgZm9yIHBlcnNpc3RlbmNlLlxuICAgKiBJZiB0aGUgY29udmVyc2lvbiBmYWlscywgcmV0dXJuIG9yaWdpbmFsIHN0cmluZy5cbiAgICovXG4gIGZ1bmN0aW9uIHRvTnVtYmVyICh2YWwpIHtcbiAgICB2YXIgbiA9IHBhcnNlRmxvYXQodmFsKTtcbiAgICByZXR1cm4gaXNOYU4obikgPyB2YWwgOiBuXG4gIH1cblxuICAvKipcbiAgICogTWFrZSBhIG1hcCBhbmQgcmV0dXJuIGEgZnVuY3Rpb24gZm9yIGNoZWNraW5nIGlmIGEga2V5XG4gICAqIGlzIGluIHRoYXQgbWFwLlxuICAgKi9cbiAgZnVuY3Rpb24gbWFrZU1hcCAoXG4gICAgc3RyLFxuICAgIGV4cGVjdHNMb3dlckNhc2VcbiAgKSB7XG4gICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdmFyIGxpc3QgPSBzdHIuc3BsaXQoJywnKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3QubGVuZ3RoOyBpKyspIHtcbiAgICAgIG1hcFtsaXN0W2ldXSA9IHRydWU7XG4gICAgfVxuICAgIHJldHVybiBleHBlY3RzTG93ZXJDYXNlXG4gICAgICA/IGZ1bmN0aW9uICh2YWwpIHsgcmV0dXJuIG1hcFt2YWwudG9Mb3dlckNhc2UoKV07IH1cbiAgICAgIDogZnVuY3Rpb24gKHZhbCkgeyByZXR1cm4gbWFwW3ZhbF07IH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhIGJ1aWx0LWluIHRhZy5cbiAgICovXG4gIHZhciBpc0J1aWx0SW5UYWcgPSBtYWtlTWFwKCdzbG90LGNvbXBvbmVudCcsIHRydWUpO1xuXG4gIC8qKlxuICAgKiBDaGVjayBpZiBhbiBhdHRyaWJ1dGUgaXMgYSByZXNlcnZlZCBhdHRyaWJ1dGUuXG4gICAqL1xuICB2YXIgaXNSZXNlcnZlZEF0dHJpYnV0ZSA9IG1ha2VNYXAoJ2tleSxyZWYsc2xvdCxzbG90LXNjb3BlLGlzJyk7XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBhbiBpdGVtIGZyb20gYW4gYXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiByZW1vdmUgKGFyciwgaXRlbSkge1xuICAgIGlmIChhcnIubGVuZ3RoKSB7XG4gICAgICB2YXIgaW5kZXggPSBhcnIuaW5kZXhPZihpdGVtKTtcbiAgICAgIGlmIChpbmRleCA+IC0xKSB7XG4gICAgICAgIHJldHVybiBhcnIuc3BsaWNlKGluZGV4LCAxKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDaGVjayB3aGV0aGVyIGFuIG9iamVjdCBoYXMgdGhlIHByb3BlcnR5LlxuICAgKi9cbiAgdmFyIGhhc093blByb3BlcnR5ID0gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eTtcbiAgZnVuY3Rpb24gaGFzT3duIChvYmosIGtleSkge1xuICAgIHJldHVybiBoYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwga2V5KVxuICB9XG5cbiAgLyoqXG4gICAqIENyZWF0ZSBhIGNhY2hlZCB2ZXJzaW9uIG9mIGEgcHVyZSBmdW5jdGlvbi5cbiAgICovXG4gIGZ1bmN0aW9uIGNhY2hlZCAoZm4pIHtcbiAgICB2YXIgY2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIHJldHVybiAoZnVuY3Rpb24gY2FjaGVkRm4gKHN0cikge1xuICAgICAgdmFyIGhpdCA9IGNhY2hlW3N0cl07XG4gICAgICByZXR1cm4gaGl0IHx8IChjYWNoZVtzdHJdID0gZm4oc3RyKSlcbiAgICB9KVxuICB9XG5cbiAgLyoqXG4gICAqIENhbWVsaXplIGEgaHlwaGVuLWRlbGltaXRlZCBzdHJpbmcuXG4gICAqL1xuICB2YXIgY2FtZWxpemVSRSA9IC8tKFxcdykvZztcbiAgdmFyIGNhbWVsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChzdHIpIHtcbiAgICByZXR1cm4gc3RyLnJlcGxhY2UoY2FtZWxpemVSRSwgZnVuY3Rpb24gKF8sIGMpIHsgcmV0dXJuIGMgPyBjLnRvVXBwZXJDYXNlKCkgOiAnJzsgfSlcbiAgfSk7XG5cbiAgLyoqXG4gICAqIENhcGl0YWxpemUgYSBzdHJpbmcuXG4gICAqL1xuICB2YXIgY2FwaXRhbGl6ZSA9IGNhY2hlZChmdW5jdGlvbiAoc3RyKSB7XG4gICAgcmV0dXJuIHN0ci5jaGFyQXQoMCkudG9VcHBlckNhc2UoKSArIHN0ci5zbGljZSgxKVxuICB9KTtcblxuICAvKipcbiAgICogSHlwaGVuYXRlIGEgY2FtZWxDYXNlIHN0cmluZy5cbiAgICovXG4gIHZhciBoeXBoZW5hdGVSRSA9IC9cXEIoW0EtWl0pL2c7XG4gIHZhciBoeXBoZW5hdGUgPSBjYWNoZWQoZnVuY3Rpb24gKHN0cikge1xuICAgIHJldHVybiBzdHIucmVwbGFjZShoeXBoZW5hdGVSRSwgJy0kMScpLnRvTG93ZXJDYXNlKClcbiAgfSk7XG5cbiAgLyoqXG4gICAqIFNpbXBsZSBiaW5kIHBvbHlmaWxsIGZvciBlbnZpcm9ubWVudHMgdGhhdCBkbyBub3Qgc3VwcG9ydCBpdCxcbiAgICogZS5nLiwgUGhhbnRvbUpTIDEueC4gVGVjaG5pY2FsbHksIHdlIGRvbid0IG5lZWQgdGhpcyBhbnltb3JlXG4gICAqIHNpbmNlIG5hdGl2ZSBiaW5kIGlzIG5vdyBwZXJmb3JtYW50IGVub3VnaCBpbiBtb3N0IGJyb3dzZXJzLlxuICAgKiBCdXQgcmVtb3ZpbmcgaXQgd291bGQgbWVhbiBicmVha2luZyBjb2RlIHRoYXQgd2FzIGFibGUgdG8gcnVuIGluXG4gICAqIFBoYW50b21KUyAxLngsIHNvIHRoaXMgbXVzdCBiZSBrZXB0IGZvciBiYWNrd2FyZCBjb21wYXRpYmlsaXR5LlxuICAgKi9cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBmdW5jdGlvbiBwb2x5ZmlsbEJpbmQgKGZuLCBjdHgpIHtcbiAgICBmdW5jdGlvbiBib3VuZEZuIChhKSB7XG4gICAgICB2YXIgbCA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgICByZXR1cm4gbFxuICAgICAgICA/IGwgPiAxXG4gICAgICAgICAgPyBmbi5hcHBseShjdHgsIGFyZ3VtZW50cylcbiAgICAgICAgICA6IGZuLmNhbGwoY3R4LCBhKVxuICAgICAgICA6IGZuLmNhbGwoY3R4KVxuICAgIH1cblxuICAgIGJvdW5kRm4uX2xlbmd0aCA9IGZuLmxlbmd0aDtcbiAgICByZXR1cm4gYm91bmRGblxuICB9XG5cbiAgZnVuY3Rpb24gbmF0aXZlQmluZCAoZm4sIGN0eCkge1xuICAgIHJldHVybiBmbi5iaW5kKGN0eClcbiAgfVxuXG4gIHZhciBiaW5kID0gRnVuY3Rpb24ucHJvdG90eXBlLmJpbmRcbiAgICA/IG5hdGl2ZUJpbmRcbiAgICA6IHBvbHlmaWxsQmluZDtcblxuICAvKipcbiAgICogQ29udmVydCBhbiBBcnJheS1saWtlIG9iamVjdCB0byBhIHJlYWwgQXJyYXkuXG4gICAqL1xuICBmdW5jdGlvbiB0b0FycmF5IChsaXN0LCBzdGFydCkge1xuICAgIHN0YXJ0ID0gc3RhcnQgfHwgMDtcbiAgICB2YXIgaSA9IGxpc3QubGVuZ3RoIC0gc3RhcnQ7XG4gICAgdmFyIHJldCA9IG5ldyBBcnJheShpKTtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICByZXRbaV0gPSBsaXN0W2kgKyBzdGFydF07XG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfVxuXG4gIC8qKlxuICAgKiBNaXggcHJvcGVydGllcyBpbnRvIHRhcmdldCBvYmplY3QuXG4gICAqL1xuICBmdW5jdGlvbiBleHRlbmQgKHRvLCBfZnJvbSkge1xuICAgIGZvciAodmFyIGtleSBpbiBfZnJvbSkge1xuICAgICAgdG9ba2V5XSA9IF9mcm9tW2tleV07XG4gICAgfVxuICAgIHJldHVybiB0b1xuICB9XG5cbiAgLyoqXG4gICAqIE1lcmdlIGFuIEFycmF5IG9mIE9iamVjdHMgaW50byBhIHNpbmdsZSBPYmplY3QuXG4gICAqL1xuICBmdW5jdGlvbiB0b09iamVjdCAoYXJyKSB7XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAoYXJyW2ldKSB7XG4gICAgICAgIGV4dGVuZChyZXMsIGFycltpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG5cbiAgLyoqXG4gICAqIFBlcmZvcm0gbm8gb3BlcmF0aW9uLlxuICAgKiBTdHViYmluZyBhcmdzIHRvIG1ha2UgRmxvdyBoYXBweSB3aXRob3V0IGxlYXZpbmcgdXNlbGVzcyB0cmFuc3BpbGVkIGNvZGVcbiAgICogd2l0aCAuLi5yZXN0IChodHRwczovL2Zsb3cub3JnL2Jsb2cvMjAxNy8wNS8wNy9TdHJpY3QtRnVuY3Rpb24tQ2FsbC1Bcml0eS8pLlxuICAgKi9cbiAgZnVuY3Rpb24gbm9vcCAoYSwgYiwgYykge31cblxuICAvKipcbiAgICogQWx3YXlzIHJldHVybiBmYWxzZS5cbiAgICovXG4gIHZhciBubyA9IGZ1bmN0aW9uIChhLCBiLCBjKSB7IHJldHVybiBmYWxzZTsgfTtcblxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgc2FtZSB2YWx1ZS5cbiAgICovXG4gIHZhciBpZGVudGl0eSA9IGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9O1xuXG4gIC8qKlxuICAgKiBHZW5lcmF0ZSBhIHN0cmluZyBjb250YWluaW5nIHN0YXRpYyBrZXlzIGZyb20gY29tcGlsZXIgbW9kdWxlcy5cbiAgICovXG4gIGZ1bmN0aW9uIGdlblN0YXRpY0tleXMgKG1vZHVsZXMpIHtcbiAgICByZXR1cm4gbW9kdWxlcy5yZWR1Y2UoZnVuY3Rpb24gKGtleXMsIG0pIHtcbiAgICAgIHJldHVybiBrZXlzLmNvbmNhdChtLnN0YXRpY0tleXMgfHwgW10pXG4gICAgfSwgW10pLmpvaW4oJywnKVxuICB9XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIHR3byB2YWx1ZXMgYXJlIGxvb3NlbHkgZXF1YWwgLSB0aGF0IGlzLFxuICAgKiBpZiB0aGV5IGFyZSBwbGFpbiBvYmplY3RzLCBkbyB0aGV5IGhhdmUgdGhlIHNhbWUgc2hhcGU/XG4gICAqL1xuICBmdW5jdGlvbiBsb29zZUVxdWFsIChhLCBiKSB7XG4gICAgaWYgKGEgPT09IGIpIHsgcmV0dXJuIHRydWUgfVxuICAgIHZhciBpc09iamVjdEEgPSBpc09iamVjdChhKTtcbiAgICB2YXIgaXNPYmplY3RCID0gaXNPYmplY3QoYik7XG4gICAgaWYgKGlzT2JqZWN0QSAmJiBpc09iamVjdEIpIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIHZhciBpc0FycmF5QSA9IEFycmF5LmlzQXJyYXkoYSk7XG4gICAgICAgIHZhciBpc0FycmF5QiA9IEFycmF5LmlzQXJyYXkoYik7XG4gICAgICAgIGlmIChpc0FycmF5QSAmJiBpc0FycmF5Qikge1xuICAgICAgICAgIHJldHVybiBhLmxlbmd0aCA9PT0gYi5sZW5ndGggJiYgYS5ldmVyeShmdW5jdGlvbiAoZSwgaSkge1xuICAgICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoZSwgYltpXSlcbiAgICAgICAgICB9KVxuICAgICAgICB9IGVsc2UgaWYgKGEgaW5zdGFuY2VvZiBEYXRlICYmIGIgaW5zdGFuY2VvZiBEYXRlKSB7XG4gICAgICAgICAgcmV0dXJuIGEuZ2V0VGltZSgpID09PSBiLmdldFRpbWUoKVxuICAgICAgICB9IGVsc2UgaWYgKCFpc0FycmF5QSAmJiAhaXNBcnJheUIpIHtcbiAgICAgICAgICB2YXIga2V5c0EgPSBPYmplY3Qua2V5cyhhKTtcbiAgICAgICAgICB2YXIga2V5c0IgPSBPYmplY3Qua2V5cyhiKTtcbiAgICAgICAgICByZXR1cm4ga2V5c0EubGVuZ3RoID09PSBrZXlzQi5sZW5ndGggJiYga2V5c0EuZXZlcnkoZnVuY3Rpb24gKGtleSkge1xuICAgICAgICAgICAgcmV0dXJuIGxvb3NlRXF1YWwoYVtrZXldLCBiW2tleV0pXG4gICAgICAgICAgfSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICB9XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWlzT2JqZWN0QSAmJiAhaXNPYmplY3RCKSB7XG4gICAgICByZXR1cm4gU3RyaW5nKGEpID09PSBTdHJpbmcoYilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJldHVybiB0aGUgZmlyc3QgaW5kZXggYXQgd2hpY2ggYSBsb29zZWx5IGVxdWFsIHZhbHVlIGNhbiBiZVxuICAgKiBmb3VuZCBpbiB0aGUgYXJyYXkgKGlmIHZhbHVlIGlzIGEgcGxhaW4gb2JqZWN0LCB0aGUgYXJyYXkgbXVzdFxuICAgKiBjb250YWluIGFuIG9iamVjdCBvZiB0aGUgc2FtZSBzaGFwZSksIG9yIC0xIGlmIGl0IGlzIG5vdCBwcmVzZW50LlxuICAgKi9cbiAgZnVuY3Rpb24gbG9vc2VJbmRleE9mIChhcnIsIHZhbCkge1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgYXJyLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAobG9vc2VFcXVhbChhcnJbaV0sIHZhbCkpIHsgcmV0dXJuIGkgfVxuICAgIH1cbiAgICByZXR1cm4gLTFcbiAgfVxuXG4gIC8qKlxuICAgKiBFbnN1cmUgYSBmdW5jdGlvbiBpcyBjYWxsZWQgb25seSBvbmNlLlxuICAgKi9cbiAgZnVuY3Rpb24gb25jZSAoZm4pIHtcbiAgICB2YXIgY2FsbGVkID0gZmFsc2U7XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmICghY2FsbGVkKSB7XG4gICAgICAgIGNhbGxlZCA9IHRydWU7XG4gICAgICAgIGZuLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgdmFyIFNTUl9BVFRSID0gJ2RhdGEtc2VydmVyLXJlbmRlcmVkJztcblxuICB2YXIgQVNTRVRfVFlQRVMgPSBbXG4gICAgJ2NvbXBvbmVudCcsXG4gICAgJ2RpcmVjdGl2ZScsXG4gICAgJ2ZpbHRlcidcbiAgXTtcblxuICB2YXIgTElGRUNZQ0xFX0hPT0tTID0gW1xuICAgICdiZWZvcmVDcmVhdGUnLFxuICAgICdjcmVhdGVkJyxcbiAgICAnYmVmb3JlTW91bnQnLFxuICAgICdtb3VudGVkJyxcbiAgICAnYmVmb3JlVXBkYXRlJyxcbiAgICAndXBkYXRlZCcsXG4gICAgJ2JlZm9yZURlc3Ryb3knLFxuICAgICdkZXN0cm95ZWQnLFxuICAgICdhY3RpdmF0ZWQnLFxuICAgICdkZWFjdGl2YXRlZCcsXG4gICAgJ2Vycm9yQ2FwdHVyZWQnLFxuICAgICdzZXJ2ZXJQcmVmZXRjaCdcbiAgXTtcblxuICAvKiAgKi9cblxuXG5cbiAgdmFyIGNvbmZpZyA9ICh7XG4gICAgLyoqXG4gICAgICogT3B0aW9uIG1lcmdlIHN0cmF0ZWdpZXMgKHVzZWQgaW4gY29yZS91dGlsL29wdGlvbnMpXG4gICAgICovXG4gICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgb3B0aW9uTWVyZ2VTdHJhdGVnaWVzOiBPYmplY3QuY3JlYXRlKG51bGwpLFxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byBzdXBwcmVzcyB3YXJuaW5ncy5cbiAgICAgKi9cbiAgICBzaWxlbnQ6IGZhbHNlLFxuXG4gICAgLyoqXG4gICAgICogU2hvdyBwcm9kdWN0aW9uIG1vZGUgdGlwIG1lc3NhZ2Ugb24gYm9vdD9cbiAgICAgKi9cbiAgICBwcm9kdWN0aW9uVGlwOiBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJyxcblxuICAgIC8qKlxuICAgICAqIFdoZXRoZXIgdG8gZW5hYmxlIGRldnRvb2xzXG4gICAgICovXG4gICAgZGV2dG9vbHM6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuXG4gICAgLyoqXG4gICAgICogV2hldGhlciB0byByZWNvcmQgcGVyZlxuICAgICAqL1xuICAgIHBlcmZvcm1hbmNlOiBmYWxzZSxcblxuICAgIC8qKlxuICAgICAqIEVycm9yIGhhbmRsZXIgZm9yIHdhdGNoZXIgZXJyb3JzXG4gICAgICovXG4gICAgZXJyb3JIYW5kbGVyOiBudWxsLFxuXG4gICAgLyoqXG4gICAgICogV2FybiBoYW5kbGVyIGZvciB3YXRjaGVyIHdhcm5zXG4gICAgICovXG4gICAgd2FybkhhbmRsZXI6IG51bGwsXG5cbiAgICAvKipcbiAgICAgKiBJZ25vcmUgY2VydGFpbiBjdXN0b20gZWxlbWVudHNcbiAgICAgKi9cbiAgICBpZ25vcmVkRWxlbWVudHM6IFtdLFxuXG4gICAgLyoqXG4gICAgICogQ3VzdG9tIHVzZXIga2V5IGFsaWFzZXMgZm9yIHYtb25cbiAgICAgKi9cbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBrZXlDb2RlczogT2JqZWN0LmNyZWF0ZShudWxsKSxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGEgdGFnIGlzIHJlc2VydmVkIHNvIHRoYXQgaXQgY2Fubm90IGJlIHJlZ2lzdGVyZWQgYXMgYVxuICAgICAqIGNvbXBvbmVudC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICAgKi9cbiAgICBpc1Jlc2VydmVkVGFnOiBubyxcblxuICAgIC8qKlxuICAgICAqIENoZWNrIGlmIGFuIGF0dHJpYnV0ZSBpcyByZXNlcnZlZCBzbyB0aGF0IGl0IGNhbm5vdCBiZSB1c2VkIGFzIGEgY29tcG9uZW50XG4gICAgICogcHJvcC4gVGhpcyBpcyBwbGF0Zm9ybS1kZXBlbmRlbnQgYW5kIG1heSBiZSBvdmVyd3JpdHRlbi5cbiAgICAgKi9cbiAgICBpc1Jlc2VydmVkQXR0cjogbm8sXG5cbiAgICAvKipcbiAgICAgKiBDaGVjayBpZiBhIHRhZyBpcyBhbiB1bmtub3duIGVsZW1lbnQuXG4gICAgICogUGxhdGZvcm0tZGVwZW5kZW50LlxuICAgICAqL1xuICAgIGlzVW5rbm93bkVsZW1lbnQ6IG5vLFxuXG4gICAgLyoqXG4gICAgICogR2V0IHRoZSBuYW1lc3BhY2Ugb2YgYW4gZWxlbWVudFxuICAgICAqL1xuICAgIGdldFRhZ05hbWVzcGFjZTogbm9vcCxcblxuICAgIC8qKlxuICAgICAqIFBhcnNlIHRoZSByZWFsIHRhZyBuYW1lIGZvciB0aGUgc3BlY2lmaWMgcGxhdGZvcm0uXG4gICAgICovXG4gICAgcGFyc2VQbGF0Zm9ybVRhZ05hbWU6IGlkZW50aXR5LFxuXG4gICAgLyoqXG4gICAgICogQ2hlY2sgaWYgYW4gYXR0cmlidXRlIG11c3QgYmUgYm91bmQgdXNpbmcgcHJvcGVydHksIGUuZy4gdmFsdWVcbiAgICAgKiBQbGF0Zm9ybS1kZXBlbmRlbnQuXG4gICAgICovXG4gICAgbXVzdFVzZVByb3A6IG5vLFxuXG4gICAgLyoqXG4gICAgICogUGVyZm9ybSB1cGRhdGVzIGFzeW5jaHJvbm91c2x5LiBJbnRlbmRlZCB0byBiZSB1c2VkIGJ5IFZ1ZSBUZXN0IFV0aWxzXG4gICAgICogVGhpcyB3aWxsIHNpZ25pZmljYW50bHkgcmVkdWNlIHBlcmZvcm1hbmNlIGlmIHNldCB0byBmYWxzZS5cbiAgICAgKi9cbiAgICBhc3luYzogdHJ1ZSxcblxuICAgIC8qKlxuICAgICAqIEV4cG9zZWQgZm9yIGxlZ2FjeSByZWFzb25zXG4gICAgICovXG4gICAgX2xpZmVjeWNsZUhvb2tzOiBMSUZFQ1lDTEVfSE9PS1NcbiAgfSk7XG5cbiAgLyogICovXG5cbiAgLyoqXG4gICAqIHVuaWNvZGUgbGV0dGVycyB1c2VkIGZvciBwYXJzaW5nIGh0bWwgdGFncywgY29tcG9uZW50IG5hbWVzIGFuZCBwcm9wZXJ0eSBwYXRocy5cbiAgICogdXNpbmcgaHR0cHM6Ly93d3cudzMub3JnL1RSL2h0bWw1My9zZW1hbnRpY3Mtc2NyaXB0aW5nLmh0bWwjcG90ZW50aWFsY3VzdG9tZWxlbWVudG5hbWVcbiAgICogc2tpcHBpbmcgXFx1MTAwMDAtXFx1RUZGRkYgZHVlIHRvIGl0IGZyZWV6aW5nIHVwIFBoYW50b21KU1xuICAgKi9cbiAgdmFyIHVuaWNvZGVSZWdFeHAgPSAvYS16QS1aXFx1MDBCN1xcdTAwQzAtXFx1MDBENlxcdTAwRDgtXFx1MDBGNlxcdTAwRjgtXFx1MDM3RFxcdTAzN0YtXFx1MUZGRlxcdTIwMEMtXFx1MjAwRFxcdTIwM0YtXFx1MjA0MFxcdTIwNzAtXFx1MjE4RlxcdTJDMDAtXFx1MkZFRlxcdTMwMDEtXFx1RDdGRlxcdUY5MDAtXFx1RkRDRlxcdUZERjAtXFx1RkZGRC87XG5cbiAgLyoqXG4gICAqIENoZWNrIGlmIGEgc3RyaW5nIHN0YXJ0cyB3aXRoICQgb3IgX1xuICAgKi9cbiAgZnVuY3Rpb24gaXNSZXNlcnZlZCAoc3RyKSB7XG4gICAgdmFyIGMgPSAoc3RyICsgJycpLmNoYXJDb2RlQXQoMCk7XG4gICAgcmV0dXJuIGMgPT09IDB4MjQgfHwgYyA9PT0gMHg1RlxuICB9XG5cbiAgLyoqXG4gICAqIERlZmluZSBhIHByb3BlcnR5LlxuICAgKi9cbiAgZnVuY3Rpb24gZGVmIChvYmosIGtleSwgdmFsLCBlbnVtZXJhYmxlKSB7XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9iaiwga2V5LCB7XG4gICAgICB2YWx1ZTogdmFsLFxuICAgICAgZW51bWVyYWJsZTogISFlbnVtZXJhYmxlLFxuICAgICAgd3JpdGFibGU6IHRydWUsXG4gICAgICBjb25maWd1cmFibGU6IHRydWVcbiAgICB9KTtcbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBzaW1wbGUgcGF0aC5cbiAgICovXG4gIHZhciBiYWlsUkUgPSBuZXcgUmVnRXhwKChcIlteXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCIuJF9cXFxcZF1cIikpO1xuICBmdW5jdGlvbiBwYXJzZVBhdGggKHBhdGgpIHtcbiAgICBpZiAoYmFpbFJFLnRlc3QocGF0aCkpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgc2VnbWVudHMgPSBwYXRoLnNwbGl0KCcuJyk7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc2VnbWVudHMubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgaWYgKCFvYmopIHsgcmV0dXJuIH1cbiAgICAgICAgb2JqID0gb2JqW3NlZ21lbnRzW2ldXTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBvYmpcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICAvLyBjYW4gd2UgdXNlIF9fcHJvdG9fXz9cbiAgdmFyIGhhc1Byb3RvID0gJ19fcHJvdG9fXycgaW4ge307XG5cbiAgLy8gQnJvd3NlciBlbnZpcm9ubWVudCBzbmlmZmluZ1xuICB2YXIgaW5Ccm93c2VyID0gdHlwZW9mIHdpbmRvdyAhPT0gJ3VuZGVmaW5lZCc7XG4gIHZhciBpbldlZXggPSB0eXBlb2YgV1hFbnZpcm9ubWVudCAhPT0gJ3VuZGVmaW5lZCcgJiYgISFXWEVudmlyb25tZW50LnBsYXRmb3JtO1xuICB2YXIgd2VleFBsYXRmb3JtID0gaW5XZWV4ICYmIFdYRW52aXJvbm1lbnQucGxhdGZvcm0udG9Mb3dlckNhc2UoKTtcbiAgdmFyIFVBID0gaW5Ccm93c2VyICYmIHdpbmRvdy5uYXZpZ2F0b3IudXNlckFnZW50LnRvTG93ZXJDYXNlKCk7XG4gIHZhciBpc0lFID0gVUEgJiYgL21zaWV8dHJpZGVudC8udGVzdChVQSk7XG4gIHZhciBpc0lFOSA9IFVBICYmIFVBLmluZGV4T2YoJ21zaWUgOS4wJykgPiAwO1xuICB2YXIgaXNFZGdlID0gVUEgJiYgVUEuaW5kZXhPZignZWRnZS8nKSA+IDA7XG4gIHZhciBpc0FuZHJvaWQgPSAoVUEgJiYgVUEuaW5kZXhPZignYW5kcm9pZCcpID4gMCkgfHwgKHdlZXhQbGF0Zm9ybSA9PT0gJ2FuZHJvaWQnKTtcbiAgdmFyIGlzSU9TID0gKFVBICYmIC9pcGhvbmV8aXBhZHxpcG9kfGlvcy8udGVzdChVQSkpIHx8ICh3ZWV4UGxhdGZvcm0gPT09ICdpb3MnKTtcbiAgdmFyIGlzQ2hyb21lID0gVUEgJiYgL2Nocm9tZVxcL1xcZCsvLnRlc3QoVUEpICYmICFpc0VkZ2U7XG4gIHZhciBpc1BoYW50b21KUyA9IFVBICYmIC9waGFudG9tanMvLnRlc3QoVUEpO1xuICB2YXIgaXNGRiA9IFVBICYmIFVBLm1hdGNoKC9maXJlZm94XFwvKFxcZCspLyk7XG5cbiAgLy8gRmlyZWZveCBoYXMgYSBcIndhdGNoXCIgZnVuY3Rpb24gb24gT2JqZWN0LnByb3RvdHlwZS4uLlxuICB2YXIgbmF0aXZlV2F0Y2ggPSAoe30pLndhdGNoO1xuXG4gIHZhciBzdXBwb3J0c1Bhc3NpdmUgPSBmYWxzZTtcbiAgaWYgKGluQnJvd3Nlcikge1xuICAgIHRyeSB7XG4gICAgICB2YXIgb3B0cyA9IHt9O1xuICAgICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KG9wdHMsICdwYXNzaXZlJywgKHtcbiAgICAgICAgZ2V0OiBmdW5jdGlvbiBnZXQgKCkge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICAgICAgc3VwcG9ydHNQYXNzaXZlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgfSkpOyAvLyBodHRwczovL2dpdGh1Yi5jb20vZmFjZWJvb2svZmxvdy9pc3N1ZXMvMjg1XG4gICAgICB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lcigndGVzdC1wYXNzaXZlJywgbnVsbCwgb3B0cyk7XG4gICAgfSBjYXRjaCAoZSkge31cbiAgfVxuXG4gIC8vIHRoaXMgbmVlZHMgdG8gYmUgbGF6eS1ldmFsZWQgYmVjYXVzZSB2dWUgbWF5IGJlIHJlcXVpcmVkIGJlZm9yZVxuICAvLyB2dWUtc2VydmVyLXJlbmRlcmVyIGNhbiBzZXQgVlVFX0VOVlxuICB2YXIgX2lzU2VydmVyO1xuICB2YXIgaXNTZXJ2ZXJSZW5kZXJpbmcgPSBmdW5jdGlvbiAoKSB7XG4gICAgaWYgKF9pc1NlcnZlciA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghaW5Ccm93c2VyICYmICFpbldlZXggJiYgdHlwZW9mIGdsb2JhbCAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgICAgLy8gZGV0ZWN0IHByZXNlbmNlIG9mIHZ1ZS1zZXJ2ZXItcmVuZGVyZXIgYW5kIGF2b2lkXG4gICAgICAgIC8vIFdlYnBhY2sgc2hpbW1pbmcgdGhlIHByb2Nlc3NcbiAgICAgICAgX2lzU2VydmVyID0gZ2xvYmFsWydwcm9jZXNzJ10gJiYgZ2xvYmFsWydwcm9jZXNzJ10uZW52LlZVRV9FTlYgPT09ICdzZXJ2ZXInO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgX2lzU2VydmVyID0gZmFsc2U7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBfaXNTZXJ2ZXJcbiAgfTtcblxuICAvLyBkZXRlY3QgZGV2dG9vbHNcbiAgdmFyIGRldnRvb2xzID0gaW5Ccm93c2VyICYmIHdpbmRvdy5fX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fO1xuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGZ1bmN0aW9uIGlzTmF0aXZlIChDdG9yKSB7XG4gICAgcmV0dXJuIHR5cGVvZiBDdG9yID09PSAnZnVuY3Rpb24nICYmIC9uYXRpdmUgY29kZS8udGVzdChDdG9yLnRvU3RyaW5nKCkpXG4gIH1cblxuICB2YXIgaGFzU3ltYm9sID1cbiAgICB0eXBlb2YgU3ltYm9sICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShTeW1ib2wpICYmXG4gICAgdHlwZW9mIFJlZmxlY3QgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFJlZmxlY3Qub3duS2V5cyk7XG5cbiAgdmFyIF9TZXQ7XG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqLyAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgaWYgKHR5cGVvZiBTZXQgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFNldCkpIHtcbiAgICAvLyB1c2UgbmF0aXZlIFNldCB3aGVuIGF2YWlsYWJsZS5cbiAgICBfU2V0ID0gU2V0O1xuICB9IGVsc2Uge1xuICAgIC8vIGEgbm9uLXN0YW5kYXJkIFNldCBwb2x5ZmlsbCB0aGF0IG9ubHkgd29ya3Mgd2l0aCBwcmltaXRpdmUga2V5cy5cbiAgICBfU2V0ID0gLypAX19QVVJFX18qLyhmdW5jdGlvbiAoKSB7XG4gICAgICBmdW5jdGlvbiBTZXQgKCkge1xuICAgICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9XG4gICAgICBTZXQucHJvdG90eXBlLmhhcyA9IGZ1bmN0aW9uIGhhcyAoa2V5KSB7XG4gICAgICAgIHJldHVybiB0aGlzLnNldFtrZXldID09PSB0cnVlXG4gICAgICB9O1xuICAgICAgU2V0LnByb3RvdHlwZS5hZGQgPSBmdW5jdGlvbiBhZGQgKGtleSkge1xuICAgICAgICB0aGlzLnNldFtrZXldID0gdHJ1ZTtcbiAgICAgIH07XG4gICAgICBTZXQucHJvdG90eXBlLmNsZWFyID0gZnVuY3Rpb24gY2xlYXIgKCkge1xuICAgICAgICB0aGlzLnNldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB9O1xuXG4gICAgICByZXR1cm4gU2V0O1xuICAgIH0oKSk7XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgd2FybiA9IG5vb3A7XG4gIHZhciB0aXAgPSBub29wO1xuICB2YXIgZ2VuZXJhdGVDb21wb25lbnRUcmFjZSA9IChub29wKTsgLy8gd29yayBhcm91bmQgZmxvdyBjaGVja1xuICB2YXIgZm9ybWF0Q29tcG9uZW50TmFtZSA9IChub29wKTtcblxuICB7XG4gICAgdmFyIGhhc0NvbnNvbGUgPSB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCc7XG4gICAgdmFyIGNsYXNzaWZ5UkUgPSAvKD86XnxbLV9dKShcXHcpL2c7XG4gICAgdmFyIGNsYXNzaWZ5ID0gZnVuY3Rpb24gKHN0cikgeyByZXR1cm4gc3RyXG4gICAgICAucmVwbGFjZShjbGFzc2lmeVJFLCBmdW5jdGlvbiAoYykgeyByZXR1cm4gYy50b1VwcGVyQ2FzZSgpOyB9KVxuICAgICAgLnJlcGxhY2UoL1stX10vZywgJycpOyB9O1xuXG4gICAgd2FybiA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgICB2YXIgdHJhY2UgPSB2bSA/IGdlbmVyYXRlQ29tcG9uZW50VHJhY2Uodm0pIDogJyc7XG5cbiAgICAgIGlmIChjb25maWcud2FybkhhbmRsZXIpIHtcbiAgICAgICAgY29uZmlnLndhcm5IYW5kbGVyLmNhbGwobnVsbCwgbXNnLCB2bSwgdHJhY2UpO1xuICAgICAgfSBlbHNlIGlmIChoYXNDb25zb2xlICYmICghY29uZmlnLnNpbGVudCkpIHtcbiAgICAgICAgY29uc29sZS5lcnJvcigoXCJbVnVlIHdhcm5dOiBcIiArIG1zZyArIHRyYWNlKSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIHRpcCA9IGZ1bmN0aW9uIChtc2csIHZtKSB7XG4gICAgICBpZiAoaGFzQ29uc29sZSAmJiAoIWNvbmZpZy5zaWxlbnQpKSB7XG4gICAgICAgIGNvbnNvbGUud2FybihcIltWdWUgdGlwXTogXCIgKyBtc2cgKyAoXG4gICAgICAgICAgdm0gPyBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlKHZtKSA6ICcnXG4gICAgICAgICkpO1xuICAgICAgfVxuICAgIH07XG5cbiAgICBmb3JtYXRDb21wb25lbnROYW1lID0gZnVuY3Rpb24gKHZtLCBpbmNsdWRlRmlsZSkge1xuICAgICAgaWYgKHZtLiRyb290ID09PSB2bSkge1xuICAgICAgICByZXR1cm4gJzxSb290PidcbiAgICAgIH1cbiAgICAgIHZhciBvcHRpb25zID0gdHlwZW9mIHZtID09PSAnZnVuY3Rpb24nICYmIHZtLmNpZCAhPSBudWxsXG4gICAgICAgID8gdm0ub3B0aW9uc1xuICAgICAgICA6IHZtLl9pc1Z1ZVxuICAgICAgICAgID8gdm0uJG9wdGlvbnMgfHwgdm0uY29uc3RydWN0b3Iub3B0aW9uc1xuICAgICAgICAgIDogdm07XG4gICAgICB2YXIgbmFtZSA9IG9wdGlvbnMubmFtZSB8fCBvcHRpb25zLl9jb21wb25lbnRUYWc7XG4gICAgICB2YXIgZmlsZSA9IG9wdGlvbnMuX19maWxlO1xuICAgICAgaWYgKCFuYW1lICYmIGZpbGUpIHtcbiAgICAgICAgdmFyIG1hdGNoID0gZmlsZS5tYXRjaCgvKFteL1xcXFxdKylcXC52dWUkLyk7XG4gICAgICAgIG5hbWUgPSBtYXRjaCAmJiBtYXRjaFsxXTtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIChcbiAgICAgICAgKG5hbWUgPyAoXCI8XCIgKyAoY2xhc3NpZnkobmFtZSkpICsgXCI+XCIpIDogXCI8QW5vbnltb3VzPlwiKSArXG4gICAgICAgIChmaWxlICYmIGluY2x1ZGVGaWxlICE9PSBmYWxzZSA/IChcIiBhdCBcIiArIGZpbGUpIDogJycpXG4gICAgICApXG4gICAgfTtcblxuICAgIHZhciByZXBlYXQgPSBmdW5jdGlvbiAoc3RyLCBuKSB7XG4gICAgICB2YXIgcmVzID0gJyc7XG4gICAgICB3aGlsZSAobikge1xuICAgICAgICBpZiAobiAlIDIgPT09IDEpIHsgcmVzICs9IHN0cjsgfVxuICAgICAgICBpZiAobiA+IDEpIHsgc3RyICs9IHN0cjsgfVxuICAgICAgICBuID4+PSAxO1xuICAgICAgfVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH07XG5cbiAgICBnZW5lcmF0ZUNvbXBvbmVudFRyYWNlID0gZnVuY3Rpb24gKHZtKSB7XG4gICAgICBpZiAodm0uX2lzVnVlICYmIHZtLiRwYXJlbnQpIHtcbiAgICAgICAgdmFyIHRyZWUgPSBbXTtcbiAgICAgICAgdmFyIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgIHdoaWxlICh2bSkge1xuICAgICAgICAgIGlmICh0cmVlLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgIHZhciBsYXN0ID0gdHJlZVt0cmVlLmxlbmd0aCAtIDFdO1xuICAgICAgICAgICAgaWYgKGxhc3QuY29uc3RydWN0b3IgPT09IHZtLmNvbnN0cnVjdG9yKSB7XG4gICAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSsrO1xuICAgICAgICAgICAgICB2bSA9IHZtLiRwYXJlbnQ7XG4gICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA+IDApIHtcbiAgICAgICAgICAgICAgdHJlZVt0cmVlLmxlbmd0aCAtIDFdID0gW2xhc3QsIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZV07XG4gICAgICAgICAgICAgIGN1cnJlbnRSZWN1cnNpdmVTZXF1ZW5jZSA9IDA7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIHRyZWUucHVzaCh2bSk7XG4gICAgICAgICAgdm0gPSB2bS4kcGFyZW50O1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiAnXFxuXFxuZm91bmQgaW5cXG5cXG4nICsgdHJlZVxuICAgICAgICAgIC5tYXAoZnVuY3Rpb24gKHZtLCBpKSB7IHJldHVybiAoXCJcIiArIChpID09PSAwID8gJy0tLT4gJyA6IHJlcGVhdCgnICcsIDUgKyBpICogMikpICsgKEFycmF5LmlzQXJyYXkodm0pXG4gICAgICAgICAgICAgID8gKChmb3JtYXRDb21wb25lbnROYW1lKHZtWzBdKSkgKyBcIi4uLiAoXCIgKyAodm1bMV0pICsgXCIgcmVjdXJzaXZlIGNhbGxzKVwiKVxuICAgICAgICAgICAgICA6IGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSk7IH0pXG4gICAgICAgICAgLmpvaW4oJ1xcbicpXG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gKFwiXFxuXFxuKGZvdW5kIGluIFwiICsgKGZvcm1hdENvbXBvbmVudE5hbWUodm0pKSArIFwiKVwiKVxuICAgICAgfVxuICAgIH07XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgdWlkID0gMDtcblxuICAvKipcbiAgICogQSBkZXAgaXMgYW4gb2JzZXJ2YWJsZSB0aGF0IGNhbiBoYXZlIG11bHRpcGxlXG4gICAqIGRpcmVjdGl2ZXMgc3Vic2NyaWJpbmcgdG8gaXQuXG4gICAqL1xuICB2YXIgRGVwID0gZnVuY3Rpb24gRGVwICgpIHtcbiAgICB0aGlzLmlkID0gdWlkKys7XG4gICAgdGhpcy5zdWJzID0gW107XG4gIH07XG5cbiAgRGVwLnByb3RvdHlwZS5hZGRTdWIgPSBmdW5jdGlvbiBhZGRTdWIgKHN1Yikge1xuICAgIHRoaXMuc3Vicy5wdXNoKHN1Yik7XG4gIH07XG5cbiAgRGVwLnByb3RvdHlwZS5yZW1vdmVTdWIgPSBmdW5jdGlvbiByZW1vdmVTdWIgKHN1Yikge1xuICAgIHJlbW92ZSh0aGlzLnN1YnMsIHN1Yik7XG4gIH07XG5cbiAgRGVwLnByb3RvdHlwZS5kZXBlbmQgPSBmdW5jdGlvbiBkZXBlbmQgKCkge1xuICAgIGlmIChEZXAudGFyZ2V0KSB7XG4gICAgICBEZXAudGFyZ2V0LmFkZERlcCh0aGlzKTtcbiAgICB9XG4gIH07XG5cbiAgRGVwLnByb3RvdHlwZS5ub3RpZnkgPSBmdW5jdGlvbiBub3RpZnkgKCkge1xuICAgIC8vIHN0YWJpbGl6ZSB0aGUgc3Vic2NyaWJlciBsaXN0IGZpcnN0XG4gICAgdmFyIHN1YnMgPSB0aGlzLnN1YnMuc2xpY2UoKTtcbiAgICBpZiAoIWNvbmZpZy5hc3luYykge1xuICAgICAgLy8gc3VicyBhcmVuJ3Qgc29ydGVkIGluIHNjaGVkdWxlciBpZiBub3QgcnVubmluZyBhc3luY1xuICAgICAgLy8gd2UgbmVlZCB0byBzb3J0IHRoZW0gbm93IHRvIG1ha2Ugc3VyZSB0aGV5IGZpcmUgaW4gY29ycmVjdFxuICAgICAgLy8gb3JkZXJcbiAgICAgIHN1YnMuc29ydChmdW5jdGlvbiAoYSwgYikgeyByZXR1cm4gYS5pZCAtIGIuaWQ7IH0pO1xuICAgIH1cbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHN1YnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICBzdWJzW2ldLnVwZGF0ZSgpO1xuICAgIH1cbiAgfTtcblxuICAvLyBUaGUgY3VycmVudCB0YXJnZXQgd2F0Y2hlciBiZWluZyBldmFsdWF0ZWQuXG4gIC8vIFRoaXMgaXMgZ2xvYmFsbHkgdW5pcXVlIGJlY2F1c2Ugb25seSBvbmUgd2F0Y2hlclxuICAvLyBjYW4gYmUgZXZhbHVhdGVkIGF0IGEgdGltZS5cbiAgRGVwLnRhcmdldCA9IG51bGw7XG4gIHZhciB0YXJnZXRTdGFjayA9IFtdO1xuXG4gIGZ1bmN0aW9uIHB1c2hUYXJnZXQgKHRhcmdldCkge1xuICAgIHRhcmdldFN0YWNrLnB1c2godGFyZ2V0KTtcbiAgICBEZXAudGFyZ2V0ID0gdGFyZ2V0O1xuICB9XG5cbiAgZnVuY3Rpb24gcG9wVGFyZ2V0ICgpIHtcbiAgICB0YXJnZXRTdGFjay5wb3AoKTtcbiAgICBEZXAudGFyZ2V0ID0gdGFyZ2V0U3RhY2tbdGFyZ2V0U3RhY2subGVuZ3RoIC0gMV07XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgVk5vZGUgPSBmdW5jdGlvbiBWTm9kZSAoXG4gICAgdGFnLFxuICAgIGRhdGEsXG4gICAgY2hpbGRyZW4sXG4gICAgdGV4dCxcbiAgICBlbG0sXG4gICAgY29udGV4dCxcbiAgICBjb21wb25lbnRPcHRpb25zLFxuICAgIGFzeW5jRmFjdG9yeVxuICApIHtcbiAgICB0aGlzLnRhZyA9IHRhZztcbiAgICB0aGlzLmRhdGEgPSBkYXRhO1xuICAgIHRoaXMuY2hpbGRyZW4gPSBjaGlsZHJlbjtcbiAgICB0aGlzLnRleHQgPSB0ZXh0O1xuICAgIHRoaXMuZWxtID0gZWxtO1xuICAgIHRoaXMubnMgPSB1bmRlZmluZWQ7XG4gICAgdGhpcy5jb250ZXh0ID0gY29udGV4dDtcbiAgICB0aGlzLmZuQ29udGV4dCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZuT3B0aW9ucyA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmZuU2NvcGVJZCA9IHVuZGVmaW5lZDtcbiAgICB0aGlzLmtleSA9IGRhdGEgJiYgZGF0YS5rZXk7XG4gICAgdGhpcy5jb21wb25lbnRPcHRpb25zID0gY29tcG9uZW50T3B0aW9ucztcbiAgICB0aGlzLmNvbXBvbmVudEluc3RhbmNlID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucGFyZW50ID0gdW5kZWZpbmVkO1xuICAgIHRoaXMucmF3ID0gZmFsc2U7XG4gICAgdGhpcy5pc1N0YXRpYyA9IGZhbHNlO1xuICAgIHRoaXMuaXNSb290SW5zZXJ0ID0gdHJ1ZTtcbiAgICB0aGlzLmlzQ29tbWVudCA9IGZhbHNlO1xuICAgIHRoaXMuaXNDbG9uZWQgPSBmYWxzZTtcbiAgICB0aGlzLmlzT25jZSA9IGZhbHNlO1xuICAgIHRoaXMuYXN5bmNGYWN0b3J5ID0gYXN5bmNGYWN0b3J5O1xuICAgIHRoaXMuYXN5bmNNZXRhID0gdW5kZWZpbmVkO1xuICAgIHRoaXMuaXNBc3luY1BsYWNlaG9sZGVyID0gZmFsc2U7XG4gIH07XG5cbiAgdmFyIHByb3RvdHlwZUFjY2Vzc29ycyA9IHsgY2hpbGQ6IHsgY29uZmlndXJhYmxlOiB0cnVlIH0gfTtcblxuICAvLyBERVBSRUNBVEVEOiBhbGlhcyBmb3IgY29tcG9uZW50SW5zdGFuY2UgZm9yIGJhY2t3YXJkcyBjb21wYXQuXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIHByb3RvdHlwZUFjY2Vzc29ycy5jaGlsZC5nZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgcmV0dXJuIHRoaXMuY29tcG9uZW50SW5zdGFuY2VcbiAgfTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydGllcyggVk5vZGUucHJvdG90eXBlLCBwcm90b3R5cGVBY2Nlc3NvcnMgKTtcblxuICB2YXIgY3JlYXRlRW1wdHlWTm9kZSA9IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgaWYgKCB0ZXh0ID09PSB2b2lkIDAgKSB0ZXh0ID0gJyc7XG5cbiAgICB2YXIgbm9kZSA9IG5ldyBWTm9kZSgpO1xuICAgIG5vZGUudGV4dCA9IHRleHQ7XG4gICAgbm9kZS5pc0NvbW1lbnQgPSB0cnVlO1xuICAgIHJldHVybiBub2RlXG4gIH07XG5cbiAgZnVuY3Rpb24gY3JlYXRlVGV4dFZOb2RlICh2YWwpIHtcbiAgICByZXR1cm4gbmV3IFZOb2RlKHVuZGVmaW5lZCwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIFN0cmluZyh2YWwpKVxuICB9XG5cbiAgLy8gb3B0aW1pemVkIHNoYWxsb3cgY2xvbmVcbiAgLy8gdXNlZCBmb3Igc3RhdGljIG5vZGVzIGFuZCBzbG90IG5vZGVzIGJlY2F1c2UgdGhleSBtYXkgYmUgcmV1c2VkIGFjcm9zc1xuICAvLyBtdWx0aXBsZSByZW5kZXJzLCBjbG9uaW5nIHRoZW0gYXZvaWRzIGVycm9ycyB3aGVuIERPTSBtYW5pcHVsYXRpb25zIHJlbHlcbiAgLy8gb24gdGhlaXIgZWxtIHJlZmVyZW5jZS5cbiAgZnVuY3Rpb24gY2xvbmVWTm9kZSAodm5vZGUpIHtcbiAgICB2YXIgY2xvbmVkID0gbmV3IFZOb2RlKFxuICAgICAgdm5vZGUudGFnLFxuICAgICAgdm5vZGUuZGF0YSxcbiAgICAgIC8vICM3OTc1XG4gICAgICAvLyBjbG9uZSBjaGlsZHJlbiBhcnJheSB0byBhdm9pZCBtdXRhdGluZyBvcmlnaW5hbCBpbiBjYXNlIG9mIGNsb25pbmdcbiAgICAgIC8vIGEgY2hpbGQuXG4gICAgICB2bm9kZS5jaGlsZHJlbiAmJiB2bm9kZS5jaGlsZHJlbi5zbGljZSgpLFxuICAgICAgdm5vZGUudGV4dCxcbiAgICAgIHZub2RlLmVsbSxcbiAgICAgIHZub2RlLmNvbnRleHQsXG4gICAgICB2bm9kZS5jb21wb25lbnRPcHRpb25zLFxuICAgICAgdm5vZGUuYXN5bmNGYWN0b3J5XG4gICAgKTtcbiAgICBjbG9uZWQubnMgPSB2bm9kZS5ucztcbiAgICBjbG9uZWQuaXNTdGF0aWMgPSB2bm9kZS5pc1N0YXRpYztcbiAgICBjbG9uZWQua2V5ID0gdm5vZGUua2V5O1xuICAgIGNsb25lZC5pc0NvbW1lbnQgPSB2bm9kZS5pc0NvbW1lbnQ7XG4gICAgY2xvbmVkLmZuQ29udGV4dCA9IHZub2RlLmZuQ29udGV4dDtcbiAgICBjbG9uZWQuZm5PcHRpb25zID0gdm5vZGUuZm5PcHRpb25zO1xuICAgIGNsb25lZC5mblNjb3BlSWQgPSB2bm9kZS5mblNjb3BlSWQ7XG4gICAgY2xvbmVkLmFzeW5jTWV0YSA9IHZub2RlLmFzeW5jTWV0YTtcbiAgICBjbG9uZWQuaXNDbG9uZWQgPSB0cnVlO1xuICAgIHJldHVybiBjbG9uZWRcbiAgfVxuXG4gIC8qXG4gICAqIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aFxuICAgKiBkeW5hbWljYWxseSBhY2Nlc3NpbmcgbWV0aG9kcyBvbiBBcnJheSBwcm90b3R5cGVcbiAgICovXG5cbiAgdmFyIGFycmF5UHJvdG8gPSBBcnJheS5wcm90b3R5cGU7XG4gIHZhciBhcnJheU1ldGhvZHMgPSBPYmplY3QuY3JlYXRlKGFycmF5UHJvdG8pO1xuXG4gIHZhciBtZXRob2RzVG9QYXRjaCA9IFtcbiAgICAncHVzaCcsXG4gICAgJ3BvcCcsXG4gICAgJ3NoaWZ0JyxcbiAgICAndW5zaGlmdCcsXG4gICAgJ3NwbGljZScsXG4gICAgJ3NvcnQnLFxuICAgICdyZXZlcnNlJ1xuICBdO1xuXG4gIC8qKlxuICAgKiBJbnRlcmNlcHQgbXV0YXRpbmcgbWV0aG9kcyBhbmQgZW1pdCBldmVudHNcbiAgICovXG4gIG1ldGhvZHNUb1BhdGNoLmZvckVhY2goZnVuY3Rpb24gKG1ldGhvZCkge1xuICAgIC8vIGNhY2hlIG9yaWdpbmFsIG1ldGhvZFxuICAgIHZhciBvcmlnaW5hbCA9IGFycmF5UHJvdG9bbWV0aG9kXTtcbiAgICBkZWYoYXJyYXlNZXRob2RzLCBtZXRob2QsIGZ1bmN0aW9uIG11dGF0b3IgKCkge1xuICAgICAgdmFyIGFyZ3MgPSBbXSwgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICAgIHdoaWxlICggbGVuLS0gKSBhcmdzWyBsZW4gXSA9IGFyZ3VtZW50c1sgbGVuIF07XG5cbiAgICAgIHZhciByZXN1bHQgPSBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmdzKTtcbiAgICAgIHZhciBvYiA9IHRoaXMuX19vYl9fO1xuICAgICAgdmFyIGluc2VydGVkO1xuICAgICAgc3dpdGNoIChtZXRob2QpIHtcbiAgICAgICAgY2FzZSAncHVzaCc6XG4gICAgICAgIGNhc2UgJ3Vuc2hpZnQnOlxuICAgICAgICAgIGluc2VydGVkID0gYXJncztcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlICdzcGxpY2UnOlxuICAgICAgICAgIGluc2VydGVkID0gYXJncy5zbGljZSgyKTtcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYgKGluc2VydGVkKSB7IG9iLm9ic2VydmVBcnJheShpbnNlcnRlZCk7IH1cbiAgICAgIC8vIG5vdGlmeSBjaGFuZ2VcbiAgICAgIG9iLmRlcC5ub3RpZnkoKTtcbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9KTtcbiAgfSk7XG5cbiAgLyogICovXG5cbiAgdmFyIGFycmF5S2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKGFycmF5TWV0aG9kcyk7XG5cbiAgLyoqXG4gICAqIEluIHNvbWUgY2FzZXMgd2UgbWF5IHdhbnQgdG8gZGlzYWJsZSBvYnNlcnZhdGlvbiBpbnNpZGUgYSBjb21wb25lbnQnc1xuICAgKiB1cGRhdGUgY29tcHV0YXRpb24uXG4gICAqL1xuICB2YXIgc2hvdWxkT2JzZXJ2ZSA9IHRydWU7XG5cbiAgZnVuY3Rpb24gdG9nZ2xlT2JzZXJ2aW5nICh2YWx1ZSkge1xuICAgIHNob3VsZE9ic2VydmUgPSB2YWx1ZTtcbiAgfVxuXG4gIC8qKlxuICAgKiBPYnNlcnZlciBjbGFzcyB0aGF0IGlzIGF0dGFjaGVkIHRvIGVhY2ggb2JzZXJ2ZWRcbiAgICogb2JqZWN0LiBPbmNlIGF0dGFjaGVkLCB0aGUgb2JzZXJ2ZXIgY29udmVydHMgdGhlIHRhcmdldFxuICAgKiBvYmplY3QncyBwcm9wZXJ0eSBrZXlzIGludG8gZ2V0dGVyL3NldHRlcnMgdGhhdFxuICAgKiBjb2xsZWN0IGRlcGVuZGVuY2llcyBhbmQgZGlzcGF0Y2ggdXBkYXRlcy5cbiAgICovXG4gIHZhciBPYnNlcnZlciA9IGZ1bmN0aW9uIE9ic2VydmVyICh2YWx1ZSkge1xuICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICB0aGlzLmRlcCA9IG5ldyBEZXAoKTtcbiAgICB0aGlzLnZtQ291bnQgPSAwO1xuICAgIGRlZih2YWx1ZSwgJ19fb2JfXycsIHRoaXMpO1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgaWYgKGhhc1Byb3RvKSB7XG4gICAgICAgIHByb3RvQXVnbWVudCh2YWx1ZSwgYXJyYXlNZXRob2RzKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvcHlBdWdtZW50KHZhbHVlLCBhcnJheU1ldGhvZHMsIGFycmF5S2V5cyk7XG4gICAgICB9XG4gICAgICB0aGlzLm9ic2VydmVBcnJheSh2YWx1ZSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMud2Fsayh2YWx1ZSk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBXYWxrIHRocm91Z2ggYWxsIHByb3BlcnRpZXMgYW5kIGNvbnZlcnQgdGhlbSBpbnRvXG4gICAqIGdldHRlci9zZXR0ZXJzLiBUaGlzIG1ldGhvZCBzaG91bGQgb25seSBiZSBjYWxsZWQgd2hlblxuICAgKiB2YWx1ZSB0eXBlIGlzIE9iamVjdC5cbiAgICovXG4gIE9ic2VydmVyLnByb3RvdHlwZS53YWxrID0gZnVuY3Rpb24gd2FsayAob2JqKSB7XG4gICAgdmFyIGtleXMgPSBPYmplY3Qua2V5cyhvYmopO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEob2JqLCBrZXlzW2ldKTtcbiAgICB9XG4gIH07XG5cbiAgLyoqXG4gICAqIE9ic2VydmUgYSBsaXN0IG9mIEFycmF5IGl0ZW1zLlxuICAgKi9cbiAgT2JzZXJ2ZXIucHJvdG90eXBlLm9ic2VydmVBcnJheSA9IGZ1bmN0aW9uIG9ic2VydmVBcnJheSAoaXRlbXMpIHtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IGl0ZW1zLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgb2JzZXJ2ZShpdGVtc1tpXSk7XG4gICAgfVxuICB9O1xuXG4gIC8vIGhlbHBlcnNcblxuICAvKipcbiAgICogQXVnbWVudCBhIHRhcmdldCBPYmplY3Qgb3IgQXJyYXkgYnkgaW50ZXJjZXB0aW5nXG4gICAqIHRoZSBwcm90b3R5cGUgY2hhaW4gdXNpbmcgX19wcm90b19fXG4gICAqL1xuICBmdW5jdGlvbiBwcm90b0F1Z21lbnQgKHRhcmdldCwgc3JjKSB7XG4gICAgLyogZXNsaW50LWRpc2FibGUgbm8tcHJvdG8gKi9cbiAgICB0YXJnZXQuX19wcm90b19fID0gc3JjO1xuICAgIC8qIGVzbGludC1lbmFibGUgbm8tcHJvdG8gKi9cbiAgfVxuXG4gIC8qKlxuICAgKiBBdWdtZW50IGEgdGFyZ2V0IE9iamVjdCBvciBBcnJheSBieSBkZWZpbmluZ1xuICAgKiBoaWRkZW4gcHJvcGVydGllcy5cbiAgICovXG4gIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gIGZ1bmN0aW9uIGNvcHlBdWdtZW50ICh0YXJnZXQsIHNyYywga2V5cykge1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0ga2V5cy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAgZGVmKHRhcmdldCwga2V5LCBzcmNba2V5XSk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEF0dGVtcHQgdG8gY3JlYXRlIGFuIG9ic2VydmVyIGluc3RhbmNlIGZvciBhIHZhbHVlLFxuICAgKiByZXR1cm5zIHRoZSBuZXcgb2JzZXJ2ZXIgaWYgc3VjY2Vzc2Z1bGx5IG9ic2VydmVkLFxuICAgKiBvciB0aGUgZXhpc3Rpbmcgb2JzZXJ2ZXIgaWYgdGhlIHZhbHVlIGFscmVhZHkgaGFzIG9uZS5cbiAgICovXG4gIGZ1bmN0aW9uIG9ic2VydmUgKHZhbHVlLCBhc1Jvb3REYXRhKSB7XG4gICAgaWYgKCFpc09iamVjdCh2YWx1ZSkgfHwgdmFsdWUgaW5zdGFuY2VvZiBWTm9kZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBvYjtcbiAgICBpZiAoaGFzT3duKHZhbHVlLCAnX19vYl9fJykgJiYgdmFsdWUuX19vYl9fIGluc3RhbmNlb2YgT2JzZXJ2ZXIpIHtcbiAgICAgIG9iID0gdmFsdWUuX19vYl9fO1xuICAgIH0gZWxzZSBpZiAoXG4gICAgICBzaG91bGRPYnNlcnZlICYmXG4gICAgICAhaXNTZXJ2ZXJSZW5kZXJpbmcoKSAmJlxuICAgICAgKEFycmF5LmlzQXJyYXkodmFsdWUpIHx8IGlzUGxhaW5PYmplY3QodmFsdWUpKSAmJlxuICAgICAgT2JqZWN0LmlzRXh0ZW5zaWJsZSh2YWx1ZSkgJiZcbiAgICAgICF2YWx1ZS5faXNWdWVcbiAgICApIHtcbiAgICAgIG9iID0gbmV3IE9ic2VydmVyKHZhbHVlKTtcbiAgICB9XG4gICAgaWYgKGFzUm9vdERhdGEgJiYgb2IpIHtcbiAgICAgIG9iLnZtQ291bnQrKztcbiAgICB9XG4gICAgcmV0dXJuIG9iXG4gIH1cblxuICAvKipcbiAgICogRGVmaW5lIGEgcmVhY3RpdmUgcHJvcGVydHkgb24gYW4gT2JqZWN0LlxuICAgKi9cbiAgZnVuY3Rpb24gZGVmaW5lUmVhY3RpdmUkJDEgKFxuICAgIG9iaixcbiAgICBrZXksXG4gICAgdmFsLFxuICAgIGN1c3RvbVNldHRlcixcbiAgICBzaGFsbG93XG4gICkge1xuICAgIHZhciBkZXAgPSBuZXcgRGVwKCk7XG5cbiAgICB2YXIgcHJvcGVydHkgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KTtcbiAgICBpZiAocHJvcGVydHkgJiYgcHJvcGVydHkuY29uZmlndXJhYmxlID09PSBmYWxzZSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gY2F0ZXIgZm9yIHByZS1kZWZpbmVkIGdldHRlci9zZXR0ZXJzXG4gICAgdmFyIGdldHRlciA9IHByb3BlcnR5ICYmIHByb3BlcnR5LmdldDtcbiAgICB2YXIgc2V0dGVyID0gcHJvcGVydHkgJiYgcHJvcGVydHkuc2V0O1xuICAgIGlmICgoIWdldHRlciB8fCBzZXR0ZXIpICYmIGFyZ3VtZW50cy5sZW5ndGggPT09IDIpIHtcbiAgICAgIHZhbCA9IG9ialtrZXldO1xuICAgIH1cblxuICAgIHZhciBjaGlsZE9iID0gIXNoYWxsb3cgJiYgb2JzZXJ2ZSh2YWwpO1xuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwge1xuICAgICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZSxcbiAgICAgIGdldDogZnVuY3Rpb24gcmVhY3RpdmVHZXR0ZXIgKCkge1xuICAgICAgICB2YXIgdmFsdWUgPSBnZXR0ZXIgPyBnZXR0ZXIuY2FsbChvYmopIDogdmFsO1xuICAgICAgICBpZiAoRGVwLnRhcmdldCkge1xuICAgICAgICAgIGRlcC5kZXBlbmQoKTtcbiAgICAgICAgICBpZiAoY2hpbGRPYikge1xuICAgICAgICAgICAgY2hpbGRPYi5kZXAuZGVwZW5kKCk7XG4gICAgICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICAgICAgZGVwZW5kQXJyYXkodmFsdWUpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdmFsdWVcbiAgICAgIH0sXG4gICAgICBzZXQ6IGZ1bmN0aW9uIHJlYWN0aXZlU2V0dGVyIChuZXdWYWwpIHtcbiAgICAgICAgdmFyIHZhbHVlID0gZ2V0dGVyID8gZ2V0dGVyLmNhbGwob2JqKSA6IHZhbDtcbiAgICAgICAgLyogZXNsaW50LWRpc2FibGUgbm8tc2VsZi1jb21wYXJlICovXG4gICAgICAgIGlmIChuZXdWYWwgPT09IHZhbHVlIHx8IChuZXdWYWwgIT09IG5ld1ZhbCAmJiB2YWx1ZSAhPT0gdmFsdWUpKSB7XG4gICAgICAgICAgcmV0dXJuXG4gICAgICAgIH1cbiAgICAgICAgLyogZXNsaW50LWVuYWJsZSBuby1zZWxmLWNvbXBhcmUgKi9cbiAgICAgICAgaWYgKGN1c3RvbVNldHRlcikge1xuICAgICAgICAgIGN1c3RvbVNldHRlcigpO1xuICAgICAgICB9XG4gICAgICAgIC8vICM3OTgxOiBmb3IgYWNjZXNzb3IgcHJvcGVydGllcyB3aXRob3V0IHNldHRlclxuICAgICAgICBpZiAoZ2V0dGVyICYmICFzZXR0ZXIpIHsgcmV0dXJuIH1cbiAgICAgICAgaWYgKHNldHRlcikge1xuICAgICAgICAgIHNldHRlci5jYWxsKG9iaiwgbmV3VmFsKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB2YWwgPSBuZXdWYWw7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRPYiA9ICFzaGFsbG93ICYmIG9ic2VydmUobmV3VmFsKTtcbiAgICAgICAgZGVwLm5vdGlmeSgpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG5cbiAgLyoqXG4gICAqIFNldCBhIHByb3BlcnR5IG9uIGFuIG9iamVjdC4gQWRkcyB0aGUgbmV3IHByb3BlcnR5IGFuZFxuICAgKiB0cmlnZ2VycyBjaGFuZ2Ugbm90aWZpY2F0aW9uIGlmIHRoZSBwcm9wZXJ0eSBkb2Vzbid0XG4gICAqIGFscmVhZHkgZXhpc3QuXG4gICAqL1xuICBmdW5jdGlvbiBzZXQgKHRhcmdldCwga2V5LCB2YWwpIHtcbiAgICBpZiAoaXNVbmRlZih0YXJnZXQpIHx8IGlzUHJpbWl0aXZlKHRhcmdldClcbiAgICApIHtcbiAgICAgIHdhcm4oKFwiQ2Fubm90IHNldCByZWFjdGl2ZSBwcm9wZXJ0eSBvbiB1bmRlZmluZWQsIG51bGwsIG9yIHByaW1pdGl2ZSB2YWx1ZTogXCIgKyAoKHRhcmdldCkpKSk7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHRhcmdldCkgJiYgaXNWYWxpZEFycmF5SW5kZXgoa2V5KSkge1xuICAgICAgdGFyZ2V0Lmxlbmd0aCA9IE1hdGgubWF4KHRhcmdldC5sZW5ndGgsIGtleSk7XG4gICAgICB0YXJnZXQuc3BsaWNlKGtleSwgMSwgdmFsKTtcbiAgICAgIHJldHVybiB2YWxcbiAgICB9XG4gICAgaWYgKGtleSBpbiB0YXJnZXQgJiYgIShrZXkgaW4gT2JqZWN0LnByb3RvdHlwZSkpIHtcbiAgICAgIHRhcmdldFtrZXldID0gdmFsO1xuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cbiAgICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gICAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgYWRkaW5nIHJlYWN0aXZlIHByb3BlcnRpZXMgdG8gYSBWdWUgaW5zdGFuY2Ugb3IgaXRzIHJvb3QgJGRhdGEgJyArXG4gICAgICAgICdhdCBydW50aW1lIC0gZGVjbGFyZSBpdCB1cGZyb250IGluIHRoZSBkYXRhIG9wdGlvbi4nXG4gICAgICApO1xuICAgICAgcmV0dXJuIHZhbFxuICAgIH1cbiAgICBpZiAoIW9iKSB7XG4gICAgICB0YXJnZXRba2V5XSA9IHZhbDtcbiAgICAgIHJldHVybiB2YWxcbiAgICB9XG4gICAgZGVmaW5lUmVhY3RpdmUkJDEob2IudmFsdWUsIGtleSwgdmFsKTtcbiAgICBvYi5kZXAubm90aWZ5KCk7XG4gICAgcmV0dXJuIHZhbFxuICB9XG5cbiAgLyoqXG4gICAqIERlbGV0ZSBhIHByb3BlcnR5IGFuZCB0cmlnZ2VyIGNoYW5nZSBpZiBuZWNlc3NhcnkuXG4gICAqL1xuICBmdW5jdGlvbiBkZWwgKHRhcmdldCwga2V5KSB7XG4gICAgaWYgKGlzVW5kZWYodGFyZ2V0KSB8fCBpc1ByaW1pdGl2ZSh0YXJnZXQpXG4gICAgKSB7XG4gICAgICB3YXJuKChcIkNhbm5vdCBkZWxldGUgcmVhY3RpdmUgcHJvcGVydHkgb24gdW5kZWZpbmVkLCBudWxsLCBvciBwcmltaXRpdmUgdmFsdWU6IFwiICsgKCh0YXJnZXQpKSkpO1xuICAgIH1cbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0YXJnZXQpICYmIGlzVmFsaWRBcnJheUluZGV4KGtleSkpIHtcbiAgICAgIHRhcmdldC5zcGxpY2Uoa2V5LCAxKTtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgb2IgPSAodGFyZ2V0KS5fX29iX187XG4gICAgaWYgKHRhcmdldC5faXNWdWUgfHwgKG9iICYmIG9iLnZtQ291bnQpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnQXZvaWQgZGVsZXRpbmcgcHJvcGVydGllcyBvbiBhIFZ1ZSBpbnN0YW5jZSBvciBpdHMgcm9vdCAkZGF0YSAnICtcbiAgICAgICAgJy0ganVzdCBzZXQgaXQgdG8gbnVsbC4nXG4gICAgICApO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGlmICghaGFzT3duKHRhcmdldCwga2V5KSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIGRlbGV0ZSB0YXJnZXRba2V5XTtcbiAgICBpZiAoIW9iKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgb2IuZGVwLm5vdGlmeSgpO1xuICB9XG5cbiAgLyoqXG4gICAqIENvbGxlY3QgZGVwZW5kZW5jaWVzIG9uIGFycmF5IGVsZW1lbnRzIHdoZW4gdGhlIGFycmF5IGlzIHRvdWNoZWQsIHNpbmNlXG4gICAqIHdlIGNhbm5vdCBpbnRlcmNlcHQgYXJyYXkgZWxlbWVudCBhY2Nlc3MgbGlrZSBwcm9wZXJ0eSBnZXR0ZXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gZGVwZW5kQXJyYXkgKHZhbHVlKSB7XG4gICAgZm9yICh2YXIgZSA9ICh2b2lkIDApLCBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgZSA9IHZhbHVlW2ldO1xuICAgICAgZSAmJiBlLl9fb2JfXyAmJiBlLl9fb2JfXy5kZXAuZGVwZW5kKCk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShlKSkge1xuICAgICAgICBkZXBlbmRBcnJheShlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICAvKipcbiAgICogT3B0aW9uIG92ZXJ3cml0aW5nIHN0cmF0ZWdpZXMgYXJlIGZ1bmN0aW9ucyB0aGF0IGhhbmRsZVxuICAgKiBob3cgdG8gbWVyZ2UgYSBwYXJlbnQgb3B0aW9uIHZhbHVlIGFuZCBhIGNoaWxkIG9wdGlvblxuICAgKiB2YWx1ZSBpbnRvIHRoZSBmaW5hbCB2YWx1ZS5cbiAgICovXG4gIHZhciBzdHJhdHMgPSBjb25maWcub3B0aW9uTWVyZ2VTdHJhdGVnaWVzO1xuXG4gIC8qKlxuICAgKiBPcHRpb25zIHdpdGggcmVzdHJpY3Rpb25zXG4gICAqL1xuICB7XG4gICAgc3RyYXRzLmVsID0gc3RyYXRzLnByb3BzRGF0YSA9IGZ1bmN0aW9uIChwYXJlbnQsIGNoaWxkLCB2bSwga2V5KSB7XG4gICAgICBpZiAoIXZtKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJvcHRpb24gXFxcIlwiICsga2V5ICsgXCJcXFwiIGNhbiBvbmx5IGJlIHVzZWQgZHVyaW5nIGluc3RhbmNlIFwiICtcbiAgICAgICAgICAnY3JlYXRpb24gd2l0aCB0aGUgYG5ld2Aga2V5d29yZC4nXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gZGVmYXVsdFN0cmF0KHBhcmVudCwgY2hpbGQpXG4gICAgfTtcbiAgfVxuXG4gIC8qKlxuICAgKiBIZWxwZXIgdGhhdCByZWN1cnNpdmVseSBtZXJnZXMgdHdvIGRhdGEgb2JqZWN0cyB0b2dldGhlci5cbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlRGF0YSAodG8sIGZyb20pIHtcbiAgICBpZiAoIWZyb20pIHsgcmV0dXJuIHRvIH1cbiAgICB2YXIga2V5LCB0b1ZhbCwgZnJvbVZhbDtcblxuICAgIHZhciBrZXlzID0gaGFzU3ltYm9sXG4gICAgICA/IFJlZmxlY3Qub3duS2V5cyhmcm9tKVxuICAgICAgOiBPYmplY3Qua2V5cyhmcm9tKTtcblxuICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAga2V5ID0ga2V5c1tpXTtcbiAgICAgIC8vIGluIGNhc2UgdGhlIG9iamVjdCBpcyBhbHJlYWR5IG9ic2VydmVkLi4uXG4gICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICB0b1ZhbCA9IHRvW2tleV07XG4gICAgICBmcm9tVmFsID0gZnJvbVtrZXldO1xuICAgICAgaWYgKCFoYXNPd24odG8sIGtleSkpIHtcbiAgICAgICAgc2V0KHRvLCBrZXksIGZyb21WYWwpO1xuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgdG9WYWwgIT09IGZyb21WYWwgJiZcbiAgICAgICAgaXNQbGFpbk9iamVjdCh0b1ZhbCkgJiZcbiAgICAgICAgaXNQbGFpbk9iamVjdChmcm9tVmFsKVxuICAgICAgKSB7XG4gICAgICAgIG1lcmdlRGF0YSh0b1ZhbCwgZnJvbVZhbCk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiB0b1xuICB9XG5cbiAgLyoqXG4gICAqIERhdGFcbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlRGF0YU9yRm4gKFxuICAgIHBhcmVudFZhbCxcbiAgICBjaGlsZFZhbCxcbiAgICB2bVxuICApIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICAvLyBpbiBhIFZ1ZS5leHRlbmQgbWVyZ2UsIGJvdGggc2hvdWxkIGJlIGZ1bmN0aW9uc1xuICAgICAgaWYgKCFjaGlsZFZhbCkge1xuICAgICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgICB9XG4gICAgICBpZiAoIXBhcmVudFZhbCkge1xuICAgICAgICByZXR1cm4gY2hpbGRWYWxcbiAgICAgIH1cbiAgICAgIC8vIHdoZW4gcGFyZW50VmFsICYgY2hpbGRWYWwgYXJlIGJvdGggcHJlc2VudCxcbiAgICAgIC8vIHdlIG5lZWQgdG8gcmV0dXJuIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIHRoZVxuICAgICAgLy8gbWVyZ2VkIHJlc3VsdCBvZiBib3RoIGZ1bmN0aW9ucy4uLiBubyBuZWVkIHRvXG4gICAgICAvLyBjaGVjayBpZiBwYXJlbnRWYWwgaXMgYSBmdW5jdGlvbiBoZXJlIGJlY2F1c2VcbiAgICAgIC8vIGl0IGhhcyB0byBiZSBhIGZ1bmN0aW9uIHRvIHBhc3MgcHJldmlvdXMgbWVyZ2VzLlxuICAgICAgcmV0dXJuIGZ1bmN0aW9uIG1lcmdlZERhdGFGbiAoKSB7XG4gICAgICAgIHJldHVybiBtZXJnZURhdGEoXG4gICAgICAgICAgdHlwZW9mIGNoaWxkVmFsID09PSAnZnVuY3Rpb24nID8gY2hpbGRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IGNoaWxkVmFsLFxuICAgICAgICAgIHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbicgPyBwYXJlbnRWYWwuY2FsbCh0aGlzLCB0aGlzKSA6IHBhcmVudFZhbFxuICAgICAgICApXG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiBtZXJnZWRJbnN0YW5jZURhdGFGbiAoKSB7XG4gICAgICAgIC8vIGluc3RhbmNlIG1lcmdlXG4gICAgICAgIHZhciBpbnN0YW5jZURhdGEgPSB0eXBlb2YgY2hpbGRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICA/IGNoaWxkVmFsLmNhbGwodm0sIHZtKVxuICAgICAgICAgIDogY2hpbGRWYWw7XG4gICAgICAgIHZhciBkZWZhdWx0RGF0YSA9IHR5cGVvZiBwYXJlbnRWYWwgPT09ICdmdW5jdGlvbidcbiAgICAgICAgICA/IHBhcmVudFZhbC5jYWxsKHZtLCB2bSlcbiAgICAgICAgICA6IHBhcmVudFZhbDtcbiAgICAgICAgaWYgKGluc3RhbmNlRGF0YSkge1xuICAgICAgICAgIHJldHVybiBtZXJnZURhdGEoaW5zdGFuY2VEYXRhLCBkZWZhdWx0RGF0YSlcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICByZXR1cm4gZGVmYXVsdERhdGFcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHN0cmF0cy5kYXRhID0gZnVuY3Rpb24gKFxuICAgIHBhcmVudFZhbCxcbiAgICBjaGlsZFZhbCxcbiAgICB2bVxuICApIHtcbiAgICBpZiAoIXZtKSB7XG4gICAgICBpZiAoY2hpbGRWYWwgJiYgdHlwZW9mIGNoaWxkVmFsICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ1RoZSBcImRhdGFcIiBvcHRpb24gc2hvdWxkIGJlIGEgZnVuY3Rpb24gJyArXG4gICAgICAgICAgJ3RoYXQgcmV0dXJucyBhIHBlci1pbnN0YW5jZSB2YWx1ZSBpbiBjb21wb25lbnQgJyArXG4gICAgICAgICAgJ2RlZmluaXRpb25zLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcblxuICAgICAgICByZXR1cm4gcGFyZW50VmFsXG4gICAgICB9XG4gICAgICByZXR1cm4gbWVyZ2VEYXRhT3JGbihwYXJlbnRWYWwsIGNoaWxkVmFsKVxuICAgIH1cblxuICAgIHJldHVybiBtZXJnZURhdGFPckZuKHBhcmVudFZhbCwgY2hpbGRWYWwsIHZtKVxuICB9O1xuXG4gIC8qKlxuICAgKiBIb29rcyBhbmQgcHJvcHMgYXJlIG1lcmdlZCBhcyBhcnJheXMuXG4gICAqL1xuICBmdW5jdGlvbiBtZXJnZUhvb2sgKFxuICAgIHBhcmVudFZhbCxcbiAgICBjaGlsZFZhbFxuICApIHtcbiAgICB2YXIgcmVzID0gY2hpbGRWYWxcbiAgICAgID8gcGFyZW50VmFsXG4gICAgICAgID8gcGFyZW50VmFsLmNvbmNhdChjaGlsZFZhbClcbiAgICAgICAgOiBBcnJheS5pc0FycmF5KGNoaWxkVmFsKVxuICAgICAgICAgID8gY2hpbGRWYWxcbiAgICAgICAgICA6IFtjaGlsZFZhbF1cbiAgICAgIDogcGFyZW50VmFsO1xuICAgIHJldHVybiByZXNcbiAgICAgID8gZGVkdXBlSG9va3MocmVzKVxuICAgICAgOiByZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGRlZHVwZUhvb2tzIChob29rcykge1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBpZiAocmVzLmluZGV4T2YoaG9va3NbaV0pID09PSAtMSkge1xuICAgICAgICByZXMucHVzaChob29rc1tpXSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIExJRkVDWUNMRV9IT09LUy5mb3JFYWNoKGZ1bmN0aW9uIChob29rKSB7XG4gICAgc3RyYXRzW2hvb2tdID0gbWVyZ2VIb29rO1xuICB9KTtcblxuICAvKipcbiAgICogQXNzZXRzXG4gICAqXG4gICAqIFdoZW4gYSB2bSBpcyBwcmVzZW50IChpbnN0YW5jZSBjcmVhdGlvbiksIHdlIG5lZWQgdG8gZG9cbiAgICogYSB0aHJlZS13YXkgbWVyZ2UgYmV0d2VlbiBjb25zdHJ1Y3RvciBvcHRpb25zLCBpbnN0YW5jZVxuICAgKiBvcHRpb25zIGFuZCBwYXJlbnQgb3B0aW9ucy5cbiAgICovXG4gIGZ1bmN0aW9uIG1lcmdlQXNzZXRzIChcbiAgICBwYXJlbnRWYWwsXG4gICAgY2hpbGRWYWwsXG4gICAgdm0sXG4gICAga2V5XG4gICkge1xuICAgIHZhciByZXMgPSBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKTtcbiAgICBpZiAoY2hpbGRWYWwpIHtcbiAgICAgIGFzc2VydE9iamVjdFR5cGUoa2V5LCBjaGlsZFZhbCwgdm0pO1xuICAgICAgcmV0dXJuIGV4dGVuZChyZXMsIGNoaWxkVmFsKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9XG5cbiAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgIHN0cmF0c1t0eXBlICsgJ3MnXSA9IG1lcmdlQXNzZXRzO1xuICB9KTtcblxuICAvKipcbiAgICogV2F0Y2hlcnMuXG4gICAqXG4gICAqIFdhdGNoZXJzIGhhc2hlcyBzaG91bGQgbm90IG92ZXJ3cml0ZSBvbmVcbiAgICogYW5vdGhlciwgc28gd2UgbWVyZ2UgdGhlbSBhcyBhcnJheXMuXG4gICAqL1xuICBzdHJhdHMud2F0Y2ggPSBmdW5jdGlvbiAoXG4gICAgcGFyZW50VmFsLFxuICAgIGNoaWxkVmFsLFxuICAgIHZtLFxuICAgIGtleVxuICApIHtcbiAgICAvLyB3b3JrIGFyb3VuZCBGaXJlZm94J3MgT2JqZWN0LnByb3RvdHlwZS53YXRjaC4uLlxuICAgIGlmIChwYXJlbnRWYWwgPT09IG5hdGl2ZVdhdGNoKSB7IHBhcmVudFZhbCA9IHVuZGVmaW5lZDsgfVxuICAgIGlmIChjaGlsZFZhbCA9PT0gbmF0aXZlV2F0Y2gpIHsgY2hpbGRWYWwgPSB1bmRlZmluZWQ7IH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNoaWxkVmFsKSB7IHJldHVybiBPYmplY3QuY3JlYXRlKHBhcmVudFZhbCB8fCBudWxsKSB9XG4gICAge1xuICAgICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gICAgdmFyIHJldCA9IHt9O1xuICAgIGV4dGVuZChyZXQsIHBhcmVudFZhbCk7XG4gICAgZm9yICh2YXIga2V5JDEgaW4gY2hpbGRWYWwpIHtcbiAgICAgIHZhciBwYXJlbnQgPSByZXRba2V5JDFdO1xuICAgICAgdmFyIGNoaWxkID0gY2hpbGRWYWxba2V5JDFdO1xuICAgICAgaWYgKHBhcmVudCAmJiAhQXJyYXkuaXNBcnJheShwYXJlbnQpKSB7XG4gICAgICAgIHBhcmVudCA9IFtwYXJlbnRdO1xuICAgICAgfVxuICAgICAgcmV0W2tleSQxXSA9IHBhcmVudFxuICAgICAgICA/IHBhcmVudC5jb25jYXQoY2hpbGQpXG4gICAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZCkgPyBjaGlsZCA6IFtjaGlsZF07XG4gICAgfVxuICAgIHJldHVybiByZXRcbiAgfTtcblxuICAvKipcbiAgICogT3RoZXIgb2JqZWN0IGhhc2hlcy5cbiAgICovXG4gIHN0cmF0cy5wcm9wcyA9XG4gIHN0cmF0cy5tZXRob2RzID1cbiAgc3RyYXRzLmluamVjdCA9XG4gIHN0cmF0cy5jb21wdXRlZCA9IGZ1bmN0aW9uIChcbiAgICBwYXJlbnRWYWwsXG4gICAgY2hpbGRWYWwsXG4gICAgdm0sXG4gICAga2V5XG4gICkge1xuICAgIGlmIChjaGlsZFZhbCAmJiBcImRldmVsb3BtZW50XCIgIT09ICdwcm9kdWN0aW9uJykge1xuICAgICAgYXNzZXJ0T2JqZWN0VHlwZShrZXksIGNoaWxkVmFsLCB2bSk7XG4gICAgfVxuICAgIGlmICghcGFyZW50VmFsKSB7IHJldHVybiBjaGlsZFZhbCB9XG4gICAgdmFyIHJldCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgZXh0ZW5kKHJldCwgcGFyZW50VmFsKTtcbiAgICBpZiAoY2hpbGRWYWwpIHsgZXh0ZW5kKHJldCwgY2hpbGRWYWwpOyB9XG4gICAgcmV0dXJuIHJldFxuICB9O1xuICBzdHJhdHMucHJvdmlkZSA9IG1lcmdlRGF0YU9yRm47XG5cbiAgLyoqXG4gICAqIERlZmF1bHQgc3RyYXRlZ3kuXG4gICAqL1xuICB2YXIgZGVmYXVsdFN0cmF0ID0gZnVuY3Rpb24gKHBhcmVudFZhbCwgY2hpbGRWYWwpIHtcbiAgICByZXR1cm4gY2hpbGRWYWwgPT09IHVuZGVmaW5lZFxuICAgICAgPyBwYXJlbnRWYWxcbiAgICAgIDogY2hpbGRWYWxcbiAgfTtcblxuICAvKipcbiAgICogVmFsaWRhdGUgY29tcG9uZW50IG5hbWVzXG4gICAqL1xuICBmdW5jdGlvbiBjaGVja0NvbXBvbmVudHMgKG9wdGlvbnMpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucy5jb21wb25lbnRzKSB7XG4gICAgICB2YWxpZGF0ZUNvbXBvbmVudE5hbWUoa2V5KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB2YWxpZGF0ZUNvbXBvbmVudE5hbWUgKG5hbWUpIHtcbiAgICBpZiAoIW5ldyBSZWdFeHAoKFwiXlthLXpBLVpdW1xcXFwtXFxcXC4wLTlfXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKiRcIikpLnRlc3QobmFtZSkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIGNvbXBvbmVudCBuYW1lOiBcIicgKyBuYW1lICsgJ1wiLiBDb21wb25lbnQgbmFtZXMgJyArXG4gICAgICAgICdzaG91bGQgY29uZm9ybSB0byB2YWxpZCBjdXN0b20gZWxlbWVudCBuYW1lIGluIGh0bWw1IHNwZWNpZmljYXRpb24uJ1xuICAgICAgKTtcbiAgICB9XG4gICAgaWYgKGlzQnVpbHRJblRhZyhuYW1lKSB8fCBjb25maWcuaXNSZXNlcnZlZFRhZyhuYW1lKSkge1xuICAgICAgd2FybihcbiAgICAgICAgJ0RvIG5vdCB1c2UgYnVpbHQtaW4gb3IgcmVzZXJ2ZWQgSFRNTCBlbGVtZW50cyBhcyBjb21wb25lbnQgJyArXG4gICAgICAgICdpZDogJyArIG5hbWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEVuc3VyZSBhbGwgcHJvcHMgb3B0aW9uIHN5bnRheCBhcmUgbm9ybWFsaXplZCBpbnRvIHRoZVxuICAgKiBPYmplY3QtYmFzZWQgZm9ybWF0LlxuICAgKi9cbiAgZnVuY3Rpb24gbm9ybWFsaXplUHJvcHMgKG9wdGlvbnMsIHZtKSB7XG4gICAgdmFyIHByb3BzID0gb3B0aW9ucy5wcm9wcztcbiAgICBpZiAoIXByb3BzKSB7IHJldHVybiB9XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIHZhciBpLCB2YWwsIG5hbWU7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocHJvcHMpKSB7XG4gICAgICBpID0gcHJvcHMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkge1xuICAgICAgICB2YWwgPSBwcm9wc1tpXTtcbiAgICAgICAgaWYgKHR5cGVvZiB2YWwgPT09ICdzdHJpbmcnKSB7XG4gICAgICAgICAgbmFtZSA9IGNhbWVsaXplKHZhbCk7XG4gICAgICAgICAgcmVzW25hbWVdID0geyB0eXBlOiBudWxsIH07XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgd2FybigncHJvcHMgbXVzdCBiZSBzdHJpbmdzIHdoZW4gdXNpbmcgYXJyYXkgc3ludGF4LicpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KHByb3BzKSkge1xuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICAgIHZhbCA9IHByb3BzW2tleV07XG4gICAgICAgIG5hbWUgPSBjYW1lbGl6ZShrZXkpO1xuICAgICAgICByZXNbbmFtZV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgICA/IHZhbFxuICAgICAgICAgIDogeyB0eXBlOiB2YWwgfTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgd2FybihcbiAgICAgICAgXCJJbnZhbGlkIHZhbHVlIGZvciBvcHRpb24gXFxcInByb3BzXFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUocHJvcHMpKSArIFwiLlwiLFxuICAgICAgICB2bVxuICAgICAgKTtcbiAgICB9XG4gICAgb3B0aW9ucy5wcm9wcyA9IHJlcztcbiAgfVxuXG4gIC8qKlxuICAgKiBOb3JtYWxpemUgYWxsIGluamVjdGlvbnMgaW50byBPYmplY3QtYmFzZWQgZm9ybWF0XG4gICAqL1xuICBmdW5jdGlvbiBub3JtYWxpemVJbmplY3QgKG9wdGlvbnMsIHZtKSB7XG4gICAgdmFyIGluamVjdCA9IG9wdGlvbnMuaW5qZWN0O1xuICAgIGlmICghaW5qZWN0KSB7IHJldHVybiB9XG4gICAgdmFyIG5vcm1hbGl6ZWQgPSBvcHRpb25zLmluamVjdCA9IHt9O1xuICAgIGlmIChBcnJheS5pc0FycmF5KGluamVjdCkpIHtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaW5qZWN0Lmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIG5vcm1hbGl6ZWRbaW5qZWN0W2ldXSA9IHsgZnJvbTogaW5qZWN0W2ldIH07XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc1BsYWluT2JqZWN0KGluamVjdCkpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBpbmplY3QpIHtcbiAgICAgICAgdmFyIHZhbCA9IGluamVjdFtrZXldO1xuICAgICAgICBub3JtYWxpemVkW2tleV0gPSBpc1BsYWluT2JqZWN0KHZhbClcbiAgICAgICAgICA/IGV4dGVuZCh7IGZyb206IGtleSB9LCB2YWwpXG4gICAgICAgICAgOiB7IGZyb206IHZhbCB9O1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiaW5qZWN0XFxcIjogZXhwZWN0ZWQgYW4gQXJyYXkgb3IgYW4gT2JqZWN0LCBcIiArXG4gICAgICAgIFwiYnV0IGdvdCBcIiArICh0b1Jhd1R5cGUoaW5qZWN0KSkgKyBcIi5cIixcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIE5vcm1hbGl6ZSByYXcgZnVuY3Rpb24gZGlyZWN0aXZlcyBpbnRvIG9iamVjdCBmb3JtYXQuXG4gICAqL1xuICBmdW5jdGlvbiBub3JtYWxpemVEaXJlY3RpdmVzIChvcHRpb25zKSB7XG4gICAgdmFyIGRpcnMgPSBvcHRpb25zLmRpcmVjdGl2ZXM7XG4gICAgaWYgKGRpcnMpIHtcbiAgICAgIGZvciAodmFyIGtleSBpbiBkaXJzKSB7XG4gICAgICAgIHZhciBkZWYkJDEgPSBkaXJzW2tleV07XG4gICAgICAgIGlmICh0eXBlb2YgZGVmJCQxID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgZGlyc1trZXldID0geyBiaW5kOiBkZWYkJDEsIHVwZGF0ZTogZGVmJCQxIH07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBhc3NlcnRPYmplY3RUeXBlIChuYW1lLCB2YWx1ZSwgdm0pIHtcbiAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkludmFsaWQgdmFsdWUgZm9yIG9wdGlvbiBcXFwiXCIgKyBuYW1lICsgXCJcXFwiOiBleHBlY3RlZCBhbiBPYmplY3QsIFwiICtcbiAgICAgICAgXCJidXQgZ290IFwiICsgKHRvUmF3VHlwZSh2YWx1ZSkpICsgXCIuXCIsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBNZXJnZSB0d28gb3B0aW9uIG9iamVjdHMgaW50byBhIG5ldyBvbmUuXG4gICAqIENvcmUgdXRpbGl0eSB1c2VkIGluIGJvdGggaW5zdGFudGlhdGlvbiBhbmQgaW5oZXJpdGFuY2UuXG4gICAqL1xuICBmdW5jdGlvbiBtZXJnZU9wdGlvbnMgKFxuICAgIHBhcmVudCxcbiAgICBjaGlsZCxcbiAgICB2bVxuICApIHtcbiAgICB7XG4gICAgICBjaGVja0NvbXBvbmVudHMoY2hpbGQpO1xuICAgIH1cblxuICAgIGlmICh0eXBlb2YgY2hpbGQgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIGNoaWxkID0gY2hpbGQub3B0aW9ucztcbiAgICB9XG5cbiAgICBub3JtYWxpemVQcm9wcyhjaGlsZCwgdm0pO1xuICAgIG5vcm1hbGl6ZUluamVjdChjaGlsZCwgdm0pO1xuICAgIG5vcm1hbGl6ZURpcmVjdGl2ZXMoY2hpbGQpO1xuXG4gICAgLy8gQXBwbHkgZXh0ZW5kcyBhbmQgbWl4aW5zIG9uIHRoZSBjaGlsZCBvcHRpb25zLFxuICAgIC8vIGJ1dCBvbmx5IGlmIGl0IGlzIGEgcmF3IG9wdGlvbnMgb2JqZWN0IHRoYXQgaXNuJ3RcbiAgICAvLyB0aGUgcmVzdWx0IG9mIGFub3RoZXIgbWVyZ2VPcHRpb25zIGNhbGwuXG4gICAgLy8gT25seSBtZXJnZWQgb3B0aW9ucyBoYXMgdGhlIF9iYXNlIHByb3BlcnR5LlxuICAgIGlmICghY2hpbGQuX2Jhc2UpIHtcbiAgICAgIGlmIChjaGlsZC5leHRlbmRzKSB7XG4gICAgICAgIHBhcmVudCA9IG1lcmdlT3B0aW9ucyhwYXJlbnQsIGNoaWxkLmV4dGVuZHMsIHZtKTtcbiAgICAgIH1cbiAgICAgIGlmIChjaGlsZC5taXhpbnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZC5taXhpbnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgcGFyZW50ID0gbWVyZ2VPcHRpb25zKHBhcmVudCwgY2hpbGQubWl4aW5zW2ldLCB2bSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgb3B0aW9ucyA9IHt9O1xuICAgIHZhciBrZXk7XG4gICAgZm9yIChrZXkgaW4gcGFyZW50KSB7XG4gICAgICBtZXJnZUZpZWxkKGtleSk7XG4gICAgfVxuICAgIGZvciAoa2V5IGluIGNoaWxkKSB7XG4gICAgICBpZiAoIWhhc093bihwYXJlbnQsIGtleSkpIHtcbiAgICAgICAgbWVyZ2VGaWVsZChrZXkpO1xuICAgICAgfVxuICAgIH1cbiAgICBmdW5jdGlvbiBtZXJnZUZpZWxkIChrZXkpIHtcbiAgICAgIHZhciBzdHJhdCA9IHN0cmF0c1trZXldIHx8IGRlZmF1bHRTdHJhdDtcbiAgICAgIG9wdGlvbnNba2V5XSA9IHN0cmF0KHBhcmVudFtrZXldLCBjaGlsZFtrZXldLCB2bSwga2V5KTtcbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIC8qKlxuICAgKiBSZXNvbHZlIGFuIGFzc2V0LlxuICAgKiBUaGlzIGZ1bmN0aW9uIGlzIHVzZWQgYmVjYXVzZSBjaGlsZCBpbnN0YW5jZXMgbmVlZCBhY2Nlc3NcbiAgICogdG8gYXNzZXRzIGRlZmluZWQgaW4gaXRzIGFuY2VzdG9yIGNoYWluLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVzb2x2ZUFzc2V0IChcbiAgICBvcHRpb25zLFxuICAgIHR5cGUsXG4gICAgaWQsXG4gICAgd2Fybk1pc3NpbmdcbiAgKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKHR5cGVvZiBpZCAhPT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgYXNzZXRzID0gb3B0aW9uc1t0eXBlXTtcbiAgICAvLyBjaGVjayBsb2NhbCByZWdpc3RyYXRpb24gdmFyaWF0aW9ucyBmaXJzdFxuICAgIGlmIChoYXNPd24oYXNzZXRzLCBpZCkpIHsgcmV0dXJuIGFzc2V0c1tpZF0gfVxuICAgIHZhciBjYW1lbGl6ZWRJZCA9IGNhbWVsaXplKGlkKTtcbiAgICBpZiAoaGFzT3duKGFzc2V0cywgY2FtZWxpemVkSWQpKSB7IHJldHVybiBhc3NldHNbY2FtZWxpemVkSWRdIH1cbiAgICB2YXIgUGFzY2FsQ2FzZUlkID0gY2FwaXRhbGl6ZShjYW1lbGl6ZWRJZCk7XG4gICAgaWYgKGhhc093bihhc3NldHMsIFBhc2NhbENhc2VJZCkpIHsgcmV0dXJuIGFzc2V0c1tQYXNjYWxDYXNlSWRdIH1cbiAgICAvLyBmYWxsYmFjayB0byBwcm90b3R5cGUgY2hhaW5cbiAgICB2YXIgcmVzID0gYXNzZXRzW2lkXSB8fCBhc3NldHNbY2FtZWxpemVkSWRdIHx8IGFzc2V0c1tQYXNjYWxDYXNlSWRdO1xuICAgIGlmICh3YXJuTWlzc2luZyAmJiAhcmVzKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnRmFpbGVkIHRvIHJlc29sdmUgJyArIHR5cGUuc2xpY2UoMCwgLTEpICsgJzogJyArIGlkLFxuICAgICAgICBvcHRpb25zXG4gICAgICApO1xuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICAvKiAgKi9cblxuXG5cbiAgZnVuY3Rpb24gdmFsaWRhdGVQcm9wIChcbiAgICBrZXksXG4gICAgcHJvcE9wdGlvbnMsXG4gICAgcHJvcHNEYXRhLFxuICAgIHZtXG4gICkge1xuICAgIHZhciBwcm9wID0gcHJvcE9wdGlvbnNba2V5XTtcbiAgICB2YXIgYWJzZW50ID0gIWhhc093bihwcm9wc0RhdGEsIGtleSk7XG4gICAgdmFyIHZhbHVlID0gcHJvcHNEYXRhW2tleV07XG4gICAgLy8gYm9vbGVhbiBjYXN0aW5nXG4gICAgdmFyIGJvb2xlYW5JbmRleCA9IGdldFR5cGVJbmRleChCb29sZWFuLCBwcm9wLnR5cGUpO1xuICAgIGlmIChib29sZWFuSW5kZXggPiAtMSkge1xuICAgICAgaWYgKGFic2VudCAmJiAhaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgICAgdmFsdWUgPSBmYWxzZTtcbiAgICAgIH0gZWxzZSBpZiAodmFsdWUgPT09ICcnIHx8IHZhbHVlID09PSBoeXBoZW5hdGUoa2V5KSkge1xuICAgICAgICAvLyBvbmx5IGNhc3QgZW1wdHkgc3RyaW5nIC8gc2FtZSBuYW1lIHRvIGJvb2xlYW4gaWZcbiAgICAgICAgLy8gYm9vbGVhbiBoYXMgaGlnaGVyIHByaW9yaXR5XG4gICAgICAgIHZhciBzdHJpbmdJbmRleCA9IGdldFR5cGVJbmRleChTdHJpbmcsIHByb3AudHlwZSk7XG4gICAgICAgIGlmIChzdHJpbmdJbmRleCA8IDAgfHwgYm9vbGVhbkluZGV4IDwgc3RyaW5nSW5kZXgpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRydWU7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gY2hlY2sgZGVmYXVsdCB2YWx1ZVxuICAgIGlmICh2YWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICB2YWx1ZSA9IGdldFByb3BEZWZhdWx0VmFsdWUodm0sIHByb3AsIGtleSk7XG4gICAgICAvLyBzaW5jZSB0aGUgZGVmYXVsdCB2YWx1ZSBpcyBhIGZyZXNoIGNvcHksXG4gICAgICAvLyBtYWtlIHN1cmUgdG8gb2JzZXJ2ZSBpdC5cbiAgICAgIHZhciBwcmV2U2hvdWxkT2JzZXJ2ZSA9IHNob3VsZE9ic2VydmU7XG4gICAgICB0b2dnbGVPYnNlcnZpbmcodHJ1ZSk7XG4gICAgICBvYnNlcnZlKHZhbHVlKTtcbiAgICAgIHRvZ2dsZU9ic2VydmluZyhwcmV2U2hvdWxkT2JzZXJ2ZSk7XG4gICAgfVxuICAgIHtcbiAgICAgIGFzc2VydFByb3AocHJvcCwga2V5LCB2YWx1ZSwgdm0sIGFic2VudCk7XG4gICAgfVxuICAgIHJldHVybiB2YWx1ZVxuICB9XG5cbiAgLyoqXG4gICAqIEdldCB0aGUgZGVmYXVsdCB2YWx1ZSBvZiBhIHByb3AuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRQcm9wRGVmYXVsdFZhbHVlICh2bSwgcHJvcCwga2V5KSB7XG4gICAgLy8gbm8gZGVmYXVsdCwgcmV0dXJuIHVuZGVmaW5lZFxuICAgIGlmICghaGFzT3duKHByb3AsICdkZWZhdWx0JykpIHtcbiAgICAgIHJldHVybiB1bmRlZmluZWRcbiAgICB9XG4gICAgdmFyIGRlZiA9IHByb3AuZGVmYXVsdDtcbiAgICAvLyB3YXJuIGFnYWluc3Qgbm9uLWZhY3RvcnkgZGVmYXVsdHMgZm9yIE9iamVjdCAmIEFycmF5XG4gICAgaWYgKGlzT2JqZWN0KGRlZikpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgICdJbnZhbGlkIGRlZmF1bHQgdmFsdWUgZm9yIHByb3AgXCInICsga2V5ICsgJ1wiOiAnICtcbiAgICAgICAgJ1Byb3BzIHdpdGggdHlwZSBPYmplY3QvQXJyYXkgbXVzdCB1c2UgYSBmYWN0b3J5IGZ1bmN0aW9uICcgK1xuICAgICAgICAndG8gcmV0dXJuIHRoZSBkZWZhdWx0IHZhbHVlLicsXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgIH1cbiAgICAvLyB0aGUgcmF3IHByb3AgdmFsdWUgd2FzIGFsc28gdW5kZWZpbmVkIGZyb20gcHJldmlvdXMgcmVuZGVyLFxuICAgIC8vIHJldHVybiBwcmV2aW91cyBkZWZhdWx0IHZhbHVlIHRvIGF2b2lkIHVubmVjZXNzYXJ5IHdhdGNoZXIgdHJpZ2dlclxuICAgIGlmICh2bSAmJiB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgJiZcbiAgICAgIHZtLiRvcHRpb25zLnByb3BzRGF0YVtrZXldID09PSB1bmRlZmluZWQgJiZcbiAgICAgIHZtLl9wcm9wc1trZXldICE9PSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIHJldHVybiB2bS5fcHJvcHNba2V5XVxuICAgIH1cbiAgICAvLyBjYWxsIGZhY3RvcnkgZnVuY3Rpb24gZm9yIG5vbi1GdW5jdGlvbiB0eXBlc1xuICAgIC8vIGEgdmFsdWUgaXMgRnVuY3Rpb24gaWYgaXRzIHByb3RvdHlwZSBpcyBmdW5jdGlvbiBldmVuIGFjcm9zcyBkaWZmZXJlbnQgZXhlY3V0aW9uIGNvbnRleHRcbiAgICByZXR1cm4gdHlwZW9mIGRlZiA9PT0gJ2Z1bmN0aW9uJyAmJiBnZXRUeXBlKHByb3AudHlwZSkgIT09ICdGdW5jdGlvbidcbiAgICAgID8gZGVmLmNhbGwodm0pXG4gICAgICA6IGRlZlxuICB9XG5cbiAgLyoqXG4gICAqIEFzc2VydCB3aGV0aGVyIGEgcHJvcCBpcyB2YWxpZC5cbiAgICovXG4gIGZ1bmN0aW9uIGFzc2VydFByb3AgKFxuICAgIHByb3AsXG4gICAgbmFtZSxcbiAgICB2YWx1ZSxcbiAgICB2bSxcbiAgICBhYnNlbnRcbiAgKSB7XG4gICAgaWYgKHByb3AucmVxdWlyZWQgJiYgYWJzZW50KSB7XG4gICAgICB3YXJuKFxuICAgICAgICAnTWlzc2luZyByZXF1aXJlZCBwcm9wOiBcIicgKyBuYW1lICsgJ1wiJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHZhbHVlID09IG51bGwgJiYgIXByb3AucmVxdWlyZWQpIHtcbiAgICAgIHJldHVyblxuICAgIH1cbiAgICB2YXIgdHlwZSA9IHByb3AudHlwZTtcbiAgICB2YXIgdmFsaWQgPSAhdHlwZSB8fCB0eXBlID09PSB0cnVlO1xuICAgIHZhciBleHBlY3RlZFR5cGVzID0gW107XG4gICAgaWYgKHR5cGUpIHtcbiAgICAgIGlmICghQXJyYXkuaXNBcnJheSh0eXBlKSkge1xuICAgICAgICB0eXBlID0gW3R5cGVdO1xuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0eXBlLmxlbmd0aCAmJiAhdmFsaWQ7IGkrKykge1xuICAgICAgICB2YXIgYXNzZXJ0ZWRUeXBlID0gYXNzZXJ0VHlwZSh2YWx1ZSwgdHlwZVtpXSwgdm0pO1xuICAgICAgICBleHBlY3RlZFR5cGVzLnB1c2goYXNzZXJ0ZWRUeXBlLmV4cGVjdGVkVHlwZSB8fCAnJyk7XG4gICAgICAgIHZhbGlkID0gYXNzZXJ0ZWRUeXBlLnZhbGlkO1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoYXZlRXhwZWN0ZWRUeXBlcyA9IGV4cGVjdGVkVHlwZXMuc29tZShmdW5jdGlvbiAodCkgeyByZXR1cm4gdDsgfSk7XG4gICAgaWYgKCF2YWxpZCAmJiBoYXZlRXhwZWN0ZWRUeXBlcykge1xuICAgICAgd2FybihcbiAgICAgICAgZ2V0SW52YWxpZFR5cGVNZXNzYWdlKG5hbWUsIHZhbHVlLCBleHBlY3RlZFR5cGVzKSxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHZhbGlkYXRvciA9IHByb3AudmFsaWRhdG9yO1xuICAgIGlmICh2YWxpZGF0b3IpIHtcbiAgICAgIGlmICghdmFsaWRhdG9yKHZhbHVlKSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdJbnZhbGlkIHByb3A6IGN1c3RvbSB2YWxpZGF0b3IgY2hlY2sgZmFpbGVkIGZvciBwcm9wIFwiJyArIG5hbWUgKyAnXCIuJyxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIHZhciBzaW1wbGVDaGVja1JFID0gL14oU3RyaW5nfE51bWJlcnxCb29sZWFufEZ1bmN0aW9ufFN5bWJvbHxCaWdJbnQpJC87XG5cbiAgZnVuY3Rpb24gYXNzZXJ0VHlwZSAodmFsdWUsIHR5cGUsIHZtKSB7XG4gICAgdmFyIHZhbGlkO1xuICAgIHZhciBleHBlY3RlZFR5cGUgPSBnZXRUeXBlKHR5cGUpO1xuICAgIGlmIChzaW1wbGVDaGVja1JFLnRlc3QoZXhwZWN0ZWRUeXBlKSkge1xuICAgICAgdmFyIHQgPSB0eXBlb2YgdmFsdWU7XG4gICAgICB2YWxpZCA9IHQgPT09IGV4cGVjdGVkVHlwZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgLy8gZm9yIHByaW1pdGl2ZSB3cmFwcGVyIG9iamVjdHNcbiAgICAgIGlmICghdmFsaWQgJiYgdCA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgdmFsaWQgPSB2YWx1ZSBpbnN0YW5jZW9mIHR5cGU7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChleHBlY3RlZFR5cGUgPT09ICdPYmplY3QnKSB7XG4gICAgICB2YWxpZCA9IGlzUGxhaW5PYmplY3QodmFsdWUpO1xuICAgIH0gZWxzZSBpZiAoZXhwZWN0ZWRUeXBlID09PSAnQXJyYXknKSB7XG4gICAgICB2YWxpZCA9IEFycmF5LmlzQXJyYXkodmFsdWUpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0cnkge1xuICAgICAgICB2YWxpZCA9IHZhbHVlIGluc3RhbmNlb2YgdHlwZTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgd2FybignSW52YWxpZCBwcm9wIHR5cGU6IFwiJyArIFN0cmluZyh0eXBlKSArICdcIiBpcyBub3QgYSBjb25zdHJ1Y3RvcicsIHZtKTtcbiAgICAgICAgdmFsaWQgPSBmYWxzZTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHtcbiAgICAgIHZhbGlkOiB2YWxpZCxcbiAgICAgIGV4cGVjdGVkVHlwZTogZXhwZWN0ZWRUeXBlXG4gICAgfVxuICB9XG5cbiAgdmFyIGZ1bmN0aW9uVHlwZUNoZWNrUkUgPSAvXlxccypmdW5jdGlvbiAoXFx3KykvO1xuXG4gIC8qKlxuICAgKiBVc2UgZnVuY3Rpb24gc3RyaW5nIG5hbWUgdG8gY2hlY2sgYnVpbHQtaW4gdHlwZXMsXG4gICAqIGJlY2F1c2UgYSBzaW1wbGUgZXF1YWxpdHkgY2hlY2sgd2lsbCBmYWlsIHdoZW4gcnVubmluZ1xuICAgKiBhY3Jvc3MgZGlmZmVyZW50IHZtcyAvIGlmcmFtZXMuXG4gICAqL1xuICBmdW5jdGlvbiBnZXRUeXBlIChmbikge1xuICAgIHZhciBtYXRjaCA9IGZuICYmIGZuLnRvU3RyaW5nKCkubWF0Y2goZnVuY3Rpb25UeXBlQ2hlY2tSRSk7XG4gICAgcmV0dXJuIG1hdGNoID8gbWF0Y2hbMV0gOiAnJ1xuICB9XG5cbiAgZnVuY3Rpb24gaXNTYW1lVHlwZSAoYSwgYikge1xuICAgIHJldHVybiBnZXRUeXBlKGEpID09PSBnZXRUeXBlKGIpXG4gIH1cblxuICBmdW5jdGlvbiBnZXRUeXBlSW5kZXggKHR5cGUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgICBpZiAoIUFycmF5LmlzQXJyYXkoZXhwZWN0ZWRUeXBlcykpIHtcbiAgICAgIHJldHVybiBpc1NhbWVUeXBlKGV4cGVjdGVkVHlwZXMsIHR5cGUpID8gMCA6IC0xXG4gICAgfVxuICAgIGZvciAodmFyIGkgPSAwLCBsZW4gPSBleHBlY3RlZFR5cGVzLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICBpZiAoaXNTYW1lVHlwZShleHBlY3RlZFR5cGVzW2ldLCB0eXBlKSkge1xuICAgICAgICByZXR1cm4gaVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gLTFcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEludmFsaWRUeXBlTWVzc2FnZSAobmFtZSwgdmFsdWUsIGV4cGVjdGVkVHlwZXMpIHtcbiAgICB2YXIgbWVzc2FnZSA9IFwiSW52YWxpZCBwcm9wOiB0eXBlIGNoZWNrIGZhaWxlZCBmb3IgcHJvcCBcXFwiXCIgKyBuYW1lICsgXCJcXFwiLlwiICtcbiAgICAgIFwiIEV4cGVjdGVkIFwiICsgKGV4cGVjdGVkVHlwZXMubWFwKGNhcGl0YWxpemUpLmpvaW4oJywgJykpO1xuICAgIHZhciBleHBlY3RlZFR5cGUgPSBleHBlY3RlZFR5cGVzWzBdO1xuICAgIHZhciByZWNlaXZlZFR5cGUgPSB0b1Jhd1R5cGUodmFsdWUpO1xuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSBleHBlY3RlZCB2YWx1ZVxuICAgIGlmIChcbiAgICAgIGV4cGVjdGVkVHlwZXMubGVuZ3RoID09PSAxICYmXG4gICAgICBpc0V4cGxpY2FibGUoZXhwZWN0ZWRUeXBlKSAmJlxuICAgICAgaXNFeHBsaWNhYmxlKHR5cGVvZiB2YWx1ZSkgJiZcbiAgICAgICFpc0Jvb2xlYW4oZXhwZWN0ZWRUeXBlLCByZWNlaXZlZFR5cGUpXG4gICAgKSB7XG4gICAgICBtZXNzYWdlICs9IFwiIHdpdGggdmFsdWUgXCIgKyAoc3R5bGVWYWx1ZSh2YWx1ZSwgZXhwZWN0ZWRUeXBlKSk7XG4gICAgfVxuICAgIG1lc3NhZ2UgKz0gXCIsIGdvdCBcIiArIHJlY2VpdmVkVHlwZSArIFwiIFwiO1xuICAgIC8vIGNoZWNrIGlmIHdlIG5lZWQgdG8gc3BlY2lmeSByZWNlaXZlZCB2YWx1ZVxuICAgIGlmIChpc0V4cGxpY2FibGUocmVjZWl2ZWRUeXBlKSkge1xuICAgICAgbWVzc2FnZSArPSBcIndpdGggdmFsdWUgXCIgKyAoc3R5bGVWYWx1ZSh2YWx1ZSwgcmVjZWl2ZWRUeXBlKSkgKyBcIi5cIjtcbiAgICB9XG4gICAgcmV0dXJuIG1lc3NhZ2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHN0eWxlVmFsdWUgKHZhbHVlLCB0eXBlKSB7XG4gICAgaWYgKHR5cGUgPT09ICdTdHJpbmcnKSB7XG4gICAgICByZXR1cm4gKFwiXFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIilcbiAgICB9IGVsc2UgaWYgKHR5cGUgPT09ICdOdW1iZXInKSB7XG4gICAgICByZXR1cm4gKFwiXCIgKyAoTnVtYmVyKHZhbHVlKSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcIiArIHZhbHVlKVxuICAgIH1cbiAgfVxuXG4gIHZhciBFWFBMSUNBQkxFX1RZUEVTID0gWydzdHJpbmcnLCAnbnVtYmVyJywgJ2Jvb2xlYW4nXTtcbiAgZnVuY3Rpb24gaXNFeHBsaWNhYmxlICh2YWx1ZSkge1xuICAgIHJldHVybiBFWFBMSUNBQkxFX1RZUEVTLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIHZhbHVlLnRvTG93ZXJDYXNlKCkgPT09IGVsZW07IH0pXG4gIH1cblxuICBmdW5jdGlvbiBpc0Jvb2xlYW4gKCkge1xuICAgIHZhciBhcmdzID0gW10sIGxlbiA9IGFyZ3VtZW50cy5sZW5ndGg7XG4gICAgd2hpbGUgKCBsZW4tLSApIGFyZ3NbIGxlbiBdID0gYXJndW1lbnRzWyBsZW4gXTtcblxuICAgIHJldHVybiBhcmdzLnNvbWUoZnVuY3Rpb24gKGVsZW0pIHsgcmV0dXJuIGVsZW0udG9Mb3dlckNhc2UoKSA9PT0gJ2Jvb2xlYW4nOyB9KVxuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gaGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgICAvLyBEZWFjdGl2YXRlIGRlcHMgdHJhY2tpbmcgd2hpbGUgcHJvY2Vzc2luZyBlcnJvciBoYW5kbGVyIHRvIGF2b2lkIHBvc3NpYmxlIGluZmluaXRlIHJlbmRlcmluZy5cbiAgICAvLyBTZWU6IGh0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWV4L2lzc3Vlcy8xNTA1XG4gICAgcHVzaFRhcmdldCgpO1xuICAgIHRyeSB7XG4gICAgICBpZiAodm0pIHtcbiAgICAgICAgdmFyIGN1ciA9IHZtO1xuICAgICAgICB3aGlsZSAoKGN1ciA9IGN1ci4kcGFyZW50KSkge1xuICAgICAgICAgIHZhciBob29rcyA9IGN1ci4kb3B0aW9ucy5lcnJvckNhcHR1cmVkO1xuICAgICAgICAgIGlmIChob29rcykge1xuICAgICAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBob29rcy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgICB0cnkge1xuICAgICAgICAgICAgICAgIHZhciBjYXB0dXJlID0gaG9va3NbaV0uY2FsbChjdXIsIGVyciwgdm0sIGluZm8pID09PSBmYWxzZTtcbiAgICAgICAgICAgICAgICBpZiAoY2FwdHVyZSkgeyByZXR1cm4gfVxuICAgICAgICAgICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgICAgICAgICAgZ2xvYmFsSGFuZGxlRXJyb3IoZSwgY3VyLCAnZXJyb3JDYXB0dXJlZCBob29rJyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGdsb2JhbEhhbmRsZUVycm9yKGVyciwgdm0sIGluZm8pO1xuICAgIH0gZmluYWxseSB7XG4gICAgICBwb3BUYXJnZXQoKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyAoXG4gICAgaGFuZGxlcixcbiAgICBjb250ZXh0LFxuICAgIGFyZ3MsXG4gICAgdm0sXG4gICAgaW5mb1xuICApIHtcbiAgICB2YXIgcmVzO1xuICAgIHRyeSB7XG4gICAgICByZXMgPSBhcmdzID8gaGFuZGxlci5hcHBseShjb250ZXh0LCBhcmdzKSA6IGhhbmRsZXIuY2FsbChjb250ZXh0KTtcbiAgICAgIGlmIChyZXMgJiYgIXJlcy5faXNWdWUgJiYgaXNQcm9taXNlKHJlcykgJiYgIXJlcy5faGFuZGxlZCkge1xuICAgICAgICByZXMuY2F0Y2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvICsgXCIgKFByb21pc2UvYXN5bmMpXCIpOyB9KTtcbiAgICAgICAgLy8gaXNzdWUgIzk1MTFcbiAgICAgICAgLy8gYXZvaWQgY2F0Y2ggdHJpZ2dlcmluZyBtdWx0aXBsZSB0aW1lcyB3aGVuIG5lc3RlZCBjYWxsc1xuICAgICAgICByZXMuX2hhbmRsZWQgPSB0cnVlO1xuICAgICAgfVxuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBpbmZvKTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgZnVuY3Rpb24gZ2xvYmFsSGFuZGxlRXJyb3IgKGVyciwgdm0sIGluZm8pIHtcbiAgICBpZiAoY29uZmlnLmVycm9ySGFuZGxlcikge1xuICAgICAgdHJ5IHtcbiAgICAgICAgcmV0dXJuIGNvbmZpZy5lcnJvckhhbmRsZXIuY2FsbChudWxsLCBlcnIsIHZtLCBpbmZvKVxuICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAvLyBpZiB0aGUgdXNlciBpbnRlbnRpb25hbGx5IHRocm93cyB0aGUgb3JpZ2luYWwgZXJyb3IgaW4gdGhlIGhhbmRsZXIsXG4gICAgICAgIC8vIGRvIG5vdCBsb2cgaXQgdHdpY2VcbiAgICAgICAgaWYgKGUgIT09IGVycikge1xuICAgICAgICAgIGxvZ0Vycm9yKGUsIG51bGwsICdjb25maWcuZXJyb3JIYW5kbGVyJyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgbG9nRXJyb3IoZXJyLCB2bSwgaW5mbyk7XG4gIH1cblxuICBmdW5jdGlvbiBsb2dFcnJvciAoZXJyLCB2bSwgaW5mbykge1xuICAgIHtcbiAgICAgIHdhcm4oKFwiRXJyb3IgaW4gXCIgKyBpbmZvICsgXCI6IFxcXCJcIiArIChlcnIudG9TdHJpbmcoKSkgKyBcIlxcXCJcIiksIHZtKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoKGluQnJvd3NlciB8fCBpbldlZXgpICYmIHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgY29uc29sZS5lcnJvcihlcnIpO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aHJvdyBlcnJcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgaXNVc2luZ01pY3JvVGFzayA9IGZhbHNlO1xuXG4gIHZhciBjYWxsYmFja3MgPSBbXTtcbiAgdmFyIHBlbmRpbmcgPSBmYWxzZTtcblxuICBmdW5jdGlvbiBmbHVzaENhbGxiYWNrcyAoKSB7XG4gICAgcGVuZGluZyA9IGZhbHNlO1xuICAgIHZhciBjb3BpZXMgPSBjYWxsYmFja3Muc2xpY2UoMCk7XG4gICAgY2FsbGJhY2tzLmxlbmd0aCA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjb3BpZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvcGllc1tpXSgpO1xuICAgIH1cbiAgfVxuXG4gIC8vIEhlcmUgd2UgaGF2ZSBhc3luYyBkZWZlcnJpbmcgd3JhcHBlcnMgdXNpbmcgbWljcm90YXNrcy5cbiAgLy8gSW4gMi41IHdlIHVzZWQgKG1hY3JvKSB0YXNrcyAoaW4gY29tYmluYXRpb24gd2l0aCBtaWNyb3Rhc2tzKS5cbiAgLy8gSG93ZXZlciwgaXQgaGFzIHN1YnRsZSBwcm9ibGVtcyB3aGVuIHN0YXRlIGlzIGNoYW5nZWQgcmlnaHQgYmVmb3JlIHJlcGFpbnRcbiAgLy8gKGUuZy4gIzY4MTMsIG91dC1pbiB0cmFuc2l0aW9ucykuXG4gIC8vIEFsc28sIHVzaW5nIChtYWNybykgdGFza3MgaW4gZXZlbnQgaGFuZGxlciB3b3VsZCBjYXVzZSBzb21lIHdlaXJkIGJlaGF2aW9yc1xuICAvLyB0aGF0IGNhbm5vdCBiZSBjaXJjdW12ZW50ZWQgKGUuZy4gIzcxMDksICM3MTUzLCAjNzU0NiwgIzc4MzQsICM4MTA5KS5cbiAgLy8gU28gd2Ugbm93IHVzZSBtaWNyb3Rhc2tzIGV2ZXJ5d2hlcmUsIGFnYWluLlxuICAvLyBBIG1ham9yIGRyYXdiYWNrIG9mIHRoaXMgdHJhZGVvZmYgaXMgdGhhdCB0aGVyZSBhcmUgc29tZSBzY2VuYXJpb3NcbiAgLy8gd2hlcmUgbWljcm90YXNrcyBoYXZlIHRvbyBoaWdoIGEgcHJpb3JpdHkgYW5kIGZpcmUgaW4gYmV0d2VlbiBzdXBwb3NlZGx5XG4gIC8vIHNlcXVlbnRpYWwgZXZlbnRzIChlLmcuICM0NTIxLCAjNjY5MCwgd2hpY2ggaGF2ZSB3b3JrYXJvdW5kcylcbiAgLy8gb3IgZXZlbiBiZXR3ZWVuIGJ1YmJsaW5nIG9mIHRoZSBzYW1lIGV2ZW50ICgjNjU2NikuXG4gIHZhciB0aW1lckZ1bmM7XG5cbiAgLy8gVGhlIG5leHRUaWNrIGJlaGF2aW9yIGxldmVyYWdlcyB0aGUgbWljcm90YXNrIHF1ZXVlLCB3aGljaCBjYW4gYmUgYWNjZXNzZWRcbiAgLy8gdmlhIGVpdGhlciBuYXRpdmUgUHJvbWlzZS50aGVuIG9yIE11dGF0aW9uT2JzZXJ2ZXIuXG4gIC8vIE11dGF0aW9uT2JzZXJ2ZXIgaGFzIHdpZGVyIHN1cHBvcnQsIGhvd2V2ZXIgaXQgaXMgc2VyaW91c2x5IGJ1Z2dlZCBpblxuICAvLyBVSVdlYlZpZXcgaW4gaU9TID49IDkuMy4zIHdoZW4gdHJpZ2dlcmVkIGluIHRvdWNoIGV2ZW50IGhhbmRsZXJzLiBJdFxuICAvLyBjb21wbGV0ZWx5IHN0b3BzIHdvcmtpbmcgYWZ0ZXIgdHJpZ2dlcmluZyBhIGZldyB0aW1lcy4uLiBzbywgaWYgbmF0aXZlXG4gIC8vIFByb21pc2UgaXMgYXZhaWxhYmxlLCB3ZSB3aWxsIHVzZSBpdDpcbiAgLyogaXN0YW5idWwgaWdub3JlIG5leHQsICRmbG93LWRpc2FibGUtbGluZSAqL1xuICBpZiAodHlwZW9mIFByb21pc2UgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb21pc2UpKSB7XG4gICAgdmFyIHAgPSBQcm9taXNlLnJlc29sdmUoKTtcbiAgICB0aW1lckZ1bmMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBwLnRoZW4oZmx1c2hDYWxsYmFja3MpO1xuICAgICAgLy8gSW4gcHJvYmxlbWF0aWMgVUlXZWJWaWV3cywgUHJvbWlzZS50aGVuIGRvZXNuJ3QgY29tcGxldGVseSBicmVhaywgYnV0XG4gICAgICAvLyBpdCBjYW4gZ2V0IHN0dWNrIGluIGEgd2VpcmQgc3RhdGUgd2hlcmUgY2FsbGJhY2tzIGFyZSBwdXNoZWQgaW50byB0aGVcbiAgICAgIC8vIG1pY3JvdGFzayBxdWV1ZSBidXQgdGhlIHF1ZXVlIGlzbid0IGJlaW5nIGZsdXNoZWQsIHVudGlsIHRoZSBicm93c2VyXG4gICAgICAvLyBuZWVkcyB0byBkbyBzb21lIG90aGVyIHdvcmssIGUuZy4gaGFuZGxlIGEgdGltZXIuIFRoZXJlZm9yZSB3ZSBjYW5cbiAgICAgIC8vIFwiZm9yY2VcIiB0aGUgbWljcm90YXNrIHF1ZXVlIHRvIGJlIGZsdXNoZWQgYnkgYWRkaW5nIGFuIGVtcHR5IHRpbWVyLlxuICAgICAgaWYgKGlzSU9TKSB7IHNldFRpbWVvdXQobm9vcCk7IH1cbiAgICB9O1xuICAgIGlzVXNpbmdNaWNyb1Rhc2sgPSB0cnVlO1xuICB9IGVsc2UgaWYgKCFpc0lFICYmIHR5cGVvZiBNdXRhdGlvbk9ic2VydmVyICE9PSAndW5kZWZpbmVkJyAmJiAoXG4gICAgaXNOYXRpdmUoTXV0YXRpb25PYnNlcnZlcikgfHxcbiAgICAvLyBQaGFudG9tSlMgYW5kIGlPUyA3LnhcbiAgICBNdXRhdGlvbk9ic2VydmVyLnRvU3RyaW5nKCkgPT09ICdbb2JqZWN0IE11dGF0aW9uT2JzZXJ2ZXJDb25zdHJ1Y3Rvcl0nXG4gICkpIHtcbiAgICAvLyBVc2UgTXV0YXRpb25PYnNlcnZlciB3aGVyZSBuYXRpdmUgUHJvbWlzZSBpcyBub3QgYXZhaWxhYmxlLFxuICAgIC8vIGUuZy4gUGhhbnRvbUpTLCBpT1M3LCBBbmRyb2lkIDQuNFxuICAgIC8vICgjNjQ2NiBNdXRhdGlvbk9ic2VydmVyIGlzIHVucmVsaWFibGUgaW4gSUUxMSlcbiAgICB2YXIgY291bnRlciA9IDE7XG4gICAgdmFyIG9ic2VydmVyID0gbmV3IE11dGF0aW9uT2JzZXJ2ZXIoZmx1c2hDYWxsYmFja3MpO1xuICAgIHZhciB0ZXh0Tm9kZSA9IGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKFN0cmluZyhjb3VudGVyKSk7XG4gICAgb2JzZXJ2ZXIub2JzZXJ2ZSh0ZXh0Tm9kZSwge1xuICAgICAgY2hhcmFjdGVyRGF0YTogdHJ1ZVxuICAgIH0pO1xuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGNvdW50ZXIgPSAoY291bnRlciArIDEpICUgMjtcbiAgICAgIHRleHROb2RlLmRhdGEgPSBTdHJpbmcoY291bnRlcik7XG4gICAgfTtcbiAgICBpc1VzaW5nTWljcm9UYXNrID0gdHJ1ZTtcbiAgfSBlbHNlIGlmICh0eXBlb2Ygc2V0SW1tZWRpYXRlICE9PSAndW5kZWZpbmVkJyAmJiBpc05hdGl2ZShzZXRJbW1lZGlhdGUpKSB7XG4gICAgLy8gRmFsbGJhY2sgdG8gc2V0SW1tZWRpYXRlLlxuICAgIC8vIFRlY2huaWNhbGx5IGl0IGxldmVyYWdlcyB0aGUgKG1hY3JvKSB0YXNrIHF1ZXVlLFxuICAgIC8vIGJ1dCBpdCBpcyBzdGlsbCBhIGJldHRlciBjaG9pY2UgdGhhbiBzZXRUaW1lb3V0LlxuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldEltbWVkaWF0ZShmbHVzaENhbGxiYWNrcyk7XG4gICAgfTtcbiAgfSBlbHNlIHtcbiAgICAvLyBGYWxsYmFjayB0byBzZXRUaW1lb3V0LlxuICAgIHRpbWVyRnVuYyA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHNldFRpbWVvdXQoZmx1c2hDYWxsYmFja3MsIDApO1xuICAgIH07XG4gIH1cblxuICBmdW5jdGlvbiBuZXh0VGljayAoY2IsIGN0eCkge1xuICAgIHZhciBfcmVzb2x2ZTtcbiAgICBjYWxsYmFja3MucHVzaChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoY2IpIHtcbiAgICAgICAgdHJ5IHtcbiAgICAgICAgICBjYi5jYWxsKGN0eCk7XG4gICAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgICBoYW5kbGVFcnJvcihlLCBjdHgsICduZXh0VGljaycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKF9yZXNvbHZlKSB7XG4gICAgICAgIF9yZXNvbHZlKGN0eCk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgaWYgKCFwZW5kaW5nKSB7XG4gICAgICBwZW5kaW5nID0gdHJ1ZTtcbiAgICAgIHRpbWVyRnVuYygpO1xuICAgIH1cbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICBpZiAoIWNiICYmIHR5cGVvZiBQcm9taXNlICE9PSAndW5kZWZpbmVkJykge1xuICAgICAgcmV0dXJuIG5ldyBQcm9taXNlKGZ1bmN0aW9uIChyZXNvbHZlKSB7XG4gICAgICAgIF9yZXNvbHZlID0gcmVzb2x2ZTtcbiAgICAgIH0pXG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIG1hcms7XG4gIHZhciBtZWFzdXJlO1xuXG4gIHtcbiAgICB2YXIgcGVyZiA9IGluQnJvd3NlciAmJiB3aW5kb3cucGVyZm9ybWFuY2U7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKFxuICAgICAgcGVyZiAmJlxuICAgICAgcGVyZi5tYXJrICYmXG4gICAgICBwZXJmLm1lYXN1cmUgJiZcbiAgICAgIHBlcmYuY2xlYXJNYXJrcyAmJlxuICAgICAgcGVyZi5jbGVhck1lYXN1cmVzXG4gICAgKSB7XG4gICAgICBtYXJrID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gcGVyZi5tYXJrKHRhZyk7IH07XG4gICAgICBtZWFzdXJlID0gZnVuY3Rpb24gKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpIHtcbiAgICAgICAgcGVyZi5tZWFzdXJlKG5hbWUsIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgICBwZXJmLmNsZWFyTWFya3Moc3RhcnRUYWcpO1xuICAgICAgICBwZXJmLmNsZWFyTWFya3MoZW5kVGFnKTtcbiAgICAgICAgLy8gcGVyZi5jbGVhck1lYXN1cmVzKG5hbWUpXG4gICAgICB9O1xuICAgIH1cbiAgfVxuXG4gIC8qIG5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBwbGF5IHdlbGwgd2l0aCBQcm94eSAqL1xuXG4gIHZhciBpbml0UHJveHk7XG5cbiAge1xuICAgIHZhciBhbGxvd2VkR2xvYmFscyA9IG1ha2VNYXAoXG4gICAgICAnSW5maW5pdHksdW5kZWZpbmVkLE5hTixpc0Zpbml0ZSxpc05hTiwnICtcbiAgICAgICdwYXJzZUZsb2F0LHBhcnNlSW50LGRlY29kZVVSSSxkZWNvZGVVUklDb21wb25lbnQsZW5jb2RlVVJJLGVuY29kZVVSSUNvbXBvbmVudCwnICtcbiAgICAgICdNYXRoLE51bWJlcixEYXRlLEFycmF5LE9iamVjdCxCb29sZWFuLFN0cmluZyxSZWdFeHAsTWFwLFNldCxKU09OLEludGwsQmlnSW50LCcgK1xuICAgICAgJ3JlcXVpcmUnIC8vIGZvciBXZWJwYWNrL0Jyb3dzZXJpZnlcbiAgICApO1xuXG4gICAgdmFyIHdhcm5Ob25QcmVzZW50ID0gZnVuY3Rpb24gKHRhcmdldCwga2V5KSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIlByb3BlcnR5IG9yIG1ldGhvZCBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgbm90IGRlZmluZWQgb24gdGhlIGluc3RhbmNlIGJ1dCBcIiArXG4gICAgICAgICdyZWZlcmVuY2VkIGR1cmluZyByZW5kZXIuIE1ha2Ugc3VyZSB0aGF0IHRoaXMgcHJvcGVydHkgaXMgcmVhY3RpdmUsICcgK1xuICAgICAgICAnZWl0aGVyIGluIHRoZSBkYXRhIG9wdGlvbiwgb3IgZm9yIGNsYXNzLWJhc2VkIGNvbXBvbmVudHMsIGJ5ICcgK1xuICAgICAgICAnaW5pdGlhbGl6aW5nIHRoZSBwcm9wZXJ0eS4gJyArXG4gICAgICAgICdTZWU6IGh0dHBzOi8vdnVlanMub3JnL3YyL2d1aWRlL3JlYWN0aXZpdHkuaHRtbCNEZWNsYXJpbmctUmVhY3RpdmUtUHJvcGVydGllcy4nLFxuICAgICAgICB0YXJnZXRcbiAgICAgICk7XG4gICAgfTtcblxuICAgIHZhciB3YXJuUmVzZXJ2ZWRQcmVmaXggPSBmdW5jdGlvbiAodGFyZ2V0LCBrZXkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiUHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIG11c3QgYmUgYWNjZXNzZWQgd2l0aCBcXFwiJGRhdGEuXCIgKyBrZXkgKyBcIlxcXCIgYmVjYXVzZSBcIiArXG4gICAgICAgICdwcm9wZXJ0aWVzIHN0YXJ0aW5nIHdpdGggXCIkXCIgb3IgXCJfXCIgYXJlIG5vdCBwcm94aWVkIGluIHRoZSBWdWUgaW5zdGFuY2UgdG8gJyArXG4gICAgICAgICdwcmV2ZW50IGNvbmZsaWN0cyB3aXRoIFZ1ZSBpbnRlcm5hbHMuICcgK1xuICAgICAgICAnU2VlOiBodHRwczovL3Z1ZWpzLm9yZy92Mi9hcGkvI2RhdGEnLFxuICAgICAgICB0YXJnZXRcbiAgICAgICk7XG4gICAgfTtcblxuICAgIHZhciBoYXNQcm94eSA9XG4gICAgICB0eXBlb2YgUHJveHkgIT09ICd1bmRlZmluZWQnICYmIGlzTmF0aXZlKFByb3h5KTtcblxuICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgdmFyIGlzQnVpbHRJbk1vZGlmaWVyID0gbWFrZU1hcCgnc3RvcCxwcmV2ZW50LHNlbGYsY3RybCxzaGlmdCxhbHQsbWV0YSxleGFjdCcpO1xuICAgICAgY29uZmlnLmtleUNvZGVzID0gbmV3IFByb3h5KGNvbmZpZy5rZXlDb2Rlcywge1xuICAgICAgICBzZXQ6IGZ1bmN0aW9uIHNldCAodGFyZ2V0LCBrZXksIHZhbHVlKSB7XG4gICAgICAgICAgaWYgKGlzQnVpbHRJbk1vZGlmaWVyKGtleSkpIHtcbiAgICAgICAgICAgIHdhcm4oKFwiQXZvaWQgb3ZlcndyaXRpbmcgYnVpbHQtaW4gbW9kaWZpZXIgaW4gY29uZmlnLmtleUNvZGVzOiAuXCIgKyBrZXkpKTtcbiAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB0YXJnZXRba2V5XSA9IHZhbHVlO1xuICAgICAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIHZhciBoYXNIYW5kbGVyID0ge1xuICAgICAgaGFzOiBmdW5jdGlvbiBoYXMgKHRhcmdldCwga2V5KSB7XG4gICAgICAgIHZhciBoYXMgPSBrZXkgaW4gdGFyZ2V0O1xuICAgICAgICB2YXIgaXNBbGxvd2VkID0gYWxsb3dlZEdsb2JhbHMoa2V5KSB8fFxuICAgICAgICAgICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkuY2hhckF0KDApID09PSAnXycgJiYgIShrZXkgaW4gdGFyZ2V0LiRkYXRhKSk7XG4gICAgICAgIGlmICghaGFzICYmICFpc0FsbG93ZWQpIHtcbiAgICAgICAgICBpZiAoa2V5IGluIHRhcmdldC4kZGF0YSkgeyB3YXJuUmVzZXJ2ZWRQcmVmaXgodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgICAgZWxzZSB7IHdhcm5Ob25QcmVzZW50KHRhcmdldCwga2V5KTsgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBoYXMgfHwgIWlzQWxsb3dlZFxuICAgICAgfVxuICAgIH07XG5cbiAgICB2YXIgZ2V0SGFuZGxlciA9IHtcbiAgICAgIGdldDogZnVuY3Rpb24gZ2V0ICh0YXJnZXQsIGtleSkge1xuICAgICAgICBpZiAodHlwZW9mIGtleSA9PT0gJ3N0cmluZycgJiYgIShrZXkgaW4gdGFyZ2V0KSkge1xuICAgICAgICAgIGlmIChrZXkgaW4gdGFyZ2V0LiRkYXRhKSB7IHdhcm5SZXNlcnZlZFByZWZpeCh0YXJnZXQsIGtleSk7IH1cbiAgICAgICAgICBlbHNlIHsgd2Fybk5vblByZXNlbnQodGFyZ2V0LCBrZXkpOyB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRhcmdldFtrZXldXG4gICAgICB9XG4gICAgfTtcblxuICAgIGluaXRQcm94eSA9IGZ1bmN0aW9uIGluaXRQcm94eSAodm0pIHtcbiAgICAgIGlmIChoYXNQcm94eSkge1xuICAgICAgICAvLyBkZXRlcm1pbmUgd2hpY2ggcHJveHkgaGFuZGxlciB0byB1c2VcbiAgICAgICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICAgICAgdmFyIGhhbmRsZXJzID0gb3B0aW9ucy5yZW5kZXIgJiYgb3B0aW9ucy5yZW5kZXIuX3dpdGhTdHJpcHBlZFxuICAgICAgICAgID8gZ2V0SGFuZGxlclxuICAgICAgICAgIDogaGFzSGFuZGxlcjtcbiAgICAgICAgdm0uX3JlbmRlclByb3h5ID0gbmV3IFByb3h5KHZtLCBoYW5kbGVycyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bS5fcmVuZGVyUHJveHkgPSB2bTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIHNlZW5PYmplY3RzID0gbmV3IF9TZXQoKTtcblxuICAvKipcbiAgICogUmVjdXJzaXZlbHkgdHJhdmVyc2UgYW4gb2JqZWN0IHRvIGV2b2tlIGFsbCBjb252ZXJ0ZWRcbiAgICogZ2V0dGVycywgc28gdGhhdCBldmVyeSBuZXN0ZWQgcHJvcGVydHkgaW5zaWRlIHRoZSBvYmplY3RcbiAgICogaXMgY29sbGVjdGVkIGFzIGEgXCJkZWVwXCIgZGVwZW5kZW5jeS5cbiAgICovXG4gIGZ1bmN0aW9uIHRyYXZlcnNlICh2YWwpIHtcbiAgICBfdHJhdmVyc2UodmFsLCBzZWVuT2JqZWN0cyk7XG4gICAgc2Vlbk9iamVjdHMuY2xlYXIoKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIF90cmF2ZXJzZSAodmFsLCBzZWVuKSB7XG4gICAgdmFyIGksIGtleXM7XG4gICAgdmFyIGlzQSA9IEFycmF5LmlzQXJyYXkodmFsKTtcbiAgICBpZiAoKCFpc0EgJiYgIWlzT2JqZWN0KHZhbCkpIHx8IE9iamVjdC5pc0Zyb3plbih2YWwpIHx8IHZhbCBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHZhbC5fX29iX18pIHtcbiAgICAgIHZhciBkZXBJZCA9IHZhbC5fX29iX18uZGVwLmlkO1xuICAgICAgaWYgKHNlZW4uaGFzKGRlcElkKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIHNlZW4uYWRkKGRlcElkKTtcbiAgICB9XG4gICAgaWYgKGlzQSkge1xuICAgICAgaSA9IHZhbC5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7IF90cmF2ZXJzZSh2YWxbaV0sIHNlZW4pOyB9XG4gICAgfSBlbHNlIHtcbiAgICAgIGtleXMgPSBPYmplY3Qua2V5cyh2YWwpO1xuICAgICAgaSA9IGtleXMubGVuZ3RoO1xuICAgICAgd2hpbGUgKGktLSkgeyBfdHJhdmVyc2UodmFsW2tleXNbaV1dLCBzZWVuKTsgfVxuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIHZhciBub3JtYWxpemVFdmVudCA9IGNhY2hlZChmdW5jdGlvbiAobmFtZSkge1xuICAgIHZhciBwYXNzaXZlID0gbmFtZS5jaGFyQXQoMCkgPT09ICcmJztcbiAgICBuYW1lID0gcGFzc2l2ZSA/IG5hbWUuc2xpY2UoMSkgOiBuYW1lO1xuICAgIHZhciBvbmNlJCQxID0gbmFtZS5jaGFyQXQoMCkgPT09ICd+JzsgLy8gUHJlZml4ZWQgbGFzdCwgY2hlY2tlZCBmaXJzdFxuICAgIG5hbWUgPSBvbmNlJCQxID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gICAgdmFyIGNhcHR1cmUgPSBuYW1lLmNoYXJBdCgwKSA9PT0gJyEnO1xuICAgIG5hbWUgPSBjYXB0dXJlID8gbmFtZS5zbGljZSgxKSA6IG5hbWU7XG4gICAgcmV0dXJuIHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICBvbmNlOiBvbmNlJCQxLFxuICAgICAgY2FwdHVyZTogY2FwdHVyZSxcbiAgICAgIHBhc3NpdmU6IHBhc3NpdmVcbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZuSW52b2tlciAoZm5zLCB2bSkge1xuICAgIGZ1bmN0aW9uIGludm9rZXIgKCkge1xuICAgICAgdmFyIGFyZ3VtZW50cyQxID0gYXJndW1lbnRzO1xuXG4gICAgICB2YXIgZm5zID0gaW52b2tlci5mbnM7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShmbnMpKSB7XG4gICAgICAgIHZhciBjbG9uZWQgPSBmbnMuc2xpY2UoKTtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjbG9uZWQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjbG9uZWRbaV0sIG51bGwsIGFyZ3VtZW50cyQxLCB2bSwgXCJ2LW9uIGhhbmRsZXJcIik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHJldHVybiBoYW5kbGVyIHJldHVybiB2YWx1ZSBmb3Igc2luZ2xlIGhhbmRsZXJzXG4gICAgICAgIHJldHVybiBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhmbnMsIG51bGwsIGFyZ3VtZW50cywgdm0sIFwidi1vbiBoYW5kbGVyXCIpXG4gICAgICB9XG4gICAgfVxuICAgIGludm9rZXIuZm5zID0gZm5zO1xuICAgIHJldHVybiBpbnZva2VyXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVMaXN0ZW5lcnMgKFxuICAgIG9uLFxuICAgIG9sZE9uLFxuICAgIGFkZCxcbiAgICByZW1vdmUkJDEsXG4gICAgY3JlYXRlT25jZUhhbmRsZXIsXG4gICAgdm1cbiAgKSB7XG4gICAgdmFyIG5hbWUsIGRlZiQkMSwgY3VyLCBvbGQsIGV2ZW50O1xuICAgIGZvciAobmFtZSBpbiBvbikge1xuICAgICAgZGVmJCQxID0gY3VyID0gb25bbmFtZV07XG4gICAgICBvbGQgPSBvbGRPbltuYW1lXTtcbiAgICAgIGV2ZW50ID0gbm9ybWFsaXplRXZlbnQobmFtZSk7XG4gICAgICBpZiAoaXNVbmRlZihjdXIpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJJbnZhbGlkIGhhbmRsZXIgZm9yIGV2ZW50IFxcXCJcIiArIChldmVudC5uYW1lKSArIFwiXFxcIjogZ290IFwiICsgU3RyaW5nKGN1ciksXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGQpKSB7XG4gICAgICAgIGlmIChpc1VuZGVmKGN1ci5mbnMpKSB7XG4gICAgICAgICAgY3VyID0gb25bbmFtZV0gPSBjcmVhdGVGbkludm9rZXIoY3VyLCB2bSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzVHJ1ZShldmVudC5vbmNlKSkge1xuICAgICAgICAgIGN1ciA9IG9uW25hbWVdID0gY3JlYXRlT25jZUhhbmRsZXIoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlKTtcbiAgICAgICAgfVxuICAgICAgICBhZGQoZXZlbnQubmFtZSwgY3VyLCBldmVudC5jYXB0dXJlLCBldmVudC5wYXNzaXZlLCBldmVudC5wYXJhbXMpO1xuICAgICAgfSBlbHNlIGlmIChjdXIgIT09IG9sZCkge1xuICAgICAgICBvbGQuZm5zID0gY3VyO1xuICAgICAgICBvbltuYW1lXSA9IG9sZDtcbiAgICAgIH1cbiAgICB9XG4gICAgZm9yIChuYW1lIGluIG9sZE9uKSB7XG4gICAgICBpZiAoaXNVbmRlZihvbltuYW1lXSkpIHtcbiAgICAgICAgZXZlbnQgPSBub3JtYWxpemVFdmVudChuYW1lKTtcbiAgICAgICAgcmVtb3ZlJCQxKGV2ZW50Lm5hbWUsIG9sZE9uW25hbWVdLCBldmVudC5jYXB0dXJlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBtZXJnZVZOb2RlSG9vayAoZGVmLCBob29rS2V5LCBob29rKSB7XG4gICAgaWYgKGRlZiBpbnN0YW5jZW9mIFZOb2RlKSB7XG4gICAgICBkZWYgPSBkZWYuZGF0YS5ob29rIHx8IChkZWYuZGF0YS5ob29rID0ge30pO1xuICAgIH1cbiAgICB2YXIgaW52b2tlcjtcbiAgICB2YXIgb2xkSG9vayA9IGRlZltob29rS2V5XTtcblxuICAgIGZ1bmN0aW9uIHdyYXBwZWRIb29rICgpIHtcbiAgICAgIGhvb2suYXBwbHkodGhpcywgYXJndW1lbnRzKTtcbiAgICAgIC8vIGltcG9ydGFudDogcmVtb3ZlIG1lcmdlZCBob29rIHRvIGVuc3VyZSBpdCdzIGNhbGxlZCBvbmx5IG9uY2VcbiAgICAgIC8vIGFuZCBwcmV2ZW50IG1lbW9yeSBsZWFrXG4gICAgICByZW1vdmUoaW52b2tlci5mbnMsIHdyYXBwZWRIb29rKTtcbiAgICB9XG5cbiAgICBpZiAoaXNVbmRlZihvbGRIb29rKSkge1xuICAgICAgLy8gbm8gZXhpc3RpbmcgaG9va1xuICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbd3JhcHBlZEhvb2tdKTtcbiAgICB9IGVsc2Uge1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoaXNEZWYob2xkSG9vay5mbnMpICYmIGlzVHJ1ZShvbGRIb29rLm1lcmdlZCkpIHtcbiAgICAgICAgLy8gYWxyZWFkeSBhIG1lcmdlZCBpbnZva2VyXG4gICAgICAgIGludm9rZXIgPSBvbGRIb29rO1xuICAgICAgICBpbnZva2VyLmZucy5wdXNoKHdyYXBwZWRIb29rKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGV4aXN0aW5nIHBsYWluIGhvb2tcbiAgICAgICAgaW52b2tlciA9IGNyZWF0ZUZuSW52b2tlcihbb2xkSG9vaywgd3JhcHBlZEhvb2tdKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBpbnZva2VyLm1lcmdlZCA9IHRydWU7XG4gICAgZGVmW2hvb2tLZXldID0gaW52b2tlcjtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEgKFxuICAgIGRhdGEsXG4gICAgQ3RvcixcbiAgICB0YWdcbiAgKSB7XG4gICAgLy8gd2UgYXJlIG9ubHkgZXh0cmFjdGluZyByYXcgdmFsdWVzIGhlcmUuXG4gICAgLy8gdmFsaWRhdGlvbiBhbmQgZGVmYXVsdCB2YWx1ZXMgYXJlIGhhbmRsZWQgaW4gdGhlIGNoaWxkXG4gICAgLy8gY29tcG9uZW50IGl0c2VsZi5cbiAgICB2YXIgcHJvcE9wdGlvbnMgPSBDdG9yLm9wdGlvbnMucHJvcHM7XG4gICAgaWYgKGlzVW5kZWYocHJvcE9wdGlvbnMpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHJlcyA9IHt9O1xuICAgIHZhciBhdHRycyA9IGRhdGEuYXR0cnM7XG4gICAgdmFyIHByb3BzID0gZGF0YS5wcm9wcztcbiAgICBpZiAoaXNEZWYoYXR0cnMpIHx8IGlzRGVmKHByb3BzKSkge1xuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICAgIHZhciBhbHRLZXkgPSBoeXBoZW5hdGUoa2V5KTtcbiAgICAgICAge1xuICAgICAgICAgIHZhciBrZXlJbkxvd2VyQ2FzZSA9IGtleS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICAgIGlmIChcbiAgICAgICAgICAgIGtleSAhPT0ga2V5SW5Mb3dlckNhc2UgJiZcbiAgICAgICAgICAgIGF0dHJzICYmIGhhc093bihhdHRycywga2V5SW5Mb3dlckNhc2UpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB0aXAoXG4gICAgICAgICAgICAgIFwiUHJvcCBcXFwiXCIgKyBrZXlJbkxvd2VyQ2FzZSArIFwiXFxcIiBpcyBwYXNzZWQgdG8gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgICAgKGZvcm1hdENvbXBvbmVudE5hbWUodGFnIHx8IEN0b3IpKSArIFwiLCBidXQgdGhlIGRlY2xhcmVkIHByb3AgbmFtZSBpc1wiICtcbiAgICAgICAgICAgICAgXCIgXFxcIlwiICsga2V5ICsgXCJcXFwiLiBcIiArXG4gICAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgY2FtZWxDYXNlZCBcIiArXG4gICAgICAgICAgICAgIFwicHJvcHMgbmVlZCB0byB1c2UgdGhlaXIga2ViYWItY2FzZSBlcXVpdmFsZW50cyB3aGVuIHVzaW5nIGluLURPTSBcIiArXG4gICAgICAgICAgICAgIFwidGVtcGxhdGVzLiBZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyBhbHRLZXkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBrZXkgKyBcIlxcXCIuXCJcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGNoZWNrUHJvcChyZXMsIHByb3BzLCBrZXksIGFsdEtleSwgdHJ1ZSkgfHxcbiAgICAgICAgY2hlY2tQcm9wKHJlcywgYXR0cnMsIGtleSwgYWx0S2V5LCBmYWxzZSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrUHJvcCAoXG4gICAgcmVzLFxuICAgIGhhc2gsXG4gICAga2V5LFxuICAgIGFsdEtleSxcbiAgICBwcmVzZXJ2ZVxuICApIHtcbiAgICBpZiAoaXNEZWYoaGFzaCkpIHtcbiAgICAgIGlmIChoYXNPd24oaGFzaCwga2V5KSkge1xuICAgICAgICByZXNba2V5XSA9IGhhc2hba2V5XTtcbiAgICAgICAgaWYgKCFwcmVzZXJ2ZSkge1xuICAgICAgICAgIGRlbGV0ZSBoYXNoW2tleV07XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH0gZWxzZSBpZiAoaGFzT3duKGhhc2gsIGFsdEtleSkpIHtcbiAgICAgICAgcmVzW2tleV0gPSBoYXNoW2FsdEtleV07XG4gICAgICAgIGlmICghcHJlc2VydmUpIHtcbiAgICAgICAgICBkZWxldGUgaGFzaFthbHRLZXldO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgLyogICovXG5cbiAgLy8gVGhlIHRlbXBsYXRlIGNvbXBpbGVyIGF0dGVtcHRzIHRvIG1pbmltaXplIHRoZSBuZWVkIGZvciBub3JtYWxpemF0aW9uIGJ5XG4gIC8vIHN0YXRpY2FsbHkgYW5hbHl6aW5nIHRoZSB0ZW1wbGF0ZSBhdCBjb21waWxlIHRpbWUuXG4gIC8vXG4gIC8vIEZvciBwbGFpbiBIVE1MIG1hcmt1cCwgbm9ybWFsaXphdGlvbiBjYW4gYmUgY29tcGxldGVseSBza2lwcGVkIGJlY2F1c2UgdGhlXG4gIC8vIGdlbmVyYXRlZCByZW5kZXIgZnVuY3Rpb24gaXMgZ3VhcmFudGVlZCB0byByZXR1cm4gQXJyYXk8Vk5vZGU+LiBUaGVyZSBhcmVcbiAgLy8gdHdvIGNhc2VzIHdoZXJlIGV4dHJhIG5vcm1hbGl6YXRpb24gaXMgbmVlZGVkOlxuXG4gIC8vIDEuIFdoZW4gdGhlIGNoaWxkcmVuIGNvbnRhaW5zIGNvbXBvbmVudHMgLSBiZWNhdXNlIGEgZnVuY3Rpb25hbCBjb21wb25lbnRcbiAgLy8gbWF5IHJldHVybiBhbiBBcnJheSBpbnN0ZWFkIG9mIGEgc2luZ2xlIHJvb3QuIEluIHRoaXMgY2FzZSwganVzdCBhIHNpbXBsZVxuICAvLyBub3JtYWxpemF0aW9uIGlzIG5lZWRlZCAtIGlmIGFueSBjaGlsZCBpcyBhbiBBcnJheSwgd2UgZmxhdHRlbiB0aGUgd2hvbGVcbiAgLy8gdGhpbmcgd2l0aCBBcnJheS5wcm90b3R5cGUuY29uY2F0LiBJdCBpcyBndWFyYW50ZWVkIHRvIGJlIG9ubHkgMS1sZXZlbCBkZWVwXG4gIC8vIGJlY2F1c2UgZnVuY3Rpb25hbCBjb21wb25lbnRzIGFscmVhZHkgbm9ybWFsaXplIHRoZWlyIG93biBjaGlsZHJlbi5cbiAgZnVuY3Rpb24gc2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW5baV0pKSB7XG4gICAgICAgIHJldHVybiBBcnJheS5wcm90b3R5cGUuY29uY2F0LmFwcGx5KFtdLCBjaGlsZHJlbilcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGNoaWxkcmVuXG4gIH1cblxuICAvLyAyLiBXaGVuIHRoZSBjaGlsZHJlbiBjb250YWlucyBjb25zdHJ1Y3RzIHRoYXQgYWx3YXlzIGdlbmVyYXRlZCBuZXN0ZWQgQXJyYXlzLFxuICAvLyBlLmcuIDx0ZW1wbGF0ZT4sIDxzbG90Piwgdi1mb3IsIG9yIHdoZW4gdGhlIGNoaWxkcmVuIGlzIHByb3ZpZGVkIGJ5IHVzZXJcbiAgLy8gd2l0aCBoYW5kLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucyAvIEpTWC4gSW4gc3VjaCBjYXNlcyBhIGZ1bGwgbm9ybWFsaXphdGlvblxuICAvLyBpcyBuZWVkZWQgdG8gY2F0ZXIgdG8gYWxsIHBvc3NpYmxlIHR5cGVzIG9mIGNoaWxkcmVuIHZhbHVlcy5cbiAgZnVuY3Rpb24gbm9ybWFsaXplQ2hpbGRyZW4gKGNoaWxkcmVuKSB7XG4gICAgcmV0dXJuIGlzUHJpbWl0aXZlKGNoaWxkcmVuKVxuICAgICAgPyBbY3JlYXRlVGV4dFZOb2RlKGNoaWxkcmVuKV1cbiAgICAgIDogQXJyYXkuaXNBcnJheShjaGlsZHJlbilcbiAgICAgICAgPyBub3JtYWxpemVBcnJheUNoaWxkcmVuKGNoaWxkcmVuKVxuICAgICAgICA6IHVuZGVmaW5lZFxuICB9XG5cbiAgZnVuY3Rpb24gaXNUZXh0Tm9kZSAobm9kZSkge1xuICAgIHJldHVybiBpc0RlZihub2RlKSAmJiBpc0RlZihub2RlLnRleHQpICYmIGlzRmFsc2Uobm9kZS5pc0NvbW1lbnQpXG4gIH1cblxuICBmdW5jdGlvbiBub3JtYWxpemVBcnJheUNoaWxkcmVuIChjaGlsZHJlbiwgbmVzdGVkSW5kZXgpIHtcbiAgICB2YXIgcmVzID0gW107XG4gICAgdmFyIGksIGMsIGxhc3RJbmRleCwgbGFzdDtcbiAgICBmb3IgKGkgPSAwOyBpIDwgY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgIGMgPSBjaGlsZHJlbltpXTtcbiAgICAgIGlmIChpc1VuZGVmKGMpIHx8IHR5cGVvZiBjID09PSAnYm9vbGVhbicpIHsgY29udGludWUgfVxuICAgICAgbGFzdEluZGV4ID0gcmVzLmxlbmd0aCAtIDE7XG4gICAgICBsYXN0ID0gcmVzW2xhc3RJbmRleF07XG4gICAgICAvLyAgbmVzdGVkXG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjKSkge1xuICAgICAgICBpZiAoYy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgYyA9IG5vcm1hbGl6ZUFycmF5Q2hpbGRyZW4oYywgKChuZXN0ZWRJbmRleCB8fCAnJykgKyBcIl9cIiArIGkpKTtcbiAgICAgICAgICAvLyBtZXJnZSBhZGphY2VudCB0ZXh0IG5vZGVzXG4gICAgICAgICAgaWYgKGlzVGV4dE5vZGUoY1swXSkgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgICAgcmVzW2xhc3RJbmRleF0gPSBjcmVhdGVUZXh0Vk5vZGUobGFzdC50ZXh0ICsgKGNbMF0pLnRleHQpO1xuICAgICAgICAgICAgYy5zaGlmdCgpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXMucHVzaC5hcHBseShyZXMsIGMpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGlzUHJpbWl0aXZlKGMpKSB7XG4gICAgICAgIGlmIChpc1RleHROb2RlKGxhc3QpKSB7XG4gICAgICAgICAgLy8gbWVyZ2UgYWRqYWNlbnQgdGV4dCBub2Rlc1xuICAgICAgICAgIC8vIHRoaXMgaXMgbmVjZXNzYXJ5IGZvciBTU1IgaHlkcmF0aW9uIGJlY2F1c2UgdGV4dCBub2RlcyBhcmVcbiAgICAgICAgICAvLyBlc3NlbnRpYWxseSBtZXJnZWQgd2hlbiByZW5kZXJlZCB0byBIVE1MIHN0cmluZ3NcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjKTtcbiAgICAgICAgfSBlbHNlIGlmIChjICE9PSAnJykge1xuICAgICAgICAgIC8vIGNvbnZlcnQgcHJpbWl0aXZlIHRvIHZub2RlXG4gICAgICAgICAgcmVzLnB1c2goY3JlYXRlVGV4dFZOb2RlKGMpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGlzVGV4dE5vZGUoYykgJiYgaXNUZXh0Tm9kZShsYXN0KSkge1xuICAgICAgICAgIC8vIG1lcmdlIGFkamFjZW50IHRleHQgbm9kZXNcbiAgICAgICAgICByZXNbbGFzdEluZGV4XSA9IGNyZWF0ZVRleHRWTm9kZShsYXN0LnRleHQgKyBjLnRleHQpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRlZmF1bHQga2V5IGZvciBuZXN0ZWQgYXJyYXkgY2hpbGRyZW4gKGxpa2VseSBnZW5lcmF0ZWQgYnkgdi1mb3IpXG4gICAgICAgICAgaWYgKGlzVHJ1ZShjaGlsZHJlbi5faXNWTGlzdCkgJiZcbiAgICAgICAgICAgIGlzRGVmKGMudGFnKSAmJlxuICAgICAgICAgICAgaXNVbmRlZihjLmtleSkgJiZcbiAgICAgICAgICAgIGlzRGVmKG5lc3RlZEluZGV4KSkge1xuICAgICAgICAgICAgYy5rZXkgPSBcIl9fdmxpc3RcIiArIG5lc3RlZEluZGV4ICsgXCJfXCIgKyBpICsgXCJfX1wiO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXMucHVzaChjKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBpbml0UHJvdmlkZSAodm0pIHtcbiAgICB2YXIgcHJvdmlkZSA9IHZtLiRvcHRpb25zLnByb3ZpZGU7XG4gICAgaWYgKHByb3ZpZGUpIHtcbiAgICAgIHZtLl9wcm92aWRlZCA9IHR5cGVvZiBwcm92aWRlID09PSAnZnVuY3Rpb24nXG4gICAgICAgID8gcHJvdmlkZS5jYWxsKHZtKVxuICAgICAgICA6IHByb3ZpZGU7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEluamVjdGlvbnMgKHZtKSB7XG4gICAgdmFyIHJlc3VsdCA9IHJlc29sdmVJbmplY3Qodm0uJG9wdGlvbnMuaW5qZWN0LCB2bSk7XG4gICAgaWYgKHJlc3VsdCkge1xuICAgICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICAgIE9iamVjdC5rZXlzKHJlc3VsdCkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIHtcbiAgICAgICAgICBkZWZpbmVSZWFjdGl2ZSQkMSh2bSwga2V5LCByZXN1bHRba2V5XSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhbiBpbmplY3RlZCB2YWx1ZSBkaXJlY3RseSBzaW5jZSB0aGUgY2hhbmdlcyB3aWxsIGJlIFwiICtcbiAgICAgICAgICAgICAgXCJvdmVyd3JpdHRlbiB3aGVuZXZlciB0aGUgcHJvdmlkZWQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgICAgXCJpbmplY3Rpb24gYmVpbmcgbXV0YXRlZDogXFxcIlwiICsga2V5ICsgXCJcXFwiXCIsXG4gICAgICAgICAgICAgIHZtXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0pO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlSW5qZWN0IChpbmplY3QsIHZtKSB7XG4gICAgaWYgKGluamVjdCkge1xuICAgICAgLy8gaW5qZWN0IGlzIDphbnkgYmVjYXVzZSBmbG93IGlzIG5vdCBzbWFydCBlbm91Z2ggdG8gZmlndXJlIG91dCBjYWNoZWRcbiAgICAgIHZhciByZXN1bHQgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgdmFyIGtleXMgPSBoYXNTeW1ib2xcbiAgICAgICAgPyBSZWZsZWN0Lm93bktleXMoaW5qZWN0KVxuICAgICAgICA6IE9iamVjdC5rZXlzKGluamVjdCk7XG5cbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwga2V5cy5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIga2V5ID0ga2V5c1tpXTtcbiAgICAgICAgLy8gIzY1NzQgaW4gY2FzZSB0aGUgaW5qZWN0IG9iamVjdCBpcyBvYnNlcnZlZC4uLlxuICAgICAgICBpZiAoa2V5ID09PSAnX19vYl9fJykgeyBjb250aW51ZSB9XG4gICAgICAgIHZhciBwcm92aWRlS2V5ID0gaW5qZWN0W2tleV0uZnJvbTtcbiAgICAgICAgdmFyIHNvdXJjZSA9IHZtO1xuICAgICAgICB3aGlsZSAoc291cmNlKSB7XG4gICAgICAgICAgaWYgKHNvdXJjZS5fcHJvdmlkZWQgJiYgaGFzT3duKHNvdXJjZS5fcHJvdmlkZWQsIHByb3ZpZGVLZXkpKSB7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHNvdXJjZS5fcHJvdmlkZWRbcHJvdmlkZUtleV07XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgICBzb3VyY2UgPSBzb3VyY2UuJHBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICBpZiAoIXNvdXJjZSkge1xuICAgICAgICAgIGlmICgnZGVmYXVsdCcgaW4gaW5qZWN0W2tleV0pIHtcbiAgICAgICAgICAgIHZhciBwcm92aWRlRGVmYXVsdCA9IGluamVjdFtrZXldLmRlZmF1bHQ7XG4gICAgICAgICAgICByZXN1bHRba2V5XSA9IHR5cGVvZiBwcm92aWRlRGVmYXVsdCA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgICAgICAgICA/IHByb3ZpZGVEZWZhdWx0LmNhbGwodm0pXG4gICAgICAgICAgICAgIDogcHJvdmlkZURlZmF1bHQ7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHdhcm4oKFwiSW5qZWN0aW9uIFxcXCJcIiArIGtleSArIFwiXFxcIiBub3QgZm91bmRcIiksIHZtKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJldHVybiByZXN1bHRcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuXG5cbiAgLyoqXG4gICAqIFJ1bnRpbWUgaGVscGVyIGZvciByZXNvbHZpbmcgcmF3IGNoaWxkcmVuIFZOb2RlcyBpbnRvIGEgc2xvdCBvYmplY3QuXG4gICAqL1xuICBmdW5jdGlvbiByZXNvbHZlU2xvdHMgKFxuICAgIGNoaWxkcmVuLFxuICAgIGNvbnRleHRcbiAgKSB7XG4gICAgaWYgKCFjaGlsZHJlbiB8fCAhY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICByZXR1cm4ge31cbiAgICB9XG4gICAgdmFyIHNsb3RzID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjaGlsZHJlbi5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBjaGlsZCA9IGNoaWxkcmVuW2ldO1xuICAgICAgdmFyIGRhdGEgPSBjaGlsZC5kYXRhO1xuICAgICAgLy8gcmVtb3ZlIHNsb3QgYXR0cmlidXRlIGlmIHRoZSBub2RlIGlzIHJlc29sdmVkIGFzIGEgVnVlIHNsb3Qgbm9kZVxuICAgICAgaWYgKGRhdGEgJiYgZGF0YS5hdHRycyAmJiBkYXRhLmF0dHJzLnNsb3QpIHtcbiAgICAgICAgZGVsZXRlIGRhdGEuYXR0cnMuc2xvdDtcbiAgICAgIH1cbiAgICAgIC8vIG5hbWVkIHNsb3RzIHNob3VsZCBvbmx5IGJlIHJlc3BlY3RlZCBpZiB0aGUgdm5vZGUgd2FzIHJlbmRlcmVkIGluIHRoZVxuICAgICAgLy8gc2FtZSBjb250ZXh0LlxuICAgICAgaWYgKChjaGlsZC5jb250ZXh0ID09PSBjb250ZXh0IHx8IGNoaWxkLmZuQ29udGV4dCA9PT0gY29udGV4dCkgJiZcbiAgICAgICAgZGF0YSAmJiBkYXRhLnNsb3QgIT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHZhciBuYW1lID0gZGF0YS5zbG90O1xuICAgICAgICB2YXIgc2xvdCA9IChzbG90c1tuYW1lXSB8fCAoc2xvdHNbbmFtZV0gPSBbXSkpO1xuICAgICAgICBpZiAoY2hpbGQudGFnID09PSAndGVtcGxhdGUnKSB7XG4gICAgICAgICAgc2xvdC5wdXNoLmFwcGx5KHNsb3QsIGNoaWxkLmNoaWxkcmVuIHx8IFtdKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzbG90LnB1c2goY2hpbGQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAoc2xvdHMuZGVmYXVsdCB8fCAoc2xvdHMuZGVmYXVsdCA9IFtdKSkucHVzaChjaGlsZCk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIGlnbm9yZSBzbG90cyB0aGF0IGNvbnRhaW5zIG9ubHkgd2hpdGVzcGFjZVxuICAgIGZvciAodmFyIG5hbWUkMSBpbiBzbG90cykge1xuICAgICAgaWYgKHNsb3RzW25hbWUkMV0uZXZlcnkoaXNXaGl0ZXNwYWNlKSkge1xuICAgICAgICBkZWxldGUgc2xvdHNbbmFtZSQxXTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHNsb3RzXG4gIH1cblxuICBmdW5jdGlvbiBpc1doaXRlc3BhY2UgKG5vZGUpIHtcbiAgICByZXR1cm4gKG5vZGUuaXNDb21tZW50ICYmICFub2RlLmFzeW5jRmFjdG9yeSkgfHwgbm9kZS50ZXh0ID09PSAnICdcbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGlzQXN5bmNQbGFjZWhvbGRlciAobm9kZSkge1xuICAgIHJldHVybiBub2RlLmlzQ29tbWVudCAmJiBub2RlLmFzeW5jRmFjdG9yeVxuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gbm9ybWFsaXplU2NvcGVkU2xvdHMgKFxuICAgIHNsb3RzLFxuICAgIG5vcm1hbFNsb3RzLFxuICAgIHByZXZTbG90c1xuICApIHtcbiAgICB2YXIgcmVzO1xuICAgIHZhciBoYXNOb3JtYWxTbG90cyA9IE9iamVjdC5rZXlzKG5vcm1hbFNsb3RzKS5sZW5ndGggPiAwO1xuICAgIHZhciBpc1N0YWJsZSA9IHNsb3RzID8gISFzbG90cy4kc3RhYmxlIDogIWhhc05vcm1hbFNsb3RzO1xuICAgIHZhciBrZXkgPSBzbG90cyAmJiBzbG90cy4ka2V5O1xuICAgIGlmICghc2xvdHMpIHtcbiAgICAgIHJlcyA9IHt9O1xuICAgIH0gZWxzZSBpZiAoc2xvdHMuX25vcm1hbGl6ZWQpIHtcbiAgICAgIC8vIGZhc3QgcGF0aCAxOiBjaGlsZCBjb21wb25lbnQgcmUtcmVuZGVyIG9ubHksIHBhcmVudCBkaWQgbm90IGNoYW5nZVxuICAgICAgcmV0dXJuIHNsb3RzLl9ub3JtYWxpemVkXG4gICAgfSBlbHNlIGlmIChcbiAgICAgIGlzU3RhYmxlICYmXG4gICAgICBwcmV2U2xvdHMgJiZcbiAgICAgIHByZXZTbG90cyAhPT0gZW1wdHlPYmplY3QgJiZcbiAgICAgIGtleSA9PT0gcHJldlNsb3RzLiRrZXkgJiZcbiAgICAgICFoYXNOb3JtYWxTbG90cyAmJlxuICAgICAgIXByZXZTbG90cy4kaGFzTm9ybWFsXG4gICAgKSB7XG4gICAgICAvLyBmYXN0IHBhdGggMjogc3RhYmxlIHNjb3BlZCBzbG90cyB3LyBubyBub3JtYWwgc2xvdHMgdG8gcHJveHksXG4gICAgICAvLyBvbmx5IG5lZWQgdG8gbm9ybWFsaXplIG9uY2VcbiAgICAgIHJldHVybiBwcmV2U2xvdHNcbiAgICB9IGVsc2Uge1xuICAgICAgcmVzID0ge307XG4gICAgICBmb3IgKHZhciBrZXkkMSBpbiBzbG90cykge1xuICAgICAgICBpZiAoc2xvdHNba2V5JDFdICYmIGtleSQxWzBdICE9PSAnJCcpIHtcbiAgICAgICAgICByZXNba2V5JDFdID0gbm9ybWFsaXplU2NvcGVkU2xvdChub3JtYWxTbG90cywga2V5JDEsIHNsb3RzW2tleSQxXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgLy8gZXhwb3NlIG5vcm1hbCBzbG90cyBvbiBzY29wZWRTbG90c1xuICAgIGZvciAodmFyIGtleSQyIGluIG5vcm1hbFNsb3RzKSB7XG4gICAgICBpZiAoIShrZXkkMiBpbiByZXMpKSB7XG4gICAgICAgIHJlc1trZXkkMl0gPSBwcm94eU5vcm1hbFNsb3Qobm9ybWFsU2xvdHMsIGtleSQyKTtcbiAgICAgIH1cbiAgICB9XG4gICAgLy8gYXZvcmlheiBzZWVtcyB0byBtb2NrIGEgbm9uLWV4dGVuc2libGUgJHNjb3BlZFNsb3RzIG9iamVjdFxuICAgIC8vIGFuZCB3aGVuIHRoYXQgaXMgcGFzc2VkIGRvd24gdGhpcyB3b3VsZCBjYXVzZSBhbiBlcnJvclxuICAgIGlmIChzbG90cyAmJiBPYmplY3QuaXNFeHRlbnNpYmxlKHNsb3RzKSkge1xuICAgICAgKHNsb3RzKS5fbm9ybWFsaXplZCA9IHJlcztcbiAgICB9XG4gICAgZGVmKHJlcywgJyRzdGFibGUnLCBpc1N0YWJsZSk7XG4gICAgZGVmKHJlcywgJyRrZXknLCBrZXkpO1xuICAgIGRlZihyZXMsICckaGFzTm9ybWFsJywgaGFzTm9ybWFsU2xvdHMpO1xuICAgIHJldHVybiByZXNcbiAgfVxuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZVNjb3BlZFNsb3Qobm9ybWFsU2xvdHMsIGtleSwgZm4pIHtcbiAgICB2YXIgbm9ybWFsaXplZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciByZXMgPSBhcmd1bWVudHMubGVuZ3RoID8gZm4uYXBwbHkobnVsbCwgYXJndW1lbnRzKSA6IGZuKHt9KTtcbiAgICAgIHJlcyA9IHJlcyAmJiB0eXBlb2YgcmVzID09PSAnb2JqZWN0JyAmJiAhQXJyYXkuaXNBcnJheShyZXMpXG4gICAgICAgID8gW3Jlc10gLy8gc2luZ2xlIHZub2RlXG4gICAgICAgIDogbm9ybWFsaXplQ2hpbGRyZW4ocmVzKTtcbiAgICAgIHZhciB2bm9kZSA9IHJlcyAmJiByZXNbMF07XG4gICAgICByZXR1cm4gcmVzICYmIChcbiAgICAgICAgIXZub2RlIHx8XG4gICAgICAgIChyZXMubGVuZ3RoID09PSAxICYmIHZub2RlLmlzQ29tbWVudCAmJiAhaXNBc3luY1BsYWNlaG9sZGVyKHZub2RlKSkgLy8gIzk2NTgsICMxMDM5MVxuICAgICAgKSA/IHVuZGVmaW5lZFxuICAgICAgICA6IHJlc1xuICAgIH07XG4gICAgLy8gdGhpcyBpcyBhIHNsb3QgdXNpbmcgdGhlIG5ldyB2LXNsb3Qgc3ludGF4IHdpdGhvdXQgc2NvcGUuIGFsdGhvdWdoIGl0IGlzXG4gICAgLy8gY29tcGlsZWQgYXMgYSBzY29wZWQgc2xvdCwgcmVuZGVyIGZuIHVzZXJzIHdvdWxkIGV4cGVjdCBpdCB0byBiZSBwcmVzZW50XG4gICAgLy8gb24gdGhpcy4kc2xvdHMgYmVjYXVzZSB0aGUgdXNhZ2UgaXMgc2VtYW50aWNhbGx5IGEgbm9ybWFsIHNsb3QuXG4gICAgaWYgKGZuLnByb3h5KSB7XG4gICAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkobm9ybWFsU2xvdHMsIGtleSwge1xuICAgICAgICBnZXQ6IG5vcm1hbGl6ZWQsXG4gICAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICAgIGNvbmZpZ3VyYWJsZTogdHJ1ZVxuICAgICAgfSk7XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVkXG4gIH1cblxuICBmdW5jdGlvbiBwcm94eU5vcm1hbFNsb3Qoc2xvdHMsIGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7IHJldHVybiBzbG90c1trZXldOyB9XG4gIH1cblxuICAvKiAgKi9cblxuICAvKipcbiAgICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyB2LWZvciBsaXN0cy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlbmRlckxpc3QgKFxuICAgIHZhbCxcbiAgICByZW5kZXJcbiAgKSB7XG4gICAgdmFyIHJldCwgaSwgbCwga2V5cywga2V5O1xuICAgIGlmIChBcnJheS5pc0FycmF5KHZhbCkgfHwgdHlwZW9mIHZhbCA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldCA9IG5ldyBBcnJheSh2YWwubGVuZ3RoKTtcbiAgICAgIGZvciAoaSA9IDAsIGwgPSB2YWwubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcih2YWxbaV0sIGkpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHZhbCA9PT0gJ251bWJlcicpIHtcbiAgICAgIHJldCA9IG5ldyBBcnJheSh2YWwpO1xuICAgICAgZm9yIChpID0gMDsgaSA8IHZhbDsgaSsrKSB7XG4gICAgICAgIHJldFtpXSA9IHJlbmRlcihpICsgMSwgaSk7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChpc09iamVjdCh2YWwpKSB7XG4gICAgICBpZiAoaGFzU3ltYm9sICYmIHZhbFtTeW1ib2wuaXRlcmF0b3JdKSB7XG4gICAgICAgIHJldCA9IFtdO1xuICAgICAgICB2YXIgaXRlcmF0b3IgPSB2YWxbU3ltYm9sLml0ZXJhdG9yXSgpO1xuICAgICAgICB2YXIgcmVzdWx0ID0gaXRlcmF0b3IubmV4dCgpO1xuICAgICAgICB3aGlsZSAoIXJlc3VsdC5kb25lKSB7XG4gICAgICAgICAgcmV0LnB1c2gocmVuZGVyKHJlc3VsdC52YWx1ZSwgcmV0Lmxlbmd0aCkpO1xuICAgICAgICAgIHJlc3VsdCA9IGl0ZXJhdG9yLm5leHQoKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAga2V5cyA9IE9iamVjdC5rZXlzKHZhbCk7XG4gICAgICAgIHJldCA9IG5ldyBBcnJheShrZXlzLmxlbmd0aCk7XG4gICAgICAgIGZvciAoaSA9IDAsIGwgPSBrZXlzLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIGtleSA9IGtleXNbaV07XG4gICAgICAgICAgcmV0W2ldID0gcmVuZGVyKHZhbFtrZXldLCBrZXksIGkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmICghaXNEZWYocmV0KSkge1xuICAgICAgcmV0ID0gW107XG4gICAgfVxuICAgIChyZXQpLl9pc1ZMaXN0ID0gdHJ1ZTtcbiAgICByZXR1cm4gcmV0XG4gIH1cblxuICAvKiAgKi9cblxuICAvKipcbiAgICogUnVudGltZSBoZWxwZXIgZm9yIHJlbmRlcmluZyA8c2xvdD5cbiAgICovXG4gIGZ1bmN0aW9uIHJlbmRlclNsb3QgKFxuICAgIG5hbWUsXG4gICAgZmFsbGJhY2tSZW5kZXIsXG4gICAgcHJvcHMsXG4gICAgYmluZE9iamVjdFxuICApIHtcbiAgICB2YXIgc2NvcGVkU2xvdEZuID0gdGhpcy4kc2NvcGVkU2xvdHNbbmFtZV07XG4gICAgdmFyIG5vZGVzO1xuICAgIGlmIChzY29wZWRTbG90Rm4pIHtcbiAgICAgIC8vIHNjb3BlZCBzbG90XG4gICAgICBwcm9wcyA9IHByb3BzIHx8IHt9O1xuICAgICAgaWYgKGJpbmRPYmplY3QpIHtcbiAgICAgICAgaWYgKCFpc09iamVjdChiaW5kT2JqZWN0KSkge1xuICAgICAgICAgIHdhcm4oJ3Nsb3Qgdi1iaW5kIHdpdGhvdXQgYXJndW1lbnQgZXhwZWN0cyBhbiBPYmplY3QnLCB0aGlzKTtcbiAgICAgICAgfVxuICAgICAgICBwcm9wcyA9IGV4dGVuZChleHRlbmQoe30sIGJpbmRPYmplY3QpLCBwcm9wcyk7XG4gICAgICB9XG4gICAgICBub2RlcyA9XG4gICAgICAgIHNjb3BlZFNsb3RGbihwcm9wcykgfHxcbiAgICAgICAgKHR5cGVvZiBmYWxsYmFja1JlbmRlciA9PT0gJ2Z1bmN0aW9uJyA/IGZhbGxiYWNrUmVuZGVyKCkgOiBmYWxsYmFja1JlbmRlcik7XG4gICAgfSBlbHNlIHtcbiAgICAgIG5vZGVzID1cbiAgICAgICAgdGhpcy4kc2xvdHNbbmFtZV0gfHxcbiAgICAgICAgKHR5cGVvZiBmYWxsYmFja1JlbmRlciA9PT0gJ2Z1bmN0aW9uJyA/IGZhbGxiYWNrUmVuZGVyKCkgOiBmYWxsYmFja1JlbmRlcik7XG4gICAgfVxuXG4gICAgdmFyIHRhcmdldCA9IHByb3BzICYmIHByb3BzLnNsb3Q7XG4gICAgaWYgKHRhcmdldCkge1xuICAgICAgcmV0dXJuIHRoaXMuJGNyZWF0ZUVsZW1lbnQoJ3RlbXBsYXRlJywgeyBzbG90OiB0YXJnZXQgfSwgbm9kZXMpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBub2Rlc1xuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8qKlxuICAgKiBSdW50aW1lIGhlbHBlciBmb3IgcmVzb2x2aW5nIGZpbHRlcnNcbiAgICovXG4gIGZ1bmN0aW9uIHJlc29sdmVGaWx0ZXIgKGlkKSB7XG4gICAgcmV0dXJuIHJlc29sdmVBc3NldCh0aGlzLiRvcHRpb25zLCAnZmlsdGVycycsIGlkLCB0cnVlKSB8fCBpZGVudGl0eVxuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gaXNLZXlOb3RNYXRjaCAoZXhwZWN0LCBhY3R1YWwpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheShleHBlY3QpKSB7XG4gICAgICByZXR1cm4gZXhwZWN0LmluZGV4T2YoYWN0dWFsKSA9PT0gLTFcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGV4cGVjdCAhPT0gYWN0dWFsXG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJ1bnRpbWUgaGVscGVyIGZvciBjaGVja2luZyBrZXlDb2RlcyBmcm9tIGNvbmZpZy5cbiAgICogZXhwb3NlZCBhcyBWdWUucHJvdG90eXBlLl9rXG4gICAqIHBhc3NpbmcgaW4gZXZlbnRLZXlOYW1lIGFzIGxhc3QgYXJndW1lbnQgc2VwYXJhdGVseSBmb3IgYmFja3dhcmRzIGNvbXBhdFxuICAgKi9cbiAgZnVuY3Rpb24gY2hlY2tLZXlDb2RlcyAoXG4gICAgZXZlbnRLZXlDb2RlLFxuICAgIGtleSxcbiAgICBidWlsdEluS2V5Q29kZSxcbiAgICBldmVudEtleU5hbWUsXG4gICAgYnVpbHRJbktleU5hbWVcbiAgKSB7XG4gICAgdmFyIG1hcHBlZEtleUNvZGUgPSBjb25maWcua2V5Q29kZXNba2V5XSB8fCBidWlsdEluS2V5Q29kZTtcbiAgICBpZiAoYnVpbHRJbktleU5hbWUgJiYgZXZlbnRLZXlOYW1lICYmICFjb25maWcua2V5Q29kZXNba2V5XSkge1xuICAgICAgcmV0dXJuIGlzS2V5Tm90TWF0Y2goYnVpbHRJbktleU5hbWUsIGV2ZW50S2V5TmFtZSlcbiAgICB9IGVsc2UgaWYgKG1hcHBlZEtleUNvZGUpIHtcbiAgICAgIHJldHVybiBpc0tleU5vdE1hdGNoKG1hcHBlZEtleUNvZGUsIGV2ZW50S2V5Q29kZSlcbiAgICB9IGVsc2UgaWYgKGV2ZW50S2V5TmFtZSkge1xuICAgICAgcmV0dXJuIGh5cGhlbmF0ZShldmVudEtleU5hbWUpICE9PSBrZXlcbiAgICB9XG4gICAgcmV0dXJuIGV2ZW50S2V5Q29kZSA9PT0gdW5kZWZpbmVkXG4gIH1cblxuICAvKiAgKi9cblxuICAvKipcbiAgICogUnVudGltZSBoZWxwZXIgZm9yIG1lcmdpbmcgdi1iaW5kPVwib2JqZWN0XCIgaW50byBhIFZOb2RlJ3MgZGF0YS5cbiAgICovXG4gIGZ1bmN0aW9uIGJpbmRPYmplY3RQcm9wcyAoXG4gICAgZGF0YSxcbiAgICB0YWcsXG4gICAgdmFsdWUsXG4gICAgYXNQcm9wLFxuICAgIGlzU3luY1xuICApIHtcbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIGlmICghaXNPYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3YtYmluZCB3aXRob3V0IGFyZ3VtZW50IGV4cGVjdHMgYW4gT2JqZWN0IG9yIEFycmF5IHZhbHVlJyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgICAgICB2YWx1ZSA9IHRvT2JqZWN0KHZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgICB2YXIgaGFzaDtcbiAgICAgICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICBrZXkgPT09ICdjbGFzcycgfHxcbiAgICAgICAgICAgIGtleSA9PT0gJ3N0eWxlJyB8fFxuICAgICAgICAgICAgaXNSZXNlcnZlZEF0dHJpYnV0ZShrZXkpXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICBoYXNoID0gZGF0YTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgdmFyIHR5cGUgPSBkYXRhLmF0dHJzICYmIGRhdGEuYXR0cnMudHlwZTtcbiAgICAgICAgICAgIGhhc2ggPSBhc1Byb3AgfHwgY29uZmlnLm11c3RVc2VQcm9wKHRhZywgdHlwZSwga2V5KVxuICAgICAgICAgICAgICA/IGRhdGEuZG9tUHJvcHMgfHwgKGRhdGEuZG9tUHJvcHMgPSB7fSlcbiAgICAgICAgICAgICAgOiBkYXRhLmF0dHJzIHx8IChkYXRhLmF0dHJzID0ge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgY2FtZWxpemVkS2V5ID0gY2FtZWxpemUoa2V5KTtcbiAgICAgICAgICB2YXIgaHlwaGVuYXRlZEtleSA9IGh5cGhlbmF0ZShrZXkpO1xuICAgICAgICAgIGlmICghKGNhbWVsaXplZEtleSBpbiBoYXNoKSAmJiAhKGh5cGhlbmF0ZWRLZXkgaW4gaGFzaCkpIHtcbiAgICAgICAgICAgIGhhc2hba2V5XSA9IHZhbHVlW2tleV07XG5cbiAgICAgICAgICAgIGlmIChpc1N5bmMpIHtcbiAgICAgICAgICAgICAgdmFyIG9uID0gZGF0YS5vbiB8fCAoZGF0YS5vbiA9IHt9KTtcbiAgICAgICAgICAgICAgb25bKFwidXBkYXRlOlwiICsga2V5KV0gPSBmdW5jdGlvbiAoJGV2ZW50KSB7XG4gICAgICAgICAgICAgICAgdmFsdWVba2V5XSA9ICRldmVudDtcbiAgICAgICAgICAgICAgfTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH07XG5cbiAgICAgICAgZm9yICh2YXIga2V5IGluIHZhbHVlKSBsb29wKCBrZXkgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8qKlxuICAgKiBSdW50aW1lIGhlbHBlciBmb3IgcmVuZGVyaW5nIHN0YXRpYyB0cmVlcy5cbiAgICovXG4gIGZ1bmN0aW9uIHJlbmRlclN0YXRpYyAoXG4gICAgaW5kZXgsXG4gICAgaXNJbkZvclxuICApIHtcbiAgICB2YXIgY2FjaGVkID0gdGhpcy5fc3RhdGljVHJlZXMgfHwgKHRoaXMuX3N0YXRpY1RyZWVzID0gW10pO1xuICAgIHZhciB0cmVlID0gY2FjaGVkW2luZGV4XTtcbiAgICAvLyBpZiBoYXMgYWxyZWFkeS1yZW5kZXJlZCBzdGF0aWMgdHJlZSBhbmQgbm90IGluc2lkZSB2LWZvcixcbiAgICAvLyB3ZSBjYW4gcmV1c2UgdGhlIHNhbWUgdHJlZS5cbiAgICBpZiAodHJlZSAmJiAhaXNJbkZvcikge1xuICAgICAgcmV0dXJuIHRyZWVcbiAgICB9XG4gICAgLy8gb3RoZXJ3aXNlLCByZW5kZXIgYSBmcmVzaCB0cmVlLlxuICAgIHRyZWUgPSBjYWNoZWRbaW5kZXhdID0gdGhpcy4kb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnNbaW5kZXhdLmNhbGwoXG4gICAgICB0aGlzLl9yZW5kZXJQcm94eSxcbiAgICAgIG51bGwsXG4gICAgICB0aGlzIC8vIGZvciByZW5kZXIgZm5zIGdlbmVyYXRlZCBmb3IgZnVuY3Rpb25hbCBjb21wb25lbnQgdGVtcGxhdGVzXG4gICAgKTtcbiAgICBtYXJrU3RhdGljKHRyZWUsIChcIl9fc3RhdGljX19cIiArIGluZGV4KSwgZmFsc2UpO1xuICAgIHJldHVybiB0cmVlXG4gIH1cblxuICAvKipcbiAgICogUnVudGltZSBoZWxwZXIgZm9yIHYtb25jZS5cbiAgICogRWZmZWN0aXZlbHkgaXQgbWVhbnMgbWFya2luZyB0aGUgbm9kZSBhcyBzdGF0aWMgd2l0aCBhIHVuaXF1ZSBrZXkuXG4gICAqL1xuICBmdW5jdGlvbiBtYXJrT25jZSAoXG4gICAgdHJlZSxcbiAgICBpbmRleCxcbiAgICBrZXlcbiAgKSB7XG4gICAgbWFya1N0YXRpYyh0cmVlLCAoXCJfX29uY2VfX1wiICsgaW5kZXggKyAoa2V5ID8gKFwiX1wiICsga2V5KSA6IFwiXCIpKSwgdHJ1ZSk7XG4gICAgcmV0dXJuIHRyZWVcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtTdGF0aWMgKFxuICAgIHRyZWUsXG4gICAga2V5LFxuICAgIGlzT25jZVxuICApIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh0cmVlKSkge1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB0cmVlLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGlmICh0cmVlW2ldICYmIHR5cGVvZiB0cmVlW2ldICE9PSAnc3RyaW5nJykge1xuICAgICAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWVbaV0sIChrZXkgKyBcIl9cIiArIGkpLCBpc09uY2UpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIG1hcmtTdGF0aWNOb2RlKHRyZWUsIGtleSwgaXNPbmNlKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBtYXJrU3RhdGljTm9kZSAobm9kZSwga2V5LCBpc09uY2UpIHtcbiAgICBub2RlLmlzU3RhdGljID0gdHJ1ZTtcbiAgICBub2RlLmtleSA9IGtleTtcbiAgICBub2RlLmlzT25jZSA9IGlzT25jZTtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGJpbmRPYmplY3RMaXN0ZW5lcnMgKGRhdGEsIHZhbHVlKSB7XG4gICAgaWYgKHZhbHVlKSB7XG4gICAgICBpZiAoIWlzUGxhaW5PYmplY3QodmFsdWUpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ3Ytb24gd2l0aG91dCBhcmd1bWVudCBleHBlY3RzIGFuIE9iamVjdCB2YWx1ZScsXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIG9uID0gZGF0YS5vbiA9IGRhdGEub24gPyBleHRlbmQoe30sIGRhdGEub24pIDoge307XG4gICAgICAgIGZvciAodmFyIGtleSBpbiB2YWx1ZSkge1xuICAgICAgICAgIHZhciBleGlzdGluZyA9IG9uW2tleV07XG4gICAgICAgICAgdmFyIG91cnMgPSB2YWx1ZVtrZXldO1xuICAgICAgICAgIG9uW2tleV0gPSBleGlzdGluZyA/IFtdLmNvbmNhdChleGlzdGluZywgb3VycykgOiBvdXJzO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiByZXNvbHZlU2NvcGVkU2xvdHMgKFxuICAgIGZucywgLy8gc2VlIGZsb3cvdm5vZGVcbiAgICByZXMsXG4gICAgLy8gdGhlIGZvbGxvd2luZyBhcmUgYWRkZWQgaW4gMi42XG4gICAgaGFzRHluYW1pY0tleXMsXG4gICAgY29udGVudEhhc2hLZXlcbiAgKSB7XG4gICAgcmVzID0gcmVzIHx8IHsgJHN0YWJsZTogIWhhc0R5bmFtaWNLZXlzIH07XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBmbnMubGVuZ3RoOyBpKyspIHtcbiAgICAgIHZhciBzbG90ID0gZm5zW2ldO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoc2xvdCkpIHtcbiAgICAgICAgcmVzb2x2ZVNjb3BlZFNsb3RzKHNsb3QsIHJlcywgaGFzRHluYW1pY0tleXMpO1xuICAgICAgfSBlbHNlIGlmIChzbG90KSB7XG4gICAgICAgIC8vIG1hcmtlciBmb3IgcmV2ZXJzZSBwcm94eWluZyB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgICAgICBpZiAoc2xvdC5wcm94eSkge1xuICAgICAgICAgIHNsb3QuZm4ucHJveHkgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICAgIHJlc1tzbG90LmtleV0gPSBzbG90LmZuO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoY29udGVudEhhc2hLZXkpIHtcbiAgICAgIChyZXMpLiRrZXkgPSBjb250ZW50SGFzaEtleTtcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gYmluZER5bmFtaWNLZXlzIChiYXNlT2JqLCB2YWx1ZXMpIHtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZhbHVlcy5sZW5ndGg7IGkgKz0gMikge1xuICAgICAgdmFyIGtleSA9IHZhbHVlc1tpXTtcbiAgICAgIGlmICh0eXBlb2Yga2V5ID09PSAnc3RyaW5nJyAmJiBrZXkpIHtcbiAgICAgICAgYmFzZU9ialt2YWx1ZXNbaV1dID0gdmFsdWVzW2kgKyAxXTtcbiAgICAgIH0gZWxzZSBpZiAoa2V5ICE9PSAnJyAmJiBrZXkgIT09IG51bGwpIHtcbiAgICAgICAgLy8gbnVsbCBpcyBhIHNwZWNpYWwgdmFsdWUgZm9yIGV4cGxpY2l0bHkgcmVtb3ZpbmcgYSBiaW5kaW5nXG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiSW52YWxpZCB2YWx1ZSBmb3IgZHluYW1pYyBkaXJlY3RpdmUgYXJndW1lbnQgKGV4cGVjdGVkIHN0cmluZyBvciBudWxsKTogXCIgKyBrZXkpLFxuICAgICAgICAgIHRoaXNcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGJhc2VPYmpcbiAgfVxuXG4gIC8vIGhlbHBlciB0byBkeW5hbWljYWxseSBhcHBlbmQgbW9kaWZpZXIgcnVudGltZSBtYXJrZXJzIHRvIGV2ZW50IG5hbWVzLlxuICAvLyBlbnN1cmUgb25seSBhcHBlbmQgd2hlbiB2YWx1ZSBpcyBhbHJlYWR5IHN0cmluZywgb3RoZXJ3aXNlIGl0IHdpbGwgYmUgY2FzdFxuICAvLyB0byBzdHJpbmcgYW5kIGNhdXNlIHRoZSB0eXBlIGNoZWNrIHRvIG1pc3MuXG4gIGZ1bmN0aW9uIHByZXBlbmRNb2RpZmllciAodmFsdWUsIHN5bWJvbCkge1xuICAgIHJldHVybiB0eXBlb2YgdmFsdWUgPT09ICdzdHJpbmcnID8gc3ltYm9sICsgdmFsdWUgOiB2YWx1ZVxuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gaW5zdGFsbFJlbmRlckhlbHBlcnMgKHRhcmdldCkge1xuICAgIHRhcmdldC5fbyA9IG1hcmtPbmNlO1xuICAgIHRhcmdldC5fbiA9IHRvTnVtYmVyO1xuICAgIHRhcmdldC5fcyA9IHRvU3RyaW5nO1xuICAgIHRhcmdldC5fbCA9IHJlbmRlckxpc3Q7XG4gICAgdGFyZ2V0Ll90ID0gcmVuZGVyU2xvdDtcbiAgICB0YXJnZXQuX3EgPSBsb29zZUVxdWFsO1xuICAgIHRhcmdldC5faSA9IGxvb3NlSW5kZXhPZjtcbiAgICB0YXJnZXQuX20gPSByZW5kZXJTdGF0aWM7XG4gICAgdGFyZ2V0Ll9mID0gcmVzb2x2ZUZpbHRlcjtcbiAgICB0YXJnZXQuX2sgPSBjaGVja0tleUNvZGVzO1xuICAgIHRhcmdldC5fYiA9IGJpbmRPYmplY3RQcm9wcztcbiAgICB0YXJnZXQuX3YgPSBjcmVhdGVUZXh0Vk5vZGU7XG4gICAgdGFyZ2V0Ll9lID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgICB0YXJnZXQuX3UgPSByZXNvbHZlU2NvcGVkU2xvdHM7XG4gICAgdGFyZ2V0Ll9nID0gYmluZE9iamVjdExpc3RlbmVycztcbiAgICB0YXJnZXQuX2QgPSBiaW5kRHluYW1pY0tleXM7XG4gICAgdGFyZ2V0Ll9wID0gcHJlcGVuZE1vZGlmaWVyO1xuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gRnVuY3Rpb25hbFJlbmRlckNvbnRleHQgKFxuICAgIGRhdGEsXG4gICAgcHJvcHMsXG4gICAgY2hpbGRyZW4sXG4gICAgcGFyZW50LFxuICAgIEN0b3JcbiAgKSB7XG4gICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICB2YXIgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucztcbiAgICAvLyBlbnN1cmUgdGhlIGNyZWF0ZUVsZW1lbnQgZnVuY3Rpb24gaW4gZnVuY3Rpb25hbCBjb21wb25lbnRzXG4gICAgLy8gZ2V0cyBhIHVuaXF1ZSBjb250ZXh0IC0gdGhpcyBpcyBuZWNlc3NhcnkgZm9yIGNvcnJlY3QgbmFtZWQgc2xvdCBjaGVja1xuICAgIHZhciBjb250ZXh0Vm07XG4gICAgaWYgKGhhc093bihwYXJlbnQsICdfdWlkJykpIHtcbiAgICAgIGNvbnRleHRWbSA9IE9iamVjdC5jcmVhdGUocGFyZW50KTtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgY29udGV4dFZtLl9vcmlnaW5hbCA9IHBhcmVudDtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gdGhlIGNvbnRleHQgdm0gcGFzc2VkIGluIGlzIGEgZnVuY3Rpb25hbCBjb250ZXh0IGFzIHdlbGwuXG4gICAgICAvLyBpbiB0aGlzIGNhc2Ugd2Ugd2FudCB0byBtYWtlIHN1cmUgd2UgYXJlIGFibGUgdG8gZ2V0IGEgaG9sZCB0byB0aGVcbiAgICAgIC8vIHJlYWwgY29udGV4dCBpbnN0YW5jZS5cbiAgICAgIGNvbnRleHRWbSA9IHBhcmVudDtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgcGFyZW50ID0gcGFyZW50Ll9vcmlnaW5hbDtcbiAgICB9XG4gICAgdmFyIGlzQ29tcGlsZWQgPSBpc1RydWUob3B0aW9ucy5fY29tcGlsZWQpO1xuICAgIHZhciBuZWVkTm9ybWFsaXphdGlvbiA9ICFpc0NvbXBpbGVkO1xuXG4gICAgdGhpcy5kYXRhID0gZGF0YTtcbiAgICB0aGlzLnByb3BzID0gcHJvcHM7XG4gICAgdGhpcy5jaGlsZHJlbiA9IGNoaWxkcmVuO1xuICAgIHRoaXMucGFyZW50ID0gcGFyZW50O1xuICAgIHRoaXMubGlzdGVuZXJzID0gZGF0YS5vbiB8fCBlbXB0eU9iamVjdDtcbiAgICB0aGlzLmluamVjdGlvbnMgPSByZXNvbHZlSW5qZWN0KG9wdGlvbnMuaW5qZWN0LCBwYXJlbnQpO1xuICAgIHRoaXMuc2xvdHMgPSBmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoIXRoaXMkMS4kc2xvdHMpIHtcbiAgICAgICAgbm9ybWFsaXplU2NvcGVkU2xvdHMoXG4gICAgICAgICAgZGF0YS5zY29wZWRTbG90cyxcbiAgICAgICAgICB0aGlzJDEuJHNsb3RzID0gcmVzb2x2ZVNsb3RzKGNoaWxkcmVuLCBwYXJlbnQpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICByZXR1cm4gdGhpcyQxLiRzbG90c1xuICAgIH07XG5cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkodGhpcywgJ3Njb3BlZFNsb3RzJywgKHtcbiAgICAgIGVudW1lcmFibGU6IHRydWUsXG4gICAgICBnZXQ6IGZ1bmN0aW9uIGdldCAoKSB7XG4gICAgICAgIHJldHVybiBub3JtYWxpemVTY29wZWRTbG90cyhkYXRhLnNjb3BlZFNsb3RzLCB0aGlzLnNsb3RzKCkpXG4gICAgICB9XG4gICAgfSkpO1xuXG4gICAgLy8gc3VwcG9ydCBmb3IgY29tcGlsZWQgZnVuY3Rpb25hbCB0ZW1wbGF0ZVxuICAgIGlmIChpc0NvbXBpbGVkKSB7XG4gICAgICAvLyBleHBvc2luZyAkb3B0aW9ucyBmb3IgcmVuZGVyU3RhdGljKClcbiAgICAgIHRoaXMuJG9wdGlvbnMgPSBvcHRpb25zO1xuICAgICAgLy8gcHJlLXJlc29sdmUgc2xvdHMgZm9yIHJlbmRlclNsb3QoKVxuICAgICAgdGhpcy4kc2xvdHMgPSB0aGlzLnNsb3RzKCk7XG4gICAgICB0aGlzLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKGRhdGEuc2NvcGVkU2xvdHMsIHRoaXMuJHNsb3RzKTtcbiAgICB9XG5cbiAgICBpZiAob3B0aW9ucy5fc2NvcGVJZCkge1xuICAgICAgdGhpcy5fYyA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7XG4gICAgICAgIHZhciB2bm9kZSA9IGNyZWF0ZUVsZW1lbnQoY29udGV4dFZtLCBhLCBiLCBjLCBkLCBuZWVkTm9ybWFsaXphdGlvbik7XG4gICAgICAgIGlmICh2bm9kZSAmJiAhQXJyYXkuaXNBcnJheSh2bm9kZSkpIHtcbiAgICAgICAgICB2bm9kZS5mblNjb3BlSWQgPSBvcHRpb25zLl9zY29wZUlkO1xuICAgICAgICAgIHZub2RlLmZuQ29udGV4dCA9IHBhcmVudDtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgIH07XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuX2MgPSBmdW5jdGlvbiAoYSwgYiwgYywgZCkgeyByZXR1cm4gY3JlYXRlRWxlbWVudChjb250ZXh0Vm0sIGEsIGIsIGMsIGQsIG5lZWROb3JtYWxpemF0aW9uKTsgfTtcbiAgICB9XG4gIH1cblxuICBpbnN0YWxsUmVuZGVySGVscGVycyhGdW5jdGlvbmFsUmVuZGVyQ29udGV4dC5wcm90b3R5cGUpO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQgKFxuICAgIEN0b3IsXG4gICAgcHJvcHNEYXRhLFxuICAgIGRhdGEsXG4gICAgY29udGV4dFZtLFxuICAgIGNoaWxkcmVuXG4gICkge1xuICAgIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAgIHZhciBwcm9wcyA9IHt9O1xuICAgIHZhciBwcm9wT3B0aW9ucyA9IG9wdGlvbnMucHJvcHM7XG4gICAgaWYgKGlzRGVmKHByb3BPcHRpb25zKSkge1xuICAgICAgZm9yICh2YXIga2V5IGluIHByb3BPcHRpb25zKSB7XG4gICAgICAgIHByb3BzW2tleV0gPSB2YWxpZGF0ZVByb3Aoa2V5LCBwcm9wT3B0aW9ucywgcHJvcHNEYXRhIHx8IGVtcHR5T2JqZWN0KTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKGlzRGVmKGRhdGEuYXR0cnMpKSB7IG1lcmdlUHJvcHMocHJvcHMsIGRhdGEuYXR0cnMpOyB9XG4gICAgICBpZiAoaXNEZWYoZGF0YS5wcm9wcykpIHsgbWVyZ2VQcm9wcyhwcm9wcywgZGF0YS5wcm9wcyk7IH1cbiAgICB9XG5cbiAgICB2YXIgcmVuZGVyQ29udGV4dCA9IG5ldyBGdW5jdGlvbmFsUmVuZGVyQ29udGV4dChcbiAgICAgIGRhdGEsXG4gICAgICBwcm9wcyxcbiAgICAgIGNoaWxkcmVuLFxuICAgICAgY29udGV4dFZtLFxuICAgICAgQ3RvclxuICAgICk7XG5cbiAgICB2YXIgdm5vZGUgPSBvcHRpb25zLnJlbmRlci5jYWxsKG51bGwsIHJlbmRlckNvbnRleHQuX2MsIHJlbmRlckNvbnRleHQpO1xuXG4gICAgaWYgKHZub2RlIGluc3RhbmNlb2YgVk5vZGUpIHtcbiAgICAgIHJldHVybiBjbG9uZUFuZE1hcmtGdW5jdGlvbmFsUmVzdWx0KHZub2RlLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dClcbiAgICB9IGVsc2UgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICB2YXIgdm5vZGVzID0gbm9ybWFsaXplQ2hpbGRyZW4odm5vZGUpIHx8IFtdO1xuICAgICAgdmFyIHJlcyA9IG5ldyBBcnJheSh2bm9kZXMubGVuZ3RoKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm5vZGVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHJlc1tpXSA9IGNsb25lQW5kTWFya0Z1bmN0aW9uYWxSZXN1bHQodm5vZGVzW2ldLCBkYXRhLCByZW5kZXJDb250ZXh0LnBhcmVudCwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCk7XG4gICAgICB9XG4gICAgICByZXR1cm4gcmVzXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCAodm5vZGUsIGRhdGEsIGNvbnRleHRWbSwgb3B0aW9ucywgcmVuZGVyQ29udGV4dCkge1xuICAgIC8vICM3ODE3IGNsb25lIG5vZGUgYmVmb3JlIHNldHRpbmcgZm5Db250ZXh0LCBvdGhlcndpc2UgaWYgdGhlIG5vZGUgaXMgcmV1c2VkXG4gICAgLy8gKGUuZy4gaXQgd2FzIGZyb20gYSBjYWNoZWQgbm9ybWFsIHNsb3QpIHRoZSBmbkNvbnRleHQgY2F1c2VzIG5hbWVkIHNsb3RzXG4gICAgLy8gdGhhdCBzaG91bGQgbm90IGJlIG1hdGNoZWQgdG8gbWF0Y2guXG4gICAgdmFyIGNsb25lID0gY2xvbmVWTm9kZSh2bm9kZSk7XG4gICAgY2xvbmUuZm5Db250ZXh0ID0gY29udGV4dFZtO1xuICAgIGNsb25lLmZuT3B0aW9ucyA9IG9wdGlvbnM7XG4gICAge1xuICAgICAgKGNsb25lLmRldnRvb2xzTWV0YSA9IGNsb25lLmRldnRvb2xzTWV0YSB8fCB7fSkucmVuZGVyQ29udGV4dCA9IHJlbmRlckNvbnRleHQ7XG4gICAgfVxuICAgIGlmIChkYXRhLnNsb3QpIHtcbiAgICAgIChjbG9uZS5kYXRhIHx8IChjbG9uZS5kYXRhID0ge30pKS5zbG90ID0gZGF0YS5zbG90O1xuICAgIH1cbiAgICByZXR1cm4gY2xvbmVcbiAgfVxuXG4gIGZ1bmN0aW9uIG1lcmdlUHJvcHMgKHRvLCBmcm9tKSB7XG4gICAgZm9yICh2YXIga2V5IGluIGZyb20pIHtcbiAgICAgIHRvW2NhbWVsaXplKGtleSldID0gZnJvbVtrZXldO1xuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8qICAqL1xuXG4gIC8qICAqL1xuXG4gIC8qICAqL1xuXG4gIC8vIGlubGluZSBob29rcyB0byBiZSBpbnZva2VkIG9uIGNvbXBvbmVudCBWTm9kZXMgZHVyaW5nIHBhdGNoXG4gIHZhciBjb21wb25lbnRWTm9kZUhvb2tzID0ge1xuICAgIGluaXQ6IGZ1bmN0aW9uIGluaXQgKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgIGlmIChcbiAgICAgICAgdm5vZGUuY29tcG9uZW50SW5zdGFuY2UgJiZcbiAgICAgICAgIXZub2RlLmNvbXBvbmVudEluc3RhbmNlLl9pc0Rlc3Ryb3llZCAmJlxuICAgICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZVxuICAgICAgKSB7XG4gICAgICAgIC8vIGtlcHQtYWxpdmUgY29tcG9uZW50cywgdHJlYXQgYXMgYSBwYXRjaFxuICAgICAgICB2YXIgbW91bnRlZE5vZGUgPSB2bm9kZTsgLy8gd29yayBhcm91bmQgZmxvd1xuICAgICAgICBjb21wb25lbnRWTm9kZUhvb2tzLnByZXBhdGNoKG1vdW50ZWROb2RlLCBtb3VudGVkTm9kZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSA9IGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUoXG4gICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgYWN0aXZlSW5zdGFuY2VcbiAgICAgICAgKTtcbiAgICAgICAgY2hpbGQuJG1vdW50KGh5ZHJhdGluZyA/IHZub2RlLmVsbSA6IHVuZGVmaW5lZCwgaHlkcmF0aW5nKTtcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgcHJlcGF0Y2g6IGZ1bmN0aW9uIHByZXBhdGNoIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICAgIHZhciBvcHRpb25zID0gdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICAgIHZhciBjaGlsZCA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICB1cGRhdGVDaGlsZENvbXBvbmVudChcbiAgICAgICAgY2hpbGQsXG4gICAgICAgIG9wdGlvbnMucHJvcHNEYXRhLCAvLyB1cGRhdGVkIHByb3BzXG4gICAgICAgIG9wdGlvbnMubGlzdGVuZXJzLCAvLyB1cGRhdGVkIGxpc3RlbmVyc1xuICAgICAgICB2bm9kZSwgLy8gbmV3IHBhcmVudCB2bm9kZVxuICAgICAgICBvcHRpb25zLmNoaWxkcmVuIC8vIG5ldyBjaGlsZHJlblxuICAgICAgKTtcbiAgICB9LFxuXG4gICAgaW5zZXJ0OiBmdW5jdGlvbiBpbnNlcnQgKHZub2RlKSB7XG4gICAgICB2YXIgY29udGV4dCA9IHZub2RlLmNvbnRleHQ7XG4gICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgIGlmICghY29tcG9uZW50SW5zdGFuY2UuX2lzTW91bnRlZCkge1xuICAgICAgICBjb21wb25lbnRJbnN0YW5jZS5faXNNb3VudGVkID0gdHJ1ZTtcbiAgICAgICAgY2FsbEhvb2soY29tcG9uZW50SW5zdGFuY2UsICdtb3VudGVkJyk7XG4gICAgICB9XG4gICAgICBpZiAodm5vZGUuZGF0YS5rZWVwQWxpdmUpIHtcbiAgICAgICAgaWYgKGNvbnRleHQuX2lzTW91bnRlZCkge1xuICAgICAgICAgIC8vIHZ1ZS1yb3V0ZXIjMTIxMlxuICAgICAgICAgIC8vIER1cmluZyB1cGRhdGVzLCBhIGtlcHQtYWxpdmUgY29tcG9uZW50J3MgY2hpbGQgY29tcG9uZW50cyBtYXlcbiAgICAgICAgICAvLyBjaGFuZ2UsIHNvIGRpcmVjdGx5IHdhbGtpbmcgdGhlIHRyZWUgaGVyZSBtYXkgY2FsbCBhY3RpdmF0ZWQgaG9va3NcbiAgICAgICAgICAvLyBvbiBpbmNvcnJlY3QgY2hpbGRyZW4uIEluc3RlYWQgd2UgcHVzaCB0aGVtIGludG8gYSBxdWV1ZSB3aGljaCB3aWxsXG4gICAgICAgICAgLy8gYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSB3aG9sZSBwYXRjaCBwcm9jZXNzIGVuZGVkLlxuICAgICAgICAgIHF1ZXVlQWN0aXZhdGVkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICAgIHZhciBjb21wb25lbnRJbnN0YW5jZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlO1xuICAgICAgaWYgKCFjb21wb25lbnRJbnN0YW5jZS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgaWYgKCF2bm9kZS5kYXRhLmtlZXBBbGl2ZSkge1xuICAgICAgICAgIGNvbXBvbmVudEluc3RhbmNlLiRkZXN0cm95KCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVhY3RpdmF0ZUNoaWxkQ29tcG9uZW50KGNvbXBvbmVudEluc3RhbmNlLCB0cnVlIC8qIGRpcmVjdCAqLyk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIGhvb2tzVG9NZXJnZSA9IE9iamVjdC5rZXlzKGNvbXBvbmVudFZOb2RlSG9va3MpO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudCAoXG4gICAgQ3RvcixcbiAgICBkYXRhLFxuICAgIGNvbnRleHQsXG4gICAgY2hpbGRyZW4sXG4gICAgdGFnXG4gICkge1xuICAgIGlmIChpc1VuZGVmKEN0b3IpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgYmFzZUN0b3IgPSBjb250ZXh0LiRvcHRpb25zLl9iYXNlO1xuXG4gICAgLy8gcGxhaW4gb3B0aW9ucyBvYmplY3Q6IHR1cm4gaXQgaW50byBhIGNvbnN0cnVjdG9yXG4gICAgaWYgKGlzT2JqZWN0KEN0b3IpKSB7XG4gICAgICBDdG9yID0gYmFzZUN0b3IuZXh0ZW5kKEN0b3IpO1xuICAgIH1cblxuICAgIC8vIGlmIGF0IHRoaXMgc3RhZ2UgaXQncyBub3QgYSBjb25zdHJ1Y3RvciBvciBhbiBhc3luYyBjb21wb25lbnQgZmFjdG9yeSxcbiAgICAvLyByZWplY3QuXG4gICAgaWYgKHR5cGVvZiBDdG9yICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICB7XG4gICAgICAgIHdhcm4oKFwiSW52YWxpZCBDb21wb25lbnQgZGVmaW5pdGlvbjogXCIgKyAoU3RyaW5nKEN0b3IpKSksIGNvbnRleHQpO1xuICAgICAgfVxuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLy8gYXN5bmMgY29tcG9uZW50XG4gICAgdmFyIGFzeW5jRmFjdG9yeTtcbiAgICBpZiAoaXNVbmRlZihDdG9yLmNpZCkpIHtcbiAgICAgIGFzeW5jRmFjdG9yeSA9IEN0b3I7XG4gICAgICBDdG9yID0gcmVzb2x2ZUFzeW5jQ29tcG9uZW50KGFzeW5jRmFjdG9yeSwgYmFzZUN0b3IpO1xuICAgICAgaWYgKEN0b3IgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciBub2RlIGZvciBhc3luYyBjb21wb25lbnQsIHdoaWNoIGlzIHJlbmRlcmVkXG4gICAgICAgIC8vIGFzIGEgY29tbWVudCBub2RlIGJ1dCBwcmVzZXJ2ZXMgYWxsIHRoZSByYXcgaW5mb3JtYXRpb24gZm9yIHRoZSBub2RlLlxuICAgICAgICAvLyB0aGUgaW5mb3JtYXRpb24gd2lsbCBiZSB1c2VkIGZvciBhc3luYyBzZXJ2ZXItcmVuZGVyaW5nIGFuZCBoeWRyYXRpb24uXG4gICAgICAgIHJldHVybiBjcmVhdGVBc3luY1BsYWNlaG9sZGVyKFxuICAgICAgICAgIGFzeW5jRmFjdG9yeSxcbiAgICAgICAgICBkYXRhLFxuICAgICAgICAgIGNvbnRleHQsXG4gICAgICAgICAgY2hpbGRyZW4sXG4gICAgICAgICAgdGFnXG4gICAgICAgIClcbiAgICAgIH1cbiAgICB9XG5cbiAgICBkYXRhID0gZGF0YSB8fCB7fTtcblxuICAgIC8vIHJlc29sdmUgY29uc3RydWN0b3Igb3B0aW9ucyBpbiBjYXNlIGdsb2JhbCBtaXhpbnMgYXJlIGFwcGxpZWQgYWZ0ZXJcbiAgICAvLyBjb21wb25lbnQgY29uc3RydWN0b3IgY3JlYXRpb25cbiAgICByZXNvbHZlQ29uc3RydWN0b3JPcHRpb25zKEN0b3IpO1xuXG4gICAgLy8gdHJhbnNmb3JtIGNvbXBvbmVudCB2LW1vZGVsIGRhdGEgaW50byBwcm9wcyAmIGV2ZW50c1xuICAgIGlmIChpc0RlZihkYXRhLm1vZGVsKSkge1xuICAgICAgdHJhbnNmb3JtTW9kZWwoQ3Rvci5vcHRpb25zLCBkYXRhKTtcbiAgICB9XG5cbiAgICAvLyBleHRyYWN0IHByb3BzXG4gICAgdmFyIHByb3BzRGF0YSA9IGV4dHJhY3RQcm9wc0Zyb21WTm9kZURhdGEoZGF0YSwgQ3RvciwgdGFnKTtcblxuICAgIC8vIGZ1bmN0aW9uYWwgY29tcG9uZW50XG4gICAgaWYgKGlzVHJ1ZShDdG9yLm9wdGlvbnMuZnVuY3Rpb25hbCkpIHtcbiAgICAgIHJldHVybiBjcmVhdGVGdW5jdGlvbmFsQ29tcG9uZW50KEN0b3IsIHByb3BzRGF0YSwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4pXG4gICAgfVxuXG4gICAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMsIHNpbmNlIHRoZXNlIG5lZWRzIHRvIGJlIHRyZWF0ZWQgYXNcbiAgICAvLyBjaGlsZCBjb21wb25lbnQgbGlzdGVuZXJzIGluc3RlYWQgb2YgRE9NIGxpc3RlbmVyc1xuICAgIHZhciBsaXN0ZW5lcnMgPSBkYXRhLm9uO1xuICAgIC8vIHJlcGxhY2Ugd2l0aCBsaXN0ZW5lcnMgd2l0aCAubmF0aXZlIG1vZGlmaWVyXG4gICAgLy8gc28gaXQgZ2V0cyBwcm9jZXNzZWQgZHVyaW5nIHBhcmVudCBjb21wb25lbnQgcGF0Y2guXG4gICAgZGF0YS5vbiA9IGRhdGEubmF0aXZlT247XG5cbiAgICBpZiAoaXNUcnVlKEN0b3Iub3B0aW9ucy5hYnN0cmFjdCkpIHtcbiAgICAgIC8vIGFic3RyYWN0IGNvbXBvbmVudHMgZG8gbm90IGtlZXAgYW55dGhpbmdcbiAgICAgIC8vIG90aGVyIHRoYW4gcHJvcHMgJiBsaXN0ZW5lcnMgJiBzbG90XG5cbiAgICAgIC8vIHdvcmsgYXJvdW5kIGZsb3dcbiAgICAgIHZhciBzbG90ID0gZGF0YS5zbG90O1xuICAgICAgZGF0YSA9IHt9O1xuICAgICAgaWYgKHNsb3QpIHtcbiAgICAgICAgZGF0YS5zbG90ID0gc2xvdDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBpbnN0YWxsIGNvbXBvbmVudCBtYW5hZ2VtZW50IGhvb2tzIG9udG8gdGhlIHBsYWNlaG9sZGVyIG5vZGVcbiAgICBpbnN0YWxsQ29tcG9uZW50SG9va3MoZGF0YSk7XG5cbiAgICAvLyByZXR1cm4gYSBwbGFjZWhvbGRlciB2bm9kZVxuICAgIHZhciBuYW1lID0gQ3Rvci5vcHRpb25zLm5hbWUgfHwgdGFnO1xuICAgIHZhciB2bm9kZSA9IG5ldyBWTm9kZShcbiAgICAgIChcInZ1ZS1jb21wb25lbnQtXCIgKyAoQ3Rvci5jaWQpICsgKG5hbWUgPyAoXCItXCIgKyBuYW1lKSA6ICcnKSksXG4gICAgICBkYXRhLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0LFxuICAgICAgeyBDdG9yOiBDdG9yLCBwcm9wc0RhdGE6IHByb3BzRGF0YSwgbGlzdGVuZXJzOiBsaXN0ZW5lcnMsIHRhZzogdGFnLCBjaGlsZHJlbjogY2hpbGRyZW4gfSxcbiAgICAgIGFzeW5jRmFjdG9yeVxuICAgICk7XG5cbiAgICByZXR1cm4gdm5vZGVcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUgKFxuICAgIC8vIHdlIGtub3cgaXQncyBNb3VudGVkQ29tcG9uZW50Vk5vZGUgYnV0IGZsb3cgZG9lc24ndFxuICAgIHZub2RlLFxuICAgIC8vIGFjdGl2ZUluc3RhbmNlIGluIGxpZmVjeWNsZSBzdGF0ZVxuICAgIHBhcmVudFxuICApIHtcbiAgICB2YXIgb3B0aW9ucyA9IHtcbiAgICAgIF9pc0NvbXBvbmVudDogdHJ1ZSxcbiAgICAgIF9wYXJlbnRWbm9kZTogdm5vZGUsXG4gICAgICBwYXJlbnQ6IHBhcmVudFxuICAgIH07XG4gICAgLy8gY2hlY2sgaW5saW5lLXRlbXBsYXRlIHJlbmRlciBmdW5jdGlvbnNcbiAgICB2YXIgaW5saW5lVGVtcGxhdGUgPSB2bm9kZS5kYXRhLmlubGluZVRlbXBsYXRlO1xuICAgIGlmIChpc0RlZihpbmxpbmVUZW1wbGF0ZSkpIHtcbiAgICAgIG9wdGlvbnMucmVuZGVyID0gaW5saW5lVGVtcGxhdGUucmVuZGVyO1xuICAgICAgb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnMgPSBpbmxpbmVUZW1wbGF0ZS5zdGF0aWNSZW5kZXJGbnM7XG4gICAgfVxuICAgIHJldHVybiBuZXcgdm5vZGUuY29tcG9uZW50T3B0aW9ucy5DdG9yKG9wdGlvbnMpXG4gIH1cblxuICBmdW5jdGlvbiBpbnN0YWxsQ29tcG9uZW50SG9va3MgKGRhdGEpIHtcbiAgICB2YXIgaG9va3MgPSBkYXRhLmhvb2sgfHwgKGRhdGEuaG9vayA9IHt9KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGhvb2tzVG9NZXJnZS5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGtleSA9IGhvb2tzVG9NZXJnZVtpXTtcbiAgICAgIHZhciBleGlzdGluZyA9IGhvb2tzW2tleV07XG4gICAgICB2YXIgdG9NZXJnZSA9IGNvbXBvbmVudFZOb2RlSG9va3Nba2V5XTtcbiAgICAgIGlmIChleGlzdGluZyAhPT0gdG9NZXJnZSAmJiAhKGV4aXN0aW5nICYmIGV4aXN0aW5nLl9tZXJnZWQpKSB7XG4gICAgICAgIGhvb2tzW2tleV0gPSBleGlzdGluZyA/IG1lcmdlSG9vayQxKHRvTWVyZ2UsIGV4aXN0aW5nKSA6IHRvTWVyZ2U7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VIb29rJDEgKGYxLCBmMikge1xuICAgIHZhciBtZXJnZWQgPSBmdW5jdGlvbiAoYSwgYikge1xuICAgICAgLy8gZmxvdyBjb21wbGFpbnMgYWJvdXQgZXh0cmEgYXJncyB3aGljaCBpcyB3aHkgd2UgdXNlIGFueVxuICAgICAgZjEoYSwgYik7XG4gICAgICBmMihhLCBiKTtcbiAgICB9O1xuICAgIG1lcmdlZC5fbWVyZ2VkID0gdHJ1ZTtcbiAgICByZXR1cm4gbWVyZ2VkXG4gIH1cblxuICAvLyB0cmFuc2Zvcm0gY29tcG9uZW50IHYtbW9kZWwgaW5mbyAodmFsdWUgYW5kIGNhbGxiYWNrKSBpbnRvXG4gIC8vIHByb3AgYW5kIGV2ZW50IGhhbmRsZXIgcmVzcGVjdGl2ZWx5LlxuICBmdW5jdGlvbiB0cmFuc2Zvcm1Nb2RlbCAob3B0aW9ucywgZGF0YSkge1xuICAgIHZhciBwcm9wID0gKG9wdGlvbnMubW9kZWwgJiYgb3B0aW9ucy5tb2RlbC5wcm9wKSB8fCAndmFsdWUnO1xuICAgIHZhciBldmVudCA9IChvcHRpb25zLm1vZGVsICYmIG9wdGlvbnMubW9kZWwuZXZlbnQpIHx8ICdpbnB1dCdcbiAgICA7KGRhdGEuYXR0cnMgfHwgKGRhdGEuYXR0cnMgPSB7fSkpW3Byb3BdID0gZGF0YS5tb2RlbC52YWx1ZTtcbiAgICB2YXIgb24gPSBkYXRhLm9uIHx8IChkYXRhLm9uID0ge30pO1xuICAgIHZhciBleGlzdGluZyA9IG9uW2V2ZW50XTtcbiAgICB2YXIgY2FsbGJhY2sgPSBkYXRhLm1vZGVsLmNhbGxiYWNrO1xuICAgIGlmIChpc0RlZihleGlzdGluZykpIHtcbiAgICAgIGlmIChcbiAgICAgICAgQXJyYXkuaXNBcnJheShleGlzdGluZylcbiAgICAgICAgICA/IGV4aXN0aW5nLmluZGV4T2YoY2FsbGJhY2spID09PSAtMVxuICAgICAgICAgIDogZXhpc3RpbmcgIT09IGNhbGxiYWNrXG4gICAgICApIHtcbiAgICAgICAgb25bZXZlbnRdID0gW2NhbGxiYWNrXS5jb25jYXQoZXhpc3RpbmcpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBvbltldmVudF0gPSBjYWxsYmFjaztcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgU0lNUExFX05PUk1BTElaRSA9IDE7XG4gIHZhciBBTFdBWVNfTk9STUFMSVpFID0gMjtcblxuICAvLyB3cmFwcGVyIGZ1bmN0aW9uIGZvciBwcm92aWRpbmcgYSBtb3JlIGZsZXhpYmxlIGludGVyZmFjZVxuICAvLyB3aXRob3V0IGdldHRpbmcgeWVsbGVkIGF0IGJ5IGZsb3dcbiAgZnVuY3Rpb24gY3JlYXRlRWxlbWVudCAoXG4gICAgY29udGV4dCxcbiAgICB0YWcsXG4gICAgZGF0YSxcbiAgICBjaGlsZHJlbixcbiAgICBub3JtYWxpemF0aW9uVHlwZSxcbiAgICBhbHdheXNOb3JtYWxpemVcbiAgKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoZGF0YSkgfHwgaXNQcmltaXRpdmUoZGF0YSkpIHtcbiAgICAgIG5vcm1hbGl6YXRpb25UeXBlID0gY2hpbGRyZW47XG4gICAgICBjaGlsZHJlbiA9IGRhdGE7XG4gICAgICBkYXRhID0gdW5kZWZpbmVkO1xuICAgIH1cbiAgICBpZiAoaXNUcnVlKGFsd2F5c05vcm1hbGl6ZSkpIHtcbiAgICAgIG5vcm1hbGl6YXRpb25UeXBlID0gQUxXQVlTX05PUk1BTElaRTtcbiAgICB9XG4gICAgcmV0dXJuIF9jcmVhdGVFbGVtZW50KGNvbnRleHQsIHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlKVxuICB9XG5cbiAgZnVuY3Rpb24gX2NyZWF0ZUVsZW1lbnQgKFxuICAgIGNvbnRleHQsXG4gICAgdGFnLFxuICAgIGRhdGEsXG4gICAgY2hpbGRyZW4sXG4gICAgbm9ybWFsaXphdGlvblR5cGVcbiAgKSB7XG4gICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzRGVmKChkYXRhKS5fX29iX18pKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcIkF2b2lkIHVzaW5nIG9ic2VydmVkIGRhdGEgb2JqZWN0IGFzIHZub2RlIGRhdGE6IFwiICsgKEpTT04uc3RyaW5naWZ5KGRhdGEpKSArIFwiXFxuXCIgK1xuICAgICAgICAnQWx3YXlzIGNyZWF0ZSBmcmVzaCB2bm9kZSBkYXRhIG9iamVjdHMgaW4gZWFjaCByZW5kZXIhJyxcbiAgICAgICAgY29udGV4dFxuICAgICAgKTtcbiAgICAgIHJldHVybiBjcmVhdGVFbXB0eVZOb2RlKClcbiAgICB9XG4gICAgLy8gb2JqZWN0IHN5bnRheCBpbiB2LWJpbmRcbiAgICBpZiAoaXNEZWYoZGF0YSkgJiYgaXNEZWYoZGF0YS5pcykpIHtcbiAgICAgIHRhZyA9IGRhdGEuaXM7XG4gICAgfVxuICAgIGlmICghdGFnKSB7XG4gICAgICAvLyBpbiBjYXNlIG9mIGNvbXBvbmVudCA6aXMgc2V0IHRvIGZhbHN5IHZhbHVlXG4gICAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gICAgfVxuICAgIC8vIHdhcm4gYWdhaW5zdCBub24tcHJpbWl0aXZlIGtleVxuICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLmtleSkgJiYgIWlzUHJpbWl0aXZlKGRhdGEua2V5KVxuICAgICkge1xuICAgICAge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdBdm9pZCB1c2luZyBub24tcHJpbWl0aXZlIHZhbHVlIGFzIGtleSwgJyArXG4gICAgICAgICAgJ3VzZSBzdHJpbmcvbnVtYmVyIHZhbHVlIGluc3RlYWQuJyxcbiAgICAgICAgICBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIHN1cHBvcnQgc2luZ2xlIGZ1bmN0aW9uIGNoaWxkcmVuIGFzIGRlZmF1bHQgc2NvcGVkIHNsb3RcbiAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikgJiZcbiAgICAgIHR5cGVvZiBjaGlsZHJlblswXSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICkge1xuICAgICAgZGF0YSA9IGRhdGEgfHwge307XG4gICAgICBkYXRhLnNjb3BlZFNsb3RzID0geyBkZWZhdWx0OiBjaGlsZHJlblswXSB9O1xuICAgICAgY2hpbGRyZW4ubGVuZ3RoID0gMDtcbiAgICB9XG4gICAgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBBTFdBWVNfTk9STUFMSVpFKSB7XG4gICAgICBjaGlsZHJlbiA9IG5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgICB9IGVsc2UgaWYgKG5vcm1hbGl6YXRpb25UeXBlID09PSBTSU1QTEVfTk9STUFMSVpFKSB7XG4gICAgICBjaGlsZHJlbiA9IHNpbXBsZU5vcm1hbGl6ZUNoaWxkcmVuKGNoaWxkcmVuKTtcbiAgICB9XG4gICAgdmFyIHZub2RlLCBucztcbiAgICBpZiAodHlwZW9mIHRhZyA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHZhciBDdG9yO1xuICAgICAgbnMgPSAoY29udGV4dC4kdm5vZGUgJiYgY29udGV4dC4kdm5vZGUubnMpIHx8IGNvbmZpZy5nZXRUYWdOYW1lc3BhY2UodGFnKTtcbiAgICAgIGlmIChjb25maWcuaXNSZXNlcnZlZFRhZyh0YWcpKSB7XG4gICAgICAgIC8vIHBsYXRmb3JtIGJ1aWx0LWluIGVsZW1lbnRzXG4gICAgICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihkYXRhLm5hdGl2ZU9uKSAmJiBkYXRhLnRhZyAhPT0gJ2NvbXBvbmVudCcpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiVGhlIC5uYXRpdmUgbW9kaWZpZXIgZm9yIHYtb24gaXMgb25seSB2YWxpZCBvbiBjb21wb25lbnRzIGJ1dCBpdCB3YXMgdXNlZCBvbiA8XCIgKyB0YWcgKyBcIj4uXCIpLFxuICAgICAgICAgICAgY29udGV4dFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgICAgY29uZmlnLnBhcnNlUGxhdGZvcm1UYWdOYW1lKHRhZyksIGRhdGEsIGNoaWxkcmVuLFxuICAgICAgICAgIHVuZGVmaW5lZCwgdW5kZWZpbmVkLCBjb250ZXh0XG4gICAgICAgICk7XG4gICAgICB9IGVsc2UgaWYgKCghZGF0YSB8fCAhZGF0YS5wcmUpICYmIGlzRGVmKEN0b3IgPSByZXNvbHZlQXNzZXQoY29udGV4dC4kb3B0aW9ucywgJ2NvbXBvbmVudHMnLCB0YWcpKSkge1xuICAgICAgICAvLyBjb21wb25lbnRcbiAgICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQoQ3RvciwgZGF0YSwgY29udGV4dCwgY2hpbGRyZW4sIHRhZyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB1bmtub3duIG9yIHVubGlzdGVkIG5hbWVzcGFjZWQgZWxlbWVudHNcbiAgICAgICAgLy8gY2hlY2sgYXQgcnVudGltZSBiZWNhdXNlIGl0IG1heSBnZXQgYXNzaWduZWQgYSBuYW1lc3BhY2Ugd2hlbiBpdHNcbiAgICAgICAgLy8gcGFyZW50IG5vcm1hbGl6ZXMgY2hpbGRyZW5cbiAgICAgICAgdm5vZGUgPSBuZXcgVk5vZGUoXG4gICAgICAgICAgdGFnLCBkYXRhLCBjaGlsZHJlbixcbiAgICAgICAgICB1bmRlZmluZWQsIHVuZGVmaW5lZCwgY29udGV4dFxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICAvLyBkaXJlY3QgY29tcG9uZW50IG9wdGlvbnMgLyBjb25zdHJ1Y3RvclxuICAgICAgdm5vZGUgPSBjcmVhdGVDb21wb25lbnQodGFnLCBkYXRhLCBjb250ZXh0LCBjaGlsZHJlbik7XG4gICAgfVxuICAgIGlmIChBcnJheS5pc0FycmF5KHZub2RlKSkge1xuICAgICAgcmV0dXJuIHZub2RlXG4gICAgfSBlbHNlIGlmIChpc0RlZih2bm9kZSkpIHtcbiAgICAgIGlmIChpc0RlZihucykpIHsgYXBwbHlOUyh2bm9kZSwgbnMpOyB9XG4gICAgICBpZiAoaXNEZWYoZGF0YSkpIHsgcmVnaXN0ZXJEZWVwQmluZGluZ3MoZGF0YSk7IH1cbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gY3JlYXRlRW1wdHlWTm9kZSgpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYXBwbHlOUyAodm5vZGUsIG5zLCBmb3JjZSkge1xuICAgIHZub2RlLm5zID0gbnM7XG4gICAgaWYgKHZub2RlLnRhZyA9PT0gJ2ZvcmVpZ25PYmplY3QnKSB7XG4gICAgICAvLyB1c2UgZGVmYXVsdCBuYW1lc3BhY2UgaW5zaWRlIGZvcmVpZ25PYmplY3RcbiAgICAgIG5zID0gdW5kZWZpbmVkO1xuICAgICAgZm9yY2UgPSB0cnVlO1xuICAgIH1cbiAgICBpZiAoaXNEZWYodm5vZGUuY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSB2bm9kZS5jaGlsZHJlbltpXTtcbiAgICAgICAgaWYgKGlzRGVmKGNoaWxkLnRhZykgJiYgKFxuICAgICAgICAgIGlzVW5kZWYoY2hpbGQubnMpIHx8IChpc1RydWUoZm9yY2UpICYmIGNoaWxkLnRhZyAhPT0gJ3N2ZycpKSkge1xuICAgICAgICAgIGFwcGx5TlMoY2hpbGQsIG5zLCBmb3JjZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyByZWYgIzUzMThcbiAgLy8gbmVjZXNzYXJ5IHRvIGVuc3VyZSBwYXJlbnQgcmUtcmVuZGVyIHdoZW4gZGVlcCBiaW5kaW5ncyBsaWtlIDpzdHlsZSBhbmRcbiAgLy8gOmNsYXNzIGFyZSB1c2VkIG9uIHNsb3Qgbm9kZXNcbiAgZnVuY3Rpb24gcmVnaXN0ZXJEZWVwQmluZGluZ3MgKGRhdGEpIHtcbiAgICBpZiAoaXNPYmplY3QoZGF0YS5zdHlsZSkpIHtcbiAgICAgIHRyYXZlcnNlKGRhdGEuc3R5bGUpO1xuICAgIH1cbiAgICBpZiAoaXNPYmplY3QoZGF0YS5jbGFzcykpIHtcbiAgICAgIHRyYXZlcnNlKGRhdGEuY2xhc3MpO1xuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGluaXRSZW5kZXIgKHZtKSB7XG4gICAgdm0uX3Zub2RlID0gbnVsbDsgLy8gdGhlIHJvb3Qgb2YgdGhlIGNoaWxkIHRyZWVcbiAgICB2bS5fc3RhdGljVHJlZXMgPSBudWxsOyAvLyB2LW9uY2UgY2FjaGVkIHRyZWVzXG4gICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcbiAgICB2YXIgcGFyZW50Vm5vZGUgPSB2bS4kdm5vZGUgPSBvcHRpb25zLl9wYXJlbnRWbm9kZTsgLy8gdGhlIHBsYWNlaG9sZGVyIG5vZGUgaW4gcGFyZW50IHRyZWVcbiAgICB2YXIgcmVuZGVyQ29udGV4dCA9IHBhcmVudFZub2RlICYmIHBhcmVudFZub2RlLmNvbnRleHQ7XG4gICAgdm0uJHNsb3RzID0gcmVzb2x2ZVNsb3RzKG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLCByZW5kZXJDb250ZXh0KTtcbiAgICB2bS4kc2NvcGVkU2xvdHMgPSBlbXB0eU9iamVjdDtcbiAgICAvLyBiaW5kIHRoZSBjcmVhdGVFbGVtZW50IGZuIHRvIHRoaXMgaW5zdGFuY2VcbiAgICAvLyBzbyB0aGF0IHdlIGdldCBwcm9wZXIgcmVuZGVyIGNvbnRleHQgaW5zaWRlIGl0LlxuICAgIC8vIGFyZ3Mgb3JkZXI6IHRhZywgZGF0YSwgY2hpbGRyZW4sIG5vcm1hbGl6YXRpb25UeXBlLCBhbHdheXNOb3JtYWxpemVcbiAgICAvLyBpbnRlcm5hbCB2ZXJzaW9uIGlzIHVzZWQgYnkgcmVuZGVyIGZ1bmN0aW9ucyBjb21waWxlZCBmcm9tIHRlbXBsYXRlc1xuICAgIHZtLl9jID0gZnVuY3Rpb24gKGEsIGIsIGMsIGQpIHsgcmV0dXJuIGNyZWF0ZUVsZW1lbnQodm0sIGEsIGIsIGMsIGQsIGZhbHNlKTsgfTtcbiAgICAvLyBub3JtYWxpemF0aW9uIGlzIGFsd2F5cyBhcHBsaWVkIGZvciB0aGUgcHVibGljIHZlcnNpb24sIHVzZWQgaW5cbiAgICAvLyB1c2VyLXdyaXR0ZW4gcmVuZGVyIGZ1bmN0aW9ucy5cbiAgICB2bS4kY3JlYXRlRWxlbWVudCA9IGZ1bmN0aW9uIChhLCBiLCBjLCBkKSB7IHJldHVybiBjcmVhdGVFbGVtZW50KHZtLCBhLCBiLCBjLCBkLCB0cnVlKTsgfTtcblxuICAgIC8vICRhdHRycyAmICRsaXN0ZW5lcnMgYXJlIGV4cG9zZWQgZm9yIGVhc2llciBIT0MgY3JlYXRpb24uXG4gICAgLy8gdGhleSBuZWVkIHRvIGJlIHJlYWN0aXZlIHNvIHRoYXQgSE9DcyB1c2luZyB0aGVtIGFyZSBhbHdheXMgdXBkYXRlZFxuICAgIHZhciBwYXJlbnREYXRhID0gcGFyZW50Vm5vZGUgJiYgcGFyZW50Vm5vZGUuZGF0YTtcblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAge1xuICAgICAgZGVmaW5lUmVhY3RpdmUkJDEodm0sICckYXR0cnMnLCBwYXJlbnREYXRhICYmIHBhcmVudERhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3QsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCAmJiB3YXJuKFwiJGF0dHJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgICB9LCB0cnVlKTtcbiAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHZtLCAnJGxpc3RlbmVycycsIG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyB8fCBlbXB0eU9iamVjdCwgZnVuY3Rpb24gKCkge1xuICAgICAgICAhaXNVcGRhdGluZ0NoaWxkQ29tcG9uZW50ICYmIHdhcm4oXCIkbGlzdGVuZXJzIGlzIHJlYWRvbmx5LlwiLCB2bSk7XG4gICAgICB9LCB0cnVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gbnVsbDtcblxuICBmdW5jdGlvbiByZW5kZXJNaXhpbiAoVnVlKSB7XG4gICAgLy8gaW5zdGFsbCBydW50aW1lIGNvbnZlbmllbmNlIGhlbHBlcnNcbiAgICBpbnN0YWxsUmVuZGVySGVscGVycyhWdWUucHJvdG90eXBlKTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuJG5leHRUaWNrID0gZnVuY3Rpb24gKGZuKSB7XG4gICAgICByZXR1cm4gbmV4dFRpY2soZm4sIHRoaXMpXG4gICAgfTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuX3JlbmRlciA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICB2YXIgcmVmID0gdm0uJG9wdGlvbnM7XG4gICAgICB2YXIgcmVuZGVyID0gcmVmLnJlbmRlcjtcbiAgICAgIHZhciBfcGFyZW50Vm5vZGUgPSByZWYuX3BhcmVudFZub2RlO1xuXG4gICAgICBpZiAoX3BhcmVudFZub2RlKSB7XG4gICAgICAgIHZtLiRzY29wZWRTbG90cyA9IG5vcm1hbGl6ZVNjb3BlZFNsb3RzKFxuICAgICAgICAgIF9wYXJlbnRWbm9kZS5kYXRhLnNjb3BlZFNsb3RzLFxuICAgICAgICAgIHZtLiRzbG90cyxcbiAgICAgICAgICB2bS4kc2NvcGVkU2xvdHNcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gc2V0IHBhcmVudCB2bm9kZS4gdGhpcyBhbGxvd3MgcmVuZGVyIGZ1bmN0aW9ucyB0byBoYXZlIGFjY2Vzc1xuICAgICAgLy8gdG8gdGhlIGRhdGEgb24gdGhlIHBsYWNlaG9sZGVyIG5vZGUuXG4gICAgICB2bS4kdm5vZGUgPSBfcGFyZW50Vm5vZGU7XG4gICAgICAvLyByZW5kZXIgc2VsZlxuICAgICAgdmFyIHZub2RlO1xuICAgICAgdHJ5IHtcbiAgICAgICAgLy8gVGhlcmUncyBubyBuZWVkIHRvIG1haW50YWluIGEgc3RhY2sgYmVjYXVzZSBhbGwgcmVuZGVyIGZucyBhcmUgY2FsbGVkXG4gICAgICAgIC8vIHNlcGFyYXRlbHkgZnJvbSBvbmUgYW5vdGhlci4gTmVzdGVkIGNvbXBvbmVudCdzIHJlbmRlciBmbnMgYXJlIGNhbGxlZFxuICAgICAgICAvLyB3aGVuIHBhcmVudCBjb21wb25lbnQgaXMgcGF0Y2hlZC5cbiAgICAgICAgY3VycmVudFJlbmRlcmluZ0luc3RhbmNlID0gdm07XG4gICAgICAgIHZub2RlID0gcmVuZGVyLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCBcInJlbmRlclwiKTtcbiAgICAgICAgLy8gcmV0dXJuIGVycm9yIHJlbmRlciByZXN1bHQsXG4gICAgICAgIC8vIG9yIHByZXZpb3VzIHZub2RlIHRvIHByZXZlbnQgcmVuZGVyIGVycm9yIGNhdXNpbmcgYmxhbmsgY29tcG9uZW50XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICAgIGlmICh2bS4kb3B0aW9ucy5yZW5kZXJFcnJvcikge1xuICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICB2bm9kZSA9IHZtLiRvcHRpb25zLnJlbmRlckVycm9yLmNhbGwodm0uX3JlbmRlclByb3h5LCB2bS4kY3JlYXRlRWxlbWVudCwgZSk7XG4gICAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwicmVuZGVyRXJyb3JcIik7XG4gICAgICAgICAgICB2bm9kZSA9IHZtLl92bm9kZTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGUgPSB2bS5fdm5vZGU7XG4gICAgICAgIH1cbiAgICAgIH0gZmluYWxseSB7XG4gICAgICAgIGN1cnJlbnRSZW5kZXJpbmdJbnN0YW5jZSA9IG51bGw7XG4gICAgICB9XG4gICAgICAvLyBpZiB0aGUgcmV0dXJuZWQgYXJyYXkgY29udGFpbnMgb25seSBhIHNpbmdsZSBub2RlLCBhbGxvdyBpdFxuICAgICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpICYmIHZub2RlLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICB2bm9kZSA9IHZub2RlWzBdO1xuICAgICAgfVxuICAgICAgLy8gcmV0dXJuIGVtcHR5IHZub2RlIGluIGNhc2UgdGhlIHJlbmRlciBmdW5jdGlvbiBlcnJvcmVkIG91dFxuICAgICAgaWYgKCEodm5vZGUgaW5zdGFuY2VvZiBWTm9kZSkpIHtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodm5vZGUpKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdNdWx0aXBsZSByb290IG5vZGVzIHJldHVybmVkIGZyb20gcmVuZGVyIGZ1bmN0aW9uLiBSZW5kZXIgZnVuY3Rpb24gJyArXG4gICAgICAgICAgICAnc2hvdWxkIHJldHVybiBhIHNpbmdsZSByb290IG5vZGUuJyxcbiAgICAgICAgICAgIHZtXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgICB2bm9kZSA9IGNyZWF0ZUVtcHR5Vk5vZGUoKTtcbiAgICAgIH1cbiAgICAgIC8vIHNldCBwYXJlbnRcbiAgICAgIHZub2RlLnBhcmVudCA9IF9wYXJlbnRWbm9kZTtcbiAgICAgIHJldHVybiB2bm9kZVxuICAgIH07XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBlbnN1cmVDdG9yIChjb21wLCBiYXNlKSB7XG4gICAgaWYgKFxuICAgICAgY29tcC5fX2VzTW9kdWxlIHx8XG4gICAgICAoaGFzU3ltYm9sICYmIGNvbXBbU3ltYm9sLnRvU3RyaW5nVGFnXSA9PT0gJ01vZHVsZScpXG4gICAgKSB7XG4gICAgICBjb21wID0gY29tcC5kZWZhdWx0O1xuICAgIH1cbiAgICByZXR1cm4gaXNPYmplY3QoY29tcClcbiAgICAgID8gYmFzZS5leHRlbmQoY29tcClcbiAgICAgIDogY29tcFxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQXN5bmNQbGFjZWhvbGRlciAoXG4gICAgZmFjdG9yeSxcbiAgICBkYXRhLFxuICAgIGNvbnRleHQsXG4gICAgY2hpbGRyZW4sXG4gICAgdGFnXG4gICkge1xuICAgIHZhciBub2RlID0gY3JlYXRlRW1wdHlWTm9kZSgpO1xuICAgIG5vZGUuYXN5bmNGYWN0b3J5ID0gZmFjdG9yeTtcbiAgICBub2RlLmFzeW5jTWV0YSA9IHsgZGF0YTogZGF0YSwgY29udGV4dDogY29udGV4dCwgY2hpbGRyZW46IGNoaWxkcmVuLCB0YWc6IHRhZyB9O1xuICAgIHJldHVybiBub2RlXG4gIH1cblxuICBmdW5jdGlvbiByZXNvbHZlQXN5bmNDb21wb25lbnQgKFxuICAgIGZhY3RvcnksXG4gICAgYmFzZUN0b3JcbiAgKSB7XG4gICAgaWYgKGlzVHJ1ZShmYWN0b3J5LmVycm9yKSAmJiBpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgIHJldHVybiBmYWN0b3J5LmVycm9yQ29tcFxuICAgIH1cblxuICAgIGlmIChpc0RlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgcmV0dXJuIGZhY3RvcnkucmVzb2x2ZWRcbiAgICB9XG5cbiAgICB2YXIgb3duZXIgPSBjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2U7XG4gICAgaWYgKG93bmVyICYmIGlzRGVmKGZhY3Rvcnkub3duZXJzKSAmJiBmYWN0b3J5Lm93bmVycy5pbmRleE9mKG93bmVyKSA9PT0gLTEpIHtcbiAgICAgIC8vIGFscmVhZHkgcGVuZGluZ1xuICAgICAgZmFjdG9yeS5vd25lcnMucHVzaChvd25lcik7XG4gICAgfVxuXG4gICAgaWYgKGlzVHJ1ZShmYWN0b3J5LmxvYWRpbmcpICYmIGlzRGVmKGZhY3RvcnkubG9hZGluZ0NvbXApKSB7XG4gICAgICByZXR1cm4gZmFjdG9yeS5sb2FkaW5nQ29tcFxuICAgIH1cblxuICAgIGlmIChvd25lciAmJiAhaXNEZWYoZmFjdG9yeS5vd25lcnMpKSB7XG4gICAgICB2YXIgb3duZXJzID0gZmFjdG9yeS5vd25lcnMgPSBbb3duZXJdO1xuICAgICAgdmFyIHN5bmMgPSB0cnVlO1xuICAgICAgdmFyIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICB2YXIgdGltZXJUaW1lb3V0ID0gbnVsbFxuXG4gICAgICA7KG93bmVyKS4kb24oJ2hvb2s6ZGVzdHJveWVkJywgZnVuY3Rpb24gKCkgeyByZXR1cm4gcmVtb3ZlKG93bmVycywgb3duZXIpOyB9KTtcblxuICAgICAgdmFyIGZvcmNlUmVuZGVyID0gZnVuY3Rpb24gKHJlbmRlckNvbXBsZXRlZCkge1xuICAgICAgICBmb3IgKHZhciBpID0gMCwgbCA9IG93bmVycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgICAgICAob3duZXJzW2ldKS4kZm9yY2VVcGRhdGUoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChyZW5kZXJDb21wbGV0ZWQpIHtcbiAgICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgICBpZiAodGltZXJMb2FkaW5nICE9PSBudWxsKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXJMb2FkaW5nKTtcbiAgICAgICAgICAgIHRpbWVyTG9hZGluZyA9IG51bGw7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmICh0aW1lclRpbWVvdXQgIT09IG51bGwpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lclRpbWVvdXQpO1xuICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH07XG5cbiAgICAgIHZhciByZXNvbHZlID0gb25jZShmdW5jdGlvbiAocmVzKSB7XG4gICAgICAgIC8vIGNhY2hlIHJlc29sdmVkXG4gICAgICAgIGZhY3RvcnkucmVzb2x2ZWQgPSBlbnN1cmVDdG9yKHJlcywgYmFzZUN0b3IpO1xuICAgICAgICAvLyBpbnZva2UgY2FsbGJhY2tzIG9ubHkgaWYgdGhpcyBpcyBub3QgYSBzeW5jaHJvbm91cyByZXNvbHZlXG4gICAgICAgIC8vIChhc3luYyByZXNvbHZlcyBhcmUgc2hpbW1lZCBhcyBzeW5jaHJvbm91cyBkdXJpbmcgU1NSKVxuICAgICAgICBpZiAoIXN5bmMpIHtcbiAgICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBvd25lcnMubGVuZ3RoID0gMDtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciByZWplY3QgPSBvbmNlKGZ1bmN0aW9uIChyZWFzb24pIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIkZhaWxlZCB0byByZXNvbHZlIGFzeW5jIGNvbXBvbmVudDogXCIgKyAoU3RyaW5nKGZhY3RvcnkpKSArXG4gICAgICAgICAgKHJlYXNvbiA/IChcIlxcblJlYXNvbjogXCIgKyByZWFzb24pIDogJycpXG4gICAgICAgICk7XG4gICAgICAgIGlmIChpc0RlZihmYWN0b3J5LmVycm9yQ29tcCkpIHtcbiAgICAgICAgICBmYWN0b3J5LmVycm9yID0gdHJ1ZTtcbiAgICAgICAgICBmb3JjZVJlbmRlcih0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfSk7XG5cbiAgICAgIHZhciByZXMgPSBmYWN0b3J5KHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgIGlmIChpc09iamVjdChyZXMpKSB7XG4gICAgICAgIGlmIChpc1Byb21pc2UocmVzKSkge1xuICAgICAgICAgIC8vICgpID0+IFByb21pc2VcbiAgICAgICAgICBpZiAoaXNVbmRlZihmYWN0b3J5LnJlc29sdmVkKSkge1xuICAgICAgICAgICAgcmVzLnRoZW4ocmVzb2x2ZSwgcmVqZWN0KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoaXNQcm9taXNlKHJlcy5jb21wb25lbnQpKSB7XG4gICAgICAgICAgcmVzLmNvbXBvbmVudC50aGVuKHJlc29sdmUsIHJlamVjdCk7XG5cbiAgICAgICAgICBpZiAoaXNEZWYocmVzLmVycm9yKSkge1xuICAgICAgICAgICAgZmFjdG9yeS5lcnJvckNvbXAgPSBlbnN1cmVDdG9yKHJlcy5lcnJvciwgYmFzZUN0b3IpO1xuICAgICAgICAgIH1cblxuICAgICAgICAgIGlmIChpc0RlZihyZXMubG9hZGluZykpIHtcbiAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZ0NvbXAgPSBlbnN1cmVDdG9yKHJlcy5sb2FkaW5nLCBiYXNlQ3Rvcik7XG4gICAgICAgICAgICBpZiAocmVzLmRlbGF5ID09PSAwKSB7XG4gICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB0aW1lckxvYWRpbmcgPSBudWxsO1xuICAgICAgICAgICAgICAgIGlmIChpc1VuZGVmKGZhY3RvcnkucmVzb2x2ZWQpICYmIGlzVW5kZWYoZmFjdG9yeS5lcnJvcikpIHtcbiAgICAgICAgICAgICAgICAgIGZhY3RvcnkubG9hZGluZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgICBmb3JjZVJlbmRlcihmYWxzZSk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICB9LCByZXMuZGVsYXkgfHwgMjAwKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICBpZiAoaXNEZWYocmVzLnRpbWVvdXQpKSB7XG4gICAgICAgICAgICB0aW1lclRpbWVvdXQgPSBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgdGltZXJUaW1lb3V0ID0gbnVsbDtcbiAgICAgICAgICAgICAgaWYgKGlzVW5kZWYoZmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICAgICAgICByZWplY3QoXG4gICAgICAgICAgICAgICAgICBcInRpbWVvdXQgKFwiICsgKHJlcy50aW1lb3V0KSArIFwibXMpXCJcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9LCByZXMudGltZW91dCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHN5bmMgPSBmYWxzZTtcbiAgICAgIC8vIHJldHVybiBpbiBjYXNlIHJlc29sdmVkIHN5bmNocm9ub3VzbHlcbiAgICAgIHJldHVybiBmYWN0b3J5LmxvYWRpbmdcbiAgICAgICAgPyBmYWN0b3J5LmxvYWRpbmdDb21wXG4gICAgICAgIDogZmFjdG9yeS5yZXNvbHZlZFxuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGdldEZpcnN0Q29tcG9uZW50Q2hpbGQgKGNoaWxkcmVuKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkoY2hpbGRyZW4pKSB7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBjID0gY2hpbGRyZW5baV07XG4gICAgICAgIGlmIChpc0RlZihjKSAmJiAoaXNEZWYoYy5jb21wb25lbnRPcHRpb25zKSB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYykpKSB7XG4gICAgICAgICAgcmV0dXJuIGNcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGluaXRFdmVudHMgKHZtKSB7XG4gICAgdm0uX2V2ZW50cyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgdm0uX2hhc0hvb2tFdmVudCA9IGZhbHNlO1xuICAgIC8vIGluaXQgcGFyZW50IGF0dGFjaGVkIGV2ZW50c1xuICAgIHZhciBsaXN0ZW5lcnMgPSB2bS4kb3B0aW9ucy5fcGFyZW50TGlzdGVuZXJzO1xuICAgIGlmIChsaXN0ZW5lcnMpIHtcbiAgICAgIHVwZGF0ZUNvbXBvbmVudExpc3RlbmVycyh2bSwgbGlzdGVuZXJzKTtcbiAgICB9XG4gIH1cblxuICB2YXIgdGFyZ2V0O1xuXG4gIGZ1bmN0aW9uIGFkZCAoZXZlbnQsIGZuKSB7XG4gICAgdGFyZ2V0LiRvbihldmVudCwgZm4pO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlJDEgKGV2ZW50LCBmbikge1xuICAgIHRhcmdldC4kb2ZmKGV2ZW50LCBmbik7XG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVPbmNlSGFuZGxlciAoZXZlbnQsIGZuKSB7XG4gICAgdmFyIF90YXJnZXQgPSB0YXJnZXQ7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIG9uY2VIYW5kbGVyICgpIHtcbiAgICAgIHZhciByZXMgPSBmbi5hcHBseShudWxsLCBhcmd1bWVudHMpO1xuICAgICAgaWYgKHJlcyAhPT0gbnVsbCkge1xuICAgICAgICBfdGFyZ2V0LiRvZmYoZXZlbnQsIG9uY2VIYW5kbGVyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnMgKFxuICAgIHZtLFxuICAgIGxpc3RlbmVycyxcbiAgICBvbGRMaXN0ZW5lcnNcbiAgKSB7XG4gICAgdGFyZ2V0ID0gdm07XG4gICAgdXBkYXRlTGlzdGVuZXJzKGxpc3RlbmVycywgb2xkTGlzdGVuZXJzIHx8IHt9LCBhZGQsIHJlbW92ZSQxLCBjcmVhdGVPbmNlSGFuZGxlciwgdm0pO1xuICAgIHRhcmdldCA9IHVuZGVmaW5lZDtcbiAgfVxuXG4gIGZ1bmN0aW9uIGV2ZW50c01peGluIChWdWUpIHtcbiAgICB2YXIgaG9va1JFID0gL15ob29rOi87XG4gICAgVnVlLnByb3RvdHlwZS4kb24gPSBmdW5jdGlvbiAoZXZlbnQsIGZuKSB7XG4gICAgICB2YXIgdm0gPSB0aGlzO1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwLCBsID0gZXZlbnQubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgdm0uJG9uKGV2ZW50W2ldLCBmbik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICh2bS5fZXZlbnRzW2V2ZW50XSB8fCAodm0uX2V2ZW50c1tldmVudF0gPSBbXSkpLnB1c2goZm4pO1xuICAgICAgICAvLyBvcHRpbWl6ZSBob29rOmV2ZW50IGNvc3QgYnkgdXNpbmcgYSBib29sZWFuIGZsYWcgbWFya2VkIGF0IHJlZ2lzdHJhdGlvblxuICAgICAgICAvLyBpbnN0ZWFkIG9mIGEgaGFzaCBsb29rdXBcbiAgICAgICAgaWYgKGhvb2tSRS50ZXN0KGV2ZW50KSkge1xuICAgICAgICAgIHZtLl9oYXNIb29rRXZlbnQgPSB0cnVlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9O1xuXG4gICAgVnVlLnByb3RvdHlwZS4kb25jZSA9IGZ1bmN0aW9uIChldmVudCwgZm4pIHtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICBmdW5jdGlvbiBvbiAoKSB7XG4gICAgICAgIHZtLiRvZmYoZXZlbnQsIG9uKTtcbiAgICAgICAgZm4uYXBwbHkodm0sIGFyZ3VtZW50cyk7XG4gICAgICB9XG4gICAgICBvbi5mbiA9IGZuO1xuICAgICAgdm0uJG9uKGV2ZW50LCBvbik7XG4gICAgICByZXR1cm4gdm1cbiAgICB9O1xuXG4gICAgVnVlLnByb3RvdHlwZS4kb2ZmID0gZnVuY3Rpb24gKGV2ZW50LCBmbikge1xuICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgIC8vIGFsbFxuICAgICAgaWYgKCFhcmd1bWVudHMubGVuZ3RoKSB7XG4gICAgICAgIHZtLl9ldmVudHMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgICAgICByZXR1cm4gdm1cbiAgICAgIH1cbiAgICAgIC8vIGFycmF5IG9mIGV2ZW50c1xuICAgICAgaWYgKEFycmF5LmlzQXJyYXkoZXZlbnQpKSB7XG4gICAgICAgIGZvciAodmFyIGkkMSA9IDAsIGwgPSBldmVudC5sZW5ndGg7IGkkMSA8IGw7IGkkMSsrKSB7XG4gICAgICAgICAgdm0uJG9mZihldmVudFtpJDFdLCBmbik7XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIHZtXG4gICAgICB9XG4gICAgICAvLyBzcGVjaWZpYyBldmVudFxuICAgICAgdmFyIGNicyA9IHZtLl9ldmVudHNbZXZlbnRdO1xuICAgICAgaWYgKCFjYnMpIHtcbiAgICAgICAgcmV0dXJuIHZtXG4gICAgICB9XG4gICAgICBpZiAoIWZuKSB7XG4gICAgICAgIHZtLl9ldmVudHNbZXZlbnRdID0gbnVsbDtcbiAgICAgICAgcmV0dXJuIHZtXG4gICAgICB9XG4gICAgICAvLyBzcGVjaWZpYyBoYW5kbGVyXG4gICAgICB2YXIgY2I7XG4gICAgICB2YXIgaSA9IGNicy5sZW5ndGg7XG4gICAgICB3aGlsZSAoaS0tKSB7XG4gICAgICAgIGNiID0gY2JzW2ldO1xuICAgICAgICBpZiAoY2IgPT09IGZuIHx8IGNiLmZuID09PSBmbikge1xuICAgICAgICAgIGNicy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgcmV0dXJuIHZtXG4gICAgfTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuJGVtaXQgPSBmdW5jdGlvbiAoZXZlbnQpIHtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICB7XG4gICAgICAgIHZhciBsb3dlckNhc2VFdmVudCA9IGV2ZW50LnRvTG93ZXJDYXNlKCk7XG4gICAgICAgIGlmIChsb3dlckNhc2VFdmVudCAhPT0gZXZlbnQgJiYgdm0uX2V2ZW50c1tsb3dlckNhc2VFdmVudF0pIHtcbiAgICAgICAgICB0aXAoXG4gICAgICAgICAgICBcIkV2ZW50IFxcXCJcIiArIGxvd2VyQ2FzZUV2ZW50ICsgXCJcXFwiIGlzIGVtaXR0ZWQgaW4gY29tcG9uZW50IFwiICtcbiAgICAgICAgICAgIChmb3JtYXRDb21wb25lbnROYW1lKHZtKSkgKyBcIiBidXQgdGhlIGhhbmRsZXIgaXMgcmVnaXN0ZXJlZCBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCIuIFwiICtcbiAgICAgICAgICAgIFwiTm90ZSB0aGF0IEhUTUwgYXR0cmlidXRlcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZSBhbmQgeW91IGNhbm5vdCB1c2UgXCIgK1xuICAgICAgICAgICAgXCJ2LW9uIHRvIGxpc3RlbiB0byBjYW1lbENhc2UgZXZlbnRzIHdoZW4gdXNpbmcgaW4tRE9NIHRlbXBsYXRlcy4gXCIgK1xuICAgICAgICAgICAgXCJZb3Ugc2hvdWxkIHByb2JhYmx5IHVzZSBcXFwiXCIgKyAoaHlwaGVuYXRlKGV2ZW50KSkgKyBcIlxcXCIgaW5zdGVhZCBvZiBcXFwiXCIgKyBldmVudCArIFwiXFxcIi5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZhciBjYnMgPSB2bS5fZXZlbnRzW2V2ZW50XTtcbiAgICAgIGlmIChjYnMpIHtcbiAgICAgICAgY2JzID0gY2JzLmxlbmd0aCA+IDEgPyB0b0FycmF5KGNicykgOiBjYnM7XG4gICAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgICB2YXIgaW5mbyA9IFwiZXZlbnQgaGFuZGxlciBmb3IgXFxcIlwiICsgZXZlbnQgKyBcIlxcXCJcIjtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBjYnMubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoY2JzW2ldLCB2bSwgYXJncywgdm0sIGluZm8pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICByZXR1cm4gdm1cbiAgICB9O1xuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIGFjdGl2ZUluc3RhbmNlID0gbnVsbDtcbiAgdmFyIGlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCA9IGZhbHNlO1xuXG4gIGZ1bmN0aW9uIHNldEFjdGl2ZUluc3RhbmNlKHZtKSB7XG4gICAgdmFyIHByZXZBY3RpdmVJbnN0YW5jZSA9IGFjdGl2ZUluc3RhbmNlO1xuICAgIGFjdGl2ZUluc3RhbmNlID0gdm07XG4gICAgcmV0dXJuIGZ1bmN0aW9uICgpIHtcbiAgICAgIGFjdGl2ZUluc3RhbmNlID0gcHJldkFjdGl2ZUluc3RhbmNlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRMaWZlY3ljbGUgKHZtKSB7XG4gICAgdmFyIG9wdGlvbnMgPSB2bS4kb3B0aW9ucztcblxuICAgIC8vIGxvY2F0ZSBmaXJzdCBub24tYWJzdHJhY3QgcGFyZW50XG4gICAgdmFyIHBhcmVudCA9IG9wdGlvbnMucGFyZW50O1xuICAgIGlmIChwYXJlbnQgJiYgIW9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgIHdoaWxlIChwYXJlbnQuJG9wdGlvbnMuYWJzdHJhY3QgJiYgcGFyZW50LiRwYXJlbnQpIHtcbiAgICAgICAgcGFyZW50ID0gcGFyZW50LiRwYXJlbnQ7XG4gICAgICB9XG4gICAgICBwYXJlbnQuJGNoaWxkcmVuLnB1c2godm0pO1xuICAgIH1cblxuICAgIHZtLiRwYXJlbnQgPSBwYXJlbnQ7XG4gICAgdm0uJHJvb3QgPSBwYXJlbnQgPyBwYXJlbnQuJHJvb3QgOiB2bTtcblxuICAgIHZtLiRjaGlsZHJlbiA9IFtdO1xuICAgIHZtLiRyZWZzID0ge307XG5cbiAgICB2bS5fd2F0Y2hlciA9IG51bGw7XG4gICAgdm0uX2luYWN0aXZlID0gbnVsbDtcbiAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSBmYWxzZTtcbiAgICB2bS5faXNNb3VudGVkID0gZmFsc2U7XG4gICAgdm0uX2lzRGVzdHJveWVkID0gZmFsc2U7XG4gICAgdm0uX2lzQmVpbmdEZXN0cm95ZWQgPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGxpZmVjeWNsZU1peGluIChWdWUpIHtcbiAgICBWdWUucHJvdG90eXBlLl91cGRhdGUgPSBmdW5jdGlvbiAodm5vZGUsIGh5ZHJhdGluZykge1xuICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgIHZhciBwcmV2RWwgPSB2bS4kZWw7XG4gICAgICB2YXIgcHJldlZub2RlID0gdm0uX3Zub2RlO1xuICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHZtKTtcbiAgICAgIHZtLl92bm9kZSA9IHZub2RlO1xuICAgICAgLy8gVnVlLnByb3RvdHlwZS5fX3BhdGNoX18gaXMgaW5qZWN0ZWQgaW4gZW50cnkgcG9pbnRzXG4gICAgICAvLyBiYXNlZCBvbiB0aGUgcmVuZGVyaW5nIGJhY2tlbmQgdXNlZC5cbiAgICAgIGlmICghcHJldlZub2RlKSB7XG4gICAgICAgIC8vIGluaXRpYWwgcmVuZGVyXG4gICAgICAgIHZtLiRlbCA9IHZtLl9fcGF0Y2hfXyh2bS4kZWwsIHZub2RlLCBoeWRyYXRpbmcsIGZhbHNlIC8qIHJlbW92ZU9ubHkgKi8pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gdXBkYXRlc1xuICAgICAgICB2bS4kZWwgPSB2bS5fX3BhdGNoX18ocHJldlZub2RlLCB2bm9kZSk7XG4gICAgICB9XG4gICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgIC8vIHVwZGF0ZSBfX3Z1ZV9fIHJlZmVyZW5jZVxuICAgICAgaWYgKHByZXZFbCkge1xuICAgICAgICBwcmV2RWwuX192dWVfXyA9IG51bGw7XG4gICAgICB9XG4gICAgICBpZiAodm0uJGVsKSB7XG4gICAgICAgIHZtLiRlbC5fX3Z1ZV9fID0gdm07XG4gICAgICB9XG4gICAgICAvLyBpZiBwYXJlbnQgaXMgYW4gSE9DLCB1cGRhdGUgaXRzICRlbCBhcyB3ZWxsXG4gICAgICBpZiAodm0uJHZub2RlICYmIHZtLiRwYXJlbnQgJiYgdm0uJHZub2RlID09PSB2bS4kcGFyZW50Ll92bm9kZSkge1xuICAgICAgICB2bS4kcGFyZW50LiRlbCA9IHZtLiRlbDtcbiAgICAgIH1cbiAgICAgIC8vIHVwZGF0ZWQgaG9vayBpcyBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlciB0byBlbnN1cmUgdGhhdCBjaGlsZHJlbiBhcmVcbiAgICAgIC8vIHVwZGF0ZWQgaW4gYSBwYXJlbnQncyB1cGRhdGVkIGhvb2suXG4gICAgfTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuJGZvcmNlVXBkYXRlID0gZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIHZtID0gdGhpcztcbiAgICAgIGlmICh2bS5fd2F0Y2hlcikge1xuICAgICAgICB2bS5fd2F0Y2hlci51cGRhdGUoKTtcbiAgICAgIH1cbiAgICB9O1xuXG4gICAgVnVlLnByb3RvdHlwZS4kZGVzdHJveSA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICBpZiAodm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG4gICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZURlc3Ryb3knKTtcbiAgICAgIHZtLl9pc0JlaW5nRGVzdHJveWVkID0gdHJ1ZTtcbiAgICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gcGFyZW50XG4gICAgICB2YXIgcGFyZW50ID0gdm0uJHBhcmVudDtcbiAgICAgIGlmIChwYXJlbnQgJiYgIXBhcmVudC5faXNCZWluZ0Rlc3Ryb3llZCAmJiAhdm0uJG9wdGlvbnMuYWJzdHJhY3QpIHtcbiAgICAgICAgcmVtb3ZlKHBhcmVudC4kY2hpbGRyZW4sIHZtKTtcbiAgICAgIH1cbiAgICAgIC8vIHRlYXJkb3duIHdhdGNoZXJzXG4gICAgICBpZiAodm0uX3dhdGNoZXIpIHtcbiAgICAgICAgdm0uX3dhdGNoZXIudGVhcmRvd24oKTtcbiAgICAgIH1cbiAgICAgIHZhciBpID0gdm0uX3dhdGNoZXJzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdm0uX3dhdGNoZXJzW2ldLnRlYXJkb3duKCk7XG4gICAgICB9XG4gICAgICAvLyByZW1vdmUgcmVmZXJlbmNlIGZyb20gZGF0YSBvYlxuICAgICAgLy8gZnJvemVuIG9iamVjdCBtYXkgbm90IGhhdmUgb2JzZXJ2ZXIuXG4gICAgICBpZiAodm0uX2RhdGEuX19vYl9fKSB7XG4gICAgICAgIHZtLl9kYXRhLl9fb2JfXy52bUNvdW50LS07XG4gICAgICB9XG4gICAgICAvLyBjYWxsIHRoZSBsYXN0IGhvb2suLi5cbiAgICAgIHZtLl9pc0Rlc3Ryb3llZCA9IHRydWU7XG4gICAgICAvLyBpbnZva2UgZGVzdHJveSBob29rcyBvbiBjdXJyZW50IHJlbmRlcmVkIHRyZWVcbiAgICAgIHZtLl9fcGF0Y2hfXyh2bS5fdm5vZGUsIG51bGwpO1xuICAgICAgLy8gZmlyZSBkZXN0cm95ZWQgaG9va1xuICAgICAgY2FsbEhvb2sodm0sICdkZXN0cm95ZWQnKTtcbiAgICAgIC8vIHR1cm4gb2ZmIGFsbCBpbnN0YW5jZSBsaXN0ZW5lcnMuXG4gICAgICB2bS4kb2ZmKCk7XG4gICAgICAvLyByZW1vdmUgX192dWVfXyByZWZlcmVuY2VcbiAgICAgIGlmICh2bS4kZWwpIHtcbiAgICAgICAgdm0uJGVsLl9fdnVlX18gPSBudWxsO1xuICAgICAgfVxuICAgICAgLy8gcmVsZWFzZSBjaXJjdWxhciByZWZlcmVuY2UgKCM2NzU5KVxuICAgICAgaWYgKHZtLiR2bm9kZSkge1xuICAgICAgICB2bS4kdm5vZGUucGFyZW50ID0gbnVsbDtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gbW91bnRDb21wb25lbnQgKFxuICAgIHZtLFxuICAgIGVsLFxuICAgIGh5ZHJhdGluZ1xuICApIHtcbiAgICB2bS4kZWwgPSBlbDtcbiAgICBpZiAoIXZtLiRvcHRpb25zLnJlbmRlcikge1xuICAgICAgdm0uJG9wdGlvbnMucmVuZGVyID0gY3JlYXRlRW1wdHlWTm9kZTtcbiAgICAgIHtcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmICgodm0uJG9wdGlvbnMudGVtcGxhdGUgJiYgdm0uJG9wdGlvbnMudGVtcGxhdGUuY2hhckF0KDApICE9PSAnIycpIHx8XG4gICAgICAgICAgdm0uJG9wdGlvbnMuZWwgfHwgZWwpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgJ1lvdSBhcmUgdXNpbmcgdGhlIHJ1bnRpbWUtb25seSBidWlsZCBvZiBWdWUgd2hlcmUgdGhlIHRlbXBsYXRlICcgK1xuICAgICAgICAgICAgJ2NvbXBpbGVyIGlzIG5vdCBhdmFpbGFibGUuIEVpdGhlciBwcmUtY29tcGlsZSB0aGUgdGVtcGxhdGVzIGludG8gJyArXG4gICAgICAgICAgICAncmVuZGVyIGZ1bmN0aW9ucywgb3IgdXNlIHRoZSBjb21waWxlci1pbmNsdWRlZCBidWlsZC4nLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAnRmFpbGVkIHRvIG1vdW50IGNvbXBvbmVudDogdGVtcGxhdGUgb3IgcmVuZGVyIGZ1bmN0aW9uIG5vdCBkZWZpbmVkLicsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgY2FsbEhvb2sodm0sICdiZWZvcmVNb3VudCcpO1xuXG4gICAgdmFyIHVwZGF0ZUNvbXBvbmVudDtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgIHVwZGF0ZUNvbXBvbmVudCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIG5hbWUgPSB2bS5fbmFtZTtcbiAgICAgICAgdmFyIGlkID0gdm0uX3VpZDtcbiAgICAgICAgdmFyIHN0YXJ0VGFnID0gXCJ2dWUtcGVyZi1zdGFydDpcIiArIGlkO1xuICAgICAgICB2YXIgZW5kVGFnID0gXCJ2dWUtcGVyZi1lbmQ6XCIgKyBpZDtcblxuICAgICAgICBtYXJrKHN0YXJ0VGFnKTtcbiAgICAgICAgdmFyIHZub2RlID0gdm0uX3JlbmRlcigpO1xuICAgICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgbmFtZSArIFwiIHJlbmRlclwiKSwgc3RhcnRUYWcsIGVuZFRhZyk7XG5cbiAgICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICAgIHZtLl91cGRhdGUodm5vZGUsIGh5ZHJhdGluZyk7XG4gICAgICAgIG1hcmsoZW5kVGFnKTtcbiAgICAgICAgbWVhc3VyZSgoXCJ2dWUgXCIgKyBuYW1lICsgXCIgcGF0Y2hcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgfTtcbiAgICB9IGVsc2Uge1xuICAgICAgdXBkYXRlQ29tcG9uZW50ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB2bS5fdXBkYXRlKHZtLl9yZW5kZXIoKSwgaHlkcmF0aW5nKTtcbiAgICAgIH07XG4gICAgfVxuXG4gICAgLy8gd2Ugc2V0IHRoaXMgdG8gdm0uX3dhdGNoZXIgaW5zaWRlIHRoZSB3YXRjaGVyJ3MgY29uc3RydWN0b3JcbiAgICAvLyBzaW5jZSB0aGUgd2F0Y2hlcidzIGluaXRpYWwgcGF0Y2ggbWF5IGNhbGwgJGZvcmNlVXBkYXRlIChlLmcuIGluc2lkZSBjaGlsZFxuICAgIC8vIGNvbXBvbmVudCdzIG1vdW50ZWQgaG9vayksIHdoaWNoIHJlbGllcyBvbiB2bS5fd2F0Y2hlciBiZWluZyBhbHJlYWR5IGRlZmluZWRcbiAgICBuZXcgV2F0Y2hlcih2bSwgdXBkYXRlQ29tcG9uZW50LCBub29wLCB7XG4gICAgICBiZWZvcmU6IGZ1bmN0aW9uIGJlZm9yZSAoKSB7XG4gICAgICAgIGlmICh2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgICBjYWxsSG9vayh2bSwgJ2JlZm9yZVVwZGF0ZScpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSwgdHJ1ZSAvKiBpc1JlbmRlcldhdGNoZXIgKi8pO1xuICAgIGh5ZHJhdGluZyA9IGZhbHNlO1xuXG4gICAgLy8gbWFudWFsbHkgbW91bnRlZCBpbnN0YW5jZSwgY2FsbCBtb3VudGVkIG9uIHNlbGZcbiAgICAvLyBtb3VudGVkIGlzIGNhbGxlZCBmb3IgcmVuZGVyLWNyZWF0ZWQgY2hpbGQgY29tcG9uZW50cyBpbiBpdHMgaW5zZXJ0ZWQgaG9va1xuICAgIGlmICh2bS4kdm5vZGUgPT0gbnVsbCkge1xuICAgICAgdm0uX2lzTW91bnRlZCA9IHRydWU7XG4gICAgICBjYWxsSG9vayh2bSwgJ21vdW50ZWQnKTtcbiAgICB9XG4gICAgcmV0dXJuIHZtXG4gIH1cblxuICBmdW5jdGlvbiB1cGRhdGVDaGlsZENvbXBvbmVudCAoXG4gICAgdm0sXG4gICAgcHJvcHNEYXRhLFxuICAgIGxpc3RlbmVycyxcbiAgICBwYXJlbnRWbm9kZSxcbiAgICByZW5kZXJDaGlsZHJlblxuICApIHtcbiAgICB7XG4gICAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSB0cnVlO1xuICAgIH1cblxuICAgIC8vIGRldGVybWluZSB3aGV0aGVyIGNvbXBvbmVudCBoYXMgc2xvdCBjaGlsZHJlblxuICAgIC8vIHdlIG5lZWQgdG8gZG8gdGhpcyBiZWZvcmUgb3ZlcndyaXRpbmcgJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuLlxuXG4gICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGR5bmFtaWMgc2NvcGVkU2xvdHMgKGhhbmQtd3JpdHRlbiBvciBjb21waWxlZCBidXQgd2l0aFxuICAgIC8vIGR5bmFtaWMgc2xvdCBuYW1lcykuIFN0YXRpYyBzY29wZWQgc2xvdHMgY29tcGlsZWQgZnJvbSB0ZW1wbGF0ZSBoYXMgdGhlXG4gICAgLy8gXCIkc3RhYmxlXCIgbWFya2VyLlxuICAgIHZhciBuZXdTY29wZWRTbG90cyA9IHBhcmVudFZub2RlLmRhdGEuc2NvcGVkU2xvdHM7XG4gICAgdmFyIG9sZFNjb3BlZFNsb3RzID0gdm0uJHNjb3BlZFNsb3RzO1xuICAgIHZhciBoYXNEeW5hbWljU2NvcGVkU2xvdCA9ICEhKFxuICAgICAgKG5ld1Njb3BlZFNsb3RzICYmICFuZXdTY29wZWRTbG90cy4kc3RhYmxlKSB8fFxuICAgICAgKG9sZFNjb3BlZFNsb3RzICE9PSBlbXB0eU9iamVjdCAmJiAhb2xkU2NvcGVkU2xvdHMuJHN0YWJsZSkgfHxcbiAgICAgIChuZXdTY29wZWRTbG90cyAmJiB2bS4kc2NvcGVkU2xvdHMuJGtleSAhPT0gbmV3U2NvcGVkU2xvdHMuJGtleSkgfHxcbiAgICAgICghbmV3U2NvcGVkU2xvdHMgJiYgdm0uJHNjb3BlZFNsb3RzLiRrZXkpXG4gICAgKTtcblxuICAgIC8vIEFueSBzdGF0aWMgc2xvdCBjaGlsZHJlbiBmcm9tIHRoZSBwYXJlbnQgbWF5IGhhdmUgY2hhbmdlZCBkdXJpbmcgcGFyZW50J3NcbiAgICAvLyB1cGRhdGUuIER5bmFtaWMgc2NvcGVkIHNsb3RzIG1heSBhbHNvIGhhdmUgY2hhbmdlZC4gSW4gc3VjaCBjYXNlcywgYSBmb3JjZWRcbiAgICAvLyB1cGRhdGUgaXMgbmVjZXNzYXJ5IHRvIGVuc3VyZSBjb3JyZWN0bmVzcy5cbiAgICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9ICEhKFxuICAgICAgcmVuZGVyQ2hpbGRyZW4gfHwgICAgICAgICAgICAgICAvLyBoYXMgbmV3IHN0YXRpYyBzbG90c1xuICAgICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuIHx8ICAvLyBoYXMgb2xkIHN0YXRpYyBzbG90c1xuICAgICAgaGFzRHluYW1pY1Njb3BlZFNsb3RcbiAgICApO1xuXG4gICAgdm0uJG9wdGlvbnMuX3BhcmVudFZub2RlID0gcGFyZW50Vm5vZGU7XG4gICAgdm0uJHZub2RlID0gcGFyZW50Vm5vZGU7IC8vIHVwZGF0ZSB2bSdzIHBsYWNlaG9sZGVyIG5vZGUgd2l0aG91dCByZS1yZW5kZXJcblxuICAgIGlmICh2bS5fdm5vZGUpIHsgLy8gdXBkYXRlIGNoaWxkIHRyZWUncyBwYXJlbnRcbiAgICAgIHZtLl92bm9kZS5wYXJlbnQgPSBwYXJlbnRWbm9kZTtcbiAgICB9XG4gICAgdm0uJG9wdGlvbnMuX3JlbmRlckNoaWxkcmVuID0gcmVuZGVyQ2hpbGRyZW47XG5cbiAgICAvLyB1cGRhdGUgJGF0dHJzIGFuZCAkbGlzdGVuZXJzIGhhc2hcbiAgICAvLyB0aGVzZSBhcmUgYWxzbyByZWFjdGl2ZSBzbyB0aGV5IG1heSB0cmlnZ2VyIGNoaWxkIHVwZGF0ZSBpZiB0aGUgY2hpbGRcbiAgICAvLyB1c2VkIHRoZW0gZHVyaW5nIHJlbmRlclxuICAgIHZtLiRhdHRycyA9IHBhcmVudFZub2RlLmRhdGEuYXR0cnMgfHwgZW1wdHlPYmplY3Q7XG4gICAgdm0uJGxpc3RlbmVycyA9IGxpc3RlbmVycyB8fCBlbXB0eU9iamVjdDtcblxuICAgIC8vIHVwZGF0ZSBwcm9wc1xuICAgIGlmIChwcm9wc0RhdGEgJiYgdm0uJG9wdGlvbnMucHJvcHMpIHtcbiAgICAgIHRvZ2dsZU9ic2VydmluZyhmYWxzZSk7XG4gICAgICB2YXIgcHJvcHMgPSB2bS5fcHJvcHM7XG4gICAgICB2YXIgcHJvcEtleXMgPSB2bS4kb3B0aW9ucy5fcHJvcEtleXMgfHwgW107XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BLZXlzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciBrZXkgPSBwcm9wS2V5c1tpXTtcbiAgICAgICAgdmFyIHByb3BPcHRpb25zID0gdm0uJG9wdGlvbnMucHJvcHM7IC8vIHd0ZiBmbG93P1xuICAgICAgICBwcm9wc1trZXldID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcE9wdGlvbnMsIHByb3BzRGF0YSwgdm0pO1xuICAgICAgfVxuICAgICAgdG9nZ2xlT2JzZXJ2aW5nKHRydWUpO1xuICAgICAgLy8ga2VlcCBhIGNvcHkgb2YgcmF3IHByb3BzRGF0YVxuICAgICAgdm0uJG9wdGlvbnMucHJvcHNEYXRhID0gcHJvcHNEYXRhO1xuICAgIH1cblxuICAgIC8vIHVwZGF0ZSBsaXN0ZW5lcnNcbiAgICBsaXN0ZW5lcnMgPSBsaXN0ZW5lcnMgfHwgZW1wdHlPYmplY3Q7XG4gICAgdmFyIG9sZExpc3RlbmVycyA9IHZtLiRvcHRpb25zLl9wYXJlbnRMaXN0ZW5lcnM7XG4gICAgdm0uJG9wdGlvbnMuX3BhcmVudExpc3RlbmVycyA9IGxpc3RlbmVycztcbiAgICB1cGRhdGVDb21wb25lbnRMaXN0ZW5lcnModm0sIGxpc3RlbmVycywgb2xkTGlzdGVuZXJzKTtcblxuICAgIC8vIHJlc29sdmUgc2xvdHMgKyBmb3JjZSB1cGRhdGUgaWYgaGFzIGNoaWxkcmVuXG4gICAgaWYgKG5lZWRzRm9yY2VVcGRhdGUpIHtcbiAgICAgIHZtLiRzbG90cyA9IHJlc29sdmVTbG90cyhyZW5kZXJDaGlsZHJlbiwgcGFyZW50Vm5vZGUuY29udGV4dCk7XG4gICAgICB2bS4kZm9yY2VVcGRhdGUoKTtcbiAgICB9XG5cbiAgICB7XG4gICAgICBpc1VwZGF0aW5nQ2hpbGRDb21wb25lbnQgPSBmYWxzZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc0luSW5hY3RpdmVUcmVlICh2bSkge1xuICAgIHdoaWxlICh2bSAmJiAodm0gPSB2bS4kcGFyZW50KSkge1xuICAgICAgaWYgKHZtLl9pbmFjdGl2ZSkgeyByZXR1cm4gdHJ1ZSB9XG4gICAgfVxuICAgIHJldHVybiBmYWxzZVxuICB9XG5cbiAgZnVuY3Rpb24gYWN0aXZhdGVDaGlsZENvbXBvbmVudCAodm0sIGRpcmVjdCkge1xuICAgIGlmIChkaXJlY3QpIHtcbiAgICAgIHZtLl9kaXJlY3RJbmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAodm0uX2RpcmVjdEluYWN0aXZlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKHZtLl9pbmFjdGl2ZSB8fCB2bS5faW5hY3RpdmUgPT09IG51bGwpIHtcbiAgICAgIHZtLl9pbmFjdGl2ZSA9IGZhbHNlO1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCB2bS4kY2hpbGRyZW4ubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgICAgY2FsbEhvb2sodm0sICdhY3RpdmF0ZWQnKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQgKHZtLCBkaXJlY3QpIHtcbiAgICBpZiAoZGlyZWN0KSB7XG4gICAgICB2bS5fZGlyZWN0SW5hY3RpdmUgPSB0cnVlO1xuICAgICAgaWYgKGlzSW5JbmFjdGl2ZVRyZWUodm0pKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIXZtLl9pbmFjdGl2ZSkge1xuICAgICAgdm0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdm0uJGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGRlYWN0aXZhdGVDaGlsZENvbXBvbmVudCh2bS4kY2hpbGRyZW5baV0pO1xuICAgICAgfVxuICAgICAgY2FsbEhvb2sodm0sICdkZWFjdGl2YXRlZCcpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNhbGxIb29rICh2bSwgaG9vaykge1xuICAgIC8vICM3NTczIGRpc2FibGUgZGVwIGNvbGxlY3Rpb24gd2hlbiBpbnZva2luZyBsaWZlY3ljbGUgaG9va3NcbiAgICBwdXNoVGFyZ2V0KCk7XG4gICAgdmFyIGhhbmRsZXJzID0gdm0uJG9wdGlvbnNbaG9va107XG4gICAgdmFyIGluZm8gPSBob29rICsgXCIgaG9va1wiO1xuICAgIGlmIChoYW5kbGVycykge1xuICAgICAgZm9yICh2YXIgaSA9IDAsIGogPSBoYW5kbGVycy5sZW5ndGg7IGkgPCBqOyBpKyspIHtcbiAgICAgICAgaW52b2tlV2l0aEVycm9ySGFuZGxpbmcoaGFuZGxlcnNbaV0sIHZtLCBudWxsLCB2bSwgaW5mbyk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmICh2bS5faGFzSG9va0V2ZW50KSB7XG4gICAgICB2bS4kZW1pdCgnaG9vazonICsgaG9vayk7XG4gICAgfVxuICAgIHBvcFRhcmdldCgpO1xuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIE1BWF9VUERBVEVfQ09VTlQgPSAxMDA7XG5cbiAgdmFyIHF1ZXVlID0gW107XG4gIHZhciBhY3RpdmF0ZWRDaGlsZHJlbiA9IFtdO1xuICB2YXIgaGFzID0ge307XG4gIHZhciBjaXJjdWxhciA9IHt9O1xuICB2YXIgd2FpdGluZyA9IGZhbHNlO1xuICB2YXIgZmx1c2hpbmcgPSBmYWxzZTtcbiAgdmFyIGluZGV4ID0gMDtcblxuICAvKipcbiAgICogUmVzZXQgdGhlIHNjaGVkdWxlcidzIHN0YXRlLlxuICAgKi9cbiAgZnVuY3Rpb24gcmVzZXRTY2hlZHVsZXJTdGF0ZSAoKSB7XG4gICAgaW5kZXggPSBxdWV1ZS5sZW5ndGggPSBhY3RpdmF0ZWRDaGlsZHJlbi5sZW5ndGggPSAwO1xuICAgIGhhcyA9IHt9O1xuICAgIHtcbiAgICAgIGNpcmN1bGFyID0ge307XG4gICAgfVxuICAgIHdhaXRpbmcgPSBmbHVzaGluZyA9IGZhbHNlO1xuICB9XG5cbiAgLy8gQXN5bmMgZWRnZSBjYXNlICM2NTY2IHJlcXVpcmVzIHNhdmluZyB0aGUgdGltZXN0YW1wIHdoZW4gZXZlbnQgbGlzdGVuZXJzIGFyZVxuICAvLyBhdHRhY2hlZC4gSG93ZXZlciwgY2FsbGluZyBwZXJmb3JtYW5jZS5ub3coKSBoYXMgYSBwZXJmIG92ZXJoZWFkIGVzcGVjaWFsbHlcbiAgLy8gaWYgdGhlIHBhZ2UgaGFzIHRob3VzYW5kcyBvZiBldmVudCBsaXN0ZW5lcnMuIEluc3RlYWQsIHdlIHRha2UgYSB0aW1lc3RhbXBcbiAgLy8gZXZlcnkgdGltZSB0aGUgc2NoZWR1bGVyIGZsdXNoZXMgYW5kIHVzZSB0aGF0IGZvciBhbGwgZXZlbnQgbGlzdGVuZXJzXG4gIC8vIGF0dGFjaGVkIGR1cmluZyB0aGF0IGZsdXNoLlxuICB2YXIgY3VycmVudEZsdXNoVGltZXN0YW1wID0gMDtcblxuICAvLyBBc3luYyBlZGdlIGNhc2UgZml4IHJlcXVpcmVzIHN0b3JpbmcgYW4gZXZlbnQgbGlzdGVuZXIncyBhdHRhY2ggdGltZXN0YW1wLlxuICB2YXIgZ2V0Tm93ID0gRGF0ZS5ub3c7XG5cbiAgLy8gRGV0ZXJtaW5lIHdoYXQgZXZlbnQgdGltZXN0YW1wIHRoZSBicm93c2VyIGlzIHVzaW5nLiBBbm5veWluZ2x5LCB0aGVcbiAgLy8gdGltZXN0YW1wIGNhbiBlaXRoZXIgYmUgaGktcmVzIChyZWxhdGl2ZSB0byBwYWdlIGxvYWQpIG9yIGxvdy1yZXNcbiAgLy8gKHJlbGF0aXZlIHRvIFVOSVggZXBvY2gpLCBzbyBpbiBvcmRlciB0byBjb21wYXJlIHRpbWUgd2UgaGF2ZSB0byB1c2UgdGhlXG4gIC8vIHNhbWUgdGltZXN0YW1wIHR5cGUgd2hlbiBzYXZpbmcgdGhlIGZsdXNoIHRpbWVzdGFtcC5cbiAgLy8gQWxsIElFIHZlcnNpb25zIHVzZSBsb3ctcmVzIGV2ZW50IHRpbWVzdGFtcHMsIGFuZCBoYXZlIHByb2JsZW1hdGljIGNsb2NrXG4gIC8vIGltcGxlbWVudGF0aW9ucyAoIzk2MzIpXG4gIGlmIChpbkJyb3dzZXIgJiYgIWlzSUUpIHtcbiAgICB2YXIgcGVyZm9ybWFuY2UgPSB3aW5kb3cucGVyZm9ybWFuY2U7XG4gICAgaWYgKFxuICAgICAgcGVyZm9ybWFuY2UgJiZcbiAgICAgIHR5cGVvZiBwZXJmb3JtYW5jZS5ub3cgPT09ICdmdW5jdGlvbicgJiZcbiAgICAgIGdldE5vdygpID4gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0V2ZW50JykudGltZVN0YW1wXG4gICAgKSB7XG4gICAgICAvLyBpZiB0aGUgZXZlbnQgdGltZXN0YW1wLCBhbHRob3VnaCBldmFsdWF0ZWQgQUZURVIgdGhlIERhdGUubm93KCksIGlzXG4gICAgICAvLyBzbWFsbGVyIHRoYW4gaXQsIGl0IG1lYW5zIHRoZSBldmVudCBpcyB1c2luZyBhIGhpLXJlcyB0aW1lc3RhbXAsXG4gICAgICAvLyBhbmQgd2UgbmVlZCB0byB1c2UgdGhlIGhpLXJlcyB2ZXJzaW9uIGZvciBldmVudCBsaXN0ZW5lciB0aW1lc3RhbXBzIGFzXG4gICAgICAvLyB3ZWxsLlxuICAgICAgZ2V0Tm93ID0gZnVuY3Rpb24gKCkgeyByZXR1cm4gcGVyZm9ybWFuY2Uubm93KCk7IH07XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIEZsdXNoIGJvdGggcXVldWVzIGFuZCBydW4gdGhlIHdhdGNoZXJzLlxuICAgKi9cbiAgZnVuY3Rpb24gZmx1c2hTY2hlZHVsZXJRdWV1ZSAoKSB7XG4gICAgY3VycmVudEZsdXNoVGltZXN0YW1wID0gZ2V0Tm93KCk7XG4gICAgZmx1c2hpbmcgPSB0cnVlO1xuICAgIHZhciB3YXRjaGVyLCBpZDtcblxuICAgIC8vIFNvcnQgcXVldWUgYmVmb3JlIGZsdXNoLlxuICAgIC8vIFRoaXMgZW5zdXJlcyB0aGF0OlxuICAgIC8vIDEuIENvbXBvbmVudHMgYXJlIHVwZGF0ZWQgZnJvbSBwYXJlbnQgdG8gY2hpbGQuIChiZWNhdXNlIHBhcmVudCBpcyBhbHdheXNcbiAgICAvLyAgICBjcmVhdGVkIGJlZm9yZSB0aGUgY2hpbGQpXG4gICAgLy8gMi4gQSBjb21wb25lbnQncyB1c2VyIHdhdGNoZXJzIGFyZSBydW4gYmVmb3JlIGl0cyByZW5kZXIgd2F0Y2hlciAoYmVjYXVzZVxuICAgIC8vICAgIHVzZXIgd2F0Y2hlcnMgYXJlIGNyZWF0ZWQgYmVmb3JlIHRoZSByZW5kZXIgd2F0Y2hlcilcbiAgICAvLyAzLiBJZiBhIGNvbXBvbmVudCBpcyBkZXN0cm95ZWQgZHVyaW5nIGEgcGFyZW50IGNvbXBvbmVudCdzIHdhdGNoZXIgcnVuLFxuICAgIC8vICAgIGl0cyB3YXRjaGVycyBjYW4gYmUgc2tpcHBlZC5cbiAgICBxdWV1ZS5zb3J0KGZ1bmN0aW9uIChhLCBiKSB7IHJldHVybiBhLmlkIC0gYi5pZDsgfSk7XG5cbiAgICAvLyBkbyBub3QgY2FjaGUgbGVuZ3RoIGJlY2F1c2UgbW9yZSB3YXRjaGVycyBtaWdodCBiZSBwdXNoZWRcbiAgICAvLyBhcyB3ZSBydW4gZXhpc3Rpbmcgd2F0Y2hlcnNcbiAgICBmb3IgKGluZGV4ID0gMDsgaW5kZXggPCBxdWV1ZS5sZW5ndGg7IGluZGV4KyspIHtcbiAgICAgIHdhdGNoZXIgPSBxdWV1ZVtpbmRleF07XG4gICAgICBpZiAod2F0Y2hlci5iZWZvcmUpIHtcbiAgICAgICAgd2F0Y2hlci5iZWZvcmUoKTtcbiAgICAgIH1cbiAgICAgIGlkID0gd2F0Y2hlci5pZDtcbiAgICAgIGhhc1tpZF0gPSBudWxsO1xuICAgICAgd2F0Y2hlci5ydW4oKTtcbiAgICAgIC8vIGluIGRldiBidWlsZCwgY2hlY2sgYW5kIHN0b3AgY2lyY3VsYXIgdXBkYXRlcy5cbiAgICAgIGlmIChoYXNbaWRdICE9IG51bGwpIHtcbiAgICAgICAgY2lyY3VsYXJbaWRdID0gKGNpcmN1bGFyW2lkXSB8fCAwKSArIDE7XG4gICAgICAgIGlmIChjaXJjdWxhcltpZF0gPiBNQVhfVVBEQVRFX0NPVU5UKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgICdZb3UgbWF5IGhhdmUgYW4gaW5maW5pdGUgdXBkYXRlIGxvb3AgJyArIChcbiAgICAgICAgICAgICAgd2F0Y2hlci51c2VyXG4gICAgICAgICAgICAgICAgPyAoXCJpbiB3YXRjaGVyIHdpdGggZXhwcmVzc2lvbiBcXFwiXCIgKyAod2F0Y2hlci5leHByZXNzaW9uKSArIFwiXFxcIlwiKVxuICAgICAgICAgICAgICAgIDogXCJpbiBhIGNvbXBvbmVudCByZW5kZXIgZnVuY3Rpb24uXCJcbiAgICAgICAgICAgICksXG4gICAgICAgICAgICB3YXRjaGVyLnZtXG4gICAgICAgICAgKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8ga2VlcCBjb3BpZXMgb2YgcG9zdCBxdWV1ZXMgYmVmb3JlIHJlc2V0dGluZyBzdGF0ZVxuICAgIHZhciBhY3RpdmF0ZWRRdWV1ZSA9IGFjdGl2YXRlZENoaWxkcmVuLnNsaWNlKCk7XG4gICAgdmFyIHVwZGF0ZWRRdWV1ZSA9IHF1ZXVlLnNsaWNlKCk7XG5cbiAgICByZXNldFNjaGVkdWxlclN0YXRlKCk7XG5cbiAgICAvLyBjYWxsIGNvbXBvbmVudCB1cGRhdGVkIGFuZCBhY3RpdmF0ZWQgaG9va3NcbiAgICBjYWxsQWN0aXZhdGVkSG9va3MoYWN0aXZhdGVkUXVldWUpO1xuICAgIGNhbGxVcGRhdGVkSG9va3ModXBkYXRlZFF1ZXVlKTtcblxuICAgIC8vIGRldnRvb2wgaG9va1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChkZXZ0b29scyAmJiBjb25maWcuZGV2dG9vbHMpIHtcbiAgICAgIGRldnRvb2xzLmVtaXQoJ2ZsdXNoJyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2FsbFVwZGF0ZWRIb29rcyAocXVldWUpIHtcbiAgICB2YXIgaSA9IHF1ZXVlLmxlbmd0aDtcbiAgICB3aGlsZSAoaS0tKSB7XG4gICAgICB2YXIgd2F0Y2hlciA9IHF1ZXVlW2ldO1xuICAgICAgdmFyIHZtID0gd2F0Y2hlci52bTtcbiAgICAgIGlmICh2bS5fd2F0Y2hlciA9PT0gd2F0Y2hlciAmJiB2bS5faXNNb3VudGVkICYmICF2bS5faXNEZXN0cm95ZWQpIHtcbiAgICAgICAgY2FsbEhvb2sodm0sICd1cGRhdGVkJyk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFF1ZXVlIGEga2VwdC1hbGl2ZSBjb21wb25lbnQgdGhhdCB3YXMgYWN0aXZhdGVkIGR1cmluZyBwYXRjaC5cbiAgICogVGhlIHF1ZXVlIHdpbGwgYmUgcHJvY2Vzc2VkIGFmdGVyIHRoZSBlbnRpcmUgdHJlZSBoYXMgYmVlbiBwYXRjaGVkLlxuICAgKi9cbiAgZnVuY3Rpb24gcXVldWVBY3RpdmF0ZWRDb21wb25lbnQgKHZtKSB7XG4gICAgLy8gc2V0dGluZyBfaW5hY3RpdmUgdG8gZmFsc2UgaGVyZSBzbyB0aGF0IGEgcmVuZGVyIGZ1bmN0aW9uIGNhblxuICAgIC8vIHJlbHkgb24gY2hlY2tpbmcgd2hldGhlciBpdCdzIGluIGFuIGluYWN0aXZlIHRyZWUgKGUuZy4gcm91dGVyLXZpZXcpXG4gICAgdm0uX2luYWN0aXZlID0gZmFsc2U7XG4gICAgYWN0aXZhdGVkQ2hpbGRyZW4ucHVzaCh2bSk7XG4gIH1cblxuICBmdW5jdGlvbiBjYWxsQWN0aXZhdGVkSG9va3MgKHF1ZXVlKSB7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBxdWV1ZS5sZW5ndGg7IGkrKykge1xuICAgICAgcXVldWVbaV0uX2luYWN0aXZlID0gdHJ1ZTtcbiAgICAgIGFjdGl2YXRlQ2hpbGRDb21wb25lbnQocXVldWVbaV0sIHRydWUgLyogdHJ1ZSAqLyk7XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFB1c2ggYSB3YXRjaGVyIGludG8gdGhlIHdhdGNoZXIgcXVldWUuXG4gICAqIEpvYnMgd2l0aCBkdXBsaWNhdGUgSURzIHdpbGwgYmUgc2tpcHBlZCB1bmxlc3MgaXQnc1xuICAgKiBwdXNoZWQgd2hlbiB0aGUgcXVldWUgaXMgYmVpbmcgZmx1c2hlZC5cbiAgICovXG4gIGZ1bmN0aW9uIHF1ZXVlV2F0Y2hlciAod2F0Y2hlcikge1xuICAgIHZhciBpZCA9IHdhdGNoZXIuaWQ7XG4gICAgaWYgKGhhc1tpZF0gPT0gbnVsbCkge1xuICAgICAgaGFzW2lkXSA9IHRydWU7XG4gICAgICBpZiAoIWZsdXNoaW5nKSB7XG4gICAgICAgIHF1ZXVlLnB1c2god2F0Y2hlcik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyBpZiBhbHJlYWR5IGZsdXNoaW5nLCBzcGxpY2UgdGhlIHdhdGNoZXIgYmFzZWQgb24gaXRzIGlkXG4gICAgICAgIC8vIGlmIGFscmVhZHkgcGFzdCBpdHMgaWQsIGl0IHdpbGwgYmUgcnVuIG5leHQgaW1tZWRpYXRlbHkuXG4gICAgICAgIHZhciBpID0gcXVldWUubGVuZ3RoIC0gMTtcbiAgICAgICAgd2hpbGUgKGkgPiBpbmRleCAmJiBxdWV1ZVtpXS5pZCA+IHdhdGNoZXIuaWQpIHtcbiAgICAgICAgICBpLS07XG4gICAgICAgIH1cbiAgICAgICAgcXVldWUuc3BsaWNlKGkgKyAxLCAwLCB3YXRjaGVyKTtcbiAgICAgIH1cbiAgICAgIC8vIHF1ZXVlIHRoZSBmbHVzaFxuICAgICAgaWYgKCF3YWl0aW5nKSB7XG4gICAgICAgIHdhaXRpbmcgPSB0cnVlO1xuXG4gICAgICAgIGlmICghY29uZmlnLmFzeW5jKSB7XG4gICAgICAgICAgZmx1c2hTY2hlZHVsZXJRdWV1ZSgpO1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIG5leHRUaWNrKGZsdXNoU2NoZWR1bGVyUXVldWUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG5cblxuICB2YXIgdWlkJDIgPSAwO1xuXG4gIC8qKlxuICAgKiBBIHdhdGNoZXIgcGFyc2VzIGFuIGV4cHJlc3Npb24sIGNvbGxlY3RzIGRlcGVuZGVuY2llcyxcbiAgICogYW5kIGZpcmVzIGNhbGxiYWNrIHdoZW4gdGhlIGV4cHJlc3Npb24gdmFsdWUgY2hhbmdlcy5cbiAgICogVGhpcyBpcyB1c2VkIGZvciBib3RoIHRoZSAkd2F0Y2goKSBhcGkgYW5kIGRpcmVjdGl2ZXMuXG4gICAqL1xuICB2YXIgV2F0Y2hlciA9IGZ1bmN0aW9uIFdhdGNoZXIgKFxuICAgIHZtLFxuICAgIGV4cE9yRm4sXG4gICAgY2IsXG4gICAgb3B0aW9ucyxcbiAgICBpc1JlbmRlcldhdGNoZXJcbiAgKSB7XG4gICAgdGhpcy52bSA9IHZtO1xuICAgIGlmIChpc1JlbmRlcldhdGNoZXIpIHtcbiAgICAgIHZtLl93YXRjaGVyID0gdGhpcztcbiAgICB9XG4gICAgdm0uX3dhdGNoZXJzLnB1c2godGhpcyk7XG4gICAgLy8gb3B0aW9uc1xuICAgIGlmIChvcHRpb25zKSB7XG4gICAgICB0aGlzLmRlZXAgPSAhIW9wdGlvbnMuZGVlcDtcbiAgICAgIHRoaXMudXNlciA9ICEhb3B0aW9ucy51c2VyO1xuICAgICAgdGhpcy5sYXp5ID0gISFvcHRpb25zLmxhenk7XG4gICAgICB0aGlzLnN5bmMgPSAhIW9wdGlvbnMuc3luYztcbiAgICAgIHRoaXMuYmVmb3JlID0gb3B0aW9ucy5iZWZvcmU7XG4gICAgfSBlbHNlIHtcbiAgICAgIHRoaXMuZGVlcCA9IHRoaXMudXNlciA9IHRoaXMubGF6eSA9IHRoaXMuc3luYyA9IGZhbHNlO1xuICAgIH1cbiAgICB0aGlzLmNiID0gY2I7XG4gICAgdGhpcy5pZCA9ICsrdWlkJDI7IC8vIHVpZCBmb3IgYmF0Y2hpbmdcbiAgICB0aGlzLmFjdGl2ZSA9IHRydWU7XG4gICAgdGhpcy5kaXJ0eSA9IHRoaXMubGF6eTsgLy8gZm9yIGxhenkgd2F0Y2hlcnNcbiAgICB0aGlzLmRlcHMgPSBbXTtcbiAgICB0aGlzLm5ld0RlcHMgPSBbXTtcbiAgICB0aGlzLmRlcElkcyA9IG5ldyBfU2V0KCk7XG4gICAgdGhpcy5uZXdEZXBJZHMgPSBuZXcgX1NldCgpO1xuICAgIHRoaXMuZXhwcmVzc2lvbiA9IGV4cE9yRm4udG9TdHJpbmcoKTtcbiAgICAvLyBwYXJzZSBleHByZXNzaW9uIGZvciBnZXR0ZXJcbiAgICBpZiAodHlwZW9mIGV4cE9yRm4gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHRoaXMuZ2V0dGVyID0gZXhwT3JGbjtcbiAgICB9IGVsc2Uge1xuICAgICAgdGhpcy5nZXR0ZXIgPSBwYXJzZVBhdGgoZXhwT3JGbik7XG4gICAgICBpZiAoIXRoaXMuZ2V0dGVyKSB7XG4gICAgICAgIHRoaXMuZ2V0dGVyID0gbm9vcDtcbiAgICAgICAgd2FybihcbiAgICAgICAgICBcIkZhaWxlZCB3YXRjaGluZyBwYXRoOiBcXFwiXCIgKyBleHBPckZuICsgXCJcXFwiIFwiICtcbiAgICAgICAgICAnV2F0Y2hlciBvbmx5IGFjY2VwdHMgc2ltcGxlIGRvdC1kZWxpbWl0ZWQgcGF0aHMuICcgK1xuICAgICAgICAgICdGb3IgZnVsbCBjb250cm9sLCB1c2UgYSBmdW5jdGlvbiBpbnN0ZWFkLicsXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy52YWx1ZSA9IHRoaXMubGF6eVxuICAgICAgPyB1bmRlZmluZWRcbiAgICAgIDogdGhpcy5nZXQoKTtcbiAgfTtcblxuICAvKipcbiAgICogRXZhbHVhdGUgdGhlIGdldHRlciwgYW5kIHJlLWNvbGxlY3QgZGVwZW5kZW5jaWVzLlxuICAgKi9cbiAgV2F0Y2hlci5wcm90b3R5cGUuZ2V0ID0gZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICBwdXNoVGFyZ2V0KHRoaXMpO1xuICAgIHZhciB2YWx1ZTtcbiAgICB2YXIgdm0gPSB0aGlzLnZtO1xuICAgIHRyeSB7XG4gICAgICB2YWx1ZSA9IHRoaXMuZ2V0dGVyLmNhbGwodm0sIHZtKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICBpZiAodGhpcy51c2VyKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIHZtLCAoXCJnZXR0ZXIgZm9yIHdhdGNoZXIgXFxcIlwiICsgKHRoaXMuZXhwcmVzc2lvbikgKyBcIlxcXCJcIikpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdGhyb3cgZVxuICAgICAgfVxuICAgIH0gZmluYWxseSB7XG4gICAgICAvLyBcInRvdWNoXCIgZXZlcnkgcHJvcGVydHkgc28gdGhleSBhcmUgYWxsIHRyYWNrZWQgYXNcbiAgICAgIC8vIGRlcGVuZGVuY2llcyBmb3IgZGVlcCB3YXRjaGluZ1xuICAgICAgaWYgKHRoaXMuZGVlcCkge1xuICAgICAgICB0cmF2ZXJzZSh2YWx1ZSk7XG4gICAgICB9XG4gICAgICBwb3BUYXJnZXQoKTtcbiAgICAgIHRoaXMuY2xlYW51cERlcHMoKTtcbiAgICB9XG4gICAgcmV0dXJuIHZhbHVlXG4gIH07XG5cbiAgLyoqXG4gICAqIEFkZCBhIGRlcGVuZGVuY3kgdG8gdGhpcyBkaXJlY3RpdmUuXG4gICAqL1xuICBXYXRjaGVyLnByb3RvdHlwZS5hZGREZXAgPSBmdW5jdGlvbiBhZGREZXAgKGRlcCkge1xuICAgIHZhciBpZCA9IGRlcC5pZDtcbiAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhpZCkpIHtcbiAgICAgIHRoaXMubmV3RGVwSWRzLmFkZChpZCk7XG4gICAgICB0aGlzLm5ld0RlcHMucHVzaChkZXApO1xuICAgICAgaWYgKCF0aGlzLmRlcElkcy5oYXMoaWQpKSB7XG4gICAgICAgIGRlcC5hZGRTdWIodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBDbGVhbiB1cCBmb3IgZGVwZW5kZW5jeSBjb2xsZWN0aW9uLlxuICAgKi9cbiAgV2F0Y2hlci5wcm90b3R5cGUuY2xlYW51cERlcHMgPSBmdW5jdGlvbiBjbGVhbnVwRGVwcyAoKSB7XG4gICAgdmFyIGkgPSB0aGlzLmRlcHMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhciBkZXAgPSB0aGlzLmRlcHNbaV07XG4gICAgICBpZiAoIXRoaXMubmV3RGVwSWRzLmhhcyhkZXAuaWQpKSB7XG4gICAgICAgIGRlcC5yZW1vdmVTdWIodGhpcyk7XG4gICAgICB9XG4gICAgfVxuICAgIHZhciB0bXAgPSB0aGlzLmRlcElkcztcbiAgICB0aGlzLmRlcElkcyA9IHRoaXMubmV3RGVwSWRzO1xuICAgIHRoaXMubmV3RGVwSWRzID0gdG1wO1xuICAgIHRoaXMubmV3RGVwSWRzLmNsZWFyKCk7XG4gICAgdG1wID0gdGhpcy5kZXBzO1xuICAgIHRoaXMuZGVwcyA9IHRoaXMubmV3RGVwcztcbiAgICB0aGlzLm5ld0RlcHMgPSB0bXA7XG4gICAgdGhpcy5uZXdEZXBzLmxlbmd0aCA9IDA7XG4gIH07XG5cbiAgLyoqXG4gICAqIFN1YnNjcmliZXIgaW50ZXJmYWNlLlxuICAgKiBXaWxsIGJlIGNhbGxlZCB3aGVuIGEgZGVwZW5kZW5jeSBjaGFuZ2VzLlxuICAgKi9cbiAgV2F0Y2hlci5wcm90b3R5cGUudXBkYXRlID0gZnVuY3Rpb24gdXBkYXRlICgpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmICh0aGlzLmxhenkpIHtcbiAgICAgIHRoaXMuZGlydHkgPSB0cnVlO1xuICAgIH0gZWxzZSBpZiAodGhpcy5zeW5jKSB7XG4gICAgICB0aGlzLnJ1bigpO1xuICAgIH0gZWxzZSB7XG4gICAgICBxdWV1ZVdhdGNoZXIodGhpcyk7XG4gICAgfVxuICB9O1xuXG4gIC8qKlxuICAgKiBTY2hlZHVsZXIgam9iIGludGVyZmFjZS5cbiAgICogV2lsbCBiZSBjYWxsZWQgYnkgdGhlIHNjaGVkdWxlci5cbiAgICovXG4gIFdhdGNoZXIucHJvdG90eXBlLnJ1biA9IGZ1bmN0aW9uIHJ1biAoKSB7XG4gICAgaWYgKHRoaXMuYWN0aXZlKSB7XG4gICAgICB2YXIgdmFsdWUgPSB0aGlzLmdldCgpO1xuICAgICAgaWYgKFxuICAgICAgICB2YWx1ZSAhPT0gdGhpcy52YWx1ZSB8fFxuICAgICAgICAvLyBEZWVwIHdhdGNoZXJzIGFuZCB3YXRjaGVycyBvbiBPYmplY3QvQXJyYXlzIHNob3VsZCBmaXJlIGV2ZW5cbiAgICAgICAgLy8gd2hlbiB0aGUgdmFsdWUgaXMgdGhlIHNhbWUsIGJlY2F1c2UgdGhlIHZhbHVlIG1heVxuICAgICAgICAvLyBoYXZlIG11dGF0ZWQuXG4gICAgICAgIGlzT2JqZWN0KHZhbHVlKSB8fFxuICAgICAgICB0aGlzLmRlZXBcbiAgICAgICkge1xuICAgICAgICAvLyBzZXQgbmV3IHZhbHVlXG4gICAgICAgIHZhciBvbGRWYWx1ZSA9IHRoaXMudmFsdWU7XG4gICAgICAgIHRoaXMudmFsdWUgPSB2YWx1ZTtcbiAgICAgICAgaWYgKHRoaXMudXNlcikge1xuICAgICAgICAgIHZhciBpbmZvID0gXCJjYWxsYmFjayBmb3Igd2F0Y2hlciBcXFwiXCIgKyAodGhpcy5leHByZXNzaW9uKSArIFwiXFxcIlwiO1xuICAgICAgICAgIGludm9rZVdpdGhFcnJvckhhbmRsaW5nKHRoaXMuY2IsIHRoaXMudm0sIFt2YWx1ZSwgb2xkVmFsdWVdLCB0aGlzLnZtLCBpbmZvKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB0aGlzLmNiLmNhbGwodGhpcy52bSwgdmFsdWUsIG9sZFZhbHVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogRXZhbHVhdGUgdGhlIHZhbHVlIG9mIHRoZSB3YXRjaGVyLlxuICAgKiBUaGlzIG9ubHkgZ2V0cyBjYWxsZWQgZm9yIGxhenkgd2F0Y2hlcnMuXG4gICAqL1xuICBXYXRjaGVyLnByb3RvdHlwZS5ldmFsdWF0ZSA9IGZ1bmN0aW9uIGV2YWx1YXRlICgpIHtcbiAgICB0aGlzLnZhbHVlID0gdGhpcy5nZXQoKTtcbiAgICB0aGlzLmRpcnR5ID0gZmFsc2U7XG4gIH07XG5cbiAgLyoqXG4gICAqIERlcGVuZCBvbiBhbGwgZGVwcyBjb2xsZWN0ZWQgYnkgdGhpcyB3YXRjaGVyLlxuICAgKi9cbiAgV2F0Y2hlci5wcm90b3R5cGUuZGVwZW5kID0gZnVuY3Rpb24gZGVwZW5kICgpIHtcbiAgICB2YXIgaSA9IHRoaXMuZGVwcy5sZW5ndGg7XG4gICAgd2hpbGUgKGktLSkge1xuICAgICAgdGhpcy5kZXBzW2ldLmRlcGVuZCgpO1xuICAgIH1cbiAgfTtcblxuICAvKipcbiAgICogUmVtb3ZlIHNlbGYgZnJvbSBhbGwgZGVwZW5kZW5jaWVzJyBzdWJzY3JpYmVyIGxpc3QuXG4gICAqL1xuICBXYXRjaGVyLnByb3RvdHlwZS50ZWFyZG93biA9IGZ1bmN0aW9uIHRlYXJkb3duICgpIHtcbiAgICBpZiAodGhpcy5hY3RpdmUpIHtcbiAgICAgIC8vIHJlbW92ZSBzZWxmIGZyb20gdm0ncyB3YXRjaGVyIGxpc3RcbiAgICAgIC8vIHRoaXMgaXMgYSBzb21ld2hhdCBleHBlbnNpdmUgb3BlcmF0aW9uIHNvIHdlIHNraXAgaXRcbiAgICAgIC8vIGlmIHRoZSB2bSBpcyBiZWluZyBkZXN0cm95ZWQuXG4gICAgICBpZiAoIXRoaXMudm0uX2lzQmVpbmdEZXN0cm95ZWQpIHtcbiAgICAgICAgcmVtb3ZlKHRoaXMudm0uX3dhdGNoZXJzLCB0aGlzKTtcbiAgICAgIH1cbiAgICAgIHZhciBpID0gdGhpcy5kZXBzLmxlbmd0aDtcbiAgICAgIHdoaWxlIChpLS0pIHtcbiAgICAgICAgdGhpcy5kZXBzW2ldLnJlbW92ZVN1Yih0aGlzKTtcbiAgICAgIH1cbiAgICAgIHRoaXMuYWN0aXZlID0gZmFsc2U7XG4gICAgfVxuICB9O1xuXG4gIC8qICAqL1xuXG4gIHZhciBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24gPSB7XG4gICAgZW51bWVyYWJsZTogdHJ1ZSxcbiAgICBjb25maWd1cmFibGU6IHRydWUsXG4gICAgZ2V0OiBub29wLFxuICAgIHNldDogbm9vcFxuICB9O1xuXG4gIGZ1bmN0aW9uIHByb3h5ICh0YXJnZXQsIHNvdXJjZUtleSwga2V5KSB7XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLmdldCA9IGZ1bmN0aW9uIHByb3h5R2V0dGVyICgpIHtcbiAgICAgIHJldHVybiB0aGlzW3NvdXJjZUtleV1ba2V5XVxuICAgIH07XG4gICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IGZ1bmN0aW9uIHByb3h5U2V0dGVyICh2YWwpIHtcbiAgICAgIHRoaXNbc291cmNlS2V5XVtrZXldID0gdmFsO1xuICAgIH07XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFN0YXRlICh2bSkge1xuICAgIHZtLl93YXRjaGVycyA9IFtdO1xuICAgIHZhciBvcHRzID0gdm0uJG9wdGlvbnM7XG4gICAgaWYgKG9wdHMucHJvcHMpIHsgaW5pdFByb3BzKHZtLCBvcHRzLnByb3BzKTsgfVxuICAgIGlmIChvcHRzLm1ldGhvZHMpIHsgaW5pdE1ldGhvZHModm0sIG9wdHMubWV0aG9kcyk7IH1cbiAgICBpZiAob3B0cy5kYXRhKSB7XG4gICAgICBpbml0RGF0YSh2bSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIG9ic2VydmUodm0uX2RhdGEgPSB7fSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbiAgICB9XG4gICAgaWYgKG9wdHMuY29tcHV0ZWQpIHsgaW5pdENvbXB1dGVkKHZtLCBvcHRzLmNvbXB1dGVkKTsgfVxuICAgIGlmIChvcHRzLndhdGNoICYmIG9wdHMud2F0Y2ggIT09IG5hdGl2ZVdhdGNoKSB7XG4gICAgICBpbml0V2F0Y2godm0sIG9wdHMud2F0Y2gpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRQcm9wcyAodm0sIHByb3BzT3B0aW9ucykge1xuICAgIHZhciBwcm9wc0RhdGEgPSB2bS4kb3B0aW9ucy5wcm9wc0RhdGEgfHwge307XG4gICAgdmFyIHByb3BzID0gdm0uX3Byb3BzID0ge307XG4gICAgLy8gY2FjaGUgcHJvcCBrZXlzIHNvIHRoYXQgZnV0dXJlIHByb3BzIHVwZGF0ZXMgY2FuIGl0ZXJhdGUgdXNpbmcgQXJyYXlcbiAgICAvLyBpbnN0ZWFkIG9mIGR5bmFtaWMgb2JqZWN0IGtleSBlbnVtZXJhdGlvbi5cbiAgICB2YXIga2V5cyA9IHZtLiRvcHRpb25zLl9wcm9wS2V5cyA9IFtdO1xuICAgIHZhciBpc1Jvb3QgPSAhdm0uJHBhcmVudDtcbiAgICAvLyByb290IGluc3RhbmNlIHByb3BzIHNob3VsZCBiZSBjb252ZXJ0ZWRcbiAgICBpZiAoIWlzUm9vdCkge1xuICAgICAgdG9nZ2xlT2JzZXJ2aW5nKGZhbHNlKTtcbiAgICB9XG4gICAgdmFyIGxvb3AgPSBmdW5jdGlvbiAoIGtleSApIHtcbiAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgdmFyIHZhbHVlID0gdmFsaWRhdGVQcm9wKGtleSwgcHJvcHNPcHRpb25zLCBwcm9wc0RhdGEsIHZtKTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICB7XG4gICAgICAgIHZhciBoeXBoZW5hdGVkS2V5ID0gaHlwaGVuYXRlKGtleSk7XG4gICAgICAgIGlmIChpc1Jlc2VydmVkQXR0cmlidXRlKGh5cGhlbmF0ZWRLZXkpIHx8XG4gICAgICAgICAgICBjb25maWcuaXNSZXNlcnZlZEF0dHIoaHlwaGVuYXRlZEtleSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgKFwiXFxcIlwiICsgaHlwaGVuYXRlZEtleSArIFwiXFxcIiBpcyBhIHJlc2VydmVkIGF0dHJpYnV0ZSBhbmQgY2Fubm90IGJlIHVzZWQgYXMgY29tcG9uZW50IHByb3AuXCIpLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGRlZmluZVJlYWN0aXZlJCQxKHByb3BzLCBrZXksIHZhbHVlLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgaWYgKCFpc1Jvb3QgJiYgIWlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgXCJBdm9pZCBtdXRhdGluZyBhIHByb3AgZGlyZWN0bHkgc2luY2UgdGhlIHZhbHVlIHdpbGwgYmUgXCIgK1xuICAgICAgICAgICAgICBcIm92ZXJ3cml0dGVuIHdoZW5ldmVyIHRoZSBwYXJlbnQgY29tcG9uZW50IHJlLXJlbmRlcnMuIFwiICtcbiAgICAgICAgICAgICAgXCJJbnN0ZWFkLCB1c2UgYSBkYXRhIG9yIGNvbXB1dGVkIHByb3BlcnR5IGJhc2VkIG9uIHRoZSBwcm9wJ3MgXCIgK1xuICAgICAgICAgICAgICBcInZhbHVlLiBQcm9wIGJlaW5nIG11dGF0ZWQ6IFxcXCJcIiArIGtleSArIFwiXFxcIlwiLFxuICAgICAgICAgICAgICB2bVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgfVxuICAgICAgLy8gc3RhdGljIHByb3BzIGFyZSBhbHJlYWR5IHByb3hpZWQgb24gdGhlIGNvbXBvbmVudCdzIHByb3RvdHlwZVxuICAgICAgLy8gZHVyaW5nIFZ1ZS5leHRlbmQoKS4gV2Ugb25seSBuZWVkIHRvIHByb3h5IHByb3BzIGRlZmluZWQgYXRcbiAgICAgIC8vIGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgICAgcHJveHkodm0sIFwiX3Byb3BzXCIsIGtleSk7XG4gICAgICB9XG4gICAgfTtcblxuICAgIGZvciAodmFyIGtleSBpbiBwcm9wc09wdGlvbnMpIGxvb3AoIGtleSApO1xuICAgIHRvZ2dsZU9ic2VydmluZyh0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXREYXRhICh2bSkge1xuICAgIHZhciBkYXRhID0gdm0uJG9wdGlvbnMuZGF0YTtcbiAgICBkYXRhID0gdm0uX2RhdGEgPSB0eXBlb2YgZGF0YSA9PT0gJ2Z1bmN0aW9uJ1xuICAgICAgPyBnZXREYXRhKGRhdGEsIHZtKVxuICAgICAgOiBkYXRhIHx8IHt9O1xuICAgIGlmICghaXNQbGFpbk9iamVjdChkYXRhKSkge1xuICAgICAgZGF0YSA9IHt9O1xuICAgICAgd2FybihcbiAgICAgICAgJ2RhdGEgZnVuY3Rpb25zIHNob3VsZCByZXR1cm4gYW4gb2JqZWN0OlxcbicgK1xuICAgICAgICAnaHR0cHM6Ly92dWVqcy5vcmcvdjIvZ3VpZGUvY29tcG9uZW50cy5odG1sI2RhdGEtTXVzdC1CZS1hLUZ1bmN0aW9uJyxcbiAgICAgICAgdm1cbiAgICAgICk7XG4gICAgfVxuICAgIC8vIHByb3h5IGRhdGEgb24gaW5zdGFuY2VcbiAgICB2YXIga2V5cyA9IE9iamVjdC5rZXlzKGRhdGEpO1xuICAgIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICAgIHZhciBtZXRob2RzID0gdm0uJG9wdGlvbnMubWV0aG9kcztcbiAgICB2YXIgaSA9IGtleXMubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIHZhciBrZXkgPSBrZXlzW2ldO1xuICAgICAge1xuICAgICAgICBpZiAobWV0aG9kcyAmJiBoYXNPd24obWV0aG9kcywga2V5KSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIGRhdGEgcHJvcGVydHkuXCIpLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAocHJvcHMgJiYgaGFzT3duKHByb3BzLCBrZXkpKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJUaGUgZGF0YSBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWNsYXJlZCBhcyBhIHByb3AuIFwiICtcbiAgICAgICAgICBcIlVzZSBwcm9wIGRlZmF1bHQgdmFsdWUgaW5zdGVhZC5cIixcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfSBlbHNlIGlmICghaXNSZXNlcnZlZChrZXkpKSB7XG4gICAgICAgIHByb3h5KHZtLCBcIl9kYXRhXCIsIGtleSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vIG9ic2VydmUgZGF0YVxuICAgIG9ic2VydmUoZGF0YSwgdHJ1ZSAvKiBhc1Jvb3REYXRhICovKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldERhdGEgKGRhdGEsIHZtKSB7XG4gICAgLy8gIzc1NzMgZGlzYWJsZSBkZXAgY29sbGVjdGlvbiB3aGVuIGludm9raW5nIGRhdGEgZ2V0dGVyc1xuICAgIHB1c2hUYXJnZXQoKTtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIGRhdGEuY2FsbCh2bSwgdm0pXG4gICAgfSBjYXRjaCAoZSkge1xuICAgICAgaGFuZGxlRXJyb3IoZSwgdm0sIFwiZGF0YSgpXCIpO1xuICAgICAgcmV0dXJuIHt9XG4gICAgfSBmaW5hbGx5IHtcbiAgICAgIHBvcFRhcmdldCgpO1xuICAgIH1cbiAgfVxuXG4gIHZhciBjb21wdXRlZFdhdGNoZXJPcHRpb25zID0geyBsYXp5OiB0cnVlIH07XG5cbiAgZnVuY3Rpb24gaW5pdENvbXB1dGVkICh2bSwgY29tcHV0ZWQpIHtcbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICB2YXIgd2F0Y2hlcnMgPSB2bS5fY29tcHV0ZWRXYXRjaGVycyA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgLy8gY29tcHV0ZWQgcHJvcGVydGllcyBhcmUganVzdCBnZXR0ZXJzIGR1cmluZyBTU1JcbiAgICB2YXIgaXNTU1IgPSBpc1NlcnZlclJlbmRlcmluZygpO1xuXG4gICAgZm9yICh2YXIga2V5IGluIGNvbXB1dGVkKSB7XG4gICAgICB2YXIgdXNlckRlZiA9IGNvbXB1dGVkW2tleV07XG4gICAgICB2YXIgZ2V0dGVyID0gdHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicgPyB1c2VyRGVmIDogdXNlckRlZi5nZXQ7XG4gICAgICBpZiAoZ2V0dGVyID09IG51bGwpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAoXCJHZXR0ZXIgaXMgbWlzc2luZyBmb3IgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiLlwiKSxcbiAgICAgICAgICB2bVxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICBpZiAoIWlzU1NSKSB7XG4gICAgICAgIC8vIGNyZWF0ZSBpbnRlcm5hbCB3YXRjaGVyIGZvciB0aGUgY29tcHV0ZWQgcHJvcGVydHkuXG4gICAgICAgIHdhdGNoZXJzW2tleV0gPSBuZXcgV2F0Y2hlcihcbiAgICAgICAgICB2bSxcbiAgICAgICAgICBnZXR0ZXIgfHwgbm9vcCxcbiAgICAgICAgICBub29wLFxuICAgICAgICAgIGNvbXB1dGVkV2F0Y2hlck9wdGlvbnNcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgLy8gY29tcG9uZW50LWRlZmluZWQgY29tcHV0ZWQgcHJvcGVydGllcyBhcmUgYWxyZWFkeSBkZWZpbmVkIG9uIHRoZVxuICAgICAgLy8gY29tcG9uZW50IHByb3RvdHlwZS4gV2Ugb25seSBuZWVkIHRvIGRlZmluZSBjb21wdXRlZCBwcm9wZXJ0aWVzIGRlZmluZWRcbiAgICAgIC8vIGF0IGluc3RhbnRpYXRpb24gaGVyZS5cbiAgICAgIGlmICghKGtleSBpbiB2bSkpIHtcbiAgICAgICAgZGVmaW5lQ29tcHV0ZWQodm0sIGtleSwgdXNlckRlZik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBpZiAoa2V5IGluIHZtLiRkYXRhKSB7XG4gICAgICAgICAgd2FybigoXCJUaGUgY29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIGlzIGFscmVhZHkgZGVmaW5lZCBpbiBkYXRhLlwiKSwgdm0pO1xuICAgICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLnByb3BzICYmIGtleSBpbiB2bS4kb3B0aW9ucy5wcm9wcykge1xuICAgICAgICAgIHdhcm4oKFwiVGhlIGNvbXB1dGVkIHByb3BlcnR5IFxcXCJcIiArIGtleSArIFwiXFxcIiBpcyBhbHJlYWR5IGRlZmluZWQgYXMgYSBwcm9wLlwiKSwgdm0pO1xuICAgICAgICB9IGVsc2UgaWYgKHZtLiRvcHRpb25zLm1ldGhvZHMgJiYga2V5IGluIHZtLiRvcHRpb25zLm1ldGhvZHMpIHtcbiAgICAgICAgICB3YXJuKChcIlRoZSBjb21wdXRlZCBwcm9wZXJ0eSBcXFwiXCIgKyBrZXkgKyBcIlxcXCIgaXMgYWxyZWFkeSBkZWZpbmVkIGFzIGEgbWV0aG9kLlwiKSwgdm0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZGVmaW5lQ29tcHV0ZWQgKFxuICAgIHRhcmdldCxcbiAgICBrZXksXG4gICAgdXNlckRlZlxuICApIHtcbiAgICB2YXIgc2hvdWxkQ2FjaGUgPSAhaXNTZXJ2ZXJSZW5kZXJpbmcoKTtcbiAgICBpZiAodHlwZW9mIHVzZXJEZWYgPT09ICdmdW5jdGlvbicpIHtcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSBzaG91bGRDYWNoZVxuICAgICAgICA/IGNyZWF0ZUNvbXB1dGVkR2V0dGVyKGtleSlcbiAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYpO1xuICAgICAgc2hhcmVkUHJvcGVydHlEZWZpbml0aW9uLnNldCA9IG5vb3A7XG4gICAgfSBlbHNlIHtcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5nZXQgPSB1c2VyRGVmLmdldFxuICAgICAgICA/IHNob3VsZENhY2hlICYmIHVzZXJEZWYuY2FjaGUgIT09IGZhbHNlXG4gICAgICAgICAgPyBjcmVhdGVDb21wdXRlZEdldHRlcihrZXkpXG4gICAgICAgICAgOiBjcmVhdGVHZXR0ZXJJbnZva2VyKHVzZXJEZWYuZ2V0KVxuICAgICAgICA6IG5vb3A7XG4gICAgICBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24uc2V0ID0gdXNlckRlZi5zZXQgfHwgbm9vcDtcbiAgICB9XG4gICAgaWYgKHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPT09IG5vb3ApIHtcbiAgICAgIHNoYXJlZFByb3BlcnR5RGVmaW5pdGlvbi5zZXQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgKFwiQ29tcHV0ZWQgcHJvcGVydHkgXFxcIlwiICsga2V5ICsgXCJcXFwiIHdhcyBhc3NpZ25lZCB0byBidXQgaXQgaGFzIG5vIHNldHRlci5cIiksXG4gICAgICAgICAgdGhpc1xuICAgICAgICApO1xuICAgICAgfTtcbiAgICB9XG4gICAgT2JqZWN0LmRlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzaGFyZWRQcm9wZXJ0eURlZmluaXRpb24pO1xuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcHV0ZWRHZXR0ZXIgKGtleSkge1xuICAgIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgICB2YXIgd2F0Y2hlciA9IHRoaXMuX2NvbXB1dGVkV2F0Y2hlcnMgJiYgdGhpcy5fY29tcHV0ZWRXYXRjaGVyc1trZXldO1xuICAgICAgaWYgKHdhdGNoZXIpIHtcbiAgICAgICAgaWYgKHdhdGNoZXIuZGlydHkpIHtcbiAgICAgICAgICB3YXRjaGVyLmV2YWx1YXRlKCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKERlcC50YXJnZXQpIHtcbiAgICAgICAgICB3YXRjaGVyLmRlcGVuZCgpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiB3YXRjaGVyLnZhbHVlXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlR2V0dGVySW52b2tlcihmbikge1xuICAgIHJldHVybiBmdW5jdGlvbiBjb21wdXRlZEdldHRlciAoKSB7XG4gICAgICByZXR1cm4gZm4uY2FsbCh0aGlzLCB0aGlzKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGluaXRNZXRob2RzICh2bSwgbWV0aG9kcykge1xuICAgIHZhciBwcm9wcyA9IHZtLiRvcHRpb25zLnByb3BzO1xuICAgIGZvciAodmFyIGtleSBpbiBtZXRob2RzKSB7XG4gICAgICB7XG4gICAgICAgIGlmICh0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwiTWV0aG9kIFxcXCJcIiArIGtleSArIFwiXFxcIiBoYXMgdHlwZSBcXFwiXCIgKyAodHlwZW9mIG1ldGhvZHNba2V5XSkgKyBcIlxcXCIgaW4gdGhlIGNvbXBvbmVudCBkZWZpbml0aW9uLiBcIiArXG4gICAgICAgICAgICBcIkRpZCB5b3UgcmVmZXJlbmNlIHRoZSBmdW5jdGlvbiBjb3JyZWN0bHk/XCIsXG4gICAgICAgICAgICB2bVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHByb3BzICYmIGhhc093bihwcm9wcywga2V5KSkge1xuICAgICAgICAgIHdhcm4oXG4gICAgICAgICAgICAoXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGhhcyBhbHJlYWR5IGJlZW4gZGVmaW5lZCBhcyBhIHByb3AuXCIpLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmICgoa2V5IGluIHZtKSAmJiBpc1Jlc2VydmVkKGtleSkpIHtcbiAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgXCJNZXRob2QgXFxcIlwiICsga2V5ICsgXCJcXFwiIGNvbmZsaWN0cyB3aXRoIGFuIGV4aXN0aW5nIFZ1ZSBpbnN0YW5jZSBtZXRob2QuIFwiICtcbiAgICAgICAgICAgIFwiQXZvaWQgZGVmaW5pbmcgY29tcG9uZW50IG1ldGhvZHMgdGhhdCBzdGFydCB3aXRoIF8gb3IgJC5cIlxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHZtW2tleV0gPSB0eXBlb2YgbWV0aG9kc1trZXldICE9PSAnZnVuY3Rpb24nID8gbm9vcCA6IGJpbmQobWV0aG9kc1trZXldLCB2bSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFdhdGNoICh2bSwgd2F0Y2gpIHtcbiAgICBmb3IgKHZhciBrZXkgaW4gd2F0Y2gpIHtcbiAgICAgIHZhciBoYW5kbGVyID0gd2F0Y2hba2V5XTtcbiAgICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXIpKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgaGFuZGxlci5sZW5ndGg7IGkrKykge1xuICAgICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcltpXSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNyZWF0ZVdhdGNoZXIodm0sIGtleSwgaGFuZGxlcik7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlV2F0Y2hlciAoXG4gICAgdm0sXG4gICAgZXhwT3JGbixcbiAgICBoYW5kbGVyLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgaWYgKGlzUGxhaW5PYmplY3QoaGFuZGxlcikpIHtcbiAgICAgIG9wdGlvbnMgPSBoYW5kbGVyO1xuICAgICAgaGFuZGxlciA9IGhhbmRsZXIuaGFuZGxlcjtcbiAgICB9XG4gICAgaWYgKHR5cGVvZiBoYW5kbGVyID09PSAnc3RyaW5nJykge1xuICAgICAgaGFuZGxlciA9IHZtW2hhbmRsZXJdO1xuICAgIH1cbiAgICByZXR1cm4gdm0uJHdhdGNoKGV4cE9yRm4sIGhhbmRsZXIsIG9wdGlvbnMpXG4gIH1cblxuICBmdW5jdGlvbiBzdGF0ZU1peGluIChWdWUpIHtcbiAgICAvLyBmbG93IHNvbWVob3cgaGFzIHByb2JsZW1zIHdpdGggZGlyZWN0bHkgZGVjbGFyZWQgZGVmaW5pdGlvbiBvYmplY3RcbiAgICAvLyB3aGVuIHVzaW5nIE9iamVjdC5kZWZpbmVQcm9wZXJ0eSwgc28gd2UgaGF2ZSB0byBwcm9jZWR1cmFsbHkgYnVpbGQgdXBcbiAgICAvLyB0aGUgb2JqZWN0IGhlcmUuXG4gICAgdmFyIGRhdGFEZWYgPSB7fTtcbiAgICBkYXRhRGVmLmdldCA9IGZ1bmN0aW9uICgpIHsgcmV0dXJuIHRoaXMuX2RhdGEgfTtcbiAgICB2YXIgcHJvcHNEZWYgPSB7fTtcbiAgICBwcm9wc0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiB0aGlzLl9wcm9wcyB9O1xuICAgIHtcbiAgICAgIGRhdGFEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICdBdm9pZCByZXBsYWNpbmcgaW5zdGFuY2Ugcm9vdCAkZGF0YS4gJyArXG4gICAgICAgICAgJ1VzZSBuZXN0ZWQgZGF0YSBwcm9wZXJ0aWVzIGluc3RlYWQuJyxcbiAgICAgICAgICB0aGlzXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgICAgcHJvcHNEZWYuc2V0ID0gZnVuY3Rpb24gKCkge1xuICAgICAgICB3YXJuKFwiJHByb3BzIGlzIHJlYWRvbmx5LlwiLCB0aGlzKTtcbiAgICAgIH07XG4gICAgfVxuICAgIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUucHJvdG90eXBlLCAnJGRhdGEnLCBkYXRhRGVmKTtcbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRwcm9wcycsIHByb3BzRGVmKTtcblxuICAgIFZ1ZS5wcm90b3R5cGUuJHNldCA9IHNldDtcbiAgICBWdWUucHJvdG90eXBlLiRkZWxldGUgPSBkZWw7XG5cbiAgICBWdWUucHJvdG90eXBlLiR3YXRjaCA9IGZ1bmN0aW9uIChcbiAgICAgIGV4cE9yRm4sXG4gICAgICBjYixcbiAgICAgIG9wdGlvbnNcbiAgICApIHtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICBpZiAoaXNQbGFpbk9iamVjdChjYikpIHtcbiAgICAgICAgcmV0dXJuIGNyZWF0ZVdhdGNoZXIodm0sIGV4cE9yRm4sIGNiLCBvcHRpb25zKVxuICAgICAgfVxuICAgICAgb3B0aW9ucyA9IG9wdGlvbnMgfHwge307XG4gICAgICBvcHRpb25zLnVzZXIgPSB0cnVlO1xuICAgICAgdmFyIHdhdGNoZXIgPSBuZXcgV2F0Y2hlcih2bSwgZXhwT3JGbiwgY2IsIG9wdGlvbnMpO1xuICAgICAgaWYgKG9wdGlvbnMuaW1tZWRpYXRlKSB7XG4gICAgICAgIHZhciBpbmZvID0gXCJjYWxsYmFjayBmb3IgaW1tZWRpYXRlIHdhdGNoZXIgXFxcIlwiICsgKHdhdGNoZXIuZXhwcmVzc2lvbikgKyBcIlxcXCJcIjtcbiAgICAgICAgcHVzaFRhcmdldCgpO1xuICAgICAgICBpbnZva2VXaXRoRXJyb3JIYW5kbGluZyhjYiwgdm0sIFt3YXRjaGVyLnZhbHVlXSwgdm0sIGluZm8pO1xuICAgICAgICBwb3BUYXJnZXQoKTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBmdW5jdGlvbiB1bndhdGNoRm4gKCkge1xuICAgICAgICB3YXRjaGVyLnRlYXJkb3duKCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuXG4gIC8qICAqL1xuXG4gIHZhciB1aWQkMyA9IDA7XG5cbiAgZnVuY3Rpb24gaW5pdE1peGluIChWdWUpIHtcbiAgICBWdWUucHJvdG90eXBlLl9pbml0ID0gZnVuY3Rpb24gKG9wdGlvbnMpIHtcbiAgICAgIHZhciB2bSA9IHRoaXM7XG4gICAgICAvLyBhIHVpZFxuICAgICAgdm0uX3VpZCA9IHVpZCQzKys7XG5cbiAgICAgIHZhciBzdGFydFRhZywgZW5kVGFnO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgICAgc3RhcnRUYWcgPSBcInZ1ZS1wZXJmLXN0YXJ0OlwiICsgKHZtLl91aWQpO1xuICAgICAgICBlbmRUYWcgPSBcInZ1ZS1wZXJmLWVuZDpcIiArICh2bS5fdWlkKTtcbiAgICAgICAgbWFyayhzdGFydFRhZyk7XG4gICAgICB9XG5cbiAgICAgIC8vIGEgZmxhZyB0byBhdm9pZCB0aGlzIGJlaW5nIG9ic2VydmVkXG4gICAgICB2bS5faXNWdWUgPSB0cnVlO1xuICAgICAgLy8gbWVyZ2Ugb3B0aW9uc1xuICAgICAgaWYgKG9wdGlvbnMgJiYgb3B0aW9ucy5faXNDb21wb25lbnQpIHtcbiAgICAgICAgLy8gb3B0aW1pemUgaW50ZXJuYWwgY29tcG9uZW50IGluc3RhbnRpYXRpb25cbiAgICAgICAgLy8gc2luY2UgZHluYW1pYyBvcHRpb25zIG1lcmdpbmcgaXMgcHJldHR5IHNsb3csIGFuZCBub25lIG9mIHRoZVxuICAgICAgICAvLyBpbnRlcm5hbCBjb21wb25lbnQgb3B0aW9ucyBuZWVkcyBzcGVjaWFsIHRyZWF0bWVudC5cbiAgICAgICAgaW5pdEludGVybmFsQ29tcG9uZW50KHZtLCBvcHRpb25zKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHZtLiRvcHRpb25zID0gbWVyZ2VPcHRpb25zKFxuICAgICAgICAgIHJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnModm0uY29uc3RydWN0b3IpLFxuICAgICAgICAgIG9wdGlvbnMgfHwge30sXG4gICAgICAgICAgdm1cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgICB7XG4gICAgICAgIGluaXRQcm94eSh2bSk7XG4gICAgICB9XG4gICAgICAvLyBleHBvc2UgcmVhbCBzZWxmXG4gICAgICB2bS5fc2VsZiA9IHZtO1xuICAgICAgaW5pdExpZmVjeWNsZSh2bSk7XG4gICAgICBpbml0RXZlbnRzKHZtKTtcbiAgICAgIGluaXRSZW5kZXIodm0pO1xuICAgICAgY2FsbEhvb2sodm0sICdiZWZvcmVDcmVhdGUnKTtcbiAgICAgIGluaXRJbmplY3Rpb25zKHZtKTsgLy8gcmVzb2x2ZSBpbmplY3Rpb25zIGJlZm9yZSBkYXRhL3Byb3BzXG4gICAgICBpbml0U3RhdGUodm0pO1xuICAgICAgaW5pdFByb3ZpZGUodm0pOyAvLyByZXNvbHZlIHByb3ZpZGUgYWZ0ZXIgZGF0YS9wcm9wc1xuICAgICAgY2FsbEhvb2sodm0sICdjcmVhdGVkJyk7XG5cbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGNvbmZpZy5wZXJmb3JtYW5jZSAmJiBtYXJrKSB7XG4gICAgICAgIHZtLl9uYW1lID0gZm9ybWF0Q29tcG9uZW50TmFtZSh2bSwgZmFsc2UpO1xuICAgICAgICBtYXJrKGVuZFRhZyk7XG4gICAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHZtLl9uYW1lKSArIFwiIGluaXRcIiksIHN0YXJ0VGFnLCBlbmRUYWcpO1xuICAgICAgfVxuXG4gICAgICBpZiAodm0uJG9wdGlvbnMuZWwpIHtcbiAgICAgICAgdm0uJG1vdW50KHZtLiRvcHRpb25zLmVsKTtcbiAgICAgIH1cbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdEludGVybmFsQ29tcG9uZW50ICh2bSwgb3B0aW9ucykge1xuICAgIHZhciBvcHRzID0gdm0uJG9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKHZtLmNvbnN0cnVjdG9yLm9wdGlvbnMpO1xuICAgIC8vIGRvaW5nIHRoaXMgYmVjYXVzZSBpdCdzIGZhc3RlciB0aGFuIGR5bmFtaWMgZW51bWVyYXRpb24uXG4gICAgdmFyIHBhcmVudFZub2RlID0gb3B0aW9ucy5fcGFyZW50Vm5vZGU7XG4gICAgb3B0cy5wYXJlbnQgPSBvcHRpb25zLnBhcmVudDtcbiAgICBvcHRzLl9wYXJlbnRWbm9kZSA9IHBhcmVudFZub2RlO1xuXG4gICAgdmFyIHZub2RlQ29tcG9uZW50T3B0aW9ucyA9IHBhcmVudFZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgb3B0cy5wcm9wc0RhdGEgPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhO1xuICAgIG9wdHMuX3BhcmVudExpc3RlbmVycyA9IHZub2RlQ29tcG9uZW50T3B0aW9ucy5saXN0ZW5lcnM7XG4gICAgb3B0cy5fcmVuZGVyQ2hpbGRyZW4gPSB2bm9kZUNvbXBvbmVudE9wdGlvbnMuY2hpbGRyZW47XG4gICAgb3B0cy5fY29tcG9uZW50VGFnID0gdm5vZGVDb21wb25lbnRPcHRpb25zLnRhZztcblxuICAgIGlmIChvcHRpb25zLnJlbmRlcikge1xuICAgICAgb3B0cy5yZW5kZXIgPSBvcHRpb25zLnJlbmRlcjtcbiAgICAgIG9wdHMuc3RhdGljUmVuZGVyRm5zID0gb3B0aW9ucy5zdGF0aWNSZW5kZXJGbnM7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyAoQ3Rvcikge1xuICAgIHZhciBvcHRpb25zID0gQ3Rvci5vcHRpb25zO1xuICAgIGlmIChDdG9yLnN1cGVyKSB7XG4gICAgICB2YXIgc3VwZXJPcHRpb25zID0gcmVzb2x2ZUNvbnN0cnVjdG9yT3B0aW9ucyhDdG9yLnN1cGVyKTtcbiAgICAgIHZhciBjYWNoZWRTdXBlck9wdGlvbnMgPSBDdG9yLnN1cGVyT3B0aW9ucztcbiAgICAgIGlmIChzdXBlck9wdGlvbnMgIT09IGNhY2hlZFN1cGVyT3B0aW9ucykge1xuICAgICAgICAvLyBzdXBlciBvcHRpb24gY2hhbmdlZCxcbiAgICAgICAgLy8gbmVlZCB0byByZXNvbHZlIG5ldyBvcHRpb25zLlxuICAgICAgICBDdG9yLnN1cGVyT3B0aW9ucyA9IHN1cGVyT3B0aW9ucztcbiAgICAgICAgLy8gY2hlY2sgaWYgdGhlcmUgYXJlIGFueSBsYXRlLW1vZGlmaWVkL2F0dGFjaGVkIG9wdGlvbnMgKCM0OTc2KVxuICAgICAgICB2YXIgbW9kaWZpZWRPcHRpb25zID0gcmVzb2x2ZU1vZGlmaWVkT3B0aW9ucyhDdG9yKTtcbiAgICAgICAgLy8gdXBkYXRlIGJhc2UgZXh0ZW5kIG9wdGlvbnNcbiAgICAgICAgaWYgKG1vZGlmaWVkT3B0aW9ucykge1xuICAgICAgICAgIGV4dGVuZChDdG9yLmV4dGVuZE9wdGlvbnMsIG1vZGlmaWVkT3B0aW9ucyk7XG4gICAgICAgIH1cbiAgICAgICAgb3B0aW9ucyA9IEN0b3Iub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhzdXBlck9wdGlvbnMsIEN0b3IuZXh0ZW5kT3B0aW9ucyk7XG4gICAgICAgIGlmIChvcHRpb25zLm5hbWUpIHtcbiAgICAgICAgICBvcHRpb25zLmNvbXBvbmVudHNbb3B0aW9ucy5uYW1lXSA9IEN0b3I7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG9wdGlvbnNcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlc29sdmVNb2RpZmllZE9wdGlvbnMgKEN0b3IpIHtcbiAgICB2YXIgbW9kaWZpZWQ7XG4gICAgdmFyIGxhdGVzdCA9IEN0b3Iub3B0aW9ucztcbiAgICB2YXIgc2VhbGVkID0gQ3Rvci5zZWFsZWRPcHRpb25zO1xuICAgIGZvciAodmFyIGtleSBpbiBsYXRlc3QpIHtcbiAgICAgIGlmIChsYXRlc3Rba2V5XSAhPT0gc2VhbGVkW2tleV0pIHtcbiAgICAgICAgaWYgKCFtb2RpZmllZCkgeyBtb2RpZmllZCA9IHt9OyB9XG4gICAgICAgIG1vZGlmaWVkW2tleV0gPSBsYXRlc3Rba2V5XTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIG1vZGlmaWVkXG4gIH1cblxuICBmdW5jdGlvbiBWdWUgKG9wdGlvbnMpIHtcbiAgICBpZiAoISh0aGlzIGluc3RhbmNlb2YgVnVlKVxuICAgICkge1xuICAgICAgd2FybignVnVlIGlzIGEgY29uc3RydWN0b3IgYW5kIHNob3VsZCBiZSBjYWxsZWQgd2l0aCB0aGUgYG5ld2Aga2V5d29yZCcpO1xuICAgIH1cbiAgICB0aGlzLl9pbml0KG9wdGlvbnMpO1xuICB9XG5cbiAgaW5pdE1peGluKFZ1ZSk7XG4gIHN0YXRlTWl4aW4oVnVlKTtcbiAgZXZlbnRzTWl4aW4oVnVlKTtcbiAgbGlmZWN5Y2xlTWl4aW4oVnVlKTtcbiAgcmVuZGVyTWl4aW4oVnVlKTtcblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBpbml0VXNlIChWdWUpIHtcbiAgICBWdWUudXNlID0gZnVuY3Rpb24gKHBsdWdpbikge1xuICAgICAgdmFyIGluc3RhbGxlZFBsdWdpbnMgPSAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyB8fCAodGhpcy5faW5zdGFsbGVkUGx1Z2lucyA9IFtdKSk7XG4gICAgICBpZiAoaW5zdGFsbGVkUGx1Z2lucy5pbmRleE9mKHBsdWdpbikgPiAtMSkge1xuICAgICAgICByZXR1cm4gdGhpc1xuICAgICAgfVxuXG4gICAgICAvLyBhZGRpdGlvbmFsIHBhcmFtZXRlcnNcbiAgICAgIHZhciBhcmdzID0gdG9BcnJheShhcmd1bWVudHMsIDEpO1xuICAgICAgYXJncy51bnNoaWZ0KHRoaXMpO1xuICAgICAgaWYgKHR5cGVvZiBwbHVnaW4uaW5zdGFsbCA9PT0gJ2Z1bmN0aW9uJykge1xuICAgICAgICBwbHVnaW4uaW5zdGFsbC5hcHBseShwbHVnaW4sIGFyZ3MpO1xuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgcGx1Z2luID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIHBsdWdpbi5hcHBseShudWxsLCBhcmdzKTtcbiAgICAgIH1cbiAgICAgIGluc3RhbGxlZFBsdWdpbnMucHVzaChwbHVnaW4pO1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9O1xuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gaW5pdE1peGluJDEgKFZ1ZSkge1xuICAgIFZ1ZS5taXhpbiA9IGZ1bmN0aW9uIChtaXhpbikge1xuICAgICAgdGhpcy5vcHRpb25zID0gbWVyZ2VPcHRpb25zKHRoaXMub3B0aW9ucywgbWl4aW4pO1xuICAgICAgcmV0dXJuIHRoaXNcbiAgICB9O1xuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gaW5pdEV4dGVuZCAoVnVlKSB7XG4gICAgLyoqXG4gICAgICogRWFjaCBpbnN0YW5jZSBjb25zdHJ1Y3RvciwgaW5jbHVkaW5nIFZ1ZSwgaGFzIGEgdW5pcXVlXG4gICAgICogY2lkLiBUaGlzIGVuYWJsZXMgdXMgdG8gY3JlYXRlIHdyYXBwZWQgXCJjaGlsZFxuICAgICAqIGNvbnN0cnVjdG9yc1wiIGZvciBwcm90b3R5cGFsIGluaGVyaXRhbmNlIGFuZCBjYWNoZSB0aGVtLlxuICAgICAqL1xuICAgIFZ1ZS5jaWQgPSAwO1xuICAgIHZhciBjaWQgPSAxO1xuXG4gICAgLyoqXG4gICAgICogQ2xhc3MgaW5oZXJpdGFuY2VcbiAgICAgKi9cbiAgICBWdWUuZXh0ZW5kID0gZnVuY3Rpb24gKGV4dGVuZE9wdGlvbnMpIHtcbiAgICAgIGV4dGVuZE9wdGlvbnMgPSBleHRlbmRPcHRpb25zIHx8IHt9O1xuICAgICAgdmFyIFN1cGVyID0gdGhpcztcbiAgICAgIHZhciBTdXBlcklkID0gU3VwZXIuY2lkO1xuICAgICAgdmFyIGNhY2hlZEN0b3JzID0gZXh0ZW5kT3B0aW9ucy5fQ3RvciB8fCAoZXh0ZW5kT3B0aW9ucy5fQ3RvciA9IHt9KTtcbiAgICAgIGlmIChjYWNoZWRDdG9yc1tTdXBlcklkXSkge1xuICAgICAgICByZXR1cm4gY2FjaGVkQ3RvcnNbU3VwZXJJZF1cbiAgICAgIH1cblxuICAgICAgdmFyIG5hbWUgPSBleHRlbmRPcHRpb25zLm5hbWUgfHwgU3VwZXIub3B0aW9ucy5uYW1lO1xuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKG5hbWUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgU3ViID0gZnVuY3Rpb24gVnVlQ29tcG9uZW50IChvcHRpb25zKSB7XG4gICAgICAgIHRoaXMuX2luaXQob3B0aW9ucyk7XG4gICAgICB9O1xuICAgICAgU3ViLnByb3RvdHlwZSA9IE9iamVjdC5jcmVhdGUoU3VwZXIucHJvdG90eXBlKTtcbiAgICAgIFN1Yi5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBTdWI7XG4gICAgICBTdWIuY2lkID0gY2lkKys7XG4gICAgICBTdWIub3B0aW9ucyA9IG1lcmdlT3B0aW9ucyhcbiAgICAgICAgU3VwZXIub3B0aW9ucyxcbiAgICAgICAgZXh0ZW5kT3B0aW9uc1xuICAgICAgKTtcbiAgICAgIFN1Ylsnc3VwZXInXSA9IFN1cGVyO1xuXG4gICAgICAvLyBGb3IgcHJvcHMgYW5kIGNvbXB1dGVkIHByb3BlcnRpZXMsIHdlIGRlZmluZSB0aGUgcHJveHkgZ2V0dGVycyBvblxuICAgICAgLy8gdGhlIFZ1ZSBpbnN0YW5jZXMgYXQgZXh0ZW5zaW9uIHRpbWUsIG9uIHRoZSBleHRlbmRlZCBwcm90b3R5cGUuIFRoaXNcbiAgICAgIC8vIGF2b2lkcyBPYmplY3QuZGVmaW5lUHJvcGVydHkgY2FsbHMgZm9yIGVhY2ggaW5zdGFuY2UgY3JlYXRlZC5cbiAgICAgIGlmIChTdWIub3B0aW9ucy5wcm9wcykge1xuICAgICAgICBpbml0UHJvcHMkMShTdWIpO1xuICAgICAgfVxuICAgICAgaWYgKFN1Yi5vcHRpb25zLmNvbXB1dGVkKSB7XG4gICAgICAgIGluaXRDb21wdXRlZCQxKFN1Yik7XG4gICAgICB9XG5cbiAgICAgIC8vIGFsbG93IGZ1cnRoZXIgZXh0ZW5zaW9uL21peGluL3BsdWdpbiB1c2FnZVxuICAgICAgU3ViLmV4dGVuZCA9IFN1cGVyLmV4dGVuZDtcbiAgICAgIFN1Yi5taXhpbiA9IFN1cGVyLm1peGluO1xuICAgICAgU3ViLnVzZSA9IFN1cGVyLnVzZTtcblxuICAgICAgLy8gY3JlYXRlIGFzc2V0IHJlZ2lzdGVycywgc28gZXh0ZW5kZWQgY2xhc3Nlc1xuICAgICAgLy8gY2FuIGhhdmUgdGhlaXIgcHJpdmF0ZSBhc3NldHMgdG9vLlxuICAgICAgQVNTRVRfVFlQRVMuZm9yRWFjaChmdW5jdGlvbiAodHlwZSkge1xuICAgICAgICBTdWJbdHlwZV0gPSBTdXBlclt0eXBlXTtcbiAgICAgIH0pO1xuICAgICAgLy8gZW5hYmxlIHJlY3Vyc2l2ZSBzZWxmLWxvb2t1cFxuICAgICAgaWYgKG5hbWUpIHtcbiAgICAgICAgU3ViLm9wdGlvbnMuY29tcG9uZW50c1tuYW1lXSA9IFN1YjtcbiAgICAgIH1cblxuICAgICAgLy8ga2VlcCBhIHJlZmVyZW5jZSB0byB0aGUgc3VwZXIgb3B0aW9ucyBhdCBleHRlbnNpb24gdGltZS5cbiAgICAgIC8vIGxhdGVyIGF0IGluc3RhbnRpYXRpb24gd2UgY2FuIGNoZWNrIGlmIFN1cGVyJ3Mgb3B0aW9ucyBoYXZlXG4gICAgICAvLyBiZWVuIHVwZGF0ZWQuXG4gICAgICBTdWIuc3VwZXJPcHRpb25zID0gU3VwZXIub3B0aW9ucztcbiAgICAgIFN1Yi5leHRlbmRPcHRpb25zID0gZXh0ZW5kT3B0aW9ucztcbiAgICAgIFN1Yi5zZWFsZWRPcHRpb25zID0gZXh0ZW5kKHt9LCBTdWIub3B0aW9ucyk7XG5cbiAgICAgIC8vIGNhY2hlIGNvbnN0cnVjdG9yXG4gICAgICBjYWNoZWRDdG9yc1tTdXBlcklkXSA9IFN1YjtcbiAgICAgIHJldHVybiBTdWJcbiAgICB9O1xuICB9XG5cbiAgZnVuY3Rpb24gaW5pdFByb3BzJDEgKENvbXApIHtcbiAgICB2YXIgcHJvcHMgPSBDb21wLm9wdGlvbnMucHJvcHM7XG4gICAgZm9yICh2YXIga2V5IGluIHByb3BzKSB7XG4gICAgICBwcm94eShDb21wLnByb3RvdHlwZSwgXCJfcHJvcHNcIiwga2V5KTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpbml0Q29tcHV0ZWQkMSAoQ29tcCkge1xuICAgIHZhciBjb21wdXRlZCA9IENvbXAub3B0aW9ucy5jb21wdXRlZDtcbiAgICBmb3IgKHZhciBrZXkgaW4gY29tcHV0ZWQpIHtcbiAgICAgIGRlZmluZUNvbXB1dGVkKENvbXAucHJvdG90eXBlLCBrZXksIGNvbXB1dGVkW2tleV0pO1xuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGluaXRBc3NldFJlZ2lzdGVycyAoVnVlKSB7XG4gICAgLyoqXG4gICAgICogQ3JlYXRlIGFzc2V0IHJlZ2lzdHJhdGlvbiBtZXRob2RzLlxuICAgICAqL1xuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFZ1ZVt0eXBlXSA9IGZ1bmN0aW9uIChcbiAgICAgICAgaWQsXG4gICAgICAgIGRlZmluaXRpb25cbiAgICAgICkge1xuICAgICAgICBpZiAoIWRlZmluaXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5vcHRpb25zW3R5cGUgKyAncyddW2lkXVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgIGlmICh0eXBlID09PSAnY29tcG9uZW50Jykge1xuICAgICAgICAgICAgdmFsaWRhdGVDb21wb25lbnROYW1lKGlkKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKHR5cGUgPT09ICdjb21wb25lbnQnICYmIGlzUGxhaW5PYmplY3QoZGVmaW5pdGlvbikpIHtcbiAgICAgICAgICAgIGRlZmluaXRpb24ubmFtZSA9IGRlZmluaXRpb24ubmFtZSB8fCBpZDtcbiAgICAgICAgICAgIGRlZmluaXRpb24gPSB0aGlzLm9wdGlvbnMuX2Jhc2UuZXh0ZW5kKGRlZmluaXRpb24pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHlwZSA9PT0gJ2RpcmVjdGl2ZScgJiYgdHlwZW9mIGRlZmluaXRpb24gPT09ICdmdW5jdGlvbicpIHtcbiAgICAgICAgICAgIGRlZmluaXRpb24gPSB7IGJpbmQ6IGRlZmluaXRpb24sIHVwZGF0ZTogZGVmaW5pdGlvbiB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLm9wdGlvbnNbdHlwZSArICdzJ11baWRdID0gZGVmaW5pdGlvbjtcbiAgICAgICAgICByZXR1cm4gZGVmaW5pdGlvblxuICAgICAgICB9XG4gICAgICB9O1xuICAgIH0pO1xuICB9XG5cbiAgLyogICovXG5cblxuXG5cblxuICBmdW5jdGlvbiBnZXRDb21wb25lbnROYW1lIChvcHRzKSB7XG4gICAgcmV0dXJuIG9wdHMgJiYgKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcpXG4gIH1cblxuICBmdW5jdGlvbiBtYXRjaGVzIChwYXR0ZXJuLCBuYW1lKSB7XG4gICAgaWYgKEFycmF5LmlzQXJyYXkocGF0dGVybikpIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLmluZGV4T2YobmFtZSkgPiAtMVxuICAgIH0gZWxzZSBpZiAodHlwZW9mIHBhdHRlcm4gPT09ICdzdHJpbmcnKSB7XG4gICAgICByZXR1cm4gcGF0dGVybi5zcGxpdCgnLCcpLmluZGV4T2YobmFtZSkgPiAtMVxuICAgIH0gZWxzZSBpZiAoaXNSZWdFeHAocGF0dGVybikpIHtcbiAgICAgIHJldHVybiBwYXR0ZXJuLnRlc3QobmFtZSlcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gZmFsc2VcbiAgfVxuXG4gIGZ1bmN0aW9uIHBydW5lQ2FjaGUgKGtlZXBBbGl2ZUluc3RhbmNlLCBmaWx0ZXIpIHtcbiAgICB2YXIgY2FjaGUgPSBrZWVwQWxpdmVJbnN0YW5jZS5jYWNoZTtcbiAgICB2YXIga2V5cyA9IGtlZXBBbGl2ZUluc3RhbmNlLmtleXM7XG4gICAgdmFyIF92bm9kZSA9IGtlZXBBbGl2ZUluc3RhbmNlLl92bm9kZTtcbiAgICBmb3IgKHZhciBrZXkgaW4gY2FjaGUpIHtcbiAgICAgIHZhciBlbnRyeSA9IGNhY2hlW2tleV07XG4gICAgICBpZiAoZW50cnkpIHtcbiAgICAgICAgdmFyIG5hbWUgPSBlbnRyeS5uYW1lO1xuICAgICAgICBpZiAobmFtZSAmJiAhZmlsdGVyKG5hbWUpKSB7XG4gICAgICAgICAgcHJ1bmVDYWNoZUVudHJ5KGNhY2hlLCBrZXksIGtleXMsIF92bm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcnVuZUNhY2hlRW50cnkgKFxuICAgIGNhY2hlLFxuICAgIGtleSxcbiAgICBrZXlzLFxuICAgIGN1cnJlbnRcbiAgKSB7XG4gICAgdmFyIGVudHJ5ID0gY2FjaGVba2V5XTtcbiAgICBpZiAoZW50cnkgJiYgKCFjdXJyZW50IHx8IGVudHJ5LnRhZyAhPT0gY3VycmVudC50YWcpKSB7XG4gICAgICBlbnRyeS5jb21wb25lbnRJbnN0YW5jZS4kZGVzdHJveSgpO1xuICAgIH1cbiAgICBjYWNoZVtrZXldID0gbnVsbDtcbiAgICByZW1vdmUoa2V5cywga2V5KTtcbiAgfVxuXG4gIHZhciBwYXR0ZXJuVHlwZXMgPSBbU3RyaW5nLCBSZWdFeHAsIEFycmF5XTtcblxuICB2YXIgS2VlcEFsaXZlID0ge1xuICAgIG5hbWU6ICdrZWVwLWFsaXZlJyxcbiAgICBhYnN0cmFjdDogdHJ1ZSxcblxuICAgIHByb3BzOiB7XG4gICAgICBpbmNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgICBleGNsdWRlOiBwYXR0ZXJuVHlwZXMsXG4gICAgICBtYXg6IFtTdHJpbmcsIE51bWJlcl1cbiAgICB9LFxuXG4gICAgbWV0aG9kczoge1xuICAgICAgY2FjaGVWTm9kZTogZnVuY3Rpb24gY2FjaGVWTm9kZSgpIHtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBjYWNoZSA9IHJlZi5jYWNoZTtcbiAgICAgICAgdmFyIGtleXMgPSByZWYua2V5cztcbiAgICAgICAgdmFyIHZub2RlVG9DYWNoZSA9IHJlZi52bm9kZVRvQ2FjaGU7XG4gICAgICAgIHZhciBrZXlUb0NhY2hlID0gcmVmLmtleVRvQ2FjaGU7XG4gICAgICAgIGlmICh2bm9kZVRvQ2FjaGUpIHtcbiAgICAgICAgICB2YXIgdGFnID0gdm5vZGVUb0NhY2hlLnRhZztcbiAgICAgICAgICB2YXIgY29tcG9uZW50SW5zdGFuY2UgPSB2bm9kZVRvQ2FjaGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgICAgdmFyIGNvbXBvbmVudE9wdGlvbnMgPSB2bm9kZVRvQ2FjaGUuY29tcG9uZW50T3B0aW9ucztcbiAgICAgICAgICBjYWNoZVtrZXlUb0NhY2hlXSA9IHtcbiAgICAgICAgICAgIG5hbWU6IGdldENvbXBvbmVudE5hbWUoY29tcG9uZW50T3B0aW9ucyksXG4gICAgICAgICAgICB0YWc6IHRhZyxcbiAgICAgICAgICAgIGNvbXBvbmVudEluc3RhbmNlOiBjb21wb25lbnRJbnN0YW5jZSxcbiAgICAgICAgICB9O1xuICAgICAgICAgIGtleXMucHVzaChrZXlUb0NhY2hlKTtcbiAgICAgICAgICAvLyBwcnVuZSBvbGRlc3QgZW50cnlcbiAgICAgICAgICBpZiAodGhpcy5tYXggJiYga2V5cy5sZW5ndGggPiBwYXJzZUludCh0aGlzLm1heCkpIHtcbiAgICAgICAgICAgIHBydW5lQ2FjaGVFbnRyeShjYWNoZSwga2V5c1swXSwga2V5cywgdGhpcy5fdm5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICB0aGlzLnZub2RlVG9DYWNoZSA9IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9LFxuXG4gICAgY3JlYXRlZDogZnVuY3Rpb24gY3JlYXRlZCAoKSB7XG4gICAgICB0aGlzLmNhY2hlID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICAgIHRoaXMua2V5cyA9IFtdO1xuICAgIH0sXG5cbiAgICBkZXN0cm95ZWQ6IGZ1bmN0aW9uIGRlc3Ryb3llZCAoKSB7XG4gICAgICBmb3IgKHZhciBrZXkgaW4gdGhpcy5jYWNoZSkge1xuICAgICAgICBwcnVuZUNhY2hlRW50cnkodGhpcy5jYWNoZSwga2V5LCB0aGlzLmtleXMpO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICBtb3VudGVkOiBmdW5jdGlvbiBtb3VudGVkICgpIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB0aGlzLmNhY2hlVk5vZGUoKTtcbiAgICAgIHRoaXMuJHdhdGNoKCdpbmNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuIG1hdGNoZXModmFsLCBuYW1lKTsgfSk7XG4gICAgICB9KTtcbiAgICAgIHRoaXMuJHdhdGNoKCdleGNsdWRlJywgZnVuY3Rpb24gKHZhbCkge1xuICAgICAgICBwcnVuZUNhY2hlKHRoaXMkMSwgZnVuY3Rpb24gKG5hbWUpIHsgcmV0dXJuICFtYXRjaGVzKHZhbCwgbmFtZSk7IH0pO1xuICAgICAgfSk7XG4gICAgfSxcblxuICAgIHVwZGF0ZWQ6IGZ1bmN0aW9uIHVwZGF0ZWQgKCkge1xuICAgICAgdGhpcy5jYWNoZVZOb2RlKCk7XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyICgpIHtcbiAgICAgIHZhciBzbG90ID0gdGhpcy4kc2xvdHMuZGVmYXVsdDtcbiAgICAgIHZhciB2bm9kZSA9IGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoc2xvdCk7XG4gICAgICB2YXIgY29tcG9uZW50T3B0aW9ucyA9IHZub2RlICYmIHZub2RlLmNvbXBvbmVudE9wdGlvbnM7XG4gICAgICBpZiAoY29tcG9uZW50T3B0aW9ucykge1xuICAgICAgICAvLyBjaGVjayBwYXR0ZXJuXG4gICAgICAgIHZhciBuYW1lID0gZ2V0Q29tcG9uZW50TmFtZShjb21wb25lbnRPcHRpb25zKTtcbiAgICAgICAgdmFyIHJlZiA9IHRoaXM7XG4gICAgICAgIHZhciBpbmNsdWRlID0gcmVmLmluY2x1ZGU7XG4gICAgICAgIHZhciBleGNsdWRlID0gcmVmLmV4Y2x1ZGU7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAvLyBub3QgaW5jbHVkZWRcbiAgICAgICAgICAoaW5jbHVkZSAmJiAoIW5hbWUgfHwgIW1hdGNoZXMoaW5jbHVkZSwgbmFtZSkpKSB8fFxuICAgICAgICAgIC8vIGV4Y2x1ZGVkXG4gICAgICAgICAgKGV4Y2x1ZGUgJiYgbmFtZSAmJiBtYXRjaGVzKGV4Y2x1ZGUsIG5hbWUpKVxuICAgICAgICApIHtcbiAgICAgICAgICByZXR1cm4gdm5vZGVcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciByZWYkMSA9IHRoaXM7XG4gICAgICAgIHZhciBjYWNoZSA9IHJlZiQxLmNhY2hlO1xuICAgICAgICB2YXIga2V5cyA9IHJlZiQxLmtleXM7XG4gICAgICAgIHZhciBrZXkgPSB2bm9kZS5rZXkgPT0gbnVsbFxuICAgICAgICAgIC8vIHNhbWUgY29uc3RydWN0b3IgbWF5IGdldCByZWdpc3RlcmVkIGFzIGRpZmZlcmVudCBsb2NhbCBjb21wb25lbnRzXG4gICAgICAgICAgLy8gc28gY2lkIGFsb25lIGlzIG5vdCBlbm91Z2ggKCMzMjY5KVxuICAgICAgICAgID8gY29tcG9uZW50T3B0aW9ucy5DdG9yLmNpZCArIChjb21wb25lbnRPcHRpb25zLnRhZyA/IChcIjo6XCIgKyAoY29tcG9uZW50T3B0aW9ucy50YWcpKSA6ICcnKVxuICAgICAgICAgIDogdm5vZGUua2V5O1xuICAgICAgICBpZiAoY2FjaGVba2V5XSkge1xuICAgICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gY2FjaGVba2V5XS5jb21wb25lbnRJbnN0YW5jZTtcbiAgICAgICAgICAvLyBtYWtlIGN1cnJlbnQga2V5IGZyZXNoZXN0XG4gICAgICAgICAgcmVtb3ZlKGtleXMsIGtleSk7XG4gICAgICAgICAga2V5cy5wdXNoKGtleSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgLy8gZGVsYXkgc2V0dGluZyB0aGUgY2FjaGUgdW50aWwgdXBkYXRlXG4gICAgICAgICAgdGhpcy52bm9kZVRvQ2FjaGUgPSB2bm9kZTtcbiAgICAgICAgICB0aGlzLmtleVRvQ2FjaGUgPSBrZXk7XG4gICAgICAgIH1cblxuICAgICAgICB2bm9kZS5kYXRhLmtlZXBBbGl2ZSA9IHRydWU7XG4gICAgICB9XG4gICAgICByZXR1cm4gdm5vZGUgfHwgKHNsb3QgJiYgc2xvdFswXSlcbiAgICB9XG4gIH07XG5cbiAgdmFyIGJ1aWx0SW5Db21wb25lbnRzID0ge1xuICAgIEtlZXBBbGl2ZTogS2VlcEFsaXZlXG4gIH07XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gaW5pdEdsb2JhbEFQSSAoVnVlKSB7XG4gICAgLy8gY29uZmlnXG4gICAgdmFyIGNvbmZpZ0RlZiA9IHt9O1xuICAgIGNvbmZpZ0RlZi5nZXQgPSBmdW5jdGlvbiAoKSB7IHJldHVybiBjb25maWc7IH07XG4gICAge1xuICAgICAgY29uZmlnRGVmLnNldCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgd2FybihcbiAgICAgICAgICAnRG8gbm90IHJlcGxhY2UgdGhlIFZ1ZS5jb25maWcgb2JqZWN0LCBzZXQgaW5kaXZpZHVhbCBmaWVsZHMgaW5zdGVhZC4nXG4gICAgICAgICk7XG4gICAgICB9O1xuICAgIH1cbiAgICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLCAnY29uZmlnJywgY29uZmlnRGVmKTtcblxuICAgIC8vIGV4cG9zZWQgdXRpbCBtZXRob2RzLlxuICAgIC8vIE5PVEU6IHRoZXNlIGFyZSBub3QgY29uc2lkZXJlZCBwYXJ0IG9mIHRoZSBwdWJsaWMgQVBJIC0gYXZvaWQgcmVseWluZyBvblxuICAgIC8vIHRoZW0gdW5sZXNzIHlvdSBhcmUgYXdhcmUgb2YgdGhlIHJpc2suXG4gICAgVnVlLnV0aWwgPSB7XG4gICAgICB3YXJuOiB3YXJuLFxuICAgICAgZXh0ZW5kOiBleHRlbmQsXG4gICAgICBtZXJnZU9wdGlvbnM6IG1lcmdlT3B0aW9ucyxcbiAgICAgIGRlZmluZVJlYWN0aXZlOiBkZWZpbmVSZWFjdGl2ZSQkMVxuICAgIH07XG5cbiAgICBWdWUuc2V0ID0gc2V0O1xuICAgIFZ1ZS5kZWxldGUgPSBkZWw7XG4gICAgVnVlLm5leHRUaWNrID0gbmV4dFRpY2s7XG5cbiAgICAvLyAyLjYgZXhwbGljaXQgb2JzZXJ2YWJsZSBBUElcbiAgICBWdWUub2JzZXJ2YWJsZSA9IGZ1bmN0aW9uIChvYmopIHtcbiAgICAgIG9ic2VydmUob2JqKTtcbiAgICAgIHJldHVybiBvYmpcbiAgICB9O1xuXG4gICAgVnVlLm9wdGlvbnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICAgIEFTU0VUX1RZUEVTLmZvckVhY2goZnVuY3Rpb24gKHR5cGUpIHtcbiAgICAgIFZ1ZS5vcHRpb25zW3R5cGUgKyAncyddID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICB9KTtcblxuICAgIC8vIHRoaXMgaXMgdXNlZCB0byBpZGVudGlmeSB0aGUgXCJiYXNlXCIgY29uc3RydWN0b3IgdG8gZXh0ZW5kIGFsbCBwbGFpbi1vYmplY3RcbiAgICAvLyBjb21wb25lbnRzIHdpdGggaW4gV2VleCdzIG11bHRpLWluc3RhbmNlIHNjZW5hcmlvcy5cbiAgICBWdWUub3B0aW9ucy5fYmFzZSA9IFZ1ZTtcblxuICAgIGV4dGVuZChWdWUub3B0aW9ucy5jb21wb25lbnRzLCBidWlsdEluQ29tcG9uZW50cyk7XG5cbiAgICBpbml0VXNlKFZ1ZSk7XG4gICAgaW5pdE1peGluJDEoVnVlKTtcbiAgICBpbml0RXh0ZW5kKFZ1ZSk7XG4gICAgaW5pdEFzc2V0UmVnaXN0ZXJzKFZ1ZSk7XG4gIH1cblxuICBpbml0R2xvYmFsQVBJKFZ1ZSk7XG5cbiAgT2JqZWN0LmRlZmluZVByb3BlcnR5KFZ1ZS5wcm90b3R5cGUsICckaXNTZXJ2ZXInLCB7XG4gICAgZ2V0OiBpc1NlcnZlclJlbmRlcmluZ1xuICB9KTtcblxuICBPYmplY3QuZGVmaW5lUHJvcGVydHkoVnVlLnByb3RvdHlwZSwgJyRzc3JDb250ZXh0Jywge1xuICAgIGdldDogZnVuY3Rpb24gZ2V0ICgpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgICByZXR1cm4gdGhpcy4kdm5vZGUgJiYgdGhpcy4kdm5vZGUuc3NyQ29udGV4dFxuICAgIH1cbiAgfSk7XG5cbiAgLy8gZXhwb3NlIEZ1bmN0aW9uYWxSZW5kZXJDb250ZXh0IGZvciBzc3IgcnVudGltZSBoZWxwZXIgaW5zdGFsbGF0aW9uXG4gIE9iamVjdC5kZWZpbmVQcm9wZXJ0eShWdWUsICdGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCcsIHtcbiAgICB2YWx1ZTogRnVuY3Rpb25hbFJlbmRlckNvbnRleHRcbiAgfSk7XG5cbiAgVnVlLnZlcnNpb24gPSAnMi42LjE0JztcblxuICAvKiAgKi9cblxuICAvLyB0aGVzZSBhcmUgcmVzZXJ2ZWQgZm9yIHdlYiBiZWNhdXNlIHRoZXkgYXJlIGRpcmVjdGx5IGNvbXBpbGVkIGF3YXlcbiAgLy8gZHVyaW5nIHRlbXBsYXRlIGNvbXBpbGF0aW9uXG4gIHZhciBpc1Jlc2VydmVkQXR0ciA9IG1ha2VNYXAoJ3N0eWxlLGNsYXNzJyk7XG5cbiAgLy8gYXR0cmlidXRlcyB0aGF0IHNob3VsZCBiZSB1c2luZyBwcm9wcyBmb3IgYmluZGluZ1xuICB2YXIgYWNjZXB0VmFsdWUgPSBtYWtlTWFwKCdpbnB1dCx0ZXh0YXJlYSxvcHRpb24sc2VsZWN0LHByb2dyZXNzJyk7XG4gIHZhciBtdXN0VXNlUHJvcCA9IGZ1bmN0aW9uICh0YWcsIHR5cGUsIGF0dHIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgKGF0dHIgPT09ICd2YWx1ZScgJiYgYWNjZXB0VmFsdWUodGFnKSkgJiYgdHlwZSAhPT0gJ2J1dHRvbicgfHxcbiAgICAgIChhdHRyID09PSAnc2VsZWN0ZWQnICYmIHRhZyA9PT0gJ29wdGlvbicpIHx8XG4gICAgICAoYXR0ciA9PT0gJ2NoZWNrZWQnICYmIHRhZyA9PT0gJ2lucHV0JykgfHxcbiAgICAgIChhdHRyID09PSAnbXV0ZWQnICYmIHRhZyA9PT0gJ3ZpZGVvJylcbiAgICApXG4gIH07XG5cbiAgdmFyIGlzRW51bWVyYXRlZEF0dHIgPSBtYWtlTWFwKCdjb250ZW50ZWRpdGFibGUsZHJhZ2dhYmxlLHNwZWxsY2hlY2snKTtcblxuICB2YXIgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlID0gbWFrZU1hcCgnZXZlbnRzLGNhcmV0LHR5cGluZyxwbGFpbnRleHQtb25seScpO1xuXG4gIHZhciBjb252ZXJ0RW51bWVyYXRlZFZhbHVlID0gZnVuY3Rpb24gKGtleSwgdmFsdWUpIHtcbiAgICByZXR1cm4gaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkgfHwgdmFsdWUgPT09ICdmYWxzZSdcbiAgICAgID8gJ2ZhbHNlJ1xuICAgICAgLy8gYWxsb3cgYXJiaXRyYXJ5IHN0cmluZyB2YWx1ZSBmb3IgY29udGVudGVkaXRhYmxlXG4gICAgICA6IGtleSA9PT0gJ2NvbnRlbnRlZGl0YWJsZScgJiYgaXNWYWxpZENvbnRlbnRFZGl0YWJsZVZhbHVlKHZhbHVlKVxuICAgICAgICA/IHZhbHVlXG4gICAgICAgIDogJ3RydWUnXG4gIH07XG5cbiAgdmFyIGlzQm9vbGVhbkF0dHIgPSBtYWtlTWFwKFxuICAgICdhbGxvd2Z1bGxzY3JlZW4sYXN5bmMsYXV0b2ZvY3VzLGF1dG9wbGF5LGNoZWNrZWQsY29tcGFjdCxjb250cm9scyxkZWNsYXJlLCcgK1xuICAgICdkZWZhdWx0LGRlZmF1bHRjaGVja2VkLGRlZmF1bHRtdXRlZCxkZWZhdWx0c2VsZWN0ZWQsZGVmZXIsZGlzYWJsZWQsJyArXG4gICAgJ2VuYWJsZWQsZm9ybW5vdmFsaWRhdGUsaGlkZGVuLGluZGV0ZXJtaW5hdGUsaW5lcnQsaXNtYXAsaXRlbXNjb3BlLGxvb3AsbXVsdGlwbGUsJyArXG4gICAgJ211dGVkLG5vaHJlZixub3Jlc2l6ZSxub3NoYWRlLG5vdmFsaWRhdGUsbm93cmFwLG9wZW4scGF1c2VvbmV4aXQscmVhZG9ubHksJyArXG4gICAgJ3JlcXVpcmVkLHJldmVyc2VkLHNjb3BlZCxzZWFtbGVzcyxzZWxlY3RlZCxzb3J0YWJsZSwnICtcbiAgICAndHJ1ZXNwZWVkLHR5cGVtdXN0bWF0Y2gsdmlzaWJsZSdcbiAgKTtcblxuICB2YXIgeGxpbmtOUyA9ICdodHRwOi8vd3d3LnczLm9yZy8xOTk5L3hsaW5rJztcblxuICB2YXIgaXNYbGluayA9IGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIG5hbWUuY2hhckF0KDUpID09PSAnOicgJiYgbmFtZS5zbGljZSgwLCA1KSA9PT0gJ3hsaW5rJ1xuICB9O1xuXG4gIHZhciBnZXRYbGlua1Byb3AgPSBmdW5jdGlvbiAobmFtZSkge1xuICAgIHJldHVybiBpc1hsaW5rKG5hbWUpID8gbmFtZS5zbGljZSg2LCBuYW1lLmxlbmd0aCkgOiAnJ1xuICB9O1xuXG4gIHZhciBpc0ZhbHN5QXR0clZhbHVlID0gZnVuY3Rpb24gKHZhbCkge1xuICAgIHJldHVybiB2YWwgPT0gbnVsbCB8fCB2YWwgPT09IGZhbHNlXG4gIH07XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gZ2VuQ2xhc3NGb3JWbm9kZSAodm5vZGUpIHtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIHBhcmVudE5vZGUgPSB2bm9kZTtcbiAgICB2YXIgY2hpbGROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKGlzRGVmKGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGU7XG4gICAgICBpZiAoY2hpbGROb2RlICYmIGNoaWxkTm9kZS5kYXRhKSB7XG4gICAgICAgIGRhdGEgPSBtZXJnZUNsYXNzRGF0YShjaGlsZE5vZGUuZGF0YSwgZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIHdoaWxlIChpc0RlZihwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgICBpZiAocGFyZW50Tm9kZSAmJiBwYXJlbnROb2RlLmRhdGEpIHtcbiAgICAgICAgZGF0YSA9IG1lcmdlQ2xhc3NEYXRhKGRhdGEsIHBhcmVudE5vZGUuZGF0YSk7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZW5kZXJDbGFzcyhkYXRhLnN0YXRpY0NsYXNzLCBkYXRhLmNsYXNzKVxuICB9XG5cbiAgZnVuY3Rpb24gbWVyZ2VDbGFzc0RhdGEgKGNoaWxkLCBwYXJlbnQpIHtcbiAgICByZXR1cm4ge1xuICAgICAgc3RhdGljQ2xhc3M6IGNvbmNhdChjaGlsZC5zdGF0aWNDbGFzcywgcGFyZW50LnN0YXRpY0NsYXNzKSxcbiAgICAgIGNsYXNzOiBpc0RlZihjaGlsZC5jbGFzcylcbiAgICAgICAgPyBbY2hpbGQuY2xhc3MsIHBhcmVudC5jbGFzc11cbiAgICAgICAgOiBwYXJlbnQuY2xhc3NcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByZW5kZXJDbGFzcyAoXG4gICAgc3RhdGljQ2xhc3MsXG4gICAgZHluYW1pY0NsYXNzXG4gICkge1xuICAgIGlmIChpc0RlZihzdGF0aWNDbGFzcykgfHwgaXNEZWYoZHluYW1pY0NsYXNzKSkge1xuICAgICAgcmV0dXJuIGNvbmNhdChzdGF0aWNDbGFzcywgc3RyaW5naWZ5Q2xhc3MoZHluYW1pY0NsYXNzKSlcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIG5leHQgKi9cbiAgICByZXR1cm4gJydcbiAgfVxuXG4gIGZ1bmN0aW9uIGNvbmNhdCAoYSwgYikge1xuICAgIHJldHVybiBhID8gYiA/IChhICsgJyAnICsgYikgOiBhIDogKGIgfHwgJycpXG4gIH1cblxuICBmdW5jdGlvbiBzdHJpbmdpZnlDbGFzcyAodmFsdWUpIHtcbiAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWx1ZSkpIHtcbiAgICAgIHJldHVybiBzdHJpbmdpZnlBcnJheSh2YWx1ZSlcbiAgICB9XG4gICAgaWYgKGlzT2JqZWN0KHZhbHVlKSkge1xuICAgICAgcmV0dXJuIHN0cmluZ2lmeU9iamVjdCh2YWx1ZSlcbiAgICB9XG4gICAgaWYgKHR5cGVvZiB2YWx1ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiB2YWx1ZVxuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICAgIHJldHVybiAnJ1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5QXJyYXkgKHZhbHVlKSB7XG4gICAgdmFyIHJlcyA9ICcnO1xuICAgIHZhciBzdHJpbmdpZmllZDtcbiAgICBmb3IgKHZhciBpID0gMCwgbCA9IHZhbHVlLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgaWYgKGlzRGVmKHN0cmluZ2lmaWVkID0gc3RyaW5naWZ5Q2xhc3ModmFsdWVbaV0pKSAmJiBzdHJpbmdpZmllZCAhPT0gJycpIHtcbiAgICAgICAgaWYgKHJlcykgeyByZXMgKz0gJyAnOyB9XG4gICAgICAgIHJlcyArPSBzdHJpbmdpZmllZDtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgZnVuY3Rpb24gc3RyaW5naWZ5T2JqZWN0ICh2YWx1ZSkge1xuICAgIHZhciByZXMgPSAnJztcbiAgICBmb3IgKHZhciBrZXkgaW4gdmFsdWUpIHtcbiAgICAgIGlmICh2YWx1ZVtrZXldKSB7XG4gICAgICAgIGlmIChyZXMpIHsgcmVzICs9ICcgJzsgfVxuICAgICAgICByZXMgKz0ga2V5O1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgbmFtZXNwYWNlTWFwID0ge1xuICAgIHN2ZzogJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJyxcbiAgICBtYXRoOiAnaHR0cDovL3d3dy53My5vcmcvMTk5OC9NYXRoL01hdGhNTCdcbiAgfTtcblxuICB2YXIgaXNIVE1MVGFnID0gbWFrZU1hcChcbiAgICAnaHRtbCxib2R5LGJhc2UsaGVhZCxsaW5rLG1ldGEsc3R5bGUsdGl0bGUsJyArXG4gICAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxmb290ZXIsaGVhZGVyLGgxLGgyLGgzLGg0LGg1LGg2LGhncm91cCxuYXYsc2VjdGlvbiwnICtcbiAgICAnZGl2LGRkLGRsLGR0LGZpZ2NhcHRpb24sZmlndXJlLHBpY3R1cmUsaHIsaW1nLGxpLG1haW4sb2wscCxwcmUsdWwsJyArXG4gICAgJ2EsYixhYmJyLGJkaSxiZG8sYnIsY2l0ZSxjb2RlLGRhdGEsZGZuLGVtLGksa2JkLG1hcmsscSxycCxydCxydGMscnVieSwnICtcbiAgICAncyxzYW1wLHNtYWxsLHNwYW4sc3Ryb25nLHN1YixzdXAsdGltZSx1LHZhcix3YnIsYXJlYSxhdWRpbyxtYXAsdHJhY2ssdmlkZW8sJyArXG4gICAgJ2VtYmVkLG9iamVjdCxwYXJhbSxzb3VyY2UsY2FudmFzLHNjcmlwdCxub3NjcmlwdCxkZWwsaW5zLCcgK1xuICAgICdjYXB0aW9uLGNvbCxjb2xncm91cCx0YWJsZSx0aGVhZCx0Ym9keSx0ZCx0aCx0ciwnICtcbiAgICAnYnV0dG9uLGRhdGFsaXN0LGZpZWxkc2V0LGZvcm0saW5wdXQsbGFiZWwsbGVnZW5kLG1ldGVyLG9wdGdyb3VwLG9wdGlvbiwnICtcbiAgICAnb3V0cHV0LHByb2dyZXNzLHNlbGVjdCx0ZXh0YXJlYSwnICtcbiAgICAnZGV0YWlscyxkaWFsb2csbWVudSxtZW51aXRlbSxzdW1tYXJ5LCcgK1xuICAgICdjb250ZW50LGVsZW1lbnQsc2hhZG93LHRlbXBsYXRlLGJsb2NrcXVvdGUsaWZyYW1lLHRmb290J1xuICApO1xuXG4gIC8vIHRoaXMgbWFwIGlzIGludGVudGlvbmFsbHkgc2VsZWN0aXZlLCBvbmx5IGNvdmVyaW5nIFNWRyBlbGVtZW50cyB0aGF0IG1heVxuICAvLyBjb250YWluIGNoaWxkIGVsZW1lbnRzLlxuICB2YXIgaXNTVkcgPSBtYWtlTWFwKFxuICAgICdzdmcsYW5pbWF0ZSxjaXJjbGUsY2xpcHBhdGgsY3Vyc29yLGRlZnMsZGVzYyxlbGxpcHNlLGZpbHRlcixmb250LWZhY2UsJyArXG4gICAgJ2ZvcmVpZ25vYmplY3QsZyxnbHlwaCxpbWFnZSxsaW5lLG1hcmtlcixtYXNrLG1pc3NpbmctZ2x5cGgscGF0aCxwYXR0ZXJuLCcgK1xuICAgICdwb2x5Z29uLHBvbHlsaW5lLHJlY3Qsc3dpdGNoLHN5bWJvbCx0ZXh0LHRleHRwYXRoLHRzcGFuLHVzZSx2aWV3JyxcbiAgICB0cnVlXG4gICk7XG5cbiAgdmFyIGlzUHJlVGFnID0gZnVuY3Rpb24gKHRhZykgeyByZXR1cm4gdGFnID09PSAncHJlJzsgfTtcblxuICB2YXIgaXNSZXNlcnZlZFRhZyA9IGZ1bmN0aW9uICh0YWcpIHtcbiAgICByZXR1cm4gaXNIVE1MVGFnKHRhZykgfHwgaXNTVkcodGFnKVxuICB9O1xuXG4gIGZ1bmN0aW9uIGdldFRhZ05hbWVzcGFjZSAodGFnKSB7XG4gICAgaWYgKGlzU1ZHKHRhZykpIHtcbiAgICAgIHJldHVybiAnc3ZnJ1xuICAgIH1cbiAgICAvLyBiYXNpYyBzdXBwb3J0IGZvciBNYXRoTUxcbiAgICAvLyBub3RlIGl0IGRvZXNuJ3Qgc3VwcG9ydCBvdGhlciBNYXRoTUwgZWxlbWVudHMgYmVpbmcgY29tcG9uZW50IHJvb3RzXG4gICAgaWYgKHRhZyA9PT0gJ21hdGgnKSB7XG4gICAgICByZXR1cm4gJ21hdGgnXG4gICAgfVxuICB9XG5cbiAgdmFyIHVua25vd25FbGVtZW50Q2FjaGUgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuICBmdW5jdGlvbiBpc1Vua25vd25FbGVtZW50ICh0YWcpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWluQnJvd3Nlcikge1xuICAgICAgcmV0dXJuIHRydWVcbiAgICB9XG4gICAgaWYgKGlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgcmV0dXJuIGZhbHNlXG4gICAgfVxuICAgIHRhZyA9IHRhZy50b0xvd2VyQ2FzZSgpO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gIT0gbnVsbCkge1xuICAgICAgcmV0dXJuIHVua25vd25FbGVtZW50Q2FjaGVbdGFnXVxuICAgIH1cbiAgICB2YXIgZWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KHRhZyk7XG4gICAgaWYgKHRhZy5pbmRleE9mKCctJykgPiAtMSkge1xuICAgICAgLy8gaHR0cDovL3N0YWNrb3ZlcmZsb3cuY29tL2EvMjgyMTAzNjQvMTA3MDI0NFxuICAgICAgcmV0dXJuICh1bmtub3duRWxlbWVudENhY2hlW3RhZ10gPSAoXG4gICAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTFVua25vd25FbGVtZW50IHx8XG4gICAgICAgIGVsLmNvbnN0cnVjdG9yID09PSB3aW5kb3cuSFRNTEVsZW1lbnRcbiAgICAgICkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAodW5rbm93bkVsZW1lbnRDYWNoZVt0YWddID0gL0hUTUxVbmtub3duRWxlbWVudC8udGVzdChlbC50b1N0cmluZygpKSlcbiAgICB9XG4gIH1cblxuICB2YXIgaXNUZXh0SW5wdXRUeXBlID0gbWFrZU1hcCgndGV4dCxudW1iZXIscGFzc3dvcmQsc2VhcmNoLGVtYWlsLHRlbCx1cmwnKTtcblxuICAvKiAgKi9cblxuICAvKipcbiAgICogUXVlcnkgYW4gZWxlbWVudCBzZWxlY3RvciBpZiBpdCdzIG5vdCBhbiBlbGVtZW50IGFscmVhZHkuXG4gICAqL1xuICBmdW5jdGlvbiBxdWVyeSAoZWwpIHtcbiAgICBpZiAodHlwZW9mIGVsID09PSAnc3RyaW5nJykge1xuICAgICAgdmFyIHNlbGVjdGVkID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcihlbCk7XG4gICAgICBpZiAoIXNlbGVjdGVkKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ0Nhbm5vdCBmaW5kIGVsZW1lbnQ6ICcgKyBlbFxuICAgICAgICApO1xuICAgICAgICByZXR1cm4gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2JylcbiAgICAgIH1cbiAgICAgIHJldHVybiBzZWxlY3RlZFxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gZWxcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBjcmVhdGVFbGVtZW50JDEgKHRhZ05hbWUsIHZub2RlKSB7XG4gICAgdmFyIGVsbSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQodGFnTmFtZSk7XG4gICAgaWYgKHRhZ05hbWUgIT09ICdzZWxlY3QnKSB7XG4gICAgICByZXR1cm4gZWxtXG4gICAgfVxuICAgIC8vIGZhbHNlIG9yIG51bGwgd2lsbCByZW1vdmUgdGhlIGF0dHJpYnV0ZSBidXQgdW5kZWZpbmVkIHdpbGwgbm90XG4gICAgaWYgKHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS5hdHRycyAmJiB2bm9kZS5kYXRhLmF0dHJzLm11bHRpcGxlICE9PSB1bmRlZmluZWQpIHtcbiAgICAgIGVsbS5zZXRBdHRyaWJ1dGUoJ211bHRpcGxlJywgJ211bHRpcGxlJyk7XG4gICAgfVxuICAgIHJldHVybiBlbG1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUVsZW1lbnROUyAobmFtZXNwYWNlLCB0YWdOYW1lKSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUyhuYW1lc3BhY2VNYXBbbmFtZXNwYWNlXSwgdGFnTmFtZSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZVRleHROb2RlICh0ZXh0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZVRleHROb2RlKHRleHQpXG4gIH1cblxuICBmdW5jdGlvbiBjcmVhdGVDb21tZW50ICh0ZXh0KSB7XG4gICAgcmV0dXJuIGRvY3VtZW50LmNyZWF0ZUNvbW1lbnQodGV4dClcbiAgfVxuXG4gIGZ1bmN0aW9uIGluc2VydEJlZm9yZSAocGFyZW50Tm9kZSwgbmV3Tm9kZSwgcmVmZXJlbmNlTm9kZSkge1xuICAgIHBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKG5ld05vZGUsIHJlZmVyZW5jZU5vZGUpO1xuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlQ2hpbGQgKG5vZGUsIGNoaWxkKSB7XG4gICAgbm9kZS5yZW1vdmVDaGlsZChjaGlsZCk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBlbmRDaGlsZCAobm9kZSwgY2hpbGQpIHtcbiAgICBub2RlLmFwcGVuZENoaWxkKGNoaWxkKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcmVudE5vZGUgKG5vZGUpIHtcbiAgICByZXR1cm4gbm9kZS5wYXJlbnROb2RlXG4gIH1cblxuICBmdW5jdGlvbiBuZXh0U2libGluZyAobm9kZSkge1xuICAgIHJldHVybiBub2RlLm5leHRTaWJsaW5nXG4gIH1cblxuICBmdW5jdGlvbiB0YWdOYW1lIChub2RlKSB7XG4gICAgcmV0dXJuIG5vZGUudGFnTmFtZVxuICB9XG5cbiAgZnVuY3Rpb24gc2V0VGV4dENvbnRlbnQgKG5vZGUsIHRleHQpIHtcbiAgICBub2RlLnRleHRDb250ZW50ID0gdGV4dDtcbiAgfVxuXG4gIGZ1bmN0aW9uIHNldFN0eWxlU2NvcGUgKG5vZGUsIHNjb3BlSWQpIHtcbiAgICBub2RlLnNldEF0dHJpYnV0ZShzY29wZUlkLCAnJyk7XG4gIH1cblxuICB2YXIgbm9kZU9wcyA9IC8qI19fUFVSRV9fKi9PYmplY3QuZnJlZXplKHtcbiAgICBjcmVhdGVFbGVtZW50OiBjcmVhdGVFbGVtZW50JDEsXG4gICAgY3JlYXRlRWxlbWVudE5TOiBjcmVhdGVFbGVtZW50TlMsXG4gICAgY3JlYXRlVGV4dE5vZGU6IGNyZWF0ZVRleHROb2RlLFxuICAgIGNyZWF0ZUNvbW1lbnQ6IGNyZWF0ZUNvbW1lbnQsXG4gICAgaW5zZXJ0QmVmb3JlOiBpbnNlcnRCZWZvcmUsXG4gICAgcmVtb3ZlQ2hpbGQ6IHJlbW92ZUNoaWxkLFxuICAgIGFwcGVuZENoaWxkOiBhcHBlbmRDaGlsZCxcbiAgICBwYXJlbnROb2RlOiBwYXJlbnROb2RlLFxuICAgIG5leHRTaWJsaW5nOiBuZXh0U2libGluZyxcbiAgICB0YWdOYW1lOiB0YWdOYW1lLFxuICAgIHNldFRleHRDb250ZW50OiBzZXRUZXh0Q29udGVudCxcbiAgICBzZXRTdHlsZVNjb3BlOiBzZXRTdHlsZVNjb3BlXG4gIH0pO1xuXG4gIC8qICAqL1xuXG4gIHZhciByZWYgPSB7XG4gICAgY3JlYXRlOiBmdW5jdGlvbiBjcmVhdGUgKF8sIHZub2RlKSB7XG4gICAgICByZWdpc3RlclJlZih2bm9kZSk7XG4gICAgfSxcbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgICBpZiAob2xkVm5vZGUuZGF0YS5yZWYgIT09IHZub2RlLmRhdGEucmVmKSB7XG4gICAgICAgIHJlZ2lzdGVyUmVmKG9sZFZub2RlLCB0cnVlKTtcbiAgICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgfVxuICAgIH0sXG4gICAgZGVzdHJveTogZnVuY3Rpb24gZGVzdHJveSAodm5vZGUpIHtcbiAgICAgIHJlZ2lzdGVyUmVmKHZub2RlLCB0cnVlKTtcbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gcmVnaXN0ZXJSZWYgKHZub2RlLCBpc1JlbW92YWwpIHtcbiAgICB2YXIga2V5ID0gdm5vZGUuZGF0YS5yZWY7XG4gICAgaWYgKCFpc0RlZihrZXkpKSB7IHJldHVybiB9XG5cbiAgICB2YXIgdm0gPSB2bm9kZS5jb250ZXh0O1xuICAgIHZhciByZWYgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSB8fCB2bm9kZS5lbG07XG4gICAgdmFyIHJlZnMgPSB2bS4kcmVmcztcbiAgICBpZiAoaXNSZW1vdmFsKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShyZWZzW2tleV0pKSB7XG4gICAgICAgIHJlbW92ZShyZWZzW2tleV0sIHJlZik7XG4gICAgICB9IGVsc2UgaWYgKHJlZnNba2V5XSA9PT0gcmVmKSB7XG4gICAgICAgIHJlZnNba2V5XSA9IHVuZGVmaW5lZDtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgaWYgKHZub2RlLmRhdGEucmVmSW5Gb3IpIHtcbiAgICAgICAgaWYgKCFBcnJheS5pc0FycmF5KHJlZnNba2V5XSkpIHtcbiAgICAgICAgICByZWZzW2tleV0gPSBbcmVmXTtcbiAgICAgICAgfSBlbHNlIGlmIChyZWZzW2tleV0uaW5kZXhPZihyZWYpIDwgMCkge1xuICAgICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICAgIHJlZnNba2V5XS5wdXNoKHJlZik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJlZnNba2V5XSA9IHJlZjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKipcbiAgICogVmlydHVhbCBET00gcGF0Y2hpbmcgYWxnb3JpdGhtIGJhc2VkIG9uIFNuYWJiZG9tIGJ5XG4gICAqIFNpbW9uIEZyaWlzIFZpbmR1bSAoQHBhbGRlcGluZClcbiAgICogTGljZW5zZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlXG4gICAqIGh0dHBzOi8vZ2l0aHViLmNvbS9wYWxkZXBpbmQvc25hYmJkb20vYmxvYi9tYXN0ZXIvTElDRU5TRVxuICAgKlxuICAgKiBtb2RpZmllZCBieSBFdmFuIFlvdSAoQHl5eDk5MDgwMylcbiAgICpcbiAgICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBiZWNhdXNlIHRoaXMgZmlsZSBpcyBwZXJmLWNyaXRpY2FsIGFuZCB0aGUgY29zdFxuICAgKiBvZiBtYWtpbmcgZmxvdyB1bmRlcnN0YW5kIGl0IGlzIG5vdCB3b3J0aCBpdC5cbiAgICovXG5cbiAgdmFyIGVtcHR5Tm9kZSA9IG5ldyBWTm9kZSgnJywge30sIFtdKTtcblxuICB2YXIgaG9va3MgPSBbJ2NyZWF0ZScsICdhY3RpdmF0ZScsICd1cGRhdGUnLCAncmVtb3ZlJywgJ2Rlc3Ryb3knXTtcblxuICBmdW5jdGlvbiBzYW1lVm5vZGUgKGEsIGIpIHtcbiAgICByZXR1cm4gKFxuICAgICAgYS5rZXkgPT09IGIua2V5ICYmXG4gICAgICBhLmFzeW5jRmFjdG9yeSA9PT0gYi5hc3luY0ZhY3RvcnkgJiYgKFxuICAgICAgICAoXG4gICAgICAgICAgYS50YWcgPT09IGIudGFnICYmXG4gICAgICAgICAgYS5pc0NvbW1lbnQgPT09IGIuaXNDb21tZW50ICYmXG4gICAgICAgICAgaXNEZWYoYS5kYXRhKSA9PT0gaXNEZWYoYi5kYXRhKSAmJlxuICAgICAgICAgIHNhbWVJbnB1dFR5cGUoYSwgYilcbiAgICAgICAgKSB8fCAoXG4gICAgICAgICAgaXNUcnVlKGEuaXNBc3luY1BsYWNlaG9sZGVyKSAmJlxuICAgICAgICAgIGlzVW5kZWYoYi5hc3luY0ZhY3RvcnkuZXJyb3IpXG4gICAgICAgIClcbiAgICAgIClcbiAgICApXG4gIH1cblxuICBmdW5jdGlvbiBzYW1lSW5wdXRUeXBlIChhLCBiKSB7XG4gICAgaWYgKGEudGFnICE9PSAnaW5wdXQnKSB7IHJldHVybiB0cnVlIH1cbiAgICB2YXIgaTtcbiAgICB2YXIgdHlwZUEgPSBpc0RlZihpID0gYS5kYXRhKSAmJiBpc0RlZihpID0gaS5hdHRycykgJiYgaS50eXBlO1xuICAgIHZhciB0eXBlQiA9IGlzRGVmKGkgPSBiLmRhdGEpICYmIGlzRGVmKGkgPSBpLmF0dHJzKSAmJiBpLnR5cGU7XG4gICAgcmV0dXJuIHR5cGVBID09PSB0eXBlQiB8fCBpc1RleHRJbnB1dFR5cGUodHlwZUEpICYmIGlzVGV4dElucHV0VHlwZSh0eXBlQilcbiAgfVxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUtleVRvT2xkSWR4IChjaGlsZHJlbiwgYmVnaW5JZHgsIGVuZElkeCkge1xuICAgIHZhciBpLCBrZXk7XG4gICAgdmFyIG1hcCA9IHt9O1xuICAgIGZvciAoaSA9IGJlZ2luSWR4OyBpIDw9IGVuZElkeDsgKytpKSB7XG4gICAgICBrZXkgPSBjaGlsZHJlbltpXS5rZXk7XG4gICAgICBpZiAoaXNEZWYoa2V5KSkgeyBtYXBba2V5XSA9IGk7IH1cbiAgICB9XG4gICAgcmV0dXJuIG1hcFxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlUGF0Y2hGdW5jdGlvbiAoYmFja2VuZCkge1xuICAgIHZhciBpLCBqO1xuICAgIHZhciBjYnMgPSB7fTtcblxuICAgIHZhciBtb2R1bGVzID0gYmFja2VuZC5tb2R1bGVzO1xuICAgIHZhciBub2RlT3BzID0gYmFja2VuZC5ub2RlT3BzO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGhvb2tzLmxlbmd0aDsgKytpKSB7XG4gICAgICBjYnNbaG9va3NbaV1dID0gW107XG4gICAgICBmb3IgKGogPSAwOyBqIDwgbW9kdWxlcy5sZW5ndGg7ICsraikge1xuICAgICAgICBpZiAoaXNEZWYobW9kdWxlc1tqXVtob29rc1tpXV0pKSB7XG4gICAgICAgICAgY2JzW2hvb2tzW2ldXS5wdXNoKG1vZHVsZXNbal1baG9va3NbaV1dKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGVtcHR5Tm9kZUF0IChlbG0pIHtcbiAgICAgIHJldHVybiBuZXcgVk5vZGUobm9kZU9wcy50YWdOYW1lKGVsbSkudG9Mb3dlckNhc2UoKSwge30sIFtdLCB1bmRlZmluZWQsIGVsbSlcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBjcmVhdGVSbUNiIChjaGlsZEVsbSwgbGlzdGVuZXJzKSB7XG4gICAgICBmdW5jdGlvbiByZW1vdmUkJDEgKCkge1xuICAgICAgICBpZiAoLS1yZW1vdmUkJDEubGlzdGVuZXJzID09PSAwKSB7XG4gICAgICAgICAgcmVtb3ZlTm9kZShjaGlsZEVsbSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIHJlbW92ZSQkMS5saXN0ZW5lcnMgPSBsaXN0ZW5lcnM7XG4gICAgICByZXR1cm4gcmVtb3ZlJCQxXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVtb3ZlTm9kZSAoZWwpIHtcbiAgICAgIHZhciBwYXJlbnQgPSBub2RlT3BzLnBhcmVudE5vZGUoZWwpO1xuICAgICAgLy8gZWxlbWVudCBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gcmVtb3ZlZCBkdWUgdG8gdi1odG1sIC8gdi10ZXh0XG4gICAgICBpZiAoaXNEZWYocGFyZW50KSkge1xuICAgICAgICBub2RlT3BzLnJlbW92ZUNoaWxkKHBhcmVudCwgZWwpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGlzVW5rbm93bkVsZW1lbnQkJDEgKHZub2RlLCBpblZQcmUpIHtcbiAgICAgIHJldHVybiAoXG4gICAgICAgICFpblZQcmUgJiZcbiAgICAgICAgIXZub2RlLm5zICYmXG4gICAgICAgICEoXG4gICAgICAgICAgY29uZmlnLmlnbm9yZWRFbGVtZW50cy5sZW5ndGggJiZcbiAgICAgICAgICBjb25maWcuaWdub3JlZEVsZW1lbnRzLnNvbWUoZnVuY3Rpb24gKGlnbm9yZSkge1xuICAgICAgICAgICAgcmV0dXJuIGlzUmVnRXhwKGlnbm9yZSlcbiAgICAgICAgICAgICAgPyBpZ25vcmUudGVzdCh2bm9kZS50YWcpXG4gICAgICAgICAgICAgIDogaWdub3JlID09PSB2bm9kZS50YWdcbiAgICAgICAgICB9KVxuICAgICAgICApICYmXG4gICAgICAgIGNvbmZpZy5pc1Vua25vd25FbGVtZW50KHZub2RlLnRhZylcbiAgICAgIClcbiAgICB9XG5cbiAgICB2YXIgY3JlYXRpbmdFbG1JblZQcmUgPSAwO1xuXG4gICAgZnVuY3Rpb24gY3JlYXRlRWxtIChcbiAgICAgIHZub2RlLFxuICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLFxuICAgICAgcGFyZW50RWxtLFxuICAgICAgcmVmRWxtLFxuICAgICAgbmVzdGVkLFxuICAgICAgb3duZXJBcnJheSxcbiAgICAgIGluZGV4XG4gICAgKSB7XG4gICAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgICAvLyBUaGlzIHZub2RlIHdhcyB1c2VkIGluIGEgcHJldmlvdXMgcmVuZGVyIVxuICAgICAgICAvLyBub3cgaXQncyB1c2VkIGFzIGEgbmV3IG5vZGUsIG92ZXJ3cml0aW5nIGl0cyBlbG0gd291bGQgY2F1c2VcbiAgICAgICAgLy8gcG90ZW50aWFsIHBhdGNoIGVycm9ycyBkb3duIHRoZSByb2FkIHdoZW4gaXQncyB1c2VkIGFzIGFuIGluc2VydGlvblxuICAgICAgICAvLyByZWZlcmVuY2Ugbm9kZS4gSW5zdGVhZCwgd2UgY2xvbmUgdGhlIG5vZGUgb24tZGVtYW5kIGJlZm9yZSBjcmVhdGluZ1xuICAgICAgICAvLyBhc3NvY2lhdGVkIERPTSBlbGVtZW50IGZvciBpdC5cbiAgICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgICAgfVxuXG4gICAgICB2bm9kZS5pc1Jvb3RJbnNlcnQgPSAhbmVzdGVkOyAvLyBmb3IgdHJhbnNpdGlvbiBlbnRlciBjaGVja1xuICAgICAgaWYgKGNyZWF0ZUNvbXBvbmVudCh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkpIHtcbiAgICAgICAgcmV0dXJuXG4gICAgICB9XG5cbiAgICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICAgIHtcbiAgICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgICAgY3JlYXRpbmdFbG1JblZQcmUrKztcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKGlzVW5rbm93bkVsZW1lbnQkJDEodm5vZGUsIGNyZWF0aW5nRWxtSW5WUHJlKSkge1xuICAgICAgICAgICAgd2FybihcbiAgICAgICAgICAgICAgJ1Vua25vd24gY3VzdG9tIGVsZW1lbnQ6IDwnICsgdGFnICsgJz4gLSBkaWQgeW91ICcgK1xuICAgICAgICAgICAgICAncmVnaXN0ZXIgdGhlIGNvbXBvbmVudCBjb3JyZWN0bHk/IEZvciByZWN1cnNpdmUgY29tcG9uZW50cywgJyArXG4gICAgICAgICAgICAgICdtYWtlIHN1cmUgdG8gcHJvdmlkZSB0aGUgXCJuYW1lXCIgb3B0aW9uLicsXG4gICAgICAgICAgICAgIHZub2RlLmNvbnRleHRcbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgdm5vZGUuZWxtID0gdm5vZGUubnNcbiAgICAgICAgICA/IG5vZGVPcHMuY3JlYXRlRWxlbWVudE5TKHZub2RlLm5zLCB0YWcpXG4gICAgICAgICAgOiBub2RlT3BzLmNyZWF0ZUVsZW1lbnQodGFnLCB2bm9kZSk7XG4gICAgICAgIHNldFNjb3BlKHZub2RlKTtcblxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAge1xuICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICBpZiAoaXNEZWYoZGF0YSkpIHtcbiAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICAgIH1cblxuICAgICAgICBpZiAoZGF0YSAmJiBkYXRhLnByZSkge1xuICAgICAgICAgIGNyZWF0aW5nRWxtSW5WUHJlLS07XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoaXNUcnVlKHZub2RlLmlzQ29tbWVudCkpIHtcbiAgICAgICAgdm5vZGUuZWxtID0gbm9kZU9wcy5jcmVhdGVDb21tZW50KHZub2RlLnRleHQpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2bm9kZS5lbG0gPSBub2RlT3BzLmNyZWF0ZVRleHROb2RlKHZub2RlLnRleHQpO1xuICAgICAgICBpbnNlcnQocGFyZW50RWxtLCB2bm9kZS5lbG0sIHJlZkVsbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ29tcG9uZW50ICh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBwYXJlbnRFbG0sIHJlZkVsbSkge1xuICAgICAgdmFyIGkgPSB2bm9kZS5kYXRhO1xuICAgICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICAgIHZhciBpc1JlYWN0aXZhdGVkID0gaXNEZWYodm5vZGUuY29tcG9uZW50SW5zdGFuY2UpICYmIGkua2VlcEFsaXZlO1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGkuaG9vaykgJiYgaXNEZWYoaSA9IGkuaW5pdCkpIHtcbiAgICAgICAgICBpKHZub2RlLCBmYWxzZSAvKiBoeWRyYXRpbmcgKi8pO1xuICAgICAgICB9XG4gICAgICAgIC8vIGFmdGVyIGNhbGxpbmcgdGhlIGluaXQgaG9vaywgaWYgdGhlIHZub2RlIGlzIGEgY2hpbGQgY29tcG9uZW50XG4gICAgICAgIC8vIGl0IHNob3VsZCd2ZSBjcmVhdGVkIGEgY2hpbGQgaW5zdGFuY2UgYW5kIG1vdW50ZWQgaXQuIHRoZSBjaGlsZFxuICAgICAgICAvLyBjb21wb25lbnQgYWxzbyBoYXMgc2V0IHRoZSBwbGFjZWhvbGRlciB2bm9kZSdzIGVsbS5cbiAgICAgICAgLy8gaW4gdGhhdCBjYXNlIHdlIGNhbiBqdXN0IHJldHVybiB0aGUgZWxlbWVudCBhbmQgYmUgZG9uZS5cbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSkge1xuICAgICAgICAgIGluaXRDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgICAgICAgIGlmIChpc1RydWUoaXNSZWFjdGl2YXRlZCkpIHtcbiAgICAgICAgICAgIHJlYWN0aXZhdGVDb21wb25lbnQodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW5pdENvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLmRhdGEucGVuZGluZ0luc2VydCkpIHtcbiAgICAgICAgaW5zZXJ0ZWRWbm9kZVF1ZXVlLnB1c2guYXBwbHkoaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQpO1xuICAgICAgICB2bm9kZS5kYXRhLnBlbmRpbmdJbnNlcnQgPSBudWxsO1xuICAgICAgfVxuICAgICAgdm5vZGUuZWxtID0gdm5vZGUuY29tcG9uZW50SW5zdGFuY2UuJGVsO1xuICAgICAgaWYgKGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgICBpbnZva2VDcmVhdGVIb29rcyh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgc2V0U2NvcGUodm5vZGUpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gZW1wdHkgY29tcG9uZW50IHJvb3QuXG4gICAgICAgIC8vIHNraXAgYWxsIGVsZW1lbnQtcmVsYXRlZCBtb2R1bGVzIGV4Y2VwdCBmb3IgcmVmICgjMzQ1NSlcbiAgICAgICAgcmVnaXN0ZXJSZWYodm5vZGUpO1xuICAgICAgICAvLyBtYWtlIHN1cmUgdG8gaW52b2tlIHRoZSBpbnNlcnQgaG9va1xuICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcmVhY3RpdmF0ZUNvbXBvbmVudCAodm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0pIHtcbiAgICAgIHZhciBpO1xuICAgICAgLy8gaGFjayBmb3IgIzQzMzk6IGEgcmVhY3RpdmF0ZWQgY29tcG9uZW50IHdpdGggaW5uZXIgdHJhbnNpdGlvblxuICAgICAgLy8gZG9lcyBub3QgdHJpZ2dlciBiZWNhdXNlIHRoZSBpbm5lciBub2RlJ3MgY3JlYXRlZCBob29rcyBhcmUgbm90IGNhbGxlZFxuICAgICAgLy8gYWdhaW4uIEl0J3Mgbm90IGlkZWFsIHRvIGludm9sdmUgbW9kdWxlLXNwZWNpZmljIGxvZ2ljIGluIGhlcmUgYnV0XG4gICAgICAvLyB0aGVyZSBkb2Vzbid0IHNlZW0gdG8gYmUgYSBiZXR0ZXIgd2F5IHRvIGRvIGl0LlxuICAgICAgdmFyIGlubmVyTm9kZSA9IHZub2RlO1xuICAgICAgd2hpbGUgKGlubmVyTm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgICBpbm5lck5vZGUgPSBpbm5lck5vZGUuY29tcG9uZW50SW5zdGFuY2UuX3Zub2RlO1xuICAgICAgICBpZiAoaXNEZWYoaSA9IGlubmVyTm9kZS5kYXRhKSAmJiBpc0RlZihpID0gaS50cmFuc2l0aW9uKSkge1xuICAgICAgICAgIGZvciAoaSA9IDA7IGkgPCBjYnMuYWN0aXZhdGUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICAgIGNicy5hY3RpdmF0ZVtpXShlbXB0eU5vZGUsIGlubmVyTm9kZSk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGluc2VydGVkVm5vZGVRdWV1ZS5wdXNoKGlubmVyTm9kZSk7XG4gICAgICAgICAgYnJlYWtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gdW5saWtlIGEgbmV3bHkgY3JlYXRlZCBjb21wb25lbnQsXG4gICAgICAvLyBhIHJlYWN0aXZhdGVkIGtlZXAtYWxpdmUgY29tcG9uZW50IGRvZXNuJ3QgaW5zZXJ0IGl0c2VsZlxuICAgICAgaW5zZXJ0KHBhcmVudEVsbSwgdm5vZGUuZWxtLCByZWZFbG0pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIGluc2VydCAocGFyZW50LCBlbG0sIHJlZiQkMSkge1xuICAgICAgaWYgKGlzRGVmKHBhcmVudCkpIHtcbiAgICAgICAgaWYgKGlzRGVmKHJlZiQkMSkpIHtcbiAgICAgICAgICBpZiAobm9kZU9wcy5wYXJlbnROb2RlKHJlZiQkMSkgPT09IHBhcmVudCkge1xuICAgICAgICAgICAgbm9kZU9wcy5pbnNlcnRCZWZvcmUocGFyZW50LCBlbG0sIHJlZiQkMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIG5vZGVPcHMuYXBwZW5kQ2hpbGQocGFyZW50LCBlbG0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY3JlYXRlQ2hpbGRyZW4gKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKSB7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheShjaGlsZHJlbikpIHtcbiAgICAgICAge1xuICAgICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhjaGlsZHJlbik7XG4gICAgICAgIH1cbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNyZWF0ZUVsbShjaGlsZHJlbltpXSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB2bm9kZS5lbG0sIG51bGwsIHRydWUsIGNoaWxkcmVuLCBpKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChpc1ByaW1pdGl2ZSh2bm9kZS50ZXh0KSkge1xuICAgICAgICBub2RlT3BzLmFwcGVuZENoaWxkKHZub2RlLmVsbSwgbm9kZU9wcy5jcmVhdGVUZXh0Tm9kZShTdHJpbmcodm5vZGUudGV4dCkpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpc1BhdGNoYWJsZSAodm5vZGUpIHtcbiAgICAgIHdoaWxlICh2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkge1xuICAgICAgICB2bm9kZSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgIH1cbiAgICAgIHJldHVybiBpc0RlZih2bm9kZS50YWcpXG4gICAgfVxuXG4gICAgZnVuY3Rpb24gaW52b2tlQ3JlYXRlSG9va3MgKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICBjYnMuY3JlYXRlW2kkMV0oZW1wdHlOb2RlLCB2bm9kZSk7XG4gICAgICB9XG4gICAgICBpID0gdm5vZGUuZGF0YS5ob29rOyAvLyBSZXVzZSB2YXJpYWJsZVxuICAgICAgaWYgKGlzRGVmKGkpKSB7XG4gICAgICAgIGlmIChpc0RlZihpLmNyZWF0ZSkpIHsgaS5jcmVhdGUoZW1wdHlOb2RlLCB2bm9kZSk7IH1cbiAgICAgICAgaWYgKGlzRGVmKGkuaW5zZXJ0KSkgeyBpbnNlcnRlZFZub2RlUXVldWUucHVzaCh2bm9kZSk7IH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBzZXQgc2NvcGUgaWQgYXR0cmlidXRlIGZvciBzY29wZWQgQ1NTLlxuICAgIC8vIHRoaXMgaXMgaW1wbGVtZW50ZWQgYXMgYSBzcGVjaWFsIGNhc2UgdG8gYXZvaWQgdGhlIG92ZXJoZWFkXG4gICAgLy8gb2YgZ29pbmcgdGhyb3VnaCB0aGUgbm9ybWFsIGF0dHJpYnV0ZSBwYXRjaGluZyBwcm9jZXNzLlxuICAgIGZ1bmN0aW9uIHNldFNjb3BlICh2bm9kZSkge1xuICAgICAgdmFyIGk7XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmZuU2NvcGVJZCkpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgYW5jZXN0b3IgPSB2bm9kZTtcbiAgICAgICAgd2hpbGUgKGFuY2VzdG9yKSB7XG4gICAgICAgICAgaWYgKGlzRGVmKGkgPSBhbmNlc3Rvci5jb250ZXh0KSAmJiBpc0RlZihpID0gaS4kb3B0aW9ucy5fc2NvcGVJZCkpIHtcbiAgICAgICAgICAgIG5vZGVPcHMuc2V0U3R5bGVTY29wZSh2bm9kZS5lbG0sIGkpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhbmNlc3RvciA9IGFuY2VzdG9yLnBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgLy8gZm9yIHNsb3QgY29udGVudCB0aGV5IHNob3VsZCBhbHNvIGdldCB0aGUgc2NvcGVJZCBmcm9tIHRoZSBob3N0IGluc3RhbmNlLlxuICAgICAgaWYgKGlzRGVmKGkgPSBhY3RpdmVJbnN0YW5jZSkgJiZcbiAgICAgICAgaSAhPT0gdm5vZGUuY29udGV4dCAmJlxuICAgICAgICBpICE9PSB2bm9kZS5mbkNvbnRleHQgJiZcbiAgICAgICAgaXNEZWYoaSA9IGkuJG9wdGlvbnMuX3Njb3BlSWQpXG4gICAgICApIHtcbiAgICAgICAgbm9kZU9wcy5zZXRTdHlsZVNjb3BlKHZub2RlLmVsbSwgaSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gYWRkVm5vZGVzIChwYXJlbnRFbG0sIHJlZkVsbSwgdm5vZGVzLCBzdGFydElkeCwgZW5kSWR4LCBpbnNlcnRlZFZub2RlUXVldWUpIHtcbiAgICAgIGZvciAoOyBzdGFydElkeCA8PSBlbmRJZHg7ICsrc3RhcnRJZHgpIHtcbiAgICAgICAgY3JlYXRlRWxtKHZub2Rlc1tzdGFydElkeF0sIGluc2VydGVkVm5vZGVRdWV1ZSwgcGFyZW50RWxtLCByZWZFbG0sIGZhbHNlLCB2bm9kZXMsIHN0YXJ0SWR4KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBpbnZva2VEZXN0cm95SG9vayAodm5vZGUpIHtcbiAgICAgIHZhciBpLCBqO1xuICAgICAgdmFyIGRhdGEgPSB2bm9kZS5kYXRhO1xuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5kZXN0cm95KSkgeyBpKHZub2RlKTsgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLmRlc3Ryb3kubGVuZ3RoOyArK2kpIHsgY2JzLmRlc3Ryb3lbaV0odm5vZGUpOyB9XG4gICAgICB9XG4gICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNoaWxkcmVuKSkge1xuICAgICAgICBmb3IgKGogPSAwOyBqIDwgdm5vZGUuY2hpbGRyZW4ubGVuZ3RoOyArK2opIHtcbiAgICAgICAgICBpbnZva2VEZXN0cm95SG9vayh2bm9kZS5jaGlsZHJlbltqXSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiByZW1vdmVWbm9kZXMgKHZub2Rlcywgc3RhcnRJZHgsIGVuZElkeCkge1xuICAgICAgZm9yICg7IHN0YXJ0SWR4IDw9IGVuZElkeDsgKytzdGFydElkeCkge1xuICAgICAgICB2YXIgY2ggPSB2bm9kZXNbc3RhcnRJZHhdO1xuICAgICAgICBpZiAoaXNEZWYoY2gpKSB7XG4gICAgICAgICAgaWYgKGlzRGVmKGNoLnRhZykpIHtcbiAgICAgICAgICAgIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2soY2gpO1xuICAgICAgICAgICAgaW52b2tlRGVzdHJveUhvb2soY2gpO1xuICAgICAgICAgIH0gZWxzZSB7IC8vIFRleHQgbm9kZVxuICAgICAgICAgICAgcmVtb3ZlTm9kZShjaC5lbG0pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIHJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2sgKHZub2RlLCBybSkge1xuICAgICAgaWYgKGlzRGVmKHJtKSB8fCBpc0RlZih2bm9kZS5kYXRhKSkge1xuICAgICAgICB2YXIgaTtcbiAgICAgICAgdmFyIGxpc3RlbmVycyA9IGNicy5yZW1vdmUubGVuZ3RoICsgMTtcbiAgICAgICAgaWYgKGlzRGVmKHJtKSkge1xuICAgICAgICAgIC8vIHdlIGhhdmUgYSByZWN1cnNpdmVseSBwYXNzZWQgZG93biBybSBjYWxsYmFja1xuICAgICAgICAgIC8vIGluY3JlYXNlIHRoZSBsaXN0ZW5lcnMgY291bnRcbiAgICAgICAgICBybS5saXN0ZW5lcnMgKz0gbGlzdGVuZXJzO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIC8vIGRpcmVjdGx5IHJlbW92aW5nXG4gICAgICAgICAgcm0gPSBjcmVhdGVSbUNiKHZub2RlLmVsbSwgbGlzdGVuZXJzKTtcbiAgICAgICAgfVxuICAgICAgICAvLyByZWN1cnNpdmVseSBpbnZva2UgaG9va3Mgb24gY2hpbGQgY29tcG9uZW50IHJvb3Qgbm9kZVxuICAgICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmNvbXBvbmVudEluc3RhbmNlKSAmJiBpc0RlZihpID0gaS5fdm5vZGUpICYmIGlzRGVmKGkuZGF0YSkpIHtcbiAgICAgICAgICByZW1vdmVBbmRJbnZva2VSZW1vdmVIb29rKGksIHJtKTtcbiAgICAgICAgfVxuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnJlbW92ZS5sZW5ndGg7ICsraSkge1xuICAgICAgICAgIGNicy5yZW1vdmVbaV0odm5vZGUsIHJtKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaXNEZWYoaSA9IHZub2RlLmRhdGEuaG9vaykgJiYgaXNEZWYoaSA9IGkucmVtb3ZlKSkge1xuICAgICAgICAgIGkodm5vZGUsIHJtKTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBybSgpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZW1vdmVOb2RlKHZub2RlLmVsbSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gdXBkYXRlQ2hpbGRyZW4gKHBhcmVudEVsbSwgb2xkQ2gsIG5ld0NoLCBpbnNlcnRlZFZub2RlUXVldWUsIHJlbW92ZU9ubHkpIHtcbiAgICAgIHZhciBvbGRTdGFydElkeCA9IDA7XG4gICAgICB2YXIgbmV3U3RhcnRJZHggPSAwO1xuICAgICAgdmFyIG9sZEVuZElkeCA9IG9sZENoLmxlbmd0aCAtIDE7XG4gICAgICB2YXIgb2xkU3RhcnRWbm9kZSA9IG9sZENoWzBdO1xuICAgICAgdmFyIG9sZEVuZFZub2RlID0gb2xkQ2hbb2xkRW5kSWR4XTtcbiAgICAgIHZhciBuZXdFbmRJZHggPSBuZXdDaC5sZW5ndGggLSAxO1xuICAgICAgdmFyIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFswXTtcbiAgICAgIHZhciBuZXdFbmRWbm9kZSA9IG5ld0NoW25ld0VuZElkeF07XG4gICAgICB2YXIgb2xkS2V5VG9JZHgsIGlkeEluT2xkLCB2bm9kZVRvTW92ZSwgcmVmRWxtO1xuXG4gICAgICAvLyByZW1vdmVPbmx5IGlzIGEgc3BlY2lhbCBmbGFnIHVzZWQgb25seSBieSA8dHJhbnNpdGlvbi1ncm91cD5cbiAgICAgIC8vIHRvIGVuc3VyZSByZW1vdmVkIGVsZW1lbnRzIHN0YXkgaW4gY29ycmVjdCByZWxhdGl2ZSBwb3NpdGlvbnNcbiAgICAgIC8vIGR1cmluZyBsZWF2aW5nIHRyYW5zaXRpb25zXG4gICAgICB2YXIgY2FuTW92ZSA9ICFyZW1vdmVPbmx5O1xuXG4gICAgICB7XG4gICAgICAgIGNoZWNrRHVwbGljYXRlS2V5cyhuZXdDaCk7XG4gICAgICB9XG5cbiAgICAgIHdoaWxlIChvbGRTdGFydElkeCA8PSBvbGRFbmRJZHggJiYgbmV3U3RhcnRJZHggPD0gbmV3RW5kSWR4KSB7XG4gICAgICAgIGlmIChpc1VuZGVmKG9sZFN0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgb2xkU3RhcnRWbm9kZSA9IG9sZENoWysrb2xkU3RhcnRJZHhdOyAvLyBWbm9kZSBoYXMgYmVlbiBtb3ZlZCBsZWZ0XG4gICAgICAgIH0gZWxzZSBpZiAoaXNVbmRlZihvbGRFbmRWbm9kZSkpIHtcbiAgICAgICAgICBvbGRFbmRWbm9kZSA9IG9sZENoWy0tb2xkRW5kSWR4XTtcbiAgICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3U3RhcnRWbm9kZSkpIHtcbiAgICAgICAgICBwYXRjaFZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICBvbGRTdGFydFZub2RlID0gb2xkQ2hbKytvbGRTdGFydElkeF07XG4gICAgICAgICAgbmV3U3RhcnRWbm9kZSA9IG5ld0NoWysrbmV3U3RhcnRJZHhdO1xuICAgICAgICB9IGVsc2UgaWYgKHNhbWVWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUpKSB7XG4gICAgICAgICAgcGF0Y2hWbm9kZShvbGRFbmRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgICAgb2xkRW5kVm5vZGUgPSBvbGRDaFstLW9sZEVuZElkeF07XG4gICAgICAgICAgbmV3RW5kVm5vZGUgPSBuZXdDaFstLW5ld0VuZElkeF07XG4gICAgICAgIH0gZWxzZSBpZiAoc2FtZVZub2RlKG9sZFN0YXJ0Vm5vZGUsIG5ld0VuZFZub2RlKSkgeyAvLyBWbm9kZSBtb3ZlZCByaWdodFxuICAgICAgICAgIHBhdGNoVm5vZGUob2xkU3RhcnRWbm9kZSwgbmV3RW5kVm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld0VuZElkeCk7XG4gICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZFN0YXJ0Vm5vZGUuZWxtLCBub2RlT3BzLm5leHRTaWJsaW5nKG9sZEVuZFZub2RlLmVsbSkpO1xuICAgICAgICAgIG9sZFN0YXJ0Vm5vZGUgPSBvbGRDaFsrK29sZFN0YXJ0SWR4XTtcbiAgICAgICAgICBuZXdFbmRWbm9kZSA9IG5ld0NoWy0tbmV3RW5kSWR4XTtcbiAgICAgICAgfSBlbHNlIGlmIChzYW1lVm5vZGUob2xkRW5kVm5vZGUsIG5ld1N0YXJ0Vm5vZGUpKSB7IC8vIFZub2RlIG1vdmVkIGxlZnRcbiAgICAgICAgICBwYXRjaFZub2RlKG9sZEVuZFZub2RlLCBuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIG5ld0NoLCBuZXdTdGFydElkeCk7XG4gICAgICAgICAgY2FuTW92ZSAmJiBub2RlT3BzLmluc2VydEJlZm9yZShwYXJlbnRFbG0sIG9sZEVuZFZub2RlLmVsbSwgb2xkU3RhcnRWbm9kZS5lbG0pO1xuICAgICAgICAgIG9sZEVuZFZub2RlID0gb2xkQ2hbLS1vbGRFbmRJZHhdO1xuICAgICAgICAgIG5ld1N0YXJ0Vm5vZGUgPSBuZXdDaFsrK25ld1N0YXJ0SWR4XTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBpZiAoaXNVbmRlZihvbGRLZXlUb0lkeCkpIHsgb2xkS2V5VG9JZHggPSBjcmVhdGVLZXlUb09sZElkeChvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7IH1cbiAgICAgICAgICBpZHhJbk9sZCA9IGlzRGVmKG5ld1N0YXJ0Vm5vZGUua2V5KVxuICAgICAgICAgICAgPyBvbGRLZXlUb0lkeFtuZXdTdGFydFZub2RlLmtleV1cbiAgICAgICAgICAgIDogZmluZElkeEluT2xkKG5ld1N0YXJ0Vm5vZGUsIG9sZENoLCBvbGRTdGFydElkeCwgb2xkRW5kSWR4KTtcbiAgICAgICAgICBpZiAoaXNVbmRlZihpZHhJbk9sZCkpIHsgLy8gTmV3IGVsZW1lbnRcbiAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICB2bm9kZVRvTW92ZSA9IG9sZENoW2lkeEluT2xkXTtcbiAgICAgICAgICAgIGlmIChzYW1lVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUpKSB7XG4gICAgICAgICAgICAgIHBhdGNoVm5vZGUodm5vZGVUb01vdmUsIG5ld1N0YXJ0Vm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbmV3Q2gsIG5ld1N0YXJ0SWR4KTtcbiAgICAgICAgICAgICAgb2xkQ2hbaWR4SW5PbGRdID0gdW5kZWZpbmVkO1xuICAgICAgICAgICAgICBjYW5Nb3ZlICYmIG5vZGVPcHMuaW5zZXJ0QmVmb3JlKHBhcmVudEVsbSwgdm5vZGVUb01vdmUuZWxtLCBvbGRTdGFydFZub2RlLmVsbSk7XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBzYW1lIGtleSBidXQgZGlmZmVyZW50IGVsZW1lbnQuIHRyZWF0IGFzIG5ldyBlbGVtZW50XG4gICAgICAgICAgICAgIGNyZWF0ZUVsbShuZXdTdGFydFZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIHBhcmVudEVsbSwgb2xkU3RhcnRWbm9kZS5lbG0sIGZhbHNlLCBuZXdDaCwgbmV3U3RhcnRJZHgpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBuZXdTdGFydFZub2RlID0gbmV3Q2hbKytuZXdTdGFydElkeF07XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChvbGRTdGFydElkeCA+IG9sZEVuZElkeCkge1xuICAgICAgICByZWZFbG0gPSBpc1VuZGVmKG5ld0NoW25ld0VuZElkeCArIDFdKSA/IG51bGwgOiBuZXdDaFtuZXdFbmRJZHggKyAxXS5lbG07XG4gICAgICAgIGFkZFZub2RlcyhwYXJlbnRFbG0sIHJlZkVsbSwgbmV3Q2gsIG5ld1N0YXJ0SWR4LCBuZXdFbmRJZHgsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2UgaWYgKG5ld1N0YXJ0SWR4ID4gbmV3RW5kSWR4KSB7XG4gICAgICAgIHJlbW92ZVZub2RlcyhvbGRDaCwgb2xkU3RhcnRJZHgsIG9sZEVuZElkeCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gY2hlY2tEdXBsaWNhdGVLZXlzIChjaGlsZHJlbikge1xuICAgICAgdmFyIHNlZW5LZXlzID0ge307XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIHZhciB2bm9kZSA9IGNoaWxkcmVuW2ldO1xuICAgICAgICB2YXIga2V5ID0gdm5vZGUua2V5O1xuICAgICAgICBpZiAoaXNEZWYoa2V5KSkge1xuICAgICAgICAgIGlmIChzZWVuS2V5c1trZXldKSB7XG4gICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAoXCJEdXBsaWNhdGUga2V5cyBkZXRlY3RlZDogJ1wiICsga2V5ICsgXCInLiBUaGlzIG1heSBjYXVzZSBhbiB1cGRhdGUgZXJyb3IuXCIpLFxuICAgICAgICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICAgICAgICApO1xuICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICBzZWVuS2V5c1trZXldID0gdHJ1ZTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBmaW5kSWR4SW5PbGQgKG5vZGUsIG9sZENoLCBzdGFydCwgZW5kKSB7XG4gICAgICBmb3IgKHZhciBpID0gc3RhcnQ7IGkgPCBlbmQ7IGkrKykge1xuICAgICAgICB2YXIgYyA9IG9sZENoW2ldO1xuICAgICAgICBpZiAoaXNEZWYoYykgJiYgc2FtZVZub2RlKG5vZGUsIGMpKSB7IHJldHVybiBpIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXRjaFZub2RlIChcbiAgICAgIG9sZFZub2RlLFxuICAgICAgdm5vZGUsXG4gICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgICBvd25lckFycmF5LFxuICAgICAgaW5kZXgsXG4gICAgICByZW1vdmVPbmx5XG4gICAgKSB7XG4gICAgICBpZiAob2xkVm5vZGUgPT09IHZub2RlKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICBpZiAoaXNEZWYodm5vZGUuZWxtKSAmJiBpc0RlZihvd25lckFycmF5KSkge1xuICAgICAgICAvLyBjbG9uZSByZXVzZWQgdm5vZGVcbiAgICAgICAgdm5vZGUgPSBvd25lckFycmF5W2luZGV4XSA9IGNsb25lVk5vZGUodm5vZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgZWxtID0gdm5vZGUuZWxtID0gb2xkVm5vZGUuZWxtO1xuXG4gICAgICBpZiAoaXNUcnVlKG9sZFZub2RlLmlzQXN5bmNQbGFjZWhvbGRlcikpIHtcbiAgICAgICAgaWYgKGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeS5yZXNvbHZlZCkpIHtcbiAgICAgICAgICBoeWRyYXRlKG9sZFZub2RlLmVsbSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gcmV1c2UgZWxlbWVudCBmb3Igc3RhdGljIHRyZWVzLlxuICAgICAgLy8gbm90ZSB3ZSBvbmx5IGRvIHRoaXMgaWYgdGhlIHZub2RlIGlzIGNsb25lZCAtXG4gICAgICAvLyBpZiB0aGUgbmV3IG5vZGUgaXMgbm90IGNsb25lZCBpdCBtZWFucyB0aGUgcmVuZGVyIGZ1bmN0aW9ucyBoYXZlIGJlZW5cbiAgICAgIC8vIHJlc2V0IGJ5IHRoZSBob3QtcmVsb2FkLWFwaSBhbmQgd2UgbmVlZCB0byBkbyBhIHByb3BlciByZS1yZW5kZXIuXG4gICAgICBpZiAoaXNUcnVlKHZub2RlLmlzU3RhdGljKSAmJlxuICAgICAgICBpc1RydWUob2xkVm5vZGUuaXNTdGF0aWMpICYmXG4gICAgICAgIHZub2RlLmtleSA9PT0gb2xkVm5vZGUua2V5ICYmXG4gICAgICAgIChpc1RydWUodm5vZGUuaXNDbG9uZWQpIHx8IGlzVHJ1ZSh2bm9kZS5pc09uY2UpKVxuICAgICAgKSB7XG4gICAgICAgIHZub2RlLmNvbXBvbmVudEluc3RhbmNlID0gb2xkVm5vZGUuY29tcG9uZW50SW5zdGFuY2U7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB2YXIgaTtcbiAgICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICAgIGlmIChpc0RlZihkYXRhKSAmJiBpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wcmVwYXRjaCkpIHtcbiAgICAgICAgaShvbGRWbm9kZSwgdm5vZGUpO1xuICAgICAgfVxuXG4gICAgICB2YXIgb2xkQ2ggPSBvbGRWbm9kZS5jaGlsZHJlbjtcbiAgICAgIHZhciBjaCA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgaWYgKGlzRGVmKGRhdGEpICYmIGlzUGF0Y2hhYmxlKHZub2RlKSkge1xuICAgICAgICBmb3IgKGkgPSAwOyBpIDwgY2JzLnVwZGF0ZS5sZW5ndGg7ICsraSkgeyBjYnMudXBkYXRlW2ldKG9sZFZub2RlLCB2bm9kZSk7IH1cbiAgICAgICAgaWYgKGlzRGVmKGkgPSBkYXRhLmhvb2spICYmIGlzRGVmKGkgPSBpLnVwZGF0ZSkpIHsgaShvbGRWbm9kZSwgdm5vZGUpOyB9XG4gICAgICB9XG4gICAgICBpZiAoaXNVbmRlZih2bm9kZS50ZXh0KSkge1xuICAgICAgICBpZiAoaXNEZWYob2xkQ2gpICYmIGlzRGVmKGNoKSkge1xuICAgICAgICAgIGlmIChvbGRDaCAhPT0gY2gpIHsgdXBkYXRlQ2hpbGRyZW4oZWxtLCBvbGRDaCwgY2gsIGluc2VydGVkVm5vZGVRdWV1ZSwgcmVtb3ZlT25seSk7IH1cbiAgICAgICAgfSBlbHNlIGlmIChpc0RlZihjaCkpIHtcbiAgICAgICAgICB7XG4gICAgICAgICAgICBjaGVja0R1cGxpY2F0ZUtleXMoY2gpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHsgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sICcnKTsgfVxuICAgICAgICAgIGFkZFZub2RlcyhlbG0sIG51bGwsIGNoLCAwLCBjaC5sZW5ndGggLSAxLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICB9IGVsc2UgaWYgKGlzRGVmKG9sZENoKSkge1xuICAgICAgICAgIHJlbW92ZVZub2RlcyhvbGRDaCwgMCwgb2xkQ2gubGVuZ3RoIC0gMSk7XG4gICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGV4dCkpIHtcbiAgICAgICAgICBub2RlT3BzLnNldFRleHRDb250ZW50KGVsbSwgJycpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKG9sZFZub2RlLnRleHQgIT09IHZub2RlLnRleHQpIHtcbiAgICAgICAgbm9kZU9wcy5zZXRUZXh0Q29udGVudChlbG0sIHZub2RlLnRleHQpO1xuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5wb3N0cGF0Y2gpKSB7IGkob2xkVm5vZGUsIHZub2RlKTsgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGludm9rZUluc2VydEhvb2sgKHZub2RlLCBxdWV1ZSwgaW5pdGlhbCkge1xuICAgICAgLy8gZGVsYXkgaW5zZXJ0IGhvb2tzIGZvciBjb21wb25lbnQgcm9vdCBub2RlcywgaW52b2tlIHRoZW0gYWZ0ZXIgdGhlXG4gICAgICAvLyBlbGVtZW50IGlzIHJlYWxseSBpbnNlcnRlZFxuICAgICAgaWYgKGlzVHJ1ZShpbml0aWFsKSAmJiBpc0RlZih2bm9kZS5wYXJlbnQpKSB7XG4gICAgICAgIHZub2RlLnBhcmVudC5kYXRhLnBlbmRpbmdJbnNlcnQgPSBxdWV1ZTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgcXVldWUubGVuZ3RoOyArK2kpIHtcbiAgICAgICAgICBxdWV1ZVtpXS5kYXRhLmhvb2suaW5zZXJ0KHF1ZXVlW2ldKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBoeWRyYXRpb25CYWlsZWQgPSBmYWxzZTtcbiAgICAvLyBsaXN0IG9mIG1vZHVsZXMgdGhhdCBjYW4gc2tpcCBjcmVhdGUgaG9vayBkdXJpbmcgaHlkcmF0aW9uIGJlY2F1c2UgdGhleVxuICAgIC8vIGFyZSBhbHJlYWR5IHJlbmRlcmVkIG9uIHRoZSBjbGllbnQgb3IgaGFzIG5vIG5lZWQgZm9yIGluaXRpYWxpemF0aW9uXG4gICAgLy8gTm90ZTogc3R5bGUgaXMgZXhjbHVkZWQgYmVjYXVzZSBpdCByZWxpZXMgb24gaW5pdGlhbCBjbG9uZSBmb3IgZnV0dXJlXG4gICAgLy8gZGVlcCB1cGRhdGVzICgjNzA2MykuXG4gICAgdmFyIGlzUmVuZGVyZWRNb2R1bGUgPSBtYWtlTWFwKCdhdHRycyxjbGFzcyxzdGF0aWNDbGFzcyxzdGF0aWNTdHlsZSxrZXknKTtcblxuICAgIC8vIE5vdGU6IHRoaXMgaXMgYSBicm93c2VyLW9ubHkgZnVuY3Rpb24gc28gd2UgY2FuIGFzc3VtZSBlbG1zIGFyZSBET00gbm9kZXMuXG4gICAgZnVuY3Rpb24gaHlkcmF0ZSAoZWxtLCB2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCBpblZQcmUpIHtcbiAgICAgIHZhciBpO1xuICAgICAgdmFyIHRhZyA9IHZub2RlLnRhZztcbiAgICAgIHZhciBkYXRhID0gdm5vZGUuZGF0YTtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHZub2RlLmNoaWxkcmVuO1xuICAgICAgaW5WUHJlID0gaW5WUHJlIHx8IChkYXRhICYmIGRhdGEucHJlKTtcbiAgICAgIHZub2RlLmVsbSA9IGVsbTtcblxuICAgICAgaWYgKGlzVHJ1ZSh2bm9kZS5pc0NvbW1lbnQpICYmIGlzRGVmKHZub2RlLmFzeW5jRmFjdG9yeSkpIHtcbiAgICAgICAgdm5vZGUuaXNBc3luY1BsYWNlaG9sZGVyID0gdHJ1ZTtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICAgIC8vIGFzc2VydCBub2RlIG1hdGNoXG4gICAgICB7XG4gICAgICAgIGlmICghYXNzZXJ0Tm9kZU1hdGNoKGVsbSwgdm5vZGUsIGluVlByZSkpIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgIGlmIChpc0RlZihpID0gZGF0YS5ob29rKSAmJiBpc0RlZihpID0gaS5pbml0KSkgeyBpKHZub2RlLCB0cnVlIC8qIGh5ZHJhdGluZyAqLyk7IH1cbiAgICAgICAgaWYgKGlzRGVmKGkgPSB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSkpIHtcbiAgICAgICAgICAvLyBjaGlsZCBjb21wb25lbnQuIGl0IHNob3VsZCBoYXZlIGh5ZHJhdGVkIGl0cyBvd24gdHJlZS5cbiAgICAgICAgICBpbml0Q29tcG9uZW50KHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChpc0RlZih0YWcpKSB7XG4gICAgICAgIGlmIChpc0RlZihjaGlsZHJlbikpIHtcbiAgICAgICAgICAvLyBlbXB0eSBlbGVtZW50LCBhbGxvdyBjbGllbnQgdG8gcGljayB1cCBhbmQgcG9wdWxhdGUgY2hpbGRyZW5cbiAgICAgICAgICBpZiAoIWVsbS5oYXNDaGlsZE5vZGVzKCkpIHtcbiAgICAgICAgICAgIGNyZWF0ZUNoaWxkcmVuKHZub2RlLCBjaGlsZHJlbiwgaW5zZXJ0ZWRWbm9kZVF1ZXVlKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgLy8gdi1odG1sIGFuZCBkb21Qcm9wczogaW5uZXJIVE1MXG4gICAgICAgICAgICBpZiAoaXNEZWYoaSA9IGRhdGEpICYmIGlzRGVmKGkgPSBpLmRvbVByb3BzKSAmJiBpc0RlZihpID0gaS5pbm5lckhUTUwpKSB7XG4gICAgICAgICAgICAgIGlmIChpICE9PSBlbG0uaW5uZXJIVE1MKSB7XG4gICAgICAgICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgICAgICAgaWYgKHR5cGVvZiBjb25zb2xlICE9PSAndW5kZWZpbmVkJyAmJlxuICAgICAgICAgICAgICAgICAgIWh5ZHJhdGlvbkJhaWxlZFxuICAgICAgICAgICAgICAgICkge1xuICAgICAgICAgICAgICAgICAgaHlkcmF0aW9uQmFpbGVkID0gdHJ1ZTtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignUGFyZW50OiAnLCBlbG0pO1xuICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdzZXJ2ZXIgaW5uZXJIVE1MOiAnLCBpKTtcbiAgICAgICAgICAgICAgICAgIGNvbnNvbGUud2FybignY2xpZW50IGlubmVySFRNTDogJywgZWxtLmlubmVySFRNTCk7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIHJldHVybiBmYWxzZVxuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgICAvLyBpdGVyYXRlIGFuZCBjb21wYXJlIGNoaWxkcmVuIGxpc3RzXG4gICAgICAgICAgICAgIHZhciBjaGlsZHJlbk1hdGNoID0gdHJ1ZTtcbiAgICAgICAgICAgICAgdmFyIGNoaWxkTm9kZSA9IGVsbS5maXJzdENoaWxkO1xuICAgICAgICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBjaGlsZHJlbi5sZW5ndGg7IGkkMSsrKSB7XG4gICAgICAgICAgICAgICAgaWYgKCFjaGlsZE5vZGUgfHwgIWh5ZHJhdGUoY2hpbGROb2RlLCBjaGlsZHJlbltpJDFdLCBpbnNlcnRlZFZub2RlUXVldWUsIGluVlByZSkpIHtcbiAgICAgICAgICAgICAgICAgIGNoaWxkcmVuTWF0Y2ggPSBmYWxzZTtcbiAgICAgICAgICAgICAgICAgIGJyZWFrXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgIGNoaWxkTm9kZSA9IGNoaWxkTm9kZS5uZXh0U2libGluZztcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAvLyBpZiBjaGlsZE5vZGUgaXMgbm90IG51bGwsIGl0IG1lYW5zIHRoZSBhY3R1YWwgY2hpbGROb2RlcyBsaXN0IGlzXG4gICAgICAgICAgICAgIC8vIGxvbmdlciB0aGFuIHRoZSB2aXJ0dWFsIGNoaWxkcmVuIGxpc3QuXG4gICAgICAgICAgICAgIGlmICghY2hpbGRyZW5NYXRjaCB8fCBjaGlsZE5vZGUpIHtcbiAgICAgICAgICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgICAgICAgICBpZiAodHlwZW9mIGNvbnNvbGUgIT09ICd1bmRlZmluZWQnICYmXG4gICAgICAgICAgICAgICAgICAhaHlkcmF0aW9uQmFpbGVkXG4gICAgICAgICAgICAgICAgKSB7XG4gICAgICAgICAgICAgICAgICBoeWRyYXRpb25CYWlsZWQgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgY29uc29sZS53YXJuKCdQYXJlbnQ6ICcsIGVsbSk7XG4gICAgICAgICAgICAgICAgICBjb25zb2xlLndhcm4oJ01pc21hdGNoaW5nIGNoaWxkTm9kZXMgdnMuIFZOb2RlczogJywgZWxtLmNoaWxkTm9kZXMsIGNoaWxkcmVuKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGlzRGVmKGRhdGEpKSB7XG4gICAgICAgICAgdmFyIGZ1bGxJbnZva2UgPSBmYWxzZTtcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gZGF0YSkge1xuICAgICAgICAgICAgaWYgKCFpc1JlbmRlcmVkTW9kdWxlKGtleSkpIHtcbiAgICAgICAgICAgICAgZnVsbEludm9rZSA9IHRydWU7XG4gICAgICAgICAgICAgIGludm9rZUNyZWF0ZUhvb2tzKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpO1xuICAgICAgICAgICAgICBicmVha1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoIWZ1bGxJbnZva2UgJiYgZGF0YVsnY2xhc3MnXSkge1xuICAgICAgICAgICAgLy8gZW5zdXJlIGNvbGxlY3RpbmcgZGVwcyBmb3IgZGVlcCBjbGFzcyBiaW5kaW5ncyBmb3IgZnV0dXJlIHVwZGF0ZXNcbiAgICAgICAgICAgIHRyYXZlcnNlKGRhdGFbJ2NsYXNzJ10pO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChlbG0uZGF0YSAhPT0gdm5vZGUudGV4dCkge1xuICAgICAgICBlbG0uZGF0YSA9IHZub2RlLnRleHQ7XG4gICAgICB9XG4gICAgICByZXR1cm4gdHJ1ZVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGFzc2VydE5vZGVNYXRjaCAobm9kZSwgdm5vZGUsIGluVlByZSkge1xuICAgICAgaWYgKGlzRGVmKHZub2RlLnRhZykpIHtcbiAgICAgICAgcmV0dXJuIHZub2RlLnRhZy5pbmRleE9mKCd2dWUtY29tcG9uZW50JykgPT09IDAgfHwgKFxuICAgICAgICAgICFpc1Vua25vd25FbGVtZW50JCQxKHZub2RlLCBpblZQcmUpICYmXG4gICAgICAgICAgdm5vZGUudGFnLnRvTG93ZXJDYXNlKCkgPT09IChub2RlLnRhZ05hbWUgJiYgbm9kZS50YWdOYW1lLnRvTG93ZXJDYXNlKCkpXG4gICAgICAgIClcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJldHVybiBub2RlLm5vZGVUeXBlID09PSAodm5vZGUuaXNDb21tZW50ID8gOCA6IDMpXG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBhdGNoIChvbGRWbm9kZSwgdm5vZGUsIGh5ZHJhdGluZywgcmVtb3ZlT25seSkge1xuICAgICAgaWYgKGlzVW5kZWYodm5vZGUpKSB7XG4gICAgICAgIGlmIChpc0RlZihvbGRWbm9kZSkpIHsgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpOyB9XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICB2YXIgaXNJbml0aWFsUGF0Y2ggPSBmYWxzZTtcbiAgICAgIHZhciBpbnNlcnRlZFZub2RlUXVldWUgPSBbXTtcblxuICAgICAgaWYgKGlzVW5kZWYob2xkVm5vZGUpKSB7XG4gICAgICAgIC8vIGVtcHR5IG1vdW50IChsaWtlbHkgYXMgY29tcG9uZW50KSwgY3JlYXRlIG5ldyByb290IGVsZW1lbnRcbiAgICAgICAgaXNJbml0aWFsUGF0Y2ggPSB0cnVlO1xuICAgICAgICBjcmVhdGVFbG0odm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgaXNSZWFsRWxlbWVudCA9IGlzRGVmKG9sZFZub2RlLm5vZGVUeXBlKTtcbiAgICAgICAgaWYgKCFpc1JlYWxFbGVtZW50ICYmIHNhbWVWbm9kZShvbGRWbm9kZSwgdm5vZGUpKSB7XG4gICAgICAgICAgLy8gcGF0Y2ggZXhpc3Rpbmcgcm9vdCBub2RlXG4gICAgICAgICAgcGF0Y2hWbm9kZShvbGRWbm9kZSwgdm5vZGUsIGluc2VydGVkVm5vZGVRdWV1ZSwgbnVsbCwgbnVsbCwgcmVtb3ZlT25seSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGlzUmVhbEVsZW1lbnQpIHtcbiAgICAgICAgICAgIC8vIG1vdW50aW5nIHRvIGEgcmVhbCBlbGVtZW50XG4gICAgICAgICAgICAvLyBjaGVjayBpZiB0aGlzIGlzIHNlcnZlci1yZW5kZXJlZCBjb250ZW50IGFuZCBpZiB3ZSBjYW4gcGVyZm9ybVxuICAgICAgICAgICAgLy8gYSBzdWNjZXNzZnVsIGh5ZHJhdGlvbi5cbiAgICAgICAgICAgIGlmIChvbGRWbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiBvbGRWbm9kZS5oYXNBdHRyaWJ1dGUoU1NSX0FUVFIpKSB7XG4gICAgICAgICAgICAgIG9sZFZub2RlLnJlbW92ZUF0dHJpYnV0ZShTU1JfQVRUUik7XG4gICAgICAgICAgICAgIGh5ZHJhdGluZyA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoaXNUcnVlKGh5ZHJhdGluZykpIHtcbiAgICAgICAgICAgICAgaWYgKGh5ZHJhdGUob2xkVm5vZGUsIHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUpKSB7XG4gICAgICAgICAgICAgICAgaW52b2tlSW5zZXJ0SG9vayh2bm9kZSwgaW5zZXJ0ZWRWbm9kZVF1ZXVlLCB0cnVlKTtcbiAgICAgICAgICAgICAgICByZXR1cm4gb2xkVm5vZGVcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgICAgJ1RoZSBjbGllbnQtc2lkZSByZW5kZXJlZCB2aXJ0dWFsIERPTSB0cmVlIGlzIG5vdCBtYXRjaGluZyAnICtcbiAgICAgICAgICAgICAgICAgICdzZXJ2ZXItcmVuZGVyZWQgY29udGVudC4gVGhpcyBpcyBsaWtlbHkgY2F1c2VkIGJ5IGluY29ycmVjdCAnICtcbiAgICAgICAgICAgICAgICAgICdIVE1MIG1hcmt1cCwgZm9yIGV4YW1wbGUgbmVzdGluZyBibG9jay1sZXZlbCBlbGVtZW50cyBpbnNpZGUgJyArXG4gICAgICAgICAgICAgICAgICAnPHA+LCBvciBtaXNzaW5nIDx0Ym9keT4uIEJhaWxpbmcgaHlkcmF0aW9uIGFuZCBwZXJmb3JtaW5nICcgK1xuICAgICAgICAgICAgICAgICAgJ2Z1bGwgY2xpZW50LXNpZGUgcmVuZGVyLidcbiAgICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICAvLyBlaXRoZXIgbm90IHNlcnZlci1yZW5kZXJlZCwgb3IgaHlkcmF0aW9uIGZhaWxlZC5cbiAgICAgICAgICAgIC8vIGNyZWF0ZSBhbiBlbXB0eSBub2RlIGFuZCByZXBsYWNlIGl0XG4gICAgICAgICAgICBvbGRWbm9kZSA9IGVtcHR5Tm9kZUF0KG9sZFZub2RlKTtcbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyByZXBsYWNpbmcgZXhpc3RpbmcgZWxlbWVudFxuICAgICAgICAgIHZhciBvbGRFbG0gPSBvbGRWbm9kZS5lbG07XG4gICAgICAgICAgdmFyIHBhcmVudEVsbSA9IG5vZGVPcHMucGFyZW50Tm9kZShvbGRFbG0pO1xuXG4gICAgICAgICAgLy8gY3JlYXRlIG5ldyBub2RlXG4gICAgICAgICAgY3JlYXRlRWxtKFxuICAgICAgICAgICAgdm5vZGUsXG4gICAgICAgICAgICBpbnNlcnRlZFZub2RlUXVldWUsXG4gICAgICAgICAgICAvLyBleHRyZW1lbHkgcmFyZSBlZGdlIGNhc2U6IGRvIG5vdCBpbnNlcnQgaWYgb2xkIGVsZW1lbnQgaXMgaW4gYVxuICAgICAgICAgICAgLy8gbGVhdmluZyB0cmFuc2l0aW9uLiBPbmx5IGhhcHBlbnMgd2hlbiBjb21iaW5pbmcgdHJhbnNpdGlvbiArXG4gICAgICAgICAgICAvLyBrZWVwLWFsaXZlICsgSE9Dcy4gKCM0NTkwKVxuICAgICAgICAgICAgb2xkRWxtLl9sZWF2ZUNiID8gbnVsbCA6IHBhcmVudEVsbSxcbiAgICAgICAgICAgIG5vZGVPcHMubmV4dFNpYmxpbmcob2xkRWxtKVxuICAgICAgICAgICk7XG5cbiAgICAgICAgICAvLyB1cGRhdGUgcGFyZW50IHBsYWNlaG9sZGVyIG5vZGUgZWxlbWVudCwgcmVjdXJzaXZlbHlcbiAgICAgICAgICBpZiAoaXNEZWYodm5vZGUucGFyZW50KSkge1xuICAgICAgICAgICAgdmFyIGFuY2VzdG9yID0gdm5vZGUucGFyZW50O1xuICAgICAgICAgICAgdmFyIHBhdGNoYWJsZSA9IGlzUGF0Y2hhYmxlKHZub2RlKTtcbiAgICAgICAgICAgIHdoaWxlIChhbmNlc3Rvcikge1xuICAgICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGNicy5kZXN0cm95Lmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgY2JzLmRlc3Ryb3lbaV0oYW5jZXN0b3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGFuY2VzdG9yLmVsbSA9IHZub2RlLmVsbTtcbiAgICAgICAgICAgICAgaWYgKHBhdGNoYWJsZSkge1xuICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMSA9IDA7IGkkMSA8IGNicy5jcmVhdGUubGVuZ3RoOyArK2kkMSkge1xuICAgICAgICAgICAgICAgICAgY2JzLmNyZWF0ZVtpJDFdKGVtcHR5Tm9kZSwgYW5jZXN0b3IpO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAvLyAjNjUxM1xuICAgICAgICAgICAgICAgIC8vIGludm9rZSBpbnNlcnQgaG9va3MgdGhhdCBtYXkgaGF2ZSBiZWVuIG1lcmdlZCBieSBjcmVhdGUgaG9va3MuXG4gICAgICAgICAgICAgICAgLy8gZS5nLiBmb3IgZGlyZWN0aXZlcyB0aGF0IHVzZXMgdGhlIFwiaW5zZXJ0ZWRcIiBob29rLlxuICAgICAgICAgICAgICAgIHZhciBpbnNlcnQgPSBhbmNlc3Rvci5kYXRhLmhvb2suaW5zZXJ0O1xuICAgICAgICAgICAgICAgIGlmIChpbnNlcnQubWVyZ2VkKSB7XG4gICAgICAgICAgICAgICAgICAvLyBzdGFydCBhdCBpbmRleCAxIHRvIGF2b2lkIHJlLWludm9raW5nIGNvbXBvbmVudCBtb3VudGVkIGhvb2tcbiAgICAgICAgICAgICAgICAgIGZvciAodmFyIGkkMiA9IDE7IGkkMiA8IGluc2VydC5mbnMubGVuZ3RoOyBpJDIrKykge1xuICAgICAgICAgICAgICAgICAgICBpbnNlcnQuZm5zW2kkMl0oKTtcbiAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgcmVnaXN0ZXJSZWYoYW5jZXN0b3IpO1xuICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIGFuY2VzdG9yID0gYW5jZXN0b3IucGFyZW50O1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIGRlc3Ryb3kgb2xkIG5vZGVcbiAgICAgICAgICBpZiAoaXNEZWYocGFyZW50RWxtKSkge1xuICAgICAgICAgICAgcmVtb3ZlVm5vZGVzKFtvbGRWbm9kZV0sIDAsIDApO1xuICAgICAgICAgIH0gZWxzZSBpZiAoaXNEZWYob2xkVm5vZGUudGFnKSkge1xuICAgICAgICAgICAgaW52b2tlRGVzdHJveUhvb2sob2xkVm5vZGUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICBpbnZva2VJbnNlcnRIb29rKHZub2RlLCBpbnNlcnRlZFZub2RlUXVldWUsIGlzSW5pdGlhbFBhdGNoKTtcbiAgICAgIHJldHVybiB2bm9kZS5lbG1cbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgZGlyZWN0aXZlcyA9IHtcbiAgICBjcmVhdGU6IHVwZGF0ZURpcmVjdGl2ZXMsXG4gICAgdXBkYXRlOiB1cGRhdGVEaXJlY3RpdmVzLFxuICAgIGRlc3Ryb3k6IGZ1bmN0aW9uIHVuYmluZERpcmVjdGl2ZXMgKHZub2RlKSB7XG4gICAgICB1cGRhdGVEaXJlY3RpdmVzKHZub2RlLCBlbXB0eU5vZGUpO1xuICAgIH1cbiAgfTtcblxuICBmdW5jdGlvbiB1cGRhdGVEaXJlY3RpdmVzIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICBpZiAob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzIHx8IHZub2RlLmRhdGEuZGlyZWN0aXZlcykge1xuICAgICAgX3VwZGF0ZShvbGRWbm9kZSwgdm5vZGUpO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF91cGRhdGUgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBpc0NyZWF0ZSA9IG9sZFZub2RlID09PSBlbXB0eU5vZGU7XG4gICAgdmFyIGlzRGVzdHJveSA9IHZub2RlID09PSBlbXB0eU5vZGU7XG4gICAgdmFyIG9sZERpcnMgPSBub3JtYWxpemVEaXJlY3RpdmVzJDEob2xkVm5vZGUuZGF0YS5kaXJlY3RpdmVzLCBvbGRWbm9kZS5jb250ZXh0KTtcbiAgICB2YXIgbmV3RGlycyA9IG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSh2bm9kZS5kYXRhLmRpcmVjdGl2ZXMsIHZub2RlLmNvbnRleHQpO1xuXG4gICAgdmFyIGRpcnNXaXRoSW5zZXJ0ID0gW107XG4gICAgdmFyIGRpcnNXaXRoUG9zdHBhdGNoID0gW107XG5cbiAgICB2YXIga2V5LCBvbGREaXIsIGRpcjtcbiAgICBmb3IgKGtleSBpbiBuZXdEaXJzKSB7XG4gICAgICBvbGREaXIgPSBvbGREaXJzW2tleV07XG4gICAgICBkaXIgPSBuZXdEaXJzW2tleV07XG4gICAgICBpZiAoIW9sZERpcikge1xuICAgICAgICAvLyBuZXcgZGlyZWN0aXZlLCBiaW5kXG4gICAgICAgIGNhbGxIb29rJDEoZGlyLCAnYmluZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICAgIGlmIChkaXIuZGVmICYmIGRpci5kZWYuaW5zZXJ0ZWQpIHtcbiAgICAgICAgICBkaXJzV2l0aEluc2VydC5wdXNoKGRpcik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIGV4aXN0aW5nIGRpcmVjdGl2ZSwgdXBkYXRlXG4gICAgICAgIGRpci5vbGRWYWx1ZSA9IG9sZERpci52YWx1ZTtcbiAgICAgICAgZGlyLm9sZEFyZyA9IG9sZERpci5hcmc7XG4gICAgICAgIGNhbGxIb29rJDEoZGlyLCAndXBkYXRlJywgdm5vZGUsIG9sZFZub2RlKTtcbiAgICAgICAgaWYgKGRpci5kZWYgJiYgZGlyLmRlZi5jb21wb25lbnRVcGRhdGVkKSB7XG4gICAgICAgICAgZGlyc1dpdGhQb3N0cGF0Y2gucHVzaChkaXIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpcnNXaXRoSW5zZXJ0Lmxlbmd0aCkge1xuICAgICAgdmFyIGNhbGxJbnNlcnQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhJbnNlcnQubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoSW5zZXJ0W2ldLCAnaW5zZXJ0ZWQnLCB2bm9kZSwgb2xkVm5vZGUpO1xuICAgICAgICB9XG4gICAgICB9O1xuICAgICAgaWYgKGlzQ3JlYXRlKSB7XG4gICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAnaW5zZXJ0JywgY2FsbEluc2VydCk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjYWxsSW5zZXJ0KCk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGRpcnNXaXRoUG9zdHBhdGNoLmxlbmd0aCkge1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdwb3N0cGF0Y2gnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgZGlyc1dpdGhQb3N0cGF0Y2gubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgICBjYWxsSG9vayQxKGRpcnNXaXRoUG9zdHBhdGNoW2ldLCAnY29tcG9uZW50VXBkYXRlZCcsIHZub2RlLCBvbGRWbm9kZSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH1cblxuICAgIGlmICghaXNDcmVhdGUpIHtcbiAgICAgIGZvciAoa2V5IGluIG9sZERpcnMpIHtcbiAgICAgICAgaWYgKCFuZXdEaXJzW2tleV0pIHtcbiAgICAgICAgICAvLyBubyBsb25nZXIgcHJlc2VudCwgdW5iaW5kXG4gICAgICAgICAgY2FsbEhvb2skMShvbGREaXJzW2tleV0sICd1bmJpbmQnLCBvbGRWbm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgZW1wdHlNb2RpZmllcnMgPSBPYmplY3QuY3JlYXRlKG51bGwpO1xuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZURpcmVjdGl2ZXMkMSAoXG4gICAgZGlycyxcbiAgICB2bVxuICApIHtcbiAgICB2YXIgcmVzID0gT2JqZWN0LmNyZWF0ZShudWxsKTtcbiAgICBpZiAoIWRpcnMpIHtcbiAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgcmV0dXJuIHJlc1xuICAgIH1cbiAgICB2YXIgaSwgZGlyO1xuICAgIGZvciAoaSA9IDA7IGkgPCBkaXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICBkaXIgPSBkaXJzW2ldO1xuICAgICAgaWYgKCFkaXIubW9kaWZpZXJzKSB7XG4gICAgICAgIC8vICRmbG93LWRpc2FibGUtbGluZVxuICAgICAgICBkaXIubW9kaWZpZXJzID0gZW1wdHlNb2RpZmllcnM7XG4gICAgICB9XG4gICAgICByZXNbZ2V0UmF3RGlyTmFtZShkaXIpXSA9IGRpcjtcbiAgICAgIGRpci5kZWYgPSByZXNvbHZlQXNzZXQodm0uJG9wdGlvbnMsICdkaXJlY3RpdmVzJywgZGlyLm5hbWUsIHRydWUpO1xuICAgIH1cbiAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBmdW5jdGlvbiBnZXRSYXdEaXJOYW1lIChkaXIpIHtcbiAgICByZXR1cm4gZGlyLnJhd05hbWUgfHwgKChkaXIubmFtZSkgKyBcIi5cIiArIChPYmplY3Qua2V5cyhkaXIubW9kaWZpZXJzIHx8IHt9KS5qb2luKCcuJykpKVxuICB9XG5cbiAgZnVuY3Rpb24gY2FsbEhvb2skMSAoZGlyLCBob29rLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSkge1xuICAgIHZhciBmbiA9IGRpci5kZWYgJiYgZGlyLmRlZltob29rXTtcbiAgICBpZiAoZm4pIHtcbiAgICAgIHRyeSB7XG4gICAgICAgIGZuKHZub2RlLmVsbSwgZGlyLCB2bm9kZSwgb2xkVm5vZGUsIGlzRGVzdHJveSk7XG4gICAgICB9IGNhdGNoIChlKSB7XG4gICAgICAgIGhhbmRsZUVycm9yKGUsIHZub2RlLmNvbnRleHQsIChcImRpcmVjdGl2ZSBcIiArIChkaXIubmFtZSkgKyBcIiBcIiArIGhvb2sgKyBcIiBob29rXCIpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgYmFzZU1vZHVsZXMgPSBbXG4gICAgcmVmLFxuICAgIGRpcmVjdGl2ZXNcbiAgXTtcblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiB1cGRhdGVBdHRycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgdmFyIG9wdHMgPSB2bm9kZS5jb21wb25lbnRPcHRpb25zO1xuICAgIGlmIChpc0RlZihvcHRzKSAmJiBvcHRzLkN0b3Iub3B0aW9ucy5pbmhlcml0QXR0cnMgPT09IGZhbHNlKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5hdHRycykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmF0dHJzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBrZXksIGN1ciwgb2xkO1xuICAgIHZhciBlbG0gPSB2bm9kZS5lbG07XG4gICAgdmFyIG9sZEF0dHJzID0gb2xkVm5vZGUuZGF0YS5hdHRycyB8fCB7fTtcbiAgICB2YXIgYXR0cnMgPSB2bm9kZS5kYXRhLmF0dHJzIHx8IHt9O1xuICAgIC8vIGNsb25lIG9ic2VydmVkIG9iamVjdHMsIGFzIHRoZSB1c2VyIHByb2JhYmx5IHdhbnRzIHRvIG11dGF0ZSBpdFxuICAgIGlmIChpc0RlZihhdHRycy5fX29iX18pKSB7XG4gICAgICBhdHRycyA9IHZub2RlLmRhdGEuYXR0cnMgPSBleHRlbmQoe30sIGF0dHJzKTtcbiAgICB9XG5cbiAgICBmb3IgKGtleSBpbiBhdHRycykge1xuICAgICAgY3VyID0gYXR0cnNba2V5XTtcbiAgICAgIG9sZCA9IG9sZEF0dHJzW2tleV07XG4gICAgICBpZiAob2xkICE9PSBjdXIpIHtcbiAgICAgICAgc2V0QXR0cihlbG0sIGtleSwgY3VyLCB2bm9kZS5kYXRhLnByZSk7XG4gICAgICB9XG4gICAgfVxuICAgIC8vICM0MzkxOiBpbiBJRTksIHNldHRpbmcgdHlwZSBjYW4gcmVzZXQgdmFsdWUgZm9yIGlucHV0W3R5cGU9cmFkaW9dXG4gICAgLy8gIzY2NjY6IElFL0VkZ2UgZm9yY2VzIHByb2dyZXNzIHZhbHVlIGRvd24gdG8gMSBiZWZvcmUgc2V0dGluZyBhIG1heFxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmICgoaXNJRSB8fCBpc0VkZ2UpICYmIGF0dHJzLnZhbHVlICE9PSBvbGRBdHRycy52YWx1ZSkge1xuICAgICAgc2V0QXR0cihlbG0sICd2YWx1ZScsIGF0dHJzLnZhbHVlKTtcbiAgICB9XG4gICAgZm9yIChrZXkgaW4gb2xkQXR0cnMpIHtcbiAgICAgIGlmIChpc1VuZGVmKGF0dHJzW2tleV0pKSB7XG4gICAgICAgIGlmIChpc1hsaW5rKGtleSkpIHtcbiAgICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlTlMoeGxpbmtOUywgZ2V0WGxpbmtQcm9wKGtleSkpO1xuICAgICAgICB9IGVsc2UgaWYgKCFpc0VudW1lcmF0ZWRBdHRyKGtleSkpIHtcbiAgICAgICAgICBlbG0ucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBzZXRBdHRyIChlbCwga2V5LCB2YWx1ZSwgaXNJblByZSkge1xuICAgIGlmIChpc0luUHJlIHx8IGVsLnRhZ05hbWUuaW5kZXhPZignLScpID4gLTEpIHtcbiAgICAgIGJhc2VTZXRBdHRyKGVsLCBrZXksIHZhbHVlKTtcbiAgICB9IGVsc2UgaWYgKGlzQm9vbGVhbkF0dHIoa2V5KSkge1xuICAgICAgLy8gc2V0IGF0dHJpYnV0ZSBmb3IgYmxhbmsgdmFsdWVcbiAgICAgIC8vIGUuZy4gPG9wdGlvbiBkaXNhYmxlZD5TZWxlY3Qgb25lPC9vcHRpb24+XG4gICAgICBpZiAoaXNGYWxzeUF0dHJWYWx1ZSh2YWx1ZSkpIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKGtleSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICAvLyB0ZWNobmljYWxseSBhbGxvd2Z1bGxzY3JlZW4gaXMgYSBib29sZWFuIGF0dHJpYnV0ZSBmb3IgPGlmcmFtZT4sXG4gICAgICAgIC8vIGJ1dCBGbGFzaCBleHBlY3RzIGEgdmFsdWUgb2YgXCJ0cnVlXCIgd2hlbiB1c2VkIG9uIDxlbWJlZD4gdGFnXG4gICAgICAgIHZhbHVlID0ga2V5ID09PSAnYWxsb3dmdWxsc2NyZWVuJyAmJiBlbC50YWdOYW1lID09PSAnRU1CRUQnXG4gICAgICAgICAgPyAndHJ1ZSdcbiAgICAgICAgICA6IGtleTtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoaXNFbnVtZXJhdGVkQXR0cihrZXkpKSB7XG4gICAgICBlbC5zZXRBdHRyaWJ1dGUoa2V5LCBjb252ZXJ0RW51bWVyYXRlZFZhbHVlKGtleSwgdmFsdWUpKTtcbiAgICB9IGVsc2UgaWYgKGlzWGxpbmsoa2V5KSkge1xuICAgICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZU5TKHhsaW5rTlMsIGdldFhsaW5rUHJvcChrZXkpKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZU5TKHhsaW5rTlMsIGtleSwgdmFsdWUpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBiYXNlU2V0QXR0cihlbCwga2V5LCB2YWx1ZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYmFzZVNldEF0dHIgKGVsLCBrZXksIHZhbHVlKSB7XG4gICAgaWYgKGlzRmFsc3lBdHRyVmFsdWUodmFsdWUpKSB7XG4gICAgICBlbC5yZW1vdmVBdHRyaWJ1dGUoa2V5KTtcbiAgICB9IGVsc2Uge1xuICAgICAgLy8gIzcxMzg6IElFMTAgJiAxMSBmaXJlcyBpbnB1dCBldmVudCB3aGVuIHNldHRpbmcgcGxhY2Vob2xkZXIgb25cbiAgICAgIC8vIDx0ZXh0YXJlYT4uLi4gYmxvY2sgdGhlIGZpcnN0IGlucHV0IGV2ZW50IGFuZCByZW1vdmUgdGhlIGJsb2NrZXJcbiAgICAgIC8vIGltbWVkaWF0ZWx5LlxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoXG4gICAgICAgIGlzSUUgJiYgIWlzSUU5ICYmXG4gICAgICAgIGVsLnRhZ05hbWUgPT09ICdURVhUQVJFQScgJiZcbiAgICAgICAga2V5ID09PSAncGxhY2Vob2xkZXInICYmIHZhbHVlICE9PSAnJyAmJiAhZWwuX19pZXBoXG4gICAgICApIHtcbiAgICAgICAgdmFyIGJsb2NrZXIgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgICAgIGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG4gICAgICAgICAgZWwucmVtb3ZlRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgICAgfTtcbiAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignaW5wdXQnLCBibG9ja2VyKTtcbiAgICAgICAgLy8gJGZsb3ctZGlzYWJsZS1saW5lXG4gICAgICAgIGVsLl9faWVwaCA9IHRydWU7IC8qIElFIHBsYWNlaG9sZGVyIHBhdGNoZWQgKi9cbiAgICAgIH1cbiAgICAgIGVsLnNldEF0dHJpYnV0ZShrZXksIHZhbHVlKTtcbiAgICB9XG4gIH1cblxuICB2YXIgYXR0cnMgPSB7XG4gICAgY3JlYXRlOiB1cGRhdGVBdHRycyxcbiAgICB1cGRhdGU6IHVwZGF0ZUF0dHJzXG4gIH07XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gdXBkYXRlQ2xhc3MgKG9sZFZub2RlLCB2bm9kZSkge1xuICAgIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuICAgIGlmIChcbiAgICAgIGlzVW5kZWYoZGF0YS5zdGF0aWNDbGFzcykgJiZcbiAgICAgIGlzVW5kZWYoZGF0YS5jbGFzcykgJiYgKFxuICAgICAgICBpc1VuZGVmKG9sZERhdGEpIHx8IChcbiAgICAgICAgICBpc1VuZGVmKG9sZERhdGEuc3RhdGljQ2xhc3MpICYmXG4gICAgICAgICAgaXNVbmRlZihvbGREYXRhLmNsYXNzKVxuICAgICAgICApXG4gICAgICApXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgY2xzID0gZ2VuQ2xhc3NGb3JWbm9kZSh2bm9kZSk7XG5cbiAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBjbGFzc2VzXG4gICAgdmFyIHRyYW5zaXRpb25DbGFzcyA9IGVsLl90cmFuc2l0aW9uQ2xhc3NlcztcbiAgICBpZiAoaXNEZWYodHJhbnNpdGlvbkNsYXNzKSkge1xuICAgICAgY2xzID0gY29uY2F0KGNscywgc3RyaW5naWZ5Q2xhc3ModHJhbnNpdGlvbkNsYXNzKSk7XG4gICAgfVxuXG4gICAgLy8gc2V0IHRoZSBjbGFzc1xuICAgIGlmIChjbHMgIT09IGVsLl9wcmV2Q2xhc3MpIHtcbiAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjbHMpO1xuICAgICAgZWwuX3ByZXZDbGFzcyA9IGNscztcbiAgICB9XG4gIH1cblxuICB2YXIga2xhc3MgPSB7XG4gICAgY3JlYXRlOiB1cGRhdGVDbGFzcyxcbiAgICB1cGRhdGU6IHVwZGF0ZUNsYXNzXG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIHZhbGlkRGl2aXNpb25DaGFyUkUgPSAvW1xcdykuK1xcLV8kXFxdXS87XG5cbiAgZnVuY3Rpb24gcGFyc2VGaWx0ZXJzIChleHApIHtcbiAgICB2YXIgaW5TaW5nbGUgPSBmYWxzZTtcbiAgICB2YXIgaW5Eb3VibGUgPSBmYWxzZTtcbiAgICB2YXIgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlO1xuICAgIHZhciBpblJlZ2V4ID0gZmFsc2U7XG4gICAgdmFyIGN1cmx5ID0gMDtcbiAgICB2YXIgc3F1YXJlID0gMDtcbiAgICB2YXIgcGFyZW4gPSAwO1xuICAgIHZhciBsYXN0RmlsdGVySW5kZXggPSAwO1xuICAgIHZhciBjLCBwcmV2LCBpLCBleHByZXNzaW9uLCBmaWx0ZXJzO1xuXG4gICAgZm9yIChpID0gMDsgaSA8IGV4cC5sZW5ndGg7IGkrKykge1xuICAgICAgcHJldiA9IGM7XG4gICAgICBjID0gZXhwLmNoYXJDb2RlQXQoaSk7XG4gICAgICBpZiAoaW5TaW5nbGUpIHtcbiAgICAgICAgaWYgKGMgPT09IDB4MjcgJiYgcHJldiAhPT0gMHg1QykgeyBpblNpbmdsZSA9IGZhbHNlOyB9XG4gICAgICB9IGVsc2UgaWYgKGluRG91YmxlKSB7XG4gICAgICAgIGlmIChjID09PSAweDIyICYmIHByZXYgIT09IDB4NUMpIHsgaW5Eb3VibGUgPSBmYWxzZTsgfVxuICAgICAgfSBlbHNlIGlmIChpblRlbXBsYXRlU3RyaW5nKSB7XG4gICAgICAgIGlmIChjID09PSAweDYwICYmIHByZXYgIT09IDB4NUMpIHsgaW5UZW1wbGF0ZVN0cmluZyA9IGZhbHNlOyB9XG4gICAgICB9IGVsc2UgaWYgKGluUmVnZXgpIHtcbiAgICAgICAgaWYgKGMgPT09IDB4MmYgJiYgcHJldiAhPT0gMHg1QykgeyBpblJlZ2V4ID0gZmFsc2U7IH1cbiAgICAgIH0gZWxzZSBpZiAoXG4gICAgICAgIGMgPT09IDB4N0MgJiYgLy8gcGlwZVxuICAgICAgICBleHAuY2hhckNvZGVBdChpICsgMSkgIT09IDB4N0MgJiZcbiAgICAgICAgZXhwLmNoYXJDb2RlQXQoaSAtIDEpICE9PSAweDdDICYmXG4gICAgICAgICFjdXJseSAmJiAhc3F1YXJlICYmICFwYXJlblxuICAgICAgKSB7XG4gICAgICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgICAgICAvLyBmaXJzdCBmaWx0ZXIsIGVuZCBvZiBleHByZXNzaW9uXG4gICAgICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gICAgICAgICAgZXhwcmVzc2lvbiA9IGV4cC5zbGljZSgwLCBpKS50cmltKCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgcHVzaEZpbHRlcigpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzd2l0Y2ggKGMpIHtcbiAgICAgICAgICBjYXNlIDB4MjI6IGluRG91YmxlID0gdHJ1ZTsgYnJlYWsgICAgICAgICAvLyBcIlxuICAgICAgICAgIGNhc2UgMHgyNzogaW5TaW5nbGUgPSB0cnVlOyBicmVhayAgICAgICAgIC8vICdcbiAgICAgICAgICBjYXNlIDB4NjA6IGluVGVtcGxhdGVTdHJpbmcgPSB0cnVlOyBicmVhayAvLyBgXG4gICAgICAgICAgY2FzZSAweDI4OiBwYXJlbisrOyBicmVhayAgICAgICAgICAgICAgICAgLy8gKFxuICAgICAgICAgIGNhc2UgMHgyOTogcGFyZW4tLTsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIClcbiAgICAgICAgICBjYXNlIDB4NUI6IHNxdWFyZSsrOyBicmVhayAgICAgICAgICAgICAgICAvLyBbXG4gICAgICAgICAgY2FzZSAweDVEOiBzcXVhcmUtLTsgYnJlYWsgICAgICAgICAgICAgICAgLy8gXVxuICAgICAgICAgIGNhc2UgMHg3QjogY3VybHkrKzsgYnJlYWsgICAgICAgICAgICAgICAgIC8vIHtcbiAgICAgICAgICBjYXNlIDB4N0Q6IGN1cmx5LS07IGJyZWFrICAgICAgICAgICAgICAgICAvLyB9XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGMgPT09IDB4MmYpIHsgLy8gL1xuICAgICAgICAgIHZhciBqID0gaSAtIDE7XG4gICAgICAgICAgdmFyIHAgPSAodm9pZCAwKTtcbiAgICAgICAgICAvLyBmaW5kIGZpcnN0IG5vbi13aGl0ZXNwYWNlIHByZXYgY2hhclxuICAgICAgICAgIGZvciAoOyBqID49IDA7IGotLSkge1xuICAgICAgICAgICAgcCA9IGV4cC5jaGFyQXQoaik7XG4gICAgICAgICAgICBpZiAocCAhPT0gJyAnKSB7IGJyZWFrIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKCFwIHx8ICF2YWxpZERpdmlzaW9uQ2hhclJFLnRlc3QocCkpIHtcbiAgICAgICAgICAgIGluUmVnZXggPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGlmIChleHByZXNzaW9uID09PSB1bmRlZmluZWQpIHtcbiAgICAgIGV4cHJlc3Npb24gPSBleHAuc2xpY2UoMCwgaSkudHJpbSgpO1xuICAgIH0gZWxzZSBpZiAobGFzdEZpbHRlckluZGV4ICE9PSAwKSB7XG4gICAgICBwdXNoRmlsdGVyKCk7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gcHVzaEZpbHRlciAoKSB7XG4gICAgICAoZmlsdGVycyB8fCAoZmlsdGVycyA9IFtdKSkucHVzaChleHAuc2xpY2UobGFzdEZpbHRlckluZGV4LCBpKS50cmltKCkpO1xuICAgICAgbGFzdEZpbHRlckluZGV4ID0gaSArIDE7XG4gICAgfVxuXG4gICAgaWYgKGZpbHRlcnMpIHtcbiAgICAgIGZvciAoaSA9IDA7IGkgPCBmaWx0ZXJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgIGV4cHJlc3Npb24gPSB3cmFwRmlsdGVyKGV4cHJlc3Npb24sIGZpbHRlcnNbaV0pO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiBleHByZXNzaW9uXG4gIH1cblxuICBmdW5jdGlvbiB3cmFwRmlsdGVyIChleHAsIGZpbHRlcikge1xuICAgIHZhciBpID0gZmlsdGVyLmluZGV4T2YoJygnKTtcbiAgICBpZiAoaSA8IDApIHtcbiAgICAgIC8vIF9mOiByZXNvbHZlRmlsdGVyXG4gICAgICByZXR1cm4gKFwiX2YoXFxcIlwiICsgZmlsdGVyICsgXCJcXFwiKShcIiArIGV4cCArIFwiKVwiKVxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbmFtZSA9IGZpbHRlci5zbGljZSgwLCBpKTtcbiAgICAgIHZhciBhcmdzID0gZmlsdGVyLnNsaWNlKGkgKyAxKTtcbiAgICAgIHJldHVybiAoXCJfZihcXFwiXCIgKyBuYW1lICsgXCJcXFwiKShcIiArIGV4cCArIChhcmdzICE9PSAnKScgPyAnLCcgKyBhcmdzIDogYXJncykpXG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cblxuXG4gIC8qIGVzbGludC1kaXNhYmxlIG5vLXVudXNlZC12YXJzICovXG4gIGZ1bmN0aW9uIGJhc2VXYXJuIChtc2csIHJhbmdlKSB7XG4gICAgY29uc29sZS5lcnJvcigoXCJbVnVlIGNvbXBpbGVyXTogXCIgKyBtc2cpKTtcbiAgfVxuICAvKiBlc2xpbnQtZW5hYmxlIG5vLXVudXNlZC12YXJzICovXG5cbiAgZnVuY3Rpb24gcGx1Y2tNb2R1bGVGdW5jdGlvbiAoXG4gICAgbW9kdWxlcyxcbiAgICBrZXlcbiAgKSB7XG4gICAgcmV0dXJuIG1vZHVsZXNcbiAgICAgID8gbW9kdWxlcy5tYXAoZnVuY3Rpb24gKG0pIHsgcmV0dXJuIG1ba2V5XTsgfSkuZmlsdGVyKGZ1bmN0aW9uIChfKSB7IHJldHVybiBfOyB9KVxuICAgICAgOiBbXVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkUHJvcCAoZWwsIG5hbWUsIHZhbHVlLCByYW5nZSwgZHluYW1pYykge1xuICAgIChlbC5wcm9wcyB8fCAoZWwucHJvcHMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHsgbmFtZTogbmFtZSwgdmFsdWU6IHZhbHVlLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKSk7XG4gICAgZWwucGxhaW4gPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEF0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UsIGR5bmFtaWMpIHtcbiAgICB2YXIgYXR0cnMgPSBkeW5hbWljXG4gICAgICA/IChlbC5keW5hbWljQXR0cnMgfHwgKGVsLmR5bmFtaWNBdHRycyA9IFtdKSlcbiAgICAgIDogKGVsLmF0dHJzIHx8IChlbC5hdHRycyA9IFtdKSk7XG4gICAgYXR0cnMucHVzaChyYW5nZVNldEl0ZW0oeyBuYW1lOiBuYW1lLCB2YWx1ZTogdmFsdWUsIGR5bmFtaWM6IGR5bmFtaWMgfSwgcmFuZ2UpKTtcbiAgICBlbC5wbGFpbiA9IGZhbHNlO1xuICB9XG5cbiAgLy8gYWRkIGEgcmF3IGF0dHIgKHVzZSB0aGlzIGluIHByZVRyYW5zZm9ybXMpXG4gIGZ1bmN0aW9uIGFkZFJhd0F0dHIgKGVsLCBuYW1lLCB2YWx1ZSwgcmFuZ2UpIHtcbiAgICBlbC5hdHRyc01hcFtuYW1lXSA9IHZhbHVlO1xuICAgIGVsLmF0dHJzTGlzdC5wdXNoKHJhbmdlU2V0SXRlbSh7IG5hbWU6IG5hbWUsIHZhbHVlOiB2YWx1ZSB9LCByYW5nZSkpO1xuICB9XG5cbiAgZnVuY3Rpb24gYWRkRGlyZWN0aXZlIChcbiAgICBlbCxcbiAgICBuYW1lLFxuICAgIHJhd05hbWUsXG4gICAgdmFsdWUsXG4gICAgYXJnLFxuICAgIGlzRHluYW1pY0FyZyxcbiAgICBtb2RpZmllcnMsXG4gICAgcmFuZ2VcbiAgKSB7XG4gICAgKGVsLmRpcmVjdGl2ZXMgfHwgKGVsLmRpcmVjdGl2ZXMgPSBbXSkpLnB1c2gocmFuZ2VTZXRJdGVtKHtcbiAgICAgIG5hbWU6IG5hbWUsXG4gICAgICByYXdOYW1lOiByYXdOYW1lLFxuICAgICAgdmFsdWU6IHZhbHVlLFxuICAgICAgYXJnOiBhcmcsXG4gICAgICBpc0R5bmFtaWNBcmc6IGlzRHluYW1pY0FyZyxcbiAgICAgIG1vZGlmaWVyczogbW9kaWZpZXJzXG4gICAgfSwgcmFuZ2UpKTtcbiAgICBlbC5wbGFpbiA9IGZhbHNlO1xuICB9XG5cbiAgZnVuY3Rpb24gcHJlcGVuZE1vZGlmaWVyTWFya2VyIChzeW1ib2wsIG5hbWUsIGR5bmFtaWMpIHtcbiAgICByZXR1cm4gZHluYW1pY1xuICAgICAgPyAoXCJfcChcIiArIG5hbWUgKyBcIixcXFwiXCIgKyBzeW1ib2wgKyBcIlxcXCIpXCIpXG4gICAgICA6IHN5bWJvbCArIG5hbWUgLy8gbWFyayB0aGUgZXZlbnQgYXMgY2FwdHVyZWRcbiAgfVxuXG4gIGZ1bmN0aW9uIGFkZEhhbmRsZXIgKFxuICAgIGVsLFxuICAgIG5hbWUsXG4gICAgdmFsdWUsXG4gICAgbW9kaWZpZXJzLFxuICAgIGltcG9ydGFudCxcbiAgICB3YXJuLFxuICAgIHJhbmdlLFxuICAgIGR5bmFtaWNcbiAgKSB7XG4gICAgbW9kaWZpZXJzID0gbW9kaWZpZXJzIHx8IGVtcHR5T2JqZWN0O1xuICAgIC8vIHdhcm4gcHJldmVudCBhbmQgcGFzc2l2ZSBtb2RpZmllclxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChcbiAgICAgIHdhcm4gJiZcbiAgICAgIG1vZGlmaWVycy5wcmV2ZW50ICYmIG1vZGlmaWVycy5wYXNzaXZlXG4gICAgKSB7XG4gICAgICB3YXJuKFxuICAgICAgICAncGFzc2l2ZSBhbmQgcHJldmVudCBjYW5cXCd0IGJlIHVzZWQgdG9nZXRoZXIuICcgK1xuICAgICAgICAnUGFzc2l2ZSBoYW5kbGVyIGNhblxcJ3QgcHJldmVudCBkZWZhdWx0IGV2ZW50LicsXG4gICAgICAgIHJhbmdlXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIG5vcm1hbGl6ZSBjbGljay5yaWdodCBhbmQgY2xpY2subWlkZGxlIHNpbmNlIHRoZXkgZG9uJ3QgYWN0dWFsbHkgZmlyZVxuICAgIC8vIHRoaXMgaXMgdGVjaG5pY2FsbHkgYnJvd3Nlci1zcGVjaWZpYywgYnV0IGF0IGxlYXN0IGZvciBub3cgYnJvd3NlcnMgYXJlXG4gICAgLy8gdGhlIG9ubHkgdGFyZ2V0IGVudnMgdGhhdCBoYXZlIHJpZ2h0L21pZGRsZSBjbGlja3MuXG4gICAgaWYgKG1vZGlmaWVycy5yaWdodCkge1xuICAgICAgaWYgKGR5bmFtaWMpIHtcbiAgICAgICAgbmFtZSA9IFwiKFwiICsgbmFtZSArIFwiKT09PSdjbGljayc/J2NvbnRleHRtZW51JzooXCIgKyBuYW1lICsgXCIpXCI7XG4gICAgICB9IGVsc2UgaWYgKG5hbWUgPT09ICdjbGljaycpIHtcbiAgICAgICAgbmFtZSA9ICdjb250ZXh0bWVudSc7XG4gICAgICAgIGRlbGV0ZSBtb2RpZmllcnMucmlnaHQ7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChtb2RpZmllcnMubWlkZGxlKSB7XG4gICAgICBpZiAoZHluYW1pYykge1xuICAgICAgICBuYW1lID0gXCIoXCIgKyBuYW1lICsgXCIpPT09J2NsaWNrJz8nbW91c2V1cCc6KFwiICsgbmFtZSArIFwiKVwiO1xuICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAnY2xpY2snKSB7XG4gICAgICAgIG5hbWUgPSAnbW91c2V1cCc7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLy8gY2hlY2sgY2FwdHVyZSBtb2RpZmllclxuICAgIGlmIChtb2RpZmllcnMuY2FwdHVyZSkge1xuICAgICAgZGVsZXRlIG1vZGlmaWVycy5jYXB0dXJlO1xuICAgICAgbmFtZSA9IHByZXBlbmRNb2RpZmllck1hcmtlcignIScsIG5hbWUsIGR5bmFtaWMpO1xuICAgIH1cbiAgICBpZiAobW9kaWZpZXJzLm9uY2UpIHtcbiAgICAgIGRlbGV0ZSBtb2RpZmllcnMub25jZTtcbiAgICAgIG5hbWUgPSBwcmVwZW5kTW9kaWZpZXJNYXJrZXIoJ34nLCBuYW1lLCBkeW5hbWljKTtcbiAgICB9XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKG1vZGlmaWVycy5wYXNzaXZlKSB7XG4gICAgICBkZWxldGUgbW9kaWZpZXJzLnBhc3NpdmU7XG4gICAgICBuYW1lID0gcHJlcGVuZE1vZGlmaWVyTWFya2VyKCcmJywgbmFtZSwgZHluYW1pYyk7XG4gICAgfVxuXG4gICAgdmFyIGV2ZW50cztcbiAgICBpZiAobW9kaWZpZXJzLm5hdGl2ZSkge1xuICAgICAgZGVsZXRlIG1vZGlmaWVycy5uYXRpdmU7XG4gICAgICBldmVudHMgPSBlbC5uYXRpdmVFdmVudHMgfHwgKGVsLm5hdGl2ZUV2ZW50cyA9IHt9KTtcbiAgICB9IGVsc2Uge1xuICAgICAgZXZlbnRzID0gZWwuZXZlbnRzIHx8IChlbC5ldmVudHMgPSB7fSk7XG4gICAgfVxuXG4gICAgdmFyIG5ld0hhbmRsZXIgPSByYW5nZVNldEl0ZW0oeyB2YWx1ZTogdmFsdWUudHJpbSgpLCBkeW5hbWljOiBkeW5hbWljIH0sIHJhbmdlKTtcbiAgICBpZiAobW9kaWZpZXJzICE9PSBlbXB0eU9iamVjdCkge1xuICAgICAgbmV3SGFuZGxlci5tb2RpZmllcnMgPSBtb2RpZmllcnM7XG4gICAgfVxuXG4gICAgdmFyIGhhbmRsZXJzID0gZXZlbnRzW25hbWVdO1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChBcnJheS5pc0FycmF5KGhhbmRsZXJzKSkge1xuICAgICAgaW1wb3J0YW50ID8gaGFuZGxlcnMudW5zaGlmdChuZXdIYW5kbGVyKSA6IGhhbmRsZXJzLnB1c2gobmV3SGFuZGxlcik7XG4gICAgfSBlbHNlIGlmIChoYW5kbGVycykge1xuICAgICAgZXZlbnRzW25hbWVdID0gaW1wb3J0YW50ID8gW25ld0hhbmRsZXIsIGhhbmRsZXJzXSA6IFtoYW5kbGVycywgbmV3SGFuZGxlcl07XG4gICAgfSBlbHNlIHtcbiAgICAgIGV2ZW50c1tuYW1lXSA9IG5ld0hhbmRsZXI7XG4gICAgfVxuXG4gICAgZWwucGxhaW4gPSBmYWxzZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFJhd0JpbmRpbmdBdHRyIChcbiAgICBlbCxcbiAgICBuYW1lXG4gICkge1xuICAgIHJldHVybiBlbC5yYXdBdHRyc01hcFsnOicgKyBuYW1lXSB8fFxuICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtYmluZDonICsgbmFtZV0gfHxcbiAgICAgIGVsLnJhd0F0dHJzTWFwW25hbWVdXG4gIH1cblxuICBmdW5jdGlvbiBnZXRCaW5kaW5nQXR0ciAoXG4gICAgZWwsXG4gICAgbmFtZSxcbiAgICBnZXRTdGF0aWNcbiAgKSB7XG4gICAgdmFyIGR5bmFtaWNWYWx1ZSA9XG4gICAgICBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnOicgKyBuYW1lKSB8fFxuICAgICAgZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtYmluZDonICsgbmFtZSk7XG4gICAgaWYgKGR5bmFtaWNWYWx1ZSAhPSBudWxsKSB7XG4gICAgICByZXR1cm4gcGFyc2VGaWx0ZXJzKGR5bmFtaWNWYWx1ZSlcbiAgICB9IGVsc2UgaWYgKGdldFN0YXRpYyAhPT0gZmFsc2UpIHtcbiAgICAgIHZhciBzdGF0aWNWYWx1ZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsIG5hbWUpO1xuICAgICAgaWYgKHN0YXRpY1ZhbHVlICE9IG51bGwpIHtcbiAgICAgICAgcmV0dXJuIEpTT04uc3RyaW5naWZ5KHN0YXRpY1ZhbHVlKVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIG5vdGU6IHRoaXMgb25seSByZW1vdmVzIHRoZSBhdHRyIGZyb20gdGhlIEFycmF5IChhdHRyc0xpc3QpIHNvIHRoYXQgaXRcbiAgLy8gZG9lc24ndCBnZXQgcHJvY2Vzc2VkIGJ5IHByb2Nlc3NBdHRycy5cbiAgLy8gQnkgZGVmYXVsdCBpdCBkb2VzIE5PVCByZW1vdmUgaXQgZnJvbSB0aGUgbWFwIChhdHRyc01hcCkgYmVjYXVzZSB0aGUgbWFwIGlzXG4gIC8vIG5lZWRlZCBkdXJpbmcgY29kZWdlbi5cbiAgZnVuY3Rpb24gZ2V0QW5kUmVtb3ZlQXR0ciAoXG4gICAgZWwsXG4gICAgbmFtZSxcbiAgICByZW1vdmVGcm9tTWFwXG4gICkge1xuICAgIHZhciB2YWw7XG4gICAgaWYgKCh2YWwgPSBlbC5hdHRyc01hcFtuYW1lXSkgIT0gbnVsbCkge1xuICAgICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgICBmb3IgKHZhciBpID0gMCwgbCA9IGxpc3QubGVuZ3RoOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIGlmIChsaXN0W2ldLm5hbWUgPT09IG5hbWUpIHtcbiAgICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgICBicmVha1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChyZW1vdmVGcm9tTWFwKSB7XG4gICAgICBkZWxldGUgZWwuYXR0cnNNYXBbbmFtZV07XG4gICAgfVxuICAgIHJldHVybiB2YWxcbiAgfVxuXG4gIGZ1bmN0aW9uIGdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4IChcbiAgICBlbCxcbiAgICBuYW1lXG4gICkge1xuICAgIHZhciBsaXN0ID0gZWwuYXR0cnNMaXN0O1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIHZhciBhdHRyID0gbGlzdFtpXTtcbiAgICAgIGlmIChuYW1lLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgICBsaXN0LnNwbGljZShpLCAxKTtcbiAgICAgICAgcmV0dXJuIGF0dHJcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiByYW5nZVNldEl0ZW0gKFxuICAgIGl0ZW0sXG4gICAgcmFuZ2VcbiAgKSB7XG4gICAgaWYgKHJhbmdlKSB7XG4gICAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICBpdGVtLnN0YXJ0ID0gcmFuZ2Uuc3RhcnQ7XG4gICAgICB9XG4gICAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHtcbiAgICAgICAgaXRlbS5lbmQgPSByYW5nZS5lbmQ7XG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBpdGVtXG4gIH1cblxuICAvKiAgKi9cblxuICAvKipcbiAgICogQ3Jvc3MtcGxhdGZvcm0gY29kZSBnZW5lcmF0aW9uIGZvciBjb21wb25lbnQgdi1tb2RlbFxuICAgKi9cbiAgZnVuY3Rpb24gZ2VuQ29tcG9uZW50TW9kZWwgKFxuICAgIGVsLFxuICAgIHZhbHVlLFxuICAgIG1vZGlmaWVyc1xuICApIHtcbiAgICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICAgIHZhciBudW1iZXIgPSByZWYubnVtYmVyO1xuICAgIHZhciB0cmltID0gcmVmLnRyaW07XG5cbiAgICB2YXIgYmFzZVZhbHVlRXhwcmVzc2lvbiA9ICckJHYnO1xuICAgIHZhciB2YWx1ZUV4cHJlc3Npb24gPSBiYXNlVmFsdWVFeHByZXNzaW9uO1xuICAgIGlmICh0cmltKSB7XG4gICAgICB2YWx1ZUV4cHJlc3Npb24gPVxuICAgICAgICBcIih0eXBlb2YgXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIgPT09ICdzdHJpbmcnXCIgK1xuICAgICAgICBcIj8gXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIudHJpbSgpXCIgK1xuICAgICAgICBcIjogXCIgKyBiYXNlVmFsdWVFeHByZXNzaW9uICsgXCIpXCI7XG4gICAgfVxuICAgIGlmIChudW1iZXIpIHtcbiAgICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiX24oXCIgKyB2YWx1ZUV4cHJlc3Npb24gKyBcIilcIjtcbiAgICB9XG4gICAgdmFyIGFzc2lnbm1lbnQgPSBnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgdmFsdWVFeHByZXNzaW9uKTtcblxuICAgIGVsLm1vZGVsID0ge1xuICAgICAgdmFsdWU6IChcIihcIiArIHZhbHVlICsgXCIpXCIpLFxuICAgICAgZXhwcmVzc2lvbjogSlNPTi5zdHJpbmdpZnkodmFsdWUpLFxuICAgICAgY2FsbGJhY2s6IChcImZ1bmN0aW9uIChcIiArIGJhc2VWYWx1ZUV4cHJlc3Npb24gKyBcIikge1wiICsgYXNzaWdubWVudCArIFwifVwiKVxuICAgIH07XG4gIH1cblxuICAvKipcbiAgICogQ3Jvc3MtcGxhdGZvcm0gY29kZWdlbiBoZWxwZXIgZm9yIGdlbmVyYXRpbmcgdi1tb2RlbCB2YWx1ZSBhc3NpZ25tZW50IGNvZGUuXG4gICAqL1xuICBmdW5jdGlvbiBnZW5Bc3NpZ25tZW50Q29kZSAoXG4gICAgdmFsdWUsXG4gICAgYXNzaWdubWVudFxuICApIHtcbiAgICB2YXIgcmVzID0gcGFyc2VNb2RlbCh2YWx1ZSk7XG4gICAgaWYgKHJlcy5rZXkgPT09IG51bGwpIHtcbiAgICAgIHJldHVybiAodmFsdWUgKyBcIj1cIiArIGFzc2lnbm1lbnQpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCIkc2V0KFwiICsgKHJlcy5leHApICsgXCIsIFwiICsgKHJlcy5rZXkpICsgXCIsIFwiICsgYXNzaWdubWVudCArIFwiKVwiKVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBQYXJzZSBhIHYtbW9kZWwgZXhwcmVzc2lvbiBpbnRvIGEgYmFzZSBwYXRoIGFuZCBhIGZpbmFsIGtleSBzZWdtZW50LlxuICAgKiBIYW5kbGVzIGJvdGggZG90LXBhdGggYW5kIHBvc3NpYmxlIHNxdWFyZSBicmFja2V0cy5cbiAgICpcbiAgICogUG9zc2libGUgY2FzZXM6XG4gICAqXG4gICAqIC0gdGVzdFxuICAgKiAtIHRlc3Rba2V5XVxuICAgKiAtIHRlc3RbdGVzdDFba2V5XV1cbiAgICogLSB0ZXN0W1wiYVwiXVtrZXldXG4gICAqIC0geHh4LnRlc3RbYVthXS50ZXN0MVtrZXldXVxuICAgKiAtIHRlc3QueHh4LmFbXCJhc2FcIl1bdGVzdDFba2V5XV1cbiAgICpcbiAgICovXG5cbiAgdmFyIGxlbiwgc3RyLCBjaHIsIGluZGV4JDEsIGV4cHJlc3Npb25Qb3MsIGV4cHJlc3Npb25FbmRQb3M7XG5cblxuXG4gIGZ1bmN0aW9uIHBhcnNlTW9kZWwgKHZhbCkge1xuICAgIC8vIEZpeCBodHRwczovL2dpdGh1Yi5jb20vdnVlanMvdnVlL3B1bGwvNzczMFxuICAgIC8vIGFsbG93IHYtbW9kZWw9XCJvYmoudmFsIFwiICh0cmFpbGluZyB3aGl0ZXNwYWNlKVxuICAgIHZhbCA9IHZhbC50cmltKCk7XG4gICAgbGVuID0gdmFsLmxlbmd0aDtcblxuICAgIGlmICh2YWwuaW5kZXhPZignWycpIDwgMCB8fCB2YWwubGFzdEluZGV4T2YoJ10nKSA8IGxlbiAtIDEpIHtcbiAgICAgIGluZGV4JDEgPSB2YWwubGFzdEluZGV4T2YoJy4nKTtcbiAgICAgIGlmIChpbmRleCQxID4gLTEpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICBleHA6IHZhbC5zbGljZSgwLCBpbmRleCQxKSxcbiAgICAgICAgICBrZXk6ICdcIicgKyB2YWwuc2xpY2UoaW5kZXgkMSArIDEpICsgJ1wiJ1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgIGV4cDogdmFsLFxuICAgICAgICAgIGtleTogbnVsbFxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgc3RyID0gdmFsO1xuICAgIGluZGV4JDEgPSBleHByZXNzaW9uUG9zID0gZXhwcmVzc2lvbkVuZFBvcyA9IDA7XG5cbiAgICB3aGlsZSAoIWVvZigpKSB7XG4gICAgICBjaHIgPSBuZXh0KCk7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmIChpc1N0cmluZ1N0YXJ0KGNocikpIHtcbiAgICAgICAgcGFyc2VTdHJpbmcoY2hyKTtcbiAgICAgIH0gZWxzZSBpZiAoY2hyID09PSAweDVCKSB7XG4gICAgICAgIHBhcnNlQnJhY2tldChjaHIpO1xuICAgICAgfVxuICAgIH1cblxuICAgIHJldHVybiB7XG4gICAgICBleHA6IHZhbC5zbGljZSgwLCBleHByZXNzaW9uUG9zKSxcbiAgICAgIGtleTogdmFsLnNsaWNlKGV4cHJlc3Npb25Qb3MgKyAxLCBleHByZXNzaW9uRW5kUG9zKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG5leHQgKCkge1xuICAgIHJldHVybiBzdHIuY2hhckNvZGVBdCgrK2luZGV4JDEpXG4gIH1cblxuICBmdW5jdGlvbiBlb2YgKCkge1xuICAgIHJldHVybiBpbmRleCQxID49IGxlblxuICB9XG5cbiAgZnVuY3Rpb24gaXNTdHJpbmdTdGFydCAoY2hyKSB7XG4gICAgcmV0dXJuIGNociA9PT0gMHgyMiB8fCBjaHIgPT09IDB4MjdcbiAgfVxuXG4gIGZ1bmN0aW9uIHBhcnNlQnJhY2tldCAoY2hyKSB7XG4gICAgdmFyIGluQnJhY2tldCA9IDE7XG4gICAgZXhwcmVzc2lvblBvcyA9IGluZGV4JDE7XG4gICAgd2hpbGUgKCFlb2YoKSkge1xuICAgICAgY2hyID0gbmV4dCgpO1xuICAgICAgaWYgKGlzU3RyaW5nU3RhcnQoY2hyKSkge1xuICAgICAgICBwYXJzZVN0cmluZyhjaHIpO1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgaWYgKGNociA9PT0gMHg1QikgeyBpbkJyYWNrZXQrKzsgfVxuICAgICAgaWYgKGNociA9PT0gMHg1RCkgeyBpbkJyYWNrZXQtLTsgfVxuICAgICAgaWYgKGluQnJhY2tldCA9PT0gMCkge1xuICAgICAgICBleHByZXNzaW9uRW5kUG9zID0gaW5kZXgkMTtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZVN0cmluZyAoY2hyKSB7XG4gICAgdmFyIHN0cmluZ1F1b3RlID0gY2hyO1xuICAgIHdoaWxlICghZW9mKCkpIHtcbiAgICAgIGNociA9IG5leHQoKTtcbiAgICAgIGlmIChjaHIgPT09IHN0cmluZ1F1b3RlKSB7XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIHdhcm4kMTtcblxuICAvLyBpbiBzb21lIGNhc2VzLCB0aGUgZXZlbnQgdXNlZCBoYXMgdG8gYmUgZGV0ZXJtaW5lZCBhdCBydW50aW1lXG4gIC8vIHNvIHdlIHVzZWQgc29tZSByZXNlcnZlZCB0b2tlbnMgZHVyaW5nIGNvbXBpbGUuXG4gIHZhciBSQU5HRV9UT0tFTiA9ICdfX3InO1xuICB2YXIgQ0hFQ0tCT1hfUkFESU9fVE9LRU4gPSAnX19jJztcblxuICBmdW5jdGlvbiBtb2RlbCAoXG4gICAgZWwsXG4gICAgZGlyLFxuICAgIF93YXJuXG4gICkge1xuICAgIHdhcm4kMSA9IF93YXJuO1xuICAgIHZhciB2YWx1ZSA9IGRpci52YWx1ZTtcbiAgICB2YXIgbW9kaWZpZXJzID0gZGlyLm1vZGlmaWVycztcbiAgICB2YXIgdGFnID0gZWwudGFnO1xuICAgIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcblxuICAgIHtcbiAgICAgIC8vIGlucHV0cyB3aXRoIHR5cGU9XCJmaWxlXCIgYXJlIHJlYWQgb25seSBhbmQgc2V0dGluZyB0aGUgaW5wdXQnc1xuICAgICAgLy8gdmFsdWUgd2lsbCB0aHJvdyBhbiBlcnJvci5cbiAgICAgIGlmICh0YWcgPT09ICdpbnB1dCcgJiYgdHlwZSA9PT0gJ2ZpbGUnKSB7XG4gICAgICAgIHdhcm4kMShcbiAgICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIiB0eXBlPVxcXCJmaWxlXFxcIj46XFxuXCIgK1xuICAgICAgICAgIFwiRmlsZSBpbnB1dHMgYXJlIHJlYWQgb25seS4gVXNlIGEgdi1vbjpjaGFuZ2UgbGlzdGVuZXIgaW5zdGVhZC5cIixcbiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKGVsLmNvbXBvbmVudCkge1xuICAgICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgICAgLy8gY29tcG9uZW50IHYtbW9kZWwgZG9lc24ndCBuZWVkIGV4dHJhIHJ1bnRpbWVcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSBpZiAodGFnID09PSAnc2VsZWN0Jykge1xuICAgICAgZ2VuU2VsZWN0KGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAnY2hlY2tib3gnKSB7XG4gICAgICBnZW5DaGVja2JveE1vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyAmJiB0eXBlID09PSAncmFkaW8nKSB7XG4gICAgICBnZW5SYWRpb01vZGVsKGVsLCB2YWx1ZSwgbW9kaWZpZXJzKTtcbiAgICB9IGVsc2UgaWYgKHRhZyA9PT0gJ2lucHV0JyB8fCB0YWcgPT09ICd0ZXh0YXJlYScpIHtcbiAgICAgIGdlbkRlZmF1bHRNb2RlbChlbCwgdmFsdWUsIG1vZGlmaWVycyk7XG4gICAgfSBlbHNlIGlmICghY29uZmlnLmlzUmVzZXJ2ZWRUYWcodGFnKSkge1xuICAgICAgZ2VuQ29tcG9uZW50TW9kZWwoZWwsIHZhbHVlLCBtb2RpZmllcnMpO1xuICAgICAgLy8gY29tcG9uZW50IHYtbW9kZWwgZG9lc24ndCBuZWVkIGV4dHJhIHJ1bnRpbWVcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDEoXG4gICAgICAgIFwiPFwiICsgKGVsLnRhZykgKyBcIiB2LW1vZGVsPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiPjogXCIgK1xuICAgICAgICBcInYtbW9kZWwgaXMgbm90IHN1cHBvcnRlZCBvbiB0aGlzIGVsZW1lbnQgdHlwZS4gXCIgK1xuICAgICAgICAnSWYgeW91IGFyZSB3b3JraW5nIHdpdGggY29udGVudGVkaXRhYmxlLCBpdFxcJ3MgcmVjb21tZW5kZWQgdG8gJyArXG4gICAgICAgICd3cmFwIGEgbGlicmFyeSBkZWRpY2F0ZWQgZm9yIHRoYXQgcHVycG9zZSBpbnNpZGUgYSBjdXN0b20gY29tcG9uZW50LicsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LW1vZGVsJ11cbiAgICAgICk7XG4gICAgfVxuXG4gICAgLy8gZW5zdXJlIHJ1bnRpbWUgZGlyZWN0aXZlIG1ldGFkYXRhXG4gICAgcmV0dXJuIHRydWVcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbkNoZWNrYm94TW9kZWwgKFxuICAgIGVsLFxuICAgIHZhbHVlLFxuICAgIG1vZGlmaWVyc1xuICApIHtcbiAgICB2YXIgbnVtYmVyID0gbW9kaWZpZXJzICYmIG1vZGlmaWVycy5udW1iZXI7XG4gICAgdmFyIHZhbHVlQmluZGluZyA9IGdldEJpbmRpbmdBdHRyKGVsLCAndmFsdWUnKSB8fCAnbnVsbCc7XG4gICAgdmFyIHRydWVWYWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3RydWUtdmFsdWUnKSB8fCAndHJ1ZSc7XG4gICAgdmFyIGZhbHNlVmFsdWVCaW5kaW5nID0gZ2V0QmluZGluZ0F0dHIoZWwsICdmYWxzZS12YWx1ZScpIHx8ICdmYWxzZSc7XG4gICAgYWRkUHJvcChlbCwgJ2NoZWNrZWQnLFxuICAgICAgXCJBcnJheS5pc0FycmF5KFwiICsgdmFsdWUgKyBcIilcIiArXG4gICAgICBcIj9faShcIiArIHZhbHVlICsgXCIsXCIgKyB2YWx1ZUJpbmRpbmcgKyBcIik+LTFcIiArIChcbiAgICAgICAgdHJ1ZVZhbHVlQmluZGluZyA9PT0gJ3RydWUnXG4gICAgICAgICAgPyAoXCI6KFwiICsgdmFsdWUgKyBcIilcIilcbiAgICAgICAgICA6IChcIjpfcShcIiArIHZhbHVlICsgXCIsXCIgKyB0cnVlVmFsdWVCaW5kaW5nICsgXCIpXCIpXG4gICAgICApXG4gICAgKTtcbiAgICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJyxcbiAgICAgIFwidmFyICQkYT1cIiArIHZhbHVlICsgXCIsXCIgK1xuICAgICAgICAgICckJGVsPSRldmVudC50YXJnZXQsJyArXG4gICAgICAgICAgXCIkJGM9JCRlbC5jaGVja2VkPyhcIiArIHRydWVWYWx1ZUJpbmRpbmcgKyBcIik6KFwiICsgZmFsc2VWYWx1ZUJpbmRpbmcgKyBcIik7XCIgK1xuICAgICAgJ2lmKEFycmF5LmlzQXJyYXkoJCRhKSl7JyArXG4gICAgICAgIFwidmFyICQkdj1cIiArIChudW1iZXIgPyAnX24oJyArIHZhbHVlQmluZGluZyArICcpJyA6IHZhbHVlQmluZGluZykgKyBcIixcIiArXG4gICAgICAgICAgICAnJCRpPV9pKCQkYSwkJHYpOycgK1xuICAgICAgICBcImlmKCQkZWwuY2hlY2tlZCl7JCRpPDAmJihcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYS5jb25jYXQoWyQkdl0pJykpICsgXCIpfVwiICtcbiAgICAgICAgXCJlbHNleyQkaT4tMSYmKFwiICsgKGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCAnJCRhLnNsaWNlKDAsJCRpKS5jb25jYXQoJCRhLnNsaWNlKCQkaSsxKSknKSkgKyBcIil9XCIgK1xuICAgICAgXCJ9ZWxzZXtcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgJyQkYycpKSArIFwifVwiLFxuICAgICAgbnVsbCwgdHJ1ZVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiBnZW5SYWRpb01vZGVsIChcbiAgICBlbCxcbiAgICB2YWx1ZSxcbiAgICBtb2RpZmllcnNcbiAgKSB7XG4gICAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICAgIHZhciB2YWx1ZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3ZhbHVlJykgfHwgJ251bGwnO1xuICAgIHZhbHVlQmluZGluZyA9IG51bWJlciA/IChcIl9uKFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpIDogdmFsdWVCaW5kaW5nO1xuICAgIGFkZFByb3AoZWwsICdjaGVja2VkJywgKFwiX3EoXCIgKyB2YWx1ZSArIFwiLFwiICsgdmFsdWVCaW5kaW5nICsgXCIpXCIpKTtcbiAgICBhZGRIYW5kbGVyKGVsLCAnY2hhbmdlJywgZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlQmluZGluZyksIG51bGwsIHRydWUpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VuU2VsZWN0IChcbiAgICBlbCxcbiAgICB2YWx1ZSxcbiAgICBtb2RpZmllcnNcbiAgKSB7XG4gICAgdmFyIG51bWJlciA9IG1vZGlmaWVycyAmJiBtb2RpZmllcnMubnVtYmVyO1xuICAgIHZhciBzZWxlY3RlZFZhbCA9IFwiQXJyYXkucHJvdG90eXBlLmZpbHRlclwiICtcbiAgICAgIFwiLmNhbGwoJGV2ZW50LnRhcmdldC5vcHRpb25zLGZ1bmN0aW9uKG8pe3JldHVybiBvLnNlbGVjdGVkfSlcIiArXG4gICAgICBcIi5tYXAoZnVuY3Rpb24obyl7dmFyIHZhbCA9IFxcXCJfdmFsdWVcXFwiIGluIG8gPyBvLl92YWx1ZSA6IG8udmFsdWU7XCIgK1xuICAgICAgXCJyZXR1cm4gXCIgKyAobnVtYmVyID8gJ19uKHZhbCknIDogJ3ZhbCcpICsgXCJ9KVwiO1xuXG4gICAgdmFyIGFzc2lnbm1lbnQgPSAnJGV2ZW50LnRhcmdldC5tdWx0aXBsZSA/ICQkc2VsZWN0ZWRWYWwgOiAkJHNlbGVjdGVkVmFsWzBdJztcbiAgICB2YXIgY29kZSA9IFwidmFyICQkc2VsZWN0ZWRWYWwgPSBcIiArIHNlbGVjdGVkVmFsICsgXCI7XCI7XG4gICAgY29kZSA9IGNvZGUgKyBcIiBcIiArIChnZW5Bc3NpZ25tZW50Q29kZSh2YWx1ZSwgYXNzaWdubWVudCkpO1xuICAgIGFkZEhhbmRsZXIoZWwsICdjaGFuZ2UnLCBjb2RlLCBudWxsLCB0cnVlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbkRlZmF1bHRNb2RlbCAoXG4gICAgZWwsXG4gICAgdmFsdWUsXG4gICAgbW9kaWZpZXJzXG4gICkge1xuICAgIHZhciB0eXBlID0gZWwuYXR0cnNNYXAudHlwZTtcblxuICAgIC8vIHdhcm4gaWYgdi1iaW5kOnZhbHVlIGNvbmZsaWN0cyB3aXRoIHYtbW9kZWxcbiAgICAvLyBleGNlcHQgZm9yIGlucHV0cyB3aXRoIHYtYmluZDp0eXBlXG4gICAge1xuICAgICAgdmFyIHZhbHVlJDEgPSBlbC5hdHRyc01hcFsndi1iaW5kOnZhbHVlJ10gfHwgZWwuYXR0cnNNYXBbJzp2YWx1ZSddO1xuICAgICAgdmFyIHR5cGVCaW5kaW5nID0gZWwuYXR0cnNNYXBbJ3YtYmluZDp0eXBlJ10gfHwgZWwuYXR0cnNNYXBbJzp0eXBlJ107XG4gICAgICBpZiAodmFsdWUkMSAmJiAhdHlwZUJpbmRpbmcpIHtcbiAgICAgICAgdmFyIGJpbmRpbmcgPSBlbC5hdHRyc01hcFsndi1iaW5kOnZhbHVlJ10gPyAndi1iaW5kOnZhbHVlJyA6ICc6dmFsdWUnO1xuICAgICAgICB3YXJuJDEoXG4gICAgICAgICAgYmluZGluZyArIFwiPVxcXCJcIiArIHZhbHVlJDEgKyBcIlxcXCIgY29uZmxpY3RzIHdpdGggdi1tb2RlbCBvbiB0aGUgc2FtZSBlbGVtZW50IFwiICtcbiAgICAgICAgICAnYmVjYXVzZSB0aGUgbGF0dGVyIGFscmVhZHkgZXhwYW5kcyB0byBhIHZhbHVlIGJpbmRpbmcgaW50ZXJuYWxseScsXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbYmluZGluZ11cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICB2YXIgcmVmID0gbW9kaWZpZXJzIHx8IHt9O1xuICAgIHZhciBsYXp5ID0gcmVmLmxhenk7XG4gICAgdmFyIG51bWJlciA9IHJlZi5udW1iZXI7XG4gICAgdmFyIHRyaW0gPSByZWYudHJpbTtcbiAgICB2YXIgbmVlZENvbXBvc2l0aW9uR3VhcmQgPSAhbGF6eSAmJiB0eXBlICE9PSAncmFuZ2UnO1xuICAgIHZhciBldmVudCA9IGxhenlcbiAgICAgID8gJ2NoYW5nZSdcbiAgICAgIDogdHlwZSA9PT0gJ3JhbmdlJ1xuICAgICAgICA/IFJBTkdFX1RPS0VOXG4gICAgICAgIDogJ2lucHV0JztcblxuICAgIHZhciB2YWx1ZUV4cHJlc3Npb24gPSAnJGV2ZW50LnRhcmdldC52YWx1ZSc7XG4gICAgaWYgKHRyaW0pIHtcbiAgICAgIHZhbHVlRXhwcmVzc2lvbiA9IFwiJGV2ZW50LnRhcmdldC52YWx1ZS50cmltKClcIjtcbiAgICB9XG4gICAgaWYgKG51bWJlcikge1xuICAgICAgdmFsdWVFeHByZXNzaW9uID0gXCJfbihcIiArIHZhbHVlRXhwcmVzc2lvbiArIFwiKVwiO1xuICAgIH1cblxuICAgIHZhciBjb2RlID0gZ2VuQXNzaWdubWVudENvZGUodmFsdWUsIHZhbHVlRXhwcmVzc2lvbik7XG4gICAgaWYgKG5lZWRDb21wb3NpdGlvbkd1YXJkKSB7XG4gICAgICBjb2RlID0gXCJpZigkZXZlbnQudGFyZ2V0LmNvbXBvc2luZylyZXR1cm47XCIgKyBjb2RlO1xuICAgIH1cblxuICAgIGFkZFByb3AoZWwsICd2YWx1ZScsIChcIihcIiArIHZhbHVlICsgXCIpXCIpKTtcbiAgICBhZGRIYW5kbGVyKGVsLCBldmVudCwgY29kZSwgbnVsbCwgdHJ1ZSk7XG4gICAgaWYgKHRyaW0gfHwgbnVtYmVyKSB7XG4gICAgICBhZGRIYW5kbGVyKGVsLCAnYmx1cicsICckZm9yY2VVcGRhdGUoKScpO1xuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIC8vIG5vcm1hbGl6ZSB2LW1vZGVsIGV2ZW50IHRva2VucyB0aGF0IGNhbiBvbmx5IGJlIGRldGVybWluZWQgYXQgcnVudGltZS5cbiAgLy8gaXQncyBpbXBvcnRhbnQgdG8gcGxhY2UgdGhlIGV2ZW50IGFzIHRoZSBmaXJzdCBpbiB0aGUgYXJyYXkgYmVjYXVzZVxuICAvLyB0aGUgd2hvbGUgcG9pbnQgaXMgZW5zdXJpbmcgdGhlIHYtbW9kZWwgY2FsbGJhY2sgZ2V0cyBjYWxsZWQgYmVmb3JlXG4gIC8vIHVzZXItYXR0YWNoZWQgaGFuZGxlcnMuXG4gIGZ1bmN0aW9uIG5vcm1hbGl6ZUV2ZW50cyAob24pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob25bUkFOR0VfVE9LRU5dKSkge1xuICAgICAgLy8gSUUgaW5wdXRbdHlwZT1yYW5nZV0gb25seSBzdXBwb3J0cyBgY2hhbmdlYCBldmVudFxuICAgICAgdmFyIGV2ZW50ID0gaXNJRSA/ICdjaGFuZ2UnIDogJ2lucHV0JztcbiAgICAgIG9uW2V2ZW50XSA9IFtdLmNvbmNhdChvbltSQU5HRV9UT0tFTl0sIG9uW2V2ZW50XSB8fCBbXSk7XG4gICAgICBkZWxldGUgb25bUkFOR0VfVE9LRU5dO1xuICAgIH1cbiAgICAvLyBUaGlzIHdhcyBvcmlnaW5hbGx5IGludGVuZGVkIHRvIGZpeCAjNDUyMSBidXQgbm8gbG9uZ2VyIG5lY2Vzc2FyeVxuICAgIC8vIGFmdGVyIDIuNS4gS2VlcGluZyBpdCBmb3IgYmFja3dhcmRzIGNvbXBhdCB3aXRoIGdlbmVyYXRlZCBjb2RlIGZyb20gPCAyLjRcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoaXNEZWYob25bQ0hFQ0tCT1hfUkFESU9fVE9LRU5dKSkge1xuICAgICAgb24uY2hhbmdlID0gW10uY29uY2F0KG9uW0NIRUNLQk9YX1JBRElPX1RPS0VOXSwgb24uY2hhbmdlIHx8IFtdKTtcbiAgICAgIGRlbGV0ZSBvbltDSEVDS0JPWF9SQURJT19UT0tFTl07XG4gICAgfVxuICB9XG5cbiAgdmFyIHRhcmdldCQxO1xuXG4gIGZ1bmN0aW9uIGNyZWF0ZU9uY2VIYW5kbGVyJDEgKGV2ZW50LCBoYW5kbGVyLCBjYXB0dXJlKSB7XG4gICAgdmFyIF90YXJnZXQgPSB0YXJnZXQkMTsgLy8gc2F2ZSBjdXJyZW50IHRhcmdldCBlbGVtZW50IGluIGNsb3N1cmVcbiAgICByZXR1cm4gZnVuY3Rpb24gb25jZUhhbmRsZXIgKCkge1xuICAgICAgdmFyIHJlcyA9IGhhbmRsZXIuYXBwbHkobnVsbCwgYXJndW1lbnRzKTtcbiAgICAgIGlmIChyZXMgIT09IG51bGwpIHtcbiAgICAgICAgcmVtb3ZlJDIoZXZlbnQsIG9uY2VIYW5kbGVyLCBjYXB0dXJlLCBfdGFyZ2V0KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyAjOTQ0NjogRmlyZWZveCA8PSA1MyAoaW4gcGFydGljdWxhciwgRVNSIDUyKSBoYXMgaW5jb3JyZWN0IEV2ZW50LnRpbWVTdGFtcFxuICAvLyBpbXBsZW1lbnRhdGlvbiBhbmQgZG9lcyBub3QgZmlyZSBtaWNyb3Rhc2tzIGluIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24sIHNvXG4gIC8vIHNhZmUgdG8gZXhjbHVkZS5cbiAgdmFyIHVzZU1pY3JvdGFza0ZpeCA9IGlzVXNpbmdNaWNyb1Rhc2sgJiYgIShpc0ZGICYmIE51bWJlcihpc0ZGWzFdKSA8PSA1Myk7XG5cbiAgZnVuY3Rpb24gYWRkJDEgKFxuICAgIG5hbWUsXG4gICAgaGFuZGxlcixcbiAgICBjYXB0dXJlLFxuICAgIHBhc3NpdmVcbiAgKSB7XG4gICAgLy8gYXN5bmMgZWRnZSBjYXNlICM2NTY2OiBpbm5lciBjbGljayBldmVudCB0cmlnZ2VycyBwYXRjaCwgZXZlbnQgaGFuZGxlclxuICAgIC8vIGF0dGFjaGVkIHRvIG91dGVyIGVsZW1lbnQgZHVyaW5nIHBhdGNoLCBhbmQgdHJpZ2dlcmVkIGFnYWluLiBUaGlzXG4gICAgLy8gaGFwcGVucyBiZWNhdXNlIGJyb3dzZXJzIGZpcmUgbWljcm90YXNrIHRpY2tzIGJldHdlZW4gZXZlbnQgcHJvcGFnYXRpb24uXG4gICAgLy8gdGhlIHNvbHV0aW9uIGlzIHNpbXBsZTogd2Ugc2F2ZSB0aGUgdGltZXN0YW1wIHdoZW4gYSBoYW5kbGVyIGlzIGF0dGFjaGVkLFxuICAgIC8vIGFuZCB0aGUgaGFuZGxlciB3b3VsZCBvbmx5IGZpcmUgaWYgdGhlIGV2ZW50IHBhc3NlZCB0byBpdCB3YXMgZmlyZWRcbiAgICAvLyBBRlRFUiBpdCB3YXMgYXR0YWNoZWQuXG4gICAgaWYgKHVzZU1pY3JvdGFza0ZpeCkge1xuICAgICAgdmFyIGF0dGFjaGVkVGltZXN0YW1wID0gY3VycmVudEZsdXNoVGltZXN0YW1wO1xuICAgICAgdmFyIG9yaWdpbmFsID0gaGFuZGxlcjtcbiAgICAgIGhhbmRsZXIgPSBvcmlnaW5hbC5fd3JhcHBlciA9IGZ1bmN0aW9uIChlKSB7XG4gICAgICAgIGlmIChcbiAgICAgICAgICAvLyBubyBidWJibGluZywgc2hvdWxkIGFsd2F5cyBmaXJlLlxuICAgICAgICAgIC8vIHRoaXMgaXMganVzdCBhIHNhZmV0eSBuZXQgaW4gY2FzZSBldmVudC50aW1lU3RhbXAgaXMgdW5yZWxpYWJsZSBpblxuICAgICAgICAgIC8vIGNlcnRhaW4gd2VpcmQgZW52aXJvbm1lbnRzLi4uXG4gICAgICAgICAgZS50YXJnZXQgPT09IGUuY3VycmVudFRhcmdldCB8fFxuICAgICAgICAgIC8vIGV2ZW50IGlzIGZpcmVkIGFmdGVyIGhhbmRsZXIgYXR0YWNobWVudFxuICAgICAgICAgIGUudGltZVN0YW1wID49IGF0dGFjaGVkVGltZXN0YW1wIHx8XG4gICAgICAgICAgLy8gYmFpbCBmb3IgZW52aXJvbm1lbnRzIHRoYXQgaGF2ZSBidWdneSBldmVudC50aW1lU3RhbXAgaW1wbGVtZW50YXRpb25zXG4gICAgICAgICAgLy8gIzk0NjIgaU9TIDkgYnVnOiBldmVudC50aW1lU3RhbXAgaXMgMCBhZnRlciBoaXN0b3J5LnB1c2hTdGF0ZVxuICAgICAgICAgIC8vICM5NjgxIFF0V2ViRW5naW5lIGV2ZW50LnRpbWVTdGFtcCBpcyBuZWdhdGl2ZSB2YWx1ZVxuICAgICAgICAgIGUudGltZVN0YW1wIDw9IDAgfHxcbiAgICAgICAgICAvLyAjOTQ0OCBiYWlsIGlmIGV2ZW50IGlzIGZpcmVkIGluIGFub3RoZXIgZG9jdW1lbnQgaW4gYSBtdWx0aS1wYWdlXG4gICAgICAgICAgLy8gZWxlY3Ryb24vbncuanMgYXBwLCBzaW5jZSBldmVudC50aW1lU3RhbXAgd2lsbCBiZSB1c2luZyBhIGRpZmZlcmVudFxuICAgICAgICAgIC8vIHN0YXJ0aW5nIHJlZmVyZW5jZVxuICAgICAgICAgIGUudGFyZ2V0Lm93bmVyRG9jdW1lbnQgIT09IGRvY3VtZW50XG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVybiBvcmlnaW5hbC5hcHBseSh0aGlzLCBhcmd1bWVudHMpXG4gICAgICAgIH1cbiAgICAgIH07XG4gICAgfVxuICAgIHRhcmdldCQxLmFkZEV2ZW50TGlzdGVuZXIoXG4gICAgICBuYW1lLFxuICAgICAgaGFuZGxlcixcbiAgICAgIHN1cHBvcnRzUGFzc2l2ZVxuICAgICAgICA/IHsgY2FwdHVyZTogY2FwdHVyZSwgcGFzc2l2ZTogcGFzc2l2ZSB9XG4gICAgICAgIDogY2FwdHVyZVxuICAgICk7XG4gIH1cblxuICBmdW5jdGlvbiByZW1vdmUkMiAoXG4gICAgbmFtZSxcbiAgICBoYW5kbGVyLFxuICAgIGNhcHR1cmUsXG4gICAgX3RhcmdldFxuICApIHtcbiAgICAoX3RhcmdldCB8fCB0YXJnZXQkMSkucmVtb3ZlRXZlbnRMaXN0ZW5lcihcbiAgICAgIG5hbWUsXG4gICAgICBoYW5kbGVyLl93cmFwcGVyIHx8IGhhbmRsZXIsXG4gICAgICBjYXB0dXJlXG4gICAgKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIHVwZGF0ZURPTUxpc3RlbmVycyAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5vbikgJiYgaXNVbmRlZih2bm9kZS5kYXRhLm9uKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBvbiA9IHZub2RlLmRhdGEub24gfHwge307XG4gICAgdmFyIG9sZE9uID0gb2xkVm5vZGUuZGF0YS5vbiB8fCB7fTtcbiAgICB0YXJnZXQkMSA9IHZub2RlLmVsbTtcbiAgICBub3JtYWxpemVFdmVudHMob24pO1xuICAgIHVwZGF0ZUxpc3RlbmVycyhvbiwgb2xkT24sIGFkZCQxLCByZW1vdmUkMiwgY3JlYXRlT25jZUhhbmRsZXIkMSwgdm5vZGUuY29udGV4dCk7XG4gICAgdGFyZ2V0JDEgPSB1bmRlZmluZWQ7XG4gIH1cblxuICB2YXIgZXZlbnRzID0ge1xuICAgIGNyZWF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzLFxuICAgIHVwZGF0ZTogdXBkYXRlRE9NTGlzdGVuZXJzXG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIHN2Z0NvbnRhaW5lcjtcblxuICBmdW5jdGlvbiB1cGRhdGVET01Qcm9wcyAob2xkVm5vZGUsIHZub2RlKSB7XG4gICAgaWYgKGlzVW5kZWYob2xkVm5vZGUuZGF0YS5kb21Qcm9wcykgJiYgaXNVbmRlZih2bm9kZS5kYXRhLmRvbVByb3BzKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBrZXksIGN1cjtcbiAgICB2YXIgZWxtID0gdm5vZGUuZWxtO1xuICAgIHZhciBvbGRQcm9wcyA9IG9sZFZub2RlLmRhdGEuZG9tUHJvcHMgfHwge307XG4gICAgdmFyIHByb3BzID0gdm5vZGUuZGF0YS5kb21Qcm9wcyB8fCB7fTtcbiAgICAvLyBjbG9uZSBvYnNlcnZlZCBvYmplY3RzLCBhcyB0aGUgdXNlciBwcm9iYWJseSB3YW50cyB0byBtdXRhdGUgaXRcbiAgICBpZiAoaXNEZWYocHJvcHMuX19vYl9fKSkge1xuICAgICAgcHJvcHMgPSB2bm9kZS5kYXRhLmRvbVByb3BzID0gZXh0ZW5kKHt9LCBwcm9wcyk7XG4gICAgfVxuXG4gICAgZm9yIChrZXkgaW4gb2xkUHJvcHMpIHtcbiAgICAgIGlmICghKGtleSBpbiBwcm9wcykpIHtcbiAgICAgICAgZWxtW2tleV0gPSAnJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmb3IgKGtleSBpbiBwcm9wcykge1xuICAgICAgY3VyID0gcHJvcHNba2V5XTtcbiAgICAgIC8vIGlnbm9yZSBjaGlsZHJlbiBpZiB0aGUgbm9kZSBoYXMgdGV4dENvbnRlbnQgb3IgaW5uZXJIVE1MLFxuICAgICAgLy8gYXMgdGhlc2Ugd2lsbCB0aHJvdyBhd2F5IGV4aXN0aW5nIERPTSBub2RlcyBhbmQgY2F1c2UgcmVtb3ZhbCBlcnJvcnNcbiAgICAgIC8vIG9uIHN1YnNlcXVlbnQgcGF0Y2hlcyAoIzMzNjApXG4gICAgICBpZiAoa2V5ID09PSAndGV4dENvbnRlbnQnIHx8IGtleSA9PT0gJ2lubmVySFRNTCcpIHtcbiAgICAgICAgaWYgKHZub2RlLmNoaWxkcmVuKSB7IHZub2RlLmNoaWxkcmVuLmxlbmd0aCA9IDA7IH1cbiAgICAgICAgaWYgKGN1ciA9PT0gb2xkUHJvcHNba2V5XSkgeyBjb250aW51ZSB9XG4gICAgICAgIC8vICM2NjAxIHdvcmsgYXJvdW5kIENocm9tZSB2ZXJzaW9uIDw9IDU1IGJ1ZyB3aGVyZSBzaW5nbGUgdGV4dE5vZGVcbiAgICAgICAgLy8gcmVwbGFjZWQgYnkgaW5uZXJIVE1ML3RleHRDb250ZW50IHJldGFpbnMgaXRzIHBhcmVudE5vZGUgcHJvcGVydHlcbiAgICAgICAgaWYgKGVsbS5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSkge1xuICAgICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uY2hpbGROb2Rlc1swXSk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKGtleSA9PT0gJ3ZhbHVlJyAmJiBlbG0udGFnTmFtZSAhPT0gJ1BST0dSRVNTJykge1xuICAgICAgICAvLyBzdG9yZSB2YWx1ZSBhcyBfdmFsdWUgYXMgd2VsbCBzaW5jZVxuICAgICAgICAvLyBub24tc3RyaW5nIHZhbHVlcyB3aWxsIGJlIHN0cmluZ2lmaWVkXG4gICAgICAgIGVsbS5fdmFsdWUgPSBjdXI7XG4gICAgICAgIC8vIGF2b2lkIHJlc2V0dGluZyBjdXJzb3IgcG9zaXRpb24gd2hlbiB2YWx1ZSBpcyB0aGUgc2FtZVxuICAgICAgICB2YXIgc3RyQ3VyID0gaXNVbmRlZihjdXIpID8gJycgOiBTdHJpbmcoY3VyKTtcbiAgICAgICAgaWYgKHNob3VsZFVwZGF0ZVZhbHVlKGVsbSwgc3RyQ3VyKSkge1xuICAgICAgICAgIGVsbS52YWx1ZSA9IHN0ckN1cjtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChrZXkgPT09ICdpbm5lckhUTUwnICYmIGlzU1ZHKGVsbS50YWdOYW1lKSAmJiBpc1VuZGVmKGVsbS5pbm5lckhUTUwpKSB7XG4gICAgICAgIC8vIElFIGRvZXNuJ3Qgc3VwcG9ydCBpbm5lckhUTUwgZm9yIFNWRyBlbGVtZW50c1xuICAgICAgICBzdmdDb250YWluZXIgPSBzdmdDb250YWluZXIgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XG4gICAgICAgIHN2Z0NvbnRhaW5lci5pbm5lckhUTUwgPSBcIjxzdmc+XCIgKyBjdXIgKyBcIjwvc3ZnPlwiO1xuICAgICAgICB2YXIgc3ZnID0gc3ZnQ29udGFpbmVyLmZpcnN0Q2hpbGQ7XG4gICAgICAgIHdoaWxlIChlbG0uZmlyc3RDaGlsZCkge1xuICAgICAgICAgIGVsbS5yZW1vdmVDaGlsZChlbG0uZmlyc3RDaGlsZCk7XG4gICAgICAgIH1cbiAgICAgICAgd2hpbGUgKHN2Zy5maXJzdENoaWxkKSB7XG4gICAgICAgICAgZWxtLmFwcGVuZENoaWxkKHN2Zy5maXJzdENoaWxkKTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIGlmIChcbiAgICAgICAgLy8gc2tpcCB0aGUgdXBkYXRlIGlmIG9sZCBhbmQgbmV3IFZET00gc3RhdGUgaXMgdGhlIHNhbWUuXG4gICAgICAgIC8vIGB2YWx1ZWAgaXMgaGFuZGxlZCBzZXBhcmF0ZWx5IGJlY2F1c2UgdGhlIERPTSB2YWx1ZSBtYXkgYmUgdGVtcG9yYXJpbHlcbiAgICAgICAgLy8gb3V0IG9mIHN5bmMgd2l0aCBWRE9NIHN0YXRlIGR1ZSB0byBmb2N1cywgY29tcG9zaXRpb24gYW5kIG1vZGlmaWVycy5cbiAgICAgICAgLy8gVGhpcyAgIzQ1MjEgYnkgc2tpcHBpbmcgdGhlIHVubmVjZXNzYXJ5IGBjaGVja2VkYCB1cGRhdGUuXG4gICAgICAgIGN1ciAhPT0gb2xkUHJvcHNba2V5XVxuICAgICAgKSB7XG4gICAgICAgIC8vIHNvbWUgcHJvcGVydHkgdXBkYXRlcyBjYW4gdGhyb3dcbiAgICAgICAgLy8gZS5nLiBgdmFsdWVgIG9uIDxwcm9ncmVzcz4gdy8gbm9uLWZpbml0ZSB2YWx1ZVxuICAgICAgICB0cnkge1xuICAgICAgICAgIGVsbVtrZXldID0gY3VyO1xuICAgICAgICB9IGNhdGNoIChlKSB7fVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIGNoZWNrIHBsYXRmb3Jtcy93ZWIvdXRpbC9hdHRycy5qcyBhY2NlcHRWYWx1ZVxuXG5cbiAgZnVuY3Rpb24gc2hvdWxkVXBkYXRlVmFsdWUgKGVsbSwgY2hlY2tWYWwpIHtcbiAgICByZXR1cm4gKCFlbG0uY29tcG9zaW5nICYmIChcbiAgICAgIGVsbS50YWdOYW1lID09PSAnT1BUSU9OJyB8fFxuICAgICAgaXNOb3RJbkZvY3VzQW5kRGlydHkoZWxtLCBjaGVja1ZhbCkgfHxcbiAgICAgIGlzRGlydHlXaXRoTW9kaWZpZXJzKGVsbSwgY2hlY2tWYWwpXG4gICAgKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzTm90SW5Gb2N1c0FuZERpcnR5IChlbG0sIGNoZWNrVmFsKSB7XG4gICAgLy8gcmV0dXJuIHRydWUgd2hlbiB0ZXh0Ym94ICgubnVtYmVyIGFuZCAudHJpbSkgbG9zZXMgZm9jdXMgYW5kIGl0cyB2YWx1ZSBpc1xuICAgIC8vIG5vdCBlcXVhbCB0byB0aGUgdXBkYXRlZCB2YWx1ZVxuICAgIHZhciBub3RJbkZvY3VzID0gdHJ1ZTtcbiAgICAvLyAjNjE1N1xuICAgIC8vIHdvcmsgYXJvdW5kIElFIGJ1ZyB3aGVuIGFjY2Vzc2luZyBkb2N1bWVudC5hY3RpdmVFbGVtZW50IGluIGFuIGlmcmFtZVxuICAgIHRyeSB7IG5vdEluRm9jdXMgPSBkb2N1bWVudC5hY3RpdmVFbGVtZW50ICE9PSBlbG07IH0gY2F0Y2ggKGUpIHt9XG4gICAgcmV0dXJuIG5vdEluRm9jdXMgJiYgZWxtLnZhbHVlICE9PSBjaGVja1ZhbFxuICB9XG5cbiAgZnVuY3Rpb24gaXNEaXJ0eVdpdGhNb2RpZmllcnMgKGVsbSwgbmV3VmFsKSB7XG4gICAgdmFyIHZhbHVlID0gZWxtLnZhbHVlO1xuICAgIHZhciBtb2RpZmllcnMgPSBlbG0uX3ZNb2RpZmllcnM7IC8vIGluamVjdGVkIGJ5IHYtbW9kZWwgcnVudGltZVxuICAgIGlmIChpc0RlZihtb2RpZmllcnMpKSB7XG4gICAgICBpZiAobW9kaWZpZXJzLm51bWJlcikge1xuICAgICAgICByZXR1cm4gdG9OdW1iZXIodmFsdWUpICE9PSB0b051bWJlcihuZXdWYWwpXG4gICAgICB9XG4gICAgICBpZiAobW9kaWZpZXJzLnRyaW0pIHtcbiAgICAgICAgcmV0dXJuIHZhbHVlLnRyaW0oKSAhPT0gbmV3VmFsLnRyaW0oKVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gdmFsdWUgIT09IG5ld1ZhbFxuICB9XG5cbiAgdmFyIGRvbVByb3BzID0ge1xuICAgIGNyZWF0ZTogdXBkYXRlRE9NUHJvcHMsXG4gICAgdXBkYXRlOiB1cGRhdGVET01Qcm9wc1xuICB9O1xuXG4gIC8qICAqL1xuXG4gIHZhciBwYXJzZVN0eWxlVGV4dCA9IGNhY2hlZChmdW5jdGlvbiAoY3NzVGV4dCkge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgbGlzdERlbGltaXRlciA9IC87KD8hW14oXSpcXCkpL2c7XG4gICAgdmFyIHByb3BlcnR5RGVsaW1pdGVyID0gLzooLispLztcbiAgICBjc3NUZXh0LnNwbGl0KGxpc3REZWxpbWl0ZXIpLmZvckVhY2goZnVuY3Rpb24gKGl0ZW0pIHtcbiAgICAgIGlmIChpdGVtKSB7XG4gICAgICAgIHZhciB0bXAgPSBpdGVtLnNwbGl0KHByb3BlcnR5RGVsaW1pdGVyKTtcbiAgICAgICAgdG1wLmxlbmd0aCA+IDEgJiYgKHJlc1t0bXBbMF0udHJpbSgpXSA9IHRtcFsxXS50cmltKCkpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIHJldHVybiByZXNcbiAgfSk7XG5cbiAgLy8gbWVyZ2Ugc3RhdGljIGFuZCBkeW5hbWljIHN0eWxlIGRhdGEgb24gdGhlIHNhbWUgdm5vZGVcbiAgZnVuY3Rpb24gbm9ybWFsaXplU3R5bGVEYXRhIChkYXRhKSB7XG4gICAgdmFyIHN0eWxlID0gbm9ybWFsaXplU3R5bGVCaW5kaW5nKGRhdGEuc3R5bGUpO1xuICAgIC8vIHN0YXRpYyBzdHlsZSBpcyBwcmUtcHJvY2Vzc2VkIGludG8gYW4gb2JqZWN0IGR1cmluZyBjb21waWxhdGlvblxuICAgIC8vIGFuZCBpcyBhbHdheXMgYSBmcmVzaCBvYmplY3QsIHNvIGl0J3Mgc2FmZSB0byBtZXJnZSBpbnRvIGl0XG4gICAgcmV0dXJuIGRhdGEuc3RhdGljU3R5bGVcbiAgICAgID8gZXh0ZW5kKGRhdGEuc3RhdGljU3R5bGUsIHN0eWxlKVxuICAgICAgOiBzdHlsZVxuICB9XG5cbiAgLy8gbm9ybWFsaXplIHBvc3NpYmxlIGFycmF5IC8gc3RyaW5nIHZhbHVlcyBpbnRvIE9iamVjdFxuICBmdW5jdGlvbiBub3JtYWxpemVTdHlsZUJpbmRpbmcgKGJpbmRpbmdTdHlsZSkge1xuICAgIGlmIChBcnJheS5pc0FycmF5KGJpbmRpbmdTdHlsZSkpIHtcbiAgICAgIHJldHVybiB0b09iamVjdChiaW5kaW5nU3R5bGUpXG4gICAgfVxuICAgIGlmICh0eXBlb2YgYmluZGluZ1N0eWxlID09PSAnc3RyaW5nJykge1xuICAgICAgcmV0dXJuIHBhcnNlU3R5bGVUZXh0KGJpbmRpbmdTdHlsZSlcbiAgICB9XG4gICAgcmV0dXJuIGJpbmRpbmdTdHlsZVxuICB9XG5cbiAgLyoqXG4gICAqIHBhcmVudCBjb21wb25lbnQgc3R5bGUgc2hvdWxkIGJlIGFmdGVyIGNoaWxkJ3NcbiAgICogc28gdGhhdCBwYXJlbnQgY29tcG9uZW50J3Mgc3R5bGUgY291bGQgb3ZlcnJpZGUgaXRcbiAgICovXG4gIGZ1bmN0aW9uIGdldFN0eWxlICh2bm9kZSwgY2hlY2tDaGlsZCkge1xuICAgIHZhciByZXMgPSB7fTtcbiAgICB2YXIgc3R5bGVEYXRhO1xuXG4gICAgaWYgKGNoZWNrQ2hpbGQpIHtcbiAgICAgIHZhciBjaGlsZE5vZGUgPSB2bm9kZTtcbiAgICAgIHdoaWxlIChjaGlsZE5vZGUuY29tcG9uZW50SW5zdGFuY2UpIHtcbiAgICAgICAgY2hpbGROb2RlID0gY2hpbGROb2RlLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZTtcbiAgICAgICAgaWYgKFxuICAgICAgICAgIGNoaWxkTm9kZSAmJiBjaGlsZE5vZGUuZGF0YSAmJlxuICAgICAgICAgIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEoY2hpbGROb2RlLmRhdGEpKVxuICAgICAgICApIHtcbiAgICAgICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgaWYgKChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEodm5vZGUuZGF0YSkpKSB7XG4gICAgICBleHRlbmQocmVzLCBzdHlsZURhdGEpO1xuICAgIH1cblxuICAgIHZhciBwYXJlbnROb2RlID0gdm5vZGU7XG4gICAgd2hpbGUgKChwYXJlbnROb2RlID0gcGFyZW50Tm9kZS5wYXJlbnQpKSB7XG4gICAgICBpZiAocGFyZW50Tm9kZS5kYXRhICYmIChzdHlsZURhdGEgPSBub3JtYWxpemVTdHlsZURhdGEocGFyZW50Tm9kZS5kYXRhKSkpIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgc3R5bGVEYXRhKTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIGNzc1ZhclJFID0gL14tLS87XG4gIHZhciBpbXBvcnRhbnRSRSA9IC9cXHMqIWltcG9ydGFudCQvO1xuICB2YXIgc2V0UHJvcCA9IGZ1bmN0aW9uIChlbCwgbmFtZSwgdmFsKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGNzc1ZhclJFLnRlc3QobmFtZSkpIHtcbiAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KG5hbWUsIHZhbCk7XG4gICAgfSBlbHNlIGlmIChpbXBvcnRhbnRSRS50ZXN0KHZhbCkpIHtcbiAgICAgIGVsLnN0eWxlLnNldFByb3BlcnR5KGh5cGhlbmF0ZShuYW1lKSwgdmFsLnJlcGxhY2UoaW1wb3J0YW50UkUsICcnKSwgJ2ltcG9ydGFudCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgbm9ybWFsaXplZE5hbWUgPSBub3JtYWxpemUobmFtZSk7XG4gICAgICBpZiAoQXJyYXkuaXNBcnJheSh2YWwpKSB7XG4gICAgICAgIC8vIFN1cHBvcnQgdmFsdWVzIGFycmF5IGNyZWF0ZWQgYnkgYXV0b3ByZWZpeGVyLCBlLmcuXG4gICAgICAgIC8vIHtkaXNwbGF5OiBbXCItd2Via2l0LWJveFwiLCBcIi1tcy1mbGV4Ym94XCIsIFwiZmxleFwiXX1cbiAgICAgICAgLy8gU2V0IHRoZW0gb25lIGJ5IG9uZSwgYW5kIHRoZSBicm93c2VyIHdpbGwgb25seSBzZXQgdGhvc2UgaXQgY2FuIHJlY29nbml6ZVxuICAgICAgICBmb3IgKHZhciBpID0gMCwgbGVuID0gdmFsLmxlbmd0aDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgICAgZWwuc3R5bGVbbm9ybWFsaXplZE5hbWVdID0gdmFsW2ldO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5zdHlsZVtub3JtYWxpemVkTmFtZV0gPSB2YWw7XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIHZhciB2ZW5kb3JOYW1lcyA9IFsnV2Via2l0JywgJ01veicsICdtcyddO1xuXG4gIHZhciBlbXB0eVN0eWxlO1xuICB2YXIgbm9ybWFsaXplID0gY2FjaGVkKGZ1bmN0aW9uIChwcm9wKSB7XG4gICAgZW1wdHlTdHlsZSA9IGVtcHR5U3R5bGUgfHwgZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jykuc3R5bGU7XG4gICAgcHJvcCA9IGNhbWVsaXplKHByb3ApO1xuICAgIGlmIChwcm9wICE9PSAnZmlsdGVyJyAmJiAocHJvcCBpbiBlbXB0eVN0eWxlKSkge1xuICAgICAgcmV0dXJuIHByb3BcbiAgICB9XG4gICAgdmFyIGNhcE5hbWUgPSBwcm9wLmNoYXJBdCgwKS50b1VwcGVyQ2FzZSgpICsgcHJvcC5zbGljZSgxKTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHZlbmRvck5hbWVzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgbmFtZSA9IHZlbmRvck5hbWVzW2ldICsgY2FwTmFtZTtcbiAgICAgIGlmIChuYW1lIGluIGVtcHR5U3R5bGUpIHtcbiAgICAgICAgcmV0dXJuIG5hbWVcbiAgICAgIH1cbiAgICB9XG4gIH0pO1xuXG4gIGZ1bmN0aW9uIHVwZGF0ZVN0eWxlIChvbGRWbm9kZSwgdm5vZGUpIHtcbiAgICB2YXIgZGF0YSA9IHZub2RlLmRhdGE7XG4gICAgdmFyIG9sZERhdGEgPSBvbGRWbm9kZS5kYXRhO1xuXG4gICAgaWYgKGlzVW5kZWYoZGF0YS5zdGF0aWNTdHlsZSkgJiYgaXNVbmRlZihkYXRhLnN0eWxlKSAmJlxuICAgICAgaXNVbmRlZihvbGREYXRhLnN0YXRpY1N0eWxlKSAmJiBpc1VuZGVmKG9sZERhdGEuc3R5bGUpXG4gICAgKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgY3VyLCBuYW1lO1xuICAgIHZhciBlbCA9IHZub2RlLmVsbTtcbiAgICB2YXIgb2xkU3RhdGljU3R5bGUgPSBvbGREYXRhLnN0YXRpY1N0eWxlO1xuICAgIHZhciBvbGRTdHlsZUJpbmRpbmcgPSBvbGREYXRhLm5vcm1hbGl6ZWRTdHlsZSB8fCBvbGREYXRhLnN0eWxlIHx8IHt9O1xuXG4gICAgLy8gaWYgc3RhdGljIHN0eWxlIGV4aXN0cywgc3R5bGViaW5kaW5nIGFscmVhZHkgbWVyZ2VkIGludG8gaXQgd2hlbiBkb2luZyBub3JtYWxpemVTdHlsZURhdGFcbiAgICB2YXIgb2xkU3R5bGUgPSBvbGRTdGF0aWNTdHlsZSB8fCBvbGRTdHlsZUJpbmRpbmc7XG5cbiAgICB2YXIgc3R5bGUgPSBub3JtYWxpemVTdHlsZUJpbmRpbmcodm5vZGUuZGF0YS5zdHlsZSkgfHwge307XG5cbiAgICAvLyBzdG9yZSBub3JtYWxpemVkIHN0eWxlIHVuZGVyIGEgZGlmZmVyZW50IGtleSBmb3IgbmV4dCBkaWZmXG4gICAgLy8gbWFrZSBzdXJlIHRvIGNsb25lIGl0IGlmIGl0J3MgcmVhY3RpdmUsIHNpbmNlIHRoZSB1c2VyIGxpa2VseSB3YW50c1xuICAgIC8vIHRvIG11dGF0ZSBpdC5cbiAgICB2bm9kZS5kYXRhLm5vcm1hbGl6ZWRTdHlsZSA9IGlzRGVmKHN0eWxlLl9fb2JfXylcbiAgICAgID8gZXh0ZW5kKHt9LCBzdHlsZSlcbiAgICAgIDogc3R5bGU7XG5cbiAgICB2YXIgbmV3U3R5bGUgPSBnZXRTdHlsZSh2bm9kZSwgdHJ1ZSk7XG5cbiAgICBmb3IgKG5hbWUgaW4gb2xkU3R5bGUpIHtcbiAgICAgIGlmIChpc1VuZGVmKG5ld1N0eWxlW25hbWVdKSkge1xuICAgICAgICBzZXRQcm9wKGVsLCBuYW1lLCAnJyk7XG4gICAgICB9XG4gICAgfVxuICAgIGZvciAobmFtZSBpbiBuZXdTdHlsZSkge1xuICAgICAgY3VyID0gbmV3U3R5bGVbbmFtZV07XG4gICAgICBpZiAoY3VyICE9PSBvbGRTdHlsZVtuYW1lXSkge1xuICAgICAgICAvLyBpZTkgc2V0dGluZyB0byBudWxsIGhhcyBubyBlZmZlY3QsIG11c3QgdXNlIGVtcHR5IHN0cmluZ1xuICAgICAgICBzZXRQcm9wKGVsLCBuYW1lLCBjdXIgPT0gbnVsbCA/ICcnIDogY3VyKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICB2YXIgc3R5bGUgPSB7XG4gICAgY3JlYXRlOiB1cGRhdGVTdHlsZSxcbiAgICB1cGRhdGU6IHVwZGF0ZVN0eWxlXG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIHdoaXRlc3BhY2VSRSA9IC9cXHMrLztcblxuICAvKipcbiAgICogQWRkIGNsYXNzIHdpdGggY29tcGF0aWJpbGl0eSBmb3IgU1ZHIHNpbmNlIGNsYXNzTGlzdCBpcyBub3Qgc3VwcG9ydGVkIG9uXG4gICAqIFNWRyBlbGVtZW50cyBpbiBJRVxuICAgKi9cbiAgZnVuY3Rpb24gYWRkQ2xhc3MgKGVsLCBjbHMpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoIWNscyB8fCAhKGNscyA9IGNscy50cmltKCkpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgIGlmIChlbC5jbGFzc0xpc3QpIHtcbiAgICAgIGlmIChjbHMuaW5kZXhPZignICcpID4gLTEpIHtcbiAgICAgICAgY2xzLnNwbGl0KHdoaXRlc3BhY2VSRSkuZm9yRWFjaChmdW5jdGlvbiAoYykgeyByZXR1cm4gZWwuY2xhc3NMaXN0LmFkZChjKTsgfSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBlbC5jbGFzc0xpc3QuYWRkKGNscyk7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjdXIgPSBcIiBcIiArIChlbC5nZXRBdHRyaWJ1dGUoJ2NsYXNzJykgfHwgJycpICsgXCIgXCI7XG4gICAgICBpZiAoY3VyLmluZGV4T2YoJyAnICsgY2xzICsgJyAnKSA8IDApIHtcbiAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdjbGFzcycsIChjdXIgKyBjbHMpLnRyaW0oKSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyoqXG4gICAqIFJlbW92ZSBjbGFzcyB3aXRoIGNvbXBhdGliaWxpdHkgZm9yIFNWRyBzaW5jZSBjbGFzc0xpc3QgaXMgbm90IHN1cHBvcnRlZCBvblxuICAgKiBTVkcgZWxlbWVudHMgaW4gSUVcbiAgICovXG4gIGZ1bmN0aW9uIHJlbW92ZUNsYXNzIChlbCwgY2xzKSB7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKCFjbHMgfHwgIShjbHMgPSBjbHMudHJpbSgpKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGVsc2UgKi9cbiAgICBpZiAoZWwuY2xhc3NMaXN0KSB7XG4gICAgICBpZiAoY2xzLmluZGV4T2YoJyAnKSA+IC0xKSB7XG4gICAgICAgIGNscy5zcGxpdCh3aGl0ZXNwYWNlUkUpLmZvckVhY2goZnVuY3Rpb24gKGMpIHsgcmV0dXJuIGVsLmNsYXNzTGlzdC5yZW1vdmUoYyk7IH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuY2xhc3NMaXN0LnJlbW92ZShjbHMpO1xuICAgICAgfVxuICAgICAgaWYgKCFlbC5jbGFzc0xpc3QubGVuZ3RoKSB7XG4gICAgICAgIGVsLnJlbW92ZUF0dHJpYnV0ZSgnY2xhc3MnKTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgdmFyIGN1ciA9IFwiIFwiICsgKGVsLmdldEF0dHJpYnV0ZSgnY2xhc3MnKSB8fCAnJykgKyBcIiBcIjtcbiAgICAgIHZhciB0YXIgPSAnICcgKyBjbHMgKyAnICc7XG4gICAgICB3aGlsZSAoY3VyLmluZGV4T2YodGFyKSA+PSAwKSB7XG4gICAgICAgIGN1ciA9IGN1ci5yZXBsYWNlKHRhciwgJyAnKTtcbiAgICAgIH1cbiAgICAgIGN1ciA9IGN1ci50cmltKCk7XG4gICAgICBpZiAoY3VyKSB7XG4gICAgICAgIGVsLnNldEF0dHJpYnV0ZSgnY2xhc3MnLCBjdXIpO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwucmVtb3ZlQXR0cmlidXRlKCdjbGFzcycpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIHJlc29sdmVUcmFuc2l0aW9uIChkZWYkJDEpIHtcbiAgICBpZiAoIWRlZiQkMSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBlbHNlICovXG4gICAgaWYgKHR5cGVvZiBkZWYkJDEgPT09ICdvYmplY3QnKSB7XG4gICAgICB2YXIgcmVzID0ge307XG4gICAgICBpZiAoZGVmJCQxLmNzcyAhPT0gZmFsc2UpIHtcbiAgICAgICAgZXh0ZW5kKHJlcywgYXV0b0Nzc1RyYW5zaXRpb24oZGVmJCQxLm5hbWUgfHwgJ3YnKSk7XG4gICAgICB9XG4gICAgICBleHRlbmQocmVzLCBkZWYkJDEpO1xuICAgICAgcmV0dXJuIHJlc1xuICAgIH0gZWxzZSBpZiAodHlwZW9mIGRlZiQkMSA9PT0gJ3N0cmluZycpIHtcbiAgICAgIHJldHVybiBhdXRvQ3NzVHJhbnNpdGlvbihkZWYkJDEpXG4gICAgfVxuICB9XG5cbiAgdmFyIGF1dG9Dc3NUcmFuc2l0aW9uID0gY2FjaGVkKGZ1bmN0aW9uIChuYW1lKSB7XG4gICAgcmV0dXJuIHtcbiAgICAgIGVudGVyQ2xhc3M6IChuYW1lICsgXCItZW50ZXJcIiksXG4gICAgICBlbnRlclRvQ2xhc3M6IChuYW1lICsgXCItZW50ZXItdG9cIiksXG4gICAgICBlbnRlckFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWVudGVyLWFjdGl2ZVwiKSxcbiAgICAgIGxlYXZlQ2xhc3M6IChuYW1lICsgXCItbGVhdmVcIiksXG4gICAgICBsZWF2ZVRvQ2xhc3M6IChuYW1lICsgXCItbGVhdmUtdG9cIiksXG4gICAgICBsZWF2ZUFjdGl2ZUNsYXNzOiAobmFtZSArIFwiLWxlYXZlLWFjdGl2ZVwiKVxuICAgIH1cbiAgfSk7XG5cbiAgdmFyIGhhc1RyYW5zaXRpb24gPSBpbkJyb3dzZXIgJiYgIWlzSUU5O1xuICB2YXIgVFJBTlNJVElPTiA9ICd0cmFuc2l0aW9uJztcbiAgdmFyIEFOSU1BVElPTiA9ICdhbmltYXRpb24nO1xuXG4gIC8vIFRyYW5zaXRpb24gcHJvcGVydHkvZXZlbnQgc25pZmZpbmdcbiAgdmFyIHRyYW5zaXRpb25Qcm9wID0gJ3RyYW5zaXRpb24nO1xuICB2YXIgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3RyYW5zaXRpb25lbmQnO1xuICB2YXIgYW5pbWF0aW9uUHJvcCA9ICdhbmltYXRpb24nO1xuICB2YXIgYW5pbWF0aW9uRW5kRXZlbnQgPSAnYW5pbWF0aW9uZW5kJztcbiAgaWYgKGhhc1RyYW5zaXRpb24pIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAod2luZG93Lm9udHJhbnNpdGlvbmVuZCA9PT0gdW5kZWZpbmVkICYmXG4gICAgICB3aW5kb3cub253ZWJraXR0cmFuc2l0aW9uZW5kICE9PSB1bmRlZmluZWRcbiAgICApIHtcbiAgICAgIHRyYW5zaXRpb25Qcm9wID0gJ1dlYmtpdFRyYW5zaXRpb24nO1xuICAgICAgdHJhbnNpdGlvbkVuZEV2ZW50ID0gJ3dlYmtpdFRyYW5zaXRpb25FbmQnO1xuICAgIH1cbiAgICBpZiAod2luZG93Lm9uYW5pbWF0aW9uZW5kID09PSB1bmRlZmluZWQgJiZcbiAgICAgIHdpbmRvdy5vbndlYmtpdGFuaW1hdGlvbmVuZCAhPT0gdW5kZWZpbmVkXG4gICAgKSB7XG4gICAgICBhbmltYXRpb25Qcm9wID0gJ1dlYmtpdEFuaW1hdGlvbic7XG4gICAgICBhbmltYXRpb25FbmRFdmVudCA9ICd3ZWJraXRBbmltYXRpb25FbmQnO1xuICAgIH1cbiAgfVxuXG4gIC8vIGJpbmRpbmcgdG8gd2luZG93IGlzIG5lY2Vzc2FyeSB0byBtYWtlIGhvdCByZWxvYWQgd29yayBpbiBJRSBpbiBzdHJpY3QgbW9kZVxuICB2YXIgcmFmID0gaW5Ccm93c2VyXG4gICAgPyB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lXG4gICAgICA/IHdpbmRvdy5yZXF1ZXN0QW5pbWF0aW9uRnJhbWUuYmluZCh3aW5kb3cpXG4gICAgICA6IHNldFRpbWVvdXRcbiAgICA6IC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovIGZ1bmN0aW9uIChmbikgeyByZXR1cm4gZm4oKTsgfTtcblxuICBmdW5jdGlvbiBuZXh0RnJhbWUgKGZuKSB7XG4gICAgcmFmKGZ1bmN0aW9uICgpIHtcbiAgICAgIHJhZihmbik7XG4gICAgfSk7XG4gIH1cblxuICBmdW5jdGlvbiBhZGRUcmFuc2l0aW9uQ2xhc3MgKGVsLCBjbHMpIHtcbiAgICB2YXIgdHJhbnNpdGlvbkNsYXNzZXMgPSBlbC5fdHJhbnNpdGlvbkNsYXNzZXMgfHwgKGVsLl90cmFuc2l0aW9uQ2xhc3NlcyA9IFtdKTtcbiAgICBpZiAodHJhbnNpdGlvbkNsYXNzZXMuaW5kZXhPZihjbHMpIDwgMCkge1xuICAgICAgdHJhbnNpdGlvbkNsYXNzZXMucHVzaChjbHMpO1xuICAgICAgYWRkQ2xhc3MoZWwsIGNscyk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVtb3ZlVHJhbnNpdGlvbkNsYXNzIChlbCwgY2xzKSB7XG4gICAgaWYgKGVsLl90cmFuc2l0aW9uQ2xhc3Nlcykge1xuICAgICAgcmVtb3ZlKGVsLl90cmFuc2l0aW9uQ2xhc3NlcywgY2xzKTtcbiAgICB9XG4gICAgcmVtb3ZlQ2xhc3MoZWwsIGNscyk7XG4gIH1cblxuICBmdW5jdGlvbiB3aGVuVHJhbnNpdGlvbkVuZHMgKFxuICAgIGVsLFxuICAgIGV4cGVjdGVkVHlwZSxcbiAgICBjYlxuICApIHtcbiAgICB2YXIgcmVmID0gZ2V0VHJhbnNpdGlvbkluZm8oZWwsIGV4cGVjdGVkVHlwZSk7XG4gICAgdmFyIHR5cGUgPSByZWYudHlwZTtcbiAgICB2YXIgdGltZW91dCA9IHJlZi50aW1lb3V0O1xuICAgIHZhciBwcm9wQ291bnQgPSByZWYucHJvcENvdW50O1xuICAgIGlmICghdHlwZSkgeyByZXR1cm4gY2IoKSB9XG4gICAgdmFyIGV2ZW50ID0gdHlwZSA9PT0gVFJBTlNJVElPTiA/IHRyYW5zaXRpb25FbmRFdmVudCA6IGFuaW1hdGlvbkVuZEV2ZW50O1xuICAgIHZhciBlbmRlZCA9IDA7XG4gICAgdmFyIGVuZCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgICAgIGNiKCk7XG4gICAgfTtcbiAgICB2YXIgb25FbmQgPSBmdW5jdGlvbiAoZSkge1xuICAgICAgaWYgKGUudGFyZ2V0ID09PSBlbCkge1xuICAgICAgICBpZiAoKytlbmRlZCA+PSBwcm9wQ291bnQpIHtcbiAgICAgICAgICBlbmQoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH07XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoZW5kZWQgPCBwcm9wQ291bnQpIHtcbiAgICAgICAgZW5kKCk7XG4gICAgICB9XG4gICAgfSwgdGltZW91dCArIDEpO1xuICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIG9uRW5kKTtcbiAgfVxuXG4gIHZhciB0cmFuc2Zvcm1SRSA9IC9cXGIodHJhbnNmb3JtfGFsbCkoLHwkKS87XG5cbiAgZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkluZm8gKGVsLCBleHBlY3RlZFR5cGUpIHtcbiAgICB2YXIgc3R5bGVzID0gd2luZG93LmdldENvbXB1dGVkU3R5bGUoZWwpO1xuICAgIC8vIEpTRE9NIG1heSByZXR1cm4gdW5kZWZpbmVkIGZvciB0cmFuc2l0aW9uIHByb3BlcnRpZXNcbiAgICB2YXIgdHJhbnNpdGlvbkRlbGF5cyA9IChzdHlsZXNbdHJhbnNpdGlvblByb3AgKyAnRGVsYXknXSB8fCAnJykuc3BsaXQoJywgJyk7XG4gICAgdmFyIHRyYW5zaXRpb25EdXJhdGlvbnMgPSAoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICAgIHZhciB0cmFuc2l0aW9uVGltZW91dCA9IGdldFRpbWVvdXQodHJhbnNpdGlvbkRlbGF5cywgdHJhbnNpdGlvbkR1cmF0aW9ucyk7XG4gICAgdmFyIGFuaW1hdGlvbkRlbGF5cyA9IChzdHlsZXNbYW5pbWF0aW9uUHJvcCArICdEZWxheSddIHx8ICcnKS5zcGxpdCgnLCAnKTtcbiAgICB2YXIgYW5pbWF0aW9uRHVyYXRpb25zID0gKHN0eWxlc1thbmltYXRpb25Qcm9wICsgJ0R1cmF0aW9uJ10gfHwgJycpLnNwbGl0KCcsICcpO1xuICAgIHZhciBhbmltYXRpb25UaW1lb3V0ID0gZ2V0VGltZW91dChhbmltYXRpb25EZWxheXMsIGFuaW1hdGlvbkR1cmF0aW9ucyk7XG5cbiAgICB2YXIgdHlwZTtcbiAgICB2YXIgdGltZW91dCA9IDA7XG4gICAgdmFyIHByb3BDb3VudCA9IDA7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGV4cGVjdGVkVHlwZSA9PT0gVFJBTlNJVElPTikge1xuICAgICAgaWYgKHRyYW5zaXRpb25UaW1lb3V0ID4gMCkge1xuICAgICAgICB0eXBlID0gVFJBTlNJVElPTjtcbiAgICAgICAgdGltZW91dCA9IHRyYW5zaXRpb25UaW1lb3V0O1xuICAgICAgICBwcm9wQ291bnQgPSB0cmFuc2l0aW9uRHVyYXRpb25zLmxlbmd0aDtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKGV4cGVjdGVkVHlwZSA9PT0gQU5JTUFUSU9OKSB7XG4gICAgICBpZiAoYW5pbWF0aW9uVGltZW91dCA+IDApIHtcbiAgICAgICAgdHlwZSA9IEFOSU1BVElPTjtcbiAgICAgICAgdGltZW91dCA9IGFuaW1hdGlvblRpbWVvdXQ7XG4gICAgICAgIHByb3BDb3VudCA9IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGg7XG4gICAgICB9XG4gICAgfSBlbHNlIHtcbiAgICAgIHRpbWVvdXQgPSBNYXRoLm1heCh0cmFuc2l0aW9uVGltZW91dCwgYW5pbWF0aW9uVGltZW91dCk7XG4gICAgICB0eXBlID0gdGltZW91dCA+IDBcbiAgICAgICAgPyB0cmFuc2l0aW9uVGltZW91dCA+IGFuaW1hdGlvblRpbWVvdXRcbiAgICAgICAgICA/IFRSQU5TSVRJT05cbiAgICAgICAgICA6IEFOSU1BVElPTlxuICAgICAgICA6IG51bGw7XG4gICAgICBwcm9wQ291bnQgPSB0eXBlXG4gICAgICAgID8gdHlwZSA9PT0gVFJBTlNJVElPTlxuICAgICAgICAgID8gdHJhbnNpdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgICA6IGFuaW1hdGlvbkR1cmF0aW9ucy5sZW5ndGhcbiAgICAgICAgOiAwO1xuICAgIH1cbiAgICB2YXIgaGFzVHJhbnNmb3JtID1cbiAgICAgIHR5cGUgPT09IFRSQU5TSVRJT04gJiZcbiAgICAgIHRyYW5zZm9ybVJFLnRlc3Qoc3R5bGVzW3RyYW5zaXRpb25Qcm9wICsgJ1Byb3BlcnR5J10pO1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiB0eXBlLFxuICAgICAgdGltZW91dDogdGltZW91dCxcbiAgICAgIHByb3BDb3VudDogcHJvcENvdW50LFxuICAgICAgaGFzVHJhbnNmb3JtOiBoYXNUcmFuc2Zvcm1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZXRUaW1lb3V0IChkZWxheXMsIGR1cmF0aW9ucykge1xuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBuZXh0ICovXG4gICAgd2hpbGUgKGRlbGF5cy5sZW5ndGggPCBkdXJhdGlvbnMubGVuZ3RoKSB7XG4gICAgICBkZWxheXMgPSBkZWxheXMuY29uY2F0KGRlbGF5cyk7XG4gICAgfVxuXG4gICAgcmV0dXJuIE1hdGgubWF4LmFwcGx5KG51bGwsIGR1cmF0aW9ucy5tYXAoZnVuY3Rpb24gKGQsIGkpIHtcbiAgICAgIHJldHVybiB0b01zKGQpICsgdG9NcyhkZWxheXNbaV0pXG4gICAgfSkpXG4gIH1cblxuICAvLyBPbGQgdmVyc2lvbnMgb2YgQ2hyb21pdW0gKGJlbG93IDYxLjAuMzE2My4xMDApIGZvcm1hdHMgZmxvYXRpbmcgcG9pbnRlciBudW1iZXJzXG4gIC8vIGluIGEgbG9jYWxlLWRlcGVuZGVudCB3YXksIHVzaW5nIGEgY29tbWEgaW5zdGVhZCBvZiBhIGRvdC5cbiAgLy8gSWYgY29tbWEgaXMgbm90IHJlcGxhY2VkIHdpdGggYSBkb3QsIHRoZSBpbnB1dCB3aWxsIGJlIHJvdW5kZWQgZG93biAoaS5lLiBhY3RpbmdcbiAgLy8gYXMgYSBmbG9vciBmdW5jdGlvbikgY2F1c2luZyB1bmV4cGVjdGVkIGJlaGF2aW9yc1xuICBmdW5jdGlvbiB0b01zIChzKSB7XG4gICAgcmV0dXJuIE51bWJlcihzLnNsaWNlKDAsIC0xKS5yZXBsYWNlKCcsJywgJy4nKSkgKiAxMDAwXG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBlbnRlciAodm5vZGUsIHRvZ2dsZURpc3BsYXkpIHtcbiAgICB2YXIgZWwgPSB2bm9kZS5lbG07XG5cbiAgICAvLyBjYWxsIGxlYXZlIGNhbGxiYWNrIG5vd1xuICAgIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICAgIGVsLl9sZWF2ZUNiLmNhbmNlbGxlZCA9IHRydWU7XG4gICAgICBlbC5fbGVhdmVDYigpO1xuICAgIH1cblxuICAgIHZhciBkYXRhID0gcmVzb2x2ZVRyYW5zaXRpb24odm5vZGUuZGF0YS50cmFuc2l0aW9uKTtcbiAgICBpZiAoaXNVbmRlZihkYXRhKSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSB8fCBlbC5ub2RlVHlwZSAhPT0gMSkge1xuICAgICAgcmV0dXJuXG4gICAgfVxuXG4gICAgdmFyIGNzcyA9IGRhdGEuY3NzO1xuICAgIHZhciB0eXBlID0gZGF0YS50eXBlO1xuICAgIHZhciBlbnRlckNsYXNzID0gZGF0YS5lbnRlckNsYXNzO1xuICAgIHZhciBlbnRlclRvQ2xhc3MgPSBkYXRhLmVudGVyVG9DbGFzcztcbiAgICB2YXIgZW50ZXJBY3RpdmVDbGFzcyA9IGRhdGEuZW50ZXJBY3RpdmVDbGFzcztcbiAgICB2YXIgYXBwZWFyQ2xhc3MgPSBkYXRhLmFwcGVhckNsYXNzO1xuICAgIHZhciBhcHBlYXJUb0NsYXNzID0gZGF0YS5hcHBlYXJUb0NsYXNzO1xuICAgIHZhciBhcHBlYXJBY3RpdmVDbGFzcyA9IGRhdGEuYXBwZWFyQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGJlZm9yZUVudGVyID0gZGF0YS5iZWZvcmVFbnRlcjtcbiAgICB2YXIgZW50ZXIgPSBkYXRhLmVudGVyO1xuICAgIHZhciBhZnRlckVudGVyID0gZGF0YS5hZnRlckVudGVyO1xuICAgIHZhciBlbnRlckNhbmNlbGxlZCA9IGRhdGEuZW50ZXJDYW5jZWxsZWQ7XG4gICAgdmFyIGJlZm9yZUFwcGVhciA9IGRhdGEuYmVmb3JlQXBwZWFyO1xuICAgIHZhciBhcHBlYXIgPSBkYXRhLmFwcGVhcjtcbiAgICB2YXIgYWZ0ZXJBcHBlYXIgPSBkYXRhLmFmdGVyQXBwZWFyO1xuICAgIHZhciBhcHBlYXJDYW5jZWxsZWQgPSBkYXRhLmFwcGVhckNhbmNlbGxlZDtcbiAgICB2YXIgZHVyYXRpb24gPSBkYXRhLmR1cmF0aW9uO1xuXG4gICAgLy8gYWN0aXZlSW5zdGFuY2Ugd2lsbCBhbHdheXMgYmUgdGhlIDx0cmFuc2l0aW9uPiBjb21wb25lbnQgbWFuYWdpbmcgdGhpc1xuICAgIC8vIHRyYW5zaXRpb24uIE9uZSBlZGdlIGNhc2UgdG8gY2hlY2sgaXMgd2hlbiB0aGUgPHRyYW5zaXRpb24+IGlzIHBsYWNlZFxuICAgIC8vIGFzIHRoZSByb290IG5vZGUgb2YgYSBjaGlsZCBjb21wb25lbnQuIEluIHRoYXQgY2FzZSB3ZSBuZWVkIHRvIGNoZWNrXG4gICAgLy8gPHRyYW5zaXRpb24+J3MgcGFyZW50IGZvciBhcHBlYXIgY2hlY2suXG4gICAgdmFyIGNvbnRleHQgPSBhY3RpdmVJbnN0YW5jZTtcbiAgICB2YXIgdHJhbnNpdGlvbk5vZGUgPSBhY3RpdmVJbnN0YW5jZS4kdm5vZGU7XG4gICAgd2hpbGUgKHRyYW5zaXRpb25Ob2RlICYmIHRyYW5zaXRpb25Ob2RlLnBhcmVudCkge1xuICAgICAgY29udGV4dCA9IHRyYW5zaXRpb25Ob2RlLmNvbnRleHQ7XG4gICAgICB0cmFuc2l0aW9uTm9kZSA9IHRyYW5zaXRpb25Ob2RlLnBhcmVudDtcbiAgICB9XG5cbiAgICB2YXIgaXNBcHBlYXIgPSAhY29udGV4dC5faXNNb3VudGVkIHx8ICF2bm9kZS5pc1Jvb3RJbnNlcnQ7XG5cbiAgICBpZiAoaXNBcHBlYXIgJiYgIWFwcGVhciAmJiBhcHBlYXIgIT09ICcnKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG5cbiAgICB2YXIgc3RhcnRDbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhckNsYXNzXG4gICAgICA/IGFwcGVhckNsYXNzXG4gICAgICA6IGVudGVyQ2xhc3M7XG4gICAgdmFyIGFjdGl2ZUNsYXNzID0gaXNBcHBlYXIgJiYgYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICAgID8gYXBwZWFyQWN0aXZlQ2xhc3NcbiAgICAgIDogZW50ZXJBY3RpdmVDbGFzcztcbiAgICB2YXIgdG9DbGFzcyA9IGlzQXBwZWFyICYmIGFwcGVhclRvQ2xhc3NcbiAgICAgID8gYXBwZWFyVG9DbGFzc1xuICAgICAgOiBlbnRlclRvQ2xhc3M7XG5cbiAgICB2YXIgYmVmb3JlRW50ZXJIb29rID0gaXNBcHBlYXJcbiAgICAgID8gKGJlZm9yZUFwcGVhciB8fCBiZWZvcmVFbnRlcilcbiAgICAgIDogYmVmb3JlRW50ZXI7XG4gICAgdmFyIGVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgICA/ICh0eXBlb2YgYXBwZWFyID09PSAnZnVuY3Rpb24nID8gYXBwZWFyIDogZW50ZXIpXG4gICAgICA6IGVudGVyO1xuICAgIHZhciBhZnRlckVudGVySG9vayA9IGlzQXBwZWFyXG4gICAgICA/IChhZnRlckFwcGVhciB8fCBhZnRlckVudGVyKVxuICAgICAgOiBhZnRlckVudGVyO1xuICAgIHZhciBlbnRlckNhbmNlbGxlZEhvb2sgPSBpc0FwcGVhclxuICAgICAgPyAoYXBwZWFyQ2FuY2VsbGVkIHx8IGVudGVyQ2FuY2VsbGVkKVxuICAgICAgOiBlbnRlckNhbmNlbGxlZDtcblxuICAgIHZhciBleHBsaWNpdEVudGVyRHVyYXRpb24gPSB0b051bWJlcihcbiAgICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgICA/IGR1cmF0aW9uLmVudGVyXG4gICAgICAgIDogZHVyYXRpb25cbiAgICApO1xuXG4gICAgaWYgKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiAhPSBudWxsKSB7XG4gICAgICBjaGVja0R1cmF0aW9uKGV4cGxpY2l0RW50ZXJEdXJhdGlvbiwgJ2VudGVyJywgdm5vZGUpO1xuICAgIH1cblxuICAgIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gICAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGVudGVySG9vayk7XG5cbiAgICB2YXIgY2IgPSBlbC5fZW50ZXJDYiA9IG9uY2UoZnVuY3Rpb24gKCkge1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBhY3RpdmVDbGFzcyk7XG4gICAgICB9XG4gICAgICBpZiAoY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBzdGFydENsYXNzKTtcbiAgICAgICAgfVxuICAgICAgICBlbnRlckNhbmNlbGxlZEhvb2sgJiYgZW50ZXJDYW5jZWxsZWRIb29rKGVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGFmdGVyRW50ZXJIb29rICYmIGFmdGVyRW50ZXJIb29rKGVsKTtcbiAgICAgIH1cbiAgICAgIGVsLl9lbnRlckNiID0gbnVsbDtcbiAgICB9KTtcblxuICAgIGlmICghdm5vZGUuZGF0YS5zaG93KSB7XG4gICAgICAvLyByZW1vdmUgcGVuZGluZyBsZWF2ZSBlbGVtZW50IG9uIGVudGVyIGJ5IGluamVjdGluZyBhbiBpbnNlcnQgaG9va1xuICAgICAgbWVyZ2VWTm9kZUhvb2sodm5vZGUsICdpbnNlcnQnLCBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnROb2RlO1xuICAgICAgICB2YXIgcGVuZGluZ05vZGUgPSBwYXJlbnQgJiYgcGFyZW50Ll9wZW5kaW5nICYmIHBhcmVudC5fcGVuZGluZ1t2bm9kZS5rZXldO1xuICAgICAgICBpZiAocGVuZGluZ05vZGUgJiZcbiAgICAgICAgICBwZW5kaW5nTm9kZS50YWcgPT09IHZub2RlLnRhZyAmJlxuICAgICAgICAgIHBlbmRpbmdOb2RlLmVsbS5fbGVhdmVDYlxuICAgICAgICApIHtcbiAgICAgICAgICBwZW5kaW5nTm9kZS5lbG0uX2xlYXZlQ2IoKTtcbiAgICAgICAgfVxuICAgICAgICBlbnRlckhvb2sgJiYgZW50ZXJIb29rKGVsLCBjYik7XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBzdGFydCBlbnRlciB0cmFuc2l0aW9uXG4gICAgYmVmb3JlRW50ZXJIb29rICYmIGJlZm9yZUVudGVySG9vayhlbCk7XG4gICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGFjdGl2ZUNsYXNzKTtcbiAgICAgIG5leHRGcmFtZShmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgc3RhcnRDbGFzcyk7XG4gICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCB0b0NsYXNzKTtcbiAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgIGlmIChpc1ZhbGlkRHVyYXRpb24oZXhwbGljaXRFbnRlckR1cmF0aW9uKSkge1xuICAgICAgICAgICAgICBzZXRUaW1lb3V0KGNiLCBleHBsaWNpdEVudGVyRHVyYXRpb24pO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgd2hlblRyYW5zaXRpb25FbmRzKGVsLCB0eXBlLCBjYik7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9XG5cbiAgICBpZiAodm5vZGUuZGF0YS5zaG93KSB7XG4gICAgICB0b2dnbGVEaXNwbGF5ICYmIHRvZ2dsZURpc3BsYXkoKTtcbiAgICAgIGVudGVySG9vayAmJiBlbnRlckhvb2soZWwsIGNiKTtcbiAgICB9XG5cbiAgICBpZiAoIWV4cGVjdHNDU1MgJiYgIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgIGNiKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbGVhdmUgKHZub2RlLCBybSkge1xuICAgIHZhciBlbCA9IHZub2RlLmVsbTtcblxuICAgIC8vIGNhbGwgZW50ZXIgY2FsbGJhY2sgbm93XG4gICAgaWYgKGlzRGVmKGVsLl9lbnRlckNiKSkge1xuICAgICAgZWwuX2VudGVyQ2IuY2FuY2VsbGVkID0gdHJ1ZTtcbiAgICAgIGVsLl9lbnRlckNiKCk7XG4gICAgfVxuXG4gICAgdmFyIGRhdGEgPSByZXNvbHZlVHJhbnNpdGlvbih2bm9kZS5kYXRhLnRyYW5zaXRpb24pO1xuICAgIGlmIChpc1VuZGVmKGRhdGEpIHx8IGVsLm5vZGVUeXBlICE9PSAxKSB7XG4gICAgICByZXR1cm4gcm0oKVxuICAgIH1cblxuICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgIGlmIChpc0RlZihlbC5fbGVhdmVDYikpIHtcbiAgICAgIHJldHVyblxuICAgIH1cblxuICAgIHZhciBjc3MgPSBkYXRhLmNzcztcbiAgICB2YXIgdHlwZSA9IGRhdGEudHlwZTtcbiAgICB2YXIgbGVhdmVDbGFzcyA9IGRhdGEubGVhdmVDbGFzcztcbiAgICB2YXIgbGVhdmVUb0NsYXNzID0gZGF0YS5sZWF2ZVRvQ2xhc3M7XG4gICAgdmFyIGxlYXZlQWN0aXZlQ2xhc3MgPSBkYXRhLmxlYXZlQWN0aXZlQ2xhc3M7XG4gICAgdmFyIGJlZm9yZUxlYXZlID0gZGF0YS5iZWZvcmVMZWF2ZTtcbiAgICB2YXIgbGVhdmUgPSBkYXRhLmxlYXZlO1xuICAgIHZhciBhZnRlckxlYXZlID0gZGF0YS5hZnRlckxlYXZlO1xuICAgIHZhciBsZWF2ZUNhbmNlbGxlZCA9IGRhdGEubGVhdmVDYW5jZWxsZWQ7XG4gICAgdmFyIGRlbGF5TGVhdmUgPSBkYXRhLmRlbGF5TGVhdmU7XG4gICAgdmFyIGR1cmF0aW9uID0gZGF0YS5kdXJhdGlvbjtcblxuICAgIHZhciBleHBlY3RzQ1NTID0gY3NzICE9PSBmYWxzZSAmJiAhaXNJRTk7XG4gICAgdmFyIHVzZXJXYW50c0NvbnRyb2wgPSBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKGxlYXZlKTtcblxuICAgIHZhciBleHBsaWNpdExlYXZlRHVyYXRpb24gPSB0b051bWJlcihcbiAgICAgIGlzT2JqZWN0KGR1cmF0aW9uKVxuICAgICAgICA/IGR1cmF0aW9uLmxlYXZlXG4gICAgICAgIDogZHVyYXRpb25cbiAgICApO1xuXG4gICAgaWYgKGlzRGVmKGV4cGxpY2l0TGVhdmVEdXJhdGlvbikpIHtcbiAgICAgIGNoZWNrRHVyYXRpb24oZXhwbGljaXRMZWF2ZUR1cmF0aW9uLCAnbGVhdmUnLCB2bm9kZSk7XG4gICAgfVxuXG4gICAgdmFyIGNiID0gZWwuX2xlYXZlQ2IgPSBvbmNlKGZ1bmN0aW9uICgpIHtcbiAgICAgIGlmIChlbC5wYXJlbnROb2RlICYmIGVsLnBhcmVudE5vZGUuX3BlbmRpbmcpIHtcbiAgICAgICAgZWwucGFyZW50Tm9kZS5fcGVuZGluZ1t2bm9kZS5rZXldID0gbnVsbDtcbiAgICAgIH1cbiAgICAgIGlmIChleHBlY3RzQ1NTKSB7XG4gICAgICAgIHJlbW92ZVRyYW5zaXRpb25DbGFzcyhlbCwgbGVhdmVUb0NsYXNzKTtcbiAgICAgICAgcmVtb3ZlVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgIH1cbiAgICAgIGlmIChjYi5jYW5jZWxsZWQpIHtcbiAgICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICB9XG4gICAgICAgIGxlYXZlQ2FuY2VsbGVkICYmIGxlYXZlQ2FuY2VsbGVkKGVsKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHJtKCk7XG4gICAgICAgIGFmdGVyTGVhdmUgJiYgYWZ0ZXJMZWF2ZShlbCk7XG4gICAgICB9XG4gICAgICBlbC5fbGVhdmVDYiA9IG51bGw7XG4gICAgfSk7XG5cbiAgICBpZiAoZGVsYXlMZWF2ZSkge1xuICAgICAgZGVsYXlMZWF2ZShwZXJmb3JtTGVhdmUpO1xuICAgIH0gZWxzZSB7XG4gICAgICBwZXJmb3JtTGVhdmUoKTtcbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwZXJmb3JtTGVhdmUgKCkge1xuICAgICAgLy8gdGhlIGRlbGF5ZWQgbGVhdmUgbWF5IGhhdmUgYWxyZWFkeSBiZWVuIGNhbmNlbGxlZFxuICAgICAgaWYgKGNiLmNhbmNlbGxlZCkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cbiAgICAgIC8vIHJlY29yZCBsZWF2aW5nIGVsZW1lbnRcbiAgICAgIGlmICghdm5vZGUuZGF0YS5zaG93ICYmIGVsLnBhcmVudE5vZGUpIHtcbiAgICAgICAgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgfHwgKGVsLnBhcmVudE5vZGUuX3BlbmRpbmcgPSB7fSkpWyh2bm9kZS5rZXkpXSA9IHZub2RlO1xuICAgICAgfVxuICAgICAgYmVmb3JlTGVhdmUgJiYgYmVmb3JlTGVhdmUoZWwpO1xuICAgICAgaWYgKGV4cGVjdHNDU1MpIHtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUNsYXNzKTtcbiAgICAgICAgYWRkVHJhbnNpdGlvbkNsYXNzKGVsLCBsZWF2ZUFjdGl2ZUNsYXNzKTtcbiAgICAgICAgbmV4dEZyYW1lKGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlQ2xhc3MpO1xuICAgICAgICAgIGlmICghY2IuY2FuY2VsbGVkKSB7XG4gICAgICAgICAgICBhZGRUcmFuc2l0aW9uQ2xhc3MoZWwsIGxlYXZlVG9DbGFzcyk7XG4gICAgICAgICAgICBpZiAoIXVzZXJXYW50c0NvbnRyb2wpIHtcbiAgICAgICAgICAgICAgaWYgKGlzVmFsaWREdXJhdGlvbihleHBsaWNpdExlYXZlRHVyYXRpb24pKSB7XG4gICAgICAgICAgICAgICAgc2V0VGltZW91dChjYiwgZXhwbGljaXRMZWF2ZUR1cmF0aW9uKTtcbiAgICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB3aGVuVHJhbnNpdGlvbkVuZHMoZWwsIHR5cGUsIGNiKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICB9XG4gICAgICBsZWF2ZSAmJiBsZWF2ZShlbCwgY2IpO1xuICAgICAgaWYgKCFleHBlY3RzQ1NTICYmICF1c2VyV2FudHNDb250cm9sKSB7XG4gICAgICAgIGNiKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gb25seSB1c2VkIGluIGRldiBtb2RlXG4gIGZ1bmN0aW9uIGNoZWNrRHVyYXRpb24gKHZhbCwgbmFtZSwgdm5vZGUpIHtcbiAgICBpZiAodHlwZW9mIHZhbCAhPT0gJ251bWJlcicpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIG5vdCBhIHZhbGlkIG51bWJlciAtIFwiICtcbiAgICAgICAgXCJnb3QgXCIgKyAoSlNPTi5zdHJpbmdpZnkodmFsKSkgKyBcIi5cIixcbiAgICAgICAgdm5vZGUuY29udGV4dFxuICAgICAgKTtcbiAgICB9IGVsc2UgaWYgKGlzTmFOKHZhbCkpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiPHRyYW5zaXRpb24+IGV4cGxpY2l0IFwiICsgbmFtZSArIFwiIGR1cmF0aW9uIGlzIE5hTiAtIFwiICtcbiAgICAgICAgJ3RoZSBkdXJhdGlvbiBleHByZXNzaW9uIG1pZ2h0IGJlIGluY29ycmVjdC4nLFxuICAgICAgICB2bm9kZS5jb250ZXh0XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGlzVmFsaWREdXJhdGlvbiAodmFsKSB7XG4gICAgcmV0dXJuIHR5cGVvZiB2YWwgPT09ICdudW1iZXInICYmICFpc05hTih2YWwpXG4gIH1cblxuICAvKipcbiAgICogTm9ybWFsaXplIGEgdHJhbnNpdGlvbiBob29rJ3MgYXJndW1lbnQgbGVuZ3RoLiBUaGUgaG9vayBtYXkgYmU6XG4gICAqIC0gYSBtZXJnZWQgaG9vayAoaW52b2tlcikgd2l0aCB0aGUgb3JpZ2luYWwgaW4gLmZuc1xuICAgKiAtIGEgd3JhcHBlZCBjb21wb25lbnQgbWV0aG9kIChjaGVjayAuX2xlbmd0aClcbiAgICogLSBhIHBsYWluIGZ1bmN0aW9uICgubGVuZ3RoKVxuICAgKi9cbiAgZnVuY3Rpb24gZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCAoZm4pIHtcbiAgICBpZiAoaXNVbmRlZihmbikpIHtcbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICB2YXIgaW52b2tlckZucyA9IGZuLmZucztcbiAgICBpZiAoaXNEZWYoaW52b2tlckZucykpIHtcbiAgICAgIC8vIGludm9rZXJcbiAgICAgIHJldHVybiBnZXRIb29rQXJndW1lbnRzTGVuZ3RoKFxuICAgICAgICBBcnJheS5pc0FycmF5KGludm9rZXJGbnMpXG4gICAgICAgICAgPyBpbnZva2VyRm5zWzBdXG4gICAgICAgICAgOiBpbnZva2VyRm5zXG4gICAgICApXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoZm4uX2xlbmd0aCB8fCBmbi5sZW5ndGgpID4gMVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIF9lbnRlciAoXywgdm5vZGUpIHtcbiAgICBpZiAodm5vZGUuZGF0YS5zaG93ICE9PSB0cnVlKSB7XG4gICAgICBlbnRlcih2bm9kZSk7XG4gICAgfVxuICB9XG5cbiAgdmFyIHRyYW5zaXRpb24gPSBpbkJyb3dzZXIgPyB7XG4gICAgY3JlYXRlOiBfZW50ZXIsXG4gICAgYWN0aXZhdGU6IF9lbnRlcixcbiAgICByZW1vdmU6IGZ1bmN0aW9uIHJlbW92ZSQkMSAodm5vZGUsIHJtKSB7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgZWxzZSAqL1xuICAgICAgaWYgKHZub2RlLmRhdGEuc2hvdyAhPT0gdHJ1ZSkge1xuICAgICAgICBsZWF2ZSh2bm9kZSwgcm0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgcm0oKTtcbiAgICAgIH1cbiAgICB9XG4gIH0gOiB7fTtcblxuICB2YXIgcGxhdGZvcm1Nb2R1bGVzID0gW1xuICAgIGF0dHJzLFxuICAgIGtsYXNzLFxuICAgIGV2ZW50cyxcbiAgICBkb21Qcm9wcyxcbiAgICBzdHlsZSxcbiAgICB0cmFuc2l0aW9uXG4gIF07XG5cbiAgLyogICovXG5cbiAgLy8gdGhlIGRpcmVjdGl2ZSBtb2R1bGUgc2hvdWxkIGJlIGFwcGxpZWQgbGFzdCwgYWZ0ZXIgYWxsXG4gIC8vIGJ1aWx0LWluIG1vZHVsZXMgaGF2ZSBiZWVuIGFwcGxpZWQuXG4gIHZhciBtb2R1bGVzID0gcGxhdGZvcm1Nb2R1bGVzLmNvbmNhdChiYXNlTW9kdWxlcyk7XG5cbiAgdmFyIHBhdGNoID0gY3JlYXRlUGF0Y2hGdW5jdGlvbih7IG5vZGVPcHM6IG5vZGVPcHMsIG1vZHVsZXM6IG1vZHVsZXMgfSk7XG5cbiAgLyoqXG4gICAqIE5vdCB0eXBlIGNoZWNraW5nIHRoaXMgZmlsZSBiZWNhdXNlIGZsb3cgZG9lc24ndCBsaWtlIGF0dGFjaGluZ1xuICAgKiBwcm9wZXJ0aWVzIHRvIEVsZW1lbnRzLlxuICAgKi9cblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgaWYgKGlzSUU5KSB7XG4gICAgLy8gaHR0cDovL3d3dy5tYXR0czQxMS5jb20vcG9zdC9pbnRlcm5ldC1leHBsb3Jlci05LW9uaW5wdXQvXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcignc2VsZWN0aW9uY2hhbmdlJywgZnVuY3Rpb24gKCkge1xuICAgICAgdmFyIGVsID0gZG9jdW1lbnQuYWN0aXZlRWxlbWVudDtcbiAgICAgIGlmIChlbCAmJiBlbC52bW9kZWwpIHtcbiAgICAgICAgdHJpZ2dlcihlbCwgJ2lucHV0Jyk7XG4gICAgICB9XG4gICAgfSk7XG4gIH1cblxuICB2YXIgZGlyZWN0aXZlID0ge1xuICAgIGluc2VydGVkOiBmdW5jdGlvbiBpbnNlcnRlZCAoZWwsIGJpbmRpbmcsIHZub2RlLCBvbGRWbm9kZSkge1xuICAgICAgaWYgKHZub2RlLnRhZyA9PT0gJ3NlbGVjdCcpIHtcbiAgICAgICAgLy8gIzY5MDNcbiAgICAgICAgaWYgKG9sZFZub2RlLmVsbSAmJiAhb2xkVm5vZGUuZWxtLl92T3B0aW9ucykge1xuICAgICAgICAgIG1lcmdlVk5vZGVIb29rKHZub2RlLCAncG9zdHBhdGNoJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgZGlyZWN0aXZlLmNvbXBvbmVudFVwZGF0ZWQoZWwsIGJpbmRpbmcsIHZub2RlKTtcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICBzZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm5vZGUuY29udGV4dCk7XG4gICAgICAgIH1cbiAgICAgICAgZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgfSBlbHNlIGlmICh2bm9kZS50YWcgPT09ICd0ZXh0YXJlYScgfHwgaXNUZXh0SW5wdXRUeXBlKGVsLnR5cGUpKSB7XG4gICAgICAgIGVsLl92TW9kaWZpZXJzID0gYmluZGluZy5tb2RpZmllcnM7XG4gICAgICAgIGlmICghYmluZGluZy5tb2RpZmllcnMubGF6eSkge1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uc3RhcnQnLCBvbkNvbXBvc2l0aW9uU3RhcnQpO1xuICAgICAgICAgIGVsLmFkZEV2ZW50TGlzdGVuZXIoJ2NvbXBvc2l0aW9uZW5kJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgICAgLy8gU2FmYXJpIDwgMTAuMiAmIFVJV2ViVmlldyBkb2Vzbid0IGZpcmUgY29tcG9zaXRpb25lbmQgd2hlblxuICAgICAgICAgIC8vIHN3aXRjaGluZyBmb2N1cyBiZWZvcmUgY29uZmlybWluZyBjb21wb3NpdGlvbiBjaG9pY2VcbiAgICAgICAgICAvLyB0aGlzIGFsc28gZml4ZXMgdGhlIGlzc3VlIHdoZXJlIHNvbWUgYnJvd3NlcnMgZS5nLiBpT1MgQ2hyb21lXG4gICAgICAgICAgLy8gZmlyZXMgXCJjaGFuZ2VcIiBpbnN0ZWFkIG9mIFwiaW5wdXRcIiBvbiBhdXRvY29tcGxldGUuXG4gICAgICAgICAgZWwuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgb25Db21wb3NpdGlvbkVuZCk7XG4gICAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgICAgaWYgKGlzSUU5KSB7XG4gICAgICAgICAgICBlbC52bW9kZWwgPSB0cnVlO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0sXG5cbiAgICBjb21wb25lbnRVcGRhdGVkOiBmdW5jdGlvbiBjb21wb25lbnRVcGRhdGVkIChlbCwgYmluZGluZywgdm5vZGUpIHtcbiAgICAgIGlmICh2bm9kZS50YWcgPT09ICdzZWxlY3QnKSB7XG4gICAgICAgIHNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bm9kZS5jb250ZXh0KTtcbiAgICAgICAgLy8gaW4gY2FzZSB0aGUgb3B0aW9ucyByZW5kZXJlZCBieSB2LWZvciBoYXZlIGNoYW5nZWQsXG4gICAgICAgIC8vIGl0J3MgcG9zc2libGUgdGhhdCB0aGUgdmFsdWUgaXMgb3V0LW9mLXN5bmMgd2l0aCB0aGUgcmVuZGVyZWQgb3B0aW9ucy5cbiAgICAgICAgLy8gZGV0ZWN0IHN1Y2ggY2FzZXMgYW5kIGZpbHRlciBvdXQgdmFsdWVzIHRoYXQgbm8gbG9uZ2VyIGhhcyBhIG1hdGNoaW5nXG4gICAgICAgIC8vIG9wdGlvbiBpbiB0aGUgRE9NLlxuICAgICAgICB2YXIgcHJldk9wdGlvbnMgPSBlbC5fdk9wdGlvbnM7XG4gICAgICAgIHZhciBjdXJPcHRpb25zID0gZWwuX3ZPcHRpb25zID0gW10ubWFwLmNhbGwoZWwub3B0aW9ucywgZ2V0VmFsdWUpO1xuICAgICAgICBpZiAoY3VyT3B0aW9ucy5zb21lKGZ1bmN0aW9uIChvLCBpKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCBwcmV2T3B0aW9uc1tpXSk7IH0pKSB7XG4gICAgICAgICAgLy8gdHJpZ2dlciBjaGFuZ2UgZXZlbnQgaWZcbiAgICAgICAgICAvLyBubyBtYXRjaGluZyBvcHRpb24gZm91bmQgZm9yIGF0IGxlYXN0IG9uZSB2YWx1ZVxuICAgICAgICAgIHZhciBuZWVkUmVzZXQgPSBlbC5tdWx0aXBsZVxuICAgICAgICAgICAgPyBiaW5kaW5nLnZhbHVlLnNvbWUoZnVuY3Rpb24gKHYpIHsgcmV0dXJuIGhhc05vTWF0Y2hpbmdPcHRpb24odiwgY3VyT3B0aW9ucyk7IH0pXG4gICAgICAgICAgICA6IGJpbmRpbmcudmFsdWUgIT09IGJpbmRpbmcub2xkVmFsdWUgJiYgaGFzTm9NYXRjaGluZ09wdGlvbihiaW5kaW5nLnZhbHVlLCBjdXJPcHRpb25zKTtcbiAgICAgICAgICBpZiAobmVlZFJlc2V0KSB7XG4gICAgICAgICAgICB0cmlnZ2VyKGVsLCAnY2hhbmdlJyk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9O1xuXG4gIGZ1bmN0aW9uIHNldFNlbGVjdGVkIChlbCwgYmluZGluZywgdm0pIHtcbiAgICBhY3R1YWxseVNldFNlbGVjdGVkKGVsLCBiaW5kaW5nLCB2bSk7XG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGlzSUUgfHwgaXNFZGdlKSB7XG4gICAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHtcbiAgICAgICAgYWN0dWFsbHlTZXRTZWxlY3RlZChlbCwgYmluZGluZywgdm0pO1xuICAgICAgfSwgMCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWN0dWFsbHlTZXRTZWxlY3RlZCAoZWwsIGJpbmRpbmcsIHZtKSB7XG4gICAgdmFyIHZhbHVlID0gYmluZGluZy52YWx1ZTtcbiAgICB2YXIgaXNNdWx0aXBsZSA9IGVsLm11bHRpcGxlO1xuICAgIGlmIChpc011bHRpcGxlICYmICFBcnJheS5pc0FycmF5KHZhbHVlKSkge1xuICAgICAgd2FybihcbiAgICAgICAgXCI8c2VsZWN0IG11bHRpcGxlIHYtbW9kZWw9XFxcIlwiICsgKGJpbmRpbmcuZXhwcmVzc2lvbikgKyBcIlxcXCI+IFwiICtcbiAgICAgICAgXCJleHBlY3RzIGFuIEFycmF5IHZhbHVlIGZvciBpdHMgYmluZGluZywgYnV0IGdvdCBcIiArIChPYmplY3QucHJvdG90eXBlLnRvU3RyaW5nLmNhbGwodmFsdWUpLnNsaWNlKDgsIC0xKSksXG4gICAgICAgIHZtXG4gICAgICApO1xuICAgICAgcmV0dXJuXG4gICAgfVxuICAgIHZhciBzZWxlY3RlZCwgb3B0aW9uO1xuICAgIGZvciAodmFyIGkgPSAwLCBsID0gZWwub3B0aW9ucy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIG9wdGlvbiA9IGVsLm9wdGlvbnNbaV07XG4gICAgICBpZiAoaXNNdWx0aXBsZSkge1xuICAgICAgICBzZWxlY3RlZCA9IGxvb3NlSW5kZXhPZih2YWx1ZSwgZ2V0VmFsdWUob3B0aW9uKSkgPiAtMTtcbiAgICAgICAgaWYgKG9wdGlvbi5zZWxlY3RlZCAhPT0gc2VsZWN0ZWQpIHtcbiAgICAgICAgICBvcHRpb24uc2VsZWN0ZWQgPSBzZWxlY3RlZDtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGxvb3NlRXF1YWwoZ2V0VmFsdWUob3B0aW9uKSwgdmFsdWUpKSB7XG4gICAgICAgICAgaWYgKGVsLnNlbGVjdGVkSW5kZXggIT09IGkpIHtcbiAgICAgICAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSBpO1xuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICBpZiAoIWlzTXVsdGlwbGUpIHtcbiAgICAgIGVsLnNlbGVjdGVkSW5kZXggPSAtMTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBoYXNOb01hdGNoaW5nT3B0aW9uICh2YWx1ZSwgb3B0aW9ucykge1xuICAgIHJldHVybiBvcHRpb25zLmV2ZXJ5KGZ1bmN0aW9uIChvKSB7IHJldHVybiAhbG9vc2VFcXVhbChvLCB2YWx1ZSk7IH0pXG4gIH1cblxuICBmdW5jdGlvbiBnZXRWYWx1ZSAob3B0aW9uKSB7XG4gICAgcmV0dXJuICdfdmFsdWUnIGluIG9wdGlvblxuICAgICAgPyBvcHRpb24uX3ZhbHVlXG4gICAgICA6IG9wdGlvbi52YWx1ZVxuICB9XG5cbiAgZnVuY3Rpb24gb25Db21wb3NpdGlvblN0YXJ0IChlKSB7XG4gICAgZS50YXJnZXQuY29tcG9zaW5nID0gdHJ1ZTtcbiAgfVxuXG4gIGZ1bmN0aW9uIG9uQ29tcG9zaXRpb25FbmQgKGUpIHtcbiAgICAvLyBwcmV2ZW50IHRyaWdnZXJpbmcgYW4gaW5wdXQgZXZlbnQgZm9yIG5vIHJlYXNvblxuICAgIGlmICghZS50YXJnZXQuY29tcG9zaW5nKSB7IHJldHVybiB9XG4gICAgZS50YXJnZXQuY29tcG9zaW5nID0gZmFsc2U7XG4gICAgdHJpZ2dlcihlLnRhcmdldCwgJ2lucHV0Jyk7XG4gIH1cblxuICBmdW5jdGlvbiB0cmlnZ2VyIChlbCwgdHlwZSkge1xuICAgIHZhciBlID0gZG9jdW1lbnQuY3JlYXRlRXZlbnQoJ0hUTUxFdmVudHMnKTtcbiAgICBlLmluaXRFdmVudCh0eXBlLCB0cnVlLCB0cnVlKTtcbiAgICBlbC5kaXNwYXRjaEV2ZW50KGUpO1xuICB9XG5cbiAgLyogICovXG5cbiAgLy8gcmVjdXJzaXZlbHkgc2VhcmNoIGZvciBwb3NzaWJsZSB0cmFuc2l0aW9uIGRlZmluZWQgaW5zaWRlIHRoZSBjb21wb25lbnQgcm9vdFxuICBmdW5jdGlvbiBsb2NhdGVOb2RlICh2bm9kZSkge1xuICAgIHJldHVybiB2bm9kZS5jb21wb25lbnRJbnN0YW5jZSAmJiAoIXZub2RlLmRhdGEgfHwgIXZub2RlLmRhdGEudHJhbnNpdGlvbilcbiAgICAgID8gbG9jYXRlTm9kZSh2bm9kZS5jb21wb25lbnRJbnN0YW5jZS5fdm5vZGUpXG4gICAgICA6IHZub2RlXG4gIH1cblxuICB2YXIgc2hvdyA9IHtcbiAgICBiaW5kOiBmdW5jdGlvbiBiaW5kIChlbCwgcmVmLCB2bm9kZSkge1xuICAgICAgdmFyIHZhbHVlID0gcmVmLnZhbHVlO1xuXG4gICAgICB2bm9kZSA9IGxvY2F0ZU5vZGUodm5vZGUpO1xuICAgICAgdmFyIHRyYW5zaXRpb24kJDEgPSB2bm9kZS5kYXRhICYmIHZub2RlLmRhdGEudHJhbnNpdGlvbjtcbiAgICAgIHZhciBvcmlnaW5hbERpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXkgPVxuICAgICAgICBlbC5zdHlsZS5kaXNwbGF5ID09PSAnbm9uZScgPyAnJyA6IGVsLnN0eWxlLmRpc3BsYXk7XG4gICAgICBpZiAodmFsdWUgJiYgdHJhbnNpdGlvbiQkMSkge1xuICAgICAgICB2bm9kZS5kYXRhLnNob3cgPSB0cnVlO1xuICAgICAgICBlbnRlcih2bm9kZSwgZnVuY3Rpb24gKCkge1xuICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBvcmlnaW5hbERpc3BsYXk7XG4gICAgICAgIH0pO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IHZhbHVlID8gb3JpZ2luYWxEaXNwbGF5IDogJ25vbmUnO1xuICAgICAgfVxuICAgIH0sXG5cbiAgICB1cGRhdGU6IGZ1bmN0aW9uIHVwZGF0ZSAoZWwsIHJlZiwgdm5vZGUpIHtcbiAgICAgIHZhciB2YWx1ZSA9IHJlZi52YWx1ZTtcbiAgICAgIHZhciBvbGRWYWx1ZSA9IHJlZi5vbGRWYWx1ZTtcblxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoIXZhbHVlID09PSAhb2xkVmFsdWUpIHsgcmV0dXJuIH1cbiAgICAgIHZub2RlID0gbG9jYXRlTm9kZSh2bm9kZSk7XG4gICAgICB2YXIgdHJhbnNpdGlvbiQkMSA9IHZub2RlLmRhdGEgJiYgdm5vZGUuZGF0YS50cmFuc2l0aW9uO1xuICAgICAgaWYgKHRyYW5zaXRpb24kJDEpIHtcbiAgICAgICAgdm5vZGUuZGF0YS5zaG93ID0gdHJ1ZTtcbiAgICAgICAgaWYgKHZhbHVlKSB7XG4gICAgICAgICAgZW50ZXIodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSBlbC5fX3ZPcmlnaW5hbERpc3BsYXk7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgbGVhdmUodm5vZGUsIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSAnbm9uZSc7XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGVsLnN0eWxlLmRpc3BsYXkgPSB2YWx1ZSA/IGVsLl9fdk9yaWdpbmFsRGlzcGxheSA6ICdub25lJztcbiAgICAgIH1cbiAgICB9LFxuXG4gICAgdW5iaW5kOiBmdW5jdGlvbiB1bmJpbmQgKFxuICAgICAgZWwsXG4gICAgICBiaW5kaW5nLFxuICAgICAgdm5vZGUsXG4gICAgICBvbGRWbm9kZSxcbiAgICAgIGlzRGVzdHJveVxuICAgICkge1xuICAgICAgaWYgKCFpc0Rlc3Ryb3kpIHtcbiAgICAgICAgZWwuc3R5bGUuZGlzcGxheSA9IGVsLl9fdk9yaWdpbmFsRGlzcGxheTtcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgdmFyIHBsYXRmb3JtRGlyZWN0aXZlcyA9IHtcbiAgICBtb2RlbDogZGlyZWN0aXZlLFxuICAgIHNob3c6IHNob3dcbiAgfTtcblxuICAvKiAgKi9cblxuICB2YXIgdHJhbnNpdGlvblByb3BzID0ge1xuICAgIG5hbWU6IFN0cmluZyxcbiAgICBhcHBlYXI6IEJvb2xlYW4sXG4gICAgY3NzOiBCb29sZWFuLFxuICAgIG1vZGU6IFN0cmluZyxcbiAgICB0eXBlOiBTdHJpbmcsXG4gICAgZW50ZXJDbGFzczogU3RyaW5nLFxuICAgIGxlYXZlQ2xhc3M6IFN0cmluZyxcbiAgICBlbnRlclRvQ2xhc3M6IFN0cmluZyxcbiAgICBsZWF2ZVRvQ2xhc3M6IFN0cmluZyxcbiAgICBlbnRlckFjdGl2ZUNsYXNzOiBTdHJpbmcsXG4gICAgbGVhdmVBY3RpdmVDbGFzczogU3RyaW5nLFxuICAgIGFwcGVhckNsYXNzOiBTdHJpbmcsXG4gICAgYXBwZWFyQWN0aXZlQ2xhc3M6IFN0cmluZyxcbiAgICBhcHBlYXJUb0NsYXNzOiBTdHJpbmcsXG4gICAgZHVyYXRpb246IFtOdW1iZXIsIFN0cmluZywgT2JqZWN0XVxuICB9O1xuXG4gIC8vIGluIGNhc2UgdGhlIGNoaWxkIGlzIGFsc28gYW4gYWJzdHJhY3QgY29tcG9uZW50LCBlLmcuIDxrZWVwLWFsaXZlPlxuICAvLyB3ZSB3YW50IHRvIHJlY3Vyc2l2ZWx5IHJldHJpZXZlIHRoZSByZWFsIGNvbXBvbmVudCB0byBiZSByZW5kZXJlZFxuICBmdW5jdGlvbiBnZXRSZWFsQ2hpbGQgKHZub2RlKSB7XG4gICAgdmFyIGNvbXBPcHRpb25zID0gdm5vZGUgJiYgdm5vZGUuY29tcG9uZW50T3B0aW9ucztcbiAgICBpZiAoY29tcE9wdGlvbnMgJiYgY29tcE9wdGlvbnMuQ3Rvci5vcHRpb25zLmFic3RyYWN0KSB7XG4gICAgICByZXR1cm4gZ2V0UmVhbENoaWxkKGdldEZpcnN0Q29tcG9uZW50Q2hpbGQoY29tcE9wdGlvbnMuY2hpbGRyZW4pKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gdm5vZGVcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBleHRyYWN0VHJhbnNpdGlvbkRhdGEgKGNvbXApIHtcbiAgICB2YXIgZGF0YSA9IHt9O1xuICAgIHZhciBvcHRpb25zID0gY29tcC4kb3B0aW9ucztcbiAgICAvLyBwcm9wc1xuICAgIGZvciAodmFyIGtleSBpbiBvcHRpb25zLnByb3BzRGF0YSkge1xuICAgICAgZGF0YVtrZXldID0gY29tcFtrZXldO1xuICAgIH1cbiAgICAvLyBldmVudHMuXG4gICAgLy8gZXh0cmFjdCBsaXN0ZW5lcnMgYW5kIHBhc3MgdGhlbSBkaXJlY3RseSB0byB0aGUgdHJhbnNpdGlvbiBtZXRob2RzXG4gICAgdmFyIGxpc3RlbmVycyA9IG9wdGlvbnMuX3BhcmVudExpc3RlbmVycztcbiAgICBmb3IgKHZhciBrZXkkMSBpbiBsaXN0ZW5lcnMpIHtcbiAgICAgIGRhdGFbY2FtZWxpemUoa2V5JDEpXSA9IGxpc3RlbmVyc1trZXkkMV07XG4gICAgfVxuICAgIHJldHVybiBkYXRhXG4gIH1cblxuICBmdW5jdGlvbiBwbGFjZWhvbGRlciAoaCwgcmF3Q2hpbGQpIHtcbiAgICBpZiAoL1xcZC1rZWVwLWFsaXZlJC8udGVzdChyYXdDaGlsZC50YWcpKSB7XG4gICAgICByZXR1cm4gaCgna2VlcC1hbGl2ZScsIHtcbiAgICAgICAgcHJvcHM6IHJhd0NoaWxkLmNvbXBvbmVudE9wdGlvbnMucHJvcHNEYXRhXG4gICAgICB9KVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGhhc1BhcmVudFRyYW5zaXRpb24gKHZub2RlKSB7XG4gICAgd2hpbGUgKCh2bm9kZSA9IHZub2RlLnBhcmVudCkpIHtcbiAgICAgIGlmICh2bm9kZS5kYXRhLnRyYW5zaXRpb24pIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBpc1NhbWVDaGlsZCAoY2hpbGQsIG9sZENoaWxkKSB7XG4gICAgcmV0dXJuIG9sZENoaWxkLmtleSA9PT0gY2hpbGQua2V5ICYmIG9sZENoaWxkLnRhZyA9PT0gY2hpbGQudGFnXG4gIH1cblxuICB2YXIgaXNOb3RUZXh0Tm9kZSA9IGZ1bmN0aW9uIChjKSB7IHJldHVybiBjLnRhZyB8fCBpc0FzeW5jUGxhY2Vob2xkZXIoYyk7IH07XG5cbiAgdmFyIGlzVlNob3dEaXJlY3RpdmUgPSBmdW5jdGlvbiAoZCkgeyByZXR1cm4gZC5uYW1lID09PSAnc2hvdyc7IH07XG5cbiAgdmFyIFRyYW5zaXRpb24gPSB7XG4gICAgbmFtZTogJ3RyYW5zaXRpb24nLFxuICAgIHByb3BzOiB0cmFuc2l0aW9uUHJvcHMsXG4gICAgYWJzdHJhY3Q6IHRydWUsXG5cbiAgICByZW5kZXI6IGZ1bmN0aW9uIHJlbmRlciAoaCkge1xuICAgICAgdmFyIHRoaXMkMSA9IHRoaXM7XG5cbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuJHNsb3RzLmRlZmF1bHQ7XG4gICAgICBpZiAoIWNoaWxkcmVuKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyBmaWx0ZXIgb3V0IHRleHQgbm9kZXMgKHBvc3NpYmxlIHdoaXRlc3BhY2VzKVxuICAgICAgY2hpbGRyZW4gPSBjaGlsZHJlbi5maWx0ZXIoaXNOb3RUZXh0Tm9kZSk7XG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuXG4gICAgICAvLyB3YXJuIG11bHRpcGxlIGVsZW1lbnRzXG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID4gMSkge1xuICAgICAgICB3YXJuKFxuICAgICAgICAgICc8dHJhbnNpdGlvbj4gY2FuIG9ubHkgYmUgdXNlZCBvbiBhIHNpbmdsZSBlbGVtZW50LiBVc2UgJyArXG4gICAgICAgICAgJzx0cmFuc2l0aW9uLWdyb3VwPiBmb3IgbGlzdHMuJyxcbiAgICAgICAgICB0aGlzLiRwYXJlbnRcbiAgICAgICAgKTtcbiAgICAgIH1cblxuICAgICAgdmFyIG1vZGUgPSB0aGlzLm1vZGU7XG5cbiAgICAgIC8vIHdhcm4gaW52YWxpZCBtb2RlXG4gICAgICBpZiAobW9kZSAmJiBtb2RlICE9PSAnaW4tb3V0JyAmJiBtb2RlICE9PSAnb3V0LWluJ1xuICAgICAgKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgJ2ludmFsaWQgPHRyYW5zaXRpb24+IG1vZGU6ICcgKyBtb2RlLFxuICAgICAgICAgIHRoaXMuJHBhcmVudFxuICAgICAgICApO1xuICAgICAgfVxuXG4gICAgICB2YXIgcmF3Q2hpbGQgPSBjaGlsZHJlblswXTtcblxuICAgICAgLy8gaWYgdGhpcyBpcyBhIGNvbXBvbmVudCByb290IG5vZGUgYW5kIHRoZSBjb21wb25lbnQnc1xuICAgICAgLy8gcGFyZW50IGNvbnRhaW5lciBub2RlIGFsc28gaGFzIHRyYW5zaXRpb24sIHNraXAuXG4gICAgICBpZiAoaGFzUGFyZW50VHJhbnNpdGlvbih0aGlzLiR2bm9kZSkpIHtcbiAgICAgICAgcmV0dXJuIHJhd0NoaWxkXG4gICAgICB9XG5cbiAgICAgIC8vIGFwcGx5IHRyYW5zaXRpb24gZGF0YSB0byBjaGlsZFxuICAgICAgLy8gdXNlIGdldFJlYWxDaGlsZCgpIHRvIGlnbm9yZSBhYnN0cmFjdCBjb21wb25lbnRzIGUuZy4ga2VlcC1hbGl2ZVxuICAgICAgdmFyIGNoaWxkID0gZ2V0UmVhbENoaWxkKHJhd0NoaWxkKTtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKCFjaGlsZCkge1xuICAgICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICAgIH1cblxuICAgICAgaWYgKHRoaXMuX2xlYXZpbmcpIHtcbiAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgfVxuXG4gICAgICAvLyBlbnN1cmUgYSBrZXkgdGhhdCBpcyB1bmlxdWUgdG8gdGhlIHZub2RlIHR5cGUgYW5kIHRvIHRoaXMgdHJhbnNpdGlvblxuICAgICAgLy8gY29tcG9uZW50IGluc3RhbmNlLiBUaGlzIGtleSB3aWxsIGJlIHVzZWQgdG8gcmVtb3ZlIHBlbmRpbmcgbGVhdmluZyBub2Rlc1xuICAgICAgLy8gZHVyaW5nIGVudGVyaW5nLlxuICAgICAgdmFyIGlkID0gXCJfX3RyYW5zaXRpb24tXCIgKyAodGhpcy5fdWlkKSArIFwiLVwiO1xuICAgICAgY2hpbGQua2V5ID0gY2hpbGQua2V5ID09IG51bGxcbiAgICAgICAgPyBjaGlsZC5pc0NvbW1lbnRcbiAgICAgICAgICA/IGlkICsgJ2NvbW1lbnQnXG4gICAgICAgICAgOiBpZCArIGNoaWxkLnRhZ1xuICAgICAgICA6IGlzUHJpbWl0aXZlKGNoaWxkLmtleSlcbiAgICAgICAgICA/IChTdHJpbmcoY2hpbGQua2V5KS5pbmRleE9mKGlkKSA9PT0gMCA/IGNoaWxkLmtleSA6IGlkICsgY2hpbGQua2V5KVxuICAgICAgICAgIDogY2hpbGQua2V5O1xuXG4gICAgICB2YXIgZGF0YSA9IChjaGlsZC5kYXRhIHx8IChjaGlsZC5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gZXh0cmFjdFRyYW5zaXRpb25EYXRhKHRoaXMpO1xuICAgICAgdmFyIG9sZFJhd0NoaWxkID0gdGhpcy5fdm5vZGU7XG4gICAgICB2YXIgb2xkQ2hpbGQgPSBnZXRSZWFsQ2hpbGQob2xkUmF3Q2hpbGQpO1xuXG4gICAgICAvLyBtYXJrIHYtc2hvd1xuICAgICAgLy8gc28gdGhhdCB0aGUgdHJhbnNpdGlvbiBtb2R1bGUgY2FuIGhhbmQgb3ZlciB0aGUgY29udHJvbCB0byB0aGUgZGlyZWN0aXZlXG4gICAgICBpZiAoY2hpbGQuZGF0YS5kaXJlY3RpdmVzICYmIGNoaWxkLmRhdGEuZGlyZWN0aXZlcy5zb21lKGlzVlNob3dEaXJlY3RpdmUpKSB7XG4gICAgICAgIGNoaWxkLmRhdGEuc2hvdyA9IHRydWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChcbiAgICAgICAgb2xkQ2hpbGQgJiZcbiAgICAgICAgb2xkQ2hpbGQuZGF0YSAmJlxuICAgICAgICAhaXNTYW1lQ2hpbGQoY2hpbGQsIG9sZENoaWxkKSAmJlxuICAgICAgICAhaXNBc3luY1BsYWNlaG9sZGVyKG9sZENoaWxkKSAmJlxuICAgICAgICAvLyAjNjY4NyBjb21wb25lbnQgcm9vdCBpcyBhIGNvbW1lbnQgbm9kZVxuICAgICAgICAhKG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlICYmIG9sZENoaWxkLmNvbXBvbmVudEluc3RhbmNlLl92bm9kZS5pc0NvbW1lbnQpXG4gICAgICApIHtcbiAgICAgICAgLy8gcmVwbGFjZSBvbGQgY2hpbGQgdHJhbnNpdGlvbiBkYXRhIHdpdGggZnJlc2ggb25lXG4gICAgICAgIC8vIGltcG9ydGFudCBmb3IgZHluYW1pYyB0cmFuc2l0aW9ucyFcbiAgICAgICAgdmFyIG9sZERhdGEgPSBvbGRDaGlsZC5kYXRhLnRyYW5zaXRpb24gPSBleHRlbmQoe30sIGRhdGEpO1xuICAgICAgICAvLyBoYW5kbGUgdHJhbnNpdGlvbiBtb2RlXG4gICAgICAgIGlmIChtb2RlID09PSAnb3V0LWluJykge1xuICAgICAgICAgIC8vIHJldHVybiBwbGFjZWhvbGRlciBub2RlIGFuZCBxdWV1ZSB1cGRhdGUgd2hlbiBsZWF2ZSBmaW5pc2hlc1xuICAgICAgICAgIHRoaXMuX2xlYXZpbmcgPSB0cnVlO1xuICAgICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdhZnRlckxlYXZlJywgZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcyQxLl9sZWF2aW5nID0gZmFsc2U7XG4gICAgICAgICAgICB0aGlzJDEuJGZvcmNlVXBkYXRlKCk7XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgcmV0dXJuIHBsYWNlaG9sZGVyKGgsIHJhd0NoaWxkKVxuICAgICAgICB9IGVsc2UgaWYgKG1vZGUgPT09ICdpbi1vdXQnKSB7XG4gICAgICAgICAgaWYgKGlzQXN5bmNQbGFjZWhvbGRlcihjaGlsZCkpIHtcbiAgICAgICAgICAgIHJldHVybiBvbGRSYXdDaGlsZFxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgZGVsYXllZExlYXZlO1xuICAgICAgICAgIHZhciBwZXJmb3JtTGVhdmUgPSBmdW5jdGlvbiAoKSB7IGRlbGF5ZWRMZWF2ZSgpOyB9O1xuICAgICAgICAgIG1lcmdlVk5vZGVIb29rKGRhdGEsICdhZnRlckVudGVyJywgcGVyZm9ybUxlYXZlKTtcbiAgICAgICAgICBtZXJnZVZOb2RlSG9vayhkYXRhLCAnZW50ZXJDYW5jZWxsZWQnLCBwZXJmb3JtTGVhdmUpO1xuICAgICAgICAgIG1lcmdlVk5vZGVIb29rKG9sZERhdGEsICdkZWxheUxlYXZlJywgZnVuY3Rpb24gKGxlYXZlKSB7IGRlbGF5ZWRMZWF2ZSA9IGxlYXZlOyB9KTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICByZXR1cm4gcmF3Q2hpbGRcbiAgICB9XG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIHByb3BzID0gZXh0ZW5kKHtcbiAgICB0YWc6IFN0cmluZyxcbiAgICBtb3ZlQ2xhc3M6IFN0cmluZ1xuICB9LCB0cmFuc2l0aW9uUHJvcHMpO1xuXG4gIGRlbGV0ZSBwcm9wcy5tb2RlO1xuXG4gIHZhciBUcmFuc2l0aW9uR3JvdXAgPSB7XG4gICAgcHJvcHM6IHByb3BzLFxuXG4gICAgYmVmb3JlTW91bnQ6IGZ1bmN0aW9uIGJlZm9yZU1vdW50ICgpIHtcbiAgICAgIHZhciB0aGlzJDEgPSB0aGlzO1xuXG4gICAgICB2YXIgdXBkYXRlID0gdGhpcy5fdXBkYXRlO1xuICAgICAgdGhpcy5fdXBkYXRlID0gZnVuY3Rpb24gKHZub2RlLCBoeWRyYXRpbmcpIHtcbiAgICAgICAgdmFyIHJlc3RvcmVBY3RpdmVJbnN0YW5jZSA9IHNldEFjdGl2ZUluc3RhbmNlKHRoaXMkMSk7XG4gICAgICAgIC8vIGZvcmNlIHJlbW92aW5nIHBhc3NcbiAgICAgICAgdGhpcyQxLl9fcGF0Y2hfXyhcbiAgICAgICAgICB0aGlzJDEuX3Zub2RlLFxuICAgICAgICAgIHRoaXMkMS5rZXB0LFxuICAgICAgICAgIGZhbHNlLCAvLyBoeWRyYXRpbmdcbiAgICAgICAgICB0cnVlIC8vIHJlbW92ZU9ubHkgKCFpbXBvcnRhbnQsIGF2b2lkcyB1bm5lY2Vzc2FyeSBtb3ZlcylcbiAgICAgICAgKTtcbiAgICAgICAgdGhpcyQxLl92bm9kZSA9IHRoaXMkMS5rZXB0O1xuICAgICAgICByZXN0b3JlQWN0aXZlSW5zdGFuY2UoKTtcbiAgICAgICAgdXBkYXRlLmNhbGwodGhpcyQxLCB2bm9kZSwgaHlkcmF0aW5nKTtcbiAgICAgIH07XG4gICAgfSxcblxuICAgIHJlbmRlcjogZnVuY3Rpb24gcmVuZGVyIChoKSB7XG4gICAgICB2YXIgdGFnID0gdGhpcy50YWcgfHwgdGhpcy4kdm5vZGUuZGF0YS50YWcgfHwgJ3NwYW4nO1xuICAgICAgdmFyIG1hcCA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG4gICAgICB2YXIgcHJldkNoaWxkcmVuID0gdGhpcy5wcmV2Q2hpbGRyZW4gPSB0aGlzLmNoaWxkcmVuO1xuICAgICAgdmFyIHJhd0NoaWxkcmVuID0gdGhpcy4kc2xvdHMuZGVmYXVsdCB8fCBbXTtcbiAgICAgIHZhciBjaGlsZHJlbiA9IHRoaXMuY2hpbGRyZW4gPSBbXTtcbiAgICAgIHZhciB0cmFuc2l0aW9uRGF0YSA9IGV4dHJhY3RUcmFuc2l0aW9uRGF0YSh0aGlzKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCByYXdDaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgICB2YXIgYyA9IHJhd0NoaWxkcmVuW2ldO1xuICAgICAgICBpZiAoYy50YWcpIHtcbiAgICAgICAgICBpZiAoYy5rZXkgIT0gbnVsbCAmJiBTdHJpbmcoYy5rZXkpLmluZGV4T2YoJ19fdmxpc3QnKSAhPT0gMCkge1xuICAgICAgICAgICAgY2hpbGRyZW4ucHVzaChjKTtcbiAgICAgICAgICAgIG1hcFtjLmtleV0gPSBjXG4gICAgICAgICAgICA7KGMuZGF0YSB8fCAoYy5kYXRhID0ge30pKS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHZhciBvcHRzID0gYy5jb21wb25lbnRPcHRpb25zO1xuICAgICAgICAgICAgdmFyIG5hbWUgPSBvcHRzID8gKG9wdHMuQ3Rvci5vcHRpb25zLm5hbWUgfHwgb3B0cy50YWcgfHwgJycpIDogYy50YWc7XG4gICAgICAgICAgICB3YXJuKChcIjx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiBtdXN0IGJlIGtleWVkOiA8XCIgKyBuYW1lICsgXCI+XCIpKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKHByZXZDaGlsZHJlbikge1xuICAgICAgICB2YXIga2VwdCA9IFtdO1xuICAgICAgICB2YXIgcmVtb3ZlZCA9IFtdO1xuICAgICAgICBmb3IgKHZhciBpJDEgPSAwOyBpJDEgPCBwcmV2Q2hpbGRyZW4ubGVuZ3RoOyBpJDErKykge1xuICAgICAgICAgIHZhciBjJDEgPSBwcmV2Q2hpbGRyZW5baSQxXTtcbiAgICAgICAgICBjJDEuZGF0YS50cmFuc2l0aW9uID0gdHJhbnNpdGlvbkRhdGE7XG4gICAgICAgICAgYyQxLmRhdGEucG9zID0gYyQxLmVsbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcbiAgICAgICAgICBpZiAobWFwW2MkMS5rZXldKSB7XG4gICAgICAgICAgICBrZXB0LnB1c2goYyQxKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgcmVtb3ZlZC5wdXNoKGMkMSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHRoaXMua2VwdCA9IGgodGFnLCBudWxsLCBrZXB0KTtcbiAgICAgICAgdGhpcy5yZW1vdmVkID0gcmVtb3ZlZDtcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIGgodGFnLCBudWxsLCBjaGlsZHJlbilcbiAgICB9LFxuXG4gICAgdXBkYXRlZDogZnVuY3Rpb24gdXBkYXRlZCAoKSB7XG4gICAgICB2YXIgY2hpbGRyZW4gPSB0aGlzLnByZXZDaGlsZHJlbjtcbiAgICAgIHZhciBtb3ZlQ2xhc3MgPSB0aGlzLm1vdmVDbGFzcyB8fCAoKHRoaXMubmFtZSB8fCAndicpICsgJy1tb3ZlJyk7XG4gICAgICBpZiAoIWNoaWxkcmVuLmxlbmd0aCB8fCAhdGhpcy5oYXNNb3ZlKGNoaWxkcmVuWzBdLmVsbSwgbW92ZUNsYXNzKSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgLy8gd2UgZGl2aWRlIHRoZSB3b3JrIGludG8gdGhyZWUgbG9vcHMgdG8gYXZvaWQgbWl4aW5nIERPTSByZWFkcyBhbmQgd3JpdGVzXG4gICAgICAvLyBpbiBlYWNoIGl0ZXJhdGlvbiAtIHdoaWNoIGhlbHBzIHByZXZlbnQgbGF5b3V0IHRocmFzaGluZy5cbiAgICAgIGNoaWxkcmVuLmZvckVhY2goY2FsbFBlbmRpbmdDYnMpO1xuICAgICAgY2hpbGRyZW4uZm9yRWFjaChyZWNvcmRQb3NpdGlvbik7XG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGFwcGx5VHJhbnNsYXRpb24pO1xuXG4gICAgICAvLyBmb3JjZSByZWZsb3cgdG8gcHV0IGV2ZXJ5dGhpbmcgaW4gcG9zaXRpb25cbiAgICAgIC8vIGFzc2lnbiB0byB0aGlzIHRvIGF2b2lkIGJlaW5nIHJlbW92ZWQgaW4gdHJlZS1zaGFraW5nXG4gICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgIHRoaXMuX3JlZmxvdyA9IGRvY3VtZW50LmJvZHkub2Zmc2V0SGVpZ2h0O1xuXG4gICAgICBjaGlsZHJlbi5mb3JFYWNoKGZ1bmN0aW9uIChjKSB7XG4gICAgICAgIGlmIChjLmRhdGEubW92ZWQpIHtcbiAgICAgICAgICB2YXIgZWwgPSBjLmVsbTtcbiAgICAgICAgICB2YXIgcyA9IGVsLnN0eWxlO1xuICAgICAgICAgIGFkZFRyYW5zaXRpb25DbGFzcyhlbCwgbW92ZUNsYXNzKTtcbiAgICAgICAgICBzLnRyYW5zZm9ybSA9IHMuV2Via2l0VHJhbnNmb3JtID0gcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnJztcbiAgICAgICAgICBlbC5hZGRFdmVudExpc3RlbmVyKHRyYW5zaXRpb25FbmRFdmVudCwgZWwuX21vdmVDYiA9IGZ1bmN0aW9uIGNiIChlKSB7XG4gICAgICAgICAgICBpZiAoZSAmJiBlLnRhcmdldCAhPT0gZWwpIHtcbiAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoIWUgfHwgL3RyYW5zZm9ybSQvLnRlc3QoZS5wcm9wZXJ0eU5hbWUpKSB7XG4gICAgICAgICAgICAgIGVsLnJlbW92ZUV2ZW50TGlzdGVuZXIodHJhbnNpdGlvbkVuZEV2ZW50LCBjYik7XG4gICAgICAgICAgICAgIGVsLl9tb3ZlQ2IgPSBudWxsO1xuICAgICAgICAgICAgICByZW1vdmVUcmFuc2l0aW9uQ2xhc3MoZWwsIG1vdmVDbGFzcyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgIH1cbiAgICAgIH0pO1xuICAgIH0sXG5cbiAgICBtZXRob2RzOiB7XG4gICAgICBoYXNNb3ZlOiBmdW5jdGlvbiBoYXNNb3ZlIChlbCwgbW92ZUNsYXNzKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoIWhhc1RyYW5zaXRpb24pIHtcbiAgICAgICAgICByZXR1cm4gZmFsc2VcbiAgICAgICAgfVxuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKHRoaXMuX2hhc01vdmUpIHtcbiAgICAgICAgICByZXR1cm4gdGhpcy5faGFzTW92ZVxuICAgICAgICB9XG4gICAgICAgIC8vIERldGVjdCB3aGV0aGVyIGFuIGVsZW1lbnQgd2l0aCB0aGUgbW92ZSBjbGFzcyBhcHBsaWVkIGhhc1xuICAgICAgICAvLyBDU1MgdHJhbnNpdGlvbnMuIFNpbmNlIHRoZSBlbGVtZW50IG1heSBiZSBpbnNpZGUgYW4gZW50ZXJpbmdcbiAgICAgICAgLy8gdHJhbnNpdGlvbiBhdCB0aGlzIHZlcnkgbW9tZW50LCB3ZSBtYWtlIGEgY2xvbmUgb2YgaXQgYW5kIHJlbW92ZVxuICAgICAgICAvLyBhbGwgb3RoZXIgdHJhbnNpdGlvbiBjbGFzc2VzIGFwcGxpZWQgdG8gZW5zdXJlIG9ubHkgdGhlIG1vdmUgY2xhc3NcbiAgICAgICAgLy8gaXMgYXBwbGllZC5cbiAgICAgICAgdmFyIGNsb25lID0gZWwuY2xvbmVOb2RlKCk7XG4gICAgICAgIGlmIChlbC5fdHJhbnNpdGlvbkNsYXNzZXMpIHtcbiAgICAgICAgICBlbC5fdHJhbnNpdGlvbkNsYXNzZXMuZm9yRWFjaChmdW5jdGlvbiAoY2xzKSB7IHJlbW92ZUNsYXNzKGNsb25lLCBjbHMpOyB9KTtcbiAgICAgICAgfVxuICAgICAgICBhZGRDbGFzcyhjbG9uZSwgbW92ZUNsYXNzKTtcbiAgICAgICAgY2xvbmUuc3R5bGUuZGlzcGxheSA9ICdub25lJztcbiAgICAgICAgdGhpcy4kZWwuYXBwZW5kQ2hpbGQoY2xvbmUpO1xuICAgICAgICB2YXIgaW5mbyA9IGdldFRyYW5zaXRpb25JbmZvKGNsb25lKTtcbiAgICAgICAgdGhpcy4kZWwucmVtb3ZlQ2hpbGQoY2xvbmUpO1xuICAgICAgICByZXR1cm4gKHRoaXMuX2hhc01vdmUgPSBpbmZvLmhhc1RyYW5zZm9ybSlcbiAgICAgIH1cbiAgICB9XG4gIH07XG5cbiAgZnVuY3Rpb24gY2FsbFBlbmRpbmdDYnMgKGMpIHtcbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoYy5lbG0uX21vdmVDYikge1xuICAgICAgYy5lbG0uX21vdmVDYigpO1xuICAgIH1cbiAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICBpZiAoYy5lbG0uX2VudGVyQ2IpIHtcbiAgICAgIGMuZWxtLl9lbnRlckNiKCk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcmVjb3JkUG9zaXRpb24gKGMpIHtcbiAgICBjLmRhdGEubmV3UG9zID0gYy5lbG0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7XG4gIH1cblxuICBmdW5jdGlvbiBhcHBseVRyYW5zbGF0aW9uIChjKSB7XG4gICAgdmFyIG9sZFBvcyA9IGMuZGF0YS5wb3M7XG4gICAgdmFyIG5ld1BvcyA9IGMuZGF0YS5uZXdQb3M7XG4gICAgdmFyIGR4ID0gb2xkUG9zLmxlZnQgLSBuZXdQb3MubGVmdDtcbiAgICB2YXIgZHkgPSBvbGRQb3MudG9wIC0gbmV3UG9zLnRvcDtcbiAgICBpZiAoZHggfHwgZHkpIHtcbiAgICAgIGMuZGF0YS5tb3ZlZCA9IHRydWU7XG4gICAgICB2YXIgcyA9IGMuZWxtLnN0eWxlO1xuICAgICAgcy50cmFuc2Zvcm0gPSBzLldlYmtpdFRyYW5zZm9ybSA9IFwidHJhbnNsYXRlKFwiICsgZHggKyBcInB4LFwiICsgZHkgKyBcInB4KVwiO1xuICAgICAgcy50cmFuc2l0aW9uRHVyYXRpb24gPSAnMHMnO1xuICAgIH1cbiAgfVxuXG4gIHZhciBwbGF0Zm9ybUNvbXBvbmVudHMgPSB7XG4gICAgVHJhbnNpdGlvbjogVHJhbnNpdGlvbixcbiAgICBUcmFuc2l0aW9uR3JvdXA6IFRyYW5zaXRpb25Hcm91cFxuICB9O1xuXG4gIC8qICAqL1xuXG4gIC8vIGluc3RhbGwgcGxhdGZvcm0gc3BlY2lmaWMgdXRpbHNcbiAgVnVlLmNvbmZpZy5tdXN0VXNlUHJvcCA9IG11c3RVc2VQcm9wO1xuICBWdWUuY29uZmlnLmlzUmVzZXJ2ZWRUYWcgPSBpc1Jlc2VydmVkVGFnO1xuICBWdWUuY29uZmlnLmlzUmVzZXJ2ZWRBdHRyID0gaXNSZXNlcnZlZEF0dHI7XG4gIFZ1ZS5jb25maWcuZ2V0VGFnTmFtZXNwYWNlID0gZ2V0VGFnTmFtZXNwYWNlO1xuICBWdWUuY29uZmlnLmlzVW5rbm93bkVsZW1lbnQgPSBpc1Vua25vd25FbGVtZW50O1xuXG4gIC8vIGluc3RhbGwgcGxhdGZvcm0gcnVudGltZSBkaXJlY3RpdmVzICYgY29tcG9uZW50c1xuICBleHRlbmQoVnVlLm9wdGlvbnMuZGlyZWN0aXZlcywgcGxhdGZvcm1EaXJlY3RpdmVzKTtcbiAgZXh0ZW5kKFZ1ZS5vcHRpb25zLmNvbXBvbmVudHMsIHBsYXRmb3JtQ29tcG9uZW50cyk7XG5cbiAgLy8gaW5zdGFsbCBwbGF0Zm9ybSBwYXRjaCBmdW5jdGlvblxuICBWdWUucHJvdG90eXBlLl9fcGF0Y2hfXyA9IGluQnJvd3NlciA/IHBhdGNoIDogbm9vcDtcblxuICAvLyBwdWJsaWMgbW91bnQgbWV0aG9kXG4gIFZ1ZS5wcm90b3R5cGUuJG1vdW50ID0gZnVuY3Rpb24gKFxuICAgIGVsLFxuICAgIGh5ZHJhdGluZ1xuICApIHtcbiAgICBlbCA9IGVsICYmIGluQnJvd3NlciA/IHF1ZXJ5KGVsKSA6IHVuZGVmaW5lZDtcbiAgICByZXR1cm4gbW91bnRDb21wb25lbnQodGhpcywgZWwsIGh5ZHJhdGluZylcbiAgfTtcblxuICAvLyBkZXZ0b29scyBnbG9iYWwgaG9va1xuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBpZiAoaW5Ccm93c2VyKSB7XG4gICAgc2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG4gICAgICBpZiAoY29uZmlnLmRldnRvb2xzKSB7XG4gICAgICAgIGlmIChkZXZ0b29scykge1xuICAgICAgICAgIGRldnRvb2xzLmVtaXQoJ2luaXQnLCBWdWUpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNvbnNvbGVbY29uc29sZS5pbmZvID8gJ2luZm8nIDogJ2xvZyddKFxuICAgICAgICAgICAgJ0Rvd25sb2FkIHRoZSBWdWUgRGV2dG9vbHMgZXh0ZW5zaW9uIGZvciBhIGJldHRlciBkZXZlbG9wbWVudCBleHBlcmllbmNlOlxcbicgK1xuICAgICAgICAgICAgJ2h0dHBzOi8vZ2l0aHViLmNvbS92dWVqcy92dWUtZGV2dG9vbHMnXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKGNvbmZpZy5wcm9kdWN0aW9uVGlwICE9PSBmYWxzZSAmJlxuICAgICAgICB0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCdcbiAgICAgICkge1xuICAgICAgICBjb25zb2xlW2NvbnNvbGUuaW5mbyA/ICdpbmZvJyA6ICdsb2cnXShcbiAgICAgICAgICBcIllvdSBhcmUgcnVubmluZyBWdWUgaW4gZGV2ZWxvcG1lbnQgbW9kZS5cXG5cIiArXG4gICAgICAgICAgXCJNYWtlIHN1cmUgdG8gdHVybiBvbiBwcm9kdWN0aW9uIG1vZGUgd2hlbiBkZXBsb3lpbmcgZm9yIHByb2R1Y3Rpb24uXFxuXCIgK1xuICAgICAgICAgIFwiU2VlIG1vcmUgdGlwcyBhdCBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9kZXBsb3ltZW50Lmh0bWxcIlxuICAgICAgICApO1xuICAgICAgfVxuICAgIH0sIDApO1xuICB9XG5cbiAgLyogICovXG5cbiAgdmFyIGRlZmF1bHRUYWdSRSA9IC9cXHtcXHsoKD86LnxcXHI/XFxuKSs/KVxcfVxcfS9nO1xuICB2YXIgcmVnZXhFc2NhcGVSRSA9IC9bLS4qKz9eJHt9KCl8W1xcXVxcL1xcXFxdL2c7XG5cbiAgdmFyIGJ1aWxkUmVnZXggPSBjYWNoZWQoZnVuY3Rpb24gKGRlbGltaXRlcnMpIHtcbiAgICB2YXIgb3BlbiA9IGRlbGltaXRlcnNbMF0ucmVwbGFjZShyZWdleEVzY2FwZVJFLCAnXFxcXCQmJyk7XG4gICAgdmFyIGNsb3NlID0gZGVsaW1pdGVyc1sxXS5yZXBsYWNlKHJlZ2V4RXNjYXBlUkUsICdcXFxcJCYnKTtcbiAgICByZXR1cm4gbmV3IFJlZ0V4cChvcGVuICsgJygoPzoufFxcXFxuKSs/KScgKyBjbG9zZSwgJ2cnKVxuICB9KTtcblxuXG5cbiAgZnVuY3Rpb24gcGFyc2VUZXh0IChcbiAgICB0ZXh0LFxuICAgIGRlbGltaXRlcnNcbiAgKSB7XG4gICAgdmFyIHRhZ1JFID0gZGVsaW1pdGVycyA/IGJ1aWxkUmVnZXgoZGVsaW1pdGVycykgOiBkZWZhdWx0VGFnUkU7XG4gICAgaWYgKCF0YWdSRS50ZXN0KHRleHQpKSB7XG4gICAgICByZXR1cm5cbiAgICB9XG4gICAgdmFyIHRva2VucyA9IFtdO1xuICAgIHZhciByYXdUb2tlbnMgPSBbXTtcbiAgICB2YXIgbGFzdEluZGV4ID0gdGFnUkUubGFzdEluZGV4ID0gMDtcbiAgICB2YXIgbWF0Y2gsIGluZGV4LCB0b2tlblZhbHVlO1xuICAgIHdoaWxlICgobWF0Y2ggPSB0YWdSRS5leGVjKHRleHQpKSkge1xuICAgICAgaW5kZXggPSBtYXRjaC5pbmRleDtcbiAgICAgIC8vIHB1c2ggdGV4dCB0b2tlblxuICAgICAgaWYgKGluZGV4ID4gbGFzdEluZGV4KSB7XG4gICAgICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCwgaW5kZXgpKTtcbiAgICAgICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICAgICAgfVxuICAgICAgLy8gdGFnIHRva2VuXG4gICAgICB2YXIgZXhwID0gcGFyc2VGaWx0ZXJzKG1hdGNoWzFdLnRyaW0oKSk7XG4gICAgICB0b2tlbnMucHVzaCgoXCJfcyhcIiArIGV4cCArIFwiKVwiKSk7XG4gICAgICByYXdUb2tlbnMucHVzaCh7ICdAYmluZGluZyc6IGV4cCB9KTtcbiAgICAgIGxhc3RJbmRleCA9IGluZGV4ICsgbWF0Y2hbMF0ubGVuZ3RoO1xuICAgIH1cbiAgICBpZiAobGFzdEluZGV4IDwgdGV4dC5sZW5ndGgpIHtcbiAgICAgIHJhd1Rva2Vucy5wdXNoKHRva2VuVmFsdWUgPSB0ZXh0LnNsaWNlKGxhc3RJbmRleCkpO1xuICAgICAgdG9rZW5zLnB1c2goSlNPTi5zdHJpbmdpZnkodG9rZW5WYWx1ZSkpO1xuICAgIH1cbiAgICByZXR1cm4ge1xuICAgICAgZXhwcmVzc2lvbjogdG9rZW5zLmpvaW4oJysnKSxcbiAgICAgIHRva2VuczogcmF3VG9rZW5zXG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gdHJhbnNmb3JtTm9kZSAoZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgICB2YXIgc3RhdGljQ2xhc3MgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnY2xhc3MnKTtcbiAgICBpZiAoc3RhdGljQ2xhc3MpIHtcbiAgICAgIHZhciByZXMgPSBwYXJzZVRleHQoc3RhdGljQ2xhc3MsIG9wdGlvbnMuZGVsaW1pdGVycyk7XG4gICAgICBpZiAocmVzKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJjbGFzcz1cXFwiXCIgKyBzdGF0aWNDbGFzcyArIFwiXFxcIjogXCIgK1xuICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICdVc2Ugdi1iaW5kIG9yIHRoZSBjb2xvbiBzaG9ydGhhbmQgaW5zdGVhZC4gRm9yIGV4YW1wbGUsICcgK1xuICAgICAgICAgICdpbnN0ZWFkIG9mIDxkaXYgY2xhc3M9XCJ7eyB2YWwgfX1cIj4sIHVzZSA8ZGl2IDpjbGFzcz1cInZhbFwiPi4nLFxuICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydjbGFzcyddXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICAgIGlmIChzdGF0aWNDbGFzcykge1xuICAgICAgZWwuc3RhdGljQ2xhc3MgPSBKU09OLnN0cmluZ2lmeShzdGF0aWNDbGFzcyk7XG4gICAgfVxuICAgIHZhciBjbGFzc0JpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2NsYXNzJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgICBpZiAoY2xhc3NCaW5kaW5nKSB7XG4gICAgICBlbC5jbGFzc0JpbmRpbmcgPSBjbGFzc0JpbmRpbmc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuRGF0YSAoZWwpIHtcbiAgICB2YXIgZGF0YSA9ICcnO1xuICAgIGlmIChlbC5zdGF0aWNDbGFzcykge1xuICAgICAgZGF0YSArPSBcInN0YXRpY0NsYXNzOlwiICsgKGVsLnN0YXRpY0NsYXNzKSArIFwiLFwiO1xuICAgIH1cbiAgICBpZiAoZWwuY2xhc3NCaW5kaW5nKSB7XG4gICAgICBkYXRhICs9IFwiY2xhc3M6XCIgKyAoZWwuY2xhc3NCaW5kaW5nKSArIFwiLFwiO1xuICAgIH1cbiAgICByZXR1cm4gZGF0YVxuICB9XG5cbiAgdmFyIGtsYXNzJDEgPSB7XG4gICAgc3RhdGljS2V5czogWydzdGF0aWNDbGFzcyddLFxuICAgIHRyYW5zZm9ybU5vZGU6IHRyYW5zZm9ybU5vZGUsXG4gICAgZ2VuRGF0YTogZ2VuRGF0YVxuICB9O1xuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIHRyYW5zZm9ybU5vZGUkMSAoZWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgd2FybiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcbiAgICB2YXIgc3RhdGljU3R5bGUgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAnc3R5bGUnKTtcbiAgICBpZiAoc3RhdGljU3R5bGUpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAge1xuICAgICAgICB2YXIgcmVzID0gcGFyc2VUZXh0KHN0YXRpY1N0eWxlLCBvcHRpb25zLmRlbGltaXRlcnMpO1xuICAgICAgICBpZiAocmVzKSB7XG4gICAgICAgICAgd2FybihcbiAgICAgICAgICAgIFwic3R5bGU9XFxcIlwiICsgc3RhdGljU3R5bGUgKyBcIlxcXCI6IFwiICtcbiAgICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICAgJ1VzZSB2LWJpbmQgb3IgdGhlIGNvbG9uIHNob3J0aGFuZCBpbnN0ZWFkLiBGb3IgZXhhbXBsZSwgJyArXG4gICAgICAgICAgICAnaW5zdGVhZCBvZiA8ZGl2IHN0eWxlPVwie3sgdmFsIH19XCI+LCB1c2UgPGRpdiA6c3R5bGU9XCJ2YWxcIj4uJyxcbiAgICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydzdHlsZSddXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWwuc3RhdGljU3R5bGUgPSBKU09OLnN0cmluZ2lmeShwYXJzZVN0eWxlVGV4dChzdGF0aWNTdHlsZSkpO1xuICAgIH1cblxuICAgIHZhciBzdHlsZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3N0eWxlJywgZmFsc2UgLyogZ2V0U3RhdGljICovKTtcbiAgICBpZiAoc3R5bGVCaW5kaW5nKSB7XG4gICAgICBlbC5zdHlsZUJpbmRpbmcgPSBzdHlsZUJpbmRpbmc7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuRGF0YSQxIChlbCkge1xuICAgIHZhciBkYXRhID0gJyc7XG4gICAgaWYgKGVsLnN0YXRpY1N0eWxlKSB7XG4gICAgICBkYXRhICs9IFwic3RhdGljU3R5bGU6XCIgKyAoZWwuc3RhdGljU3R5bGUpICsgXCIsXCI7XG4gICAgfVxuICAgIGlmIChlbC5zdHlsZUJpbmRpbmcpIHtcbiAgICAgIGRhdGEgKz0gXCJzdHlsZTooXCIgKyAoZWwuc3R5bGVCaW5kaW5nKSArIFwiKSxcIjtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIHZhciBzdHlsZSQxID0ge1xuICAgIHN0YXRpY0tleXM6IFsnc3RhdGljU3R5bGUnXSxcbiAgICB0cmFuc2Zvcm1Ob2RlOiB0cmFuc2Zvcm1Ob2RlJDEsXG4gICAgZ2VuRGF0YTogZ2VuRGF0YSQxXG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIGRlY29kZXI7XG5cbiAgdmFyIGhlID0ge1xuICAgIGRlY29kZTogZnVuY3Rpb24gZGVjb2RlIChodG1sKSB7XG4gICAgICBkZWNvZGVyID0gZGVjb2RlciB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGRlY29kZXIuaW5uZXJIVE1MID0gaHRtbDtcbiAgICAgIHJldHVybiBkZWNvZGVyLnRleHRDb250ZW50XG4gICAgfVxuICB9O1xuXG4gIC8qICAqL1xuXG4gIHZhciBpc1VuYXJ5VGFnID0gbWFrZU1hcChcbiAgICAnYXJlYSxiYXNlLGJyLGNvbCxlbWJlZCxmcmFtZSxocixpbWcsaW5wdXQsaXNpbmRleCxrZXlnZW4sJyArXG4gICAgJ2xpbmssbWV0YSxwYXJhbSxzb3VyY2UsdHJhY2ssd2JyJ1xuICApO1xuXG4gIC8vIEVsZW1lbnRzIHRoYXQgeW91IGNhbiwgaW50ZW50aW9uYWxseSwgbGVhdmUgb3BlblxuICAvLyAoYW5kIHdoaWNoIGNsb3NlIHRoZW1zZWx2ZXMpXG4gIHZhciBjYW5CZUxlZnRPcGVuVGFnID0gbWFrZU1hcChcbiAgICAnY29sZ3JvdXAsZGQsZHQsbGksb3B0aW9ucyxwLHRkLHRmb290LHRoLHRoZWFkLHRyLHNvdXJjZSdcbiAgKTtcblxuICAvLyBIVE1MNSB0YWdzIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL2luZGljZXMuaHRtbCNlbGVtZW50cy0zXG4gIC8vIFBocmFzaW5nIENvbnRlbnQgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZG9tLmh0bWwjcGhyYXNpbmctY29udGVudFxuICB2YXIgaXNOb25QaHJhc2luZ1RhZyA9IG1ha2VNYXAoXG4gICAgJ2FkZHJlc3MsYXJ0aWNsZSxhc2lkZSxiYXNlLGJsb2NrcXVvdGUsYm9keSxjYXB0aW9uLGNvbCxjb2xncm91cCxkZCwnICtcbiAgICAnZGV0YWlscyxkaWFsb2csZGl2LGRsLGR0LGZpZWxkc2V0LGZpZ2NhcHRpb24sZmlndXJlLGZvb3Rlcixmb3JtLCcgK1xuICAgICdoMSxoMixoMyxoNCxoNSxoNixoZWFkLGhlYWRlcixoZ3JvdXAsaHIsaHRtbCxsZWdlbmQsbGksbWVudWl0ZW0sbWV0YSwnICtcbiAgICAnb3B0Z3JvdXAsb3B0aW9uLHBhcmFtLHJwLHJ0LHNvdXJjZSxzdHlsZSxzdW1tYXJ5LHRib2R5LHRkLHRmb290LHRoLHRoZWFkLCcgK1xuICAgICd0aXRsZSx0cix0cmFjaydcbiAgKTtcblxuICAvKipcbiAgICogTm90IHR5cGUtY2hlY2tpbmcgdGhpcyBmaWxlIGJlY2F1c2UgaXQncyBtb3N0bHkgdmVuZG9yIGNvZGUuXG4gICAqL1xuXG4gIC8vIFJlZ3VsYXIgRXhwcmVzc2lvbnMgZm9yIHBhcnNpbmcgdGFncyBhbmQgYXR0cmlidXRlc1xuICB2YXIgYXR0cmlidXRlID0gL15cXHMqKFteXFxzXCInPD5cXC89XSspKD86XFxzKig9KVxccyooPzpcIihbXlwiXSopXCIrfCcoW14nXSopJyt8KFteXFxzXCInPTw+YF0rKSkpPy87XG4gIHZhciBkeW5hbWljQXJnQXR0cmlidXRlID0gL15cXHMqKCg/OnYtW1xcdy1dKzp8QHw6fCMpXFxbW149XSs/XFxdW15cXHNcIic8PlxcLz1dKikoPzpcXHMqKD0pXFxzKig/OlwiKFteXCJdKilcIit8JyhbXiddKiknK3woW15cXHNcIic9PD5gXSspKSk/LztcbiAgdmFyIG5jbmFtZSA9IFwiW2EtekEtWl9dW1xcXFwtXFxcXC4wLTlfYS16QS1aXCIgKyAodW5pY29kZVJlZ0V4cC5zb3VyY2UpICsgXCJdKlwiO1xuICB2YXIgcW5hbWVDYXB0dXJlID0gXCIoKD86XCIgKyBuY25hbWUgKyBcIlxcXFw6KT9cIiArIG5jbmFtZSArIFwiKVwiO1xuICB2YXIgc3RhcnRUYWdPcGVuID0gbmV3IFJlZ0V4cCgoXCJePFwiICsgcW5hbWVDYXB0dXJlKSk7XG4gIHZhciBzdGFydFRhZ0Nsb3NlID0gL15cXHMqKFxcLz8pPi87XG4gIHZhciBlbmRUYWcgPSBuZXcgUmVnRXhwKChcIl48XFxcXC9cIiArIHFuYW1lQ2FwdHVyZSArIFwiW14+XSo+XCIpKTtcbiAgdmFyIGRvY3R5cGUgPSAvXjwhRE9DVFlQRSBbXj5dKz4vaTtcbiAgLy8gIzcyOTg6IGVzY2FwZSAtIHRvIGF2b2lkIGJlaW5nIHBhc3NlZCBhcyBIVE1MIGNvbW1lbnQgd2hlbiBpbmxpbmVkIGluIHBhZ2VcbiAgdmFyIGNvbW1lbnQgPSAvXjwhXFwtLS87XG4gIHZhciBjb25kaXRpb25hbENvbW1lbnQgPSAvXjwhXFxbLztcblxuICAvLyBTcGVjaWFsIEVsZW1lbnRzIChjYW4gY29udGFpbiBhbnl0aGluZylcbiAgdmFyIGlzUGxhaW5UZXh0RWxlbWVudCA9IG1ha2VNYXAoJ3NjcmlwdCxzdHlsZSx0ZXh0YXJlYScsIHRydWUpO1xuICB2YXIgcmVDYWNoZSA9IHt9O1xuXG4gIHZhciBkZWNvZGluZ01hcCA9IHtcbiAgICAnJmx0Oyc6ICc8JyxcbiAgICAnJmd0Oyc6ICc+JyxcbiAgICAnJnF1b3Q7JzogJ1wiJyxcbiAgICAnJmFtcDsnOiAnJicsXG4gICAgJyYjMTA7JzogJ1xcbicsXG4gICAgJyYjOTsnOiAnXFx0JyxcbiAgICAnJiMzOTsnOiBcIidcIlxuICB9O1xuICB2YXIgZW5jb2RlZEF0dHIgPSAvJig/Omx0fGd0fHF1b3R8YW1wfCMzOSk7L2c7XG4gIHZhciBlbmNvZGVkQXR0cldpdGhOZXdMaW5lcyA9IC8mKD86bHR8Z3R8cXVvdHxhbXB8IzM5fCMxMHwjOSk7L2c7XG5cbiAgLy8gIzU5OTJcbiAgdmFyIGlzSWdub3JlTmV3bGluZVRhZyA9IG1ha2VNYXAoJ3ByZSx0ZXh0YXJlYScsIHRydWUpO1xuICB2YXIgc2hvdWxkSWdub3JlRmlyc3ROZXdsaW5lID0gZnVuY3Rpb24gKHRhZywgaHRtbCkgeyByZXR1cm4gdGFnICYmIGlzSWdub3JlTmV3bGluZVRhZyh0YWcpICYmIGh0bWxbMF0gPT09ICdcXG4nOyB9O1xuXG4gIGZ1bmN0aW9uIGRlY29kZUF0dHIgKHZhbHVlLCBzaG91bGREZWNvZGVOZXdsaW5lcykge1xuICAgIHZhciByZSA9IHNob3VsZERlY29kZU5ld2xpbmVzID8gZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMgOiBlbmNvZGVkQXR0cjtcbiAgICByZXR1cm4gdmFsdWUucmVwbGFjZShyZSwgZnVuY3Rpb24gKG1hdGNoKSB7IHJldHVybiBkZWNvZGluZ01hcFttYXRjaF07IH0pXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZUhUTUwgKGh0bWwsIG9wdGlvbnMpIHtcbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgZXhwZWN0SFRNTCA9IG9wdGlvbnMuZXhwZWN0SFRNTDtcbiAgICB2YXIgaXNVbmFyeVRhZyQkMSA9IG9wdGlvbnMuaXNVbmFyeVRhZyB8fCBubztcbiAgICB2YXIgY2FuQmVMZWZ0T3BlblRhZyQkMSA9IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyB8fCBubztcbiAgICB2YXIgaW5kZXggPSAwO1xuICAgIHZhciBsYXN0LCBsYXN0VGFnO1xuICAgIHdoaWxlIChodG1sKSB7XG4gICAgICBsYXN0ID0gaHRtbDtcbiAgICAgIC8vIE1ha2Ugc3VyZSB3ZSdyZSBub3QgaW4gYSBwbGFpbnRleHQgY29udGVudCBlbGVtZW50IGxpa2Ugc2NyaXB0L3N0eWxlXG4gICAgICBpZiAoIWxhc3RUYWcgfHwgIWlzUGxhaW5UZXh0RWxlbWVudChsYXN0VGFnKSkge1xuICAgICAgICB2YXIgdGV4dEVuZCA9IGh0bWwuaW5kZXhPZignPCcpO1xuICAgICAgICBpZiAodGV4dEVuZCA9PT0gMCkge1xuICAgICAgICAgIC8vIENvbW1lbnQ6XG4gICAgICAgICAgaWYgKGNvbW1lbnQudGVzdChodG1sKSkge1xuICAgICAgICAgICAgdmFyIGNvbW1lbnRFbmQgPSBodG1sLmluZGV4T2YoJy0tPicpO1xuXG4gICAgICAgICAgICBpZiAoY29tbWVudEVuZCA+PSAwKSB7XG4gICAgICAgICAgICAgIGlmIChvcHRpb25zLnNob3VsZEtlZXBDb21tZW50KSB7XG4gICAgICAgICAgICAgICAgb3B0aW9ucy5jb21tZW50KGh0bWwuc3Vic3RyaW5nKDQsIGNvbW1lbnRFbmQpLCBpbmRleCwgaW5kZXggKyBjb21tZW50RW5kICsgMyk7XG4gICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgYWR2YW5jZShjb21tZW50RW5kICsgMyk7XG4gICAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gaHR0cDovL2VuLndpa2lwZWRpYS5vcmcvd2lraS9Db25kaXRpb25hbF9jb21tZW50I0Rvd25sZXZlbC1yZXZlYWxlZF9jb25kaXRpb25hbF9jb21tZW50XG4gICAgICAgICAgaWYgKGNvbmRpdGlvbmFsQ29tbWVudC50ZXN0KGh0bWwpKSB7XG4gICAgICAgICAgICB2YXIgY29uZGl0aW9uYWxFbmQgPSBodG1sLmluZGV4T2YoJ10+Jyk7XG5cbiAgICAgICAgICAgIGlmIChjb25kaXRpb25hbEVuZCA+PSAwKSB7XG4gICAgICAgICAgICAgIGFkdmFuY2UoY29uZGl0aW9uYWxFbmQgKyAyKTtcbiAgICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG5cbiAgICAgICAgICAvLyBEb2N0eXBlOlxuICAgICAgICAgIHZhciBkb2N0eXBlTWF0Y2ggPSBodG1sLm1hdGNoKGRvY3R5cGUpO1xuICAgICAgICAgIGlmIChkb2N0eXBlTWF0Y2gpIHtcbiAgICAgICAgICAgIGFkdmFuY2UoZG9jdHlwZU1hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICBjb250aW51ZVxuICAgICAgICAgIH1cblxuICAgICAgICAgIC8vIEVuZCB0YWc6XG4gICAgICAgICAgdmFyIGVuZFRhZ01hdGNoID0gaHRtbC5tYXRjaChlbmRUYWcpO1xuICAgICAgICAgIGlmIChlbmRUYWdNYXRjaCkge1xuICAgICAgICAgICAgdmFyIGN1ckluZGV4ID0gaW5kZXg7XG4gICAgICAgICAgICBhZHZhbmNlKGVuZFRhZ01hdGNoWzBdLmxlbmd0aCk7XG4gICAgICAgICAgICBwYXJzZUVuZFRhZyhlbmRUYWdNYXRjaFsxXSwgY3VySW5kZXgsIGluZGV4KTtcbiAgICAgICAgICAgIGNvbnRpbnVlXG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gU3RhcnQgdGFnOlxuICAgICAgICAgIHZhciBzdGFydFRhZ01hdGNoID0gcGFyc2VTdGFydFRhZygpO1xuICAgICAgICAgIGlmIChzdGFydFRhZ01hdGNoKSB7XG4gICAgICAgICAgICBoYW5kbGVTdGFydFRhZyhzdGFydFRhZ01hdGNoKTtcbiAgICAgICAgICAgIGlmIChzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUoc3RhcnRUYWdNYXRjaC50YWdOYW1lLCBodG1sKSkge1xuICAgICAgICAgICAgICBhZHZhbmNlKDEpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY29udGludWVcbiAgICAgICAgICB9XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgdGV4dCA9ICh2b2lkIDApLCByZXN0ID0gKHZvaWQgMCksIG5leHQgPSAodm9pZCAwKTtcbiAgICAgICAgaWYgKHRleHRFbmQgPj0gMCkge1xuICAgICAgICAgIHJlc3QgPSBodG1sLnNsaWNlKHRleHRFbmQpO1xuICAgICAgICAgIHdoaWxlIChcbiAgICAgICAgICAgICFlbmRUYWcudGVzdChyZXN0KSAmJlxuICAgICAgICAgICAgIXN0YXJ0VGFnT3Blbi50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgICAhY29tbWVudC50ZXN0KHJlc3QpICYmXG4gICAgICAgICAgICAhY29uZGl0aW9uYWxDb21tZW50LnRlc3QocmVzdClcbiAgICAgICAgICApIHtcbiAgICAgICAgICAgIC8vIDwgaW4gcGxhaW4gdGV4dCwgYmUgZm9yZ2l2aW5nIGFuZCB0cmVhdCBpdCBhcyB0ZXh0XG4gICAgICAgICAgICBuZXh0ID0gcmVzdC5pbmRleE9mKCc8JywgMSk7XG4gICAgICAgICAgICBpZiAobmV4dCA8IDApIHsgYnJlYWsgfVxuICAgICAgICAgICAgdGV4dEVuZCArPSBuZXh0O1xuICAgICAgICAgICAgcmVzdCA9IGh0bWwuc2xpY2UodGV4dEVuZCk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHRleHQgPSBodG1sLnN1YnN0cmluZygwLCB0ZXh0RW5kKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICh0ZXh0RW5kIDwgMCkge1xuICAgICAgICAgIHRleHQgPSBodG1sO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKHRleHQpIHtcbiAgICAgICAgICBhZHZhbmNlKHRleHQubGVuZ3RoKTtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmIChvcHRpb25zLmNoYXJzICYmIHRleHQpIHtcbiAgICAgICAgICBvcHRpb25zLmNoYXJzKHRleHQsIGluZGV4IC0gdGV4dC5sZW5ndGgsIGluZGV4KTtcbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgdmFyIGVuZFRhZ0xlbmd0aCA9IDA7XG4gICAgICAgIHZhciBzdGFja2VkVGFnID0gbGFzdFRhZy50b0xvd2VyQ2FzZSgpO1xuICAgICAgICB2YXIgcmVTdGFja2VkVGFnID0gcmVDYWNoZVtzdGFja2VkVGFnXSB8fCAocmVDYWNoZVtzdGFja2VkVGFnXSA9IG5ldyBSZWdFeHAoJyhbXFxcXHNcXFxcU10qPykoPC8nICsgc3RhY2tlZFRhZyArICdbXj5dKj4pJywgJ2knKSk7XG4gICAgICAgIHZhciByZXN0JDEgPSBodG1sLnJlcGxhY2UocmVTdGFja2VkVGFnLCBmdW5jdGlvbiAoYWxsLCB0ZXh0LCBlbmRUYWcpIHtcbiAgICAgICAgICBlbmRUYWdMZW5ndGggPSBlbmRUYWcubGVuZ3RoO1xuICAgICAgICAgIGlmICghaXNQbGFpblRleHRFbGVtZW50KHN0YWNrZWRUYWcpICYmIHN0YWNrZWRUYWcgIT09ICdub3NjcmlwdCcpIHtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0XG4gICAgICAgICAgICAgIC5yZXBsYWNlKC88IVxcLS0oW1xcc1xcU10qPyktLT4vZywgJyQxJykgLy8gIzcyOThcbiAgICAgICAgICAgICAgLnJlcGxhY2UoLzwhXFxbQ0RBVEFcXFsoW1xcc1xcU10qPyldXT4vZywgJyQxJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIGlmIChzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUoc3RhY2tlZFRhZywgdGV4dCkpIHtcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnNsaWNlKDEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAob3B0aW9ucy5jaGFycykge1xuICAgICAgICAgICAgb3B0aW9ucy5jaGFycyh0ZXh0KTtcbiAgICAgICAgICB9XG4gICAgICAgICAgcmV0dXJuICcnXG4gICAgICAgIH0pO1xuICAgICAgICBpbmRleCArPSBodG1sLmxlbmd0aCAtIHJlc3QkMS5sZW5ndGg7XG4gICAgICAgIGh0bWwgPSByZXN0JDE7XG4gICAgICAgIHBhcnNlRW5kVGFnKHN0YWNrZWRUYWcsIGluZGV4IC0gZW5kVGFnTGVuZ3RoLCBpbmRleCk7XG4gICAgICB9XG5cbiAgICAgIGlmIChodG1sID09PSBsYXN0KSB7XG4gICAgICAgIG9wdGlvbnMuY2hhcnMgJiYgb3B0aW9ucy5jaGFycyhodG1sKTtcbiAgICAgICAgaWYgKCFzdGFjay5sZW5ndGggJiYgb3B0aW9ucy53YXJuKSB7XG4gICAgICAgICAgb3B0aW9ucy53YXJuKChcIk1hbC1mb3JtYXR0ZWQgdGFnIGF0IGVuZCBvZiB0ZW1wbGF0ZTogXFxcIlwiICsgaHRtbCArIFwiXFxcIlwiKSwgeyBzdGFydDogaW5kZXggKyBodG1sLmxlbmd0aCB9KTtcbiAgICAgICAgfVxuICAgICAgICBicmVha1xuICAgICAgfVxuICAgIH1cblxuICAgIC8vIENsZWFuIHVwIGFueSByZW1haW5pbmcgdGFnc1xuICAgIHBhcnNlRW5kVGFnKCk7XG5cbiAgICBmdW5jdGlvbiBhZHZhbmNlIChuKSB7XG4gICAgICBpbmRleCArPSBuO1xuICAgICAgaHRtbCA9IGh0bWwuc3Vic3RyaW5nKG4pO1xuICAgIH1cblxuICAgIGZ1bmN0aW9uIHBhcnNlU3RhcnRUYWcgKCkge1xuICAgICAgdmFyIHN0YXJ0ID0gaHRtbC5tYXRjaChzdGFydFRhZ09wZW4pO1xuICAgICAgaWYgKHN0YXJ0KSB7XG4gICAgICAgIHZhciBtYXRjaCA9IHtcbiAgICAgICAgICB0YWdOYW1lOiBzdGFydFsxXSxcbiAgICAgICAgICBhdHRyczogW10sXG4gICAgICAgICAgc3RhcnQ6IGluZGV4XG4gICAgICAgIH07XG4gICAgICAgIGFkdmFuY2Uoc3RhcnRbMF0ubGVuZ3RoKTtcbiAgICAgICAgdmFyIGVuZCwgYXR0cjtcbiAgICAgICAgd2hpbGUgKCEoZW5kID0gaHRtbC5tYXRjaChzdGFydFRhZ0Nsb3NlKSkgJiYgKGF0dHIgPSBodG1sLm1hdGNoKGR5bmFtaWNBcmdBdHRyaWJ1dGUpIHx8IGh0bWwubWF0Y2goYXR0cmlidXRlKSkpIHtcbiAgICAgICAgICBhdHRyLnN0YXJ0ID0gaW5kZXg7XG4gICAgICAgICAgYWR2YW5jZShhdHRyWzBdLmxlbmd0aCk7XG4gICAgICAgICAgYXR0ci5lbmQgPSBpbmRleDtcbiAgICAgICAgICBtYXRjaC5hdHRycy5wdXNoKGF0dHIpO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbmQpIHtcbiAgICAgICAgICBtYXRjaC51bmFyeVNsYXNoID0gZW5kWzFdO1xuICAgICAgICAgIGFkdmFuY2UoZW5kWzBdLmxlbmd0aCk7XG4gICAgICAgICAgbWF0Y2guZW5kID0gaW5kZXg7XG4gICAgICAgICAgcmV0dXJuIG1hdGNoXG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBoYW5kbGVTdGFydFRhZyAobWF0Y2gpIHtcbiAgICAgIHZhciB0YWdOYW1lID0gbWF0Y2gudGFnTmFtZTtcbiAgICAgIHZhciB1bmFyeVNsYXNoID0gbWF0Y2gudW5hcnlTbGFzaDtcblxuICAgICAgaWYgKGV4cGVjdEhUTUwpIHtcbiAgICAgICAgaWYgKGxhc3RUYWcgPT09ICdwJyAmJiBpc05vblBocmFzaW5nVGFnKHRhZ05hbWUpKSB7XG4gICAgICAgICAgcGFyc2VFbmRUYWcobGFzdFRhZyk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKGNhbkJlTGVmdE9wZW5UYWckJDEodGFnTmFtZSkgJiYgbGFzdFRhZyA9PT0gdGFnTmFtZSkge1xuICAgICAgICAgIHBhcnNlRW5kVGFnKHRhZ05hbWUpO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHZhciB1bmFyeSA9IGlzVW5hcnlUYWckJDEodGFnTmFtZSkgfHwgISF1bmFyeVNsYXNoO1xuXG4gICAgICB2YXIgbCA9IG1hdGNoLmF0dHJzLmxlbmd0aDtcbiAgICAgIHZhciBhdHRycyA9IG5ldyBBcnJheShsKTtcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbDsgaSsrKSB7XG4gICAgICAgIHZhciBhcmdzID0gbWF0Y2guYXR0cnNbaV07XG4gICAgICAgIHZhciB2YWx1ZSA9IGFyZ3NbM10gfHwgYXJnc1s0XSB8fCBhcmdzWzVdIHx8ICcnO1xuICAgICAgICB2YXIgc2hvdWxkRGVjb2RlTmV3bGluZXMgPSB0YWdOYW1lID09PSAnYScgJiYgYXJnc1sxXSA9PT0gJ2hyZWYnXG4gICAgICAgICAgPyBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZlxuICAgICAgICAgIDogb3B0aW9ucy5zaG91bGREZWNvZGVOZXdsaW5lcztcbiAgICAgICAgYXR0cnNbaV0gPSB7XG4gICAgICAgICAgbmFtZTogYXJnc1sxXSxcbiAgICAgICAgICB2YWx1ZTogZGVjb2RlQXR0cih2YWx1ZSwgc2hvdWxkRGVjb2RlTmV3bGluZXMpXG4gICAgICAgIH07XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgYXR0cnNbaV0uc3RhcnQgPSBhcmdzLnN0YXJ0ICsgYXJnc1swXS5tYXRjaCgvXlxccyovKS5sZW5ndGg7XG4gICAgICAgICAgYXR0cnNbaV0uZW5kID0gYXJncy5lbmQ7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgaWYgKCF1bmFyeSkge1xuICAgICAgICBzdGFjay5wdXNoKHsgdGFnOiB0YWdOYW1lLCBsb3dlckNhc2VkVGFnOiB0YWdOYW1lLnRvTG93ZXJDYXNlKCksIGF0dHJzOiBhdHRycywgc3RhcnQ6IG1hdGNoLnN0YXJ0LCBlbmQ6IG1hdGNoLmVuZCB9KTtcbiAgICAgICAgbGFzdFRhZyA9IHRhZ05hbWU7XG4gICAgICB9XG5cbiAgICAgIGlmIChvcHRpb25zLnN0YXJ0KSB7XG4gICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgYXR0cnMsIHVuYXJ5LCBtYXRjaC5zdGFydCwgbWF0Y2guZW5kKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiBwYXJzZUVuZFRhZyAodGFnTmFtZSwgc3RhcnQsIGVuZCkge1xuICAgICAgdmFyIHBvcywgbG93ZXJDYXNlZFRhZ05hbWU7XG4gICAgICBpZiAoc3RhcnQgPT0gbnVsbCkgeyBzdGFydCA9IGluZGV4OyB9XG4gICAgICBpZiAoZW5kID09IG51bGwpIHsgZW5kID0gaW5kZXg7IH1cblxuICAgICAgLy8gRmluZCB0aGUgY2xvc2VzdCBvcGVuZWQgdGFnIG9mIHRoZSBzYW1lIHR5cGVcbiAgICAgIGlmICh0YWdOYW1lKSB7XG4gICAgICAgIGxvd2VyQ2FzZWRUYWdOYW1lID0gdGFnTmFtZS50b0xvd2VyQ2FzZSgpO1xuICAgICAgICBmb3IgKHBvcyA9IHN0YWNrLmxlbmd0aCAtIDE7IHBvcyA+PSAwOyBwb3MtLSkge1xuICAgICAgICAgIGlmIChzdGFja1twb3NdLmxvd2VyQ2FzZWRUYWcgPT09IGxvd2VyQ2FzZWRUYWdOYW1lKSB7XG4gICAgICAgICAgICBicmVha1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gSWYgbm8gdGFnIG5hbWUgaXMgcHJvdmlkZWQsIGNsZWFuIHNob3BcbiAgICAgICAgcG9zID0gMDtcbiAgICAgIH1cblxuICAgICAgaWYgKHBvcyA+PSAwKSB7XG4gICAgICAgIC8vIENsb3NlIGFsbCB0aGUgb3BlbiBlbGVtZW50cywgdXAgdGhlIHN0YWNrXG4gICAgICAgIGZvciAodmFyIGkgPSBzdGFjay5sZW5ndGggLSAxOyBpID49IHBvczsgaS0tKSB7XG4gICAgICAgICAgaWYgKGkgPiBwb3MgfHwgIXRhZ05hbWUgJiZcbiAgICAgICAgICAgIG9wdGlvbnMud2FyblxuICAgICAgICAgICkge1xuICAgICAgICAgICAgb3B0aW9ucy53YXJuKFxuICAgICAgICAgICAgICAoXCJ0YWcgPFwiICsgKHN0YWNrW2ldLnRhZykgKyBcIj4gaGFzIG5vIG1hdGNoaW5nIGVuZCB0YWcuXCIpLFxuICAgICAgICAgICAgICB7IHN0YXJ0OiBzdGFja1tpXS5zdGFydCwgZW5kOiBzdGFja1tpXS5lbmQgfVxuICAgICAgICAgICAgKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgICAgICBvcHRpb25zLmVuZChzdGFja1tpXS50YWcsIHN0YXJ0LCBlbmQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIC8vIFJlbW92ZSB0aGUgb3BlbiBlbGVtZW50cyBmcm9tIHRoZSBzdGFja1xuICAgICAgICBzdGFjay5sZW5ndGggPSBwb3M7XG4gICAgICAgIGxhc3RUYWcgPSBwb3MgJiYgc3RhY2tbcG9zIC0gMV0udGFnO1xuICAgICAgfSBlbHNlIGlmIChsb3dlckNhc2VkVGFnTmFtZSA9PT0gJ2JyJykge1xuICAgICAgICBpZiAob3B0aW9ucy5zdGFydCkge1xuICAgICAgICAgIG9wdGlvbnMuc3RhcnQodGFnTmFtZSwgW10sIHRydWUsIHN0YXJ0LCBlbmQpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKGxvd2VyQ2FzZWRUYWdOYW1lID09PSAncCcpIHtcbiAgICAgICAgaWYgKG9wdGlvbnMuc3RhcnQpIHtcbiAgICAgICAgICBvcHRpb25zLnN0YXJ0KHRhZ05hbWUsIFtdLCBmYWxzZSwgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKG9wdGlvbnMuZW5kKSB7XG4gICAgICAgICAgb3B0aW9ucy5lbmQodGFnTmFtZSwgc3RhcnQsIGVuZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgb25SRSA9IC9eQHxedi1vbjovO1xuICB2YXIgZGlyUkUgPSAvXnYtfF5AfF46fF4jLztcbiAgdmFyIGZvckFsaWFzUkUgPSAvKFtcXHNcXFNdKj8pXFxzKyg/OmlufG9mKVxccysoW1xcc1xcU10qKS87XG4gIHZhciBmb3JJdGVyYXRvclJFID0gLywoW14sXFx9XFxdXSopKD86LChbXixcXH1cXF1dKikpPyQvO1xuICB2YXIgc3RyaXBQYXJlbnNSRSA9IC9eXFwofFxcKSQvZztcbiAgdmFyIGR5bmFtaWNBcmdSRSA9IC9eXFxbLipcXF0kLztcblxuICB2YXIgYXJnUkUgPSAvOiguKikkLztcbiAgdmFyIGJpbmRSRSA9IC9eOnxeXFwufF52LWJpbmQ6LztcbiAgdmFyIG1vZGlmaWVyUkUgPSAvXFwuW14uXFxdXSsoPz1bXlxcXV0qJCkvZztcblxuICB2YXIgc2xvdFJFID0gL152LXNsb3QoOnwkKXxeIy87XG5cbiAgdmFyIGxpbmVCcmVha1JFID0gL1tcXHJcXG5dLztcbiAgdmFyIHdoaXRlc3BhY2VSRSQxID0gL1sgXFxmXFx0XFxyXFxuXSsvZztcblxuICB2YXIgaW52YWxpZEF0dHJpYnV0ZVJFID0gL1tcXHNcIic8PlxcLz1dLztcblxuICB2YXIgZGVjb2RlSFRNTENhY2hlZCA9IGNhY2hlZChoZS5kZWNvZGUpO1xuXG4gIHZhciBlbXB0eVNsb3RTY29wZVRva2VuID0gXCJfZW1wdHlfXCI7XG5cbiAgLy8gY29uZmlndXJhYmxlIHN0YXRlXG4gIHZhciB3YXJuJDI7XG4gIHZhciBkZWxpbWl0ZXJzO1xuICB2YXIgdHJhbnNmb3JtcztcbiAgdmFyIHByZVRyYW5zZm9ybXM7XG4gIHZhciBwb3N0VHJhbnNmb3JtcztcbiAgdmFyIHBsYXRmb3JtSXNQcmVUYWc7XG4gIHZhciBwbGF0Zm9ybU11c3RVc2VQcm9wO1xuICB2YXIgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2U7XG4gIHZhciBtYXliZUNvbXBvbmVudDtcblxuICBmdW5jdGlvbiBjcmVhdGVBU1RFbGVtZW50IChcbiAgICB0YWcsXG4gICAgYXR0cnMsXG4gICAgcGFyZW50XG4gICkge1xuICAgIHJldHVybiB7XG4gICAgICB0eXBlOiAxLFxuICAgICAgdGFnOiB0YWcsXG4gICAgICBhdHRyc0xpc3Q6IGF0dHJzLFxuICAgICAgYXR0cnNNYXA6IG1ha2VBdHRyc01hcChhdHRycyksXG4gICAgICByYXdBdHRyc01hcDoge30sXG4gICAgICBwYXJlbnQ6IHBhcmVudCxcbiAgICAgIGNoaWxkcmVuOiBbXVxuICAgIH1cbiAgfVxuXG4gIC8qKlxuICAgKiBDb252ZXJ0IEhUTUwgc3RyaW5nIHRvIEFTVC5cbiAgICovXG4gIGZ1bmN0aW9uIHBhcnNlIChcbiAgICB0ZW1wbGF0ZSxcbiAgICBvcHRpb25zXG4gICkge1xuICAgIHdhcm4kMiA9IG9wdGlvbnMud2FybiB8fCBiYXNlV2FybjtcblxuICAgIHBsYXRmb3JtSXNQcmVUYWcgPSBvcHRpb25zLmlzUHJlVGFnIHx8IG5vO1xuICAgIHBsYXRmb3JtTXVzdFVzZVByb3AgPSBvcHRpb25zLm11c3RVc2VQcm9wIHx8IG5vO1xuICAgIHBsYXRmb3JtR2V0VGFnTmFtZXNwYWNlID0gb3B0aW9ucy5nZXRUYWdOYW1lc3BhY2UgfHwgbm87XG4gICAgdmFyIGlzUmVzZXJ2ZWRUYWcgPSBvcHRpb25zLmlzUmVzZXJ2ZWRUYWcgfHwgbm87XG4gICAgbWF5YmVDb21wb25lbnQgPSBmdW5jdGlvbiAoZWwpIHsgcmV0dXJuICEhKFxuICAgICAgZWwuY29tcG9uZW50IHx8XG4gICAgICBlbC5hdHRyc01hcFsnOmlzJ10gfHxcbiAgICAgIGVsLmF0dHJzTWFwWyd2LWJpbmQ6aXMnXSB8fFxuICAgICAgIShlbC5hdHRyc01hcC5pcyA/IGlzUmVzZXJ2ZWRUYWcoZWwuYXR0cnNNYXAuaXMpIDogaXNSZXNlcnZlZFRhZyhlbC50YWcpKVxuICAgICk7IH07XG4gICAgdHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtTm9kZScpO1xuICAgIHByZVRyYW5zZm9ybXMgPSBwbHVja01vZHVsZUZ1bmN0aW9uKG9wdGlvbnMubW9kdWxlcywgJ3ByZVRyYW5zZm9ybU5vZGUnKTtcbiAgICBwb3N0VHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAncG9zdFRyYW5zZm9ybU5vZGUnKTtcblxuICAgIGRlbGltaXRlcnMgPSBvcHRpb25zLmRlbGltaXRlcnM7XG5cbiAgICB2YXIgc3RhY2sgPSBbXTtcbiAgICB2YXIgcHJlc2VydmVXaGl0ZXNwYWNlID0gb3B0aW9ucy5wcmVzZXJ2ZVdoaXRlc3BhY2UgIT09IGZhbHNlO1xuICAgIHZhciB3aGl0ZXNwYWNlT3B0aW9uID0gb3B0aW9ucy53aGl0ZXNwYWNlO1xuICAgIHZhciByb290O1xuICAgIHZhciBjdXJyZW50UGFyZW50O1xuICAgIHZhciBpblZQcmUgPSBmYWxzZTtcbiAgICB2YXIgaW5QcmUgPSBmYWxzZTtcbiAgICB2YXIgd2FybmVkID0gZmFsc2U7XG5cbiAgICBmdW5jdGlvbiB3YXJuT25jZSAobXNnLCByYW5nZSkge1xuICAgICAgaWYgKCF3YXJuZWQpIHtcbiAgICAgICAgd2FybmVkID0gdHJ1ZTtcbiAgICAgICAgd2FybiQyKG1zZywgcmFuZ2UpO1xuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNsb3NlRWxlbWVudCAoZWxlbWVudCkge1xuICAgICAgdHJpbUVuZGluZ1doaXRlc3BhY2UoZWxlbWVudCk7XG4gICAgICBpZiAoIWluVlByZSAmJiAhZWxlbWVudC5wcm9jZXNzZWQpIHtcbiAgICAgICAgZWxlbWVudCA9IHByb2Nlc3NFbGVtZW50KGVsZW1lbnQsIG9wdGlvbnMpO1xuICAgICAgfVxuICAgICAgLy8gdHJlZSBtYW5hZ2VtZW50XG4gICAgICBpZiAoIXN0YWNrLmxlbmd0aCAmJiBlbGVtZW50ICE9PSByb290KSB7XG4gICAgICAgIC8vIGFsbG93IHJvb3QgZWxlbWVudHMgd2l0aCB2LWlmLCB2LWVsc2UtaWYgYW5kIHYtZWxzZVxuICAgICAgICBpZiAocm9vdC5pZiAmJiAoZWxlbWVudC5lbHNlaWYgfHwgZWxlbWVudC5lbHNlKSkge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGNoZWNrUm9vdENvbnN0cmFpbnRzKGVsZW1lbnQpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRJZkNvbmRpdGlvbihyb290LCB7XG4gICAgICAgICAgICBleHA6IGVsZW1lbnQuZWxzZWlmLFxuICAgICAgICAgICAgYmxvY2s6IGVsZW1lbnRcbiAgICAgICAgICB9KTtcbiAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICAgIFwiQ29tcG9uZW50IHRlbXBsYXRlIHNob3VsZCBjb250YWluIGV4YWN0bHkgb25lIHJvb3QgZWxlbWVudC4gXCIgK1xuICAgICAgICAgICAgXCJJZiB5b3UgYXJlIHVzaW5nIHYtaWYgb24gbXVsdGlwbGUgZWxlbWVudHMsIFwiICtcbiAgICAgICAgICAgIFwidXNlIHYtZWxzZS1pZiB0byBjaGFpbiB0aGVtIGluc3RlYWQuXCIsXG4gICAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoY3VycmVudFBhcmVudCAmJiAhZWxlbWVudC5mb3JiaWRkZW4pIHtcbiAgICAgICAgaWYgKGVsZW1lbnQuZWxzZWlmIHx8IGVsZW1lbnQuZWxzZSkge1xuICAgICAgICAgIHByb2Nlc3NJZkNvbmRpdGlvbnMoZWxlbWVudCwgY3VycmVudFBhcmVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaWYgKGVsZW1lbnQuc2xvdFNjb3BlKSB7XG4gICAgICAgICAgICAvLyBzY29wZWQgc2xvdFxuICAgICAgICAgICAgLy8ga2VlcCBpdCBpbiB0aGUgY2hpbGRyZW4gbGlzdCBzbyB0aGF0IHYtZWxzZSgtaWYpIGNvbmRpdGlvbnMgY2FuXG4gICAgICAgICAgICAvLyBmaW5kIGl0IGFzIHRoZSBwcmV2IG5vZGUuXG4gICAgICAgICAgICB2YXIgbmFtZSA9IGVsZW1lbnQuc2xvdFRhcmdldCB8fCAnXCJkZWZhdWx0XCInXG4gICAgICAgICAgICA7KGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgfHwgKGN1cnJlbnRQYXJlbnQuc2NvcGVkU2xvdHMgPSB7fSkpW25hbWVdID0gZWxlbWVudDtcbiAgICAgICAgICB9XG4gICAgICAgICAgY3VycmVudFBhcmVudC5jaGlsZHJlbi5wdXNoKGVsZW1lbnQpO1xuICAgICAgICAgIGVsZW1lbnQucGFyZW50ID0gY3VycmVudFBhcmVudDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBmaW5hbCBjaGlsZHJlbiBjbGVhbnVwXG4gICAgICAvLyBmaWx0ZXIgb3V0IHNjb3BlZCBzbG90c1xuICAgICAgZWxlbWVudC5jaGlsZHJlbiA9IGVsZW1lbnQuY2hpbGRyZW4uZmlsdGVyKGZ1bmN0aW9uIChjKSB7IHJldHVybiAhKGMpLnNsb3RTY29wZTsgfSk7XG4gICAgICAvLyByZW1vdmUgdHJhaWxpbmcgd2hpdGVzcGFjZSBub2RlIGFnYWluXG4gICAgICB0cmltRW5kaW5nV2hpdGVzcGFjZShlbGVtZW50KTtcblxuICAgICAgLy8gY2hlY2sgcHJlIHN0YXRlXG4gICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgaW5WUHJlID0gZmFsc2U7XG4gICAgICB9XG4gICAgICBpZiAocGxhdGZvcm1Jc1ByZVRhZyhlbGVtZW50LnRhZykpIHtcbiAgICAgICAgaW5QcmUgPSBmYWxzZTtcbiAgICAgIH1cbiAgICAgIC8vIGFwcGx5IHBvc3QtdHJhbnNmb3Jtc1xuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwb3N0VHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBwb3N0VHJhbnNmb3Jtc1tpXShlbGVtZW50LCBvcHRpb25zKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBmdW5jdGlvbiB0cmltRW5kaW5nV2hpdGVzcGFjZSAoZWwpIHtcbiAgICAgIC8vIHJlbW92ZSB0cmFpbGluZyB3aGl0ZXNwYWNlIG5vZGVcbiAgICAgIGlmICghaW5QcmUpIHtcbiAgICAgICAgdmFyIGxhc3ROb2RlO1xuICAgICAgICB3aGlsZSAoXG4gICAgICAgICAgKGxhc3ROb2RlID0gZWwuY2hpbGRyZW5bZWwuY2hpbGRyZW4ubGVuZ3RoIC0gMV0pICYmXG4gICAgICAgICAgbGFzdE5vZGUudHlwZSA9PT0gMyAmJlxuICAgICAgICAgIGxhc3ROb2RlLnRleHQgPT09ICcgJ1xuICAgICAgICApIHtcbiAgICAgICAgICBlbC5jaGlsZHJlbi5wb3AoKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgIGZ1bmN0aW9uIGNoZWNrUm9vdENvbnN0cmFpbnRzIChlbCkge1xuICAgICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnIHx8IGVsLnRhZyA9PT0gJ3RlbXBsYXRlJykge1xuICAgICAgICB3YXJuT25jZShcbiAgICAgICAgICBcIkNhbm5vdCB1c2UgPFwiICsgKGVsLnRhZykgKyBcIj4gYXMgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlIGl0IG1heSBcIiArXG4gICAgICAgICAgJ2NvbnRhaW4gbXVsdGlwbGUgbm9kZXMuJyxcbiAgICAgICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBpZiAoZWwuYXR0cnNNYXAuaGFzT3duUHJvcGVydHkoJ3YtZm9yJykpIHtcbiAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgJ0Nhbm5vdCB1c2Ugdi1mb3Igb24gc3RhdGVmdWwgY29tcG9uZW50IHJvb3QgZWxlbWVudCBiZWNhdXNlICcgK1xuICAgICAgICAgICdpdCByZW5kZXJzIG11bHRpcGxlIGVsZW1lbnRzLicsXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ11cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBwYXJzZUhUTUwodGVtcGxhdGUsIHtcbiAgICAgIHdhcm46IHdhcm4kMixcbiAgICAgIGV4cGVjdEhUTUw6IG9wdGlvbnMuZXhwZWN0SFRNTCxcbiAgICAgIGlzVW5hcnlUYWc6IG9wdGlvbnMuaXNVbmFyeVRhZyxcbiAgICAgIGNhbkJlTGVmdE9wZW5UYWc6IG9wdGlvbnMuY2FuQmVMZWZ0T3BlblRhZyxcbiAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzLFxuICAgICAgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmOiBvcHRpb25zLnNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICAgIHNob3VsZEtlZXBDb21tZW50OiBvcHRpb25zLmNvbW1lbnRzLFxuICAgICAgb3V0cHV0U291cmNlUmFuZ2U6IG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UsXG4gICAgICBzdGFydDogZnVuY3Rpb24gc3RhcnQgKHRhZywgYXR0cnMsIHVuYXJ5LCBzdGFydCQxLCBlbmQpIHtcbiAgICAgICAgLy8gY2hlY2sgbmFtZXNwYWNlLlxuICAgICAgICAvLyBpbmhlcml0IHBhcmVudCBucyBpZiB0aGVyZSBpcyBvbmVcbiAgICAgICAgdmFyIG5zID0gKGN1cnJlbnRQYXJlbnQgJiYgY3VycmVudFBhcmVudC5ucykgfHwgcGxhdGZvcm1HZXRUYWdOYW1lc3BhY2UodGFnKTtcblxuICAgICAgICAvLyBoYW5kbGUgSUUgc3ZnIGJ1Z1xuICAgICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgICAgaWYgKGlzSUUgJiYgbnMgPT09ICdzdmcnKSB7XG4gICAgICAgICAgYXR0cnMgPSBndWFyZElFU1ZHQnVnKGF0dHJzKTtcbiAgICAgICAgfVxuXG4gICAgICAgIHZhciBlbGVtZW50ID0gY3JlYXRlQVNURWxlbWVudCh0YWcsIGF0dHJzLCBjdXJyZW50UGFyZW50KTtcbiAgICAgICAgaWYgKG5zKSB7XG4gICAgICAgICAgZWxlbWVudC5ucyA9IG5zO1xuICAgICAgICB9XG5cbiAgICAgICAge1xuICAgICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgICBlbGVtZW50LnN0YXJ0ID0gc3RhcnQkMTtcbiAgICAgICAgICAgIGVsZW1lbnQuZW5kID0gZW5kO1xuICAgICAgICAgICAgZWxlbWVudC5yYXdBdHRyc01hcCA9IGVsZW1lbnQuYXR0cnNMaXN0LnJlZHVjZShmdW5jdGlvbiAoY3VtdWxhdGVkLCBhdHRyKSB7XG4gICAgICAgICAgICAgIGN1bXVsYXRlZFthdHRyLm5hbWVdID0gYXR0cjtcbiAgICAgICAgICAgICAgcmV0dXJuIGN1bXVsYXRlZFxuICAgICAgICAgICAgfSwge30pO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhdHRycy5mb3JFYWNoKGZ1bmN0aW9uIChhdHRyKSB7XG4gICAgICAgICAgICBpZiAoaW52YWxpZEF0dHJpYnV0ZVJFLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgICAgXCJJbnZhbGlkIGR5bmFtaWMgYXJndW1lbnQgZXhwcmVzc2lvbjogYXR0cmlidXRlIG5hbWVzIGNhbm5vdCBjb250YWluIFwiICtcbiAgICAgICAgICAgICAgICBcInNwYWNlcywgcXVvdGVzLCA8LCA+LCAvIG9yID0uXCIsXG4gICAgICAgICAgICAgICAge1xuICAgICAgICAgICAgICAgICAgc3RhcnQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUuaW5kZXhPZihcIltcIiksXG4gICAgICAgICAgICAgICAgICBlbmQ6IGF0dHIuc3RhcnQgKyBhdHRyLm5hbWUubGVuZ3RoXG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH0pO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKGlzRm9yYmlkZGVuVGFnKGVsZW1lbnQpICYmICFpc1NlcnZlclJlbmRlcmluZygpKSB7XG4gICAgICAgICAgZWxlbWVudC5mb3JiaWRkZW4gPSB0cnVlO1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICdUZW1wbGF0ZXMgc2hvdWxkIG9ubHkgYmUgcmVzcG9uc2libGUgZm9yIG1hcHBpbmcgdGhlIHN0YXRlIHRvIHRoZSAnICtcbiAgICAgICAgICAgICdVSS4gQXZvaWQgcGxhY2luZyB0YWdzIHdpdGggc2lkZS1lZmZlY3RzIGluIHlvdXIgdGVtcGxhdGVzLCBzdWNoIGFzICcgK1xuICAgICAgICAgICAgXCI8XCIgKyB0YWcgKyBcIj5cIiArICcsIGFzIHRoZXkgd2lsbCBub3QgYmUgcGFyc2VkLicsXG4gICAgICAgICAgICB7IHN0YXJ0OiBlbGVtZW50LnN0YXJ0IH1cbiAgICAgICAgICApO1xuICAgICAgICB9XG5cbiAgICAgICAgLy8gYXBwbHkgcHJlLXRyYW5zZm9ybXNcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBwcmVUcmFuc2Zvcm1zLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgZWxlbWVudCA9IHByZVRyYW5zZm9ybXNbaV0oZWxlbWVudCwgb3B0aW9ucykgfHwgZWxlbWVudDtcbiAgICAgICAgfVxuXG4gICAgICAgIGlmICghaW5WUHJlKSB7XG4gICAgICAgICAgcHJvY2Vzc1ByZShlbGVtZW50KTtcbiAgICAgICAgICBpZiAoZWxlbWVudC5wcmUpIHtcbiAgICAgICAgICAgIGluVlByZSA9IHRydWU7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGlmIChwbGF0Zm9ybUlzUHJlVGFnKGVsZW1lbnQudGFnKSkge1xuICAgICAgICAgIGluUHJlID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoaW5WUHJlKSB7XG4gICAgICAgICAgcHJvY2Vzc1Jhd0F0dHJzKGVsZW1lbnQpO1xuICAgICAgICB9IGVsc2UgaWYgKCFlbGVtZW50LnByb2Nlc3NlZCkge1xuICAgICAgICAgIC8vIHN0cnVjdHVyYWwgZGlyZWN0aXZlc1xuICAgICAgICAgIHByb2Nlc3NGb3IoZWxlbWVudCk7XG4gICAgICAgICAgcHJvY2Vzc0lmKGVsZW1lbnQpO1xuICAgICAgICAgIHByb2Nlc3NPbmNlKGVsZW1lbnQpO1xuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCFyb290KSB7XG4gICAgICAgICAgcm9vdCA9IGVsZW1lbnQ7XG4gICAgICAgICAge1xuICAgICAgICAgICAgY2hlY2tSb290Q29uc3RyYWludHMocm9vdCk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgaWYgKCF1bmFyeSkge1xuICAgICAgICAgIGN1cnJlbnRQYXJlbnQgPSBlbGVtZW50O1xuICAgICAgICAgIHN0YWNrLnB1c2goZWxlbWVudCk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgY2xvc2VFbGVtZW50KGVsZW1lbnQpO1xuICAgICAgICB9XG4gICAgICB9LFxuXG4gICAgICBlbmQ6IGZ1bmN0aW9uIGVuZCAodGFnLCBzdGFydCwgZW5kJDEpIHtcbiAgICAgICAgdmFyIGVsZW1lbnQgPSBzdGFja1tzdGFjay5sZW5ndGggLSAxXTtcbiAgICAgICAgLy8gcG9wIHN0YWNrXG4gICAgICAgIHN0YWNrLmxlbmd0aCAtPSAxO1xuICAgICAgICBjdXJyZW50UGFyZW50ID0gc3RhY2tbc3RhY2subGVuZ3RoIC0gMV07XG4gICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgZWxlbWVudC5lbmQgPSBlbmQkMTtcbiAgICAgICAgfVxuICAgICAgICBjbG9zZUVsZW1lbnQoZWxlbWVudCk7XG4gICAgICB9LFxuXG4gICAgICBjaGFyczogZnVuY3Rpb24gY2hhcnMgKHRleHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgaWYgKCFjdXJyZW50UGFyZW50KSB7XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKHRleHQgPT09IHRlbXBsYXRlKSB7XG4gICAgICAgICAgICAgIHdhcm5PbmNlKFxuICAgICAgICAgICAgICAgICdDb21wb25lbnQgdGVtcGxhdGUgcmVxdWlyZXMgYSByb290IGVsZW1lbnQsIHJhdGhlciB0aGFuIGp1c3QgdGV4dC4nLFxuICAgICAgICAgICAgICAgIHsgc3RhcnQ6IHN0YXJ0IH1cbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAoKHRleHQgPSB0ZXh0LnRyaW0oKSkpIHtcbiAgICAgICAgICAgICAgd2Fybk9uY2UoXG4gICAgICAgICAgICAgICAgKFwidGV4dCBcXFwiXCIgKyB0ZXh0ICsgXCJcXFwiIG91dHNpZGUgcm9vdCBlbGVtZW50IHdpbGwgYmUgaWdub3JlZC5cIiksXG4gICAgICAgICAgICAgICAgeyBzdGFydDogc3RhcnQgfVxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICByZXR1cm5cbiAgICAgICAgfVxuICAgICAgICAvLyBJRSB0ZXh0YXJlYSBwbGFjZWhvbGRlciBidWdcbiAgICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICAgIGlmIChpc0lFICYmXG4gICAgICAgICAgY3VycmVudFBhcmVudC50YWcgPT09ICd0ZXh0YXJlYScgJiZcbiAgICAgICAgICBjdXJyZW50UGFyZW50LmF0dHJzTWFwLnBsYWNlaG9sZGVyID09PSB0ZXh0XG4gICAgICAgICkge1xuICAgICAgICAgIHJldHVyblxuICAgICAgICB9XG4gICAgICAgIHZhciBjaGlsZHJlbiA9IGN1cnJlbnRQYXJlbnQuY2hpbGRyZW47XG4gICAgICAgIGlmIChpblByZSB8fCB0ZXh0LnRyaW0oKSkge1xuICAgICAgICAgIHRleHQgPSBpc1RleHRUYWcoY3VycmVudFBhcmVudCkgPyB0ZXh0IDogZGVjb2RlSFRNTENhY2hlZCh0ZXh0KTtcbiAgICAgICAgfSBlbHNlIGlmICghY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICAgICAgLy8gcmVtb3ZlIHRoZSB3aGl0ZXNwYWNlLW9ubHkgbm9kZSByaWdodCBhZnRlciBhbiBvcGVuaW5nIHRhZ1xuICAgICAgICAgIHRleHQgPSAnJztcbiAgICAgICAgfSBlbHNlIGlmICh3aGl0ZXNwYWNlT3B0aW9uKSB7XG4gICAgICAgICAgaWYgKHdoaXRlc3BhY2VPcHRpb24gPT09ICdjb25kZW5zZScpIHtcbiAgICAgICAgICAgIC8vIGluIGNvbmRlbnNlIG1vZGUsIHJlbW92ZSB0aGUgd2hpdGVzcGFjZSBub2RlIGlmIGl0IGNvbnRhaW5zXG4gICAgICAgICAgICAvLyBsaW5lIGJyZWFrLCBvdGhlcndpc2UgY29uZGVuc2UgdG8gYSBzaW5nbGUgc3BhY2VcbiAgICAgICAgICAgIHRleHQgPSBsaW5lQnJlYWtSRS50ZXN0KHRleHQpID8gJycgOiAnICc7XG4gICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgIHRleHQgPSAnICc7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHRleHQgPSBwcmVzZXJ2ZVdoaXRlc3BhY2UgPyAnICcgOiAnJztcbiAgICAgICAgfVxuICAgICAgICBpZiAodGV4dCkge1xuICAgICAgICAgIGlmICghaW5QcmUgJiYgd2hpdGVzcGFjZU9wdGlvbiA9PT0gJ2NvbmRlbnNlJykge1xuICAgICAgICAgICAgLy8gY29uZGVuc2UgY29uc2VjdXRpdmUgd2hpdGVzcGFjZXMgaW50byBzaW5nbGUgc3BhY2VcbiAgICAgICAgICAgIHRleHQgPSB0ZXh0LnJlcGxhY2Uod2hpdGVzcGFjZVJFJDEsICcgJyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHZhciByZXM7XG4gICAgICAgICAgdmFyIGNoaWxkO1xuICAgICAgICAgIGlmICghaW5WUHJlICYmIHRleHQgIT09ICcgJyAmJiAocmVzID0gcGFyc2VUZXh0KHRleHQsIGRlbGltaXRlcnMpKSkge1xuICAgICAgICAgICAgY2hpbGQgPSB7XG4gICAgICAgICAgICAgIHR5cGU6IDIsXG4gICAgICAgICAgICAgIGV4cHJlc3Npb246IHJlcy5leHByZXNzaW9uLFxuICAgICAgICAgICAgICB0b2tlbnM6IHJlcy50b2tlbnMsXG4gICAgICAgICAgICAgIHRleHQ6IHRleHRcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfSBlbHNlIGlmICh0ZXh0ICE9PSAnICcgfHwgIWNoaWxkcmVuLmxlbmd0aCB8fCBjaGlsZHJlbltjaGlsZHJlbi5sZW5ndGggLSAxXS50ZXh0ICE9PSAnICcpIHtcbiAgICAgICAgICAgIGNoaWxkID0ge1xuICAgICAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgICAgICB0ZXh0OiB0ZXh0XG4gICAgICAgICAgICB9O1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoY2hpbGQpIHtcbiAgICAgICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICAgIGNoaWxkLmVuZCA9IGVuZDtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGNoaWxkcmVuLnB1c2goY2hpbGQpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSxcbiAgICAgIGNvbW1lbnQ6IGZ1bmN0aW9uIGNvbW1lbnQgKHRleHQsIHN0YXJ0LCBlbmQpIHtcbiAgICAgICAgLy8gYWRkaW5nIGFueXRoaW5nIGFzIGEgc2libGluZyB0byB0aGUgcm9vdCBub2RlIGlzIGZvcmJpZGRlblxuICAgICAgICAvLyBjb21tZW50cyBzaG91bGQgc3RpbGwgYmUgYWxsb3dlZCwgYnV0IGlnbm9yZWRcbiAgICAgICAgaWYgKGN1cnJlbnRQYXJlbnQpIHtcbiAgICAgICAgICB2YXIgY2hpbGQgPSB7XG4gICAgICAgICAgICB0eXBlOiAzLFxuICAgICAgICAgICAgdGV4dDogdGV4dCxcbiAgICAgICAgICAgIGlzQ29tbWVudDogdHJ1ZVxuICAgICAgICAgIH07XG4gICAgICAgICAgaWYgKG9wdGlvbnMub3V0cHV0U291cmNlUmFuZ2UpIHtcbiAgICAgICAgICAgIGNoaWxkLnN0YXJ0ID0gc3RhcnQ7XG4gICAgICAgICAgICBjaGlsZC5lbmQgPSBlbmQ7XG4gICAgICAgICAgfVxuICAgICAgICAgIGN1cnJlbnRQYXJlbnQuY2hpbGRyZW4ucHVzaChjaGlsZCk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9KTtcbiAgICByZXR1cm4gcm9vdFxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc1ByZSAoZWwpIHtcbiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtcHJlJykgIT0gbnVsbCkge1xuICAgICAgZWwucHJlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzUmF3QXR0cnMgKGVsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgdmFyIGxlbiA9IGxpc3QubGVuZ3RoO1xuICAgIGlmIChsZW4pIHtcbiAgICAgIHZhciBhdHRycyA9IGVsLmF0dHJzID0gbmV3IEFycmF5KGxlbik7XG4gICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxlbjsgaSsrKSB7XG4gICAgICAgIGF0dHJzW2ldID0ge1xuICAgICAgICAgIG5hbWU6IGxpc3RbaV0ubmFtZSxcbiAgICAgICAgICB2YWx1ZTogSlNPTi5zdHJpbmdpZnkobGlzdFtpXS52YWx1ZSlcbiAgICAgICAgfTtcbiAgICAgICAgaWYgKGxpc3RbaV0uc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgIGF0dHJzW2ldLnN0YXJ0ID0gbGlzdFtpXS5zdGFydDtcbiAgICAgICAgICBhdHRyc1tpXS5lbmQgPSBsaXN0W2ldLmVuZDtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gZWxzZSBpZiAoIWVsLnByZSkge1xuICAgICAgLy8gbm9uIHJvb3Qgbm9kZSBpbiBwcmUgYmxvY2tzIHdpdGggbm8gYXR0cmlidXRlc1xuICAgICAgZWwucGxhaW4gPSB0cnVlO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NFbGVtZW50IChcbiAgICBlbGVtZW50LFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgcHJvY2Vzc0tleShlbGVtZW50KTtcblxuICAgIC8vIGRldGVybWluZSB3aGV0aGVyIHRoaXMgaXMgYSBwbGFpbiBlbGVtZW50IGFmdGVyXG4gICAgLy8gcmVtb3Zpbmcgc3RydWN0dXJhbCBhdHRyaWJ1dGVzXG4gICAgZWxlbWVudC5wbGFpbiA9IChcbiAgICAgICFlbGVtZW50LmtleSAmJlxuICAgICAgIWVsZW1lbnQuc2NvcGVkU2xvdHMgJiZcbiAgICAgICFlbGVtZW50LmF0dHJzTGlzdC5sZW5ndGhcbiAgICApO1xuXG4gICAgcHJvY2Vzc1JlZihlbGVtZW50KTtcbiAgICBwcm9jZXNzU2xvdENvbnRlbnQoZWxlbWVudCk7XG4gICAgcHJvY2Vzc1Nsb3RPdXRsZXQoZWxlbWVudCk7XG4gICAgcHJvY2Vzc0NvbXBvbmVudChlbGVtZW50KTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRyYW5zZm9ybXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGVsZW1lbnQgPSB0cmFuc2Zvcm1zW2ldKGVsZW1lbnQsIG9wdGlvbnMpIHx8IGVsZW1lbnQ7XG4gICAgfVxuICAgIHByb2Nlc3NBdHRycyhlbGVtZW50KTtcbiAgICByZXR1cm4gZWxlbWVudFxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0tleSAoZWwpIHtcbiAgICB2YXIgZXhwID0gZ2V0QmluZGluZ0F0dHIoZWwsICdrZXknKTtcbiAgICBpZiAoZXhwKSB7XG4gICAgICB7XG4gICAgICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICBcIjx0ZW1wbGF0ZT4gY2Fubm90IGJlIGtleWVkLiBQbGFjZSB0aGUga2V5IG9uIHJlYWwgZWxlbWVudHMgaW5zdGVhZC5cIixcbiAgICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JylcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICAgIGlmIChlbC5mb3IpIHtcbiAgICAgICAgICB2YXIgaXRlcmF0b3IgPSBlbC5pdGVyYXRvcjIgfHwgZWwuaXRlcmF0b3IxO1xuICAgICAgICAgIHZhciBwYXJlbnQgPSBlbC5wYXJlbnQ7XG4gICAgICAgICAgaWYgKGl0ZXJhdG9yICYmIGl0ZXJhdG9yID09PSBleHAgJiYgcGFyZW50ICYmIHBhcmVudC50YWcgPT09ICd0cmFuc2l0aW9uLWdyb3VwJykge1xuICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICBcIkRvIG5vdCB1c2Ugdi1mb3IgaW5kZXggYXMga2V5IG9uIDx0cmFuc2l0aW9uLWdyb3VwPiBjaGlsZHJlbiwgXCIgK1xuICAgICAgICAgICAgICBcInRoaXMgaXMgdGhlIHNhbWUgYXMgbm90IHVzaW5nIGtleXMuXCIsXG4gICAgICAgICAgICAgIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAna2V5JyksXG4gICAgICAgICAgICAgIHRydWUgLyogdGlwICovXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgZWwua2V5ID0gZXhwO1xuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIHByb2Nlc3NSZWYgKGVsKSB7XG4gICAgdmFyIHJlZiA9IGdldEJpbmRpbmdBdHRyKGVsLCAncmVmJyk7XG4gICAgaWYgKHJlZikge1xuICAgICAgZWwucmVmID0gcmVmO1xuICAgICAgZWwucmVmSW5Gb3IgPSBjaGVja0luRm9yKGVsKTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzRm9yIChlbCkge1xuICAgIHZhciBleHA7XG4gICAgaWYgKChleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1mb3InKSkpIHtcbiAgICAgIHZhciByZXMgPSBwYXJzZUZvcihleHApO1xuICAgICAgaWYgKHJlcykge1xuICAgICAgICBleHRlbmQoZWwsIHJlcyk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgKFwiSW52YWxpZCB2LWZvciBleHByZXNzaW9uOiBcIiArIGV4cCksXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3YtZm9yJ11cbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuXG5cbiAgZnVuY3Rpb24gcGFyc2VGb3IgKGV4cCkge1xuICAgIHZhciBpbk1hdGNoID0gZXhwLm1hdGNoKGZvckFsaWFzUkUpO1xuICAgIGlmICghaW5NYXRjaCkgeyByZXR1cm4gfVxuICAgIHZhciByZXMgPSB7fTtcbiAgICByZXMuZm9yID0gaW5NYXRjaFsyXS50cmltKCk7XG4gICAgdmFyIGFsaWFzID0gaW5NYXRjaFsxXS50cmltKCkucmVwbGFjZShzdHJpcFBhcmVuc1JFLCAnJyk7XG4gICAgdmFyIGl0ZXJhdG9yTWF0Y2ggPSBhbGlhcy5tYXRjaChmb3JJdGVyYXRvclJFKTtcbiAgICBpZiAoaXRlcmF0b3JNYXRjaCkge1xuICAgICAgcmVzLmFsaWFzID0gYWxpYXMucmVwbGFjZShmb3JJdGVyYXRvclJFLCAnJykudHJpbSgpO1xuICAgICAgcmVzLml0ZXJhdG9yMSA9IGl0ZXJhdG9yTWF0Y2hbMV0udHJpbSgpO1xuICAgICAgaWYgKGl0ZXJhdG9yTWF0Y2hbMl0pIHtcbiAgICAgICAgcmVzLml0ZXJhdG9yMiA9IGl0ZXJhdG9yTWF0Y2hbMl0udHJpbSgpO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICByZXMuYWxpYXMgPSBhbGlhcztcbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0lmIChlbCkge1xuICAgIHZhciBleHAgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicpO1xuICAgIGlmIChleHApIHtcbiAgICAgIGVsLmlmID0gZXhwO1xuICAgICAgYWRkSWZDb25kaXRpb24oZWwsIHtcbiAgICAgICAgZXhwOiBleHAsXG4gICAgICAgIGJsb2NrOiBlbFxuICAgICAgfSk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGlmIChnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlJykgIT0gbnVsbCkge1xuICAgICAgICBlbC5lbHNlID0gdHJ1ZTtcbiAgICAgIH1cbiAgICAgIHZhciBlbHNlaWYgPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJyk7XG4gICAgICBpZiAoZWxzZWlmKSB7XG4gICAgICAgIGVsLmVsc2VpZiA9IGVsc2VpZjtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzSWZDb25kaXRpb25zIChlbCwgcGFyZW50KSB7XG4gICAgdmFyIHByZXYgPSBmaW5kUHJldkVsZW1lbnQocGFyZW50LmNoaWxkcmVuKTtcbiAgICBpZiAocHJldiAmJiBwcmV2LmlmKSB7XG4gICAgICBhZGRJZkNvbmRpdGlvbihwcmV2LCB7XG4gICAgICAgIGV4cDogZWwuZWxzZWlmLFxuICAgICAgICBibG9jazogZWxcbiAgICAgIH0pO1xuICAgIH0gZWxzZSB7XG4gICAgICB3YXJuJDIoXG4gICAgICAgIFwidi1cIiArIChlbC5lbHNlaWYgPyAoJ2Vsc2UtaWY9XCInICsgZWwuZWxzZWlmICsgJ1wiJykgOiAnZWxzZScpICsgXCIgXCIgK1xuICAgICAgICBcInVzZWQgb24gZWxlbWVudCA8XCIgKyAoZWwudGFnKSArIFwiPiB3aXRob3V0IGNvcnJlc3BvbmRpbmcgdi1pZi5cIixcbiAgICAgICAgZWwucmF3QXR0cnNNYXBbZWwuZWxzZWlmID8gJ3YtZWxzZS1pZicgOiAndi1lbHNlJ11cbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZmluZFByZXZFbGVtZW50IChjaGlsZHJlbikge1xuICAgIHZhciBpID0gY2hpbGRyZW4ubGVuZ3RoO1xuICAgIHdoaWxlIChpLS0pIHtcbiAgICAgIGlmIChjaGlsZHJlbltpXS50eXBlID09PSAxKSB7XG4gICAgICAgIHJldHVybiBjaGlsZHJlbltpXVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgaWYgKGNoaWxkcmVuW2ldLnRleHQgIT09ICcgJykge1xuICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgIFwidGV4dCBcXFwiXCIgKyAoY2hpbGRyZW5baV0udGV4dC50cmltKCkpICsgXCJcXFwiIGJldHdlZW4gdi1pZiBhbmQgdi1lbHNlKC1pZikgXCIgK1xuICAgICAgICAgICAgXCJ3aWxsIGJlIGlnbm9yZWQuXCIsXG4gICAgICAgICAgICBjaGlsZHJlbltpXVxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgICAgY2hpbGRyZW4ucG9wKCk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gYWRkSWZDb25kaXRpb24gKGVsLCBjb25kaXRpb24pIHtcbiAgICBpZiAoIWVsLmlmQ29uZGl0aW9ucykge1xuICAgICAgZWwuaWZDb25kaXRpb25zID0gW107XG4gICAgfVxuICAgIGVsLmlmQ29uZGl0aW9ucy5wdXNoKGNvbmRpdGlvbik7XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzT25jZSAoZWwpIHtcbiAgICB2YXIgb25jZSQkMSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICd2LW9uY2UnKTtcbiAgICBpZiAob25jZSQkMSAhPSBudWxsKSB7XG4gICAgICBlbC5vbmNlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICAvLyBoYW5kbGUgY29udGVudCBiZWluZyBwYXNzZWQgdG8gYSBjb21wb25lbnQgYXMgc2xvdCxcbiAgLy8gZS5nLiA8dGVtcGxhdGUgc2xvdD1cInh4eFwiPiwgPGRpdiBzbG90LXNjb3BlPVwieHh4XCI+XG4gIGZ1bmN0aW9uIHByb2Nlc3NTbG90Q29udGVudCAoZWwpIHtcbiAgICB2YXIgc2xvdFNjb3BlO1xuICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgIHNsb3RTY29wZSA9IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzY29wZScpO1xuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICBpZiAoc2xvdFNjb3BlKSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcInRoZSBcXFwic2NvcGVcXFwiIGF0dHJpYnV0ZSBmb3Igc2NvcGVkIHNsb3RzIGhhdmUgYmVlbiBkZXByZWNhdGVkIGFuZCBcIiArXG4gICAgICAgICAgXCJyZXBsYWNlZCBieSBcXFwic2xvdC1zY29wZVxcXCIgc2luY2UgMi41LiBUaGUgbmV3IFxcXCJzbG90LXNjb3BlXFxcIiBhdHRyaWJ1dGUgXCIgK1xuICAgICAgICAgIFwiY2FuIGFsc28gYmUgdXNlZCBvbiBwbGFpbiBlbGVtZW50cyBpbiBhZGRpdGlvbiB0byA8dGVtcGxhdGU+IHRvIFwiICtcbiAgICAgICAgICBcImRlbm90ZSBzY29wZWQgc2xvdHMuXCIsXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Njb3BlJ10sXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlIHx8IGdldEFuZFJlbW92ZUF0dHIoZWwsICdzbG90LXNjb3BlJyk7XG4gICAgfSBlbHNlIGlmICgoc2xvdFNjb3BlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3Nsb3Qtc2NvcGUnKSkpIHtcbiAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgaWYgKGVsLmF0dHJzTWFwWyd2LWZvciddKSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcIkFtYmlndW91cyBjb21iaW5lZCB1c2FnZSBvZiBzbG90LXNjb3BlIGFuZCB2LWZvciBvbiA8XCIgKyAoZWwudGFnKSArIFwiPiBcIiArXG4gICAgICAgICAgXCIodi1mb3IgdGFrZXMgaGlnaGVyIHByaW9yaXR5KS4gVXNlIGEgd3JhcHBlciA8dGVtcGxhdGU+IGZvciB0aGUgXCIgK1xuICAgICAgICAgIFwic2NvcGVkIHNsb3QgdG8gbWFrZSBpdCBjbGVhcmVyLlwiLFxuICAgICAgICAgIGVsLnJhd0F0dHJzTWFwWydzbG90LXNjb3BlJ10sXG4gICAgICAgICAgdHJ1ZVxuICAgICAgICApO1xuICAgICAgfVxuICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdFNjb3BlO1xuICAgIH1cblxuICAgIC8vIHNsb3Q9XCJ4eHhcIlxuICAgIHZhciBzbG90VGFyZ2V0ID0gZ2V0QmluZGluZ0F0dHIoZWwsICdzbG90Jyk7XG4gICAgaWYgKHNsb3RUYXJnZXQpIHtcbiAgICAgIGVsLnNsb3RUYXJnZXQgPSBzbG90VGFyZ2V0ID09PSAnXCJcIicgPyAnXCJkZWZhdWx0XCInIDogc2xvdFRhcmdldDtcbiAgICAgIGVsLnNsb3RUYXJnZXREeW5hbWljID0gISEoZWwuYXR0cnNNYXBbJzpzbG90J10gfHwgZWwuYXR0cnNNYXBbJ3YtYmluZDpzbG90J10pO1xuICAgICAgLy8gcHJlc2VydmUgc2xvdCBhcyBhbiBhdHRyaWJ1dGUgZm9yIG5hdGl2ZSBzaGFkb3cgRE9NIGNvbXBhdFxuICAgICAgLy8gb25seSBmb3Igbm9uLXNjb3BlZCBzbG90cy5cbiAgICAgIGlmIChlbC50YWcgIT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RTY29wZSkge1xuICAgICAgICBhZGRBdHRyKGVsLCAnc2xvdCcsIHNsb3RUYXJnZXQsIGdldFJhd0JpbmRpbmdBdHRyKGVsLCAnc2xvdCcpKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyAyLjYgdi1zbG90IHN5bnRheFxuICAgIHtcbiAgICAgIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgLy8gdi1zbG90IG9uIDx0ZW1wbGF0ZT5cbiAgICAgICAgdmFyIHNsb3RCaW5kaW5nID0gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgoZWwsIHNsb3RSRSk7XG4gICAgICAgIGlmIChzbG90QmluZGluZykge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIGlmIChlbC5zbG90VGFyZ2V0IHx8IGVsLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgICAgXCJVbmV4cGVjdGVkIG1peGVkIHVzYWdlIG9mIGRpZmZlcmVudCBzbG90IHN5bnRheGVzLlwiLFxuICAgICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWwucGFyZW50ICYmICFtYXliZUNvbXBvbmVudChlbC5wYXJlbnQpKSB7XG4gICAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgICBcIjx0ZW1wbGF0ZSB2LXNsb3Q+IGNhbiBvbmx5IGFwcGVhciBhdCB0aGUgcm9vdCBsZXZlbCBpbnNpZGUgXCIgK1xuICAgICAgICAgICAgICAgIFwidGhlIHJlY2VpdmluZyBjb21wb25lbnRcIixcbiAgICAgICAgICAgICAgICBlbFxuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICB2YXIgcmVmID0gZ2V0U2xvdE5hbWUoc2xvdEJpbmRpbmcpO1xuICAgICAgICAgIHZhciBuYW1lID0gcmVmLm5hbWU7XG4gICAgICAgICAgdmFyIGR5bmFtaWMgPSByZWYuZHluYW1pYztcbiAgICAgICAgICBlbC5zbG90VGFyZ2V0ID0gbmFtZTtcbiAgICAgICAgICBlbC5zbG90VGFyZ2V0RHluYW1pYyA9IGR5bmFtaWM7XG4gICAgICAgICAgZWwuc2xvdFNjb3BlID0gc2xvdEJpbmRpbmcudmFsdWUgfHwgZW1wdHlTbG90U2NvcGVUb2tlbjsgLy8gZm9yY2UgaXQgaW50byBhIHNjb3BlZCBzbG90IGZvciBwZXJmXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIC8vIHYtc2xvdCBvbiBjb21wb25lbnQsIGRlbm90ZXMgZGVmYXVsdCBzbG90XG4gICAgICAgIHZhciBzbG90QmluZGluZyQxID0gZ2V0QW5kUmVtb3ZlQXR0ckJ5UmVnZXgoZWwsIHNsb3RSRSk7XG4gICAgICAgIGlmIChzbG90QmluZGluZyQxKSB7XG4gICAgICAgICAge1xuICAgICAgICAgICAgaWYgKCFtYXliZUNvbXBvbmVudChlbCkpIHtcbiAgICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICAgIFwidi1zbG90IGNhbiBvbmx5IGJlIHVzZWQgb24gY29tcG9uZW50cyBvciA8dGVtcGxhdGU+LlwiLFxuICAgICAgICAgICAgICAgIHNsb3RCaW5kaW5nJDFcbiAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChlbC5zbG90U2NvcGUgfHwgZWwuc2xvdFRhcmdldCkge1xuICAgICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgICAgXCJVbmV4cGVjdGVkIG1peGVkIHVzYWdlIG9mIGRpZmZlcmVudCBzbG90IHN5bnRheGVzLlwiLFxuICAgICAgICAgICAgICAgIGVsXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICAgICAgICAgICAgd2FybiQyKFxuICAgICAgICAgICAgICAgIFwiVG8gYXZvaWQgc2NvcGUgYW1iaWd1aXR5LCB0aGUgZGVmYXVsdCBzbG90IHNob3VsZCBhbHNvIHVzZSBcIiArXG4gICAgICAgICAgICAgICAgXCI8dGVtcGxhdGU+IHN5bnRheCB3aGVuIHRoZXJlIGFyZSBvdGhlciBuYW1lZCBzbG90cy5cIixcbiAgICAgICAgICAgICAgICBzbG90QmluZGluZyQxXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIGFkZCB0aGUgY29tcG9uZW50J3MgY2hpbGRyZW4gdG8gaXRzIGRlZmF1bHQgc2xvdFxuICAgICAgICAgIHZhciBzbG90cyA9IGVsLnNjb3BlZFNsb3RzIHx8IChlbC5zY29wZWRTbG90cyA9IHt9KTtcbiAgICAgICAgICB2YXIgcmVmJDEgPSBnZXRTbG90TmFtZShzbG90QmluZGluZyQxKTtcbiAgICAgICAgICB2YXIgbmFtZSQxID0gcmVmJDEubmFtZTtcbiAgICAgICAgICB2YXIgZHluYW1pYyQxID0gcmVmJDEuZHluYW1pYztcbiAgICAgICAgICB2YXIgc2xvdENvbnRhaW5lciA9IHNsb3RzW25hbWUkMV0gPSBjcmVhdGVBU1RFbGVtZW50KCd0ZW1wbGF0ZScsIFtdLCBlbCk7XG4gICAgICAgICAgc2xvdENvbnRhaW5lci5zbG90VGFyZ2V0ID0gbmFtZSQxO1xuICAgICAgICAgIHNsb3RDb250YWluZXIuc2xvdFRhcmdldER5bmFtaWMgPSBkeW5hbWljJDE7XG4gICAgICAgICAgc2xvdENvbnRhaW5lci5jaGlsZHJlbiA9IGVsLmNoaWxkcmVuLmZpbHRlcihmdW5jdGlvbiAoYykge1xuICAgICAgICAgICAgaWYgKCFjLnNsb3RTY29wZSkge1xuICAgICAgICAgICAgICBjLnBhcmVudCA9IHNsb3RDb250YWluZXI7XG4gICAgICAgICAgICAgIHJldHVybiB0cnVlXG4gICAgICAgICAgICB9XG4gICAgICAgICAgfSk7XG4gICAgICAgICAgc2xvdENvbnRhaW5lci5zbG90U2NvcGUgPSBzbG90QmluZGluZyQxLnZhbHVlIHx8IGVtcHR5U2xvdFNjb3BlVG9rZW47XG4gICAgICAgICAgLy8gcmVtb3ZlIGNoaWxkcmVuIGFzIHRoZXkgYXJlIHJldHVybmVkIGZyb20gc2NvcGVkU2xvdHMgbm93XG4gICAgICAgICAgZWwuY2hpbGRyZW4gPSBbXTtcbiAgICAgICAgICAvLyBtYXJrIGVsIG5vbi1wbGFpbiBzbyBkYXRhIGdldHMgZ2VuZXJhdGVkXG4gICAgICAgICAgZWwucGxhaW4gPSBmYWxzZTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdldFNsb3ROYW1lIChiaW5kaW5nKSB7XG4gICAgdmFyIG5hbWUgPSBiaW5kaW5nLm5hbWUucmVwbGFjZShzbG90UkUsICcnKTtcbiAgICBpZiAoIW5hbWUpIHtcbiAgICAgIGlmIChiaW5kaW5nLm5hbWVbMF0gIT09ICcjJykge1xuICAgICAgICBuYW1lID0gJ2RlZmF1bHQnO1xuICAgICAgfSBlbHNlIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIFwidi1zbG90IHNob3J0aGFuZCBzeW50YXggcmVxdWlyZXMgYSBzbG90IG5hbWUuXCIsXG4gICAgICAgICAgYmluZGluZ1xuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSlcbiAgICAgIC8vIGR5bmFtaWMgW25hbWVdXG4gICAgICA/IHsgbmFtZTogbmFtZS5zbGljZSgxLCAtMSksIGR5bmFtaWM6IHRydWUgfVxuICAgICAgLy8gc3RhdGljIG5hbWVcbiAgICAgIDogeyBuYW1lOiAoXCJcXFwiXCIgKyBuYW1lICsgXCJcXFwiXCIpLCBkeW5hbWljOiBmYWxzZSB9XG4gIH1cblxuICAvLyBoYW5kbGUgPHNsb3QvPiBvdXRsZXRzXG4gIGZ1bmN0aW9uIHByb2Nlc3NTbG90T3V0bGV0IChlbCkge1xuICAgIGlmIChlbC50YWcgPT09ICdzbG90Jykge1xuICAgICAgZWwuc2xvdE5hbWUgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ25hbWUnKTtcbiAgICAgIGlmIChlbC5rZXkpIHtcbiAgICAgICAgd2FybiQyKFxuICAgICAgICAgIFwiYGtleWAgZG9lcyBub3Qgd29yayBvbiA8c2xvdD4gYmVjYXVzZSBzbG90cyBhcmUgYWJzdHJhY3Qgb3V0bGV0cyBcIiArXG4gICAgICAgICAgXCJhbmQgY2FuIHBvc3NpYmx5IGV4cGFuZCBpbnRvIG11bHRpcGxlIGVsZW1lbnRzLiBcIiArXG4gICAgICAgICAgXCJVc2UgdGhlIGtleSBvbiBhIHdyYXBwaW5nIGVsZW1lbnQgaW5zdGVhZC5cIixcbiAgICAgICAgICBnZXRSYXdCaW5kaW5nQXR0cihlbCwgJ2tleScpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gcHJvY2Vzc0NvbXBvbmVudCAoZWwpIHtcbiAgICB2YXIgYmluZGluZztcbiAgICBpZiAoKGJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ2lzJykpKSB7XG4gICAgICBlbC5jb21wb25lbnQgPSBiaW5kaW5nO1xuICAgIH1cbiAgICBpZiAoZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ2lubGluZS10ZW1wbGF0ZScpICE9IG51bGwpIHtcbiAgICAgIGVsLmlubGluZVRlbXBsYXRlID0gdHJ1ZTtcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBwcm9jZXNzQXR0cnMgKGVsKSB7XG4gICAgdmFyIGxpc3QgPSBlbC5hdHRyc0xpc3Q7XG4gICAgdmFyIGksIGwsIG5hbWUsIHJhd05hbWUsIHZhbHVlLCBtb2RpZmllcnMsIHN5bmNHZW4sIGlzRHluYW1pYztcbiAgICBmb3IgKGkgPSAwLCBsID0gbGlzdC5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIG5hbWUgPSByYXdOYW1lID0gbGlzdFtpXS5uYW1lO1xuICAgICAgdmFsdWUgPSBsaXN0W2ldLnZhbHVlO1xuICAgICAgaWYgKGRpclJFLnRlc3QobmFtZSkpIHtcbiAgICAgICAgLy8gbWFyayBlbGVtZW50IGFzIGR5bmFtaWNcbiAgICAgICAgZWwuaGFzQmluZGluZ3MgPSB0cnVlO1xuICAgICAgICAvLyBtb2RpZmllcnNcbiAgICAgICAgbW9kaWZpZXJzID0gcGFyc2VNb2RpZmllcnMobmFtZS5yZXBsYWNlKGRpclJFLCAnJykpO1xuICAgICAgICAvLyBzdXBwb3J0IC5mb28gc2hvcnRoYW5kIHN5bnRheCBmb3IgdGhlIC5wcm9wIG1vZGlmaWVyXG4gICAgICAgIGlmIChtb2RpZmllcnMpIHtcbiAgICAgICAgICBuYW1lID0gbmFtZS5yZXBsYWNlKG1vZGlmaWVyUkUsICcnKTtcbiAgICAgICAgfVxuICAgICAgICBpZiAoYmluZFJFLnRlc3QobmFtZSkpIHsgLy8gdi1iaW5kXG4gICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShiaW5kUkUsICcnKTtcbiAgICAgICAgICB2YWx1ZSA9IHBhcnNlRmlsdGVycyh2YWx1ZSk7XG4gICAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoXG4gICAgICAgICAgICB2YWx1ZS50cmltKCkubGVuZ3RoID09PSAwXG4gICAgICAgICAgKSB7XG4gICAgICAgICAgICB3YXJuJDIoXG4gICAgICAgICAgICAgIChcIlRoZSB2YWx1ZSBmb3IgYSB2LWJpbmQgZXhwcmVzc2lvbiBjYW5ub3QgYmUgZW1wdHkuIEZvdW5kIGluIFxcXCJ2LWJpbmQ6XCIgKyBuYW1lICsgXCJcXFwiXCIpXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAobW9kaWZpZXJzKSB7XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzLnByb3AgJiYgIWlzRHluYW1pYykge1xuICAgICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgICAgIGlmIChuYW1lID09PSAnaW5uZXJIdG1sJykgeyBuYW1lID0gJ2lubmVySFRNTCc7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGlmIChtb2RpZmllcnMuY2FtZWwgJiYgIWlzRHluYW1pYykge1xuICAgICAgICAgICAgICBuYW1lID0gY2FtZWxpemUobmFtZSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobW9kaWZpZXJzLnN5bmMpIHtcbiAgICAgICAgICAgICAgc3luY0dlbiA9IGdlbkFzc2lnbm1lbnRDb2RlKHZhbHVlLCBcIiRldmVudFwiKTtcbiAgICAgICAgICAgICAgaWYgKCFpc0R5bmFtaWMpIHtcbiAgICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgICAoXCJ1cGRhdGU6XCIgKyAoY2FtZWxpemUobmFtZSkpKSxcbiAgICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICB3YXJuJDIsXG4gICAgICAgICAgICAgICAgICBsaXN0W2ldXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICBpZiAoaHlwaGVuYXRlKG5hbWUpICE9PSBjYW1lbGl6ZShuYW1lKSkge1xuICAgICAgICAgICAgICAgICAgYWRkSGFuZGxlcihcbiAgICAgICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgICAgIChcInVwZGF0ZTpcIiArIChoeXBoZW5hdGUobmFtZSkpKSxcbiAgICAgICAgICAgICAgICAgICAgc3luY0dlbixcbiAgICAgICAgICAgICAgICAgICAgbnVsbCxcbiAgICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICAgIHdhcm4kMixcbiAgICAgICAgICAgICAgICAgICAgbGlzdFtpXVxuICAgICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgICAgLy8gaGFuZGxlciB3LyBkeW5hbWljIGV2ZW50IG5hbWVcbiAgICAgICAgICAgICAgICBhZGRIYW5kbGVyKFxuICAgICAgICAgICAgICAgICAgZWwsXG4gICAgICAgICAgICAgICAgICAoXCJcXFwidXBkYXRlOlxcXCIrKFwiICsgbmFtZSArIFwiKVwiKSxcbiAgICAgICAgICAgICAgICAgIHN5bmNHZW4sXG4gICAgICAgICAgICAgICAgICBudWxsLFxuICAgICAgICAgICAgICAgICAgZmFsc2UsXG4gICAgICAgICAgICAgICAgICB3YXJuJDIsXG4gICAgICAgICAgICAgICAgICBsaXN0W2ldLFxuICAgICAgICAgICAgICAgICAgdHJ1ZSAvLyBkeW5hbWljXG4gICAgICAgICAgICAgICAgKTtcbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAoKG1vZGlmaWVycyAmJiBtb2RpZmllcnMucHJvcCkgfHwgKFxuICAgICAgICAgICAgIWVsLmNvbXBvbmVudCAmJiBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSlcbiAgICAgICAgICApKSB7XG4gICAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCB2YWx1ZSwgbGlzdFtpXSwgaXNEeW5hbWljKTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgYWRkQXR0cihlbCwgbmFtZSwgdmFsdWUsIGxpc3RbaV0sIGlzRHluYW1pYyk7XG4gICAgICAgICAgfVxuICAgICAgICB9IGVsc2UgaWYgKG9uUkUudGVzdChuYW1lKSkgeyAvLyB2LW9uXG4gICAgICAgICAgbmFtZSA9IG5hbWUucmVwbGFjZShvblJFLCAnJyk7XG4gICAgICAgICAgaXNEeW5hbWljID0gZHluYW1pY0FyZ1JFLnRlc3QobmFtZSk7XG4gICAgICAgICAgaWYgKGlzRHluYW1pYykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMSwgLTEpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBhZGRIYW5kbGVyKGVsLCBuYW1lLCB2YWx1ZSwgbW9kaWZpZXJzLCBmYWxzZSwgd2FybiQyLCBsaXN0W2ldLCBpc0R5bmFtaWMpO1xuICAgICAgICB9IGVsc2UgeyAvLyBub3JtYWwgZGlyZWN0aXZlc1xuICAgICAgICAgIG5hbWUgPSBuYW1lLnJlcGxhY2UoZGlyUkUsICcnKTtcbiAgICAgICAgICAvLyBwYXJzZSBhcmdcbiAgICAgICAgICB2YXIgYXJnTWF0Y2ggPSBuYW1lLm1hdGNoKGFyZ1JFKTtcbiAgICAgICAgICB2YXIgYXJnID0gYXJnTWF0Y2ggJiYgYXJnTWF0Y2hbMV07XG4gICAgICAgICAgaXNEeW5hbWljID0gZmFsc2U7XG4gICAgICAgICAgaWYgKGFyZykge1xuICAgICAgICAgICAgbmFtZSA9IG5hbWUuc2xpY2UoMCwgLShhcmcubGVuZ3RoICsgMSkpO1xuICAgICAgICAgICAgaWYgKGR5bmFtaWNBcmdSRS50ZXN0KGFyZykpIHtcbiAgICAgICAgICAgICAgYXJnID0gYXJnLnNsaWNlKDEsIC0xKTtcbiAgICAgICAgICAgICAgaXNEeW5hbWljID0gdHJ1ZTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICB9XG4gICAgICAgICAgYWRkRGlyZWN0aXZlKGVsLCBuYW1lLCByYXdOYW1lLCB2YWx1ZSwgYXJnLCBpc0R5bmFtaWMsIG1vZGlmaWVycywgbGlzdFtpXSk7XG4gICAgICAgICAgaWYgKG5hbWUgPT09ICdtb2RlbCcpIHtcbiAgICAgICAgICAgIGNoZWNrRm9yQWxpYXNNb2RlbChlbCwgdmFsdWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBlbHNlIHtcbiAgICAgICAgLy8gbGl0ZXJhbCBhdHRyaWJ1dGVcbiAgICAgICAge1xuICAgICAgICAgIHZhciByZXMgPSBwYXJzZVRleHQodmFsdWUsIGRlbGltaXRlcnMpO1xuICAgICAgICAgIGlmIChyZXMpIHtcbiAgICAgICAgICAgIHdhcm4kMihcbiAgICAgICAgICAgICAgbmFtZSArIFwiPVxcXCJcIiArIHZhbHVlICsgXCJcXFwiOiBcIiArXG4gICAgICAgICAgICAgICdJbnRlcnBvbGF0aW9uIGluc2lkZSBhdHRyaWJ1dGVzIGhhcyBiZWVuIHJlbW92ZWQuICcgK1xuICAgICAgICAgICAgICAnVXNlIHYtYmluZCBvciB0aGUgY29sb24gc2hvcnRoYW5kIGluc3RlYWQuIEZvciBleGFtcGxlLCAnICtcbiAgICAgICAgICAgICAgJ2luc3RlYWQgb2YgPGRpdiBpZD1cInt7IHZhbCB9fVwiPiwgdXNlIDxkaXYgOmlkPVwidmFsXCI+LicsXG4gICAgICAgICAgICAgIGxpc3RbaV1cbiAgICAgICAgICAgICk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGFkZEF0dHIoZWwsIG5hbWUsIEpTT04uc3RyaW5naWZ5KHZhbHVlKSwgbGlzdFtpXSk7XG4gICAgICAgIC8vICM2ODg3IGZpcmVmb3ggZG9lc24ndCB1cGRhdGUgbXV0ZWQgc3RhdGUgaWYgc2V0IHZpYSBhdHRyaWJ1dGVcbiAgICAgICAgLy8gZXZlbiBpbW1lZGlhdGVseSBhZnRlciBlbGVtZW50IGNyZWF0aW9uXG4gICAgICAgIGlmICghZWwuY29tcG9uZW50ICYmXG4gICAgICAgICAgICBuYW1lID09PSAnbXV0ZWQnICYmXG4gICAgICAgICAgICBwbGF0Zm9ybU11c3RVc2VQcm9wKGVsLnRhZywgZWwuYXR0cnNNYXAudHlwZSwgbmFtZSkpIHtcbiAgICAgICAgICBhZGRQcm9wKGVsLCBuYW1lLCAndHJ1ZScsIGxpc3RbaV0pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tJbkZvciAoZWwpIHtcbiAgICB2YXIgcGFyZW50ID0gZWw7XG4gICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgaWYgKHBhcmVudC5mb3IgIT09IHVuZGVmaW5lZCkge1xuICAgICAgICByZXR1cm4gdHJ1ZVxuICAgICAgfVxuICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBmdW5jdGlvbiBwYXJzZU1vZGlmaWVycyAobmFtZSkge1xuICAgIHZhciBtYXRjaCA9IG5hbWUubWF0Y2gobW9kaWZpZXJSRSk7XG4gICAgaWYgKG1hdGNoKSB7XG4gICAgICB2YXIgcmV0ID0ge307XG4gICAgICBtYXRjaC5mb3JFYWNoKGZ1bmN0aW9uIChtKSB7IHJldFttLnNsaWNlKDEpXSA9IHRydWU7IH0pO1xuICAgICAgcmV0dXJuIHJldFxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIG1ha2VBdHRyc01hcCAoYXR0cnMpIHtcbiAgICB2YXIgbWFwID0ge307XG4gICAgZm9yICh2YXIgaSA9IDAsIGwgPSBhdHRycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGlmIChcbiAgICAgICAgbWFwW2F0dHJzW2ldLm5hbWVdICYmICFpc0lFICYmICFpc0VkZ2VcbiAgICAgICkge1xuICAgICAgICB3YXJuJDIoJ2R1cGxpY2F0ZSBhdHRyaWJ1dGU6ICcgKyBhdHRyc1tpXS5uYW1lLCBhdHRyc1tpXSk7XG4gICAgICB9XG4gICAgICBtYXBbYXR0cnNbaV0ubmFtZV0gPSBhdHRyc1tpXS52YWx1ZTtcbiAgICB9XG4gICAgcmV0dXJuIG1hcFxuICB9XG5cbiAgLy8gZm9yIHNjcmlwdCAoZS5nLiB0eXBlPVwieC90ZW1wbGF0ZVwiKSBvciBzdHlsZSwgZG8gbm90IGRlY29kZSBjb250ZW50XG4gIGZ1bmN0aW9uIGlzVGV4dFRhZyAoZWwpIHtcbiAgICByZXR1cm4gZWwudGFnID09PSAnc2NyaXB0JyB8fCBlbC50YWcgPT09ICdzdHlsZSdcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRm9yYmlkZGVuVGFnIChlbCkge1xuICAgIHJldHVybiAoXG4gICAgICBlbC50YWcgPT09ICdzdHlsZScgfHxcbiAgICAgIChlbC50YWcgPT09ICdzY3JpcHQnICYmIChcbiAgICAgICAgIWVsLmF0dHJzTWFwLnR5cGUgfHxcbiAgICAgICAgZWwuYXR0cnNNYXAudHlwZSA9PT0gJ3RleHQvamF2YXNjcmlwdCdcbiAgICAgICkpXG4gICAgKVxuICB9XG5cbiAgdmFyIGllTlNCdWcgPSAvXnhtbG5zOk5TXFxkKy87XG4gIHZhciBpZU5TUHJlZml4ID0gL15OU1xcZCs6LztcblxuICAvKiBpc3RhbmJ1bCBpZ25vcmUgbmV4dCAqL1xuICBmdW5jdGlvbiBndWFyZElFU1ZHQnVnIChhdHRycykge1xuICAgIHZhciByZXMgPSBbXTtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IGF0dHJzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgYXR0ciA9IGF0dHJzW2ldO1xuICAgICAgaWYgKCFpZU5TQnVnLnRlc3QoYXR0ci5uYW1lKSkge1xuICAgICAgICBhdHRyLm5hbWUgPSBhdHRyLm5hbWUucmVwbGFjZShpZU5TUHJlZml4LCAnJyk7XG4gICAgICAgIHJlcy5wdXNoKGF0dHIpO1xuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcmVzXG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0ZvckFsaWFzTW9kZWwgKGVsLCB2YWx1ZSkge1xuICAgIHZhciBfZWwgPSBlbDtcbiAgICB3aGlsZSAoX2VsKSB7XG4gICAgICBpZiAoX2VsLmZvciAmJiBfZWwuYWxpYXMgPT09IHZhbHVlKSB7XG4gICAgICAgIHdhcm4kMihcbiAgICAgICAgICBcIjxcIiArIChlbC50YWcpICsgXCIgdi1tb2RlbD1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIj46IFwiICtcbiAgICAgICAgICBcIllvdSBhcmUgYmluZGluZyB2LW1vZGVsIGRpcmVjdGx5IHRvIGEgdi1mb3IgaXRlcmF0aW9uIGFsaWFzLiBcIiArXG4gICAgICAgICAgXCJUaGlzIHdpbGwgbm90IGJlIGFibGUgdG8gbW9kaWZ5IHRoZSB2LWZvciBzb3VyY2UgYXJyYXkgYmVjYXVzZSBcIiArXG4gICAgICAgICAgXCJ3cml0aW5nIHRvIHRoZSBhbGlhcyBpcyBsaWtlIG1vZGlmeWluZyBhIGZ1bmN0aW9uIGxvY2FsIHZhcmlhYmxlLiBcIiArXG4gICAgICAgICAgXCJDb25zaWRlciB1c2luZyBhbiBhcnJheSBvZiBvYmplY3RzIGFuZCB1c2Ugdi1tb2RlbCBvbiBhbiBvYmplY3QgcHJvcGVydHkgaW5zdGVhZC5cIixcbiAgICAgICAgICBlbC5yYXdBdHRyc01hcFsndi1tb2RlbCddXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgICBfZWwgPSBfZWwucGFyZW50O1xuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIHByZVRyYW5zZm9ybU5vZGUgKGVsLCBvcHRpb25zKSB7XG4gICAgaWYgKGVsLnRhZyA9PT0gJ2lucHV0Jykge1xuICAgICAgdmFyIG1hcCA9IGVsLmF0dHJzTWFwO1xuICAgICAgaWYgKCFtYXBbJ3YtbW9kZWwnXSkge1xuICAgICAgICByZXR1cm5cbiAgICAgIH1cblxuICAgICAgdmFyIHR5cGVCaW5kaW5nO1xuICAgICAgaWYgKG1hcFsnOnR5cGUnXSB8fCBtYXBbJ3YtYmluZDp0eXBlJ10pIHtcbiAgICAgICAgdHlwZUJpbmRpbmcgPSBnZXRCaW5kaW5nQXR0cihlbCwgJ3R5cGUnKTtcbiAgICAgIH1cbiAgICAgIGlmICghbWFwLnR5cGUgJiYgIXR5cGVCaW5kaW5nICYmIG1hcFsndi1iaW5kJ10pIHtcbiAgICAgICAgdHlwZUJpbmRpbmcgPSBcIihcIiArIChtYXBbJ3YtYmluZCddKSArIFwiKS50eXBlXCI7XG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlQmluZGluZykge1xuICAgICAgICB2YXIgaWZDb25kaXRpb24gPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1pZicsIHRydWUpO1xuICAgICAgICB2YXIgaWZDb25kaXRpb25FeHRyYSA9IGlmQ29uZGl0aW9uID8gKFwiJiYoXCIgKyBpZkNvbmRpdGlvbiArIFwiKVwiKSA6IFwiXCI7XG4gICAgICAgIHZhciBoYXNFbHNlID0gZ2V0QW5kUmVtb3ZlQXR0cihlbCwgJ3YtZWxzZScsIHRydWUpICE9IG51bGw7XG4gICAgICAgIHZhciBlbHNlSWZDb25kaXRpb24gPSBnZXRBbmRSZW1vdmVBdHRyKGVsLCAndi1lbHNlLWlmJywgdHJ1ZSk7XG4gICAgICAgIC8vIDEuIGNoZWNrYm94XG4gICAgICAgIHZhciBicmFuY2gwID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgICAgLy8gcHJvY2VzcyBmb3Igb24gdGhlIG1haW4gbm9kZVxuICAgICAgICBwcm9jZXNzRm9yKGJyYW5jaDApO1xuICAgICAgICBhZGRSYXdBdHRyKGJyYW5jaDAsICd0eXBlJywgJ2NoZWNrYm94Jyk7XG4gICAgICAgIHByb2Nlc3NFbGVtZW50KGJyYW5jaDAsIG9wdGlvbnMpO1xuICAgICAgICBicmFuY2gwLnByb2Nlc3NlZCA9IHRydWU7IC8vIHByZXZlbnQgaXQgZnJvbSBkb3VibGUtcHJvY2Vzc2VkXG4gICAgICAgIGJyYW5jaDAuaWYgPSBcIihcIiArIHR5cGVCaW5kaW5nICsgXCIpPT09J2NoZWNrYm94J1wiICsgaWZDb25kaXRpb25FeHRyYTtcbiAgICAgICAgYWRkSWZDb25kaXRpb24oYnJhbmNoMCwge1xuICAgICAgICAgIGV4cDogYnJhbmNoMC5pZixcbiAgICAgICAgICBibG9jazogYnJhbmNoMFxuICAgICAgICB9KTtcbiAgICAgICAgLy8gMi4gYWRkIHJhZGlvIGVsc2UtaWYgY29uZGl0aW9uXG4gICAgICAgIHZhciBicmFuY2gxID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgICAgZ2V0QW5kUmVtb3ZlQXR0cihicmFuY2gxLCAndi1mb3InLCB0cnVlKTtcbiAgICAgICAgYWRkUmF3QXR0cihicmFuY2gxLCAndHlwZScsICdyYWRpbycpO1xuICAgICAgICBwcm9jZXNzRWxlbWVudChicmFuY2gxLCBvcHRpb25zKTtcbiAgICAgICAgYWRkSWZDb25kaXRpb24oYnJhbmNoMCwge1xuICAgICAgICAgIGV4cDogXCIoXCIgKyB0eXBlQmluZGluZyArIFwiKT09PSdyYWRpbydcIiArIGlmQ29uZGl0aW9uRXh0cmEsXG4gICAgICAgICAgYmxvY2s6IGJyYW5jaDFcbiAgICAgICAgfSk7XG4gICAgICAgIC8vIDMuIG90aGVyXG4gICAgICAgIHZhciBicmFuY2gyID0gY2xvbmVBU1RFbGVtZW50KGVsKTtcbiAgICAgICAgZ2V0QW5kUmVtb3ZlQXR0cihicmFuY2gyLCAndi1mb3InLCB0cnVlKTtcbiAgICAgICAgYWRkUmF3QXR0cihicmFuY2gyLCAnOnR5cGUnLCB0eXBlQmluZGluZyk7XG4gICAgICAgIHByb2Nlc3NFbGVtZW50KGJyYW5jaDIsIG9wdGlvbnMpO1xuICAgICAgICBhZGRJZkNvbmRpdGlvbihicmFuY2gwLCB7XG4gICAgICAgICAgZXhwOiBpZkNvbmRpdGlvbixcbiAgICAgICAgICBibG9jazogYnJhbmNoMlxuICAgICAgICB9KTtcblxuICAgICAgICBpZiAoaGFzRWxzZSkge1xuICAgICAgICAgIGJyYW5jaDAuZWxzZSA9IHRydWU7XG4gICAgICAgIH0gZWxzZSBpZiAoZWxzZUlmQ29uZGl0aW9uKSB7XG4gICAgICAgICAgYnJhbmNoMC5lbHNlaWYgPSBlbHNlSWZDb25kaXRpb247XG4gICAgICAgIH1cblxuICAgICAgICByZXR1cm4gYnJhbmNoMFxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNsb25lQVNURWxlbWVudCAoZWwpIHtcbiAgICByZXR1cm4gY3JlYXRlQVNURWxlbWVudChlbC50YWcsIGVsLmF0dHJzTGlzdC5zbGljZSgpLCBlbC5wYXJlbnQpXG4gIH1cblxuICB2YXIgbW9kZWwkMSA9IHtcbiAgICBwcmVUcmFuc2Zvcm1Ob2RlOiBwcmVUcmFuc2Zvcm1Ob2RlXG4gIH07XG5cbiAgdmFyIG1vZHVsZXMkMSA9IFtcbiAgICBrbGFzcyQxLFxuICAgIHN0eWxlJDEsXG4gICAgbW9kZWwkMVxuICBdO1xuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIHRleHQgKGVsLCBkaXIpIHtcbiAgICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgICBhZGRQcm9wKGVsLCAndGV4dENvbnRlbnQnLCAoXCJfcyhcIiArIChkaXIudmFsdWUpICsgXCIpXCIpLCBkaXIpO1xuICAgIH1cbiAgfVxuXG4gIC8qICAqL1xuXG4gIGZ1bmN0aW9uIGh0bWwgKGVsLCBkaXIpIHtcbiAgICBpZiAoZGlyLnZhbHVlKSB7XG4gICAgICBhZGRQcm9wKGVsLCAnaW5uZXJIVE1MJywgKFwiX3MoXCIgKyAoZGlyLnZhbHVlKSArIFwiKVwiKSwgZGlyKTtcbiAgICB9XG4gIH1cblxuICB2YXIgZGlyZWN0aXZlcyQxID0ge1xuICAgIG1vZGVsOiBtb2RlbCxcbiAgICB0ZXh0OiB0ZXh0LFxuICAgIGh0bWw6IGh0bWxcbiAgfTtcblxuICAvKiAgKi9cblxuICB2YXIgYmFzZU9wdGlvbnMgPSB7XG4gICAgZXhwZWN0SFRNTDogdHJ1ZSxcbiAgICBtb2R1bGVzOiBtb2R1bGVzJDEsXG4gICAgZGlyZWN0aXZlczogZGlyZWN0aXZlcyQxLFxuICAgIGlzUHJlVGFnOiBpc1ByZVRhZyxcbiAgICBpc1VuYXJ5VGFnOiBpc1VuYXJ5VGFnLFxuICAgIG11c3RVc2VQcm9wOiBtdXN0VXNlUHJvcCxcbiAgICBjYW5CZUxlZnRPcGVuVGFnOiBjYW5CZUxlZnRPcGVuVGFnLFxuICAgIGlzUmVzZXJ2ZWRUYWc6IGlzUmVzZXJ2ZWRUYWcsXG4gICAgZ2V0VGFnTmFtZXNwYWNlOiBnZXRUYWdOYW1lc3BhY2UsXG4gICAgc3RhdGljS2V5czogZ2VuU3RhdGljS2V5cyhtb2R1bGVzJDEpXG4gIH07XG5cbiAgLyogICovXG5cbiAgdmFyIGlzU3RhdGljS2V5O1xuICB2YXIgaXNQbGF0Zm9ybVJlc2VydmVkVGFnO1xuXG4gIHZhciBnZW5TdGF0aWNLZXlzQ2FjaGVkID0gY2FjaGVkKGdlblN0YXRpY0tleXMkMSk7XG5cbiAgLyoqXG4gICAqIEdvYWwgb2YgdGhlIG9wdGltaXplcjogd2FsayB0aGUgZ2VuZXJhdGVkIHRlbXBsYXRlIEFTVCB0cmVlXG4gICAqIGFuZCBkZXRlY3Qgc3ViLXRyZWVzIHRoYXQgYXJlIHB1cmVseSBzdGF0aWMsIGkuZS4gcGFydHMgb2ZcbiAgICogdGhlIERPTSB0aGF0IG5ldmVyIG5lZWRzIHRvIGNoYW5nZS5cbiAgICpcbiAgICogT25jZSB3ZSBkZXRlY3QgdGhlc2Ugc3ViLXRyZWVzLCB3ZSBjYW46XG4gICAqXG4gICAqIDEuIEhvaXN0IHRoZW0gaW50byBjb25zdGFudHMsIHNvIHRoYXQgd2Ugbm8gbG9uZ2VyIG5lZWQgdG9cbiAgICogICAgY3JlYXRlIGZyZXNoIG5vZGVzIGZvciB0aGVtIG9uIGVhY2ggcmUtcmVuZGVyO1xuICAgKiAyLiBDb21wbGV0ZWx5IHNraXAgdGhlbSBpbiB0aGUgcGF0Y2hpbmcgcHJvY2Vzcy5cbiAgICovXG4gIGZ1bmN0aW9uIG9wdGltaXplIChyb290LCBvcHRpb25zKSB7XG4gICAgaWYgKCFyb290KSB7IHJldHVybiB9XG4gICAgaXNTdGF0aWNLZXkgPSBnZW5TdGF0aWNLZXlzQ2FjaGVkKG9wdGlvbnMuc3RhdGljS2V5cyB8fCAnJyk7XG4gICAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnID0gb3B0aW9ucy5pc1Jlc2VydmVkVGFnIHx8IG5vO1xuICAgIC8vIGZpcnN0IHBhc3M6IG1hcmsgYWxsIG5vbi1zdGF0aWMgbm9kZXMuXG4gICAgbWFya1N0YXRpYyQxKHJvb3QpO1xuICAgIC8vIHNlY29uZCBwYXNzOiBtYXJrIHN0YXRpYyByb290cy5cbiAgICBtYXJrU3RhdGljUm9vdHMocm9vdCwgZmFsc2UpO1xuICB9XG5cbiAgZnVuY3Rpb24gZ2VuU3RhdGljS2V5cyQxIChrZXlzKSB7XG4gICAgcmV0dXJuIG1ha2VNYXAoXG4gICAgICAndHlwZSx0YWcsYXR0cnNMaXN0LGF0dHJzTWFwLHBsYWluLHBhcmVudCxjaGlsZHJlbixhdHRycyxzdGFydCxlbmQscmF3QXR0cnNNYXAnICtcbiAgICAgIChrZXlzID8gJywnICsga2V5cyA6ICcnKVxuICAgIClcbiAgfVxuXG4gIGZ1bmN0aW9uIG1hcmtTdGF0aWMkMSAobm9kZSkge1xuICAgIG5vZGUuc3RhdGljID0gaXNTdGF0aWMobm9kZSk7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgICAgLy8gZG8gbm90IG1ha2UgY29tcG9uZW50IHNsb3QgY29udGVudCBzdGF0aWMuIHRoaXMgYXZvaWRzXG4gICAgICAvLyAxLiBjb21wb25lbnRzIG5vdCBhYmxlIHRvIG11dGF0ZSBzbG90IG5vZGVzXG4gICAgICAvLyAyLiBzdGF0aWMgc2xvdCBjb250ZW50IGZhaWxzIGZvciBob3QtcmVsb2FkaW5nXG4gICAgICBpZiAoXG4gICAgICAgICFpc1BsYXRmb3JtUmVzZXJ2ZWRUYWcobm9kZS50YWcpICYmXG4gICAgICAgIG5vZGUudGFnICE9PSAnc2xvdCcgJiZcbiAgICAgICAgbm9kZS5hdHRyc01hcFsnaW5saW5lLXRlbXBsYXRlJ10gPT0gbnVsbFxuICAgICAgKSB7XG4gICAgICAgIHJldHVyblxuICAgICAgfVxuICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICB2YXIgY2hpbGQgPSBub2RlLmNoaWxkcmVuW2ldO1xuICAgICAgICBtYXJrU3RhdGljJDEoY2hpbGQpO1xuICAgICAgICBpZiAoIWNoaWxkLnN0YXRpYykge1xuICAgICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGlmIChub2RlLmlmQ29uZGl0aW9ucykge1xuICAgICAgICBmb3IgKHZhciBpJDEgPSAxLCBsJDEgPSBub2RlLmlmQ29uZGl0aW9ucy5sZW5ndGg7IGkkMSA8IGwkMTsgaSQxKyspIHtcbiAgICAgICAgICB2YXIgYmxvY2sgPSBub2RlLmlmQ29uZGl0aW9uc1tpJDFdLmJsb2NrO1xuICAgICAgICAgIG1hcmtTdGF0aWMkMShibG9jayk7XG4gICAgICAgICAgaWYgKCFibG9jay5zdGF0aWMpIHtcbiAgICAgICAgICAgIG5vZGUuc3RhdGljID0gZmFsc2U7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gbWFya1N0YXRpY1Jvb3RzIChub2RlLCBpc0luRm9yKSB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgICAgaWYgKG5vZGUuc3RhdGljIHx8IG5vZGUub25jZSkge1xuICAgICAgICBub2RlLnN0YXRpY0luRm9yID0gaXNJbkZvcjtcbiAgICAgIH1cbiAgICAgIC8vIEZvciBhIG5vZGUgdG8gcXVhbGlmeSBhcyBhIHN0YXRpYyByb290LCBpdCBzaG91bGQgaGF2ZSBjaGlsZHJlbiB0aGF0XG4gICAgICAvLyBhcmUgbm90IGp1c3Qgc3RhdGljIHRleHQuIE90aGVyd2lzZSB0aGUgY29zdCBvZiBob2lzdGluZyBvdXQgd2lsbFxuICAgICAgLy8gb3V0d2VpZ2ggdGhlIGJlbmVmaXRzIGFuZCBpdCdzIGJldHRlciBvZmYgdG8ganVzdCBhbHdheXMgcmVuZGVyIGl0IGZyZXNoLlxuICAgICAgaWYgKG5vZGUuc3RhdGljICYmIG5vZGUuY2hpbGRyZW4ubGVuZ3RoICYmICEoXG4gICAgICAgIG5vZGUuY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICAgIG5vZGUuY2hpbGRyZW5bMF0udHlwZSA9PT0gM1xuICAgICAgKSkge1xuICAgICAgICBub2RlLnN0YXRpY1Jvb3QgPSB0cnVlO1xuICAgICAgICByZXR1cm5cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIG5vZGUuc3RhdGljUm9vdCA9IGZhbHNlO1xuICAgICAgfVxuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDAsIGwgPSBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSA8IGw7IGkrKykge1xuICAgICAgICAgIG1hcmtTdGF0aWNSb290cyhub2RlLmNoaWxkcmVuW2ldLCBpc0luRm9yIHx8ICEhbm9kZS5mb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAobm9kZS5pZkNvbmRpdGlvbnMpIHtcbiAgICAgICAgZm9yICh2YXIgaSQxID0gMSwgbCQxID0gbm9kZS5pZkNvbmRpdGlvbnMubGVuZ3RoOyBpJDEgPCBsJDE7IGkkMSsrKSB7XG4gICAgICAgICAgbWFya1N0YXRpY1Jvb3RzKG5vZGUuaWZDb25kaXRpb25zW2kkMV0uYmxvY2ssIGlzSW5Gb3IpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gaXNTdGF0aWMgKG5vZGUpIHtcbiAgICBpZiAobm9kZS50eXBlID09PSAyKSB7IC8vIGV4cHJlc3Npb25cbiAgICAgIHJldHVybiBmYWxzZVxuICAgIH1cbiAgICBpZiAobm9kZS50eXBlID09PSAzKSB7IC8vIHRleHRcbiAgICAgIHJldHVybiB0cnVlXG4gICAgfVxuICAgIHJldHVybiAhIShub2RlLnByZSB8fCAoXG4gICAgICAhbm9kZS5oYXNCaW5kaW5ncyAmJiAvLyBubyBkeW5hbWljIGJpbmRpbmdzXG4gICAgICAhbm9kZS5pZiAmJiAhbm9kZS5mb3IgJiYgLy8gbm90IHYtaWYgb3Igdi1mb3Igb3Igdi1lbHNlXG4gICAgICAhaXNCdWlsdEluVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBidWlsdC1pblxuICAgICAgaXNQbGF0Zm9ybVJlc2VydmVkVGFnKG5vZGUudGFnKSAmJiAvLyBub3QgYSBjb21wb25lbnRcbiAgICAgICFpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvcihub2RlKSAmJlxuICAgICAgT2JqZWN0LmtleXMobm9kZSkuZXZlcnkoaXNTdGF0aWNLZXkpXG4gICAgKSlcbiAgfVxuXG4gIGZ1bmN0aW9uIGlzRGlyZWN0Q2hpbGRPZlRlbXBsYXRlRm9yIChub2RlKSB7XG4gICAgd2hpbGUgKG5vZGUucGFyZW50KSB7XG4gICAgICBub2RlID0gbm9kZS5wYXJlbnQ7XG4gICAgICBpZiAobm9kZS50YWcgIT09ICd0ZW1wbGF0ZScpIHtcbiAgICAgICAgcmV0dXJuIGZhbHNlXG4gICAgICB9XG4gICAgICBpZiAobm9kZS5mb3IpIHtcbiAgICAgICAgcmV0dXJuIHRydWVcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgZm5FeHBSRSA9IC9eKFtcXHckX10rfFxcKFteKV0qP1xcKSlcXHMqPT58XmZ1bmN0aW9uKD86XFxzK1tcXHckXSspP1xccypcXCgvO1xuICB2YXIgZm5JbnZva2VSRSA9IC9cXChbXildKj9cXCk7KiQvO1xuICB2YXIgc2ltcGxlUGF0aFJFID0gL15bQS1aYS16XyRdW1xcdyRdKig/OlxcLltBLVphLXpfJF1bXFx3JF0qfFxcWydbXiddKj8nXXxcXFtcIlteXCJdKj9cIl18XFxbXFxkK118XFxbW0EtWmEtel8kXVtcXHckXSpdKSokLztcblxuICAvLyBLZXlib2FyZEV2ZW50LmtleUNvZGUgYWxpYXNlc1xuICB2YXIga2V5Q29kZXMgPSB7XG4gICAgZXNjOiAyNyxcbiAgICB0YWI6IDksXG4gICAgZW50ZXI6IDEzLFxuICAgIHNwYWNlOiAzMixcbiAgICB1cDogMzgsXG4gICAgbGVmdDogMzcsXG4gICAgcmlnaHQ6IDM5LFxuICAgIGRvd246IDQwLFxuICAgICdkZWxldGUnOiBbOCwgNDZdXG4gIH07XG5cbiAgLy8gS2V5Ym9hcmRFdmVudC5rZXkgYWxpYXNlc1xuICB2YXIga2V5TmFtZXMgPSB7XG4gICAgLy8gIzc4ODA6IElFMTEgYW5kIEVkZ2UgdXNlIGBFc2NgIGZvciBFc2NhcGUga2V5IG5hbWUuXG4gICAgZXNjOiBbJ0VzYycsICdFc2NhcGUnXSxcbiAgICB0YWI6ICdUYWInLFxuICAgIGVudGVyOiAnRW50ZXInLFxuICAgIC8vICM5MTEyOiBJRTExIHVzZXMgYFNwYWNlYmFyYCBmb3IgU3BhY2Uga2V5IG5hbWUuXG4gICAgc3BhY2U6IFsnICcsICdTcGFjZWJhciddLFxuICAgIC8vICM3ODA2OiBJRTExIHVzZXMga2V5IG5hbWVzIHdpdGhvdXQgYEFycm93YCBwcmVmaXggZm9yIGFycm93IGtleXMuXG4gICAgdXA6IFsnVXAnLCAnQXJyb3dVcCddLFxuICAgIGxlZnQ6IFsnTGVmdCcsICdBcnJvd0xlZnQnXSxcbiAgICByaWdodDogWydSaWdodCcsICdBcnJvd1JpZ2h0J10sXG4gICAgZG93bjogWydEb3duJywgJ0Fycm93RG93biddLFxuICAgIC8vICM5MTEyOiBJRTExIHVzZXMgYERlbGAgZm9yIERlbGV0ZSBrZXkgbmFtZS5cbiAgICAnZGVsZXRlJzogWydCYWNrc3BhY2UnLCAnRGVsZXRlJywgJ0RlbCddXG4gIH07XG5cbiAgLy8gIzQ4Njg6IG1vZGlmaWVycyB0aGF0IHByZXZlbnQgdGhlIGV4ZWN1dGlvbiBvZiB0aGUgbGlzdGVuZXJcbiAgLy8gbmVlZCB0byBleHBsaWNpdGx5IHJldHVybiBudWxsIHNvIHRoYXQgd2UgY2FuIGRldGVybWluZSB3aGV0aGVyIHRvIHJlbW92ZVxuICAvLyB0aGUgbGlzdGVuZXIgZm9yIC5vbmNlXG4gIHZhciBnZW5HdWFyZCA9IGZ1bmN0aW9uIChjb25kaXRpb24pIHsgcmV0dXJuIChcImlmKFwiICsgY29uZGl0aW9uICsgXCIpcmV0dXJuIG51bGw7XCIpOyB9O1xuXG4gIHZhciBtb2RpZmllckNvZGUgPSB7XG4gICAgc3RvcDogJyRldmVudC5zdG9wUHJvcGFnYXRpb24oKTsnLFxuICAgIHByZXZlbnQ6ICckZXZlbnQucHJldmVudERlZmF1bHQoKTsnLFxuICAgIHNlbGY6IGdlbkd1YXJkKFwiJGV2ZW50LnRhcmdldCAhPT0gJGV2ZW50LmN1cnJlbnRUYXJnZXRcIiksXG4gICAgY3RybDogZ2VuR3VhcmQoXCIhJGV2ZW50LmN0cmxLZXlcIiksXG4gICAgc2hpZnQ6IGdlbkd1YXJkKFwiISRldmVudC5zaGlmdEtleVwiKSxcbiAgICBhbHQ6IGdlbkd1YXJkKFwiISRldmVudC5hbHRLZXlcIiksXG4gICAgbWV0YTogZ2VuR3VhcmQoXCIhJGV2ZW50Lm1ldGFLZXlcIiksXG4gICAgbGVmdDogZ2VuR3VhcmQoXCInYnV0dG9uJyBpbiAkZXZlbnQgJiYgJGV2ZW50LmJ1dHRvbiAhPT0gMFwiKSxcbiAgICBtaWRkbGU6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDFcIiksXG4gICAgcmlnaHQ6IGdlbkd1YXJkKFwiJ2J1dHRvbicgaW4gJGV2ZW50ICYmICRldmVudC5idXR0b24gIT09IDJcIilcbiAgfTtcblxuICBmdW5jdGlvbiBnZW5IYW5kbGVycyAoXG4gICAgZXZlbnRzLFxuICAgIGlzTmF0aXZlXG4gICkge1xuICAgIHZhciBwcmVmaXggPSBpc05hdGl2ZSA/ICduYXRpdmVPbjonIDogJ29uOic7XG4gICAgdmFyIHN0YXRpY0hhbmRsZXJzID0gXCJcIjtcbiAgICB2YXIgZHluYW1pY0hhbmRsZXJzID0gXCJcIjtcbiAgICBmb3IgKHZhciBuYW1lIGluIGV2ZW50cykge1xuICAgICAgdmFyIGhhbmRsZXJDb2RlID0gZ2VuSGFuZGxlcihldmVudHNbbmFtZV0pO1xuICAgICAgaWYgKGV2ZW50c1tuYW1lXSAmJiBldmVudHNbbmFtZV0uZHluYW1pYykge1xuICAgICAgICBkeW5hbWljSGFuZGxlcnMgKz0gbmFtZSArIFwiLFwiICsgaGFuZGxlckNvZGUgKyBcIixcIjtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHN0YXRpY0hhbmRsZXJzICs9IFwiXFxcIlwiICsgbmFtZSArIFwiXFxcIjpcIiArIGhhbmRsZXJDb2RlICsgXCIsXCI7XG4gICAgICB9XG4gICAgfVxuICAgIHN0YXRpY0hhbmRsZXJzID0gXCJ7XCIgKyAoc3RhdGljSGFuZGxlcnMuc2xpY2UoMCwgLTEpKSArIFwifVwiO1xuICAgIGlmIChkeW5hbWljSGFuZGxlcnMpIHtcbiAgICAgIHJldHVybiBwcmVmaXggKyBcIl9kKFwiICsgc3RhdGljSGFuZGxlcnMgKyBcIixbXCIgKyAoZHluYW1pY0hhbmRsZXJzLnNsaWNlKDAsIC0xKSkgKyBcIl0pXCJcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIHByZWZpeCArIHN0YXRpY0hhbmRsZXJzXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuSGFuZGxlciAoaGFuZGxlcikge1xuICAgIGlmICghaGFuZGxlcikge1xuICAgICAgcmV0dXJuICdmdW5jdGlvbigpe30nXG4gICAgfVxuXG4gICAgaWYgKEFycmF5LmlzQXJyYXkoaGFuZGxlcikpIHtcbiAgICAgIHJldHVybiAoXCJbXCIgKyAoaGFuZGxlci5tYXAoZnVuY3Rpb24gKGhhbmRsZXIpIHsgcmV0dXJuIGdlbkhhbmRsZXIoaGFuZGxlcik7IH0pLmpvaW4oJywnKSkgKyBcIl1cIilcbiAgICB9XG5cbiAgICB2YXIgaXNNZXRob2RQYXRoID0gc2ltcGxlUGF0aFJFLnRlc3QoaGFuZGxlci52YWx1ZSk7XG4gICAgdmFyIGlzRnVuY3Rpb25FeHByZXNzaW9uID0gZm5FeHBSRS50ZXN0KGhhbmRsZXIudmFsdWUpO1xuICAgIHZhciBpc0Z1bmN0aW9uSW52b2NhdGlvbiA9IHNpbXBsZVBhdGhSRS50ZXN0KGhhbmRsZXIudmFsdWUucmVwbGFjZShmbkludm9rZVJFLCAnJykpO1xuXG4gICAgaWYgKCFoYW5kbGVyLm1vZGlmaWVycykge1xuICAgICAgaWYgKGlzTWV0aG9kUGF0aCB8fCBpc0Z1bmN0aW9uRXhwcmVzc2lvbikge1xuICAgICAgICByZXR1cm4gaGFuZGxlci52YWx1ZVxuICAgICAgfVxuICAgICAgcmV0dXJuIChcImZ1bmN0aW9uKCRldmVudCl7XCIgKyAoaXNGdW5jdGlvbkludm9jYXRpb24gPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpIDogaGFuZGxlci52YWx1ZSkgKyBcIn1cIikgLy8gaW5saW5lIHN0YXRlbWVudFxuICAgIH0gZWxzZSB7XG4gICAgICB2YXIgY29kZSA9ICcnO1xuICAgICAgdmFyIGdlbk1vZGlmaWVyQ29kZSA9ICcnO1xuICAgICAgdmFyIGtleXMgPSBbXTtcbiAgICAgIGZvciAodmFyIGtleSBpbiBoYW5kbGVyLm1vZGlmaWVycykge1xuICAgICAgICBpZiAobW9kaWZpZXJDb2RlW2tleV0pIHtcbiAgICAgICAgICBnZW5Nb2RpZmllckNvZGUgKz0gbW9kaWZpZXJDb2RlW2tleV07XG4gICAgICAgICAgLy8gbGVmdC9yaWdodFxuICAgICAgICAgIGlmIChrZXlDb2Rlc1trZXldKSB7XG4gICAgICAgICAgICBrZXlzLnB1c2goa2V5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH0gZWxzZSBpZiAoa2V5ID09PSAnZXhhY3QnKSB7XG4gICAgICAgICAgdmFyIG1vZGlmaWVycyA9IChoYW5kbGVyLm1vZGlmaWVycyk7XG4gICAgICAgICAgZ2VuTW9kaWZpZXJDb2RlICs9IGdlbkd1YXJkKFxuICAgICAgICAgICAgWydjdHJsJywgJ3NoaWZ0JywgJ2FsdCcsICdtZXRhJ11cbiAgICAgICAgICAgICAgLmZpbHRlcihmdW5jdGlvbiAoa2V5TW9kaWZpZXIpIHsgcmV0dXJuICFtb2RpZmllcnNba2V5TW9kaWZpZXJdOyB9KVxuICAgICAgICAgICAgICAubWFwKGZ1bmN0aW9uIChrZXlNb2RpZmllcikgeyByZXR1cm4gKFwiJGV2ZW50LlwiICsga2V5TW9kaWZpZXIgKyBcIktleVwiKTsgfSlcbiAgICAgICAgICAgICAgLmpvaW4oJ3x8JylcbiAgICAgICAgICApO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGtleXMucHVzaChrZXkpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpZiAoa2V5cy5sZW5ndGgpIHtcbiAgICAgICAgY29kZSArPSBnZW5LZXlGaWx0ZXIoa2V5cyk7XG4gICAgICB9XG4gICAgICAvLyBNYWtlIHN1cmUgbW9kaWZpZXJzIGxpa2UgcHJldmVudCBhbmQgc3RvcCBnZXQgZXhlY3V0ZWQgYWZ0ZXIga2V5IGZpbHRlcmluZ1xuICAgICAgaWYgKGdlbk1vZGlmaWVyQ29kZSkge1xuICAgICAgICBjb2RlICs9IGdlbk1vZGlmaWVyQ29kZTtcbiAgICAgIH1cbiAgICAgIHZhciBoYW5kbGVyQ29kZSA9IGlzTWV0aG9kUGF0aFxuICAgICAgICA/IChcInJldHVybiBcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiLmFwcGx5KG51bGwsIGFyZ3VtZW50cylcIilcbiAgICAgICAgOiBpc0Z1bmN0aW9uRXhwcmVzc2lvblxuICAgICAgICAgID8gKFwicmV0dXJuIChcIiArIChoYW5kbGVyLnZhbHVlKSArIFwiKS5hcHBseShudWxsLCBhcmd1bWVudHMpXCIpXG4gICAgICAgICAgOiBpc0Z1bmN0aW9uSW52b2NhdGlvblxuICAgICAgICAgICAgPyAoXCJyZXR1cm4gXCIgKyAoaGFuZGxlci52YWx1ZSkpXG4gICAgICAgICAgICA6IGhhbmRsZXIudmFsdWU7XG4gICAgICByZXR1cm4gKFwiZnVuY3Rpb24oJGV2ZW50KXtcIiArIGNvZGUgKyBoYW5kbGVyQ29kZSArIFwifVwiKVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbktleUZpbHRlciAoa2V5cykge1xuICAgIHJldHVybiAoXG4gICAgICAvLyBtYWtlIHN1cmUgdGhlIGtleSBmaWx0ZXJzIG9ubHkgYXBwbHkgdG8gS2V5Ym9hcmRFdmVudHNcbiAgICAgIC8vICM5NDQxOiBjYW4ndCB1c2UgJ2tleUNvZGUnIGluICRldmVudCBiZWNhdXNlIENocm9tZSBhdXRvZmlsbCBmaXJlcyBmYWtlXG4gICAgICAvLyBrZXkgZXZlbnRzIHRoYXQgZG8gbm90IGhhdmUga2V5Q29kZSBwcm9wZXJ0eS4uLlxuICAgICAgXCJpZighJGV2ZW50LnR5cGUuaW5kZXhPZigna2V5JykmJlwiICtcbiAgICAgIChrZXlzLm1hcChnZW5GaWx0ZXJDb2RlKS5qb2luKCcmJicpKSArIFwiKXJldHVybiBudWxsO1wiXG4gICAgKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuRmlsdGVyQ29kZSAoa2V5KSB7XG4gICAgdmFyIGtleVZhbCA9IHBhcnNlSW50KGtleSwgMTApO1xuICAgIGlmIChrZXlWYWwpIHtcbiAgICAgIHJldHVybiAoXCIkZXZlbnQua2V5Q29kZSE9PVwiICsga2V5VmFsKVxuICAgIH1cbiAgICB2YXIga2V5Q29kZSA9IGtleUNvZGVzW2tleV07XG4gICAgdmFyIGtleU5hbWUgPSBrZXlOYW1lc1trZXldO1xuICAgIHJldHVybiAoXG4gICAgICBcIl9rKCRldmVudC5rZXlDb2RlLFwiICtcbiAgICAgIChKU09OLnN0cmluZ2lmeShrZXkpKSArIFwiLFwiICtcbiAgICAgIChKU09OLnN0cmluZ2lmeShrZXlDb2RlKSkgKyBcIixcIiArXG4gICAgICBcIiRldmVudC5rZXksXCIgK1xuICAgICAgXCJcIiArIChKU09OLnN0cmluZ2lmeShrZXlOYW1lKSkgK1xuICAgICAgXCIpXCJcbiAgICApXG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBvbiAoZWwsIGRpcikge1xuICAgIGlmIChkaXIubW9kaWZpZXJzKSB7XG4gICAgICB3YXJuKFwidi1vbiB3aXRob3V0IGFyZ3VtZW50IGRvZXMgbm90IHN1cHBvcnQgbW9kaWZpZXJzLlwiKTtcbiAgICB9XG4gICAgZWwud3JhcExpc3RlbmVycyA9IGZ1bmN0aW9uIChjb2RlKSB7IHJldHVybiAoXCJfZyhcIiArIGNvZGUgKyBcIixcIiArIChkaXIudmFsdWUpICsgXCIpXCIpOyB9O1xuICB9XG5cbiAgLyogICovXG5cbiAgZnVuY3Rpb24gYmluZCQxIChlbCwgZGlyKSB7XG4gICAgZWwud3JhcERhdGEgPSBmdW5jdGlvbiAoY29kZSkge1xuICAgICAgcmV0dXJuIChcIl9iKFwiICsgY29kZSArIFwiLCdcIiArIChlbC50YWcpICsgXCInLFwiICsgKGRpci52YWx1ZSkgKyBcIixcIiArIChkaXIubW9kaWZpZXJzICYmIGRpci5tb2RpZmllcnMucHJvcCA/ICd0cnVlJyA6ICdmYWxzZScpICsgKGRpci5tb2RpZmllcnMgJiYgZGlyLm1vZGlmaWVycy5zeW5jID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxuICAgIH07XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgYmFzZURpcmVjdGl2ZXMgPSB7XG4gICAgb246IG9uLFxuICAgIGJpbmQ6IGJpbmQkMSxcbiAgICBjbG9hazogbm9vcFxuICB9O1xuXG4gIC8qICAqL1xuXG5cblxuXG5cbiAgdmFyIENvZGVnZW5TdGF0ZSA9IGZ1bmN0aW9uIENvZGVnZW5TdGF0ZSAob3B0aW9ucykge1xuICAgIHRoaXMub3B0aW9ucyA9IG9wdGlvbnM7XG4gICAgdGhpcy53YXJuID0gb3B0aW9ucy53YXJuIHx8IGJhc2VXYXJuO1xuICAgIHRoaXMudHJhbnNmb3JtcyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAndHJhbnNmb3JtQ29kZScpO1xuICAgIHRoaXMuZGF0YUdlbkZucyA9IHBsdWNrTW9kdWxlRnVuY3Rpb24ob3B0aW9ucy5tb2R1bGVzLCAnZ2VuRGF0YScpO1xuICAgIHRoaXMuZGlyZWN0aXZlcyA9IGV4dGVuZChleHRlbmQoe30sIGJhc2VEaXJlY3RpdmVzKSwgb3B0aW9ucy5kaXJlY3RpdmVzKTtcbiAgICB2YXIgaXNSZXNlcnZlZFRhZyA9IG9wdGlvbnMuaXNSZXNlcnZlZFRhZyB8fCBubztcbiAgICB0aGlzLm1heWJlQ29tcG9uZW50ID0gZnVuY3Rpb24gKGVsKSB7IHJldHVybiAhIWVsLmNvbXBvbmVudCB8fCAhaXNSZXNlcnZlZFRhZyhlbC50YWcpOyB9O1xuICAgIHRoaXMub25jZUlkID0gMDtcbiAgICB0aGlzLnN0YXRpY1JlbmRlckZucyA9IFtdO1xuICAgIHRoaXMucHJlID0gZmFsc2U7XG4gIH07XG5cblxuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlIChcbiAgICBhc3QsXG4gICAgb3B0aW9uc1xuICApIHtcbiAgICB2YXIgc3RhdGUgPSBuZXcgQ29kZWdlblN0YXRlKG9wdGlvbnMpO1xuICAgIC8vIGZpeCAjMTE0ODMsIFJvb3QgbGV2ZWwgPHNjcmlwdD4gdGFncyBzaG91bGQgbm90IGJlIHJlbmRlcmVkLlxuICAgIHZhciBjb2RlID0gYXN0ID8gKGFzdC50YWcgPT09ICdzY3JpcHQnID8gJ251bGwnIDogZ2VuRWxlbWVudChhc3QsIHN0YXRlKSkgOiAnX2MoXCJkaXZcIiknO1xuICAgIHJldHVybiB7XG4gICAgICByZW5kZXI6IChcIndpdGgodGhpcyl7cmV0dXJuIFwiICsgY29kZSArIFwifVwiKSxcbiAgICAgIHN0YXRpY1JlbmRlckZuczogc3RhdGUuc3RhdGljUmVuZGVyRm5zXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuRWxlbWVudCAoZWwsIHN0YXRlKSB7XG4gICAgaWYgKGVsLnBhcmVudCkge1xuICAgICAgZWwucHJlID0gZWwucHJlIHx8IGVsLnBhcmVudC5wcmU7XG4gICAgfVxuXG4gICAgaWYgKGVsLnN0YXRpY1Jvb3QgJiYgIWVsLnN0YXRpY1Byb2Nlc3NlZCkge1xuICAgICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gICAgfSBlbHNlIGlmIChlbC5vbmNlICYmICFlbC5vbmNlUHJvY2Vzc2VkKSB7XG4gICAgICByZXR1cm4gZ2VuT25jZShlbCwgc3RhdGUpXG4gICAgfSBlbHNlIGlmIChlbC5mb3IgJiYgIWVsLmZvclByb2Nlc3NlZCkge1xuICAgICAgcmV0dXJuIGdlbkZvcihlbCwgc3RhdGUpXG4gICAgfSBlbHNlIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpXG4gICAgfSBlbHNlIGlmIChlbC50YWcgPT09ICd0ZW1wbGF0ZScgJiYgIWVsLnNsb3RUYXJnZXQgJiYgIXN0YXRlLnByZSkge1xuICAgICAgcmV0dXJuIGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3ZvaWQgMCdcbiAgICB9IGVsc2UgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgICByZXR1cm4gZ2VuU2xvdChlbCwgc3RhdGUpXG4gICAgfSBlbHNlIHtcbiAgICAgIC8vIGNvbXBvbmVudCBvciBlbGVtZW50XG4gICAgICB2YXIgY29kZTtcbiAgICAgIGlmIChlbC5jb21wb25lbnQpIHtcbiAgICAgICAgY29kZSA9IGdlbkNvbXBvbmVudChlbC5jb21wb25lbnQsIGVsLCBzdGF0ZSk7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICB2YXIgZGF0YTtcbiAgICAgICAgaWYgKCFlbC5wbGFpbiB8fCAoZWwucHJlICYmIHN0YXRlLm1heWJlQ29tcG9uZW50KGVsKSkpIHtcbiAgICAgICAgICBkYXRhID0gZ2VuRGF0YSQyKGVsLCBzdGF0ZSk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgY2hpbGRyZW4gPSBlbC5pbmxpbmVUZW1wbGF0ZSA/IG51bGwgOiBnZW5DaGlsZHJlbihlbCwgc3RhdGUsIHRydWUpO1xuICAgICAgICBjb2RlID0gXCJfYygnXCIgKyAoZWwudGFnKSArIFwiJ1wiICsgKGRhdGEgPyAoXCIsXCIgKyBkYXRhKSA6ICcnKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiO1xuICAgICAgfVxuICAgICAgLy8gbW9kdWxlIHRyYW5zZm9ybXNcbiAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUudHJhbnNmb3Jtcy5sZW5ndGg7IGkrKykge1xuICAgICAgICBjb2RlID0gc3RhdGUudHJhbnNmb3Jtc1tpXShlbCwgY29kZSk7XG4gICAgICB9XG4gICAgICByZXR1cm4gY29kZVxuICAgIH1cbiAgfVxuXG4gIC8vIGhvaXN0IHN0YXRpYyBzdWItdHJlZXMgb3V0XG4gIGZ1bmN0aW9uIGdlblN0YXRpYyAoZWwsIHN0YXRlKSB7XG4gICAgZWwuc3RhdGljUHJvY2Vzc2VkID0gdHJ1ZTtcbiAgICAvLyBTb21lIGVsZW1lbnRzICh0ZW1wbGF0ZXMpIG5lZWQgdG8gYmVoYXZlIGRpZmZlcmVudGx5IGluc2lkZSBvZiBhIHYtcHJlXG4gICAgLy8gbm9kZS4gIEFsbCBwcmUgbm9kZXMgYXJlIHN0YXRpYyByb290cywgc28gd2UgY2FuIHVzZSB0aGlzIGFzIGEgbG9jYXRpb24gdG9cbiAgICAvLyB3cmFwIGEgc3RhdGUgY2hhbmdlIGFuZCByZXNldCBpdCB1cG9uIGV4aXRpbmcgdGhlIHByZSBub2RlLlxuICAgIHZhciBvcmlnaW5hbFByZVN0YXRlID0gc3RhdGUucHJlO1xuICAgIGlmIChlbC5wcmUpIHtcbiAgICAgIHN0YXRlLnByZSA9IGVsLnByZTtcbiAgICB9XG4gICAgc3RhdGUuc3RhdGljUmVuZGVyRm5zLnB1c2goKFwid2l0aCh0aGlzKXtyZXR1cm4gXCIgKyAoZ2VuRWxlbWVudChlbCwgc3RhdGUpKSArIFwifVwiKSk7XG4gICAgc3RhdGUucHJlID0gb3JpZ2luYWxQcmVTdGF0ZTtcbiAgICByZXR1cm4gKFwiX20oXCIgKyAoc3RhdGUuc3RhdGljUmVuZGVyRm5zLmxlbmd0aCAtIDEpICsgKGVsLnN0YXRpY0luRm9yID8gJyx0cnVlJyA6ICcnKSArIFwiKVwiKVxuICB9XG5cbiAgLy8gdi1vbmNlXG4gIGZ1bmN0aW9uIGdlbk9uY2UgKGVsLCBzdGF0ZSkge1xuICAgIGVsLm9uY2VQcm9jZXNzZWQgPSB0cnVlO1xuICAgIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQpIHtcbiAgICAgIHJldHVybiBnZW5JZihlbCwgc3RhdGUpXG4gICAgfSBlbHNlIGlmIChlbC5zdGF0aWNJbkZvcikge1xuICAgICAgdmFyIGtleSA9ICcnO1xuICAgICAgdmFyIHBhcmVudCA9IGVsLnBhcmVudDtcbiAgICAgIHdoaWxlIChwYXJlbnQpIHtcbiAgICAgICAgaWYgKHBhcmVudC5mb3IpIHtcbiAgICAgICAgICBrZXkgPSBwYXJlbnQua2V5O1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgcGFyZW50ID0gcGFyZW50LnBhcmVudDtcbiAgICAgIH1cbiAgICAgIGlmICgha2V5KSB7XG4gICAgICAgIHN0YXRlLndhcm4oXG4gICAgICAgICAgXCJ2LW9uY2UgY2FuIG9ubHkgYmUgdXNlZCBpbnNpZGUgdi1mb3IgdGhhdCBpcyBrZXllZC4gXCIsXG4gICAgICAgICAgZWwucmF3QXR0cnNNYXBbJ3Ytb25jZSddXG4gICAgICAgICk7XG4gICAgICAgIHJldHVybiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgICAgIH1cbiAgICAgIHJldHVybiAoXCJfbyhcIiArIChnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCIsXCIgKyAoc3RhdGUub25jZUlkKyspICsgXCIsXCIgKyBrZXkgKyBcIilcIilcbiAgICB9IGVsc2Uge1xuICAgICAgcmV0dXJuIGdlblN0YXRpYyhlbCwgc3RhdGUpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuSWYgKFxuICAgIGVsLFxuICAgIHN0YXRlLFxuICAgIGFsdEdlbixcbiAgICBhbHRFbXB0eVxuICApIHtcbiAgICBlbC5pZlByb2Nlc3NlZCA9IHRydWU7IC8vIGF2b2lkIHJlY3Vyc2lvblxuICAgIHJldHVybiBnZW5JZkNvbmRpdGlvbnMoZWwuaWZDb25kaXRpb25zLnNsaWNlKCksIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuSWZDb25kaXRpb25zIChcbiAgICBjb25kaXRpb25zLFxuICAgIHN0YXRlLFxuICAgIGFsdEdlbixcbiAgICBhbHRFbXB0eVxuICApIHtcbiAgICBpZiAoIWNvbmRpdGlvbnMubGVuZ3RoKSB7XG4gICAgICByZXR1cm4gYWx0RW1wdHkgfHwgJ19lKCknXG4gICAgfVxuXG4gICAgdmFyIGNvbmRpdGlvbiA9IGNvbmRpdGlvbnMuc2hpZnQoKTtcbiAgICBpZiAoY29uZGl0aW9uLmV4cCkge1xuICAgICAgcmV0dXJuIChcIihcIiArIChjb25kaXRpb24uZXhwKSArIFwiKT9cIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpICsgXCI6XCIgKyAoZ2VuSWZDb25kaXRpb25zKGNvbmRpdGlvbnMsIHN0YXRlLCBhbHRHZW4sIGFsdEVtcHR5KSkpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiAoXCJcIiArIChnZW5UZXJuYXJ5RXhwKGNvbmRpdGlvbi5ibG9jaykpKVxuICAgIH1cblxuICAgIC8vIHYtaWYgd2l0aCB2LW9uY2Ugc2hvdWxkIGdlbmVyYXRlIGNvZGUgbGlrZSAoYSk/X20oMCk6X20oMSlcbiAgICBmdW5jdGlvbiBnZW5UZXJuYXJ5RXhwIChlbCkge1xuICAgICAgcmV0dXJuIGFsdEdlblxuICAgICAgICA/IGFsdEdlbihlbCwgc3RhdGUpXG4gICAgICAgIDogZWwub25jZVxuICAgICAgICAgID8gZ2VuT25jZShlbCwgc3RhdGUpXG4gICAgICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSlcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZW5Gb3IgKFxuICAgIGVsLFxuICAgIHN0YXRlLFxuICAgIGFsdEdlbixcbiAgICBhbHRIZWxwZXJcbiAgKSB7XG4gICAgdmFyIGV4cCA9IGVsLmZvcjtcbiAgICB2YXIgYWxpYXMgPSBlbC5hbGlhcztcbiAgICB2YXIgaXRlcmF0b3IxID0gZWwuaXRlcmF0b3IxID8gKFwiLFwiICsgKGVsLml0ZXJhdG9yMSkpIDogJyc7XG4gICAgdmFyIGl0ZXJhdG9yMiA9IGVsLml0ZXJhdG9yMiA/IChcIixcIiArIChlbC5pdGVyYXRvcjIpKSA6ICcnO1xuXG4gICAgaWYgKHN0YXRlLm1heWJlQ29tcG9uZW50KGVsKSAmJlxuICAgICAgZWwudGFnICE9PSAnc2xvdCcgJiZcbiAgICAgIGVsLnRhZyAhPT0gJ3RlbXBsYXRlJyAmJlxuICAgICAgIWVsLmtleVxuICAgICkge1xuICAgICAgc3RhdGUud2FybihcbiAgICAgICAgXCI8XCIgKyAoZWwudGFnKSArIFwiIHYtZm9yPVxcXCJcIiArIGFsaWFzICsgXCIgaW4gXCIgKyBleHAgKyBcIlxcXCI+OiBjb21wb25lbnQgbGlzdHMgcmVuZGVyZWQgd2l0aCBcIiArXG4gICAgICAgIFwidi1mb3Igc2hvdWxkIGhhdmUgZXhwbGljaXQga2V5cy4gXCIgK1xuICAgICAgICBcIlNlZSBodHRwczovL3Z1ZWpzLm9yZy9ndWlkZS9saXN0Lmh0bWwja2V5IGZvciBtb3JlIGluZm8uXCIsXG4gICAgICAgIGVsLnJhd0F0dHJzTWFwWyd2LWZvciddLFxuICAgICAgICB0cnVlIC8qIHRpcCAqL1xuICAgICAgKTtcbiAgICB9XG5cbiAgICBlbC5mb3JQcm9jZXNzZWQgPSB0cnVlOyAvLyBhdm9pZCByZWN1cnNpb25cbiAgICByZXR1cm4gKGFsdEhlbHBlciB8fCAnX2wnKSArIFwiKChcIiArIGV4cCArIFwiKSxcIiArXG4gICAgICBcImZ1bmN0aW9uKFwiICsgYWxpYXMgKyBpdGVyYXRvcjEgKyBpdGVyYXRvcjIgKyBcIil7XCIgK1xuICAgICAgICBcInJldHVybiBcIiArICgoYWx0R2VuIHx8IGdlbkVsZW1lbnQpKGVsLCBzdGF0ZSkpICtcbiAgICAgICd9KSdcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbkRhdGEkMiAoZWwsIHN0YXRlKSB7XG4gICAgdmFyIGRhdGEgPSAneyc7XG5cbiAgICAvLyBkaXJlY3RpdmVzIGZpcnN0LlxuICAgIC8vIGRpcmVjdGl2ZXMgbWF5IG11dGF0ZSB0aGUgZWwncyBvdGhlciBwcm9wZXJ0aWVzIGJlZm9yZSB0aGV5IGFyZSBnZW5lcmF0ZWQuXG4gICAgdmFyIGRpcnMgPSBnZW5EaXJlY3RpdmVzKGVsLCBzdGF0ZSk7XG4gICAgaWYgKGRpcnMpIHsgZGF0YSArPSBkaXJzICsgJywnOyB9XG5cbiAgICAvLyBrZXlcbiAgICBpZiAoZWwua2V5KSB7XG4gICAgICBkYXRhICs9IFwia2V5OlwiICsgKGVsLmtleSkgKyBcIixcIjtcbiAgICB9XG4gICAgLy8gcmVmXG4gICAgaWYgKGVsLnJlZikge1xuICAgICAgZGF0YSArPSBcInJlZjpcIiArIChlbC5yZWYpICsgXCIsXCI7XG4gICAgfVxuICAgIGlmIChlbC5yZWZJbkZvcikge1xuICAgICAgZGF0YSArPSBcInJlZkluRm9yOnRydWUsXCI7XG4gICAgfVxuICAgIC8vIHByZVxuICAgIGlmIChlbC5wcmUpIHtcbiAgICAgIGRhdGEgKz0gXCJwcmU6dHJ1ZSxcIjtcbiAgICB9XG4gICAgLy8gcmVjb3JkIG9yaWdpbmFsIHRhZyBuYW1lIGZvciBjb21wb25lbnRzIHVzaW5nIFwiaXNcIiBhdHRyaWJ1dGVcbiAgICBpZiAoZWwuY29tcG9uZW50KSB7XG4gICAgICBkYXRhICs9IFwidGFnOlxcXCJcIiArIChlbC50YWcpICsgXCJcXFwiLFwiO1xuICAgIH1cbiAgICAvLyBtb2R1bGUgZGF0YSBnZW5lcmF0aW9uIGZ1bmN0aW9uc1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgc3RhdGUuZGF0YUdlbkZucy5sZW5ndGg7IGkrKykge1xuICAgICAgZGF0YSArPSBzdGF0ZS5kYXRhR2VuRm5zW2ldKGVsKTtcbiAgICB9XG4gICAgLy8gYXR0cmlidXRlc1xuICAgIGlmIChlbC5hdHRycykge1xuICAgICAgZGF0YSArPSBcImF0dHJzOlwiICsgKGdlblByb3BzKGVsLmF0dHJzKSkgKyBcIixcIjtcbiAgICB9XG4gICAgLy8gRE9NIHByb3BzXG4gICAgaWYgKGVsLnByb3BzKSB7XG4gICAgICBkYXRhICs9IFwiZG9tUHJvcHM6XCIgKyAoZ2VuUHJvcHMoZWwucHJvcHMpKSArIFwiLFwiO1xuICAgIH1cbiAgICAvLyBldmVudCBoYW5kbGVyc1xuICAgIGlmIChlbC5ldmVudHMpIHtcbiAgICAgIGRhdGEgKz0gKGdlbkhhbmRsZXJzKGVsLmV2ZW50cywgZmFsc2UpKSArIFwiLFwiO1xuICAgIH1cbiAgICBpZiAoZWwubmF0aXZlRXZlbnRzKSB7XG4gICAgICBkYXRhICs9IChnZW5IYW5kbGVycyhlbC5uYXRpdmVFdmVudHMsIHRydWUpKSArIFwiLFwiO1xuICAgIH1cbiAgICAvLyBzbG90IHRhcmdldFxuICAgIC8vIG9ubHkgZm9yIG5vbi1zY29wZWQgc2xvdHNcbiAgICBpZiAoZWwuc2xvdFRhcmdldCAmJiAhZWwuc2xvdFNjb3BlKSB7XG4gICAgICBkYXRhICs9IFwic2xvdDpcIiArIChlbC5zbG90VGFyZ2V0KSArIFwiLFwiO1xuICAgIH1cbiAgICAvLyBzY29wZWQgc2xvdHNcbiAgICBpZiAoZWwuc2NvcGVkU2xvdHMpIHtcbiAgICAgIGRhdGEgKz0gKGdlblNjb3BlZFNsb3RzKGVsLCBlbC5zY29wZWRTbG90cywgc3RhdGUpKSArIFwiLFwiO1xuICAgIH1cbiAgICAvLyBjb21wb25lbnQgdi1tb2RlbFxuICAgIGlmIChlbC5tb2RlbCkge1xuICAgICAgZGF0YSArPSBcIm1vZGVsOnt2YWx1ZTpcIiArIChlbC5tb2RlbC52YWx1ZSkgKyBcIixjYWxsYmFjazpcIiArIChlbC5tb2RlbC5jYWxsYmFjaykgKyBcIixleHByZXNzaW9uOlwiICsgKGVsLm1vZGVsLmV4cHJlc3Npb24pICsgXCJ9LFwiO1xuICAgIH1cbiAgICAvLyBpbmxpbmUtdGVtcGxhdGVcbiAgICBpZiAoZWwuaW5saW5lVGVtcGxhdGUpIHtcbiAgICAgIHZhciBpbmxpbmVUZW1wbGF0ZSA9IGdlbklubGluZVRlbXBsYXRlKGVsLCBzdGF0ZSk7XG4gICAgICBpZiAoaW5saW5lVGVtcGxhdGUpIHtcbiAgICAgICAgZGF0YSArPSBpbmxpbmVUZW1wbGF0ZSArIFwiLFwiO1xuICAgICAgfVxuICAgIH1cbiAgICBkYXRhID0gZGF0YS5yZXBsYWNlKC8sJC8sICcnKSArICd9JztcbiAgICAvLyB2LWJpbmQgZHluYW1pYyBhcmd1bWVudCB3cmFwXG4gICAgLy8gdi1iaW5kIHdpdGggZHluYW1pYyBhcmd1bWVudHMgbXVzdCBiZSBhcHBsaWVkIHVzaW5nIHRoZSBzYW1lIHYtYmluZCBvYmplY3RcbiAgICAvLyBtZXJnZSBoZWxwZXIgc28gdGhhdCBjbGFzcy9zdHlsZS9tdXN0VXNlUHJvcCBhdHRycyBhcmUgaGFuZGxlZCBjb3JyZWN0bHkuXG4gICAgaWYgKGVsLmR5bmFtaWNBdHRycykge1xuICAgICAgZGF0YSA9IFwiX2IoXCIgKyBkYXRhICsgXCIsXFxcIlwiICsgKGVsLnRhZykgKyBcIlxcXCIsXCIgKyAoZ2VuUHJvcHMoZWwuZHluYW1pY0F0dHJzKSkgKyBcIilcIjtcbiAgICB9XG4gICAgLy8gdi1iaW5kIGRhdGEgd3JhcFxuICAgIGlmIChlbC53cmFwRGF0YSkge1xuICAgICAgZGF0YSA9IGVsLndyYXBEYXRhKGRhdGEpO1xuICAgIH1cbiAgICAvLyB2LW9uIGRhdGEgd3JhcFxuICAgIGlmIChlbC53cmFwTGlzdGVuZXJzKSB7XG4gICAgICBkYXRhID0gZWwud3JhcExpc3RlbmVycyhkYXRhKTtcbiAgICB9XG4gICAgcmV0dXJuIGRhdGFcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbkRpcmVjdGl2ZXMgKGVsLCBzdGF0ZSkge1xuICAgIHZhciBkaXJzID0gZWwuZGlyZWN0aXZlcztcbiAgICBpZiAoIWRpcnMpIHsgcmV0dXJuIH1cbiAgICB2YXIgcmVzID0gJ2RpcmVjdGl2ZXM6Wyc7XG4gICAgdmFyIGhhc1J1bnRpbWUgPSBmYWxzZTtcbiAgICB2YXIgaSwgbCwgZGlyLCBuZWVkUnVudGltZTtcbiAgICBmb3IgKGkgPSAwLCBsID0gZGlycy5sZW5ndGg7IGkgPCBsOyBpKyspIHtcbiAgICAgIGRpciA9IGRpcnNbaV07XG4gICAgICBuZWVkUnVudGltZSA9IHRydWU7XG4gICAgICB2YXIgZ2VuID0gc3RhdGUuZGlyZWN0aXZlc1tkaXIubmFtZV07XG4gICAgICBpZiAoZ2VuKSB7XG4gICAgICAgIC8vIGNvbXBpbGUtdGltZSBkaXJlY3RpdmUgdGhhdCBtYW5pcHVsYXRlcyBBU1QuXG4gICAgICAgIC8vIHJldHVybnMgdHJ1ZSBpZiBpdCBhbHNvIG5lZWRzIGEgcnVudGltZSBjb3VudGVycGFydC5cbiAgICAgICAgbmVlZFJ1bnRpbWUgPSAhIWdlbihlbCwgZGlyLCBzdGF0ZS53YXJuKTtcbiAgICAgIH1cbiAgICAgIGlmIChuZWVkUnVudGltZSkge1xuICAgICAgICBoYXNSdW50aW1lID0gdHJ1ZTtcbiAgICAgICAgcmVzICs9IFwie25hbWU6XFxcIlwiICsgKGRpci5uYW1lKSArIFwiXFxcIixyYXdOYW1lOlxcXCJcIiArIChkaXIucmF3TmFtZSkgKyBcIlxcXCJcIiArIChkaXIudmFsdWUgPyAoXCIsdmFsdWU6KFwiICsgKGRpci52YWx1ZSkgKyBcIiksZXhwcmVzc2lvbjpcIiArIChKU09OLnN0cmluZ2lmeShkaXIudmFsdWUpKSkgOiAnJykgKyAoZGlyLmFyZyA/IChcIixhcmc6XCIgKyAoZGlyLmlzRHluYW1pY0FyZyA/IGRpci5hcmcgOiAoXCJcXFwiXCIgKyAoZGlyLmFyZykgKyBcIlxcXCJcIikpKSA6ICcnKSArIChkaXIubW9kaWZpZXJzID8gKFwiLG1vZGlmaWVyczpcIiArIChKU09OLnN0cmluZ2lmeShkaXIubW9kaWZpZXJzKSkpIDogJycpICsgXCJ9LFwiO1xuICAgICAgfVxuICAgIH1cbiAgICBpZiAoaGFzUnVudGltZSkge1xuICAgICAgcmV0dXJuIHJlcy5zbGljZSgwLCAtMSkgKyAnXSdcbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBnZW5JbmxpbmVUZW1wbGF0ZSAoZWwsIHN0YXRlKSB7XG4gICAgdmFyIGFzdCA9IGVsLmNoaWxkcmVuWzBdO1xuICAgIGlmIChlbC5jaGlsZHJlbi5sZW5ndGggIT09IDEgfHwgYXN0LnR5cGUgIT09IDEpIHtcbiAgICAgIHN0YXRlLndhcm4oXG4gICAgICAgICdJbmxpbmUtdGVtcGxhdGUgY29tcG9uZW50cyBtdXN0IGhhdmUgZXhhY3RseSBvbmUgY2hpbGQgZWxlbWVudC4nLFxuICAgICAgICB7IHN0YXJ0OiBlbC5zdGFydCB9XG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoYXN0ICYmIGFzdC50eXBlID09PSAxKSB7XG4gICAgICB2YXIgaW5saW5lUmVuZGVyRm5zID0gZ2VuZXJhdGUoYXN0LCBzdGF0ZS5vcHRpb25zKTtcbiAgICAgIHJldHVybiAoXCJpbmxpbmVUZW1wbGF0ZTp7cmVuZGVyOmZ1bmN0aW9uKCl7XCIgKyAoaW5saW5lUmVuZGVyRm5zLnJlbmRlcikgKyBcIn0sc3RhdGljUmVuZGVyRm5zOltcIiArIChpbmxpbmVSZW5kZXJGbnMuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkgeyByZXR1cm4gKFwiZnVuY3Rpb24oKXtcIiArIGNvZGUgKyBcIn1cIik7IH0pLmpvaW4oJywnKSkgKyBcIl19XCIpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuU2NvcGVkU2xvdHMgKFxuICAgIGVsLFxuICAgIHNsb3RzLFxuICAgIHN0YXRlXG4gICkge1xuICAgIC8vIGJ5IGRlZmF1bHQgc2NvcGVkIHNsb3RzIGFyZSBjb25zaWRlcmVkIFwic3RhYmxlXCIsIHRoaXMgYWxsb3dzIGNoaWxkXG4gICAgLy8gY29tcG9uZW50cyB3aXRoIG9ubHkgc2NvcGVkIHNsb3RzIHRvIHNraXAgZm9yY2VkIHVwZGF0ZXMgZnJvbSBwYXJlbnQuXG4gICAgLy8gYnV0IGluIHNvbWUgY2FzZXMgd2UgaGF2ZSB0byBiYWlsLW91dCBvZiB0aGlzIG9wdGltaXphdGlvblxuICAgIC8vIGZvciBleGFtcGxlIGlmIHRoZSBzbG90IGNvbnRhaW5zIGR5bmFtaWMgbmFtZXMsIGhhcyB2LWlmIG9yIHYtZm9yIG9uIHRoZW0uLi5cbiAgICB2YXIgbmVlZHNGb3JjZVVwZGF0ZSA9IGVsLmZvciB8fCBPYmplY3Qua2V5cyhzbG90cykuc29tZShmdW5jdGlvbiAoa2V5KSB7XG4gICAgICB2YXIgc2xvdCA9IHNsb3RzW2tleV07XG4gICAgICByZXR1cm4gKFxuICAgICAgICBzbG90LnNsb3RUYXJnZXREeW5hbWljIHx8XG4gICAgICAgIHNsb3QuaWYgfHxcbiAgICAgICAgc2xvdC5mb3IgfHxcbiAgICAgICAgY29udGFpbnNTbG90Q2hpbGQoc2xvdCkgLy8gaXMgcGFzc2luZyBkb3duIHNsb3QgZnJvbSBwYXJlbnQgd2hpY2ggbWF5IGJlIGR5bmFtaWNcbiAgICAgIClcbiAgICB9KTtcblxuICAgIC8vICM5NTM0OiBpZiBhIGNvbXBvbmVudCB3aXRoIHNjb3BlZCBzbG90cyBpcyBpbnNpZGUgYSBjb25kaXRpb25hbCBicmFuY2gsXG4gICAgLy8gaXQncyBwb3NzaWJsZSBmb3IgdGhlIHNhbWUgY29tcG9uZW50IHRvIGJlIHJldXNlZCBidXQgd2l0aCBkaWZmZXJlbnRcbiAgICAvLyBjb21waWxlZCBzbG90IGNvbnRlbnQuIFRvIGF2b2lkIHRoYXQsIHdlIGdlbmVyYXRlIGEgdW5pcXVlIGtleSBiYXNlZCBvblxuICAgIC8vIHRoZSBnZW5lcmF0ZWQgY29kZSBvZiBhbGwgdGhlIHNsb3QgY29udGVudHMuXG4gICAgdmFyIG5lZWRzS2V5ID0gISFlbC5pZjtcblxuICAgIC8vIE9SIHdoZW4gaXQgaXMgaW5zaWRlIGFub3RoZXIgc2NvcGVkIHNsb3Qgb3Igdi1mb3IgKHRoZSByZWFjdGl2aXR5IG1heSBiZVxuICAgIC8vIGRpc2Nvbm5lY3RlZCBkdWUgdG8gdGhlIGludGVybWVkaWF0ZSBzY29wZSB2YXJpYWJsZSlcbiAgICAvLyAjOTQzOCwgIzk1MDZcbiAgICAvLyBUT0RPOiB0aGlzIGNhbiBiZSBmdXJ0aGVyIG9wdGltaXplZCBieSBwcm9wZXJseSBhbmFseXppbmcgaW4tc2NvcGUgYmluZGluZ3NcbiAgICAvLyBhbmQgc2tpcCBmb3JjZSB1cGRhdGluZyBvbmVzIHRoYXQgZG8gbm90IGFjdHVhbGx5IHVzZSBzY29wZSB2YXJpYWJsZXMuXG4gICAgaWYgKCFuZWVkc0ZvcmNlVXBkYXRlKSB7XG4gICAgICB2YXIgcGFyZW50ID0gZWwucGFyZW50O1xuICAgICAgd2hpbGUgKHBhcmVudCkge1xuICAgICAgICBpZiAoXG4gICAgICAgICAgKHBhcmVudC5zbG90U2NvcGUgJiYgcGFyZW50LnNsb3RTY29wZSAhPT0gZW1wdHlTbG90U2NvcGVUb2tlbikgfHxcbiAgICAgICAgICBwYXJlbnQuZm9yXG4gICAgICAgICkge1xuICAgICAgICAgIG5lZWRzRm9yY2VVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgIGJyZWFrXG4gICAgICAgIH1cbiAgICAgICAgaWYgKHBhcmVudC5pZikge1xuICAgICAgICAgIG5lZWRzS2V5ID0gdHJ1ZTtcbiAgICAgICAgfVxuICAgICAgICBwYXJlbnQgPSBwYXJlbnQucGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIHZhciBnZW5lcmF0ZWRTbG90cyA9IE9iamVjdC5rZXlzKHNsb3RzKVxuICAgICAgLm1hcChmdW5jdGlvbiAoa2V5KSB7IHJldHVybiBnZW5TY29wZWRTbG90KHNsb3RzW2tleV0sIHN0YXRlKTsgfSlcbiAgICAgIC5qb2luKCcsJyk7XG5cbiAgICByZXR1cm4gKFwic2NvcGVkU2xvdHM6X3UoW1wiICsgZ2VuZXJhdGVkU2xvdHMgKyBcIl1cIiArIChuZWVkc0ZvcmNlVXBkYXRlID8gXCIsbnVsbCx0cnVlXCIgOiBcIlwiKSArICghbmVlZHNGb3JjZVVwZGF0ZSAmJiBuZWVkc0tleSA/IChcIixudWxsLGZhbHNlLFwiICsgKGhhc2goZ2VuZXJhdGVkU2xvdHMpKSkgOiBcIlwiKSArIFwiKVwiKVxuICB9XG5cbiAgZnVuY3Rpb24gaGFzaChzdHIpIHtcbiAgICB2YXIgaGFzaCA9IDUzODE7XG4gICAgdmFyIGkgPSBzdHIubGVuZ3RoO1xuICAgIHdoaWxlKGkpIHtcbiAgICAgIGhhc2ggPSAoaGFzaCAqIDMzKSBeIHN0ci5jaGFyQ29kZUF0KC0taSk7XG4gICAgfVxuICAgIHJldHVybiBoYXNoID4+PiAwXG4gIH1cblxuICBmdW5jdGlvbiBjb250YWluc1Nsb3RDaGlsZCAoZWwpIHtcbiAgICBpZiAoZWwudHlwZSA9PT0gMSkge1xuICAgICAgaWYgKGVsLnRhZyA9PT0gJ3Nsb3QnKSB7XG4gICAgICAgIHJldHVybiB0cnVlXG4gICAgICB9XG4gICAgICByZXR1cm4gZWwuY2hpbGRyZW4uc29tZShjb250YWluc1Nsb3RDaGlsZClcbiAgICB9XG4gICAgcmV0dXJuIGZhbHNlXG4gIH1cblxuICBmdW5jdGlvbiBnZW5TY29wZWRTbG90IChcbiAgICBlbCxcbiAgICBzdGF0ZVxuICApIHtcbiAgICB2YXIgaXNMZWdhY3lTeW50YXggPSBlbC5hdHRyc01hcFsnc2xvdC1zY29wZSddO1xuICAgIGlmIChlbC5pZiAmJiAhZWwuaWZQcm9jZXNzZWQgJiYgIWlzTGVnYWN5U3ludGF4KSB7XG4gICAgICByZXR1cm4gZ2VuSWYoZWwsIHN0YXRlLCBnZW5TY29wZWRTbG90LCBcIm51bGxcIilcbiAgICB9XG4gICAgaWYgKGVsLmZvciAmJiAhZWwuZm9yUHJvY2Vzc2VkKSB7XG4gICAgICByZXR1cm4gZ2VuRm9yKGVsLCBzdGF0ZSwgZ2VuU2NvcGVkU2xvdClcbiAgICB9XG4gICAgdmFyIHNsb3RTY29wZSA9IGVsLnNsb3RTY29wZSA9PT0gZW1wdHlTbG90U2NvcGVUb2tlblxuICAgICAgPyBcIlwiXG4gICAgICA6IFN0cmluZyhlbC5zbG90U2NvcGUpO1xuICAgIHZhciBmbiA9IFwiZnVuY3Rpb24oXCIgKyBzbG90U2NvcGUgKyBcIil7XCIgK1xuICAgICAgXCJyZXR1cm4gXCIgKyAoZWwudGFnID09PSAndGVtcGxhdGUnXG4gICAgICAgID8gZWwuaWYgJiYgaXNMZWdhY3lTeW50YXhcbiAgICAgICAgICA/IChcIihcIiArIChlbC5pZikgKyBcIik/XCIgKyAoZ2VuQ2hpbGRyZW4oZWwsIHN0YXRlKSB8fCAndW5kZWZpbmVkJykgKyBcIjp1bmRlZmluZWRcIilcbiAgICAgICAgICA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSkgfHwgJ3VuZGVmaW5lZCdcbiAgICAgICAgOiBnZW5FbGVtZW50KGVsLCBzdGF0ZSkpICsgXCJ9XCI7XG4gICAgLy8gcmV2ZXJzZSBwcm94eSB2LXNsb3Qgd2l0aG91dCBzY29wZSBvbiB0aGlzLiRzbG90c1xuICAgIHZhciByZXZlcnNlUHJveHkgPSBzbG90U2NvcGUgPyBcIlwiIDogXCIscHJveHk6dHJ1ZVwiO1xuICAgIHJldHVybiAoXCJ7a2V5OlwiICsgKGVsLnNsb3RUYXJnZXQgfHwgXCJcXFwiZGVmYXVsdFxcXCJcIikgKyBcIixmbjpcIiArIGZuICsgcmV2ZXJzZVByb3h5ICsgXCJ9XCIpXG4gIH1cblxuICBmdW5jdGlvbiBnZW5DaGlsZHJlbiAoXG4gICAgZWwsXG4gICAgc3RhdGUsXG4gICAgY2hlY2tTa2lwLFxuICAgIGFsdEdlbkVsZW1lbnQsXG4gICAgYWx0R2VuTm9kZVxuICApIHtcbiAgICB2YXIgY2hpbGRyZW4gPSBlbC5jaGlsZHJlbjtcbiAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoKSB7XG4gICAgICB2YXIgZWwkMSA9IGNoaWxkcmVuWzBdO1xuICAgICAgLy8gb3B0aW1pemUgc2luZ2xlIHYtZm9yXG4gICAgICBpZiAoY2hpbGRyZW4ubGVuZ3RoID09PSAxICYmXG4gICAgICAgIGVsJDEuZm9yICYmXG4gICAgICAgIGVsJDEudGFnICE9PSAndGVtcGxhdGUnICYmXG4gICAgICAgIGVsJDEudGFnICE9PSAnc2xvdCdcbiAgICAgICkge1xuICAgICAgICB2YXIgbm9ybWFsaXphdGlvblR5cGUgPSBjaGVja1NraXBcbiAgICAgICAgICA/IHN0YXRlLm1heWJlQ29tcG9uZW50KGVsJDEpID8gXCIsMVwiIDogXCIsMFwiXG4gICAgICAgICAgOiBcIlwiO1xuICAgICAgICByZXR1cm4gKFwiXCIgKyAoKGFsdEdlbkVsZW1lbnQgfHwgZ2VuRWxlbWVudCkoZWwkMSwgc3RhdGUpKSArIG5vcm1hbGl6YXRpb25UeXBlKVxuICAgICAgfVxuICAgICAgdmFyIG5vcm1hbGl6YXRpb25UeXBlJDEgPSBjaGVja1NraXBcbiAgICAgICAgPyBnZXROb3JtYWxpemF0aW9uVHlwZShjaGlsZHJlbiwgc3RhdGUubWF5YmVDb21wb25lbnQpXG4gICAgICAgIDogMDtcbiAgICAgIHZhciBnZW4gPSBhbHRHZW5Ob2RlIHx8IGdlbk5vZGU7XG4gICAgICByZXR1cm4gKFwiW1wiICsgKGNoaWxkcmVuLm1hcChmdW5jdGlvbiAoYykgeyByZXR1cm4gZ2VuKGMsIHN0YXRlKTsgfSkuam9pbignLCcpKSArIFwiXVwiICsgKG5vcm1hbGl6YXRpb25UeXBlJDEgPyAoXCIsXCIgKyBub3JtYWxpemF0aW9uVHlwZSQxKSA6ICcnKSlcbiAgICB9XG4gIH1cblxuICAvLyBkZXRlcm1pbmUgdGhlIG5vcm1hbGl6YXRpb24gbmVlZGVkIGZvciB0aGUgY2hpbGRyZW4gYXJyYXkuXG4gIC8vIDA6IG5vIG5vcm1hbGl6YXRpb24gbmVlZGVkXG4gIC8vIDE6IHNpbXBsZSBub3JtYWxpemF0aW9uIG5lZWRlZCAocG9zc2libGUgMS1sZXZlbCBkZWVwIG5lc3RlZCBhcnJheSlcbiAgLy8gMjogZnVsbCBub3JtYWxpemF0aW9uIG5lZWRlZFxuICBmdW5jdGlvbiBnZXROb3JtYWxpemF0aW9uVHlwZSAoXG4gICAgY2hpbGRyZW4sXG4gICAgbWF5YmVDb21wb25lbnRcbiAgKSB7XG4gICAgdmFyIHJlcyA9IDA7XG4gICAgZm9yICh2YXIgaSA9IDA7IGkgPCBjaGlsZHJlbi5sZW5ndGg7IGkrKykge1xuICAgICAgdmFyIGVsID0gY2hpbGRyZW5baV07XG4gICAgICBpZiAoZWwudHlwZSAhPT0gMSkge1xuICAgICAgICBjb250aW51ZVxuICAgICAgfVxuICAgICAgaWYgKG5lZWRzTm9ybWFsaXphdGlvbihlbCkgfHxcbiAgICAgICAgICAoZWwuaWZDb25kaXRpb25zICYmIGVsLmlmQ29uZGl0aW9ucy5zb21lKGZ1bmN0aW9uIChjKSB7IHJldHVybiBuZWVkc05vcm1hbGl6YXRpb24oYy5ibG9jayk7IH0pKSkge1xuICAgICAgICByZXMgPSAyO1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaWYgKG1heWJlQ29tcG9uZW50KGVsKSB8fFxuICAgICAgICAgIChlbC5pZkNvbmRpdGlvbnMgJiYgZWwuaWZDb25kaXRpb25zLnNvbWUoZnVuY3Rpb24gKGMpIHsgcmV0dXJuIG1heWJlQ29tcG9uZW50KGMuYmxvY2spOyB9KSkpIHtcbiAgICAgICAgcmVzID0gMTtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc1xuICB9XG5cbiAgZnVuY3Rpb24gbmVlZHNOb3JtYWxpemF0aW9uIChlbCkge1xuICAgIHJldHVybiBlbC5mb3IgIT09IHVuZGVmaW5lZCB8fCBlbC50YWcgPT09ICd0ZW1wbGF0ZScgfHwgZWwudGFnID09PSAnc2xvdCdcbiAgfVxuXG4gIGZ1bmN0aW9uIGdlbk5vZGUgKG5vZGUsIHN0YXRlKSB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgICAgcmV0dXJuIGdlbkVsZW1lbnQobm9kZSwgc3RhdGUpXG4gICAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDMgJiYgbm9kZS5pc0NvbW1lbnQpIHtcbiAgICAgIHJldHVybiBnZW5Db21tZW50KG5vZGUpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBnZW5UZXh0KG5vZGUpXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuVGV4dCAodGV4dCkge1xuICAgIHJldHVybiAoXCJfdihcIiArICh0ZXh0LnR5cGUgPT09IDJcbiAgICAgID8gdGV4dC5leHByZXNzaW9uIC8vIG5vIG5lZWQgZm9yICgpIGJlY2F1c2UgYWxyZWFkeSB3cmFwcGVkIGluIF9zKClcbiAgICAgIDogdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKEpTT04uc3RyaW5naWZ5KHRleHQudGV4dCkpKSArIFwiKVwiKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuQ29tbWVudCAoY29tbWVudCkge1xuICAgIHJldHVybiAoXCJfZShcIiArIChKU09OLnN0cmluZ2lmeShjb21tZW50LnRleHQpKSArIFwiKVwiKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuU2xvdCAoZWwsIHN0YXRlKSB7XG4gICAgdmFyIHNsb3ROYW1lID0gZWwuc2xvdE5hbWUgfHwgJ1wiZGVmYXVsdFwiJztcbiAgICB2YXIgY2hpbGRyZW4gPSBnZW5DaGlsZHJlbihlbCwgc3RhdGUpO1xuICAgIHZhciByZXMgPSBcIl90KFwiICsgc2xvdE5hbWUgKyAoY2hpbGRyZW4gPyAoXCIsZnVuY3Rpb24oKXtyZXR1cm4gXCIgKyBjaGlsZHJlbiArIFwifVwiKSA6ICcnKTtcbiAgICB2YXIgYXR0cnMgPSBlbC5hdHRycyB8fCBlbC5keW5hbWljQXR0cnNcbiAgICAgID8gZ2VuUHJvcHMoKGVsLmF0dHJzIHx8IFtdKS5jb25jYXQoZWwuZHluYW1pY0F0dHJzIHx8IFtdKS5tYXAoZnVuY3Rpb24gKGF0dHIpIHsgcmV0dXJuICh7XG4gICAgICAgICAgLy8gc2xvdCBwcm9wcyBhcmUgY2FtZWxpemVkXG4gICAgICAgICAgbmFtZTogY2FtZWxpemUoYXR0ci5uYW1lKSxcbiAgICAgICAgICB2YWx1ZTogYXR0ci52YWx1ZSxcbiAgICAgICAgICBkeW5hbWljOiBhdHRyLmR5bmFtaWNcbiAgICAgICAgfSk7IH0pKVxuICAgICAgOiBudWxsO1xuICAgIHZhciBiaW5kJCQxID0gZWwuYXR0cnNNYXBbJ3YtYmluZCddO1xuICAgIGlmICgoYXR0cnMgfHwgYmluZCQkMSkgJiYgIWNoaWxkcmVuKSB7XG4gICAgICByZXMgKz0gXCIsbnVsbFwiO1xuICAgIH1cbiAgICBpZiAoYXR0cnMpIHtcbiAgICAgIHJlcyArPSBcIixcIiArIGF0dHJzO1xuICAgIH1cbiAgICBpZiAoYmluZCQkMSkge1xuICAgICAgcmVzICs9IChhdHRycyA/ICcnIDogJyxudWxsJykgKyBcIixcIiArIGJpbmQkJDE7XG4gICAgfVxuICAgIHJldHVybiByZXMgKyAnKSdcbiAgfVxuXG4gIC8vIGNvbXBvbmVudE5hbWUgaXMgZWwuY29tcG9uZW50LCB0YWtlIGl0IGFzIGFyZ3VtZW50IHRvIHNodW4gZmxvdydzIHBlc3NpbWlzdGljIHJlZmluZW1lbnRcbiAgZnVuY3Rpb24gZ2VuQ29tcG9uZW50IChcbiAgICBjb21wb25lbnROYW1lLFxuICAgIGVsLFxuICAgIHN0YXRlXG4gICkge1xuICAgIHZhciBjaGlsZHJlbiA9IGVsLmlubGluZVRlbXBsYXRlID8gbnVsbCA6IGdlbkNoaWxkcmVuKGVsLCBzdGF0ZSwgdHJ1ZSk7XG4gICAgcmV0dXJuIChcIl9jKFwiICsgY29tcG9uZW50TmFtZSArIFwiLFwiICsgKGdlbkRhdGEkMihlbCwgc3RhdGUpKSArIChjaGlsZHJlbiA/IChcIixcIiArIGNoaWxkcmVuKSA6ICcnKSArIFwiKVwiKVxuICB9XG5cbiAgZnVuY3Rpb24gZ2VuUHJvcHMgKHByb3BzKSB7XG4gICAgdmFyIHN0YXRpY1Byb3BzID0gXCJcIjtcbiAgICB2YXIgZHluYW1pY1Byb3BzID0gXCJcIjtcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHByb3BzLmxlbmd0aDsgaSsrKSB7XG4gICAgICB2YXIgcHJvcCA9IHByb3BzW2ldO1xuICAgICAgdmFyIHZhbHVlID0gdHJhbnNmb3JtU3BlY2lhbE5ld2xpbmVzKHByb3AudmFsdWUpO1xuICAgICAgaWYgKHByb3AuZHluYW1pYykge1xuICAgICAgICBkeW5hbWljUHJvcHMgKz0gKHByb3AubmFtZSkgKyBcIixcIiArIHZhbHVlICsgXCIsXCI7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBzdGF0aWNQcm9wcyArPSBcIlxcXCJcIiArIChwcm9wLm5hbWUpICsgXCJcXFwiOlwiICsgdmFsdWUgKyBcIixcIjtcbiAgICAgIH1cbiAgICB9XG4gICAgc3RhdGljUHJvcHMgPSBcIntcIiArIChzdGF0aWNQcm9wcy5zbGljZSgwLCAtMSkpICsgXCJ9XCI7XG4gICAgaWYgKGR5bmFtaWNQcm9wcykge1xuICAgICAgcmV0dXJuIChcIl9kKFwiICsgc3RhdGljUHJvcHMgKyBcIixbXCIgKyAoZHluYW1pY1Byb3BzLnNsaWNlKDAsIC0xKSkgKyBcIl0pXCIpXG4gICAgfSBlbHNlIHtcbiAgICAgIHJldHVybiBzdGF0aWNQcm9wc1xuICAgIH1cbiAgfVxuXG4gIC8vICMzODk1LCAjNDI2OFxuICBmdW5jdGlvbiB0cmFuc2Zvcm1TcGVjaWFsTmV3bGluZXMgKHRleHQpIHtcbiAgICByZXR1cm4gdGV4dFxuICAgICAgLnJlcGxhY2UoL1xcdTIwMjgvZywgJ1xcXFx1MjAyOCcpXG4gICAgICAucmVwbGFjZSgvXFx1MjAyOS9nLCAnXFxcXHUyMDI5JylcbiAgfVxuXG4gIC8qICAqL1xuXG5cblxuICAvLyB0aGVzZSBrZXl3b3JkcyBzaG91bGQgbm90IGFwcGVhciBpbnNpZGUgZXhwcmVzc2lvbnMsIGJ1dCBvcGVyYXRvcnMgbGlrZVxuICAvLyB0eXBlb2YsIGluc3RhbmNlb2YgYW5kIGluIGFyZSBhbGxvd2VkXG4gIHZhciBwcm9oaWJpdGVkS2V5d29yZFJFID0gbmV3IFJlZ0V4cCgnXFxcXGInICsgKFxuICAgICdkbyxpZixmb3IsbGV0LG5ldyx0cnksdmFyLGNhc2UsZWxzZSx3aXRoLGF3YWl0LGJyZWFrLGNhdGNoLGNsYXNzLGNvbnN0LCcgK1xuICAgICdzdXBlcix0aHJvdyx3aGlsZSx5aWVsZCxkZWxldGUsZXhwb3J0LGltcG9ydCxyZXR1cm4sc3dpdGNoLGRlZmF1bHQsJyArXG4gICAgJ2V4dGVuZHMsZmluYWxseSxjb250aW51ZSxkZWJ1Z2dlcixmdW5jdGlvbixhcmd1bWVudHMnXG4gICkuc3BsaXQoJywnKS5qb2luKCdcXFxcYnxcXFxcYicpICsgJ1xcXFxiJyk7XG5cbiAgLy8gdGhlc2UgdW5hcnkgb3BlcmF0b3JzIHNob3VsZCBub3QgYmUgdXNlZCBhcyBwcm9wZXJ0eS9tZXRob2QgbmFtZXNcbiAgdmFyIHVuYXJ5T3BlcmF0b3JzUkUgPSBuZXcgUmVnRXhwKCdcXFxcYicgKyAoXG4gICAgJ2RlbGV0ZSx0eXBlb2Ysdm9pZCdcbiAgKS5zcGxpdCgnLCcpLmpvaW4oJ1xcXFxzKlxcXFwoW15cXFxcKV0qXFxcXCl8XFxcXGInKSArICdcXFxccypcXFxcKFteXFxcXCldKlxcXFwpJyk7XG5cbiAgLy8gc3RyaXAgc3RyaW5ncyBpbiBleHByZXNzaW9uc1xuICB2YXIgc3RyaXBTdHJpbmdSRSA9IC8nKD86W14nXFxcXF18XFxcXC4pKid8XCIoPzpbXlwiXFxcXF18XFxcXC4pKlwifGAoPzpbXmBcXFxcXXxcXFxcLikqXFwkXFx7fFxcfSg/OlteYFxcXFxdfFxcXFwuKSpgfGAoPzpbXmBcXFxcXXxcXFxcLikqYC9nO1xuXG4gIC8vIGRldGVjdCBwcm9ibGVtYXRpYyBleHByZXNzaW9ucyBpbiBhIHRlbXBsYXRlXG4gIGZ1bmN0aW9uIGRldGVjdEVycm9ycyAoYXN0LCB3YXJuKSB7XG4gICAgaWYgKGFzdCkge1xuICAgICAgY2hlY2tOb2RlKGFzdCwgd2Fybik7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tOb2RlIChub2RlLCB3YXJuKSB7XG4gICAgaWYgKG5vZGUudHlwZSA9PT0gMSkge1xuICAgICAgZm9yICh2YXIgbmFtZSBpbiBub2RlLmF0dHJzTWFwKSB7XG4gICAgICAgIGlmIChkaXJSRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgdmFyIHZhbHVlID0gbm9kZS5hdHRyc01hcFtuYW1lXTtcbiAgICAgICAgICBpZiAodmFsdWUpIHtcbiAgICAgICAgICAgIHZhciByYW5nZSA9IG5vZGUucmF3QXR0cnNNYXBbbmFtZV07XG4gICAgICAgICAgICBpZiAobmFtZSA9PT0gJ3YtZm9yJykge1xuICAgICAgICAgICAgICBjaGVja0Zvcihub2RlLCAoXCJ2LWZvcj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgICAgfSBlbHNlIGlmIChuYW1lID09PSAndi1zbG90JyB8fCBuYW1lWzBdID09PSAnIycpIHtcbiAgICAgICAgICAgICAgY2hlY2tGdW5jdGlvblBhcmFtZXRlckV4cHJlc3Npb24odmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICAgIH0gZWxzZSBpZiAob25SRS50ZXN0KG5hbWUpKSB7XG4gICAgICAgICAgICAgIGNoZWNrRXZlbnQodmFsdWUsIChuYW1lICsgXCI9XFxcIlwiICsgdmFsdWUgKyBcIlxcXCJcIiksIHdhcm4sIHJhbmdlKTtcbiAgICAgICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgICAgIGNoZWNrRXhwcmVzc2lvbih2YWx1ZSwgKG5hbWUgKyBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiKSwgd2FybiwgcmFuZ2UpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuICAgICAgaWYgKG5vZGUuY2hpbGRyZW4pIHtcbiAgICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBub2RlLmNoaWxkcmVuLmxlbmd0aDsgaSsrKSB7XG4gICAgICAgICAgY2hlY2tOb2RlKG5vZGUuY2hpbGRyZW5baV0sIHdhcm4pO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLnR5cGUgPT09IDIpIHtcbiAgICAgIGNoZWNrRXhwcmVzc2lvbihub2RlLmV4cHJlc3Npb24sIG5vZGUudGV4dCwgd2Fybiwgbm9kZSk7XG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY2hlY2tFdmVudCAoZXhwLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICAgIHZhciBzdHJpcHBlZCA9IGV4cC5yZXBsYWNlKHN0cmlwU3RyaW5nUkUsICcnKTtcbiAgICB2YXIga2V5d29yZE1hdGNoID0gc3RyaXBwZWQubWF0Y2godW5hcnlPcGVyYXRvcnNSRSk7XG4gICAgaWYgKGtleXdvcmRNYXRjaCAmJiBzdHJpcHBlZC5jaGFyQXQoa2V5d29yZE1hdGNoLmluZGV4IC0gMSkgIT09ICckJykge1xuICAgICAgd2FybihcbiAgICAgICAgXCJhdm9pZCB1c2luZyBKYXZhU2NyaXB0IHVuYXJ5IG9wZXJhdG9yIGFzIHByb3BlcnR5IG5hbWU6IFwiICtcbiAgICAgICAgXCJcXFwiXCIgKyAoa2V5d29yZE1hdGNoWzBdKSArIFwiXFxcIiBpbiBleHByZXNzaW9uIFwiICsgKHRleHQudHJpbSgpKSxcbiAgICAgICAgcmFuZ2VcbiAgICAgICk7XG4gICAgfVxuICAgIGNoZWNrRXhwcmVzc2lvbihleHAsIHRleHQsIHdhcm4sIHJhbmdlKTtcbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRm9yIChub2RlLCB0ZXh0LCB3YXJuLCByYW5nZSkge1xuICAgIGNoZWNrRXhwcmVzc2lvbihub2RlLmZvciB8fCAnJywgdGV4dCwgd2FybiwgcmFuZ2UpO1xuICAgIGNoZWNrSWRlbnRpZmllcihub2RlLmFsaWFzLCAndi1mb3IgYWxpYXMnLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gICAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IxLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gICAgY2hlY2tJZGVudGlmaWVyKG5vZGUuaXRlcmF0b3IyLCAndi1mb3IgaXRlcmF0b3InLCB0ZXh0LCB3YXJuLCByYW5nZSk7XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0lkZW50aWZpZXIgKFxuICAgIGlkZW50LFxuICAgIHR5cGUsXG4gICAgdGV4dCxcbiAgICB3YXJuLFxuICAgIHJhbmdlXG4gICkge1xuICAgIGlmICh0eXBlb2YgaWRlbnQgPT09ICdzdHJpbmcnKSB7XG4gICAgICB0cnkge1xuICAgICAgICBuZXcgRnVuY3Rpb24oKFwidmFyIFwiICsgaWRlbnQgKyBcIj1fXCIpKTtcbiAgICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgICAgd2FybigoXCJpbnZhbGlkIFwiICsgdHlwZSArIFwiIFxcXCJcIiArIGlkZW50ICsgXCJcXFwiIGluIGV4cHJlc3Npb246IFwiICsgKHRleHQudHJpbSgpKSksIHJhbmdlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBmdW5jdGlvbiBjaGVja0V4cHJlc3Npb24gKGV4cCwgdGV4dCwgd2FybiwgcmFuZ2UpIHtcbiAgICB0cnkge1xuICAgICAgbmV3IEZ1bmN0aW9uKChcInJldHVybiBcIiArIGV4cCkpO1xuICAgIH0gY2F0Y2ggKGUpIHtcbiAgICAgIHZhciBrZXl3b3JkTWF0Y2ggPSBleHAucmVwbGFjZShzdHJpcFN0cmluZ1JFLCAnJykubWF0Y2gocHJvaGliaXRlZEtleXdvcmRSRSk7XG4gICAgICBpZiAoa2V5d29yZE1hdGNoKSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJhdm9pZCB1c2luZyBKYXZhU2NyaXB0IGtleXdvcmQgYXMgcHJvcGVydHkgbmFtZTogXCIgK1xuICAgICAgICAgIFwiXFxcIlwiICsgKGtleXdvcmRNYXRjaFswXSkgKyBcIlxcXCJcXG4gIFJhdyBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSksXG4gICAgICAgICAgcmFuZ2VcbiAgICAgICAgKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHdhcm4oXG4gICAgICAgICAgXCJpbnZhbGlkIGV4cHJlc3Npb246IFwiICsgKGUubWVzc2FnZSkgKyBcIiBpblxcblxcblwiICtcbiAgICAgICAgICBcIiAgICBcIiArIGV4cCArIFwiXFxuXFxuXCIgK1xuICAgICAgICAgIFwiICBSYXcgZXhwcmVzc2lvbjogXCIgKyAodGV4dC50cmltKCkpICsgXCJcXG5cIixcbiAgICAgICAgICByYW5nZVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIGZ1bmN0aW9uIGNoZWNrRnVuY3Rpb25QYXJhbWV0ZXJFeHByZXNzaW9uIChleHAsIHRleHQsIHdhcm4sIHJhbmdlKSB7XG4gICAgdHJ5IHtcbiAgICAgIG5ldyBGdW5jdGlvbihleHAsICcnKTtcbiAgICB9IGNhdGNoIChlKSB7XG4gICAgICB3YXJuKFxuICAgICAgICBcImludmFsaWQgZnVuY3Rpb24gcGFyYW1ldGVyIGV4cHJlc3Npb246IFwiICsgKGUubWVzc2FnZSkgKyBcIiBpblxcblxcblwiICtcbiAgICAgICAgXCIgICAgXCIgKyBleHAgKyBcIlxcblxcblwiICtcbiAgICAgICAgXCIgIFJhdyBleHByZXNzaW9uOiBcIiArICh0ZXh0LnRyaW0oKSkgKyBcIlxcblwiLFxuICAgICAgICByYW5nZVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICB2YXIgcmFuZ2UgPSAyO1xuXG4gIGZ1bmN0aW9uIGdlbmVyYXRlQ29kZUZyYW1lIChcbiAgICBzb3VyY2UsXG4gICAgc3RhcnQsXG4gICAgZW5kXG4gICkge1xuICAgIGlmICggc3RhcnQgPT09IHZvaWQgMCApIHN0YXJ0ID0gMDtcbiAgICBpZiAoIGVuZCA9PT0gdm9pZCAwICkgZW5kID0gc291cmNlLmxlbmd0aDtcblxuICAgIHZhciBsaW5lcyA9IHNvdXJjZS5zcGxpdCgvXFxyP1xcbi8pO1xuICAgIHZhciBjb3VudCA9IDA7XG4gICAgdmFyIHJlcyA9IFtdO1xuICAgIGZvciAodmFyIGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGNvdW50ICs9IGxpbmVzW2ldLmxlbmd0aCArIDE7XG4gICAgICBpZiAoY291bnQgPj0gc3RhcnQpIHtcbiAgICAgICAgZm9yICh2YXIgaiA9IGkgLSByYW5nZTsgaiA8PSBpICsgcmFuZ2UgfHwgZW5kID4gY291bnQ7IGorKykge1xuICAgICAgICAgIGlmIChqIDwgMCB8fCBqID49IGxpbmVzLmxlbmd0aCkgeyBjb250aW51ZSB9XG4gICAgICAgICAgcmVzLnB1c2goKFwiXCIgKyAoaiArIDEpICsgKHJlcGVhdCQxKFwiIFwiLCAzIC0gU3RyaW5nKGogKyAxKS5sZW5ndGgpKSArIFwifCAgXCIgKyAobGluZXNbal0pKSk7XG4gICAgICAgICAgdmFyIGxpbmVMZW5ndGggPSBsaW5lc1tqXS5sZW5ndGg7XG4gICAgICAgICAgaWYgKGogPT09IGkpIHtcbiAgICAgICAgICAgIC8vIHB1c2ggdW5kZXJsaW5lXG4gICAgICAgICAgICB2YXIgcGFkID0gc3RhcnQgLSAoY291bnQgLSBsaW5lTGVuZ3RoKSArIDE7XG4gICAgICAgICAgICB2YXIgbGVuZ3RoID0gZW5kID4gY291bnQgPyBsaW5lTGVuZ3RoIC0gcGFkIDogZW5kIC0gc3RhcnQ7XG4gICAgICAgICAgICByZXMucHVzaChcIiAgIHwgIFwiICsgcmVwZWF0JDEoXCIgXCIsIHBhZCkgKyByZXBlYXQkMShcIl5cIiwgbGVuZ3RoKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChqID4gaSkge1xuICAgICAgICAgICAgaWYgKGVuZCA+IGNvdW50KSB7XG4gICAgICAgICAgICAgIHZhciBsZW5ndGgkMSA9IE1hdGgubWluKGVuZCAtIGNvdW50LCBsaW5lTGVuZ3RoKTtcbiAgICAgICAgICAgICAgcmVzLnB1c2goXCIgICB8ICBcIiArIHJlcGVhdCQxKFwiXlwiLCBsZW5ndGgkMSkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY291bnQgKz0gbGluZUxlbmd0aCArIDE7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIGJyZWFrXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiByZXMuam9pbignXFxuJylcbiAgfVxuXG4gIGZ1bmN0aW9uIHJlcGVhdCQxIChzdHIsIG4pIHtcbiAgICB2YXIgcmVzdWx0ID0gJyc7XG4gICAgaWYgKG4gPiAwKSB7XG4gICAgICB3aGlsZSAodHJ1ZSkgeyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lXG4gICAgICAgIGlmIChuICYgMSkgeyByZXN1bHQgKz0gc3RyOyB9XG4gICAgICAgIG4gPj4+PSAxO1xuICAgICAgICBpZiAobiA8PSAwKSB7IGJyZWFrIH1cbiAgICAgICAgc3RyICs9IHN0cjtcbiAgICAgIH1cbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9XG5cbiAgLyogICovXG5cblxuXG4gIGZ1bmN0aW9uIGNyZWF0ZUZ1bmN0aW9uIChjb2RlLCBlcnJvcnMpIHtcbiAgICB0cnkge1xuICAgICAgcmV0dXJuIG5ldyBGdW5jdGlvbihjb2RlKVxuICAgIH0gY2F0Y2ggKGVycikge1xuICAgICAgZXJyb3JzLnB1c2goeyBlcnI6IGVyciwgY29kZTogY29kZSB9KTtcbiAgICAgIHJldHVybiBub29wXG4gICAgfVxuICB9XG5cbiAgZnVuY3Rpb24gY3JlYXRlQ29tcGlsZVRvRnVuY3Rpb25GbiAoY29tcGlsZSkge1xuICAgIHZhciBjYWNoZSA9IE9iamVjdC5jcmVhdGUobnVsbCk7XG5cbiAgICByZXR1cm4gZnVuY3Rpb24gY29tcGlsZVRvRnVuY3Rpb25zIChcbiAgICAgIHRlbXBsYXRlLFxuICAgICAgb3B0aW9ucyxcbiAgICAgIHZtXG4gICAgKSB7XG4gICAgICBvcHRpb25zID0gZXh0ZW5kKHt9LCBvcHRpb25zKTtcbiAgICAgIHZhciB3YXJuJCQxID0gb3B0aW9ucy53YXJuIHx8IHdhcm47XG4gICAgICBkZWxldGUgb3B0aW9ucy53YXJuO1xuXG4gICAgICAvKiBpc3RhbmJ1bCBpZ25vcmUgaWYgKi9cbiAgICAgIHtcbiAgICAgICAgLy8gZGV0ZWN0IHBvc3NpYmxlIENTUCByZXN0cmljdGlvblxuICAgICAgICB0cnkge1xuICAgICAgICAgIG5ldyBGdW5jdGlvbigncmV0dXJuIDEnKTtcbiAgICAgICAgfSBjYXRjaCAoZSkge1xuICAgICAgICAgIGlmIChlLnRvU3RyaW5nKCkubWF0Y2goL3Vuc2FmZS1ldmFsfENTUC8pKSB7XG4gICAgICAgICAgICB3YXJuJCQxKFxuICAgICAgICAgICAgICAnSXQgc2VlbXMgeW91IGFyZSB1c2luZyB0aGUgc3RhbmRhbG9uZSBidWlsZCBvZiBWdWUuanMgaW4gYW4gJyArXG4gICAgICAgICAgICAgICdlbnZpcm9ubWVudCB3aXRoIENvbnRlbnQgU2VjdXJpdHkgUG9saWN5IHRoYXQgcHJvaGliaXRzIHVuc2FmZS1ldmFsLiAnICtcbiAgICAgICAgICAgICAgJ1RoZSB0ZW1wbGF0ZSBjb21waWxlciBjYW5ub3Qgd29yayBpbiB0aGlzIGVudmlyb25tZW50LiBDb25zaWRlciAnICtcbiAgICAgICAgICAgICAgJ3JlbGF4aW5nIHRoZSBwb2xpY3kgdG8gYWxsb3cgdW5zYWZlLWV2YWwgb3IgcHJlLWNvbXBpbGluZyB5b3VyICcgK1xuICAgICAgICAgICAgICAndGVtcGxhdGVzIGludG8gcmVuZGVyIGZ1bmN0aW9ucy4nXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAvLyBjaGVjayBjYWNoZVxuICAgICAgdmFyIGtleSA9IG9wdGlvbnMuZGVsaW1pdGVyc1xuICAgICAgICA/IFN0cmluZyhvcHRpb25zLmRlbGltaXRlcnMpICsgdGVtcGxhdGVcbiAgICAgICAgOiB0ZW1wbGF0ZTtcbiAgICAgIGlmIChjYWNoZVtrZXldKSB7XG4gICAgICAgIHJldHVybiBjYWNoZVtrZXldXG4gICAgICB9XG5cbiAgICAgIC8vIGNvbXBpbGVcbiAgICAgIHZhciBjb21waWxlZCA9IGNvbXBpbGUodGVtcGxhdGUsIG9wdGlvbnMpO1xuXG4gICAgICAvLyBjaGVjayBjb21waWxhdGlvbiBlcnJvcnMvdGlwc1xuICAgICAge1xuICAgICAgICBpZiAoY29tcGlsZWQuZXJyb3JzICYmIGNvbXBpbGVkLmVycm9ycy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAob3B0aW9ucy5vdXRwdXRTb3VyY2VSYW5nZSkge1xuICAgICAgICAgICAgY29tcGlsZWQuZXJyb3JzLmZvckVhY2goZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICAgICBcIkVycm9yIGNvbXBpbGluZyB0ZW1wbGF0ZTpcXG5cXG5cIiArIChlLm1zZykgKyBcIlxcblxcblwiICtcbiAgICAgICAgICAgICAgICBnZW5lcmF0ZUNvZGVGcmFtZSh0ZW1wbGF0ZSwgZS5zdGFydCwgZS5lbmQpLFxuICAgICAgICAgICAgICAgIHZtXG4gICAgICAgICAgICAgICk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgICAgXCJFcnJvciBjb21waWxpbmcgdGVtcGxhdGU6XFxuXFxuXCIgKyB0ZW1wbGF0ZSArIFwiXFxuXFxuXCIgK1xuICAgICAgICAgICAgICBjb21waWxlZC5lcnJvcnMubWFwKGZ1bmN0aW9uIChlKSB7IHJldHVybiAoXCItIFwiICsgZSk7IH0pLmpvaW4oJ1xcbicpICsgJ1xcbicsXG4gICAgICAgICAgICAgIHZtXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoY29tcGlsZWQudGlwcyAmJiBjb21waWxlZC50aXBzLmxlbmd0aCkge1xuICAgICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgICBjb21waWxlZC50aXBzLmZvckVhY2goZnVuY3Rpb24gKGUpIHsgcmV0dXJuIHRpcChlLm1zZywgdm0pOyB9KTtcbiAgICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICAgY29tcGlsZWQudGlwcy5mb3JFYWNoKGZ1bmN0aW9uIChtc2cpIHsgcmV0dXJuIHRpcChtc2csIHZtKTsgfSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIC8vIHR1cm4gY29kZSBpbnRvIGZ1bmN0aW9uc1xuICAgICAgdmFyIHJlcyA9IHt9O1xuICAgICAgdmFyIGZuR2VuRXJyb3JzID0gW107XG4gICAgICByZXMucmVuZGVyID0gY3JlYXRlRnVuY3Rpb24oY29tcGlsZWQucmVuZGVyLCBmbkdlbkVycm9ycyk7XG4gICAgICByZXMuc3RhdGljUmVuZGVyRm5zID0gY29tcGlsZWQuc3RhdGljUmVuZGVyRm5zLm1hcChmdW5jdGlvbiAoY29kZSkge1xuICAgICAgICByZXR1cm4gY3JlYXRlRnVuY3Rpb24oY29kZSwgZm5HZW5FcnJvcnMpXG4gICAgICB9KTtcblxuICAgICAgLy8gY2hlY2sgZnVuY3Rpb24gZ2VuZXJhdGlvbiBlcnJvcnMuXG4gICAgICAvLyB0aGlzIHNob3VsZCBvbmx5IGhhcHBlbiBpZiB0aGVyZSBpcyBhIGJ1ZyBpbiB0aGUgY29tcGlsZXIgaXRzZWxmLlxuICAgICAgLy8gbW9zdGx5IGZvciBjb2RlZ2VuIGRldmVsb3BtZW50IHVzZVxuICAgICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgICB7XG4gICAgICAgIGlmICgoIWNvbXBpbGVkLmVycm9ycyB8fCAhY29tcGlsZWQuZXJyb3JzLmxlbmd0aCkgJiYgZm5HZW5FcnJvcnMubGVuZ3RoKSB7XG4gICAgICAgICAgd2FybiQkMShcbiAgICAgICAgICAgIFwiRmFpbGVkIHRvIGdlbmVyYXRlIHJlbmRlciBmdW5jdGlvbjpcXG5cXG5cIiArXG4gICAgICAgICAgICBmbkdlbkVycm9ycy5tYXAoZnVuY3Rpb24gKHJlZikge1xuICAgICAgICAgICAgICB2YXIgZXJyID0gcmVmLmVycjtcbiAgICAgICAgICAgICAgdmFyIGNvZGUgPSByZWYuY29kZTtcblxuICAgICAgICAgICAgICByZXR1cm4gKChlcnIudG9TdHJpbmcoKSkgKyBcIiBpblxcblxcblwiICsgY29kZSArIFwiXFxuXCIpO1xuICAgICAgICAgIH0pLmpvaW4oJ1xcbicpLFxuICAgICAgICAgICAgdm1cbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIHJldHVybiAoY2FjaGVba2V5XSA9IHJlcylcbiAgICB9XG4gIH1cblxuICAvKiAgKi9cblxuICBmdW5jdGlvbiBjcmVhdGVDb21waWxlckNyZWF0b3IgKGJhc2VDb21waWxlKSB7XG4gICAgcmV0dXJuIGZ1bmN0aW9uIGNyZWF0ZUNvbXBpbGVyIChiYXNlT3B0aW9ucykge1xuICAgICAgZnVuY3Rpb24gY29tcGlsZSAoXG4gICAgICAgIHRlbXBsYXRlLFxuICAgICAgICBvcHRpb25zXG4gICAgICApIHtcbiAgICAgICAgdmFyIGZpbmFsT3B0aW9ucyA9IE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMpO1xuICAgICAgICB2YXIgZXJyb3JzID0gW107XG4gICAgICAgIHZhciB0aXBzID0gW107XG5cbiAgICAgICAgdmFyIHdhcm4gPSBmdW5jdGlvbiAobXNnLCByYW5nZSwgdGlwKSB7XG4gICAgICAgICAgKHRpcCA/IHRpcHMgOiBlcnJvcnMpLnB1c2gobXNnKTtcbiAgICAgICAgfTtcblxuICAgICAgICBpZiAob3B0aW9ucykge1xuICAgICAgICAgIGlmIChvcHRpb25zLm91dHB1dFNvdXJjZVJhbmdlKSB7XG4gICAgICAgICAgICAvLyAkZmxvdy1kaXNhYmxlLWxpbmVcbiAgICAgICAgICAgIHZhciBsZWFkaW5nU3BhY2VMZW5ndGggPSB0ZW1wbGF0ZS5tYXRjaCgvXlxccyovKVswXS5sZW5ndGg7XG5cbiAgICAgICAgICAgIHdhcm4gPSBmdW5jdGlvbiAobXNnLCByYW5nZSwgdGlwKSB7XG4gICAgICAgICAgICAgIHZhciBkYXRhID0geyBtc2c6IG1zZyB9O1xuICAgICAgICAgICAgICBpZiAocmFuZ2UpIHtcbiAgICAgICAgICAgICAgICBpZiAocmFuZ2Uuc3RhcnQgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgICAgZGF0YS5zdGFydCA9IHJhbmdlLnN0YXJ0ICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICBpZiAocmFuZ2UuZW5kICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICAgIGRhdGEuZW5kID0gcmFuZ2UuZW5kICsgbGVhZGluZ1NwYWNlTGVuZ3RoO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAodGlwID8gdGlwcyA6IGVycm9ycykucHVzaChkYXRhKTtcbiAgICAgICAgICAgIH07XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIG1lcmdlIGN1c3RvbSBtb2R1bGVzXG4gICAgICAgICAgaWYgKG9wdGlvbnMubW9kdWxlcykge1xuICAgICAgICAgICAgZmluYWxPcHRpb25zLm1vZHVsZXMgPVxuICAgICAgICAgICAgICAoYmFzZU9wdGlvbnMubW9kdWxlcyB8fCBbXSkuY29uY2F0KG9wdGlvbnMubW9kdWxlcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIC8vIG1lcmdlIGN1c3RvbSBkaXJlY3RpdmVzXG4gICAgICAgICAgaWYgKG9wdGlvbnMuZGlyZWN0aXZlcykge1xuICAgICAgICAgICAgZmluYWxPcHRpb25zLmRpcmVjdGl2ZXMgPSBleHRlbmQoXG4gICAgICAgICAgICAgIE9iamVjdC5jcmVhdGUoYmFzZU9wdGlvbnMuZGlyZWN0aXZlcyB8fCBudWxsKSxcbiAgICAgICAgICAgICAgb3B0aW9ucy5kaXJlY3RpdmVzXG4gICAgICAgICAgICApO1xuICAgICAgICAgIH1cbiAgICAgICAgICAvLyBjb3B5IG90aGVyIG9wdGlvbnNcbiAgICAgICAgICBmb3IgKHZhciBrZXkgaW4gb3B0aW9ucykge1xuICAgICAgICAgICAgaWYgKGtleSAhPT0gJ21vZHVsZXMnICYmIGtleSAhPT0gJ2RpcmVjdGl2ZXMnKSB7XG4gICAgICAgICAgICAgIGZpbmFsT3B0aW9uc1trZXldID0gb3B0aW9uc1trZXldO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfVxuXG4gICAgICAgIGZpbmFsT3B0aW9ucy53YXJuID0gd2FybjtcblxuICAgICAgICB2YXIgY29tcGlsZWQgPSBiYXNlQ29tcGlsZSh0ZW1wbGF0ZS50cmltKCksIGZpbmFsT3B0aW9ucyk7XG4gICAgICAgIHtcbiAgICAgICAgICBkZXRlY3RFcnJvcnMoY29tcGlsZWQuYXN0LCB3YXJuKTtcbiAgICAgICAgfVxuICAgICAgICBjb21waWxlZC5lcnJvcnMgPSBlcnJvcnM7XG4gICAgICAgIGNvbXBpbGVkLnRpcHMgPSB0aXBzO1xuICAgICAgICByZXR1cm4gY29tcGlsZWRcbiAgICAgIH1cblxuICAgICAgcmV0dXJuIHtcbiAgICAgICAgY29tcGlsZTogY29tcGlsZSxcbiAgICAgICAgY29tcGlsZVRvRnVuY3Rpb25zOiBjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuKGNvbXBpbGUpXG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLyogICovXG5cbiAgLy8gYGNyZWF0ZUNvbXBpbGVyQ3JlYXRvcmAgYWxsb3dzIGNyZWF0aW5nIGNvbXBpbGVycyB0aGF0IHVzZSBhbHRlcm5hdGl2ZVxuICAvLyBwYXJzZXIvb3B0aW1pemVyL2NvZGVnZW4sIGUuZyB0aGUgU1NSIG9wdGltaXppbmcgY29tcGlsZXIuXG4gIC8vIEhlcmUgd2UganVzdCBleHBvcnQgYSBkZWZhdWx0IGNvbXBpbGVyIHVzaW5nIHRoZSBkZWZhdWx0IHBhcnRzLlxuICB2YXIgY3JlYXRlQ29tcGlsZXIgPSBjcmVhdGVDb21waWxlckNyZWF0b3IoZnVuY3Rpb24gYmFzZUNvbXBpbGUgKFxuICAgIHRlbXBsYXRlLFxuICAgIG9wdGlvbnNcbiAgKSB7XG4gICAgdmFyIGFzdCA9IHBhcnNlKHRlbXBsYXRlLnRyaW0oKSwgb3B0aW9ucyk7XG4gICAgaWYgKG9wdGlvbnMub3B0aW1pemUgIT09IGZhbHNlKSB7XG4gICAgICBvcHRpbWl6ZShhc3QsIG9wdGlvbnMpO1xuICAgIH1cbiAgICB2YXIgY29kZSA9IGdlbmVyYXRlKGFzdCwgb3B0aW9ucyk7XG4gICAgcmV0dXJuIHtcbiAgICAgIGFzdDogYXN0LFxuICAgICAgcmVuZGVyOiBjb2RlLnJlbmRlcixcbiAgICAgIHN0YXRpY1JlbmRlckZuczogY29kZS5zdGF0aWNSZW5kZXJGbnNcbiAgICB9XG4gIH0pO1xuXG4gIC8qICAqL1xuXG4gIHZhciByZWYkMSA9IGNyZWF0ZUNvbXBpbGVyKGJhc2VPcHRpb25zKTtcbiAgdmFyIGNvbXBpbGUgPSByZWYkMS5jb21waWxlO1xuICB2YXIgY29tcGlsZVRvRnVuY3Rpb25zID0gcmVmJDEuY29tcGlsZVRvRnVuY3Rpb25zO1xuXG4gIC8qICAqL1xuXG4gIC8vIGNoZWNrIHdoZXRoZXIgY3VycmVudCBicm93c2VyIGVuY29kZXMgYSBjaGFyIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzXG4gIHZhciBkaXY7XG4gIGZ1bmN0aW9uIGdldFNob3VsZERlY29kZSAoaHJlZikge1xuICAgIGRpdiA9IGRpdiB8fCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICBkaXYuaW5uZXJIVE1MID0gaHJlZiA/IFwiPGEgaHJlZj1cXFwiXFxuXFxcIi8+XCIgOiBcIjxkaXYgYT1cXFwiXFxuXFxcIi8+XCI7XG4gICAgcmV0dXJuIGRpdi5pbm5lckhUTUwuaW5kZXhPZignJiMxMDsnKSA+IDBcbiAgfVxuXG4gIC8vICMzNjYzOiBJRSBlbmNvZGVzIG5ld2xpbmVzIGluc2lkZSBhdHRyaWJ1dGUgdmFsdWVzIHdoaWxlIG90aGVyIGJyb3dzZXJzIGRvbid0XG4gIHZhciBzaG91bGREZWNvZGVOZXdsaW5lcyA9IGluQnJvd3NlciA/IGdldFNob3VsZERlY29kZShmYWxzZSkgOiBmYWxzZTtcbiAgLy8gIzY4Mjg6IGNocm9tZSBlbmNvZGVzIGNvbnRlbnQgaW4gYVtocmVmXVxuICB2YXIgc2hvdWxkRGVjb2RlTmV3bGluZXNGb3JIcmVmID0gaW5Ccm93c2VyID8gZ2V0U2hvdWxkRGVjb2RlKHRydWUpIDogZmFsc2U7XG5cbiAgLyogICovXG5cbiAgdmFyIGlkVG9UZW1wbGF0ZSA9IGNhY2hlZChmdW5jdGlvbiAoaWQpIHtcbiAgICB2YXIgZWwgPSBxdWVyeShpZCk7XG4gICAgcmV0dXJuIGVsICYmIGVsLmlubmVySFRNTFxuICB9KTtcblxuICB2YXIgbW91bnQgPSBWdWUucHJvdG90eXBlLiRtb3VudDtcbiAgVnVlLnByb3RvdHlwZS4kbW91bnQgPSBmdW5jdGlvbiAoXG4gICAgZWwsXG4gICAgaHlkcmF0aW5nXG4gICkge1xuICAgIGVsID0gZWwgJiYgcXVlcnkoZWwpO1xuXG4gICAgLyogaXN0YW5idWwgaWdub3JlIGlmICovXG4gICAgaWYgKGVsID09PSBkb2N1bWVudC5ib2R5IHx8IGVsID09PSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpIHtcbiAgICAgIHdhcm4oXG4gICAgICAgIFwiRG8gbm90IG1vdW50IFZ1ZSB0byA8aHRtbD4gb3IgPGJvZHk+IC0gbW91bnQgdG8gbm9ybWFsIGVsZW1lbnRzIGluc3RlYWQuXCJcbiAgICAgICk7XG4gICAgICByZXR1cm4gdGhpc1xuICAgIH1cblxuICAgIHZhciBvcHRpb25zID0gdGhpcy4kb3B0aW9ucztcbiAgICAvLyByZXNvbHZlIHRlbXBsYXRlL2VsIGFuZCBjb252ZXJ0IHRvIHJlbmRlciBmdW5jdGlvblxuICAgIGlmICghb3B0aW9ucy5yZW5kZXIpIHtcbiAgICAgIHZhciB0ZW1wbGF0ZSA9IG9wdGlvbnMudGVtcGxhdGU7XG4gICAgICBpZiAodGVtcGxhdGUpIHtcbiAgICAgICAgaWYgKHR5cGVvZiB0ZW1wbGF0ZSA9PT0gJ3N0cmluZycpIHtcbiAgICAgICAgICBpZiAodGVtcGxhdGUuY2hhckF0KDApID09PSAnIycpIHtcbiAgICAgICAgICAgIHRlbXBsYXRlID0gaWRUb1RlbXBsYXRlKHRlbXBsYXRlKTtcbiAgICAgICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICAgICAgaWYgKCF0ZW1wbGF0ZSkge1xuICAgICAgICAgICAgICB3YXJuKFxuICAgICAgICAgICAgICAgIChcIlRlbXBsYXRlIGVsZW1lbnQgbm90IGZvdW5kIG9yIGlzIGVtcHR5OiBcIiArIChvcHRpb25zLnRlbXBsYXRlKSksXG4gICAgICAgICAgICAgICAgdGhpc1xuICAgICAgICAgICAgICApO1xuICAgICAgICAgICAgfVxuICAgICAgICAgIH1cbiAgICAgICAgfSBlbHNlIGlmICh0ZW1wbGF0ZS5ub2RlVHlwZSkge1xuICAgICAgICAgIHRlbXBsYXRlID0gdGVtcGxhdGUuaW5uZXJIVE1MO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIHtcbiAgICAgICAgICAgIHdhcm4oJ2ludmFsaWQgdGVtcGxhdGUgb3B0aW9uOicgKyB0ZW1wbGF0ZSwgdGhpcyk7XG4gICAgICAgICAgfVxuICAgICAgICAgIHJldHVybiB0aGlzXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZWwpIHtcbiAgICAgICAgdGVtcGxhdGUgPSBnZXRPdXRlckhUTUwoZWwpO1xuICAgICAgfVxuICAgICAgaWYgKHRlbXBsYXRlKSB7XG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgICAgICBtYXJrKCdjb21waWxlJyk7XG4gICAgICAgIH1cblxuICAgICAgICB2YXIgcmVmID0gY29tcGlsZVRvRnVuY3Rpb25zKHRlbXBsYXRlLCB7XG4gICAgICAgICAgb3V0cHV0U291cmNlUmFuZ2U6IFwiZGV2ZWxvcG1lbnRcIiAhPT0gJ3Byb2R1Y3Rpb24nLFxuICAgICAgICAgIHNob3VsZERlY29kZU5ld2xpbmVzOiBzaG91bGREZWNvZGVOZXdsaW5lcyxcbiAgICAgICAgICBzaG91bGREZWNvZGVOZXdsaW5lc0ZvckhyZWY6IHNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZixcbiAgICAgICAgICBkZWxpbWl0ZXJzOiBvcHRpb25zLmRlbGltaXRlcnMsXG4gICAgICAgICAgY29tbWVudHM6IG9wdGlvbnMuY29tbWVudHNcbiAgICAgICAgfSwgdGhpcyk7XG4gICAgICAgIHZhciByZW5kZXIgPSByZWYucmVuZGVyO1xuICAgICAgICB2YXIgc3RhdGljUmVuZGVyRm5zID0gcmVmLnN0YXRpY1JlbmRlckZucztcbiAgICAgICAgb3B0aW9ucy5yZW5kZXIgPSByZW5kZXI7XG4gICAgICAgIG9wdGlvbnMuc3RhdGljUmVuZGVyRm5zID0gc3RhdGljUmVuZGVyRm5zO1xuXG4gICAgICAgIC8qIGlzdGFuYnVsIGlnbm9yZSBpZiAqL1xuICAgICAgICBpZiAoY29uZmlnLnBlcmZvcm1hbmNlICYmIG1hcmspIHtcbiAgICAgICAgICBtYXJrKCdjb21waWxlIGVuZCcpO1xuICAgICAgICAgIG1lYXN1cmUoKFwidnVlIFwiICsgKHRoaXMuX25hbWUpICsgXCIgY29tcGlsZVwiKSwgJ2NvbXBpbGUnLCAnY29tcGlsZSBlbmQnKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gbW91bnQuY2FsbCh0aGlzLCBlbCwgaHlkcmF0aW5nKVxuICB9O1xuXG4gIC8qKlxuICAgKiBHZXQgb3V0ZXJIVE1MIG9mIGVsZW1lbnRzLCB0YWtpbmcgY2FyZVxuICAgKiBvZiBTVkcgZWxlbWVudHMgaW4gSUUgYXMgd2VsbC5cbiAgICovXG4gIGZ1bmN0aW9uIGdldE91dGVySFRNTCAoZWwpIHtcbiAgICBpZiAoZWwub3V0ZXJIVE1MKSB7XG4gICAgICByZXR1cm4gZWwub3V0ZXJIVE1MXG4gICAgfSBlbHNlIHtcbiAgICAgIHZhciBjb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcbiAgICAgIGNvbnRhaW5lci5hcHBlbmRDaGlsZChlbC5jbG9uZU5vZGUodHJ1ZSkpO1xuICAgICAgcmV0dXJuIGNvbnRhaW5lci5pbm5lckhUTUxcbiAgICB9XG4gIH1cblxuICBWdWUuY29tcGlsZSA9IGNvbXBpbGVUb0Z1bmN0aW9ucztcblxuICByZXR1cm4gVnVlO1xuXG59KSk7XG4iLCIndXNlIHN0cmljdCc7XG5cbnZhciBhbHBoYWJldCA9ICcwMTIzNDU2Nzg5QUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ei1fJy5zcGxpdCgnJylcbiAgLCBsZW5ndGggPSA2NFxuICAsIG1hcCA9IHt9XG4gICwgc2VlZCA9IDBcbiAgLCBpID0gMFxuICAsIHByZXY7XG5cbi8qKlxuICogUmV0dXJuIGEgc3RyaW5nIHJlcHJlc2VudGluZyB0aGUgc3BlY2lmaWVkIG51bWJlci5cbiAqXG4gKiBAcGFyYW0ge051bWJlcn0gbnVtIFRoZSBudW1iZXIgdG8gY29udmVydC5cbiAqIEByZXR1cm5zIHtTdHJpbmd9IFRoZSBzdHJpbmcgcmVwcmVzZW50YXRpb24gb2YgdGhlIG51bWJlci5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGVuY29kZShudW0pIHtcbiAgdmFyIGVuY29kZWQgPSAnJztcblxuICBkbyB7XG4gICAgZW5jb2RlZCA9IGFscGhhYmV0W251bSAlIGxlbmd0aF0gKyBlbmNvZGVkO1xuICAgIG51bSA9IE1hdGguZmxvb3IobnVtIC8gbGVuZ3RoKTtcbiAgfSB3aGlsZSAobnVtID4gMCk7XG5cbiAgcmV0dXJuIGVuY29kZWQ7XG59XG5cbi8qKlxuICogUmV0dXJuIHRoZSBpbnRlZ2VyIHZhbHVlIHNwZWNpZmllZCBieSB0aGUgZ2l2ZW4gc3RyaW5nLlxuICpcbiAqIEBwYXJhbSB7U3RyaW5nfSBzdHIgVGhlIHN0cmluZyB0byBjb252ZXJ0LlxuICogQHJldHVybnMge051bWJlcn0gVGhlIGludGVnZXIgdmFsdWUgcmVwcmVzZW50ZWQgYnkgdGhlIHN0cmluZy5cbiAqIEBhcGkgcHVibGljXG4gKi9cbmZ1bmN0aW9uIGRlY29kZShzdHIpIHtcbiAgdmFyIGRlY29kZWQgPSAwO1xuXG4gIGZvciAoaSA9IDA7IGkgPCBzdHIubGVuZ3RoOyBpKyspIHtcbiAgICBkZWNvZGVkID0gZGVjb2RlZCAqIGxlbmd0aCArIG1hcFtzdHIuY2hhckF0KGkpXTtcbiAgfVxuXG4gIHJldHVybiBkZWNvZGVkO1xufVxuXG4vKipcbiAqIFllYXN0OiBBIHRpbnkgZ3Jvd2luZyBpZCBnZW5lcmF0b3IuXG4gKlxuICogQHJldHVybnMge1N0cmluZ30gQSB1bmlxdWUgaWQuXG4gKiBAYXBpIHB1YmxpY1xuICovXG5mdW5jdGlvbiB5ZWFzdCgpIHtcbiAgdmFyIG5vdyA9IGVuY29kZSgrbmV3IERhdGUoKSk7XG5cbiAgaWYgKG5vdyAhPT0gcHJldikgcmV0dXJuIHNlZWQgPSAwLCBwcmV2ID0gbm93O1xuICByZXR1cm4gbm93ICsnLicrIGVuY29kZShzZWVkKyspO1xufVxuXG4vL1xuLy8gTWFwIGVhY2ggY2hhcmFjdGVyIHRvIGl0cyBpbmRleC5cbi8vXG5mb3IgKDsgaSA8IGxlbmd0aDsgaSsrKSBtYXBbYWxwaGFiZXRbaV1dID0gaTtcblxuLy9cbi8vIEV4cG9zZSB0aGUgYHllYXN0YCwgYGVuY29kZWAgYW5kIGBkZWNvZGVgIGZ1bmN0aW9ucy5cbi8vXG55ZWFzdC5lbmNvZGUgPSBlbmNvZGU7XG55ZWFzdC5kZWNvZGUgPSBkZWNvZGU7XG5tb2R1bGUuZXhwb3J0cyA9IHllYXN0O1xuIiwiLypcbiAqIG1kYy12dWUtd3JhcHBlcjogdjAuMi4wXG4gKiBodHRwczovL2dpdGh1Yi5jb20vajcxMjYvbWRjLXZ1ZS13cmFwcGVyXG4gKiBBIGJhc2ljIHdyYXBwZXIgdG8gdXNlIG1hdGVyaWFsIGNvbXBvbmVudHMgd2l0aCB2dWVqc1xuICogQ29weXJpZ2h0IChjKSAyMDIwIC0gMjAyMSBKZWZmZXJleSBOZXVmZmVyIChnaXRodWIuY29tL2o3MTI2KVxuICogXG4gKiBUaGlzIHByb2dyYW0gaXMgZnJlZSBzb2Z0d2FyZTogeW91IGNhbiByZWRpc3RyaWJ1dGUgaXQgYW5kL29yIG1vZGlmeVxuICogaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAqIHB1Ymxpc2hlZCBieSB0aGUgRnJlZSBTb2Z0d2FyZSBGb3VuZGF0aW9uLCBlaXRoZXIgdmVyc2lvbiAzIG9mIHRoZVxuICogTGljZW5zZSwgb3IgKGF0IHlvdXIgb3B0aW9uKSBhbnkgbGF0ZXIgdmVyc2lvbi5cbiAqIFxuICogVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gKiBidXQgV0lUSE9VVCBBTlkgV0FSUkFOVFk7IHdpdGhvdXQgZXZlbiB0aGUgaW1wbGllZCB3YXJyYW50eSBvZlxuICogTUVSQ0hBTlRBQklMSVRZIG9yIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFLiAgU2VlIHRoZVxuICogR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG4gKiBcbiAqIFlvdSBzaG91bGQgaGF2ZSByZWNlaXZlZCBhIGNvcHkgb2YgdGhlIEdOVSBBZmZlcm8gR2VuZXJhbCBQdWJsaWMgTGljZW5zZVxuICogYWxvbmcgd2l0aCB0aGlzIHByb2dyYW0uICBJZiBub3QsIHNlZSA8aHR0cHM6Ly93d3cuZ251Lm9yZy9saWNlbnNlcy8+LlxuKi9cblxuLy8gd2UgY2FuIHN1cHBvcnQgaW1wb3J0aW5nIG1vZHVsZXMgb3IgdXNpbmcgdGhlIGNkblxuaWYgKHR5cGVvZiBWdWUgPT09ICd1bmRlZmluZWQnKVxuICAgIFZ1ZSA9IHJlcXVpcmUoJ3Z1ZScpO1xuaWYgKHdpbmRvdy5tZGMgPT0gbnVsbCkge1xuICAgIE1EQ1RvcEFwcEJhciA9IHJlcXVpcmUoJ0BtYXRlcmlhbC90b3AtYXBwLWJhcicpLk1EQ1RvcEFwcEJhcjtcbiAgICBNRENSaXBwbGUgPSByZXF1aXJlKCdAbWF0ZXJpYWwvcmlwcGxlJykuTURDUmlwcGxlO1xuICAgIE1EQ1N3aXRjaCA9IHJlcXVpcmUoJ0BtYXRlcmlhbC9zd2l0Y2gnKS5NRENTd2l0Y2g7XG4gICAgTURDQ2hlY2tib3ggPSByZXF1aXJlKCdAbWF0ZXJpYWwvY2hlY2tib3gnKS5NRENDaGVja2JveDtcbiAgICBNRENGb3JtRmllbGQgPSByZXF1aXJlKCdAbWF0ZXJpYWwvZm9ybS1maWVsZCcpLk1EQ0Zvcm1GaWVsZDtcbiAgICBNRENUZXh0RmllbGQgPSByZXF1aXJlKCdAbWF0ZXJpYWwvdGV4dGZpZWxkJykuTURDVGV4dEZpZWxkO1xuICAgIE1EQ1NlbGVjdCA9IHJlcXVpcmUoJ0BtYXRlcmlhbC9zZWxlY3QnKS5NRENTZWxlY3Q7XG4gICAgTURDRGlhbG9nID0gcmVxdWlyZSgnQG1hdGVyaWFsL2RpYWxvZycpLk1EQ0RpYWxvZztcbn1cblxuLy8gVG9wIGFwcCBiYXJcblZ1ZS5jb21wb25lbnQoJ21kYy10b3AtYXBwLWJhcicsIHtcbiAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7fVxuICAgIH0sXG4gICAgcHJvcHM6IFsndGl0bGUnXSxcbiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh3aW5kb3cubWRjICE9IG51bGwpXG4gICAgICAgICAgICBNRENUb3BBcHBCYXIgPSB3aW5kb3cubWRjLnRvcEFwcEJhci5NRENUb3BBcHBCYXI7XG4gICAgICAgIGNvbnN0IHRvcEFwcEJhciA9IG5ldyBNRENUb3BBcHBCYXIodGhpcy4kZWwpO1xuICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IHRoaXMuJHNsb3RzLmVuZC5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kc2xvdHMuZW5kW2ldLmNvbXBvbmVudE9wdGlvbnMudGFnID09ICdtZGMtaWNvbi1idXR0b24nKSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuJHNsb3RzLmVuZFtpXS5jb21wb25lbnRJbnN0YW5jZS5pblRvcEFwcEJhciA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggeyB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRlbXBsYXRlOiBgXG48aGVhZGVyIGNsYXNzPVwibWRjLXRvcC1hcHAtYmFyXCI+XG4gICAgPGRpdiBjbGFzcz1cIm1kYy10b3AtYXBwLWJhcl9fcm93XCI+XG4gICAgICAgIDxzZWN0aW9uIGNsYXNzPVwibWRjLXRvcC1hcHAtYmFyX19zZWN0aW9uIG1kYy10b3AtYXBwLWJhcl9fc2VjdGlvbi0tYWxpZ24tc3RhcnRcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRjLXRvcC1hcHAtYmFyX190aXRsZVwiPnt7dGl0bGV9fTwvc3Bhbj5cbiAgICAgICAgPC9zZWN0aW9uPlxuICAgICAgICA8c2VjdGlvbiBjbGFzcz1cIm1kYy10b3AtYXBwLWJhcl9fc2VjdGlvbiBtZGMtdG9wLWFwcC1iYXJfX3NlY3Rpb24tLWFsaWduLWVuZFwiIHJvbGU9XCJ0b29sYmFyXCI+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwiZW5kXCI+PC9zbG90PlxuICAgICAgICA8L3NlY3Rpb24+XG4gICAgPC9kaXY+XG48L2hlYWRlcj5cbmBcbn0pO1xuXG4vLyBCdXR0b25zXG5WdWUuY29tcG9uZW50KCdtZGMtZmFiJywge1xuICAgIHByb3BzOiBbJ2ljb24nLCAnbGFiZWwnXSxcbiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh3aW5kb3cubWRjICE9IG51bGwpXG4gICAgICAgICAgICBNRENSaXBwbGUgPSB3aW5kb3cubWRjLnJpcHBsZS5NRENSaXBwbGU7XG4gICAgICAgIGNvbnN0IHJpcHBsZSA9IG5ldyBNRENSaXBwbGUodGhpcy4kZWwpO1xuICAgIH0sXG4gICAgdGVtcGxhdGU6IGBcbjxidXR0b24gY2xhc3M9XCJtZGMtZmFiXCIgOmFyaWEtbGFiZWw9XCJsYWJlbCAhPSBudWxsID8gbGFiZWwgOiBpY29uXCIgQGNsaWNrPVwiJGVtaXQoJ2NsaWNrJylcIj5cbiAgICA8ZGl2IGNsYXNzPVwibWRjLWZhYl9fcmlwcGxlXCI+PC9kaXY+XG4gICAgPHNwYW4gY2xhc3M9XCJtZGMtZmFiX19pY29uIG1hdGVyaWFsLWljb25zXCI+e3tpY29ufX08L3NwYW4+XG48L2J1dHRvbj5cbmBcbn0pO1xuXG5WdWUuY29tcG9uZW50KCdtZGMtaWNvbi1idXR0b24nLCB7XG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgaW5Ub3BBcHBCYXI6IGZhbHNlXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHByb3BzOiBbJ2ljb24nXSxcbiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh3aW5kb3cubWRjICE9IG51bGwpXG4gICAgICAgICAgICBNRENSaXBwbGUgPSB3aW5kb3cubWRjLnJpcHBsZS5NRENSaXBwbGU7XG4gICAgICAgIGNvbnN0IGljb25CdXR0b25SaXBwbGUgPSBuZXcgTURDUmlwcGxlKHRoaXMuJGVsKTtcbiAgICAgICAgaWNvbkJ1dHRvblJpcHBsZS51bmJvdW5kZWQgPSB0cnVlO1xuICAgIH0sXG4gICAgdGVtcGxhdGU6IGA8YnV0dG9uIGNsYXNzPVwibWRjLWljb24tYnV0dG9uIG1hdGVyaWFsLWljb25zXCIgOmNsYXNzPVwieydtZGMtdG9wLWFwcC1iYXJfX2FjdGlvbi1pdGVtJzogaW5Ub3BBcHBCYXJ9XCIgQGNsaWNrPVwiJGVtaXQoJ2NsaWNrJylcIj48ZGl2IGNsYXNzPVwibWRjLWljb24tYnV0dG9uX19yaXBwbGVcIj48L2Rpdj57e2ljb259fTwvYnV0dG9uPmBcbn0pO1xuXG5WdWUuY29tcG9uZW50KCdtZGMtYnV0dG9uJywge1xuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGluRGlhbG9nOiBmYWxzZVxuICAgICAgICB9XG4gICAgfSxcbiAgICBwcm9wczogWydvdXRsaW5lZCcsICdyYWlzZWQnLCAndW5lbGV2YXRlZCcsICdpY29uJywgJ2Rpc2FibGVkJ10sXG4gICAgbW91bnRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAod2luZG93Lm1kYyAhPSBudWxsKVxuICAgICAgICAgICAgTURDUmlwcGxlID0gd2luZG93Lm1kYy5yaXBwbGUuTURDUmlwcGxlO1xuICAgICAgICBjb25zdCBidXR0b25SaXBwbGUgPSBuZXcgTURDUmlwcGxlKHRoaXMuJGVsKTtcbiAgICB9LFxuICAgIHRlbXBsYXRlOiBgXG48YnV0dG9uIGNsYXNzPVwibWRjLWJ1dHRvblwiIDpjbGFzcz1cInsnbWRjLWRpYWxvZ19fYnV0dG9uJzogaW5EaWFsb2csICdtZGMtYnV0dG9uLS1vdXRsaW5lZCc6IG91dGxpbmVkLCAnbWRjLWJ1dHRvbi0tcmFpc2VkJzogcmFpc2VkLCAnbWRjLWJ1dHRvbi0tdW5lbGV2YXRlZCc6IHVuZWxldmF0ZWR9XCIgQGNsaWNrPVwiJGVtaXQoJ2NsaWNrJylcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZFwiPlxuICAgIDxkaXYgY2xhc3M9XCJtZGMtYnV0dG9uX19yaXBwbGVcIj48L2Rpdj5cbiAgICA8aSB2LWlmPVwiaWNvbiAhPSBudWxsXCIgY2xhc3M9XCJtYXRlcmlhbC1pY29ucyBtZGMtYnV0dG9uX19pY29uXCIgYXJpYS1oaWRkZW49XCJ0cnVlXCI+e3tpY29ufX08L2k+XG4gICAgPHNwYW4gY2xhc3M9XCJtZGMtYnV0dG9uX19sYWJlbFwiPjxzbG90Pjwvc2xvdD48L3NwYW4+XG48L2J1dHRvbj5cbmBcbn0pO1xuXG4vLyBJbnB1dHNcblZ1ZS5jb21wb25lbnQoJ21kYy1zd2l0Y2gnLCB7XG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgc3dpdGNoQ29udHJvbDogbnVsbFxuICAgICAgICB9XG4gICAgfSxcbiAgICBwcm9wczogWyd2YWx1ZScsICdsYWJlbCcsICdkaXNhYmxlZCddLFxuICAgIG1vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgaWYgKHdpbmRvdy5tZGMgIT0gbnVsbClcbiAgICAgICAgICAgIE1EQ1N3aXRjaCA9IHdpbmRvdy5tZGMuc3dpdGNoQ29udHJvbC5NRENTd2l0Y2g7XG4gICAgICAgIHRoaXMuc3dpdGNoQ29udHJvbCA9IG5ldyBNRENTd2l0Y2godGhpcy4kZWwuY2hpbGROb2Rlc1swXSk7XG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogYFxuPGRpdiBzdHlsZT1cIm1hcmdpbjogMjBweCAwcHg7XCI+XG4gICAgPGRpdiBjbGFzcz1cIm1kYy1zd2l0Y2hcIiA6Y2xhc3M9XCJ7J21kYy1zd2l0Y2gtLWNoZWNrZWQnOiB2YWx1ZSwgJ21kYy1zd2l0Y2gtLWRpc2FibGVkJzogZGlzYWJsZWR9XCIgc3R5bGU9XCJtYXJnaW4tcmlnaHQ6MjBweDtcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1kYy1zd2l0Y2hfX3RyYWNrXCI+PC9kaXY+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZGMtc3dpdGNoX190aHVtYi11bmRlcmxheVwiPlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kYy1zd2l0Y2hfX3RodW1iXCI+PC9kaXY+XG4gICAgICAgICAgICA8aW5wdXQgdHlwZT1cImNoZWNrYm94XCIgOmlkPVwiJ3N3aXRjaCcgKyBfdWlkXCIgY2xhc3M9XCJtZGMtc3dpdGNoX19uYXRpdmUtY29udHJvbFwiIHJvbGU9XCJzd2l0Y2hcIiA6YXJpYS1jaGVja2VkPVwidmFsdWVcIiA6Y2hlY2tlZD1cInZhbHVlXCIgQGNoYW5nZT1cIiRlbWl0KCdpbnB1dCcsICRldmVudC50YXJnZXQuY2hlY2tlZCk7ICRlbWl0KCdjaGFuZ2UnLCAkZXZlbnQudGFyZ2V0LmNoZWNrZWQpXCIgOmRpc2FibGVkPVwiZGlzYWJsZWRcIj5cbiAgICAgICAgPC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGxhYmVsIHYtaWY9XCJsYWJlbCAhPSBudWxsXCIgOmZvcj1cIidzd2l0Y2gnICsgX3VpZFwiPnt7bGFiZWx9fTwvbGFiZWw+XG48L2Rpdj5cbmBcbn0pO1xuXG5WdWUuY29tcG9uZW50KCdtZGMtY2hlY2tib3gnLCB7XG4gICAgcHJvcHM6IFsndmFsdWUnLCAnbGFiZWwnLCAnZGlzYWJsZWQnXSxcbiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh3aW5kb3cubWRjICE9IG51bGwpXG4gICAgICAgICAgICBNRENDaGVja2JveCA9IHdpbmRvdy5tZGMuY2hlY2tib3guTURDQ2hlY2tib3g7XG4gICAgICAgIGlmICh3aW5kb3cubWRjICE9IG51bGwpXG4gICAgICAgICAgICBNRENGb3JtRmllbGQgPSB3aW5kb3cubWRjLmZvcm1GaWVsZC5NRENGb3JtRmllbGQ7XG4gICAgICAgIGNvbnN0IGNoZWNrYm94ID0gbmV3IE1EQ0NoZWNrYm94KHRoaXMuJGVsLmNoaWxkTm9kZXNbMF0pO1xuICAgICAgICBjb25zdCBmb3JtRmllbGQgPSBuZXcgTURDRm9ybUZpZWxkKHRoaXMuJGVsKTtcbiAgICAgICAgZm9ybUZpZWxkLmlucHV0ID0gY2hlY2tib3g7XG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogYFxuPGRpdiBjbGFzcz1cIm1kYy1mb3JtLWZpZWxkXCI+XG4gICAgPGRpdiBjbGFzcz1cIm1kYy1jaGVja2JveFwiPlxuICAgICAgICA8aW5wdXQgOmNoZWNrZWQ9XCJ2YWx1ZVwiIHR5cGU9XCJjaGVja2JveFwiIGNsYXNzPVwibWRjLWNoZWNrYm94X19uYXRpdmUtY29udHJvbFwiIDppZD1cIidtZGMtY2hlY2tib3hfJyArIF91aWRcIiA6ZGlzYWJsZWQ9XCJkaXNhYmxlZFwiIEBjaGFuZ2U9XCIkZW1pdCgnaW5wdXQnLCAkZXZlbnQudGFyZ2V0LmNoZWNrZWQpOyAkZW1pdCgnY2hhbmdlJywgJGV2ZW50LnRhcmdldC5jaGVja2VkKVwiIC8+XG4gICAgICAgIDxkaXYgY2xhc3M9XCJtZGMtY2hlY2tib3hfX2JhY2tncm91bmRcIj5cbiAgICAgICAgICAgIDxzdmcgY2xhc3M9XCJtZGMtY2hlY2tib3hfX2NoZWNrbWFya1wiIHZpZXdCb3g9XCIwIDAgMjQgMjRcIj5cbiAgICAgICAgICAgICAgICA8cGF0aCBjbGFzcz1cIm1kYy1jaGVja2JveF9fY2hlY2ttYXJrLXBhdGhcIiBmaWxsPVwibm9uZVwiIGQ9XCJNMS43MywxMi45MSA4LjEsMTkuMjggMjIuNzksNC41OVwiIC8+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZGMtY2hlY2tib3hfX21peGVkbWFya1wiPjwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1kYy1jaGVja2JveF9fcmlwcGxlXCI+PC9kaXY+XG4gICAgPC9kaXY+XG4gICAgPGxhYmVsIDpmb3I9XCInbWRjLWNoZWNrYm94XycgKyBfdWlkXCIgdi1odG1sPVwibGFiZWxcIj48L2xhYmVsPlxuPC9kaXY+XG5gXG59KTtcblxuVnVlLmNvbXBvbmVudCgnbWRjLXRleHQtZmllbGQnLCB7XG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgdGV4dEZpZWxkOiBudWxsLFxuICAgICAgICAgICAgdmFsaWQ6IHRydWUsXG4gICAgICAgIH1cbiAgICB9LFxuICAgIHByb3BzOiBbJ3ZhbHVlJywgJ2xhYmVsJywgJ2Rpc2FibGVkJywgJ3JlcXVpcmVkJywgJ21heGxlbmd0aCcsICd0eXBlJywgJ21pbicsICdtYXgnLCAnb3V0bGluZWQnLCAnaGVscGVyJywgJ2Vycm9yJ10sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgZXJyb3I6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwgIT0gbnVsbCkge1xuICAgICAgICAgICAgICAgIHRoaXMudGV4dEZpZWxkLnZhbGlkID0gZmFsc2U7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZCA9IGZhbHNlO1xuICAgICAgICAgICAgfSBlbHNlIHtcbiAgICAgICAgICAgICAgICB0aGlzLnRleHRGaWVsZC52YWxpZCA9IHRydWU7XG4gICAgICAgICAgICAgICAgdGhpcy52YWxpZCA9IHRydWU7XG4gICAgICAgICAgICB9XG4gICAgICAgIH0sXG4gICAgfSxcbiAgICBtb3VudGVkOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIGlmICh3aW5kb3cubWRjICE9IG51bGwpXG4gICAgICAgICAgICBNRENUZXh0RmllbGQgPSB3aW5kb3cubWRjLnRleHRGaWVsZC5NRENUZXh0RmllbGQ7XG4gICAgICAgIHRoaXMudGV4dEZpZWxkID0gbmV3IE1EQ1RleHRGaWVsZCh0aGlzLiRlbC5maXJzdENoaWxkKTtcbiAgICAgICAgaWYgKHRoaXMuZXJyb3IgIT0gbnVsbCkge1xuICAgICAgICAgICAgdGhpcy50ZXh0RmllbGQudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgICAgIHRoaXMudmFsaWQgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH0sXG4gICAgdGVtcGxhdGU6IGBcbjxkaXYgc3R5bGU9XCJkaXNwbGF5OiBpbmxpbmUtYmxvY2s7IHZlcnRpY2FsLWFsaWduOiB0b3A7XCI+XG4gICAgPGxhYmVsIDppZD1cIidtZGMtdGV4dC1maWVsZC1sXycgKyBfdWlkXCIgY2xhc3M9XCJtZGMtdGV4dC1maWVsZFwiXG4gICAgICAgIDpjbGFzcz1cInsnbWRjLXRleHQtZmllbGQtLWZpbGxlZCc6ICFvdXRsaW5lZCwgJ21kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCc6IG91dGxpbmVkfVwiPlxuICAgICAgICA8c3BhbiB2LWlmPVwiIW91dGxpbmVkXCIgY2xhc3M9XCJtZGMtdGV4dC1maWVsZF9fcmlwcGxlXCI+PC9zcGFuPlxuICAgICAgICA8c3BhbiB2LWlmPVwib3V0bGluZWRcIiBjbGFzcz1cIm1kYy1ub3RjaGVkLW91dGxpbmVcIj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZ1wiPjwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRjLW5vdGNoZWQtb3V0bGluZV9fbm90Y2hcIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kYy1mbG9hdGluZy1sYWJlbFwiIDppZD1cIidtZGMtdGV4dC1maWVsZF8nICsgX3VpZFwiPnt7bGFiZWx9fTwvc3Bhbj5cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRjLW5vdGNoZWQtb3V0bGluZV9fdHJhaWxpbmdcIj48L3NwYW4+XG4gICAgICAgIDwvc3Bhbj5cbiAgICAgICAgPHNwYW4gdi1pZj1cIiFvdXRsaW5lZFwiIGNsYXNzPVwibWRjLWZsb2F0aW5nLWxhYmVsXCIgOmlkPVwiJ21kYy10ZXh0LWZpZWxkXycgKyBfdWlkXCI+e3tsYWJlbH19PC9zcGFuPlxuICAgICAgICA8aW5wdXQgY2xhc3M9XCJtZGMtdGV4dC1maWVsZF9faW5wdXRcIiA6dHlwZT1cInR5cGUgIT0gbnVsbCA/IHR5cGUgOiAndGV4dCdcIlxuICAgICAgICAgICAgOmFyaWEtbGFiZWxsZWRieT1cIidtZGMtdGV4dC1maWVsZF8nICsgX3VpZFwiIDphcmlhLWNvbnRyb2xzPVwiaGVscGVyICE9IG51bGwgPyAnbWRjLXRleHQtZmllbGQtaGVscGVyXycgKyBfdWlkIDogJydcIlxuICAgICAgICAgICAgOmFyaWEtZGVzY3JpYmVkYnk9XCJoZWxwZXIgIT0gbnVsbCA/ICdtZGMtdGV4dC1maWVsZC1oZWxwZXJfJyArIF91aWQgOiAnJ1wiIEBrZXl1cD1cIiRlbWl0KCdrZXl1cCcsICRldmVudClcIlxuICAgICAgICAgICAgQGlucHV0PVwiJGVtaXQoJ2lucHV0JywgJGV2ZW50LnRhcmdldC52YWx1ZSlcIiA6cmVxdWlyZWQ9XCJyZXF1aXJlZFwiIDpkaXNhYmxlZD1cImRpc2FibGVkXCJcbiAgICAgICAgICAgIDptYXhsZW5ndGg9XCJtYXhsZW5ndGhcIiA6dmFsdWU9XCJ2YWx1ZVwiIDptaW49XCJtaW5cIiA6bWF4PVwibWF4XCIgQGZvY3Vzb3V0PVwidmFsaWQgPSB0cnVlXCI+XG4gICAgICAgIDxzcGFuIHYtaWY9XCIhb3V0bGluZWRcIiBjbGFzcz1cIm1kYy1saW5lLXJpcHBsZVwiPjwvc3Bhbj5cbiAgICA8L2xhYmVsPlxuICAgIDxkaXYgY2xhc3M9XCJtZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZVwiIHYtaWY9XCJoZWxwZXIgIT0gbnVsbCB8fCAhdmFsaWRcIj5cbiAgICAgICAgPGRpdiBjbGFzcz1cIm1kYy10ZXh0LWZpZWxkLWhlbHBlci10ZXh0XCIgOmlkPVwiJ21kYy10ZXh0LWZpZWxkLWhlbHBlcl8nICsgX3VpZFwiIGFyaWEtaGlkZGVuPVwidHJ1ZVwiXG4gICAgICAgICAgICA6c3R5bGU9XCIhdmFsaWQgPyB7IGNvbG9yOiAndmFyKC0tbWRjLXRoZW1lLWVycm9yKScgfSA6IG51bGxcIiA6Y2xhc3M9XCJ7ICdtZGMtdGV4dC1maWVsZC1oZWxwZXItdGV4dC0tcGVyc2lzdGVudCc6ICF2YWxpZCB9XCI+e3t2YWxpZCA/IGhlbHBlciA6IGVycm9yfX08L2Rpdj5cbiAgICA8L2Rpdj5cbjwvZGl2PlxuYFxufSk7XG5cblZ1ZS5jb21wb25lbnQoJ21kYy1zZWxlY3QnLCB7XG4gICAgZGF0YTogZnVuY3Rpb24gKCkge1xuICAgICAgICByZXR1cm4ge31cbiAgICB9LFxuICAgIHByb3BzOiBbJ3ZhbHVlJywgJ2xhYmVsJywgJ2Rpc2FibGVkJywgJ3JlcXVpcmVkJ10sXG4gICAgbW91bnRlZDogZnVuY3Rpb24gKCkge1xuICAgICAgICB2YXIgc2VsZWN0ZWQgPSB0aGlzLiRlbC5xdWVyeVNlbGVjdG9yKCcubWRjLXNlbGVjdF9fbWVudS5tZGMtbWVudS5tZGMtbWVudS1zdXJmYWNlID4gdWwgPiBsaS5tZGMtbGlzdC1pdGVtLS1zZWxlY3RlZCcpO1xuICAgICAgICBpZiAoc2VsZWN0ZWQuZ2V0QXR0cmlidXRlKCdkYXRhLXZhbHVlJykgIT0gdGhpcy52YWx1ZSkge1xuICAgICAgICAgICAgdmFyIGVsID0gdGhpcy4kZWwucXVlcnlTZWxlY3RvcignLm1kYy1zZWxlY3RfX21lbnUubWRjLW1lbnUubWRjLW1lbnUtc3VyZmFjZSA+IHVsID4gbGlbZGF0YS12YWx1ZT1cIicgKyB0aGlzLnZhbHVlICsgJ1wiXScpO1xuICAgICAgICAgICAgaWYgKGVsICE9IG51bGwpIHtcbiAgICAgICAgICAgICAgICBzZWxlY3RlZC5jbGFzc0xpc3QucmVtb3ZlKCdtZGMtbGlzdC1pdGVtLS1zZWxlY3RlZCcpO1xuICAgICAgICAgICAgICAgIGVsLmNsYXNzTGlzdC5hZGQoJ21kYy1saXN0LWl0ZW0tLXNlbGVjdGVkJyk7XG4gICAgICAgICAgICAgICAgc2VsZWN0ZWQuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ2ZhbHNlJyk7XG4gICAgICAgICAgICAgICAgZWwuc2V0QXR0cmlidXRlKCdhcmlhLXNlbGVjdGVkJywgJ3RydWUnKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAod2luZG93Lm1kYyAhPSBudWxsKVxuICAgICAgICAgICAgTURDU2VsZWN0ID0gd2luZG93Lm1kYy5zZWxlY3QuTURDU2VsZWN0O1xuICAgICAgICBjb25zdCBzZWxlY3QgPSBuZXcgTURDU2VsZWN0KHRoaXMuJGVsKTtcbiAgICAgICAgc2VsZWN0Lmxpc3RlbignTURDU2VsZWN0OmNoYW5nZScsICgpID0+IHtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2lucHV0Jywgc2VsZWN0LnZhbHVlKTtcbiAgICAgICAgfSk7XG4gICAgfSxcbiAgICB0ZW1wbGF0ZTogYFxuPGRpdiBjbGFzcz1cIm1kYy1zZWxlY3QgbWRjLXNlbGVjdC0tZmlsbGVkIGRlbW8td2lkdGgtY2xhc3NcIj5cbiAgICA8ZGl2IGNsYXNzPVwibWRjLXNlbGVjdF9fYW5jaG9yXCIgcm9sZT1cImJ1dHRvblwiIGFyaWEtaGFzcG9wdXA9XCJsaXN0Ym94XCIgYXJpYS1leHBhbmRlZD1cImZhbHNlXCJcbiAgICAgICAgYXJpYS1sYWJlbGxlZGJ5PVwiZGVtby1sYWJlbCBkZW1vLXNlbGVjdGVkLXRleHRcIj5cbiAgICAgICAgPHNwYW4gY2xhc3M9XCJtZGMtc2VsZWN0X19yaXBwbGVcIj48L3NwYW4+XG4gICAgICAgIDxzcGFuIGlkPVwiZGVtby1sYWJlbFwiIGNsYXNzPVwibWRjLWZsb2F0aW5nLWxhYmVsXCI+e3tsYWJlbH19PC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cIm1kYy1zZWxlY3RfX3NlbGVjdGVkLXRleHQtY29udGFpbmVyXCI+XG4gICAgICAgICAgICA8c3BhbiBpZD1cImRlbW8tc2VsZWN0ZWQtdGV4dFwiIGNsYXNzPVwibWRjLXNlbGVjdF9fc2VsZWN0ZWQtdGV4dFwiPjwvc3Bhbj5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cIm1kYy1zZWxlY3RfX2Ryb3Bkb3duLWljb25cIiBzdHlsZT1cInJpZ2h0OiAwOyBwb3NpdGlvbjogYWJzb2x1dGU7XCI+XG4gICAgICAgICAgICA8c3ZnIGNsYXNzPVwibWRjLXNlbGVjdF9fZHJvcGRvd24taWNvbi1ncmFwaGljXCIgdmlld0JveD1cIjcgMTAgMTAgNVwiIGZvY3VzYWJsZT1cImZhbHNlXCI+XG4gICAgICAgICAgICAgICAgPHBvbHlnb24gY2xhc3M9XCJtZGMtc2VsZWN0X19kcm9wZG93bi1pY29uLWluYWN0aXZlXCIgc3Ryb2tlPVwibm9uZVwiIGZpbGwtcnVsZT1cImV2ZW5vZGRcIlxuICAgICAgICAgICAgICAgICAgICBwb2ludHM9XCI3IDEwIDEyIDE1IDE3IDEwXCI+XG4gICAgICAgICAgICAgICAgPC9wb2x5Z29uPlxuICAgICAgICAgICAgICAgIDxwb2x5Z29uIGNsYXNzPVwibWRjLXNlbGVjdF9fZHJvcGRvd24taWNvbi1hY3RpdmVcIiBzdHJva2U9XCJub25lXCIgZmlsbC1ydWxlPVwiZXZlbm9kZFwiXG4gICAgICAgICAgICAgICAgICAgIHBvaW50cz1cIjcgMTUgMTIgMTAgMTcgMTVcIj5cbiAgICAgICAgICAgICAgICA8L3BvbHlnb24+XG4gICAgICAgICAgICA8L3N2Zz5cbiAgICAgICAgPC9zcGFuPlxuICAgICAgICA8c3BhbiBjbGFzcz1cIm1kYy1saW5lLXJpcHBsZVwiPjwvc3Bhbj5cbiAgICA8L2Rpdj5cblxuICAgIDxkaXYgY2xhc3M9XCJtZGMtc2VsZWN0X19tZW51IG1kYy1tZW51IG1kYy1tZW51LXN1cmZhY2UgbWRjLW1lbnUtc3VyZmFjZS0tZnVsbHdpZHRoXCI+XG4gICAgICAgIDx1bCBjbGFzcz1cIm1kYy1saXN0XCIgcm9sZT1cImxpc3Rib3hcIiBhcmlhLWxhYmVsPVwiRm9vZCBwaWNrZXIgbGlzdGJveFwiPlxuICAgICAgICAgICAgPGxpIGNsYXNzPVwibWRjLWxpc3QtaXRlbSBtZGMtbGlzdC1pdGVtLS1zZWxlY3RlZFwiIGFyaWEtc2VsZWN0ZWQ9XCJ0cnVlXCIgZGF0YS12YWx1ZT1cIlwiIHJvbGU9XCJvcHRpb25cIj5cbiAgICAgICAgICAgICAgICA8c3BhbiBjbGFzcz1cIm1kYy1saXN0LWl0ZW1fX3JpcHBsZVwiPjwvc3Bhbj5cbiAgICAgICAgICAgIDwvbGk+XG4gICAgICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgICAgIDwvdWw+XG4gICAgPC9kaXY+XG48L2Rpdj5cbmBcbn0pO1xuXG5WdWUuY29tcG9uZW50KCdtZGMtc2VsZWN0LW9wdGlvbicsIHtcbiAgICBkYXRhOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJldHVybiB7fVxuICAgIH0sXG4gICAgcHJvcHM6IFsndmFsdWUnLCAnbGFiZWwnLCAnZGlzYWJsZWQnXSxcbiAgICB0ZW1wbGF0ZTogYFxuPGxpIGNsYXNzPVwibWRjLWxpc3QtaXRlbVwiIGFyaWEtc2VsZWN0ZWQ9XCJmYWxzZVwiIDpkYXRhLXZhbHVlPVwidmFsdWVcIiByb2xlPVwib3B0aW9uXCI+XG4gICAgPHNwYW4gY2xhc3M9XCJtZGMtbGlzdC1pdGVtX19yaXBwbGVcIj48L3NwYW4+XG4gICAgPHNwYW4gY2xhc3M9XCJtZGMtbGlzdC1pdGVtX190ZXh0XCI+XG4gICAgICAgIHt7bGFiZWx9fVxuICAgIDwvc3Bhbj5cbjwvbGk+XG5gXG59KTtcblxuLy8gRGlhbG9nXG5WdWUuY29tcG9uZW50KCdtZGMtZGlhbG9nJywge1xuICAgIGRhdGE6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgcmV0dXJuIHtcbiAgICAgICAgICAgIGRpYWxvZzogbnVsbFxuICAgICAgICB9XG4gICAgfSxcbiAgICBwcm9wczogWyd2YWx1ZScsICdvcGVuJywgJ3RpdGxlJywgJ2VzY2FwZUtleUFjdGlvbicsICdzY3JpbUNsaWNrQWN0aW9uJ10sXG4gICAgd2F0Y2g6IHtcbiAgICAgICAgdmFsdWU6IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIGlmICh2YWwpXG4gICAgICAgICAgICAgICAgdGhpcy5kaWFsb2cub3BlbigpO1xuICAgICAgICB9LFxuICAgICAgICBvcGVuOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICBpZiAodmFsKVxuICAgICAgICAgICAgICAgIHRoaXMuZGlhbG9nLm9wZW4oKTtcbiAgICAgICAgfSxcbiAgICAgICAgZXNjYXBlS2V5QWN0aW9uOiBmdW5jdGlvbiAodmFsKSB7XG4gICAgICAgICAgICB0aGlzLmRpYWxvZy5lc2NhcGVLZXlBY3Rpb24gPSB2YWw7XG4gICAgICAgIH0sXG4gICAgICAgIHNjcmltQ2xpY2tBY3Rpb246IGZ1bmN0aW9uICh2YWwpIHtcbiAgICAgICAgICAgIHRoaXMuZGlhbG9nLnNjcmltQ2xpY2tBY3Rpb24gPSB2YWw7XG4gICAgICAgIH1cbiAgICB9LFxuICAgIG1vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBpZiAod2luZG93Lm1kYyAhPSBudWxsKVxuICAgICAgICAgICAgTURDRGlhbG9nID0gd2luZG93Lm1kYy5kaWFsb2cuTURDRGlhbG9nO1xuICAgICAgICB0aGlzLmRpYWxvZyA9IG5ldyBNRENEaWFsb2codGhpcy4kZWwpO1xuICAgICAgICB0aGlzLmRpYWxvZy5lc2NhcGVLZXlBY3Rpb24gPSB0aGlzLmVzY2FwZUtleUFjdGlvbjtcbiAgICAgICAgdGhpcy5kaWFsb2cuc2NyaW1DbGlja0FjdGlvbiA9IHRoaXMuc2NyaW1DbGlja0FjdGlvbjtcbiAgICAgICAgdGhpcy5kaWFsb2cubGlzdGVuKCdNRENEaWFsb2c6Y2xvc2VkJywgZSA9PiB7XG4gICAgICAgICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIGZhbHNlKTtcbiAgICAgICAgICAgIHRoaXMuJGVtaXQoJ2Nsb3NlZCcsIGUuZGV0YWlsKTtcbiAgICAgICAgfSk7XG4gICAgICAgIHRoaXMuZGlhbG9nLmxpc3RlbignTURDRGlhbG9nOm9wZW5lZCcsIGUgPT4ge1xuICAgICAgICAgICAgY29uc3Qgc3dpdGNoRWxlbXMgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcjbWRjLWRpYWxvZ18nICsgdGhpcy5fdWlkICsgJyAubWRjLXN3aXRjaCcpO1xuICAgICAgICAgICAgZm9yIChpID0gMDsgaSA8IHN3aXRjaEVsZW1zLmxlbmd0aDsgKytpKSB7XG4gICAgICAgICAgICAgICAgaWYgKHN3aXRjaEVsZW1zW2ldICE9IG51bGwpIHsgbWRjLnN3aXRjaENvbnRyb2wuTURDU3dpdGNoLmF0dGFjaFRvKHN3aXRjaEVsZW1zW2ldKS5sYXlvdXQ7IH1cbiAgICAgICAgICAgIH1cbiAgICAgICAgfSk7XG4gICAgICAgIGZvciAodmFyIGkgPSAwOyBpIDwgdGhpcy4kc2xvdHMuYWN0aW9ucy5sZW5ndGg7IGkrKykge1xuICAgICAgICAgICAgdHJ5IHtcbiAgICAgICAgICAgICAgICBpZiAodGhpcy4kc2xvdHMuYWN0aW9uc1tpXS5jb21wb25lbnRPcHRpb25zLnRhZyA9PSAnbWRjLWJ1dHRvbicpIHtcbiAgICAgICAgICAgICAgICAgICAgdGhpcy4kc2xvdHMuYWN0aW9uc1tpXS5jb21wb25lbnRJbnN0YW5jZS5pbkRpYWxvZyA9IHRydWU7XG4gICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgY2F0Y2ggeyB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIHRlbXBsYXRlOiBgXG48ZGl2IGNsYXNzPVwibWRjLWRpYWxvZ1wiIDppZD1cIidtZGMtZGlhbG9nXycgKyBfdWlkXCI+XG4gICAgPGRpdiBjbGFzcz1cIm1kYy1kaWFsb2dfX2NvbnRhaW5lclwiPlxuICAgICAgICA8ZGl2IGNsYXNzPVwibWRjLWRpYWxvZ19fc3VyZmFjZVwiIHJvbGU9XCJhbGVydGRpYWxvZ1wiIGFyaWEtbW9kYWw9XCJ0cnVlXCIgOmFyaWEtbGFiZWxsZWRieT1cIidkaWFsb2cnICsgX3VpZCArICctdGl0bGUnXCJcbiAgICAgICAgICAgIGFyaWEtZGVzY3JpYmVkYnk9XCInZGlhbG9nJyArIF91aWQgKyAnLWNvbnRlbnQnXCI+XG4gICAgICAgICAgICA8c2xvdCBuYW1lPVwiaGVhZGVyXCIgLz5cbiAgICAgICAgICAgIDxzcGFuIGNsYXNzPVwibWRjLXR5cG9ncmFwaHktLWhlYWRsaW5lNSBtZGMtZGlhbG9nX190aXRsZVwiIHYtaWY9XCJ0aXRsZSAhPSBudWxsXCIgOmlkPVwiJ2RpYWxvZycgKyBfdWlkICsgJy10aXRsZSdcIj5cbiAgICAgICAgICAgICAgICB7e3RpdGxlfX1cbiAgICAgICAgICAgIDwvc3Bhbj5cbiAgICAgICAgICAgIDxkaXYgY2xhc3M9XCJtZGMtZGlhbG9nX19jb250ZW50XCIgOmlkPVwiJ2RpYWxvZycgKyBfdWlkICsgJy1jb250ZW50J1wiPlxuICAgICAgICAgICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICAgICAgPGRpdiBjbGFzcz1cIm1kYy1kaWFsb2dfX2FjdGlvbnNcIj5cbiAgICAgICAgICAgICAgICA8c2xvdCBuYW1lPVwiYWN0aW9uc1wiPjwvc2xvdD5cbiAgICAgICAgICAgIDwvZGl2PlxuICAgICAgICA8L2Rpdj5cbiAgICA8L2Rpdj5cbiAgICA8ZGl2IGNsYXNzPVwibWRjLWRpYWxvZ19fc2NyaW1cIj48L2Rpdj5cbjwvZGl2PlxuYFxufSk7XG5cbi8vIENhcmRcblZ1ZS5jb21wb25lbnQoJ21kYy1jYXJkJywge1xuICAgIHRlbXBsYXRlOiBgXG48ZGl2IGNsYXNzPVwibWRjLWNhcmRcIj5cbiAgICA8c2xvdD48L3Nsb3Q+XG48L2Rpdj5cbmBcbn0pO1xuXG4vLyBUeXBvZ3JhcGh5XG5mb3IgKHZhciBpID0gMTsgaSA8PSA2OyBpKyspIHtcbiAgICBWdWUuY29tcG9uZW50KGBtZGMtaCR7aX1gLCB7XG4gICAgICAgIHRlbXBsYXRlOiBgXG4gICAgPGgke2l9IGNsYXNzPVwibWRjLXR5cG9ncmFwaHktLWhlYWRsaW5lJHtpfVwiPlxuICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPC9oJHtpfT5cbiAgICBgXG4gICAgfSk7XG59XG5cbmZvciAodmFyIGkgPSAxOyBpIDw9IDI7IGkrKykge1xuICAgIFZ1ZS5jb21wb25lbnQoYG1kYy1zdWJ0aXRsZSR7aX1gLCB7XG4gICAgICAgIHRlbXBsYXRlOiBgXG4gICAgPGg2IGNsYXNzPVwibWRjLXR5cG9ncmFwaHktLXN1YnRpdGxlJHtpfVwiPlxuICAgICAgICA8c2xvdD48L3Nsb3Q+XG4gICAgPC9oNj5cbiAgICBgXG4gICAgfSk7XG4gICAgVnVlLmNvbXBvbmVudChgbWRjLWJvZHkke2l9YCwge1xuICAgICAgICB0ZW1wbGF0ZTogYFxuICAgIDxwIGNsYXNzPVwibWRjLXR5cG9ncmFwaHktLWJvZHkke2l9XCI+XG4gICAgICAgIDxzbG90Pjwvc2xvdD5cbiAgICA8L3A+XG4gICAgYFxuICAgIH0pO1xufVxuXG5WdWUuY29tcG9uZW50KCdtZGMtb3ZlcmxpbmUnLCB7XG4gICAgdGVtcGxhdGU6IGBcbjxzcGFuIGNsYXNzPVwibWRjLXR5cG9ncmFwaHktLW92ZXJsaW5lXCI+XG4gICAgPHNsb3Q+PC9zbG90PlxuPC9zcGFuPlxuYFxufSk7XG5cblZ1ZS5jb21wb25lbnQoJ21kYy1jYXB0aW9uJywge1xuICAgIHRlbXBsYXRlOiBgXG48c3BhbiBjbGFzcz1cIm1kYy10eXBvZ3JhcGh5LS1jYXB0aW9uXCI+XG4gICAgPHNsb3Q+PC9zbG90PlxuPC9zcGFuPlxuYFxufSk7XG4iLCIvLyBUaGUgbW9kdWxlIGNhY2hlXG52YXIgX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fID0ge307XG5cbi8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG5mdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cdC8vIENoZWNrIGlmIG1vZHVsZSBpcyBpbiBjYWNoZVxuXHR2YXIgY2FjaGVkTW9kdWxlID0gX193ZWJwYWNrX21vZHVsZV9jYWNoZV9fW21vZHVsZUlkXTtcblx0aWYgKGNhY2hlZE1vZHVsZSAhPT0gdW5kZWZpbmVkKSB7XG5cdFx0cmV0dXJuIGNhY2hlZE1vZHVsZS5leHBvcnRzO1xuXHR9XG5cdC8vIENyZWF0ZSBhIG5ldyBtb2R1bGUgKGFuZCBwdXQgaXQgaW50byB0aGUgY2FjaGUpXG5cdHZhciBtb2R1bGUgPSBfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX19bbW9kdWxlSWRdID0ge1xuXHRcdGlkOiBtb2R1bGVJZCxcblx0XHQvLyBubyBtb2R1bGUubG9hZGVkIG5lZWRlZFxuXHRcdGV4cG9ydHM6IHt9XG5cdH07XG5cblx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG5cdF9fd2VicGFja19tb2R1bGVzX19bbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG5cdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG5cdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbn1cblxuLy8gZXhwb3NlIHRoZSBtb2R1bGVzIG9iamVjdCAoX193ZWJwYWNrX21vZHVsZXNfXylcbl9fd2VicGFja19yZXF1aXJlX18ubSA9IF9fd2VicGFja19tb2R1bGVzX187XG5cbiIsIi8vIGdldERlZmF1bHRFeHBvcnQgZnVuY3Rpb24gZm9yIGNvbXBhdGliaWxpdHkgd2l0aCBub24taGFybW9ueSBtb2R1bGVzXG5fX3dlYnBhY2tfcmVxdWlyZV9fLm4gPSAobW9kdWxlKSA9PiB7XG5cdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuXHRcdCgpID0+IChtb2R1bGVbJ2RlZmF1bHQnXSkgOlxuXHRcdCgpID0+IChtb2R1bGUpO1xuXHRfX3dlYnBhY2tfcmVxdWlyZV9fLmQoZ2V0dGVyLCB7IGE6IGdldHRlciB9KTtcblx0cmV0dXJuIGdldHRlcjtcbn07IiwiLy8gZGVmaW5lIGdldHRlciBmdW5jdGlvbnMgZm9yIGhhcm1vbnkgZXhwb3J0c1xuX193ZWJwYWNrX3JlcXVpcmVfXy5kID0gKGV4cG9ydHMsIGRlZmluaXRpb24pID0+IHtcblx0Zm9yKHZhciBrZXkgaW4gZGVmaW5pdGlvbikge1xuXHRcdGlmKF9fd2VicGFja19yZXF1aXJlX18ubyhkZWZpbml0aW9uLCBrZXkpICYmICFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywga2V5KSkge1xuXHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIGtleSwgeyBlbnVtZXJhYmxlOiB0cnVlLCBnZXQ6IGRlZmluaXRpb25ba2V5XSB9KTtcblx0XHR9XG5cdH1cbn07IiwiX193ZWJwYWNrX3JlcXVpcmVfXy5nID0gKGZ1bmN0aW9uKCkge1xuXHRpZiAodHlwZW9mIGdsb2JhbFRoaXMgPT09ICdvYmplY3QnKSByZXR1cm4gZ2xvYmFsVGhpcztcblx0dHJ5IHtcblx0XHRyZXR1cm4gdGhpcyB8fCBuZXcgRnVuY3Rpb24oJ3JldHVybiB0aGlzJykoKTtcblx0fSBjYXRjaCAoZSkge1xuXHRcdGlmICh0eXBlb2Ygd2luZG93ID09PSAnb2JqZWN0JykgcmV0dXJuIHdpbmRvdztcblx0fVxufSkoKTsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSAob2JqLCBwcm9wKSA9PiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKG9iaiwgcHJvcCkpIiwidmFyIHNjcmlwdFVybDtcbmlmIChfX3dlYnBhY2tfcmVxdWlyZV9fLmcuaW1wb3J0U2NyaXB0cykgc2NyaXB0VXJsID0gX193ZWJwYWNrX3JlcXVpcmVfXy5nLmxvY2F0aW9uICsgXCJcIjtcbnZhciBkb2N1bWVudCA9IF9fd2VicGFja19yZXF1aXJlX18uZy5kb2N1bWVudDtcbmlmICghc2NyaXB0VXJsICYmIGRvY3VtZW50KSB7XG5cdGlmIChkb2N1bWVudC5jdXJyZW50U2NyaXB0KVxuXHRcdHNjcmlwdFVybCA9IGRvY3VtZW50LmN1cnJlbnRTY3JpcHQuc3JjXG5cdGlmICghc2NyaXB0VXJsKSB7XG5cdFx0dmFyIHNjcmlwdHMgPSBkb2N1bWVudC5nZXRFbGVtZW50c0J5VGFnTmFtZShcInNjcmlwdFwiKTtcblx0XHRpZihzY3JpcHRzLmxlbmd0aCkgc2NyaXB0VXJsID0gc2NyaXB0c1tzY3JpcHRzLmxlbmd0aCAtIDFdLnNyY1xuXHR9XG59XG4vLyBXaGVuIHN1cHBvcnRpbmcgYnJvd3NlcnMgd2hlcmUgYW4gYXV0b21hdGljIHB1YmxpY1BhdGggaXMgbm90IHN1cHBvcnRlZCB5b3UgbXVzdCBzcGVjaWZ5IGFuIG91dHB1dC5wdWJsaWNQYXRoIG1hbnVhbGx5IHZpYSBjb25maWd1cmF0aW9uXG4vLyBvciBwYXNzIGFuIGVtcHR5IHN0cmluZyAoXCJcIikgYW5kIHNldCB0aGUgX193ZWJwYWNrX3B1YmxpY19wYXRoX18gdmFyaWFibGUgZnJvbSB5b3VyIGNvZGUgdG8gdXNlIHlvdXIgb3duIGxvZ2ljLlxuaWYgKCFzY3JpcHRVcmwpIHRocm93IG5ldyBFcnJvcihcIkF1dG9tYXRpYyBwdWJsaWNQYXRoIGlzIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBicm93c2VyXCIpO1xuc2NyaXB0VXJsID0gc2NyaXB0VXJsLnJlcGxhY2UoLyMuKiQvLCBcIlwiKS5yZXBsYWNlKC9cXD8uKiQvLCBcIlwiKS5yZXBsYWNlKC9cXC9bXlxcL10rJC8sIFwiL1wiKTtcbl9fd2VicGFja19yZXF1aXJlX18ucCA9IHNjcmlwdFVybDsiLCJfX3dlYnBhY2tfcmVxdWlyZV9fLmIgPSBkb2N1bWVudC5iYXNlVVJJIHx8IHNlbGYubG9jYXRpb24uaHJlZjtcblxuLy8gb2JqZWN0IHRvIHN0b3JlIGxvYWRlZCBhbmQgbG9hZGluZyBjaHVua3Ncbi8vIHVuZGVmaW5lZCA9IGNodW5rIG5vdCBsb2FkZWQsIG51bGwgPSBjaHVuayBwcmVsb2FkZWQvcHJlZmV0Y2hlZFxuLy8gW3Jlc29sdmUsIHJlamVjdCwgUHJvbWlzZV0gPSBjaHVuayBsb2FkaW5nLCAwID0gY2h1bmsgbG9hZGVkXG52YXIgaW5zdGFsbGVkQ2h1bmtzID0ge1xuXHQxNDM6IDAsXG5cdDY4NjogMFxufTtcblxuLy8gbm8gY2h1bmsgb24gZGVtYW5kIGxvYWRpbmdcblxuLy8gbm8gcHJlZmV0Y2hpbmdcblxuLy8gbm8gcHJlbG9hZGVkXG5cbi8vIG5vIEhNUlxuXG4vLyBubyBITVIgbWFuaWZlc3RcblxuLy8gbm8gb24gY2h1bmtzIGxvYWRlZFxuXG4vLyBubyBqc29ucCBmdW5jdGlvbiIsIlxuICAgICAgaW1wb3J0IEFQSSBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvaW5qZWN0U3R5bGVzSW50b1N0eWxlVGFnLmpzXCI7XG4gICAgICBpbXBvcnQgZG9tQVBJIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZURvbUFQSS5qc1wiO1xuICAgICAgaW1wb3J0IGluc2VydEZuIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRCeVNlbGVjdG9yLmpzXCI7XG4gICAgICBpbXBvcnQgc2V0QXR0cmlidXRlcyBmcm9tIFwiIS4uLy4uL3N0eWxlLWxvYWRlci9kaXN0L3J1bnRpbWUvc2V0QXR0cmlidXRlc1dpdGhvdXRBdHRyaWJ1dGVzLmpzXCI7XG4gICAgICBpbXBvcnQgaW5zZXJ0U3R5bGVFbGVtZW50IGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9pbnNlcnRTdHlsZUVsZW1lbnQuanNcIjtcbiAgICAgIGltcG9ydCBzdHlsZVRhZ1RyYW5zZm9ybUZuIGZyb20gXCIhLi4vLi4vc3R5bGUtbG9hZGVyL2Rpc3QvcnVudGltZS9zdHlsZVRhZ1RyYW5zZm9ybS5qc1wiO1xuICAgICAgaW1wb3J0IGNvbnRlbnQsICogYXMgbmFtZWRFeHBvcnQgZnJvbSBcIiEhLi4vLi4vY3NzLWxvYWRlci9kaXN0L2Nqcy5qcyEuL21hdGVyaWFsLWljb25zLmNzc1wiO1xuICAgICAgXG4gICAgICBcblxudmFyIG9wdGlvbnMgPSB7fTtcblxub3B0aW9ucy5zdHlsZVRhZ1RyYW5zZm9ybSA9IHN0eWxlVGFnVHJhbnNmb3JtRm47XG5vcHRpb25zLnNldEF0dHJpYnV0ZXMgPSBzZXRBdHRyaWJ1dGVzO1xuXG4gICAgICBvcHRpb25zLmluc2VydCA9IGluc2VydEZuLmJpbmQobnVsbCwgXCJoZWFkXCIpO1xuICAgIFxub3B0aW9ucy5kb21BUEkgPSBkb21BUEk7XG5vcHRpb25zLmluc2VydFN0eWxlRWxlbWVudCA9IGluc2VydFN0eWxlRWxlbWVudDtcblxudmFyIHVwZGF0ZSA9IEFQSShjb250ZW50LCBvcHRpb25zKTtcblxuXG5cbmV4cG9ydCAqIGZyb20gXCIhIS4uLy4uL2Nzcy1sb2FkZXIvZGlzdC9janMuanMhLi9tYXRlcmlhbC1pY29ucy5jc3NcIjtcbiAgICAgICBleHBvcnQgZGVmYXVsdCBjb250ZW50ICYmIGNvbnRlbnQubG9jYWxzID8gY29udGVudC5sb2NhbHMgOiB1bmRlZmluZWQ7XG4iLCJpbXBvcnQgaW8gZnJvbSBcIi4vYnVpbGQvaW5kZXguanNcIjtcblxuZXhwb3J0IGNvbnN0IE1hbmFnZXIgPSBpby5NYW5hZ2VyO1xuZXhwb3J0IGNvbnN0IFNvY2tldCA9IGlvLlNvY2tldDtcbmV4cG9ydCB7IGlvIH07XG5leHBvcnQgZGVmYXVsdCBpbztcbiIsIi8qXG5kaXNjb3JkLWRpc3BsYXksIGEgd2ViIGJhc2VkIGNvbnRlbnQgZGlzcGxheSBjb250cm9sbGVkIHZpYSBkaXNjb3JkLiBcbkNvcHlyaWdodCAoQykgMjAyMSAgSmVmZmVyZXkgTmV1ZmZlciAoaHR0cHM6Ly9naXRodWIuY29tL2o3MTI2LylcblxuICAgIFRoaXMgcHJvZ3JhbSBpcyBmcmVlIHNvZnR3YXJlOiB5b3UgY2FuIHJlZGlzdHJpYnV0ZSBpdCBhbmQvb3IgbW9kaWZ5XG4gICAgaXQgdW5kZXIgdGhlIHRlcm1zIG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2UgYXNcbiAgICBwdWJsaXNoZWQgYnkgdGhlIEZyZWUgU29mdHdhcmUgRm91bmRhdGlvbiwgZWl0aGVyIHZlcnNpb24gMyBvZiB0aGVcbiAgICBMaWNlbnNlLCBvciAoYXQgeW91ciBvcHRpb24pIGFueSBsYXRlciB2ZXJzaW9uLlxuXG4gICAgVGhpcyBwcm9ncmFtIGlzIGRpc3RyaWJ1dGVkIGluIHRoZSBob3BlIHRoYXQgaXQgd2lsbCBiZSB1c2VmdWwsXG4gICAgYnV0IFdJVEhPVVQgQU5ZIFdBUlJBTlRZOyB3aXRob3V0IGV2ZW4gdGhlIGltcGxpZWQgd2FycmFudHkgb2ZcbiAgICBNRVJDSEFOVEFCSUxJVFkgb3IgRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UuICBTZWUgdGhlXG4gICAgR05VIEFmZmVybyBHZW5lcmFsIFB1YmxpYyBMaWNlbnNlIGZvciBtb3JlIGRldGFpbHMuXG5cbiAgICBZb3Ugc2hvdWxkIGhhdmUgcmVjZWl2ZWQgYSBjb3B5IG9mIHRoZSBHTlUgQWZmZXJvIEdlbmVyYWwgUHVibGljIExpY2Vuc2VcbiAgICBhbG9uZyB3aXRoIHRoaXMgcHJvZ3JhbS4gIElmIG5vdCwgc2VlIDxodHRwczovL3d3dy5nbnUub3JnL2xpY2Vuc2VzLz4uXG4qL1xuXG5pbXBvcnQgJ21hdGVyaWFsLWljb25zL2ljb25mb250L21hdGVyaWFsLWljb25zLmNzcyc7XG5cbmltcG9ydCBWdWUgZnJvbSAndnVlJztcblxuaW1wb3J0ICcuL21kYy12dWUtd3JhcHBlci5qcydcblxuaW1wb3J0IGlvIGZyb20gJ3NvY2tldC5pby1jbGllbnQnXG5cbmltcG9ydCAqIGFzIGxpbmtpZnkgZnJvbSAnbGlua2lmeWpzJztcblxudmFyIGFwcFxudmFyIHNvY2tldFxuXG52YXIgdGVzdEltYWdlID0gZnVuY3Rpb24gKHVybCkge1xuICAgIHJldHVybiBuZXcgUHJvbWlzZShmdW5jdGlvbiAocmVzb2x2ZSwgcmVqZWN0KSB7XG4gICAgICAgIHZhciB0aW1lb3V0ID0gNTAwMDtcbiAgICAgICAgdmFyIHRpbWVyLCBpbWcgPSBuZXcgSW1hZ2UoKTtcbiAgICAgICAgaW1nLm9uZXJyb3IgPSBpbWcub25hYm9ydCA9IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgIGNsZWFyVGltZW91dCh0aW1lcik7XG4gICAgICAgICAgICBpbWcgPSBudWxsO1xuICAgICAgICAgICAgcmVqZWN0KFwiZXJyb3JcIik7XG4gICAgICAgIH07XG4gICAgICAgIGltZy5vbmxvYWQgPSBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBjbGVhclRpbWVvdXQodGltZXIpO1xuICAgICAgICAgICAgaW1nID0gbnVsbDtcbiAgICAgICAgICAgIHJlc29sdmUoXCJzdWNjZXNzXCIpO1xuICAgICAgICB9O1xuICAgICAgICB0aW1lciA9IHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgaW1nLnNyYyA9IFwiXCI7XG4gICAgICAgICAgICBpbWcgPSBudWxsO1xuICAgICAgICAgICAgcmVqZWN0KFwidGltZW91dFwiKTtcbiAgICAgICAgfSwgdGltZW91dCk7XG4gICAgICAgIGltZy5zcmMgPSB1cmw7XG4gICAgfSk7XG59XG5cbmFwcCA9IG5ldyBWdWUoe1xuICAgIGVsOiAnI2FwcCcsXG4gICAgZGF0YToge1xuICAgICAgICBhY3RpdmF0aW9uQ29kZTogJycsXG4gICAgICAgIGFjdGl2YXRpb25Db2RlRXJyb3I6IG51bGwsXG4gICAgICAgIGFjdGl2ZTogZmFsc2UsXG4gICAgICAgIGN1cnJlbnRDb250ZW50OiBudWxsLFxuICAgICAgICBjdXJyZW50Q2FwdGlvbjogJycsXG4gICAgfSxcbiAgICBtZXRob2RzOiB7XG4gICAgICAgIHNlbmRBY3RpdmF0aW9uQ29kZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdGhpcy5hY3RpdmF0aW9uQ29kZUVycm9yID0gbnVsbDtcbiAgICAgICAgICAgIHNldFRpbWVvdXQoKCkgPT4ge1xuICAgICAgICAgICAgICAgIGlmICh0aGlzLmFjdGl2YXRpb25Db2RlLmxlbmd0aCAhPSA2KSB7XG4gICAgICAgICAgICAgICAgICAgIHRoaXMuYWN0aXZhdGlvbkNvZGVFcnJvciA9IFwiVGhlIGVudGVyZWQgY29kZSBpcyBub3QgdmFsaWQuXCI7XG4gICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgc29ja2V0LmVtaXQoJ2FjdGl2YXRlJywgdGhpcy5hY3RpdmF0aW9uQ29kZSk7XG4gICAgICAgICAgICB9LCAwKTtcbiAgICAgICAgfSxcbiAgICAgICAgYWN0aXZhdGlvbkNvZGVLZXl1cDogZnVuY3Rpb24gKGUpIHtcbiAgICAgICAgICAgIGlmIChlLmtleUNvZGUgPT0gMTMpIHtcbiAgICAgICAgICAgICAgICB0aGlzLnNlbmRBY3RpdmF0aW9uQ29kZSgpXG4gICAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICB9LFxuICAgIGNvbXB1dGVkOiB7XG4gICAgICAgIGNvbnRlbnRTdHlsZTogZnVuY3Rpb24gKCkge1xuICAgICAgICAgICAgdmFyIHN0eWxlID0ge307XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29udGVudCA9PSBudWxsKSByZXR1cm47XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29udGVudC50eXBlID09ICdpbWFnZScpXG4gICAgICAgICAgICAgICAgc3R5bGVbJ2JhY2tncm91bmQtaW1hZ2UnXSA9IGB1cmwoJyR7dGhpcy5jdXJyZW50Q29udGVudC51cmx9JylgO1xuICAgICAgICAgICAgcmV0dXJuIHN0eWxlO1xuICAgICAgICB9LFxuICAgICAgICBjYXB0aW9uOiBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Q2FwdGlvbiAhPSAnJylcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5jdXJyZW50Q2FwdGlvbjtcbiAgICAgICAgICAgIGlmICh0aGlzLmN1cnJlbnRDb250ZW50ID09IG51bGwpXG4gICAgICAgICAgICAgICAgcmV0dXJuIFwiXCI7XG4gICAgICAgICAgICBpZiAodGhpcy5jdXJyZW50Q29udGVudC50eXBlID09ICdpbWFnZScpXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY3VycmVudENvbnRlbnQuY2FwdGlvbjtcbiAgICAgICAgfSxcbiAgICB9LFxuICAgIG1vdW50ZWQ6IGZ1bmN0aW9uICgpIHtcbiAgICAgICAgdmFyIHNlbGYgPSB0aGlzO1xuICAgICAgICBzb2NrZXQgPSBpbygpO1xuICAgICAgICBzb2NrZXQub24oXCJkaXNjb25uZWN0XCIsIChyZWFzb24pID0+IHtcbiAgICAgICAgICAgIGNvbnNvbGUubG9nKCdkaXNjb25uZWN0ZWQ6ICcgKyByZWFzb24pO1xuICAgICAgICAgICAgbG9jYXRpb24ucmVsb2FkKCk7XG4gICAgICAgIH0pO1xuICAgICAgICBzb2NrZXQub24oJ2FjdGl2YXRlJywgZnVuY3Rpb24gKG1zZykge1xuICAgICAgICAgICAgaWYgKG1zZyA9PSAndW5rbm93bl9jb2RlJykge1xuICAgICAgICAgICAgICAgIHNlbGYuYWN0aXZhdGlvbkNvZGVFcnJvciA9IFwiVGhlIGVudGVyZWQgY29kZSBpcyBub3QgdmFsaWQuXCI7XG4gICAgICAgICAgICAgICAgcmV0dXJuXG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpZiAobXNnID09ICdhY3RpdmUnKSB7XG4gICAgICAgICAgICAgICAgc2VsZi5hY3RpdmUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIHNvY2tldC5vbignbWVzc2FnZScsIGZ1bmN0aW9uIChtc2cpIHtcbiAgICAgICAgICAgICAgICAgICAgaWYgKG1zZy5jb250ZW50ID09ICchY2xlYXInKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRDb250ZW50ID0gbnVsbDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudENhcHRpb24gPSAnJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobXNnLmNvbnRlbnQgPT0gJyFjbGVhciB0ZXh0Jykge1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50Q2FwdGlvbiA9ICcgJztcbiAgICAgICAgICAgICAgICAgICAgICAgIHJldHVybjtcbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICB2YXIgbGlua3MgPSBsaW5raWZ5LmZpbmQobXNnLmNvbnRlbnQpO1xuICAgICAgICAgICAgICAgICAgICBpZiAobGlua3MubGVuZ3RoID4gMCkge1xuICAgICAgICAgICAgICAgICAgICAgICAgZm9yIChjb25zdCBlbGVtZW50IG9mIGxpbmtzKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgbXNnLmNvbnRlbnQgPSBtc2cuY29udGVudC5yZXBsYWNlKGVsZW1lbnQudmFsdWUsICcnKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgfVxuICAgICAgICAgICAgICAgICAgICBpZiAobXNnLmF0dGFjaG1lbnRzLmxlbmd0aCA+IDApIHtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudENvbnRlbnQgPSB7fTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudENvbnRlbnQudHlwZSA9ICdpbWFnZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICBzZWxmLmN1cnJlbnRDb250ZW50LnVybCA9IG1zZy5hdHRhY2htZW50c1swXS5wcm94eVVSTDtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudENvbnRlbnQuY2FwdGlvbiA9IG1zZy5jb250ZW50O1xuICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50Q2FwdGlvbiA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgcmV0dXJuO1xuICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgIGlmIChsaW5rcy5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB0ZXN0SW1hZ2UobGlua3NbMF0uaHJlZikudGhlbigoKSA9PiB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50Q29udGVudCA9IHt9O1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudENvbnRlbnQudHlwZSA9ICdpbWFnZSc7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50Q29udGVudC51cmwgPSBsaW5rc1swXS5ocmVmO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHNlbGYuY3VycmVudENvbnRlbnQuY2FwdGlvbiA9ICcnO1xuICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgc2VsZi5jdXJyZW50Q2FwdGlvbiA9IG1zZy5jb250ZW50O1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIHJldHVyblxuICAgICAgICAgICAgfVxuICAgICAgICAgICAgc2VsZi5hY3RpdmF0aW9uQ29kZUVycm9yID0gXCJVbmtub3duIHJlc3BvbnNlLlwiO1xuICAgICAgICB9KTtcbiAgICB9XG59KTsiXSwibmFtZXMiOlsiY3NzUHJvcGVydHlOYW1lTWFwIiwiYW5pbWF0aW9uIiwicHJlZml4ZWQiLCJzdGFuZGFyZCIsInRyYW5zZm9ybSIsInRyYW5zaXRpb24iLCJqc0V2ZW50VHlwZU1hcCIsImFuaW1hdGlvbmVuZCIsImNzc1Byb3BlcnR5IiwiYW5pbWF0aW9uaXRlcmF0aW9uIiwiYW5pbWF0aW9uc3RhcnQiLCJ0cmFuc2l0aW9uZW5kIiwiaXNXaW5kb3ciLCJ3aW5kb3dPYmoiLCJCb29sZWFuIiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiZ2V0Q29ycmVjdFByb3BlcnR5TmFtZSIsImVsIiwiX2EiLCJzdHlsZSIsImdldENvcnJlY3RFdmVudE5hbWUiLCJldmVudFR5cGUiLCJNRENDb21wb25lbnQiLCJyb290IiwiZm91bmRhdGlvbiIsImFyZ3MiLCJfaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInRoaXMiLCJpbml0aWFsaXplIiwiYXBwbHkiLCJ1bmRlZmluZWQiLCJnZXREZWZhdWx0Rm91bmRhdGlvbiIsImluaXQiLCJpbml0aWFsU3luY1dpdGhET00iLCJhdHRhY2hUbyIsInByb3RvdHlwZSIsIl9hcmdzIiwiRXJyb3IiLCJkZXN0cm95IiwibGlzdGVuIiwiZXZ0VHlwZSIsImhhbmRsZXIiLCJvcHRpb25zIiwiYWRkRXZlbnRMaXN0ZW5lciIsInVubGlzdGVuIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImVtaXQiLCJldnREYXRhIiwic2hvdWxkQnViYmxlIiwiZXZ0IiwiQ3VzdG9tRXZlbnQiLCJidWJibGVzIiwiZGV0YWlsIiwiY3JlYXRlRXZlbnQiLCJpbml0Q3VzdG9tRXZlbnQiLCJkaXNwYXRjaEV2ZW50IiwiTURDRm91bmRhdGlvbiIsImFkYXB0ZXIiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImdldCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJjc3NDbGFzc2VzIiwiQU5JTV9DSEVDS0VEX0lOREVURVJNSU5BVEUiLCJBTklNX0NIRUNLRURfVU5DSEVDS0VEIiwiQU5JTV9JTkRFVEVSTUlOQVRFX0NIRUNLRUQiLCJBTklNX0lOREVURVJNSU5BVEVfVU5DSEVDS0VEIiwiQU5JTV9VTkNIRUNLRURfQ0hFQ0tFRCIsIkFOSU1fVU5DSEVDS0VEX0lOREVURVJNSU5BVEUiLCJCQUNLR1JPVU5EIiwiQ0hFQ0tFRCIsIkNIRUNLTUFSSyIsIkNIRUNLTUFSS19QQVRIIiwiRElTQUJMRUQiLCJJTkRFVEVSTUlOQVRFIiwiTUlYRURNQVJLIiwiTkFUSVZFX0NPTlRST0wiLCJST09UIiwiU0VMRUNURUQiLCJVUEdSQURFRCIsInN0cmluZ3MiLCJBUklBX0NIRUNLRURfQVRUUiIsIkFSSUFfQ0hFQ0tFRF9JTkRFVEVSTUlOQVRFX1ZBTFVFIiwiREFUQV9JTkRFVEVSTUlOQVRFX0FUVFIiLCJOQVRJVkVfQ09OVFJPTF9TRUxFQ1RPUiIsIlRSQU5TSVRJT05fU1RBVEVfQ0hFQ0tFRCIsIlRSQU5TSVRJT05fU1RBVEVfSU5ERVRFUk1JTkFURSIsIlRSQU5TSVRJT05fU1RBVEVfSU5JVCIsIlRSQU5TSVRJT05fU1RBVEVfVU5DSEVDS0VEIiwibnVtYmVycyIsIkFOSU1fRU5EX0xBVENIX01TIiwiTURDQ2hlY2tib3hGb3VuZGF0aW9uIiwiX3N1cGVyIiwiX3RoaXMiLCJjYWxsIiwiZGVmYXVsdEFkYXB0ZXIiLCJjdXJyZW50Q2hlY2tTdGF0ZSIsImN1cnJlbnRBbmltYXRpb25DbGFzcyIsImFuaW1FbmRMYXRjaFRpbWVyIiwiZW5hYmxlQW5pbWF0aW9uRW5kSGFuZGxlciIsImFkZENsYXNzIiwiZm9yY2VMYXlvdXQiLCJoYXNOYXRpdmVDb250cm9sIiwiaXNBdHRhY2hlZFRvRE9NIiwiaXNDaGVja2VkIiwiaXNJbmRldGVybWluYXRlIiwicmVtb3ZlQ2xhc3MiLCJyZW1vdmVOYXRpdmVDb250cm9sQXR0ciIsInNldE5hdGl2ZUNvbnRyb2xBdHRyIiwic2V0TmF0aXZlQ29udHJvbERpc2FibGVkIiwiZGV0ZXJtaW5lQ2hlY2tTdGF0ZSIsInVwZGF0ZUFyaWFDaGVja2VkIiwiY2xlYXJUaW1lb3V0Iiwic2V0RGlzYWJsZWQiLCJkaXNhYmxlZCIsImhhbmRsZUFuaW1hdGlvbkVuZCIsInNldFRpbWVvdXQiLCJoYW5kbGVDaGFuZ2UiLCJ0cmFuc2l0aW9uQ2hlY2tTdGF0ZSIsIm9sZFN0YXRlIiwibmV3U3RhdGUiLCJnZXRUcmFuc2l0aW9uQW5pbWF0aW9uQ2xhc3MiLCJDQl9QUk9UT19QUk9QUyIsIk1EQ0NoZWNrYm94IiwicmlwcGxlU3VyZmFjZSIsImNyZWF0ZVJpcHBsZSIsImdldE5hdGl2ZUNvbnRyb2wiLCJjaGVja2VkIiwic2V0IiwiaW5kZXRlcm1pbmF0ZSIsInZhbHVlIiwiZ2V0QXR0cmlidXRlIiwicmVtb3ZlQXR0cmlidXRlIiwid2luZG93IiwiaW5zdGFsbFByb3BlcnR5Q2hhbmdlSG9va3MiLCJ1bmluc3RhbGxQcm9wZXJ0eUNoYW5nZUhvb2tzIiwiY2xhc3NOYW1lIiwiY2xhc3NMaXN0IiwiYWRkIiwib2Zmc2V0V2lkdGgiLCJwYXJlbnROb2RlIiwicmVtb3ZlIiwiYXR0ciIsInNldEF0dHJpYnV0ZSIsImRlcmVnaXN0ZXJJbnRlcmFjdGlvbkhhbmRsZXIiLCJpc1N1cmZhY2VBY3RpdmUiLCJpc1VuYm91bmRlZCIsInJlZ2lzdGVySW50ZXJhY3Rpb25IYW5kbGVyIiwiZV8xIiwibmF0aXZlQ2IiLCJjYlByb3RvIiwiZ2V0UHJvdG90eXBlT2YiLCJfbG9vcF8xIiwiY29udHJvbFN0YXRlIiwiZGVzYyIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInZhbGlkRGVzY3JpcHRvciIsIm5hdGl2ZUdldHRlciIsIm5hdGl2ZUNiRGVzYyIsInN0YXRlIiwiQ0JfUFJPVE9fUFJPUFNfMSIsIkNCX1BST1RPX1BST1BTXzFfMSIsIm5leHQiLCJkb25lIiwic3RhdGVfMSIsImVfMV8xIiwiZXJyb3IiLCJyZXR1cm4iLCJlXzIiLCJDQl9QUk9UT19QUk9QU18yIiwiQ0JfUFJPVE9fUFJPUFNfMl8xIiwiZV8yXzEiLCJxdWVyeVNlbGVjdG9yIiwiaW5wdXRQcm9wRGVzYyIsIkFuaW1hdGlvbktleXMiLCJGT0NVU19TRU5USU5FTF9DTEFTUyIsIkZvY3VzVHJhcCIsImVsRm9jdXNlZEJlZm9yZVRyYXBGb2N1cyIsInRyYXBGb2N1cyIsImZvY3VzYWJsZUVscyIsImdldEZvY3VzYWJsZUVsZW1lbnRzIiwiYWN0aXZlRWxlbWVudCIsIkhUTUxFbGVtZW50Iiwid3JhcFRhYkZvY3VzIiwic2tpcEluaXRpYWxGb2N1cyIsImZvY3VzSW5pdGlhbEVsZW1lbnQiLCJpbml0aWFsRm9jdXNFbCIsInJlbGVhc2VGb2N1cyIsInNsaWNlIiwicXVlcnlTZWxlY3RvckFsbCIsImZvckVhY2giLCJzZW50aW5lbEVsIiwicGFyZW50RWxlbWVudCIsInJlbW92ZUNoaWxkIiwic2tpcFJlc3RvcmVGb2N1cyIsImZvY3VzIiwic2VudGluZWxTdGFydCIsImNyZWF0ZVNlbnRpbmVsIiwic2VudGluZWxFbmQiLCJpbnNlcnRCZWZvcmUiLCJjaGlsZHJlbiIsImFwcGVuZENoaWxkIiwiZm9jdXNJbmRleCIsIk1hdGgiLCJtYXgiLCJpbmRleE9mIiwiZmlsdGVyIiwiaXNEaXNhYmxlZE9ySGlkZGVuIiwiaXNUYWJiYWJsZUFuZFZpc2libGUiLCJ0YWJJbmRleCIsImdldEJvdW5kaW5nQ2xpZW50UmVjdCIsIndpZHRoIiwiY29udGFpbnMiLCJpc1Byb2dyYW1tYXRpY2FsbHlIaWRkZW4iLCJnZXRDb21wdXRlZFN0eWxlIiwiZGlzcGxheSIsInZpc2liaWxpdHkiLCJzZW50aW5lbCIsIkFuaW1hdGlvbkZyYW1lIiwicmFmSURzIiwiTWFwIiwicmVxdWVzdCIsImtleSIsImNhbGxiYWNrIiwiY2FuY2VsIiwiZnJhbWVJRCIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsImZyYW1lIiwiZGVsZXRlIiwicmFmSUQiLCJjYW5jZWxBbmltYXRpb25GcmFtZSIsImNhbmNlbEFsbCIsIl8iLCJnZXRRdWV1ZSIsInF1ZXVlIiwicHVzaCIsIkNMT1NJTkciLCJPUEVOIiwiT1BFTklORyIsIlNDUk9MTEFCTEUiLCJTQ1JPTExfTE9DSyIsIlNUQUNLRUQiLCJGVUxMU0NSRUVOIiwiU0NST0xMX0RJVklERVJfSEVBREVSIiwiU0NST0xMX0RJVklERVJfRk9PVEVSIiwiU1VSRkFDRV9TQ1JJTV9TSE9XTiIsIlNVUkZBQ0VfU0NSSU1fU0hPV0lORyIsIlNVUkZBQ0VfU0NSSU1fSElESU5HIiwiU0NSSU1fSElEREVOIiwiQUNUSU9OX0FUVFJJQlVURSIsIkJVVFRPTl9ERUZBVUxUX0FUVFJJQlVURSIsIkJVVFRPTl9TRUxFQ1RPUiIsIkNMT1NFRF9FVkVOVCIsIkNMT1NFX0FDVElPTiIsIkNMT1NJTkdfRVZFTlQiLCJDT05UQUlORVJfU0VMRUNUT1IiLCJDT05URU5UX1NFTEVDVE9SIiwiREVTVFJPWV9BQ1RJT04iLCJJTklUSUFMX0ZPQ1VTX0FUVFJJQlVURSIsIk9QRU5FRF9FVkVOVCIsIk9QRU5JTkdfRVZFTlQiLCJTQ1JJTV9TRUxFQ1RPUiIsIlNVUFBSRVNTX0RFRkFVTFRfUFJFU1NfU0VMRUNUT1IiLCJqb2luIiwiU1VSRkFDRV9TRUxFQ1RPUiIsIkRJQUxPR19BTklNQVRJT05fQ0xPU0VfVElNRV9NUyIsIkRJQUxPR19BTklNQVRJT05fT1BFTl9USU1FX01TIiwiTURDRGlhbG9nRm91bmRhdGlvbiIsImRpYWxvZ09wZW4iLCJpc0Z1bGxzY3JlZW4iLCJhbmltYXRpb25GcmFtZSIsImFuaW1hdGlvblRpbWVyIiwiZXNjYXBlS2V5QWN0aW9uIiwic2NyaW1DbGlja0FjdGlvbiIsImF1dG9TdGFja0J1dHRvbnMiLCJhcmVCdXR0b25zU3RhY2tlZCIsInN1cHByZXNzRGVmYXVsdFByZXNzU2VsZWN0b3IiLCJhbmltRnJhbWUiLCJjb250ZW50U2Nyb2xsSGFuZGxlciIsImhhbmRsZVNjcm9sbEV2ZW50Iiwid2luZG93UmVzaXplSGFuZGxlciIsImxheW91dCIsIndpbmRvd09yaWVudGF0aW9uQ2hhbmdlSGFuZGxlciIsImFkZEJvZHlDbGFzcyIsImNsaWNrRGVmYXVsdEJ1dHRvbiIsImV2ZW50VGFyZ2V0TWF0Y2hlcyIsImdldEFjdGlvbkZyb21FdmVudCIsImdldEluaXRpYWxGb2N1c0VsIiwiaGFzQ2xhc3MiLCJpc0NvbnRlbnRTY3JvbGxhYmxlIiwibm90aWZ5Q2xvc2VkIiwibm90aWZ5Q2xvc2luZyIsIm5vdGlmeU9wZW5lZCIsIm5vdGlmeU9wZW5pbmciLCJyZW1vdmVCb2R5Q2xhc3MiLCJyZXZlcnNlQnV0dG9ucyIsInJlZ2lzdGVyQ29udGVudEV2ZW50SGFuZGxlciIsImRlcmVnaXN0ZXJDb250ZW50RXZlbnRIYW5kbGVyIiwiaXNTY3JvbGxhYmxlQ29udGVudEF0VG9wIiwiaXNTY3JvbGxhYmxlQ29udGVudEF0Qm90dG9tIiwicmVnaXN0ZXJXaW5kb3dFdmVudEhhbmRsZXIiLCJkZXJlZ2lzdGVyV2luZG93RXZlbnRIYW5kbGVyIiwic2V0QXV0b1N0YWNrQnV0dG9ucyIsImhhbmRsZUFuaW1hdGlvblRpbWVyRW5kIiwib3BlbiIsImRpYWxvZ09wdGlvbnMiLCJpc0Fib3ZlRnVsbHNjcmVlbkRpYWxvZyIsInJ1bk5leHRBbmltYXRpb25GcmFtZSIsImNsb3NlIiwiYWN0aW9uIiwic2hvd1N1cmZhY2VTY3JpbSIsImhpZGVTdXJmYWNlU2NyaW0iLCJoYW5kbGVTdXJmYWNlU2NyaW1UcmFuc2l0aW9uRW5kIiwiaXNPcGVuIiwiZ2V0RXNjYXBlS2V5QWN0aW9uIiwic2V0RXNjYXBlS2V5QWN0aW9uIiwiZ2V0U2NyaW1DbGlja0FjdGlvbiIsInNldFNjcmltQ2xpY2tBY3Rpb24iLCJnZXRBdXRvU3RhY2tCdXR0b25zIiwiYXV0b1N0YWNrIiwiZ2V0U3VwcHJlc3NEZWZhdWx0UHJlc3NTZWxlY3RvciIsInNldFN1cHByZXNzRGVmYXVsdFByZXNzU2VsZWN0b3IiLCJzZWxlY3RvciIsIlBPTExfTEFZT1VUX0NIQU5HRSIsImxheW91dEludGVybmFsIiwiaGFuZGxlQ2xpY2siLCJ0YXJnZXQiLCJoYW5kbGVLZXlkb3duIiwiaXNFbnRlciIsImtleUNvZGUiLCJjb21wb3NlZFBhdGgiLCJpc0RlZmF1bHQiLCJoYW5kbGVEb2N1bWVudEtleWRvd24iLCJQT0xMX1NDUk9MTF9QT1MiLCJ0b2dnbGVTY3JvbGxEaXZpZGVySGVhZGVyIiwidG9nZ2xlU2Nyb2xsRGl2aWRlckZvb3RlciIsImRldGVjdFN0YWNrZWRCdXR0b25zIiwidG9nZ2xlU2Nyb2xsYWJsZUNsYXNzZXMiLCJNRENEaWFsb2ciLCJmb2N1c1RyYXBGYWN0b3J5IiwiZm9jdXNPcHRpb25zIiwiY29udGFpbmVyIiwiY29udGVudCIsImJ1dHRvbnMiLCJkZWZhdWx0QnV0dG9uIiwiYnV0dG9uUmlwcGxlcyIsIl9iIiwiX2MiLCJidXR0b25FbCIsInN1cmZhY2VFbCIsImZvY3VzVHJhcCIsImJpbmQiLCJoYW5kbGVPcGVuaW5nIiwiaGFuZGxlQ2xvc2luZyIsInJpcHBsZSIsImJvZHkiLCJlbHMiLCJ0b3BzIiwiU2V0Iiwib2Zmc2V0VG9wIiwic2l6ZSIsImNsaWNrIiwiZWxlbWVudCIsInNjcm9sbEhlaWdodCIsIm9mZnNldEhlaWdodCIsInJldmVyc2UiLCJidXR0b24iLCJzY3JvbGxUb3AiLCJjZWlsIiwiY2xpZW50SGVpZ2h0IiwiYXBwbHlQYXNzaXZlIiwiZ2xvYmFsT2JqIiwicGFzc2l2ZVN1cHBvcnRlZCIsImVyciIsInN1cHBvcnRzUGFzc2l2ZU9wdGlvbiIsInBhc3NpdmUiLCJjbG9zZXN0IiwibWF0Y2hlcyIsIndlYmtpdE1hdGNoZXNTZWxlY3RvciIsIm1zTWF0Y2hlc1NlbGVjdG9yIiwiZXN0aW1hdGVTY3JvbGxXaWR0aCIsImh0bWxFbCIsIm9mZnNldFBhcmVudCIsInNjcm9sbFdpZHRoIiwiY2xvbmUiLCJjbG9uZU5vZGUiLCJzZXRQcm9wZXJ0eSIsImRvY3VtZW50RWxlbWVudCIsIk1EQ0Zsb2F0aW5nTGFiZWwiLCJzaGFrZSIsInNob3VsZFNoYWtlIiwiZmxvYXQiLCJzaG91bGRGbG9hdCIsInNldFJlcXVpcmVkIiwiaXNSZXF1aXJlZCIsImdldFdpZHRoIiwiTEFCRUxfRkxPQVRfQUJPVkUiLCJMQUJFTF9SRVFVSVJFRCIsIkxBQkVMX1NIQUtFIiwiTURDRmxvYXRpbmdMYWJlbEZvdW5kYXRpb24iLCJzaGFrZUFuaW1hdGlvbkVuZEhhbmRsZXIiLCJoYW5kbGVTaGFrZUFuaW1hdGlvbkVuZCIsIkxBQkVMX1NFTEVDVE9SIiwiTURDRm9ybUZpZWxkRm91bmRhdGlvbiIsImFjdGl2YXRlSW5wdXRSaXBwbGUiLCJkZWFjdGl2YXRlSW5wdXRSaXBwbGUiLCJNRENGb3JtRmllbGQiLCJsYWJlbEVsIiwiaW5wdXQiLCJhY3RpdmF0ZSIsImRlYWN0aXZhdGUiLCJMSU5FX1JJUFBMRV9BQ1RJVkUiLCJMSU5FX1JJUFBMRV9ERUFDVElWQVRJTkciLCJNRENMaW5lUmlwcGxlRm91bmRhdGlvbiIsInRyYW5zaXRpb25FbmRIYW5kbGVyIiwiaGFuZGxlVHJhbnNpdGlvbkVuZCIsInNldFN0eWxlIiwicmVnaXN0ZXJFdmVudEhhbmRsZXIiLCJkZXJlZ2lzdGVyRXZlbnRIYW5kbGVyIiwic2V0UmlwcGxlQ2VudGVyIiwieENvb3JkaW5hdGUiLCJpc0RlYWN0aXZhdGluZyIsInByb3BlcnR5TmFtZSIsIk1EQ0xpbmVSaXBwbGUiLCJOT1RDSF9FTEVNRU5UX1NFTEVDVE9SIiwiTk9UQ0hfRUxFTUVOVF9QQURESU5HIiwiTk9fTEFCRUwiLCJPVVRMSU5FX05PVENIRUQiLCJPVVRMSU5FX1VQR1JBREVEIiwiTURDTm90Y2hlZE91dGxpbmVGb3VuZGF0aW9uIiwic2V0Tm90Y2hXaWR0aFByb3BlcnR5IiwicmVtb3ZlTm90Y2hXaWR0aFByb3BlcnR5Iiwibm90Y2giLCJub3RjaFdpZHRoIiwiY2xvc2VOb3RjaCIsIk1EQ05vdGNoZWRPdXRsaW5lIiwibm90Y2hFbGVtZW50IiwibGFiZWwiLCJ0cmFuc2l0aW9uRHVyYXRpb24iLCJyZW1vdmVQcm9wZXJ0eSIsIk1EQ1JpcHBsZSIsIm9wdHMiLCJ1bmJvdW5kZWQiLCJjcmVhdGVBZGFwdGVyIiwiaW5zdGFuY2UiLCJicm93c2VyU3VwcG9ydHNDc3NWYXJzIiwiY29tcHV0ZUJvdW5kaW5nUmVjdCIsImNvbnRhaW5zRXZlbnRUYXJnZXQiLCJkZXJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXIiLCJkZXJlZ2lzdGVyUmVzaXplSGFuZGxlciIsImdldFdpbmRvd1BhZ2VPZmZzZXQiLCJ4IiwicGFnZVhPZmZzZXQiLCJ5IiwicGFnZVlPZmZzZXQiLCJpc1N1cmZhY2VEaXNhYmxlZCIsInJlZ2lzdGVyRG9jdW1lbnRJbnRlcmFjdGlvbkhhbmRsZXIiLCJyZWdpc3RlclJlc2l6ZUhhbmRsZXIiLCJ1cGRhdGVDc3NWYXJpYWJsZSIsInZhck5hbWUiLCJzZXRVbmJvdW5kZWQiLCJkYXRhc2V0IiwiQkdfRk9DVVNFRCIsIkZHX0FDVElWQVRJT04iLCJGR19ERUFDVElWQVRJT04iLCJVTkJPVU5ERUQiLCJWQVJfRkdfU0NBTEUiLCJWQVJfRkdfU0laRSIsIlZBUl9GR19UUkFOU0xBVEVfRU5EIiwiVkFSX0ZHX1RSQU5TTEFURV9TVEFSVCIsIlZBUl9MRUZUIiwiVkFSX1RPUCIsIkRFQUNUSVZBVElPTl9USU1FT1VUX01TIiwiRkdfREVBQ1RJVkFUSU9OX01TIiwiSU5JVElBTF9PUklHSU5fU0NBTEUiLCJQQURESU5HIiwiVEFQX0RFTEFZX01TIiwiQUNUSVZBVElPTl9FVkVOVF9UWVBFUyIsIlBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTIiwiYWN0aXZhdGVkVGFyZ2V0cyIsIk1EQ1JpcHBsZUZvdW5kYXRpb24iLCJhY3RpdmF0aW9uQW5pbWF0aW9uSGFzRW5kZWQiLCJhY3RpdmF0aW9uVGltZXIiLCJmZ0RlYWN0aXZhdGlvblJlbW92YWxUaW1lciIsImZnU2NhbGUiLCJoZWlnaHQiLCJpbml0aWFsU2l6ZSIsImxheW91dEZyYW1lIiwibWF4UmFkaXVzIiwidW5ib3VuZGVkQ29vcmRzIiwibGVmdCIsInRvcCIsImFjdGl2YXRpb25TdGF0ZSIsImRlZmF1bHRBY3RpdmF0aW9uU3RhdGUiLCJhY3RpdmF0aW9uVGltZXJDYWxsYmFjayIsInJ1bkRlYWN0aXZhdGlvblVYTG9naWNJZlJlYWR5IiwiYWN0aXZhdGVIYW5kbGVyIiwiZSIsImFjdGl2YXRlSW1wbCIsImRlYWN0aXZhdGVIYW5kbGVyIiwiZGVhY3RpdmF0ZUltcGwiLCJmb2N1c0hhbmRsZXIiLCJoYW5kbGVGb2N1cyIsImJsdXJIYW5kbGVyIiwiaGFuZGxlQmx1ciIsInJlc2l6ZUhhbmRsZXIiLCJyaWdodCIsImJvdHRvbSIsInN1cHBvcnRzUHJlc3NSaXBwbGUiLCJyZWdpc3RlclJvb3RIYW5kbGVycyIsIlJPT1RfMSIsIlVOQk9VTkRFRF8xIiwiUk9PVF8yIiwiVU5CT1VOREVEXzIiLCJyZW1vdmVDc3NWYXJzIiwiZGVyZWdpc3RlclJvb3RIYW5kbGVycyIsImRlcmVnaXN0ZXJEZWFjdGl2YXRpb25IYW5kbGVycyIsImFjdGl2YXRpb25FdmVudCIsImhhc0RlYWN0aXZhdGlvblVYUnVuIiwiaXNBY3RpdmF0ZWQiLCJpc1Byb2dyYW1tYXRpYyIsIndhc0FjdGl2YXRlZEJ5UG9pbnRlciIsIndhc0VsZW1lbnRNYWRlQWN0aXZlIiwiQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xIiwiQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xXzEiLCJyZWdpc3RlckRlYWN0aXZhdGlvbkhhbmRsZXJzIiwidHlwZSIsIlBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzEiLCJQT0lOVEVSX0RFQUNUSVZBVElPTl9FVkVOVF9UWVBFU18xXzEiLCJlXzMiLCJBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzIiLCJBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzJfMSIsImVfM18xIiwiZV80IiwiUE9JTlRFUl9ERUFDVElWQVRJT05fRVZFTlRfVFlQRVNfMiIsIlBPSU5URVJfREVBQ1RJVkFUSU9OX0VWRU5UX1RZUEVTXzJfMSIsImVfNF8xIiwicmlwcGxlU3RyaW5ncyIsImtleXMiLCJwcmV2aW91c0FjdGl2YXRpb25FdmVudCIsInNvbWUiLCJyZXNldEFjdGl2YXRpb25TdGF0ZSIsImNoZWNrRWxlbWVudE1hZGVBY3RpdmUiLCJhbmltYXRlQWN0aXZhdGlvbiIsInRyYW5zbGF0ZVN0YXJ0IiwidHJhbnNsYXRlRW5kIiwiZ2V0RmdUcmFuc2xhdGlvbkNvb3JkaW5hdGVzIiwic3RhcnRQb2ludCIsImVuZFBvaW50Iiwicm1Cb3VuZGVkQWN0aXZhdGlvbkNsYXNzZXMiLCJhbmltYXRlRGVhY3RpdmF0aW9uIiwibWF4RGltIiwic3FydCIsInBvdyIsImZsb29yIiwidXBkYXRlTGF5b3V0Q3NzVmFycyIsInJvdW5kIiwic3VwcG9ydHNDc3NWYXJpYWJsZXNfIiwic3VwcG9ydHNDc3NWYXJpYWJsZXMiLCJmb3JjZVJlZnJlc2giLCJzdXBwb3J0c0Nzc1ZhcnMiLCJDU1MiLCJzdXBwb3J0cyIsImV4cGxpY2l0bHlTdXBwb3J0c0Nzc1ZhcnMiLCJ3ZUFyZUZlYXR1cmVEZXRlY3RpbmdTYWZhcmkxMHBsdXMiLCJnZXROb3JtYWxpemVkRXZlbnRDb29yZHMiLCJwYWdlT2Zmc2V0IiwiY2xpZW50UmVjdCIsIm5vcm1hbGl6ZWRYIiwibm9ybWFsaXplZFkiLCJkb2N1bWVudFgiLCJkb2N1bWVudFkiLCJ0b3VjaEV2ZW50IiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwibW91c2VFdmVudCIsIkNvcm5lckJpdCIsIkNvcm5lciIsIkFOQ0hPUiIsIkFOSU1BVElOR19DTE9TRUQiLCJBTklNQVRJTkdfT1BFTiIsIkZJWEVEIiwiSVNfT1BFTl9CRUxPVyIsIkZPQ1VTQUJMRV9FTEVNRU5UUyIsIlRSQU5TSVRJT05fT1BFTl9EVVJBVElPTiIsIlRSQU5TSVRJT05fQ0xPU0VfRFVSQVRJT04iLCJNQVJHSU5fVE9fRURHRSIsIkFOQ0hPUl9UT19NRU5VX1NVUkZBQ0VfV0lEVEhfUkFUSU8iLCJUT1VDSF9FVkVOVF9XQUlUX01TIiwiTElTVF9JVEVNX0FDVElWQVRFRF9DTEFTUyIsIkxJU1RfSVRFTV9DTEFTUyIsIkxJU1RfSVRFTV9ESVNBQkxFRF9DTEFTUyIsIkxJU1RfSVRFTV9TRUxFQ1RFRF9DTEFTUyIsIkxJU1RfSVRFTV9URVhUX0NMQVNTIiwiTElTVF9JVEVNX1BSSU1BUllfVEVYVF9DTEFTUyIsImV2b2x1dGlvbkNsYXNzTmFtZU1hcCIsImRlcHJlY2F0ZWRDbGFzc05hbWVNYXAiLCJBQ1RJT05fRVZFTlQiLCJBUklBX0NIRUNLRUQiLCJBUklBX0NIRUNLRURfQ0hFQ0tCT1hfU0VMRUNUT1IiLCJBUklBX0NIRUNLRURfUkFESU9fU0VMRUNUT1IiLCJBUklBX0NVUlJFTlQiLCJBUklBX0RJU0FCTEVEIiwiQVJJQV9PUklFTlRBVElPTiIsIkFSSUFfT1JJRU5UQVRJT05fSE9SSVpPTlRBTCIsIkFSSUFfUk9MRV9DSEVDS0JPWF9TRUxFQ1RPUiIsIkFSSUFfU0VMRUNURUQiLCJBUklBX0lOVEVSQUNUSVZFX1JPTEVTX1NFTEVDVE9SIiwiQVJJQV9NVUxUSV9TRUxFQ1RBQkxFX1NFTEVDVE9SIiwiQ0hFQ0tCT1hfUkFESU9fU0VMRUNUT1IiLCJDSEVDS0JPWF9TRUxFQ1RPUiIsIkNISUxEX0VMRU1FTlRTX1RPX1RPR0dMRV9UQUJJTkRFWCIsIkRFUFJFQ0FURURfU0VMRUNUT1IiLCJGT0NVU0FCTEVfQ0hJTERfRUxFTUVOVFMiLCJSQURJT19TRUxFQ1RPUiIsIlNFTEVDVEVEX0lURU1fU0VMRUNUT1IiLCJVTlNFVF9JTkRFWCIsIlRZUEVBSEVBRF9CVUZGRVJfQ0xFQVJfVElNRU9VVF9NUyIsIktFWSIsIm5vcm1hbGl6ZWRLZXlzIiwibWFwcGVkS2V5Q29kZXMiLCJuYXZpZ2F0aW9uS2V5cyIsIm5vcm1hbGl6ZUtleSIsImhhcyIsIkVMRU1FTlRTX0tFWV9BTExPV0VEX0lOIiwicHJldmVudERlZmF1bHRFdmVudCIsInRhZ05hbWUiLCJ0b0xvd2VyQ2FzZSIsInByZXZlbnREZWZhdWx0IiwibWF0Y2hJdGVtIiwiaW5kZXgiLCJuZXh0Q2hhciIsImZvY3VzSXRlbUF0SW5kZXgiLCJzb3J0ZWRJbmRleEJ5Rmlyc3RDaGFyIiwiZm9jdXNlZEl0ZW1JbmRleCIsInNraXBGb2N1cyIsImlzSXRlbUF0SW5kZXhEaXNhYmxlZCIsImJ1ZmZlckNsZWFyVGltZW91dCIsImNsZWFyQnVmZmVyIiwidHlwZWFoZWFkQnVmZmVyIiwiZmlyc3RDaGFyIiwiaXRlbXNNYXRjaGluZ0ZpcnN0Q2hhciIsImN1cnJlbnRGaXJzdENoYXIiLCJzb3J0ZWRJbmRleEN1cnNvciIsIm5ld0luZGV4IiwiY3Vyc29yUG9zaXRpb24iLCJuZXdDdXJzb3JQb3NpdGlvbiIsIm1hdGNoRmlyc3RDaGFyIiwic3RhcnRpbmdJdGVtIiwidGV4dCIsImxhc3RJbmRleE9mIiwibmV4dEN1cnNvclBvc2l0aW9uIiwiY3VycmVudEl0ZW0iLCJpc0VuYWJsZWQiLCJtYXRjaEFsbENoYXJzIiwiaXNUeXBpbmdJblByb2dyZXNzIiwiZXZlbnQiLCJpc1RhcmdldExpc3RJdGVtIiwiaXNBcnJvd0xlZnQiLCJpc0Fycm93VXAiLCJpc0Fycm93UmlnaHQiLCJpc0Fycm93RG93biIsImlzSG9tZSIsImlzRW5kIiwiaXNTcGFjZSIsImN0cmxLZXkiLCJtZXRhS2V5IiwiRGVmYXVsdEZvY3VzU3RhdGUiLCJNRENMaXN0Rm91bmRhdGlvbiIsIndyYXBGb2N1cyIsImlzVmVydGljYWwiLCJpc1NpbmdsZVNlbGVjdGlvbkxpc3QiLCJzZWxlY3RlZEluZGV4IiwidXNlQWN0aXZhdGVkQ2xhc3MiLCJ1c2VTZWxlY3RlZEF0dHIiLCJhcmlhQ3VycmVudEF0dHJWYWx1ZSIsImlzQ2hlY2tib3hMaXN0IiwiaXNSYWRpb0xpc3QiLCJoYXNUeXBlYWhlYWQiLCJ0eXBlYWhlYWRTdGF0ZSIsImFkZENsYXNzRm9yRWxlbWVudEluZGV4IiwiZ2V0QXR0cmlidXRlRm9yRWxlbWVudEluZGV4IiwiZ2V0Rm9jdXNlZEVsZW1lbnRJbmRleCIsImdldExpc3RJdGVtQ291bnQiLCJoYXNDaGVja2JveEF0SW5kZXgiLCJoYXNSYWRpb0F0SW5kZXgiLCJpc0NoZWNrYm94Q2hlY2tlZEF0SW5kZXgiLCJpc0ZvY3VzSW5zaWRlTGlzdCIsImlzUm9vdEZvY3VzZWQiLCJsaXN0SXRlbUF0SW5kZXhIYXNDbGFzcyIsIm5vdGlmeUFjdGlvbiIsInJlbW92ZUNsYXNzRm9yRWxlbWVudEluZGV4Iiwic2V0QXR0cmlidXRlRm9yRWxlbWVudEluZGV4Iiwic2V0Q2hlY2tlZENoZWNrYm94T3JSYWRpb0F0SW5kZXgiLCJzZXRUYWJJbmRleEZvckxpc3RJdGVtQ2hpbGRyZW4iLCJnZXRQcmltYXJ5VGV4dEF0SW5kZXgiLCJtYXliZUluaXRpYWxpemVTaW5nbGVTZWxlY3Rpb24iLCJ0eXBlYWhlYWRJbml0U29ydGVkSW5kZXgiLCJnZXRGb2N1c2VkSXRlbUluZGV4Iiwic2V0V3JhcEZvY3VzIiwic2V0VmVydGljYWxPcmllbnRhdGlvbiIsInNldFNpbmdsZVNlbGVjdGlvbiIsImdldFNlbGVjdGVkSW5kZXhGcm9tRE9NIiwic2VsZWN0ZWRJdGVtSW5kZXgiLCJzZXRVc2VBY3RpdmF0ZWRDbGFzcyIsImxpc3RJdGVtc0NvdW50IiwiaSIsImhhc1NlbGVjdGVkQ2xhc3MiLCJoYXNBY3RpdmF0ZWRDbGFzcyIsInNldEhhc1R5cGVhaGVhZCIsImlzVHlwZWFoZWFkSW5Qcm9ncmVzcyIsInVzZUFjdGl2YXRlZCIsInNldFVzZVNlbGVjdGVkQXR0cmlidXRlIiwidXNlU2VsZWN0ZWQiLCJnZXRTZWxlY3RlZEluZGV4Iiwic2V0U2VsZWN0ZWRJbmRleCIsImZvcmNlVXBkYXRlIiwiaXNJbmRleFZhbGlkIiwic2V0Q2hlY2tib3hBdEluZGV4Iiwic2V0UmFkaW9BdEluZGV4Iiwic2V0U2luZ2xlU2VsZWN0aW9uQXRJbmRleCIsImhhbmRsZUZvY3VzSW4iLCJsaXN0SXRlbUluZGV4IiwiaGFuZGxlRm9jdXNPdXQiLCJzZXRUYWJpbmRleFRvRmlyc3RTZWxlY3RlZE9yRm9jdXNlZEl0ZW0iLCJpc1Jvb3RMaXN0SXRlbSIsImlzTGV0dGVyQSIsImZvY3VzTGFzdEVsZW1lbnQiLCJmb2N1c0ZpcnN0RWxlbWVudCIsImN1cnJlbnRJbmRleCIsImZvY3VzTmV4dEVsZW1lbnQiLCJmb2N1c1ByZXZFbGVtZW50IiwidG9nZ2xlQWxsIiwiaXNTZWxlY3RhYmxlTGlzdCIsInNldFNlbGVjdGVkSW5kZXhPbkFjdGlvbiIsInRvZ2dsZUNoZWNrYm94IiwibmV4dEluZGV4IiwicHJldkluZGV4IiwibGFzdEluZGV4IiwiaW5pdGlhbEluZGV4IiwiZ2V0Rmlyc3RTZWxlY3RlZE9yRm9jdXNlZEl0ZW1JbmRleCIsInNldEVuYWJsZWQiLCJpdGVtSW5kZXgiLCJzZWxlY3RlZENsYXNzTmFtZSIsInNldEFyaWFGb3JTaW5nbGVTZWxlY3Rpb25BdEluZGV4Iiwic2V0VGFiaW5kZXhBdEluZGV4IiwiaXNBcmlhQ3VycmVudCIsImFyaWFBdHRyaWJ1dGUiLCJhcmlhQXR0cmlidXRlVmFsdWUiLCJnZXRTZWxlY3Rpb25BdHRyaWJ1dGUiLCJzZWxlY3Rpb25BdHRyaWJ1dGUiLCJBcnJheSIsInRhcmdldEluZGV4IiwicmVkdWNlIiwibWluSW5kZXgiLCJtaW4iLCJpc0luZGV4SW5SYW5nZSIsImxpc3RTaXplIiwidG9nZ2xlQ2hlY2tib3hBdEluZGV4Iiwic2VsZWN0ZWRJbmRleGVzIiwiY3VycmVudGx5U2VsZWN0ZWRJbmRleGVzIiwiY291bnQiLCJhbGxJbmRleGVzIiwidHlwZWFoZWFkTWF0Y2hJdGVtIiwic3RhcnRpbmdJbmRleCIsImxpc3RJdGVtQ291bnQiLCJnZXRQcmltYXJ5VGV4dEJ5SXRlbUluZGV4IiwicHJpbWFyeVRleHQiLCJ0cmltIiwidmFsdWVzIiwic29ydCIsImZpcnN0Iiwic2Vjb25kIiwiY2xlYXJUeXBlYWhlYWRCdWZmZXIiLCJNRENMaXN0IiwiZnJvbSIsImNsYXNzTmFtZU1hcCIsImlzRXZvbHV0aW9uRW5hYmxlZCIsIm9iaiIsImhhbmRsZUNsaWNrRXZlbnQiLCJoYW5kbGVLZXlkb3duRXZlbnQiLCJmb2N1c0luRXZlbnRMaXN0ZW5lciIsImhhbmRsZUZvY3VzSW5FdmVudCIsImZvY3VzT3V0RXZlbnRMaXN0ZW5lciIsImhhbmRsZUZvY3VzT3V0RXZlbnQiLCJpbml0aWFsaXplTGlzdFR5cGUiLCJlbnN1cmVGb2N1c2FibGUiLCJkaXJlY3Rpb24iLCJ2ZXJ0aWNhbCIsIml0ZW1TZWxlY3RvciIsImNoaWxkU2VsZWN0b3IiLCJpdGVtRWxzIiwiZm9jdXNhYmxlQ2hpbGRFbHMiLCJnZXRQcmltYXJ5VGV4dCIsIml0ZW0iLCJ0ZXh0Q29udGVudCIsInNpbmdsZUxpbmVUZXh0IiwiaXNJbnRlcmFjdGl2ZSIsInNlbGVjdGlvbiIsImxpc3RJdGVtIiwibGlzdEVsZW1lbnRzIiwiY2hlY2tib3hMaXN0SXRlbXMiLCJyYWRpb1NlbGVjdGVkTGlzdEl0ZW0iLCJwcmVzZWxlY3RlZEl0ZW1zIiwidG9nZ2xlRWwiLCJpbml0RXZlbnQiLCJ0YWJJbmRleFZhbHVlIiwiaW5pdGlhbEZvY3VzSW5kZXgiLCJnZXRMaXN0SXRlbUluZGV4IiwibmVhcmVzdFBhcmVudCIsIk1EQ01lbnVTdXJmYWNlRm91bmRhdGlvbiIsImlzU3VyZmFjZU9wZW4iLCJpc1F1aWNrT3BlbiIsImlzSG9pc3RlZEVsZW1lbnQiLCJpc0ZpeGVkUG9zaXRpb24iLCJpc0hvcml6b250YWxseUNlbnRlcmVkT25WaWV3cG9ydCIsIm1heEhlaWdodCIsIm9wZW5BbmltYXRpb25FbmRUaW1lcklkIiwiY2xvc2VBbmltYXRpb25FbmRUaW1lcklkIiwiYW5pbWF0aW9uUmVxdWVzdElkIiwiYW5jaG9yQ29ybmVyIiwiVE9QX1NUQVJUIiwib3JpZ2luQ29ybmVyIiwiYW5jaG9yTWFyZ2luIiwicG9zaXRpb24iLCJoYXNBbmNob3IiLCJpc0VsZW1lbnRJbkNvbnRhaW5lciIsImlzRm9jdXNlZCIsImlzUnRsIiwiZ2V0SW5uZXJEaW1lbnNpb25zIiwiZ2V0QW5jaG9yRGltZW5zaW9ucyIsImdldFdpbmRvd0RpbWVuc2lvbnMiLCJnZXRCb2R5RGltZW5zaW9ucyIsImdldFdpbmRvd1Njcm9sbCIsInNldFBvc2l0aW9uIiwic2V0TWF4SGVpZ2h0Iiwic2V0VHJhbnNmb3JtT3JpZ2luIiwic2F2ZUZvY3VzIiwicmVzdG9yZUZvY3VzIiwibm90aWZ5Q2xvc2UiLCJub3RpZnlPcGVuIiwic2V0QW5jaG9yQ29ybmVyIiwiY29ybmVyIiwiZmxpcENvcm5lckhvcml6b250YWxseSIsIlJJR0hUIiwic2V0QW5jaG9yTWFyZ2luIiwibWFyZ2luIiwic2V0SXNIb2lzdGVkIiwiaXNIb2lzdGVkIiwic2V0Rml4ZWRQb3NpdGlvbiIsInNldEFic29sdXRlUG9zaXRpb24iLCJpc0Zpbml0ZSIsInNldElzSG9yaXpvbnRhbGx5Q2VudGVyZWRPblZpZXdwb3J0IiwiaXNDZW50ZXJlZCIsInNldFF1aWNrT3BlbiIsInF1aWNrT3BlbiIsImRpbWVuc2lvbnMiLCJhdXRvcG9zaXRpb24iLCJtYXliZVJlc3RvcmVGb2N1cyIsImhhbmRsZUJvZHlDbGljayIsIm1lYXN1cmVtZW50cyIsImdldEF1dG9MYXlvdXRtZWFzdXJlbWVudHMiLCJnZXRvcmlnaW5Db3JuZXIiLCJtYXhNZW51U3VyZmFjZUhlaWdodCIsImdldE1lbnVTdXJmYWNlTWF4SGVpZ2h0IiwidmVydGljYWxBbGlnbm1lbnQiLCJoYXNCaXQiLCJCT1RUT00iLCJob3Jpem9udGFsQWxpZ25tZW50IiwiaG9yaXpvbnRhbE9mZnNldCIsImdldEhvcml6b250YWxPcmlnaW5PZmZzZXQiLCJ2ZXJ0aWNhbE9mZnNldCIsImdldFZlcnRpY2FsT3JpZ2luT2Zmc2V0IiwiYW5jaG9yU2l6ZSIsInN1cmZhY2VTaXplIiwiYWRqdXN0UG9zaXRpb25Gb3JIb2lzdGVkRWxlbWVudCIsImFuY2hvclJlY3QiLCJib2R5U2l6ZSIsInZpZXdwb3J0U2l6ZSIsIndpbmRvd1Njcm9sbCIsInZpZXdwb3J0RGlzdGFuY2UiLCJhdmFpbGFibGVUb3AiLCJhdmFpbGFibGVCb3R0b20iLCJzZXRCaXQiLCJhdmFpbGFibGVMZWZ0IiwiYXZhaWxhYmxlUmlnaHQiLCJpc0FuY2hvcmVkVG9SaWdodCIsImlzRmxpcFJ0bCIsIkZMSVBfUlRMIiwiaGFzUmlnaHRCaXQiLCJpc0F2YWlsYWJsZUxlZnQiLCJpc0F2YWlsYWJsZVJpZ2h0IiwiaXNPcmlnaW5Db3JuZXJBbGlnbmVkVG9FbmQiLCJ1bnNldEJpdCIsImlzQm90dG9tQWxpZ25lZCIsImlzQm90dG9tQW5jaG9yZWQiLCJpc1JpZ2h0QWxpZ25lZCIsImF2b2lkSG9yaXpvbnRhbE92ZXJsYXAiLCJyaWdodE9mZnNldCIsImF2b2lkVmVydGljYWxPdmVybGFwIiwicHJvcHMiLCJwcm9wc18xIiwicHJvcHNfMV8xIiwicHJvcCIsImNoaWxkSGFzRm9jdXMiLCJiaXQiLCJudW0iLCJNRENNZW51U3VyZmFjZSIsInBhcmVudEVsIiwiYW5jaG9yRWxlbWVudCIsInJlZ2lzdGVyQm9keUNsaWNrTGlzdGVuZXIiLCJjYXB0dXJlIiwiZGVyZWdpc3RlckJvZHlDbGlja0xpc3RlbmVyIiwic2V0TWVudVN1cmZhY2VBbmNob3JFbGVtZW50IiwiaXNGaXhlZCIsImdldFByb3BlcnR5VmFsdWUiLCJvcmlnaW4iLCJwcmV2aW91c0ZvY3VzIiwiaW5uZXJXaWR0aCIsImlubmVySGVpZ2h0IiwiY2xpZW50V2lkdGgiLCJyb290SFRNTCIsIk1FTlVfU0VMRUNURURfTElTVF9JVEVNIiwiTUVOVV9TRUxFQ1RJT05fR1JPVVAiLCJBUklBX0RJU0FCTEVEX0FUVFIiLCJMSVNUX1NFTEVDVE9SIiwiU0VMRUNURURfRVZFTlQiLCJGT0NVU19ST09UX0lOREVYIiwiTURDTWVudUZvdW5kYXRpb24iLCJkZWZhdWx0Rm9jdXNTdGF0ZSIsIkxJU1RfUk9PVCIsImFkZENsYXNzVG9FbGVtZW50QXRJbmRleCIsInJlbW92ZUNsYXNzRnJvbUVsZW1lbnRBdEluZGV4IiwiYWRkQXR0cmlidXRlVG9FbGVtZW50QXRJbmRleCIsInJlbW92ZUF0dHJpYnV0ZUZyb21FbGVtZW50QXRJbmRleCIsImVsZW1lbnRDb250YWluc0NsYXNzIiwiY2xvc2VTdXJmYWNlIiwiZ2V0RWxlbWVudEluZGV4Iiwibm90aWZ5U2VsZWN0ZWQiLCJnZXRNZW51SXRlbUNvdW50IiwiZm9jdXNMaXN0Um9vdCIsImdldFNlbGVjdGVkU2libGluZ09mSXRlbUF0SW5kZXgiLCJpc1NlbGVjdGFibGVJdGVtQXRJbmRleCIsImhhbmRsZUl0ZW1BY3Rpb24iLCJyZWNvbXB1dGVkSW5kZXgiLCJoYW5kbGVNZW51U3VyZmFjZU9wZW5lZCIsIkZJUlNUX0lURU0iLCJMQVNUX0lURU0iLCJOT05FIiwic2V0RGVmYXVsdEZvY3VzU3RhdGUiLCJmb2N1c1N0YXRlIiwidmFsaWRhdGVkSW5kZXgiLCJwcmV2U2VsZWN0ZWRJbmRleCIsIm1lbnVTaXplIiwiTURDTWVudSIsIm1lbnVTdXJmYWNlRmFjdG9yeSIsImxpc3RGYWN0b3J5IiwibWVudVN1cmZhY2UiLCJsaXN0IiwiaXRlbXMiLCJ0eXBlYWhlYWRJblByb2dyZXNzIiwic2luZ2xlU2VsZWN0aW9uIiwiZ2V0T3B0aW9uQnlJbmRleCIsInNldEFuY2hvckVsZW1lbnQiLCJzZWxlY3RlZEl0ZW1FbCIsIkFDVElWQVRFRCIsIkZPQ1VTRUQiLCJJTlZBTElEIiwiTUVOVV9JTlZBTElEIiwiT1VUTElORUQiLCJSRVFVSVJFRCIsIldJVEhfTEVBRElOR19JQ09OIiwiQVJJQV9DT05UUk9MUyIsIkFSSUFfREVTQ1JJQkVEQlkiLCJBUklBX1NFTEVDVEVEX0FUVFIiLCJDSEFOR0VfRVZFTlQiLCJISURERU5fSU5QVVRfU0VMRUNUT1IiLCJMRUFESU5HX0lDT05fU0VMRUNUT1IiLCJMSU5FX1JJUFBMRV9TRUxFQ1RPUiIsIk1FTlVfU0VMRUNUT1IiLCJPVVRMSU5FX1NFTEVDVE9SIiwiU0VMRUNURURfVEVYVF9TRUxFQ1RPUiIsIlNFTEVDVF9BTkNIT1JfU0VMRUNUT1IiLCJWQUxVRV9BVFRSIiwiTEFCRUxfU0NBTEUiLCJDTElDS19ERUJPVU5DRV9USU1FT1VUX01TIiwiTURDU2VsZWN0Rm91bmRhdGlvbiIsImZvdW5kYXRpb25NYXAiLCJpc01lbnVPcGVuIiwidXNlRGVmYXVsdFZhbGlkYXRpb24iLCJjdXN0b21WYWxpZGl0eSIsImxhc3RTZWxlY3RlZEluZGV4IiwiY2xpY2tEZWJvdW5jZVRpbWVvdXQiLCJyZWNlbnRseUNsaWNrZWQiLCJsZWFkaW5nSWNvbiIsImhlbHBlclRleHQiLCJhY3RpdmF0ZUJvdHRvbUxpbmUiLCJkZWFjdGl2YXRlQm90dG9tTGluZSIsImhhc0xhYmVsIiwiZmxvYXRMYWJlbCIsImdldExhYmVsV2lkdGgiLCJzZXRMYWJlbFJlcXVpcmVkIiwiaGFzT3V0bGluZSIsIm5vdGNoT3V0bGluZSIsImNsb3NlT3V0bGluZSIsIm5vdGlmeUNoYW5nZSIsInNldFNlbGVjdGVkVGV4dCIsImlzU2VsZWN0QW5jaG9yRm9jdXNlZCIsImdldFNlbGVjdEFuY2hvckF0dHIiLCJzZXRTZWxlY3RBbmNob3JBdHRyIiwicmVtb3ZlU2VsZWN0QW5jaG9yQXR0ciIsImFkZE1lbnVDbGFzcyIsInJlbW92ZU1lbnVDbGFzcyIsIm9wZW5NZW51IiwiY2xvc2VNZW51IiwiZ2V0QW5jaG9yRWxlbWVudCIsInNldE1lbnVBbmNob3JFbGVtZW50Iiwic2V0TWVudUFuY2hvckNvcm5lciIsInNldE1lbnVXcmFwRm9jdXMiLCJmb2N1c01lbnVJdGVtQXRJbmRleCIsImdldE1lbnVJdGVtVmFsdWVzIiwiZ2V0TWVudUl0ZW1UZXh0QXRJbmRleCIsInNraXBOb3RpZnkiLCJzZXRWYWx1ZSIsImdldFZhbHVlIiwibWVudUl0ZW1WYWx1ZXMiLCJnZXREaXNhYmxlZCIsImlzRGlzYWJsZWQiLCJ0b1N0cmluZyIsInNldEhlbHBlclRleHRDb250ZW50Iiwic2V0Q29udGVudCIsIm9wdGlvbkhhc1ZhbHVlIiwic2hvdWxkRmxvYXRBbmROb3RjaCIsImxheW91dE9wdGlvbnMiLCJoYW5kbGVNZW51T3BlbmVkIiwiZm9jdXNJdGVtSW5kZXgiLCJoYW5kbGVNZW51Q2xvc2luZyIsImhhbmRsZU1lbnVDbG9zZWQiLCJibHVyIiwic2V0VmFsaWQiLCJpc1ZhbGlkIiwiaGFuZGxlTWVudUl0ZW1BY3Rpb24iLCJzZXRDbGlja0RlYm91bmNlVGltZW91dCIsImFycm93VXAiLCJhcnJvd0Rvd24iLCJ0eXBlYWhlYWROZXh0SW5kZXgiLCJvcGVuTm90Y2giLCJsYWJlbFNjYWxlIiwibGFiZWxXaWR0aCIsInNldExlYWRpbmdJY29uQXJpYUxhYmVsIiwic2V0QXJpYUxhYmVsIiwic2V0TGVhZGluZ0ljb25Db250ZW50IiwiZ2V0VXNlRGVmYXVsdFZhbGlkYXRpb24iLCJzZXRVc2VEZWZhdWx0VmFsaWRhdGlvbiIsInN5bmNIZWxwZXJUZXh0VmFsaWRpdHkiLCJnZXRSZXF1aXJlZCIsImFuY2hvckVsIiwiQk9UVE9NX1NUQVJUIiwic2V0VmFsaWRpdHkiLCJoZWxwZXJUZXh0VmlzaWJsZSIsImlzVmlzaWJsZSIsImhlbHBlclRleHRJZCIsImdldElkIiwiQVJJQV9ISURERU4iLCJST0xFIiwiSEVMUEVSX1RFWFRfVkFMSURBVElPTl9NU0ciLCJIRUxQRVJfVEVYVF9WQUxJREFUSU9OX01TR19QRVJTSVNURU5UIiwiTURDU2VsZWN0SGVscGVyVGV4dEZvdW5kYXRpb24iLCJzZXRBdHRyIiwiZ2V0QXR0ciIsInJlbW92ZUF0dHIiLCJzZXRWYWxpZGF0aW9uIiwiaXNWYWxpZGF0aW9uIiwic2V0VmFsaWRhdGlvbk1zZ1BlcnNpc3RlbnQiLCJpc1BlcnNpc3RlbnQiLCJzZWxlY3RJc1ZhbGlkIiwiaXNQZXJzaXN0ZW50VmFsaWRhdGlvbk1zZyIsInNob3dUb1NjcmVlblJlYWRlciIsImhpZGUiLCJNRENTZWxlY3RIZWxwZXJUZXh0IiwiSUNPTl9FVkVOVCIsIklDT05fUk9MRSIsIklOVEVSQUNUSU9OX0VWRU5UUyIsIk1EQ1NlbGVjdEljb25Gb3VuZGF0aW9uIiwic2F2ZWRUYWJJbmRleCIsImludGVyYWN0aW9uSGFuZGxlciIsImhhbmRsZUludGVyYWN0aW9uIiwibm90aWZ5SWNvbkFjdGlvbiIsIklOVEVSQUNUSU9OX0VWRU5UU18xIiwiSU5URVJBQ1RJT05fRVZFTlRTXzFfMSIsIklOVEVSQUNUSU9OX0VWRU5UU18yIiwiSU5URVJBQ1RJT05fRVZFTlRTXzJfMSIsImlzRW50ZXJLZXkiLCJNRENTZWxlY3RJY29uIiwiTURDU2VsZWN0IiwibGFiZWxGYWN0b3J5IiwibGluZVJpcHBsZUZhY3RvcnkiLCJvdXRsaW5lRmFjdG9yeSIsIm1lbnVGYWN0b3J5IiwiaWNvbkZhY3RvcnkiLCJoZWxwZXJUZXh0RmFjdG9yeSIsInNlbGVjdEFuY2hvciIsInNlbGVjdGVkVGV4dCIsImhpZGRlbklucHV0IiwiaGFzQXR0cmlidXRlIiwiaGVscGVyVGV4dEVsZW1lbnQiLCJnZXRFbGVtZW50QnlJZCIsIm1lbnVTZXR1cCIsImxhYmVsRWxlbWVudCIsImxpbmVSaXBwbGVFbGVtZW50IiwibGluZVJpcHBsZSIsIm91dGxpbmVFbGVtZW50Iiwib3V0bGluZSIsImdldE5vcm1hbGl6ZWRYQ29vcmRpbmF0ZSIsIm1lbnUiLCJtYXAiLCJnZXRTZWxlY3RBZGFwdGVyTWV0aG9kcyIsImdldENvbW1vbkFkYXB0ZXJNZXRob2RzIiwiZ2V0T3V0bGluZUFkYXB0ZXJNZXRob2RzIiwiZ2V0TGFiZWxBZGFwdGVyTWV0aG9kcyIsImdldEZvdW5kYXRpb25NYXAiLCJtZW51RWxlbWVudCIsImdldE1lbnVJdGVtQXR0ciIsIm1lbnVJdGVtIiwidGFyZ2V0Q2xpZW50UmVjdCIsImlzVG91Y2hFdmVudCIsInRvdWNoZXMiLCJjbGllbnRYIiwiZm91bmRhdGlvbkZvclNlbGVjdCIsIkNzc0NsYXNzZXMiLCJTZWxlY3RvcnMiLCJhbGxUYXJnZXRPYnNlcnZlcnMiLCJXZWFrTWFwIiwiTURDU3dpdGNoUmVuZGVyRm91bmRhdGlvbiIsIm9ic2VydmUiLCJvbkRpc2FibGVkQ2hhbmdlIiwicHJvY2Vzc2luZyIsIm9uUHJvY2Vzc2luZ0NoYW5nZSIsInNlbGVjdGVkIiwib25TZWxlY3RlZENoYW5nZSIsImluaXRGcm9tRE9NIiwic2V0T2JzZXJ2ZXJzRW5hYmxlZCIsIlBST0NFU1NJTkciLCJzdG9wUHJvY2Vzc2luZ0lmRGlzYWJsZWQiLCJ0b2dnbGVDbGFzcyIsInNldEFyaWFDaGVja2VkIiwiU3RyaW5nIiwiVU5TRUxFQ1RFRCIsIk1EQ1N3aXRjaEZvdW5kYXRpb24iLCJNRENPYnNlcnZlckZvdW5kYXRpb24iLCJ1bm9ic2VydmVzIiwidW5vYnNlcnZlIiwib2JzZXJ2ZXJzIiwiY2xlYW51cCIsInByb3BlcnR5Iiwib2JzZXJ2ZXIiLCJvYnNlcnZlUHJvcGVydHkiLCJjbGVhbnVwXzEiLCJjbGVhbnVwXzFfMSIsImNsZWFudXBGbiIsIm9ic2VydmVyc01hcCIsImdldE9ic2VydmVycyIsImluc3RhbGxlZFByb3BlcnRpZXMiLCJ0YXJnZXRPYnNlcnZlcnMiLCJkZXNjcmlwdG9yIiwiZGVzY3JpcHRvclRhcmdldCIsImdldERlc2NyaXB0b3IiLCJ3cml0YWJsZSIsIm9ic2VydmVkRGVzY3JpcHRvciIsImRlc2NHZXQiLCJkZXNjU2V0IiwidmFsdWVfMSIsIm5ld1ZhbHVlIiwicHJldmlvdXMiLCJpbnN0YWxsT2JzZXJ2ZXIiLCJzcGxpY2UiLCJlbmFibGVkIiwiTURDU3dpdGNoIiwiY3JlYXRlUmlwcGxlRm91bmRhdGlvbiIsInJpcHBsZUVsZW1lbnQiLCJSSVBQTEUiLCJhcmlhQ2hlY2tlZCIsImNyZWF0ZVJpcHBsZUFkYXB0ZXIiLCJST09UX1NFTEVDVE9SIiwiTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlckZvdW5kYXRpb24iLCJzZXRDb3VudGVyVmFsdWUiLCJjdXJyZW50TGVuZ3RoIiwibWF4TGVuZ3RoIiwiTURDVGV4dEZpZWxkQ2hhcmFjdGVyQ291bnRlciIsIklOUFVUX1NFTEVDVE9SIiwiUFJFRklYX1NFTEVDVE9SIiwiU1VGRklYX1NFTEVDVE9SIiwiVFJBSUxJTkdfSUNPTl9TRUxFQ1RPUiIsIkhFTFBFUl9MSU5FIiwiTEFCRUxfRkxPQVRJTkciLCJURVhUQVJFQSIsIldJVEhfVFJBSUxJTkdfSUNPTiIsIlZBTElEQVRJT05fQVRUUl9XSElURUxJU1QiLCJBTFdBWVNfRkxPQVRfVFlQRVMiLCJQT0lOVEVSRE9XTl9FVkVOVFMiLCJNRENUZXh0RmllbGRGb3VuZGF0aW9uIiwicmVjZWl2ZWRVc2VySW5wdXQiLCJ2YWxpZCIsInVzZU5hdGl2ZVZhbGlkYXRpb24iLCJ2YWxpZGF0ZU9uVmFsdWVDaGFuZ2UiLCJjaGFyYWN0ZXJDb3VudGVyIiwidHJhaWxpbmdJY29uIiwiaW5wdXRGb2N1c0hhbmRsZXIiLCJhY3RpdmF0ZUZvY3VzIiwiaW5wdXRCbHVySGFuZGxlciIsImRlYWN0aXZhdGVGb2N1cyIsImlucHV0SW5wdXRIYW5kbGVyIiwiaGFuZGxlSW5wdXQiLCJzZXRQb2ludGVyWE9mZnNldCIsInRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlciIsImhhbmRsZVRleHRGaWVsZEludGVyYWN0aW9uIiwidmFsaWRhdGlvbkF0dHJpYnV0ZUNoYW5nZUhhbmRsZXIiLCJhdHRyaWJ1dGVzTGlzdCIsImhhbmRsZVZhbGlkYXRpb25BdHRyaWJ1dGVDaGFuZ2UiLCJnZXROYXRpdmVJbnB1dCIsInNob3VsZEFsd2F5c0Zsb2F0IiwiaXNCYWRJbnB1dCIsInNldElucHV0QXR0ciIsInJlbW92ZUlucHV0QXR0ciIsInJlZ2lzdGVyVGV4dEZpZWxkSW50ZXJhY3Rpb25IYW5kbGVyIiwiZGVyZWdpc3RlclRleHRGaWVsZEludGVyYWN0aW9uSGFuZGxlciIsInJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIiLCJkZXJlZ2lzdGVySW5wdXRJbnRlcmFjdGlvbkhhbmRsZXIiLCJyZWdpc3RlclZhbGlkYXRpb25BdHRyaWJ1dGVDaGFuZ2VIYW5kbGVyIiwiTXV0YXRpb25PYnNlcnZlciIsImRlcmVnaXN0ZXJWYWxpZGF0aW9uQXR0cmlidXRlQ2hhbmdlSGFuZGxlciIsImFjdGl2YXRlTGluZVJpcHBsZSIsImRlYWN0aXZhdGVMaW5lUmlwcGxlIiwic2V0TGluZVJpcHBsZVRyYW5zZm9ybU9yaWdpbiIsInNoYWtlTGFiZWwiLCJyZXF1aXJlZCIsInN0eWxlRmxvYXRpbmciLCJQT0lOVEVSRE9XTl9FVkVOVFNfMSIsIlBPSU5URVJET1dOX0VWRU5UU18xXzEiLCJ2YWxpZGF0aW9uT2JzZXJ2ZXIiLCJzZXRjaGFyYWN0ZXJDb3VudGVyIiwiUE9JTlRFUkRPV05fRVZFTlRTXzIiLCJQT0lOVEVSRE9XTl9FVkVOVFNfMl8xIiwibmF0aXZlSW5wdXQiLCJhdHRyaWJ1dGVOYW1lIiwic3R5bGVWYWxpZGl0eSIsInN0eWxlRm9jdXNlZCIsInRhcmdldEV2ZW50IiwiYXV0b0NvbXBsZXRlRm9jdXMiLCJpc05hdGl2ZUlucHV0VmFsaWQiLCJzZXRWYWxpZGF0ZU9uVmFsdWVDaGFuZ2UiLCJzaG91bGRWYWxpZGF0ZSIsImdldFZhbGlkYXRlT25WYWx1ZUNoYW5nZSIsInNldFVzZU5hdGl2ZVZhbGlkYXRpb24iLCJzdHlsZURpc2FibGVkIiwic2V0VHJhaWxpbmdJY29uQXJpYUxhYmVsIiwic2V0VHJhaWxpbmdJY29uQ29udGVudCIsInZhbGlkaXR5IiwiYmFkSW5wdXQiLCJpc0Zsb2F0aW5nIiwiSEVMUEVSX1RFWFRfUEVSU0lTVEVOVCIsIk1EQ1RleHRGaWVsZEhlbHBlclRleHRGb3VuZGF0aW9uIiwic2V0UGVyc2lzdGVudCIsImlucHV0SXNWYWxpZCIsImhlbHBlclRleHRJc1BlcnNpc3RlbnQiLCJ2YWxpZGF0aW9uTXNnTmVlZHNEaXNwbGF5IiwicmVmcmVzaEFsZXJ0Um9sZSIsIk1EQ1RleHRGaWVsZEhlbHBlclRleHQiLCJNRENUZXh0RmllbGRJY29uRm91bmRhdGlvbiIsIk1EQ1RleHRGaWVsZEljb24iLCJNRENUZXh0RmllbGQiLCJyaXBwbGVGYWN0b3J5IiwiY2hhcmFjdGVyQ291bnRlckZhY3RvcnkiLCJoZWxwZXJUZXh0U3RyaW5ncyIsIm5leHRFbGVtZW50U2libGluZyIsImhhc0hlbHBlckxpbmUiLCJoZWxwZXJUZXh0RWwiLCJjaGFyYWN0ZXJDb3VudGVyU3RyaW5ncyIsImNoYXJhY3RlckNvdW50ZXJFbCIsImxlYWRpbmdJY29uRWwiLCJ0cmFpbGluZ0ljb25FbCIsInByZWZpeCIsInN1ZmZpeCIsInBhdHRlcm4iLCJtaW5MZW5ndGgiLCJzdGVwIiwicHJlZml4VGV4dCIsInN1ZmZpeFRleHQiLCJnZXRSb290QWRhcHRlck1ldGhvZHMiLCJnZXRJbnB1dEFkYXB0ZXJNZXRob2RzIiwiZ2V0TGluZVJpcHBsZUFkYXB0ZXJNZXRob2RzIiwibXV0YXRpb25zTGlzdCIsIm11dGF0aW9uIiwiZ2V0QXR0cmlidXRlc0xpc3QiLCJhdHRyaWJ1dGVzIiwiZGlzY29ubmVjdCIsImZvdW5kYXRpb25Gb3JUZXh0RmllbGQiLCJpc1RleHRBcmVhIiwiaXNPdXRsaW5lZCIsInBvbnlmaWxsIiwiRklYRURfQ0xBU1MiLCJGSVhFRF9TQ1JPTExFRF9DTEFTUyIsIlNIT1JUX0NMQVNTIiwiU0hPUlRfQ09MTEFQU0VEX0NMQVNTIiwiU0hPUlRfSEFTX0FDVElPTl9JVEVNX0NMQVNTIiwiREVCT1VOQ0VfVEhST1RUTEVfUkVTSVpFX1RJTUVfTVMiLCJNQVhfVE9QX0FQUF9CQVJfSEVJR0hUIiwiQUNUSU9OX0lURU1fU0VMRUNUT1IiLCJOQVZJR0FUSU9OX0VWRU5UIiwiTkFWSUdBVElPTl9JQ09OX1NFTEVDVE9SIiwiVElUTEVfU0VMRUNUT1IiLCJNRENUb3BBcHBCYXJCYXNlRm91bmRhdGlvbiIsImdldFRvcEFwcEJhckhlaWdodCIsIm5vdGlmeU5hdmlnYXRpb25JY29uQ2xpY2tlZCIsImdldFZpZXdwb3J0U2Nyb2xsWSIsImdldFRvdGFsQWN0aW9uSXRlbXMiLCJoYW5kbGVUYXJnZXRTY3JvbGwiLCJoYW5kbGVXaW5kb3dSZXNpemUiLCJoYW5kbGVOYXZpZ2F0aW9uQ2xpY2siLCJNRENUb3BBcHBCYXJGb3VuZGF0aW9uIiwid2FzRG9ja2VkIiwiaXNEb2NrZWRTaG93aW5nIiwiY3VycmVudEFwcEJhck9mZnNldFRvcCIsImlzQ3VycmVudGx5QmVpbmdSZXNpemVkIiwicmVzaXplVGhyb3R0bGVJZCIsInJlc2l6ZURlYm91bmNlSWQiLCJsYXN0U2Nyb2xsUG9zaXRpb24iLCJ0b3BBcHBCYXJIZWlnaHQiLCJjdXJyZW50U2Nyb2xsUG9zaXRpb24iLCJkaWZmIiwiYWJzIiwibW92ZVRvcEFwcEJhciIsInRocm90dGxlZFJlc2l6ZUhhbmRsZXIiLCJjaGVja0ZvclVwZGF0ZSIsIm9mZnNjcmVlbkJvdW5kYXJ5VG9wIiwiaGFzQW55UGl4ZWxzT2Zmc2NyZWVuIiwiaGFzQW55UGl4ZWxzT25zY3JlZW4iLCJwYXJ0aWFsbHlTaG93aW5nIiwib2Zmc2V0IiwiY3VycmVudEhlaWdodCIsIk1EQ0ZpeGVkVG9wQXBwQmFyRm91bmRhdGlvbiIsIndhc1Njcm9sbGVkIiwiTURDU2hvcnRUb3BBcHBCYXJGb3VuZGF0aW9uIiwiY29sbGFwc2VkIiwiaXNBbHdheXNDb2xsYXBzZWQiLCJzZXRBbHdheXNDb2xsYXBzZWQiLCJjb2xsYXBzZSIsIm1heWJlQ29sbGFwc2VCYXIiLCJnZXRBbHdheXNDb2xsYXBzZWQiLCJ1bmNvbGxhcHNlIiwiTURDVG9wQXBwQmFyIiwibmF2SWNvbiIsImljb25zIiwiaWNvblJpcHBsZXMiLCJpY29uIiwic2Nyb2xsVGFyZ2V0Iiwic2V0U2Nyb2xsVGFyZ2V0Iiwid2luIiwiQmFja29mZiIsIm1zIiwiZmFjdG9yIiwiaml0dGVyIiwiYXR0ZW1wdHMiLCJtb2R1bGUiLCJleHBvcnRzIiwiZHVyYXRpb24iLCJyYW5kIiwicmFuZG9tIiwiZGV2aWF0aW9uIiwicmVzZXQiLCJzZXRNaW4iLCJzZXRNYXgiLCJzZXRKaXR0ZXIiLCJjaGFycyIsImVuY29kZSIsImFycmF5YnVmZmVyIiwiYnl0ZXMiLCJVaW50OEFycmF5IiwibGVuIiwiYmFzZTY0Iiwic3Vic3RyaW5nIiwiZGVjb2RlIiwiZW5jb2RlZDEiLCJlbmNvZGVkMiIsImVuY29kZWQzIiwiZW5jb2RlZDQiLCJidWZmZXJMZW5ndGgiLCJwIiwiQXJyYXlCdWZmZXIiLCJFbWl0dGVyIiwibWl4aW4iLCJvbiIsImZuIiwiX2NhbGxiYWNrcyIsIm9uY2UiLCJvZmYiLCJyZW1vdmVMaXN0ZW5lciIsInJlbW92ZUFsbExpc3RlbmVycyIsImNiIiwiY2FsbGJhY2tzIiwibGlzdGVuZXJzIiwiaGFzTGlzdGVuZXJzIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzBfX18iLCJVUkwiLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfMV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF8yX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfNF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF81X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9JTVBPUlRfN19fXyIsIl9fX0NTU19MT0FERVJfVVJMX0lNUE9SVF84X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfSU1QT1JUXzlfX18iLCJfX19DU1NfTE9BREVSX0VYUE9SVF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzBfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF8xX19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfMl9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzNfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF80X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfNV9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzZfX18iLCJfX19DU1NfTE9BREVSX1VSTF9SRVBMQUNFTUVOVF83X19fIiwiX19fQ1NTX0xPQURFUl9VUkxfUkVQTEFDRU1FTlRfOF9fXyIsIl9fX0NTU19MT0FERVJfVVJMX1JFUExBQ0VNRU5UXzlfX18iLCJpZCIsImNzc1dpdGhNYXBwaW5nVG9TdHJpbmciLCJjb25jYXQiLCJtb2R1bGVzIiwibWVkaWFRdWVyeSIsImRlZHVwZSIsImFscmVhZHlJbXBvcnRlZE1vZHVsZXMiLCJfYXJyYXlMaWtlVG9BcnJheSIsImFyciIsImFycjIiLCJfaXRlbSIsImlzQXJyYXkiLCJfYXJyYXlXaXRoSG9sZXMiLCJTeW1ib2wiLCJpdGVyYXRvciIsIl9zIiwiX2UiLCJfYXJyIiwiX24iLCJfZCIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIm8iLCJtaW5MZW4iLCJuIiwiY29uc3RydWN0b3IiLCJuYW1lIiwidGVzdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIlR5cGVFcnJvciIsIl9ub25JdGVyYWJsZVJlc3QiLCJjc3NNYXBwaW5nIiwiYnRvYSIsInVuZXNjYXBlIiwiZW5jb2RlVVJJQ29tcG9uZW50IiwiSlNPTiIsInN0cmluZ2lmeSIsImRhdGEiLCJzb3VyY2VNYXBwaW5nIiwic291cmNlVVJMcyIsInNvdXJjZXMiLCJzb3VyY2UiLCJzb3VyY2VSb290IiwidXJsIiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXNoIiwibmVlZFF1b3RlcyIsInJlcGxhY2UiLCJmb3JtYXRBcmdzIiwidXNlQ29sb3JzIiwibmFtZXNwYWNlIiwiaHVtYW5pemUiLCJjIiwiY29sb3IiLCJsYXN0QyIsIm1hdGNoIiwic2F2ZSIsIm5hbWVzcGFjZXMiLCJzdG9yYWdlIiwic2V0SXRlbSIsInJlbW92ZUl0ZW0iLCJsb2FkIiwiciIsImdldEl0ZW0iLCJwcm9jZXNzIiwiZW52IiwiREVCVUciLCJfX253anMiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJXZWJraXRBcHBlYXJhbmNlIiwiY29uc29sZSIsImZpcmVidWciLCJleGNlcHRpb24iLCJ0YWJsZSIsInBhcnNlSW50IiwiUmVnRXhwIiwiJDEiLCJsb2NhbFN0b3JhZ2UiLCJsb2NhbHN0b3JhZ2UiLCJ3YXJuZWQiLCJ3YXJuIiwiY29sb3JzIiwibG9nIiwiZGVidWciLCJmb3JtYXR0ZXJzIiwiaiIsInYiLCJtZXNzYWdlIiwiY3JlYXRlRGVidWciLCJwcmV2VGltZSIsIm5hbWVzcGFjZXNDYWNoZSIsImVuYWJsZWRDYWNoZSIsImVuYWJsZU92ZXJyaWRlIiwic2VsZiIsImN1cnIiLCJOdW1iZXIiLCJEYXRlIiwicHJldiIsImNvZXJjZSIsInVuc2hpZnQiLCJmb3JtYXQiLCJmb3JtYXR0ZXIiLCJ2YWwiLCJzZWxlY3RDb2xvciIsImV4dGVuZCIsImRlbGltaXRlciIsIm5ld0RlYnVnIiwidG9OYW1lc3BhY2UiLCJyZWdleHAiLCJzdGFjayIsImRpc2FibGUiLCJuYW1lcyIsInNraXBzIiwiZW5hYmxlIiwic3BsaXQiLCJzdWJzdHIiLCJjaGFyQ29kZUF0IiwiRnVuY3Rpb24iLCJTb2NrZXQiLCJ1cmkiLCJwcm90b2NvbCIsIlRyYW5zcG9ydCIsInRyYW5zcG9ydHMiLCJwYXJzZXIiLCJwYXJzZXVyaSIsInBhcnNlcXMiLCJzdXBlciIsImhvc3RuYW1lIiwiaG9zdCIsInNlY3VyZSIsInBvcnQiLCJxdWVyeSIsImxvY2F0aW9uIiwicmVhZHlTdGF0ZSIsIndyaXRlQnVmZmVyIiwicHJldkJ1ZmZlckxlbiIsImFzc2lnbiIsInBhdGgiLCJhZ2VudCIsIndpdGhDcmVkZW50aWFscyIsInVwZ3JhZGUiLCJqc29ucCIsInRpbWVzdGFtcFBhcmFtIiwicmVtZW1iZXJVcGdyYWRlIiwicmVqZWN0VW5hdXRob3JpemVkIiwicGVyTWVzc2FnZURlZmxhdGUiLCJ0aHJlc2hvbGQiLCJ0cmFuc3BvcnRPcHRpb25zIiwiY2xvc2VPbkJlZm9yZXVubG9hZCIsInVwZ3JhZGVzIiwicGluZ0ludGVydmFsIiwicGluZ1RpbWVvdXQiLCJwaW5nVGltZW91dFRpbWVyIiwidHJhbnNwb3J0Iiwib2ZmbGluZUV2ZW50TGlzdGVuZXIiLCJvbkNsb3NlIiwiY3JlYXRlVHJhbnNwb3J0IiwiaGFzT3duUHJvcGVydHkiLCJFSU8iLCJzaWQiLCJzb2NrZXQiLCJwcmlvcldlYnNvY2tldFN1Y2Nlc3MiLCJzaGlmdCIsInNldFRyYW5zcG9ydCIsIm9uRHJhaW4iLCJvblBhY2tldCIsIm9uRXJyb3IiLCJwcm9iZSIsImZhaWxlZCIsIm9uVHJhbnNwb3J0T3BlbiIsInNlbmQiLCJtc2ciLCJ1cGdyYWRpbmciLCJwYXVzZSIsImZsdXNoIiwiZnJlZXplVHJhbnNwb3J0Iiwib25lcnJvciIsIm9uVHJhbnNwb3J0Q2xvc2UiLCJvbmNsb3NlIiwib251cGdyYWRlIiwidG8iLCJvbk9wZW4iLCJsIiwicGFja2V0Iiwib25IYW5kc2hha2UiLCJwYXJzZSIsInJlc2V0UGluZ1RpbWVvdXQiLCJzZW5kUGFja2V0IiwiY29kZSIsImZpbHRlclVwZ3JhZGVzIiwiYXV0b1VucmVmIiwidW5yZWYiLCJ3cml0ZSIsImNvbXByZXNzIiwiY2xlYW51cEFuZENsb3NlIiwid2FpdEZvclVwZ3JhZGUiLCJyZWFzb24iLCJwaW5nSW50ZXJ2YWxUaW1lciIsImZpbHRlcmVkVXBncmFkZXMiLCJkZXNjcmlwdGlvbiIsImRvT3BlbiIsImRvQ2xvc2UiLCJwYWNrZXRzIiwib25EYXRhIiwiZGVjb2RlUGFja2V0IiwiYmluYXJ5VHlwZSIsIlhNTEh0dHBSZXF1ZXN0IiwiWEhSIiwiSlNPTlAiLCJ3ZWJzb2NrZXQiLCJwb2xsaW5nIiwieGhyIiwieGQiLCJ4cyIsImlzU1NMIiwieGRvbWFpbiIsInhzY2hlbWUiLCJmb3JjZUpTT05QIiwiUG9sbGluZyIsImdsb2JhbFRoaXMiLCJyTmV3bGluZSIsInJFc2NhcGVkTmV3bGluZSIsIl9fX2VpbyIsInNjcmlwdCIsImZvcm0iLCJpZnJhbWUiLCJkb1BvbGwiLCJhc3luYyIsInNyYyIsImluc2VydEF0IiwiZ2V0RWxlbWVudHNCeVRhZ05hbWUiLCJoZWFkIiwiZG9Xcml0ZSIsImFyZWEiLCJpZnJhbWVJZCIsIm1ldGhvZCIsImNvbXBsZXRlIiwiaW5pdElmcmFtZSIsImh0bWwiLCJzdWJtaXQiLCJhdHRhY2hFdmVudCIsIm9ucmVhZHlzdGF0ZWNoYW5nZSIsIm9ubG9hZCIsInBpY2siLCJlbXB0eSIsImhhc1hIUjIiLCJyZXNwb25zZVR5cGUiLCJSZXF1ZXN0IiwiY3JlYXRlIiwiZXh0cmFIZWFkZXJzIiwic2V0RGlzYWJsZUhlYWRlckNoZWNrIiwic2V0UmVxdWVzdEhlYWRlciIsInJlcXVlc3RUaW1lb3V0IiwidGltZW91dCIsImhhc1hEUiIsIm9uTG9hZCIsInJlc3BvbnNlVGV4dCIsInN0YXR1cyIsInJlcXVlc3RzQ291bnQiLCJyZXF1ZXN0cyIsIm9uU3VjY2VzcyIsImZyb21FcnJvciIsImFib3J0IiwiWERvbWFpblJlcXVlc3QiLCJlbmFibGVzWERSIiwidW5sb2FkSGFuZGxlciIsImZvcmNlQmFzZTY0Iiwic3VwcG9ydHNCaW5hcnkiLCJyZXEiLCJwb2xsWGhyIiwieWVhc3QiLCJwb2xsIiwib25QYXVzZSIsInRvdGFsIiwiZGVjb2RlUGF5bG9hZCIsImVuY29kZVBheWxvYWQiLCJzY2hlbWEiLCJ0aW1lc3RhbXBSZXF1ZXN0cyIsImI2NCIsIm5leHRUaWNrIiwiUHJvbWlzZSIsInJlc29sdmUiLCJ0aGVuIiwiV2ViU29ja2V0IiwiTW96V2ViU29ja2V0IiwidXNpbmdCcm93c2VyV2ViU29ja2V0IiwiZGVmYXVsdEJpbmFyeVR5cGUiLCJpc1JlYWN0TmF0aXZlIiwicHJvZHVjdCIsIldTIiwiY2hlY2siLCJwcm90b2NvbHMiLCJoZWFkZXJzIiwid3MiLCJhZGRFdmVudExpc3RlbmVycyIsIm9ub3BlbiIsIl9zb2NrZXQiLCJvbm1lc3NhZ2UiLCJldiIsImxhc3RQYWNrZXQiLCJlbmNvZGVQYWNrZXQiLCJCdWZmZXIiLCJieXRlTGVuZ3RoIiwiYWNjIiwiayIsImhhc0NPUlMiLCJQQUNLRVRfVFlQRVMiLCJQQUNLRVRfVFlQRVNfUkVWRVJTRSIsIkVSUk9SX1BBQ0tFVCIsImJhc2U2NGRlY29kZXIiLCJkZWNvZGVCYXNlNjRQYWNrZXQiLCJkZWNvZGVkIiwibWFwQmluYXJ5IiwiQmxvYiIsImVuY29kZWRQYWNrZXQiLCJjaGFyQXQiLCJ3aXRoTmF0aXZlQmxvYiIsIndpdGhOYXRpdmVBcnJheUJ1ZmZlciIsImVuY29kZUJsb2JBc0Jhc2U2NCIsImZpbGVSZWFkZXIiLCJGaWxlUmVhZGVyIiwicmVzdWx0IiwicmVhZEFzRGF0YVVSTCIsImlzVmlldyIsImJ1ZmZlciIsIlNFUEFSQVRPUiIsImZyb21DaGFyQ29kZSIsImVuY29kZWRQYWNrZXRzIiwiZW5jb2RlZFBheWxvYWQiLCJkZWNvZGVkUGFja2V0IiwiU3RhdGUiLCJ0b2tlbiIsImpyIiwiamQiLCJ0IiwiYWNjZXB0cyIsInR0IiwidG9rZW5PclN0YXRlIiwibmV4dFN0YXRlIiwibWFrZVN0YXRlIiwidGVtcGxhdGVTdGF0ZSIsInRha2VUIiwiYXBwZW5kIiwibWFrZUFjY2VwdGluZ1N0YXRlIiwibWFrZVQiLCJzdGFydFN0YXRlIiwibWFrZVJlZ2V4VCIsInJlZ2V4IiwiX25leHRTdGF0ZSIsIm1ha2VNdWx0aVQiLCJtYWtlQmF0Y2hUIiwidHJhbnNpdGlvbnMiLCJtYWtlQ2hhaW5UIiwic3RyIiwiZW5kU3RhdGUiLCJkZWZhdWx0U3RhdGVGYWN0b3J5IiwiRE9NQUlOIiwiTE9DQUxIT1NUIiwiVExEIiwiQVQiLCJDT0xPTiIsIkRPVCIsIlBVTkNUVUFUSU9OIiwiTkwiLCJOVU0iLCJQTFVTIiwiUE9VTkQiLCJRVUVSWSIsIlNMQVNIIiwiVU5ERVJTQ09SRSIsIlBST1RPQ09MIiwiTUFJTFRPIiwiT1BFTkJSQUNFIiwiT1BFTkJSQUNLRVQiLCJPUEVOQU5HTEVCUkFDS0VUIiwiT1BFTlBBUkVOIiwiQ0xPU0VCUkFDRSIsIkNMT1NFQlJBQ0tFVCIsIkNMT1NFQU5HTEVCUkFDS0VUIiwiQ0xPU0VQQVJFTiIsIkFNUEVSU0FORCIsIlNZTSIsImZyZWV6ZSIsIl9fcHJvdG9fXyIsInRsZHMiLCJMRVRURVIiLCJFTU9KSSIsIkRJR0lUIiwiU1BBQ0UiLCJpbml0JDIiLCJjdXN0b21Qcm90b2NvbHMiLCJTX1NUQVJUIiwiU19OVU0iLCJTX0RPTUFJTiIsIlNfRE9NQUlOX0hZUEhFTiIsIlNfV1MiLCJET01BSU5fUkVHRVhfVFJBTlNJVElPTlMiLCJtYWtlRG9tYWluU3RhdGUiLCJtYWtlTmVhckRvbWFpblN0YXRlIiwiU19QUk9UT0NPTF9GSUxFIiwiU19QUk9UT0NPTF9GVFAiLCJTX1BST1RPQ09MX0hUVFAiLCJTX01BSUxUTyIsIlNfUFJPVE9DT0xfU0VDVVJFIiwiU19GVUxMX1BST1RPQ09MIiwiU19GVUxMX01BSUxUTyIsIlNfQ1VTVE9NX1BST1RPQ09MIiwiX3R5cGVvZiIsImRlZmF1bHRzIiwiZGVmYXVsdFByb3RvY29sIiwiZXZlbnRzIiwibm9vcCIsImZvcm1hdEhyZWYiLCJubDJiciIsInJlbCIsInZhbGlkYXRlIiwidHJ1bmNhdGUiLCJpZ25vcmVUYWdzIiwiT3B0aW9ucyIsImlnbm9yZWRUYWdzIiwidG9VcHBlckNhc2UiLCJocmVmIiwidG9IcmVmIiwiZm9ybWF0dGVkIiwiZm9ybWF0dGVkSHJlZiIsImdldE9iamVjdCIsIm9wZXJhdG9yIiwib3B0aW9uVmFsdWUiLCJvcHRpb24iLCJNdWx0aVRva2VuIiwidG9rZW5zIiwidGsiLCJpc0xpbmsiLCJjcmVhdGVUb2tlbkNsYXNzIiwiVG9rZW4iLCJwYXJlbnQiLCJjaGlsZCIsImV4dGVuZGVkIiwiaW5oZXJpdHMiLCJzdGFydEluZGV4IiwicyIsImVuZEluZGV4IiwidG9PYmplY3QiLCJzdGFydCIsImVuZCIsIk1haWx0b0VtYWlsIiwiRW1haWwiLCJUZXh0IiwiTmwiLCJVcmwiLCJoYXNQcm90b2NvbCIsImhhc1NsYXNoU2xhc2giLCJtdWx0aSIsIkJhc2UiLCJpbml0JDEiLCJTX1BST1RPQ09MIiwiU19QUk9UT0NPTF9TTEFTSCIsIlNfUFJPVE9DT0xfU0xBU0hfU0xBU0giLCJTX0RPTUFJTl9ET1QiLCJTX1RMRCIsIlNfVExEX0NPTE9OIiwiU19UTERfUE9SVCIsIlNfVVJMIiwiU19VUkxfTk9OX0FDQ0VQVElORyIsIlNfVVJMX09QRU5CUkFDRSIsIlNfVVJMX09QRU5CUkFDS0VUIiwiU19VUkxfT1BFTkFOR0xFQlJBQ0tFVCIsIlNfVVJMX09QRU5QQVJFTiIsIlNfVVJMX09QRU5CUkFDRV9RIiwiU19VUkxfT1BFTkJSQUNLRVRfUSIsIlNfVVJMX09QRU5BTkdMRUJSQUNLRVRfUSIsIlNfVVJMX09QRU5QQVJFTl9RIiwiU19VUkxfT1BFTkJSQUNFX1NZTVMiLCJTX1VSTF9PUEVOQlJBQ0tFVF9TWU1TIiwiU19VUkxfT1BFTkFOR0xFQlJBQ0tFVF9TWU1TIiwiU19VUkxfT1BFTlBBUkVOX1NZTVMiLCJTX0VNQUlMX0RPTUFJTiIsIlNfRU1BSUxfRE9NQUlOX0RPVCIsIlNfRU1BSUwiLCJTX0VNQUlMX0NPTE9OIiwiU19FTUFJTF9QT1JUIiwiU19NQUlMVE9fRU1BSUwiLCJTX01BSUxUT19FTUFJTF9OT05fQUNDRVBUSU5HIiwiU19MT0NBTFBBUlQiLCJTX0xPQ0FMUEFSVF9BVCIsIlNfTE9DQUxQQVJUX0RPVCIsIlNfTkwiLCJxc0FjY2VwdGluZyIsInFzTm9uQWNjZXB0aW5nIiwibG9jYWxwYXJ0QWNjZXB0aW5nIiwicGFyc2VyQ3JlYXRlTXVsdGlUb2tlbiIsIk11bHRpIiwic3RhcnRJZHgiLCJlbmRJZHgiLCJJTklUIiwic2Nhbm5lciIsInBsdWdpblF1ZXVlIiwiaW5pdGlhbGl6ZWQiLCJ0b2tlbml6ZSIsInV0aWxzIiwiY3Vyc29yIiwibXVsdGlzIiwidGV4dFRva2VucyIsInNlY29uZFN0YXRlIiwibXVsdGlMZW5ndGgiLCJsYXRlc3RBY2NlcHRpbmciLCJzaW5jZUFjY2VwdHMiLCJzdWJ0b2tlbnMiLCJydW4iLCJpdGVyYWJsZSIsImNoYXJDb3VudCIsImNoYXJDdXJzb3IiLCJ0b2tlbkxlbmd0aCIsImNoYXJzU2luY2VBY2NlcHRzIiwicnVuJDEiLCJmaW5kIiwiZmlsdGVyZWQiLCJtIiwiaCIsImQiLCJwbHVyYWwiLCJtc0FicyIsImlzUGx1cmFsIiwiZXhlYyIsInBhcnNlRmxvYXQiLCJsb25nIiwiZm10U2hvcnQiLCJxcyIsInFyeSIsInBhaXJzIiwicGFpciIsImRlY29kZVVSSUNvbXBvbmVudCIsInJlIiwicGFydHMiLCJiIiwiYXV0aG9yaXR5IiwiaXB2NnVyaSIsInBhdGhOYW1lcyIsInF1ZXJ5S2V5IiwiJDAiLCIkMiIsImlvIiwiTWFuYWdlciIsInVybF8xIiwibWFuYWdlcl8xIiwibG9va3VwIiwiY2FjaGUiLCJtYW5hZ2VycyIsInBhcnNlZCIsInNhbWVOYW1lc3BhY2UiLCJmb3JjZU5ldyIsIm11bHRpcGxleCIsInNvY2tldF9pb19wYXJzZXJfMSIsImNvbm5lY3QiLCJtYW5hZ2VyXzIiLCJzb2NrZXRfMSIsImVpbyIsIm9uXzEiLCJ0eXBlZF9ldmVudHNfMSIsIlN0cmljdEV2ZW50RW1pdHRlciIsIm5zcHMiLCJzdWJzIiwicmVjb25uZWN0aW9uIiwicmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJJbmZpbml0eSIsInJlY29ubmVjdGlvbkRlbGF5IiwicmVjb25uZWN0aW9uRGVsYXlNYXgiLCJyYW5kb21pemF0aW9uRmFjdG9yIiwiYmFja29mZiIsIl9yZWFkeVN0YXRlIiwiX3BhcnNlciIsImVuY29kZXIiLCJFbmNvZGVyIiwiZGVjb2RlciIsIkRlY29kZXIiLCJfYXV0b0Nvbm5lY3QiLCJhdXRvQ29ubmVjdCIsIl9yZWNvbm5lY3Rpb24iLCJfcmVjb25uZWN0aW9uQXR0ZW1wdHMiLCJfcmVjb25uZWN0aW9uRGVsYXkiLCJfcmFuZG9taXphdGlvbkZhY3RvciIsIl9yZWNvbm5lY3Rpb25EZWxheU1heCIsIl90aW1lb3V0IiwibWF5YmVSZWNvbm5lY3RPbk9wZW4iLCJfcmVjb25uZWN0aW5nIiwicmVjb25uZWN0IiwiZW5naW5lIiwic2tpcFJlY29ubmVjdCIsIm9wZW5TdWJEZXN0cm95IiwiZXJyb3JTdWIiLCJlbWl0UmVzZXJ2ZWQiLCJ0aW1lciIsIm9ucGluZyIsIm9uZGF0YSIsIm9uZGVjb2RlZCIsIm5zcCIsIl9kZXN0cm95IiwiYWN0aXZlIiwiX2Nsb3NlIiwiX3BhY2tldCIsInN1YkRlc3Ryb3kiLCJkZWxheSIsIm9ucmVjb25uZWN0IiwiYXR0ZW1wdCIsIlJFU0VSVkVEX0VWRU5UUyIsImNvbm5lY3RfZXJyb3IiLCJkaXNjb25uZWN0aW5nIiwibmV3TGlzdGVuZXIiLCJyZWNlaXZlQnVmZmVyIiwic2VuZEJ1ZmZlciIsImlkcyIsImFja3MiLCJmbGFncyIsImNvbm5lY3RlZCIsImRpc2Nvbm5lY3RlZCIsImF1dGgiLCJzdWJFdmVudHMiLCJvbnBhY2tldCIsIlBhY2tldFR5cGUiLCJFVkVOVCIsInBvcCIsImlzVHJhbnNwb3J0V3JpdGFibGUiLCJ2b2xhdGlsZSIsIkNPTk5FQ1QiLCJvbmNvbm5lY3QiLCJCSU5BUllfRVZFTlQiLCJvbmV2ZW50IiwiQUNLIiwiQklOQVJZX0FDSyIsIm9uYWNrIiwiRElTQ09OTkVDVCIsIm9uZGlzY29ubmVjdCIsIkNPTk5FQ1RfRVJST1IiLCJhY2siLCJlbWl0RXZlbnQiLCJfYW55TGlzdGVuZXJzIiwibGlzdGVuZXIiLCJzZW50IiwiZW1pdEJ1ZmZlcmVkIiwib25BbnkiLCJwcmVwZW5kQW55Iiwib2ZmQW55IiwibGlzdGVuZXJzQW55IiwibG9jIiwicmVjb25zdHJ1Y3RQYWNrZXQiLCJkZWNvbnN0cnVjdFBhY2tldCIsImlzX2JpbmFyeV8xIiwiX2RlY29uc3RydWN0UGFja2V0IiwiYnVmZmVycyIsImlzQmluYXJ5IiwicGxhY2Vob2xkZXIiLCJfcGxhY2Vob2xkZXIiLCJuZXdEYXRhIiwiX3JlY29uc3RydWN0UGFja2V0IiwicGFja2V0RGF0YSIsInBhY2siLCJhdHRhY2htZW50cyIsImJpbmFyeV8xIiwiaGFzQmluYXJ5IiwiZW5jb2RlQXNTdHJpbmciLCJlbmNvZGVBc0JpbmFyeSIsImRlY29uc3RydWN0aW9uIiwiZGVjb2RlU3RyaW5nIiwicmVjb25zdHJ1Y3RvciIsIkJpbmFyeVJlY29uc3RydWN0b3IiLCJ0YWtlQmluYXJ5RGF0YSIsImJ1ZiIsInBheWxvYWQiLCJ0cnlQYXJzZSIsImlzUGF5bG9hZFZhbGlkIiwiZmluaXNoZWRSZWNvbnN0cnVjdGlvbiIsInJlY29uUGFjayIsImJpbkRhdGEiLCJ3aXRoTmF0aXZlRmlsZSIsIkZpbGUiLCJ0b0pTT04iLCJzdHlsZXNJbkRvbSIsImdldEluZGV4QnlJZGVudGlmaWVyIiwiaWRlbnRpZmllciIsIm1vZHVsZXNUb0RvbSIsImlkQ291bnRNYXAiLCJpZGVudGlmaWVycyIsImJhc2UiLCJjc3MiLCJtZWRpYSIsInNvdXJjZU1hcCIsInJlZmVyZW5jZXMiLCJ1cGRhdGVyIiwiYWRkU3R5bGUiLCJhcGkiLCJkb21BUEkiLCJ1cGRhdGUiLCJuZXdPYmoiLCJsYXN0SWRlbnRpZmllcnMiLCJuZXdMaXN0IiwibmV3TGFzdElkZW50aWZpZXJzIiwiX2luZGV4IiwibWVtbyIsImluc2VydCIsInN0eWxlVGFyZ2V0IiwiSFRNTElGcmFtZUVsZW1lbnQiLCJjb250ZW50RG9jdW1lbnQiLCJnZXRUYXJnZXQiLCJzZXRBdHRyaWJ1dGVzIiwibm9uY2UiLCJpbnNlcnRTdHlsZUVsZW1lbnQiLCJzdHlsZVRhZ1RyYW5zZm9ybSIsInJlbW92ZVN0eWxlRWxlbWVudCIsInN0eWxlU2hlZXQiLCJjc3NUZXh0IiwiZmlyc3RDaGlsZCIsImNyZWF0ZVRleHROb2RlIiwiZXh0ZW5kU3RhdGljcyIsInNldFByb3RvdHlwZU9mIiwiX19leHRlbmRzIiwiX18iLCJfX2Fzc2lnbiIsIl9fdmFsdWVzIiwiX19yZWFkIiwiYXIiLCJfX3NwcmVhZEFycmF5IiwiZW1wdHlPYmplY3QiLCJpc1VuZGVmIiwiaXNEZWYiLCJpc1RydWUiLCJpc1ByaW1pdGl2ZSIsImlzT2JqZWN0IiwiX3RvU3RyaW5nIiwidG9SYXdUeXBlIiwiaXNQbGFpbk9iamVjdCIsImlzUmVnRXhwIiwiaXNWYWxpZEFycmF5SW5kZXgiLCJpc1Byb21pc2UiLCJjYXRjaCIsInRvTnVtYmVyIiwiaXNOYU4iLCJtYWtlTWFwIiwiZXhwZWN0c0xvd2VyQ2FzZSIsImlzQnVpbHRJblRhZyIsImlzUmVzZXJ2ZWRBdHRyaWJ1dGUiLCJoYXNPd24iLCJjYWNoZWQiLCJjYW1lbGl6ZVJFIiwiY2FtZWxpemUiLCJjYXBpdGFsaXplIiwiaHlwaGVuYXRlUkUiLCJoeXBoZW5hdGUiLCJjdHgiLCJib3VuZEZuIiwiYSIsIl9sZW5ndGgiLCJ0b0FycmF5IiwicmV0IiwiX2Zyb20iLCJyZXMiLCJubyIsImlkZW50aXR5IiwibG9vc2VFcXVhbCIsImlzT2JqZWN0QSIsImlzT2JqZWN0QiIsImlzQXJyYXlBIiwiaXNBcnJheUIiLCJldmVyeSIsImdldFRpbWUiLCJrZXlzQSIsImtleXNCIiwibG9vc2VJbmRleE9mIiwiY2FsbGVkIiwiU1NSX0FUVFIiLCJBU1NFVF9UWVBFUyIsIkxJRkVDWUNMRV9IT09LUyIsImNvbmZpZyIsIm9wdGlvbk1lcmdlU3RyYXRlZ2llcyIsInNpbGVudCIsInByb2R1Y3Rpb25UaXAiLCJkZXZ0b29scyIsInBlcmZvcm1hbmNlIiwiZXJyb3JIYW5kbGVyIiwid2FybkhhbmRsZXIiLCJpZ25vcmVkRWxlbWVudHMiLCJrZXlDb2RlcyIsImlzUmVzZXJ2ZWRUYWciLCJpc1Jlc2VydmVkQXR0ciIsImlzVW5rbm93bkVsZW1lbnQiLCJnZXRUYWdOYW1lc3BhY2UiLCJwYXJzZVBsYXRmb3JtVGFnTmFtZSIsIm11c3RVc2VQcm9wIiwiX2xpZmVjeWNsZUhvb2tzIiwidW5pY29kZVJlZ0V4cCIsImlzUmVzZXJ2ZWQiLCJkZWYiLCJiYWlsUkUiLCJfaXNTZXJ2ZXIiLCJoYXNQcm90byIsImluQnJvd3NlciIsImluV2VleCIsIldYRW52aXJvbm1lbnQiLCJwbGF0Zm9ybSIsIndlZXhQbGF0Zm9ybSIsIlVBIiwiaXNJRSIsImlzSUU5IiwiaXNFZGdlIiwiaXNJT1MiLCJpc0ZGIiwibmF0aXZlV2F0Y2giLCJ3YXRjaCIsInN1cHBvcnRzUGFzc2l2ZSIsImlzU2VydmVyUmVuZGVyaW5nIiwiZyIsIlZVRV9FTlYiLCJfX1ZVRV9ERVZUT09MU19HTE9CQUxfSE9PS19fIiwiaXNOYXRpdmUiLCJDdG9yIiwiX1NldCIsImhhc1N5bWJvbCIsIlJlZmxlY3QiLCJvd25LZXlzIiwiY2xlYXIiLCJ0aXAiLCJmb3JtYXRDb21wb25lbnROYW1lIiwiZ2VuZXJhdGVDb21wb25lbnRUcmFjZSIsImhhc0NvbnNvbGUiLCJjbGFzc2lmeVJFIiwidm0iLCJ0cmFjZSIsImluY2x1ZGVGaWxlIiwiJHJvb3QiLCJjaWQiLCJfaXNWdWUiLCIkb3B0aW9ucyIsIl9jb21wb25lbnRUYWciLCJmaWxlIiwiX19maWxlIiwiJHBhcmVudCIsInRyZWUiLCJjdXJyZW50UmVjdXJzaXZlU2VxdWVuY2UiLCJsYXN0IiwicmVwZWF0IiwidWlkIiwiRGVwIiwiYWRkU3ViIiwic3ViIiwicmVtb3ZlU3ViIiwiZGVwZW5kIiwiYWRkRGVwIiwibm90aWZ5IiwidGFyZ2V0U3RhY2siLCJwdXNoVGFyZ2V0IiwicG9wVGFyZ2V0IiwiVk5vZGUiLCJ0YWciLCJlbG0iLCJjb250ZXh0IiwiY29tcG9uZW50T3B0aW9ucyIsImFzeW5jRmFjdG9yeSIsIm5zIiwiZm5Db250ZXh0IiwiZm5PcHRpb25zIiwiZm5TY29wZUlkIiwiY29tcG9uZW50SW5zdGFuY2UiLCJyYXciLCJpc1N0YXRpYyIsImlzUm9vdEluc2VydCIsImlzQ29tbWVudCIsImlzQ2xvbmVkIiwiaXNPbmNlIiwiYXN5bmNNZXRhIiwiaXNBc3luY1BsYWNlaG9sZGVyIiwicHJvdG90eXBlQWNjZXNzb3JzIiwiZGVmaW5lUHJvcGVydGllcyIsImNyZWF0ZUVtcHR5Vk5vZGUiLCJub2RlIiwiY3JlYXRlVGV4dFZOb2RlIiwiY2xvbmVWTm9kZSIsInZub2RlIiwiY2xvbmVkIiwiYXJyYXlQcm90byIsImFycmF5TWV0aG9kcyIsIm9yaWdpbmFsIiwiaW5zZXJ0ZWQiLCJvYiIsIl9fb2JfXyIsIm9ic2VydmVBcnJheSIsImRlcCIsImFycmF5S2V5cyIsImdldE93blByb3BlcnR5TmFtZXMiLCJzaG91bGRPYnNlcnZlIiwidG9nZ2xlT2JzZXJ2aW5nIiwiT2JzZXJ2ZXIiLCJ2bUNvdW50IiwicHJvdG9BdWdtZW50IiwiY29weUF1Z21lbnQiLCJ3YWxrIiwiYXNSb290RGF0YSIsImlzRXh0ZW5zaWJsZSIsImRlZmluZVJlYWN0aXZlJCQxIiwiY3VzdG9tU2V0dGVyIiwic2hhbGxvdyIsImdldHRlciIsInNldHRlciIsImNoaWxkT2IiLCJkZXBlbmRBcnJheSIsIm5ld1ZhbCIsImRlbCIsInN0cmF0cyIsIm1lcmdlRGF0YSIsInRvVmFsIiwiZnJvbVZhbCIsIm1lcmdlRGF0YU9yRm4iLCJwYXJlbnRWYWwiLCJjaGlsZFZhbCIsImluc3RhbmNlRGF0YSIsImRlZmF1bHREYXRhIiwibWVyZ2VIb29rIiwiaG9va3MiLCJkZWR1cGVIb29rcyIsIm1lcmdlQXNzZXRzIiwiYXNzZXJ0T2JqZWN0VHlwZSIsInByb3BzRGF0YSIsImRlZmF1bHRTdHJhdCIsImhvb2siLCJrZXkkMSIsIm1ldGhvZHMiLCJpbmplY3QiLCJjb21wdXRlZCIsInByb3ZpZGUiLCJ2YWxpZGF0ZUNvbXBvbmVudE5hbWUiLCJtZXJnZU9wdGlvbnMiLCJjb21wb25lbnRzIiwiY2hlY2tDb21wb25lbnRzIiwibm9ybWFsaXplUHJvcHMiLCJub3JtYWxpemVkIiwibm9ybWFsaXplSW5qZWN0IiwiZGlycyIsImRpcmVjdGl2ZXMiLCJkZWYkJDEiLCJub3JtYWxpemVEaXJlY3RpdmVzIiwiX2Jhc2UiLCJleHRlbmRzIiwibWl4aW5zIiwibWVyZ2VGaWVsZCIsInN0cmF0IiwicmVzb2x2ZUFzc2V0Iiwid2Fybk1pc3NpbmciLCJhc3NldHMiLCJjYW1lbGl6ZWRJZCIsIlBhc2NhbENhc2VJZCIsInZhbGlkYXRlUHJvcCIsInByb3BPcHRpb25zIiwiYWJzZW50IiwiYm9vbGVhbkluZGV4IiwiZ2V0VHlwZUluZGV4Iiwic3RyaW5nSW5kZXgiLCJfcHJvcHMiLCJnZXRUeXBlIiwiZ2V0UHJvcERlZmF1bHRWYWx1ZSIsInByZXZTaG91bGRPYnNlcnZlIiwiZXhwZWN0ZWRUeXBlcyIsImFzc2VydGVkVHlwZSIsImFzc2VydFR5cGUiLCJleHBlY3RlZFR5cGUiLCJoYXZlRXhwZWN0ZWRUeXBlcyIsInZhbGlkYXRvciIsInJlY2VpdmVkVHlwZSIsImlzRXhwbGljYWJsZSIsImVsZW0iLCJpc0Jvb2xlYW4iLCJzdHlsZVZhbHVlIiwiZ2V0SW52YWxpZFR5cGVNZXNzYWdlIiwiYXNzZXJ0UHJvcCIsInNpbXBsZUNoZWNrUkUiLCJmdW5jdGlvblR5cGVDaGVja1JFIiwiaXNTYW1lVHlwZSIsIkVYUExJQ0FCTEVfVFlQRVMiLCJoYW5kbGVFcnJvciIsImluZm8iLCJjdXIiLCJlcnJvckNhcHR1cmVkIiwiZ2xvYmFsSGFuZGxlRXJyb3IiLCJpbnZva2VXaXRoRXJyb3JIYW5kbGluZyIsIl9oYW5kbGVkIiwibG9nRXJyb3IiLCJ0aW1lckZ1bmMiLCJtYXJrIiwibWVhc3VyZSIsImlzVXNpbmdNaWNyb1Rhc2siLCJwZW5kaW5nIiwiZmx1c2hDYWxsYmFja3MiLCJjb3BpZXMiLCJzZXRJbW1lZGlhdGUiLCJjb3VudGVyIiwidGV4dE5vZGUiLCJjaGFyYWN0ZXJEYXRhIiwiX3Jlc29sdmUiLCJpbml0UHJveHkiLCJwZXJmIiwiY2xlYXJNYXJrcyIsImNsZWFyTWVhc3VyZXMiLCJzdGFydFRhZyIsImVuZFRhZyIsImFsbG93ZWRHbG9iYWxzIiwid2Fybk5vblByZXNlbnQiLCJ3YXJuUmVzZXJ2ZWRQcmVmaXgiLCJoYXNQcm94eSIsIlByb3h5IiwiaXNCdWlsdEluTW9kaWZpZXIiLCJoYXNIYW5kbGVyIiwiaXNBbGxvd2VkIiwiJGRhdGEiLCJnZXRIYW5kbGVyIiwiaGFuZGxlcnMiLCJyZW5kZXIiLCJfd2l0aFN0cmlwcGVkIiwiX3JlbmRlclByb3h5Iiwic2Vlbk9iamVjdHMiLCJ0cmF2ZXJzZSIsIl90cmF2ZXJzZSIsInNlZW4iLCJpc0EiLCJpc0Zyb3plbiIsImRlcElkIiwibm9ybWFsaXplRXZlbnQiLCJvbmNlJCQxIiwiY3JlYXRlRm5JbnZva2VyIiwiZm5zIiwiaW52b2tlciIsImFyZ3VtZW50cyQxIiwidXBkYXRlTGlzdGVuZXJzIiwib2xkT24iLCJyZW1vdmUkJDEiLCJjcmVhdGVPbmNlSGFuZGxlciIsIm9sZCIsInBhcmFtcyIsIm1lcmdlVk5vZGVIb29rIiwiaG9va0tleSIsIm9sZEhvb2siLCJ3cmFwcGVkSG9vayIsIm1lcmdlZCIsImNoZWNrUHJvcCIsImFsdEtleSIsInByZXNlcnZlIiwibm9ybWFsaXplQ2hpbGRyZW4iLCJub3JtYWxpemVBcnJheUNoaWxkcmVuIiwiaXNUZXh0Tm9kZSIsIm5lc3RlZEluZGV4IiwiX2lzVkxpc3QiLCJyZXNvbHZlSW5qZWN0IiwicHJvdmlkZUtleSIsIl9wcm92aWRlZCIsInByb3ZpZGVEZWZhdWx0IiwicmVzb2x2ZVNsb3RzIiwic2xvdHMiLCJhdHRycyIsInNsb3QiLCJuYW1lJDEiLCJpc1doaXRlc3BhY2UiLCJub3JtYWxpemVTY29wZWRTbG90cyIsIm5vcm1hbFNsb3RzIiwicHJldlNsb3RzIiwiaGFzTm9ybWFsU2xvdHMiLCJpc1N0YWJsZSIsIiRzdGFibGUiLCIka2V5IiwiX25vcm1hbGl6ZWQiLCIkaGFzTm9ybWFsIiwibm9ybWFsaXplU2NvcGVkU2xvdCIsImtleSQyIiwicHJveHlOb3JtYWxTbG90IiwicHJveHkiLCJyZW5kZXJMaXN0IiwicmVuZGVyU2xvdCIsImZhbGxiYWNrUmVuZGVyIiwiYmluZE9iamVjdCIsIm5vZGVzIiwic2NvcGVkU2xvdEZuIiwiJHNjb3BlZFNsb3RzIiwiJHNsb3RzIiwiJGNyZWF0ZUVsZW1lbnQiLCJyZXNvbHZlRmlsdGVyIiwiaXNLZXlOb3RNYXRjaCIsImV4cGVjdCIsImFjdHVhbCIsImNoZWNrS2V5Q29kZXMiLCJldmVudEtleUNvZGUiLCJidWlsdEluS2V5Q29kZSIsImV2ZW50S2V5TmFtZSIsImJ1aWx0SW5LZXlOYW1lIiwibWFwcGVkS2V5Q29kZSIsImJpbmRPYmplY3RQcm9wcyIsImFzUHJvcCIsImlzU3luYyIsImxvb3AiLCJkb21Qcm9wcyIsImNhbWVsaXplZEtleSIsImh5cGhlbmF0ZWRLZXkiLCIkZXZlbnQiLCJyZW5kZXJTdGF0aWMiLCJpc0luRm9yIiwiX3N0YXRpY1RyZWVzIiwibWFya1N0YXRpYyIsInN0YXRpY1JlbmRlckZucyIsIm1hcmtPbmNlIiwibWFya1N0YXRpY05vZGUiLCJiaW5kT2JqZWN0TGlzdGVuZXJzIiwiZXhpc3RpbmciLCJvdXJzIiwicmVzb2x2ZVNjb3BlZFNsb3RzIiwiaGFzRHluYW1pY0tleXMiLCJjb250ZW50SGFzaEtleSIsImJpbmREeW5hbWljS2V5cyIsImJhc2VPYmoiLCJwcmVwZW5kTW9kaWZpZXIiLCJzeW1ib2wiLCJpbnN0YWxsUmVuZGVySGVscGVycyIsIl9vIiwiX2wiLCJfdCIsIl9xIiwiX20iLCJfZiIsIl9rIiwiX3YiLCJfdSIsIl9nIiwiX3AiLCJGdW5jdGlvbmFsUmVuZGVyQ29udGV4dCIsImNvbnRleHRWbSIsInRoaXMkMSIsIl9vcmlnaW5hbCIsImlzQ29tcGlsZWQiLCJfY29tcGlsZWQiLCJuZWVkTm9ybWFsaXphdGlvbiIsImluamVjdGlvbnMiLCJzY29wZWRTbG90cyIsIl9zY29wZUlkIiwiY2xvbmVBbmRNYXJrRnVuY3Rpb25hbFJlc3VsdCIsInJlbmRlckNvbnRleHQiLCJkZXZ0b29sc01ldGEiLCJtZXJnZVByb3BzIiwiY29tcG9uZW50Vk5vZGVIb29rcyIsImh5ZHJhdGluZyIsIl9pc0Rlc3Ryb3llZCIsImtlZXBBbGl2ZSIsIm1vdW50ZWROb2RlIiwicHJlcGF0Y2giLCJfaXNDb21wb25lbnQiLCJfcGFyZW50Vm5vZGUiLCJpbmxpbmVUZW1wbGF0ZSIsImNyZWF0ZUNvbXBvbmVudEluc3RhbmNlRm9yVm5vZGUiLCJhY3RpdmVJbnN0YW5jZSIsIiRtb3VudCIsIm9sZFZub2RlIiwicGFyZW50Vm5vZGUiLCJyZW5kZXJDaGlsZHJlbiIsImlzVXBkYXRpbmdDaGlsZENvbXBvbmVudCIsIm5ld1Njb3BlZFNsb3RzIiwib2xkU2NvcGVkU2xvdHMiLCJoYXNEeW5hbWljU2NvcGVkU2xvdCIsIm5lZWRzRm9yY2VVcGRhdGUiLCJfcmVuZGVyQ2hpbGRyZW4iLCIkdm5vZGUiLCJfdm5vZGUiLCIkYXR0cnMiLCIkbGlzdGVuZXJzIiwicHJvcEtleXMiLCJfcHJvcEtleXMiLCJvbGRMaXN0ZW5lcnMiLCJfcGFyZW50TGlzdGVuZXJzIiwidXBkYXRlQ29tcG9uZW50TGlzdGVuZXJzIiwiJGZvcmNlVXBkYXRlIiwidXBkYXRlQ2hpbGRDb21wb25lbnQiLCJfaXNNb3VudGVkIiwiY2FsbEhvb2siLCJfaW5hY3RpdmUiLCJhY3RpdmF0ZWRDaGlsZHJlbiIsImFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCJkZWFjdGl2YXRlQ2hpbGRDb21wb25lbnQiLCIkZGVzdHJveSIsImhvb2tzVG9NZXJnZSIsImNyZWF0ZUNvbXBvbmVudCIsImJhc2VDdG9yIiwiZmFjdG9yeSIsImVycm9yQ29tcCIsInJlc29sdmVkIiwib3duZXIiLCJjdXJyZW50UmVuZGVyaW5nSW5zdGFuY2UiLCJvd25lcnMiLCJsb2FkaW5nIiwibG9hZGluZ0NvbXAiLCJzeW5jIiwidGltZXJMb2FkaW5nIiwidGltZXJUaW1lb3V0IiwiJG9uIiwiZm9yY2VSZW5kZXIiLCJyZW5kZXJDb21wbGV0ZWQiLCJlbnN1cmVDdG9yIiwicmVqZWN0IiwiY29tcG9uZW50IiwicmVzb2x2ZUFzeW5jQ29tcG9uZW50IiwiY3JlYXRlQXN5bmNQbGFjZWhvbGRlciIsInJlc29sdmVDb25zdHJ1Y3Rvck9wdGlvbnMiLCJtb2RlbCIsInRyYW5zZm9ybU1vZGVsIiwia2V5SW5Mb3dlckNhc2UiLCJleHRyYWN0UHJvcHNGcm9tVk5vZGVEYXRhIiwiZnVuY3Rpb25hbCIsInZub2RlcyIsImNyZWF0ZUZ1bmN0aW9uYWxDb21wb25lbnQiLCJuYXRpdmVPbiIsImFic3RyYWN0IiwidG9NZXJnZSIsIl9tZXJnZWQiLCJtZXJnZUhvb2skMSIsImluc3RhbGxDb21wb25lbnRIb29rcyIsImYxIiwiZjIiLCJub3JtYWxpemF0aW9uVHlwZSIsImFsd2F5c05vcm1hbGl6ZSIsImlzIiwic2ltcGxlTm9ybWFsaXplQ2hpbGRyZW4iLCJwcmUiLCJhcHBseU5TIiwiY2xhc3MiLCJyZWdpc3RlckRlZXBCaW5kaW5ncyIsIl9jcmVhdGVFbGVtZW50IiwiZm9yY2UiLCJjb21wIiwidG9TdHJpbmdUYWciLCJnZXRGaXJzdENvbXBvbmVudENoaWxkIiwicmVtb3ZlJDEiLCIkb2ZmIiwiX3RhcmdldCIsIm9uY2VIYW5kbGVyIiwic2V0QWN0aXZlSW5zdGFuY2UiLCJwcmV2QWN0aXZlSW5zdGFuY2UiLCJpc0luSW5hY3RpdmVUcmVlIiwiZGlyZWN0IiwiX2RpcmVjdEluYWN0aXZlIiwiJGNoaWxkcmVuIiwiX2hhc0hvb2tFdmVudCIsIiRlbWl0IiwiY2lyY3VsYXIiLCJ3YWl0aW5nIiwiZmx1c2hpbmciLCJjdXJyZW50Rmx1c2hUaW1lc3RhbXAiLCJnZXROb3ciLCJub3ciLCJ0aW1lU3RhbXAiLCJmbHVzaFNjaGVkdWxlclF1ZXVlIiwid2F0Y2hlciIsImJlZm9yZSIsInVzZXIiLCJhY3RpdmF0ZWRRdWV1ZSIsInVwZGF0ZWRRdWV1ZSIsImNhbGxBY3RpdmF0ZWRIb29rcyIsIl93YXRjaGVyIiwiY2FsbFVwZGF0ZWRIb29rcyIsInVpZCQyIiwiV2F0Y2hlciIsImV4cE9yRm4iLCJpc1JlbmRlcldhdGNoZXIiLCJfd2F0Y2hlcnMiLCJkZWVwIiwibGF6eSIsImRpcnR5IiwiZGVwcyIsIm5ld0RlcHMiLCJkZXBJZHMiLCJuZXdEZXBJZHMiLCJleHByZXNzaW9uIiwic2VnbWVudHMiLCJwYXJzZVBhdGgiLCJjbGVhbnVwRGVwcyIsInRtcCIsInF1ZXVlV2F0Y2hlciIsIm9sZFZhbHVlIiwiZXZhbHVhdGUiLCJ0ZWFyZG93biIsIl9pc0JlaW5nRGVzdHJveWVkIiwic2hhcmVkUHJvcGVydHlEZWZpbml0aW9uIiwic291cmNlS2V5IiwiaW5pdFN0YXRlIiwicHJvcHNPcHRpb25zIiwiaXNSb290IiwiaW5pdFByb3BzIiwiaW5pdE1ldGhvZHMiLCJfZGF0YSIsImdldERhdGEiLCJpbml0RGF0YSIsIndhdGNoZXJzIiwiX2NvbXB1dGVkV2F0Y2hlcnMiLCJpc1NTUiIsInVzZXJEZWYiLCJjb21wdXRlZFdhdGNoZXJPcHRpb25zIiwiZGVmaW5lQ29tcHV0ZWQiLCJpbml0Q29tcHV0ZWQiLCJjcmVhdGVXYXRjaGVyIiwiaW5pdFdhdGNoIiwic2hvdWxkQ2FjaGUiLCJjcmVhdGVDb21wdXRlZEdldHRlciIsImNyZWF0ZUdldHRlckludm9rZXIiLCIkd2F0Y2giLCJ1aWQkMyIsInN1cGVyT3B0aW9ucyIsIm1vZGlmaWVkT3B0aW9ucyIsIm1vZGlmaWVkIiwibGF0ZXN0Iiwic2VhbGVkIiwic2VhbGVkT3B0aW9ucyIsInJlc29sdmVNb2RpZmllZE9wdGlvbnMiLCJleHRlbmRPcHRpb25zIiwiVnVlIiwiX2luaXQiLCJpbml0RXh0ZW5kIiwiU3VwZXIiLCJTdXBlcklkIiwiY2FjaGVkQ3RvcnMiLCJfQ3RvciIsIlN1YiIsIkNvbXAiLCJpbml0UHJvcHMkMSIsImluaXRDb21wdXRlZCQxIiwidXNlIiwiZ2V0Q29tcG9uZW50TmFtZSIsInBydW5lQ2FjaGUiLCJrZWVwQWxpdmVJbnN0YW5jZSIsImVudHJ5IiwicHJ1bmVDYWNoZUVudHJ5IiwiY3VycmVudCIsIl91aWQiLCJ2bm9kZUNvbXBvbmVudE9wdGlvbnMiLCJpbml0SW50ZXJuYWxDb21wb25lbnQiLCJfc2VsZiIsIiRyZWZzIiwiaW5pdExpZmVjeWNsZSIsIl9ldmVudHMiLCJpbml0RXZlbnRzIiwicGFyZW50RGF0YSIsImluaXRSZW5kZXIiLCJpbml0SW5qZWN0aW9ucyIsImluaXRQcm92aWRlIiwiX25hbWUiLCJpbml0TWl4aW4iLCJkYXRhRGVmIiwicHJvcHNEZWYiLCIkc2V0IiwiJGRlbGV0ZSIsImltbWVkaWF0ZSIsInN0YXRlTWl4aW4iLCJob29rUkUiLCIkb25jZSIsImkkMSIsImNicyIsImxvd2VyQ2FzZUV2ZW50IiwiZXZlbnRzTWl4aW4iLCJfdXBkYXRlIiwicHJldkVsIiwiJGVsIiwicHJldlZub2RlIiwicmVzdG9yZUFjdGl2ZUluc3RhbmNlIiwiX19wYXRjaF9fIiwiX192dWVfXyIsImxpZmVjeWNsZU1peGluIiwiJG5leHRUaWNrIiwiX3JlbmRlciIsInJlZiIsInJlbmRlckVycm9yIiwicmVuZGVyTWl4aW4iLCJwYXR0ZXJuVHlwZXMiLCJidWlsdEluQ29tcG9uZW50cyIsIktlZXBBbGl2ZSIsImluY2x1ZGUiLCJleGNsdWRlIiwiY2FjaGVWTm9kZSIsInZub2RlVG9DYWNoZSIsImtleVRvQ2FjaGUiLCJjcmVhdGVkIiwiZGVzdHJveWVkIiwibW91bnRlZCIsInVwZGF0ZWQiLCJjb25maWdEZWYiLCJ1dGlsIiwiZGVmaW5lUmVhY3RpdmUiLCJvYnNlcnZhYmxlIiwicGx1Z2luIiwiaW5zdGFsbGVkUGx1Z2lucyIsIl9pbnN0YWxsZWRQbHVnaW5zIiwiaW5zdGFsbCIsImluaXRVc2UiLCJpbml0TWl4aW4kMSIsImRlZmluaXRpb24iLCJpbml0QXNzZXRSZWdpc3RlcnMiLCJpbml0R2xvYmFsQVBJIiwic3NyQ29udGV4dCIsInZlcnNpb24iLCJhY2NlcHRWYWx1ZSIsImlzRW51bWVyYXRlZEF0dHIiLCJpc1ZhbGlkQ29udGVudEVkaXRhYmxlVmFsdWUiLCJpc0Jvb2xlYW5BdHRyIiwieGxpbmtOUyIsImlzWGxpbmsiLCJnZXRYbGlua1Byb3AiLCJpc0ZhbHN5QXR0clZhbHVlIiwiZ2VuQ2xhc3NGb3JWbm9kZSIsImNoaWxkTm9kZSIsIm1lcmdlQ2xhc3NEYXRhIiwic3RhdGljQ2xhc3MiLCJkeW5hbWljQ2xhc3MiLCJzdHJpbmdpZnlDbGFzcyIsInN0cmluZ2lmaWVkIiwic3RyaW5naWZ5QXJyYXkiLCJzdHJpbmdpZnlPYmplY3QiLCJuYW1lc3BhY2VNYXAiLCJzdmciLCJtYXRoIiwiaXNIVE1MVGFnIiwiaXNTVkciLCJ1bmtub3duRWxlbWVudENhY2hlIiwiaXNUZXh0SW5wdXRUeXBlIiwibm9kZU9wcyIsIm11bHRpcGxlIiwiY3JlYXRlRWxlbWVudE5TIiwiY3JlYXRlQ29tbWVudCIsIm5ld05vZGUiLCJyZWZlcmVuY2VOb2RlIiwibmV4dFNpYmxpbmciLCJzZXRUZXh0Q29udGVudCIsInNldFN0eWxlU2NvcGUiLCJzY29wZUlkIiwicmVnaXN0ZXJSZWYiLCJpc1JlbW92YWwiLCJyZWZzIiwicmVmSW5Gb3IiLCJlbXB0eU5vZGUiLCJzYW1lVm5vZGUiLCJ0eXBlQSIsInR5cGVCIiwic2FtZUlucHV0VHlwZSIsImNyZWF0ZUtleVRvT2xkSWR4IiwiYmVnaW5JZHgiLCJ1cGRhdGVEaXJlY3RpdmVzIiwib2xkRGlyIiwiZGlyIiwiaXNDcmVhdGUiLCJpc0Rlc3Ryb3kiLCJvbGREaXJzIiwibm9ybWFsaXplRGlyZWN0aXZlcyQxIiwibmV3RGlycyIsImRpcnNXaXRoSW5zZXJ0IiwiZGlyc1dpdGhQb3N0cGF0Y2giLCJvbGRBcmciLCJhcmciLCJjYWxsSG9vayQxIiwiY29tcG9uZW50VXBkYXRlZCIsImNhbGxJbnNlcnQiLCJlbXB0eU1vZGlmaWVycyIsIm1vZGlmaWVycyIsImdldFJhd0Rpck5hbWUiLCJyYXdOYW1lIiwiYmFzZU1vZHVsZXMiLCJ1cGRhdGVBdHRycyIsImluaGVyaXRBdHRycyIsIm9sZEF0dHJzIiwicmVtb3ZlQXR0cmlidXRlTlMiLCJpc0luUHJlIiwiYmFzZVNldEF0dHIiLCJjb252ZXJ0RW51bWVyYXRlZFZhbHVlIiwic2V0QXR0cmlidXRlTlMiLCJfX2llcGgiLCJibG9ja2VyIiwic3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uIiwidXBkYXRlQ2xhc3MiLCJvbGREYXRhIiwiY2xzIiwidHJhbnNpdGlvbkNsYXNzIiwiX3RyYW5zaXRpb25DbGFzc2VzIiwiX3ByZXZDbGFzcyIsImNociIsImluZGV4JDEiLCJleHByZXNzaW9uUG9zIiwiZXhwcmVzc2lvbkVuZFBvcyIsIndhcm4kMSIsImtsYXNzIiwidmFsaWREaXZpc2lvbkNoYXJSRSIsInBhcnNlRmlsdGVycyIsImV4cCIsImZpbHRlcnMiLCJpblNpbmdsZSIsImluRG91YmxlIiwiaW5UZW1wbGF0ZVN0cmluZyIsImluUmVnZXgiLCJjdXJseSIsInNxdWFyZSIsInBhcmVuIiwibGFzdEZpbHRlckluZGV4IiwicHVzaEZpbHRlciIsIndyYXBGaWx0ZXIiLCJiYXNlV2FybiIsInJhbmdlIiwicGx1Y2tNb2R1bGVGdW5jdGlvbiIsImFkZFByb3AiLCJkeW5hbWljIiwicmFuZ2VTZXRJdGVtIiwicGxhaW4iLCJhZGRBdHRyIiwiZHluYW1pY0F0dHJzIiwiYWRkUmF3QXR0ciIsImF0dHJzTWFwIiwiYXR0cnNMaXN0IiwiYWRkRGlyZWN0aXZlIiwiaXNEeW5hbWljQXJnIiwicHJlcGVuZE1vZGlmaWVyTWFya2VyIiwiYWRkSGFuZGxlciIsImltcG9ydGFudCIsInByZXZlbnQiLCJtaWRkbGUiLCJuYXRpdmUiLCJuYXRpdmVFdmVudHMiLCJuZXdIYW5kbGVyIiwiZ2V0UmF3QmluZGluZ0F0dHIiLCJyYXdBdHRyc01hcCIsImdldEJpbmRpbmdBdHRyIiwiZ2V0U3RhdGljIiwiZHluYW1pY1ZhbHVlIiwiZ2V0QW5kUmVtb3ZlQXR0ciIsInN0YXRpY1ZhbHVlIiwicmVtb3ZlRnJvbU1hcCIsImdldEFuZFJlbW92ZUF0dHJCeVJlZ2V4IiwiZ2VuQ29tcG9uZW50TW9kZWwiLCJudW1iZXIiLCJiYXNlVmFsdWVFeHByZXNzaW9uIiwidmFsdWVFeHByZXNzaW9uIiwiYXNzaWdubWVudCIsImdlbkFzc2lnbm1lbnRDb2RlIiwiZW9mIiwiaXNTdHJpbmdTdGFydCIsInBhcnNlU3RyaW5nIiwicGFyc2VCcmFja2V0IiwicGFyc2VNb2RlbCIsImluQnJhY2tldCIsInN0cmluZ1F1b3RlIiwidGFyZ2V0JDEiLCJSQU5HRV9UT0tFTiIsImNyZWF0ZU9uY2VIYW5kbGVyJDEiLCJyZW1vdmUkMiIsInVzZU1pY3JvdGFza0ZpeCIsImFkZCQxIiwiYXR0YWNoZWRUaW1lc3RhbXAiLCJfd3JhcHBlciIsImN1cnJlbnRUYXJnZXQiLCJvd25lckRvY3VtZW50IiwidXBkYXRlRE9NTGlzdGVuZXJzIiwiY2hhbmdlIiwibm9ybWFsaXplRXZlbnRzIiwic3ZnQ29udGFpbmVyIiwidXBkYXRlRE9NUHJvcHMiLCJvbGRQcm9wcyIsImNoaWxkTm9kZXMiLCJfdmFsdWUiLCJzdHJDdXIiLCJzaG91bGRVcGRhdGVWYWx1ZSIsImlubmVySFRNTCIsImNoZWNrVmFsIiwiY29tcG9zaW5nIiwibm90SW5Gb2N1cyIsImlzTm90SW5Gb2N1c0FuZERpcnR5IiwiX3ZNb2RpZmllcnMiLCJpc0RpcnR5V2l0aE1vZGlmaWVycyIsInBhcnNlU3R5bGVUZXh0IiwicHJvcGVydHlEZWxpbWl0ZXIiLCJub3JtYWxpemVTdHlsZURhdGEiLCJub3JtYWxpemVTdHlsZUJpbmRpbmciLCJzdGF0aWNTdHlsZSIsImJpbmRpbmdTdHlsZSIsImVtcHR5U3R5bGUiLCJjc3NWYXJSRSIsImltcG9ydGFudFJFIiwic2V0UHJvcCIsIm5vcm1hbGl6ZWROYW1lIiwibm9ybWFsaXplIiwidmVuZG9yTmFtZXMiLCJjYXBOYW1lIiwidXBkYXRlU3R5bGUiLCJvbGRTdGF0aWNTdHlsZSIsIm9sZFN0eWxlQmluZGluZyIsIm5vcm1hbGl6ZWRTdHlsZSIsIm9sZFN0eWxlIiwibmV3U3R5bGUiLCJjaGVja0NoaWxkIiwic3R5bGVEYXRhIiwiZ2V0U3R5bGUiLCJ3aGl0ZXNwYWNlUkUiLCJ0YXIiLCJyZXNvbHZlVHJhbnNpdGlvbiIsImF1dG9Dc3NUcmFuc2l0aW9uIiwiZW50ZXJDbGFzcyIsImVudGVyVG9DbGFzcyIsImVudGVyQWN0aXZlQ2xhc3MiLCJsZWF2ZUNsYXNzIiwibGVhdmVUb0NsYXNzIiwibGVhdmVBY3RpdmVDbGFzcyIsImhhc1RyYW5zaXRpb24iLCJUUkFOU0lUSU9OIiwiQU5JTUFUSU9OIiwidHJhbnNpdGlvblByb3AiLCJ0cmFuc2l0aW9uRW5kRXZlbnQiLCJhbmltYXRpb25Qcm9wIiwiYW5pbWF0aW9uRW5kRXZlbnQiLCJvbnRyYW5zaXRpb25lbmQiLCJvbndlYmtpdHRyYW5zaXRpb25lbmQiLCJvbmFuaW1hdGlvbmVuZCIsIm9ud2Via2l0YW5pbWF0aW9uZW5kIiwicmFmIiwibmV4dEZyYW1lIiwiYWRkVHJhbnNpdGlvbkNsYXNzIiwidHJhbnNpdGlvbkNsYXNzZXMiLCJyZW1vdmVUcmFuc2l0aW9uQ2xhc3MiLCJ3aGVuVHJhbnNpdGlvbkVuZHMiLCJnZXRUcmFuc2l0aW9uSW5mbyIsInByb3BDb3VudCIsImVuZGVkIiwib25FbmQiLCJ0cmFuc2Zvcm1SRSIsInN0eWxlcyIsInRyYW5zaXRpb25EZWxheXMiLCJ0cmFuc2l0aW9uRHVyYXRpb25zIiwidHJhbnNpdGlvblRpbWVvdXQiLCJnZXRUaW1lb3V0IiwiYW5pbWF0aW9uRGVsYXlzIiwiYW5pbWF0aW9uRHVyYXRpb25zIiwiYW5pbWF0aW9uVGltZW91dCIsImhhc1RyYW5zZm9ybSIsImRlbGF5cyIsImR1cmF0aW9ucyIsInRvTXMiLCJlbnRlciIsInRvZ2dsZURpc3BsYXkiLCJfbGVhdmVDYiIsImNhbmNlbGxlZCIsIl9lbnRlckNiIiwibm9kZVR5cGUiLCJhcHBlYXJDbGFzcyIsImFwcGVhclRvQ2xhc3MiLCJhcHBlYXJBY3RpdmVDbGFzcyIsImJlZm9yZUVudGVyIiwiYWZ0ZXJFbnRlciIsImVudGVyQ2FuY2VsbGVkIiwiYmVmb3JlQXBwZWFyIiwiYXBwZWFyIiwiYWZ0ZXJBcHBlYXIiLCJhcHBlYXJDYW5jZWxsZWQiLCJ0cmFuc2l0aW9uTm9kZSIsImlzQXBwZWFyIiwic3RhcnRDbGFzcyIsImFjdGl2ZUNsYXNzIiwidG9DbGFzcyIsImJlZm9yZUVudGVySG9vayIsImVudGVySG9vayIsImFmdGVyRW50ZXJIb29rIiwiZW50ZXJDYW5jZWxsZWRIb29rIiwiZXhwbGljaXRFbnRlckR1cmF0aW9uIiwiY2hlY2tEdXJhdGlvbiIsImV4cGVjdHNDU1MiLCJ1c2VyV2FudHNDb250cm9sIiwiZ2V0SG9va0FyZ3VtZW50c0xlbmd0aCIsInNob3ciLCJwZW5kaW5nTm9kZSIsIl9wZW5kaW5nIiwiaXNWYWxpZER1cmF0aW9uIiwibGVhdmUiLCJybSIsImJlZm9yZUxlYXZlIiwiYWZ0ZXJMZWF2ZSIsImxlYXZlQ2FuY2VsbGVkIiwiZGVsYXlMZWF2ZSIsImV4cGxpY2l0TGVhdmVEdXJhdGlvbiIsInBlcmZvcm1MZWF2ZSIsImludm9rZXJGbnMiLCJfZW50ZXIiLCJwYXRjaCIsImJhY2tlbmQiLCJyZW1vdmVOb2RlIiwiaXNVbmtub3duRWxlbWVudCQkMSIsImluVlByZSIsImlnbm9yZSIsImNyZWF0aW5nRWxtSW5WUHJlIiwiY3JlYXRlRWxtIiwiaW5zZXJ0ZWRWbm9kZVF1ZXVlIiwicGFyZW50RWxtIiwicmVmRWxtIiwibmVzdGVkIiwib3duZXJBcnJheSIsImlzUmVhY3RpdmF0ZWQiLCJpbml0Q29tcG9uZW50IiwiaW5uZXJOb2RlIiwicmVhY3RpdmF0ZUNvbXBvbmVudCIsInNldFNjb3BlIiwiY3JlYXRlQ2hpbGRyZW4iLCJpbnZva2VDcmVhdGVIb29rcyIsInBlbmRpbmdJbnNlcnQiLCJpc1BhdGNoYWJsZSIsInJlZiQkMSIsImNoZWNrRHVwbGljYXRlS2V5cyIsImFuY2VzdG9yIiwiYWRkVm5vZGVzIiwiaW52b2tlRGVzdHJveUhvb2siLCJyZW1vdmVWbm9kZXMiLCJjaCIsInJlbW92ZUFuZEludm9rZVJlbW92ZUhvb2siLCJjaGlsZEVsbSIsImNyZWF0ZVJtQ2IiLCJzZWVuS2V5cyIsImZpbmRJZHhJbk9sZCIsIm9sZENoIiwicGF0Y2hWbm9kZSIsInJlbW92ZU9ubHkiLCJoeWRyYXRlIiwibmV3Q2giLCJvbGRLZXlUb0lkeCIsImlkeEluT2xkIiwidm5vZGVUb01vdmUiLCJvbGRTdGFydElkeCIsIm5ld1N0YXJ0SWR4Iiwib2xkRW5kSWR4Iiwib2xkU3RhcnRWbm9kZSIsIm9sZEVuZFZub2RlIiwibmV3RW5kSWR4IiwibmV3U3RhcnRWbm9kZSIsIm5ld0VuZFZub2RlIiwiY2FuTW92ZSIsInVwZGF0ZUNoaWxkcmVuIiwicG9zdHBhdGNoIiwiaW52b2tlSW5zZXJ0SG9vayIsImluaXRpYWwiLCJoeWRyYXRpb25CYWlsZWQiLCJpc1JlbmRlcmVkTW9kdWxlIiwiYXNzZXJ0Tm9kZU1hdGNoIiwiaGFzQ2hpbGROb2RlcyIsImNoaWxkcmVuTWF0Y2giLCJmdWxsSW52b2tlIiwiaXNJbml0aWFsUGF0Y2giLCJpc1JlYWxFbGVtZW50Iiwib2xkRWxtIiwicGF0Y2hhYmxlIiwiaSQyIiwiY3JlYXRlUGF0Y2hGdW5jdGlvbiIsInZtb2RlbCIsInRyaWdnZXIiLCJkaXJlY3RpdmUiLCJiaW5kaW5nIiwiX3ZPcHRpb25zIiwic2V0U2VsZWN0ZWQiLCJvbkNvbXBvc2l0aW9uU3RhcnQiLCJvbkNvbXBvc2l0aW9uRW5kIiwicHJldk9wdGlvbnMiLCJjdXJPcHRpb25zIiwiaGFzTm9NYXRjaGluZ09wdGlvbiIsImFjdHVhbGx5U2V0U2VsZWN0ZWQiLCJpc011bHRpcGxlIiwibG9jYXRlTm9kZSIsInBsYXRmb3JtRGlyZWN0aXZlcyIsInRyYW5zaXRpb24kJDEiLCJvcmlnaW5hbERpc3BsYXkiLCJfX3ZPcmlnaW5hbERpc3BsYXkiLCJ1bmJpbmQiLCJ0cmFuc2l0aW9uUHJvcHMiLCJtb2RlIiwiZ2V0UmVhbENoaWxkIiwiY29tcE9wdGlvbnMiLCJleHRyYWN0VHJhbnNpdGlvbkRhdGEiLCJyYXdDaGlsZCIsImlzTm90VGV4dE5vZGUiLCJpc1ZTaG93RGlyZWN0aXZlIiwiVHJhbnNpdGlvbiIsImhhc1BhcmVudFRyYW5zaXRpb24iLCJfbGVhdmluZyIsIm9sZFJhd0NoaWxkIiwib2xkQ2hpbGQiLCJpc1NhbWVDaGlsZCIsImRlbGF5ZWRMZWF2ZSIsIm1vdmVDbGFzcyIsImNhbGxQZW5kaW5nQ2JzIiwiX21vdmVDYiIsInJlY29yZFBvc2l0aW9uIiwibmV3UG9zIiwiYXBwbHlUcmFuc2xhdGlvbiIsIm9sZFBvcyIsInBvcyIsImR4IiwiZHkiLCJtb3ZlZCIsIldlYmtpdFRyYW5zZm9ybSIsInBsYXRmb3JtQ29tcG9uZW50cyIsIlRyYW5zaXRpb25Hcm91cCIsImJlZm9yZU1vdW50Iiwia2VwdCIsInByZXZDaGlsZHJlbiIsInJhd0NoaWxkcmVuIiwidHJhbnNpdGlvbkRhdGEiLCJyZW1vdmVkIiwiYyQxIiwiaGFzTW92ZSIsIl9yZWZsb3ciLCJfaGFzTW92ZSIsIkhUTUxVbmtub3duRWxlbWVudCIsInVwZGF0ZUNvbXBvbmVudCIsInRlbXBsYXRlIiwibW91bnRDb21wb25lbnQiLCJkZWZhdWx0VGFnUkUiLCJyZWdleEVzY2FwZVJFIiwiYnVpbGRSZWdleCIsImRlbGltaXRlcnMiLCJwYXJzZVRleHQiLCJ0YWdSRSIsInRva2VuVmFsdWUiLCJyYXdUb2tlbnMiLCJrbGFzcyQxIiwic3RhdGljS2V5cyIsInRyYW5zZm9ybU5vZGUiLCJjbGFzc0JpbmRpbmciLCJnZW5EYXRhIiwic3R5bGUkMSIsInN0eWxlQmluZGluZyIsImhlIiwiaXNVbmFyeVRhZyIsImNhbkJlTGVmdE9wZW5UYWciLCJpc05vblBocmFzaW5nVGFnIiwiYXR0cmlidXRlIiwiZHluYW1pY0FyZ0F0dHJpYnV0ZSIsIm5jbmFtZSIsInFuYW1lQ2FwdHVyZSIsInN0YXJ0VGFnT3BlbiIsInN0YXJ0VGFnQ2xvc2UiLCJkb2N0eXBlIiwiY29tbWVudCIsImNvbmRpdGlvbmFsQ29tbWVudCIsImlzUGxhaW5UZXh0RWxlbWVudCIsInJlQ2FjaGUiLCJkZWNvZGluZ01hcCIsImVuY29kZWRBdHRyIiwiZW5jb2RlZEF0dHJXaXRoTmV3TGluZXMiLCJpc0lnbm9yZU5ld2xpbmVUYWciLCJzaG91bGRJZ25vcmVGaXJzdE5ld2xpbmUiLCJkZWNvZGVBdHRyIiwic2hvdWxkRGVjb2RlTmV3bGluZXMiLCJ3YXJuJDIiLCJ0cmFuc2Zvcm1zIiwicHJlVHJhbnNmb3JtcyIsInBvc3RUcmFuc2Zvcm1zIiwicGxhdGZvcm1Jc1ByZVRhZyIsInBsYXRmb3JtTXVzdFVzZVByb3AiLCJwbGF0Zm9ybUdldFRhZ05hbWVzcGFjZSIsIm1heWJlQ29tcG9uZW50Iiwib25SRSIsImRpclJFIiwiZm9yQWxpYXNSRSIsImZvckl0ZXJhdG9yUkUiLCJzdHJpcFBhcmVuc1JFIiwiZHluYW1pY0FyZ1JFIiwiYXJnUkUiLCJiaW5kUkUiLCJtb2RpZmllclJFIiwic2xvdFJFIiwibGluZUJyZWFrUkUiLCJ3aGl0ZXNwYWNlUkUkMSIsImludmFsaWRBdHRyaWJ1dGVSRSIsImRlY29kZUhUTUxDYWNoZWQiLCJlbXB0eVNsb3RTY29wZVRva2VuIiwiY3JlYXRlQVNURWxlbWVudCIsIm1ha2VBdHRyc01hcCIsImlzUHJlVGFnIiwiY3VycmVudFBhcmVudCIsInByZXNlcnZlV2hpdGVzcGFjZSIsIndoaXRlc3BhY2VPcHRpb24iLCJ3aGl0ZXNwYWNlIiwiaW5QcmUiLCJ3YXJuT25jZSIsImNsb3NlRWxlbWVudCIsInRyaW1FbmRpbmdXaGl0ZXNwYWNlIiwicHJvY2Vzc2VkIiwicHJvY2Vzc0VsZW1lbnQiLCJpZiIsImVsc2VpZiIsImVsc2UiLCJjaGVja1Jvb3RDb25zdHJhaW50cyIsImFkZElmQ29uZGl0aW9uIiwiYmxvY2siLCJmb3JiaWRkZW4iLCJmaW5kUHJldkVsZW1lbnQiLCJzbG90U2NvcGUiLCJzbG90VGFyZ2V0IiwibGFzdE5vZGUiLCJsYXN0VGFnIiwiZXhwZWN0SFRNTCIsImlzVW5hcnlUYWckJDEiLCJjYW5CZUxlZnRPcGVuVGFnJCQxIiwiZW5kVGFnTGVuZ3RoIiwic3RhY2tlZFRhZyIsInJlU3RhY2tlZFRhZyIsInJlc3QkMSIsImFsbCIsInBhcnNlRW5kVGFnIiwidGV4dEVuZCIsImNvbW1lbnRFbmQiLCJzaG91bGRLZWVwQ29tbWVudCIsImFkdmFuY2UiLCJjb25kaXRpb25hbEVuZCIsImRvY3R5cGVNYXRjaCIsImVuZFRhZ01hdGNoIiwiY3VySW5kZXgiLCJzdGFydFRhZ01hdGNoIiwicGFyc2VTdGFydFRhZyIsImhhbmRsZVN0YXJ0VGFnIiwicmVzdCIsInVuYXJ5U2xhc2giLCJ1bmFyeSIsInNob3VsZERlY29kZU5ld2xpbmVzRm9ySHJlZiIsIm91dHB1dFNvdXJjZVJhbmdlIiwibG93ZXJDYXNlZFRhZyIsImxvd2VyQ2FzZWRUYWdOYW1lIiwicGFyc2VIVE1MIiwiY29tbWVudHMiLCJzdGFydCQxIiwiaWVOU0J1ZyIsImllTlNQcmVmaXgiLCJndWFyZElFU1ZHQnVnIiwiY3VtdWxhdGVkIiwicHJvY2Vzc1ByZSIsInByb2Nlc3NSYXdBdHRycyIsInByb2Nlc3NGb3IiLCJwcm9jZXNzSWYiLCJwcm9jZXNzT25jZSIsImVuZCQxIiwiZm9yIiwiaXRlcmF0b3IyIiwiaXRlcmF0b3IxIiwicHJvY2Vzc0tleSIsImNoZWNrSW5Gb3IiLCJwcm9jZXNzUmVmIiwic2xvdFRhcmdldER5bmFtaWMiLCJzbG90QmluZGluZyIsImdldFNsb3ROYW1lIiwic2xvdEJpbmRpbmckMSIsInJlZiQxIiwiZHluYW1pYyQxIiwic2xvdENvbnRhaW5lciIsInByb2Nlc3NTbG90Q29udGVudCIsInNsb3ROYW1lIiwicHJvY2Vzc0NvbXBvbmVudCIsInN5bmNHZW4iLCJpc0R5bmFtaWMiLCJoYXNCaW5kaW5ncyIsInBhcnNlTW9kaWZpZXJzIiwiY2FtZWwiLCJhcmdNYXRjaCIsImNoZWNrRm9yQWxpYXNNb2RlbCIsInByb2Nlc3NBdHRycyIsImluTWF0Y2giLCJhbGlhcyIsIml0ZXJhdG9yTWF0Y2giLCJwYXJzZUZvciIsImNvbmRpdGlvbiIsImlmQ29uZGl0aW9ucyIsIl9lbCIsImNsb25lQVNURWxlbWVudCIsIm1vZHVsZXMkMSIsInByZVRyYW5zZm9ybU5vZGUiLCJ0eXBlQmluZGluZyIsImlmQ29uZGl0aW9uIiwiaWZDb25kaXRpb25FeHRyYSIsImhhc0Vsc2UiLCJlbHNlSWZDb25kaXRpb24iLCJicmFuY2gwIiwiYnJhbmNoMSIsImJyYW5jaDIiLCJpc1N0YXRpY0tleSIsImlzUGxhdGZvcm1SZXNlcnZlZFRhZyIsImJhc2VPcHRpb25zIiwiX3dhcm4iLCJnZW5TZWxlY3QiLCJ2YWx1ZUJpbmRpbmciLCJ0cnVlVmFsdWVCaW5kaW5nIiwiZmFsc2VWYWx1ZUJpbmRpbmciLCJnZW5DaGVja2JveE1vZGVsIiwiZ2VuUmFkaW9Nb2RlbCIsInZhbHVlJDEiLCJuZWVkQ29tcG9zaXRpb25HdWFyZCIsImdlbkRlZmF1bHRNb2RlbCIsImdlblN0YXRpY0tleXMiLCJnZW5TdGF0aWNLZXlzQ2FjaGVkIiwib3B0aW1pemUiLCJtYXJrU3RhdGljJDEiLCJtYXJrU3RhdGljUm9vdHMiLCJzdGF0aWMiLCJpc0RpcmVjdENoaWxkT2ZUZW1wbGF0ZUZvciIsImwkMSIsInN0YXRpY0luRm9yIiwic3RhdGljUm9vdCIsImZuRXhwUkUiLCJmbkludm9rZVJFIiwic2ltcGxlUGF0aFJFIiwiZXNjIiwidGFiIiwic3BhY2UiLCJ1cCIsImRvd24iLCJrZXlOYW1lcyIsImdlbkd1YXJkIiwibW9kaWZpZXJDb2RlIiwic3RvcCIsImN0cmwiLCJhbHQiLCJtZXRhIiwiZ2VuSGFuZGxlcnMiLCJzdGF0aWNIYW5kbGVycyIsImR5bmFtaWNIYW5kbGVycyIsImhhbmRsZXJDb2RlIiwiZ2VuSGFuZGxlciIsImlzTWV0aG9kUGF0aCIsImlzRnVuY3Rpb25FeHByZXNzaW9uIiwiaXNGdW5jdGlvbkludm9jYXRpb24iLCJnZW5Nb2RpZmllckNvZGUiLCJrZXlNb2RpZmllciIsImdlbkZpbHRlckNvZGUiLCJnZW5LZXlGaWx0ZXIiLCJrZXlWYWwiLCJrZXlOYW1lIiwiYmFzZURpcmVjdGl2ZXMiLCJ3cmFwTGlzdGVuZXJzIiwid3JhcERhdGEiLCJjbG9hayIsIkNvZGVnZW5TdGF0ZSIsImRhdGFHZW5GbnMiLCJvbmNlSWQiLCJnZW5lcmF0ZSIsImFzdCIsImdlbkVsZW1lbnQiLCJzdGF0aWNQcm9jZXNzZWQiLCJnZW5TdGF0aWMiLCJvbmNlUHJvY2Vzc2VkIiwiZ2VuT25jZSIsImZvclByb2Nlc3NlZCIsImdlbkZvciIsImlmUHJvY2Vzc2VkIiwiZ2VuSWYiLCJnZW5DaGlsZHJlbiIsImdlblByb3BzIiwiYmluZCQkMSIsImdlblNsb3QiLCJjb21wb25lbnROYW1lIiwiZ2VuRGF0YSQyIiwiZ2VuQ29tcG9uZW50Iiwib3JpZ2luYWxQcmVTdGF0ZSIsImFsdEdlbiIsImFsdEVtcHR5IiwiZ2VuSWZDb25kaXRpb25zIiwiY29uZGl0aW9ucyIsImdlblRlcm5hcnlFeHAiLCJhbHRIZWxwZXIiLCJuZWVkUnVudGltZSIsImhhc1J1bnRpbWUiLCJnZW4iLCJnZW5EaXJlY3RpdmVzIiwiY29udGFpbnNTbG90Q2hpbGQiLCJuZWVkc0tleSIsImdlbmVyYXRlZFNsb3RzIiwiZ2VuU2NvcGVkU2xvdCIsImlubGluZVJlbmRlckZucyIsImdlbklubGluZVRlbXBsYXRlIiwiaXNMZWdhY3lTeW50YXgiLCJyZXZlcnNlUHJveHkiLCJjaGVja1NraXAiLCJhbHRHZW5FbGVtZW50IiwiYWx0R2VuTm9kZSIsImVsJDEiLCJub3JtYWxpemF0aW9uVHlwZSQxIiwibmVlZHNOb3JtYWxpemF0aW9uIiwiZ2V0Tm9ybWFsaXphdGlvblR5cGUiLCJnZW5Ob2RlIiwiZ2VuQ29tbWVudCIsInRyYW5zZm9ybVNwZWNpYWxOZXdsaW5lcyIsImdlblRleHQiLCJzdGF0aWNQcm9wcyIsImR5bmFtaWNQcm9wcyIsInByb2hpYml0ZWRLZXl3b3JkUkUiLCJ1bmFyeU9wZXJhdG9yc1JFIiwic3RyaXBTdHJpbmdSRSIsImRldGVjdEVycm9ycyIsImNoZWNrTm9kZSIsImNoZWNrRm9yIiwiY2hlY2tGdW5jdGlvblBhcmFtZXRlckV4cHJlc3Npb24iLCJjaGVja0V2ZW50IiwiY2hlY2tFeHByZXNzaW9uIiwic3RyaXBwZWQiLCJrZXl3b3JkTWF0Y2giLCJjaGVja0lkZW50aWZpZXIiLCJpZGVudCIsInJlcGVhdCQxIiwiY3JlYXRlRnVuY3Rpb24iLCJlcnJvcnMiLCJjcmVhdGVDb21waWxlVG9GdW5jdGlvbkZuIiwiY29tcGlsZSIsIndhcm4kJDEiLCJjb21waWxlZCIsImxpbmVzIiwibGluZUxlbmd0aCIsInBhZCIsImxlbmd0aCQxIiwiZ2VuZXJhdGVDb2RlRnJhbWUiLCJ0aXBzIiwiZm5HZW5FcnJvcnMiLCJkaXYiLCJiYXNlQ29tcGlsZSIsImZpbmFsT3B0aW9ucyIsImxlYWRpbmdTcGFjZUxlbmd0aCIsImNvbXBpbGVUb0Z1bmN0aW9ucyIsImdldFNob3VsZERlY29kZSIsImlkVG9UZW1wbGF0ZSIsIm1vdW50Iiwib3V0ZXJIVE1MIiwiZ2V0T3V0ZXJIVE1MIiwiYWxwaGFiZXQiLCJzZWVkIiwiZW5jb2RlZCIsIm1kYyIsInRvcEFwcEJhciIsImluVG9wQXBwQmFyIiwiaW5EaWFsb2ciLCJzd2l0Y2hDb250cm9sIiwiY2hlY2tib3giLCJmb3JtRmllbGQiLCJ0ZXh0RmllbGQiLCJzZWxlY3QiLCJkaWFsb2ciLCJzd2l0Y2hFbGVtcyIsImFjdGlvbnMiLCJfX3dlYnBhY2tfbW9kdWxlX2NhY2hlX18iLCJfX3dlYnBhY2tfcmVxdWlyZV9fIiwibW9kdWxlSWQiLCJjYWNoZWRNb2R1bGUiLCJfX3dlYnBhY2tfbW9kdWxlc19fIiwic2NyaXB0VXJsIiwiaW1wb3J0U2NyaXB0cyIsImN1cnJlbnRTY3JpcHQiLCJzY3JpcHRzIiwiYmFzZVVSSSIsImFjdGl2YXRpb25Db2RlIiwiYWN0aXZhdGlvbkNvZGVFcnJvciIsImN1cnJlbnRDb250ZW50IiwiY3VycmVudENhcHRpb24iLCJzZW5kQWN0aXZhdGlvbkNvZGUiLCJhY3RpdmF0aW9uQ29kZUtleXVwIiwiY29udGVudFN0eWxlIiwiY2FwdGlvbiIsInJlbG9hZCIsImxpbmtzIiwicHJveHlVUkwiLCJpbWciLCJJbWFnZSIsIm9uYWJvcnQiXSwic291cmNlUm9vdCI6IiJ9