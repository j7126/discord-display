:root{--mdc-theme-primary:#5865F2;--mdc-theme-secondary:#5865F2;--mdc-theme-background:#fff;--mdc-theme-surface:#fff;--mdc-theme-error:#b00020;--mdc-theme-on-primary:#000;--mdc-theme-on-secondary:#fff;--mdc-theme-on-surface:#000;--mdc-theme-on-error:#fff;--mdc-theme-text-primary-on-background:rgba(0, 0, 0, 0.87);--mdc-theme-text-secondary-on-background:rgba(0, 0, 0, 0.54);--mdc-theme-text-hint-on-background:rgba(0, 0, 0, 0.38);--mdc-theme-text-disabled-on-background:rgba(0, 0, 0, 0.38);--mdc-theme-text-icon-on-background:rgba(0, 0, 0, 0.38);--mdc-theme-text-primary-on-light:rgba(0, 0, 0, 0.87);--mdc-theme-text-secondary-on-light:rgba(0, 0, 0, 0.54);--mdc-theme-text-hint-on-light:rgba(0, 0, 0, 0.38);--mdc-theme-text-disabled-on-light:rgba(0, 0, 0, 0.38);--mdc-theme-text-icon-on-light:rgba(0, 0, 0, 0.38);--mdc-theme-text-primary-on-dark:white;--mdc-theme-text-secondary-on-dark:rgba(255, 255, 255, 0.7);--mdc-theme-text-hint-on-dark:rgba(255, 255, 255, 0.5);--mdc-theme-text-disabled-on-dark:rgba(255, 255, 255, 0.5);--mdc-theme-text-icon-on-dark:rgba(255, 255, 255, 0.5)}.mdc-theme--primary{color:#5865F2  !important;color:var(--mdc-theme-primary, #5865F2) !important}.mdc-theme--secondary{color:#5865F2  !important;color:var(--mdc-theme-secondary, #5865F2) !important}.mdc-theme--background{background-color:#fff;background-color:var(--mdc-theme-background, #fff)}.mdc-theme--surface{background-color:#fff;background-color:var(--mdc-theme-surface, #fff)}.mdc-theme--error{color:#b00020  !important;color:var(--mdc-theme-error, #b00020) !important}.mdc-theme--on-primary{color:#000  !important;color:var(--mdc-theme-on-primary, #000) !important}.mdc-theme--on-secondary{color:#fff  !important;color:var(--mdc-theme-on-secondary, #fff) !important}.mdc-theme--on-surface{color:#000  !important;color:var(--mdc-theme-on-surface, #000) !important}.mdc-theme--on-error{color:#fff  !important;color:var(--mdc-theme-on-error, #fff) !important}.mdc-theme--text-primary-on-background{color:rgba(0, 0, 0, 0.87)  !important;color:var(--mdc-theme-text-primary-on-background, rgba(0, 0, 0, 0.87)) !important}.mdc-theme--text-secondary-on-background{color:rgba(0, 0, 0, 0.54)  !important;color:var(--mdc-theme-text-secondary-on-background, rgba(0, 0, 0, 0.54)) !important}.mdc-theme--text-hint-on-background{color:rgba(0, 0, 0, 0.38)  !important;color:var(--mdc-theme-text-hint-on-background, rgba(0, 0, 0, 0.38)) !important}.mdc-theme--text-disabled-on-background{color:rgba(0, 0, 0, 0.38)  !important;color:var(--mdc-theme-text-disabled-on-background, rgba(0, 0, 0, 0.38)) !important}.mdc-theme--text-icon-on-background{color:rgba(0, 0, 0, 0.38)  !important;color:var(--mdc-theme-text-icon-on-background, rgba(0, 0, 0, 0.38)) !important}.mdc-theme--text-primary-on-light{color:rgba(0, 0, 0, 0.87)  !important;color:var(--mdc-theme-text-primary-on-light, rgba(0, 0, 0, 0.87)) !important}.mdc-theme--text-secondary-on-light{color:rgba(0, 0, 0, 0.54)  !important;color:var(--mdc-theme-text-secondary-on-light, rgba(0, 0, 0, 0.54)) !important}.mdc-theme--text-hint-on-light{color:rgba(0, 0, 0, 0.38)  !important;color:var(--mdc-theme-text-hint-on-light, rgba(0, 0, 0, 0.38)) !important}.mdc-theme--text-disabled-on-light{color:rgba(0, 0, 0, 0.38)  !important;color:var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38)) !important}.mdc-theme--text-icon-on-light{color:rgba(0, 0, 0, 0.38)  !important;color:var(--mdc-theme-text-icon-on-light, rgba(0, 0, 0, 0.38)) !important}.mdc-theme--text-primary-on-dark{color:white  !important;color:var(--mdc-theme-text-primary-on-dark, white) !important}.mdc-theme--text-secondary-on-dark{color:rgba(255, 255, 255, 0.7)  !important;color:var(--mdc-theme-text-secondary-on-dark, rgba(255, 255, 255, 0.7)) !important}.mdc-theme--text-hint-on-dark{color:rgba(255, 255, 255, 0.5)  !important;color:var(--mdc-theme-text-hint-on-dark, rgba(255, 255, 255, 0.5)) !important}.mdc-theme--text-disabled-on-dark{color:rgba(255, 255, 255, 0.5)  !important;color:var(--mdc-theme-text-disabled-on-dark, rgba(255, 255, 255, 0.5)) !important}.mdc-theme--text-icon-on-dark{color:rgba(255, 255, 255, 0.5)  !important;color:var(--mdc-theme-text-icon-on-dark, rgba(255, 255, 255, 0.5)) !important}.mdc-theme--primary-bg{background-color:#5865F2  !important;background-color:var(--mdc-theme-primary, #5865F2) !important}.mdc-theme--secondary-bg{background-color:#5865F2  !important;background-color:var(--mdc-theme-secondary, #5865F2) !important}.mdc-typography{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-font-family, Roboto, sans-serif)}.mdc-typography--headline1{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-headline1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:6rem;font-size:var(--mdc-typography-headline1-font-size, 6rem);line-height:6rem;line-height:var(--mdc-typography-headline1-line-height, 6rem);font-weight:300;font-weight:var(--mdc-typography-headline1-font-weight, 300);letter-spacing:-0.015625em;letter-spacing:var(--mdc-typography-headline1-letter-spacing, -0.015625em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-headline1-text-decoration, inherit);text-decoration:var(--mdc-typography-headline1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-headline1-text-transform, inherit)}.mdc-typography--headline2{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-headline2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:3.75rem;font-size:var(--mdc-typography-headline2-font-size, 3.75rem);line-height:3.75rem;line-height:var(--mdc-typography-headline2-line-height, 3.75rem);font-weight:300;font-weight:var(--mdc-typography-headline2-font-weight, 300);letter-spacing:-0.0083333333em;letter-spacing:var(--mdc-typography-headline2-letter-spacing, -0.0083333333em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-headline2-text-decoration, inherit);text-decoration:var(--mdc-typography-headline2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-headline2-text-transform, inherit)}.mdc-typography--headline3{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-headline3-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:3rem;font-size:var(--mdc-typography-headline3-font-size, 3rem);line-height:3.125rem;line-height:var(--mdc-typography-headline3-line-height, 3.125rem);font-weight:400;font-weight:var(--mdc-typography-headline3-font-weight, 400);letter-spacing:normal;letter-spacing:var(--mdc-typography-headline3-letter-spacing, normal);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-headline3-text-decoration, inherit);text-decoration:var(--mdc-typography-headline3-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-headline3-text-transform, inherit)}.mdc-typography--headline4{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-headline4-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:2.125rem;font-size:var(--mdc-typography-headline4-font-size, 2.125rem);line-height:2.5rem;line-height:var(--mdc-typography-headline4-line-height, 2.5rem);font-weight:400;font-weight:var(--mdc-typography-headline4-font-weight, 400);letter-spacing:0.0073529412em;letter-spacing:var(--mdc-typography-headline4-letter-spacing, 0.0073529412em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-headline4-text-decoration, inherit);text-decoration:var(--mdc-typography-headline4-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-headline4-text-transform, inherit)}.mdc-typography--headline5{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-headline5-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1.5rem;font-size:var(--mdc-typography-headline5-font-size, 1.5rem);line-height:2rem;line-height:var(--mdc-typography-headline5-line-height, 2rem);font-weight:400;font-weight:var(--mdc-typography-headline5-font-weight, 400);letter-spacing:normal;letter-spacing:var(--mdc-typography-headline5-letter-spacing, normal);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-headline5-text-decoration, inherit);text-decoration:var(--mdc-typography-headline5-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-headline5-text-transform, inherit)}.mdc-typography--headline6{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-headline6-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1.25rem;font-size:var(--mdc-typography-headline6-font-size, 1.25rem);line-height:2rem;line-height:var(--mdc-typography-headline6-line-height, 2rem);font-weight:500;font-weight:var(--mdc-typography-headline6-font-weight, 500);letter-spacing:0.0125em;letter-spacing:var(--mdc-typography-headline6-letter-spacing, 0.0125em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-headline6-text-decoration, inherit);text-decoration:var(--mdc-typography-headline6-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-headline6-text-transform, inherit)}.mdc-typography--subtitle1{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);line-height:1.75rem;line-height:var(--mdc-typography-subtitle1-line-height, 1.75rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:0.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit)}.mdc-typography--subtitle2{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-subtitle2-font-size, 0.875rem);line-height:1.375rem;line-height:var(--mdc-typography-subtitle2-line-height, 1.375rem);font-weight:500;font-weight:var(--mdc-typography-subtitle2-font-weight, 500);letter-spacing:0.0071428571em;letter-spacing:var(--mdc-typography-subtitle2-letter-spacing, 0.0071428571em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-subtitle2-text-decoration, inherit);text-decoration:var(--mdc-typography-subtitle2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle2-text-transform, inherit)}.mdc-typography--body1{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-body1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-body1-font-size, 1rem);line-height:1.5rem;line-height:var(--mdc-typography-body1-line-height, 1.5rem);font-weight:400;font-weight:var(--mdc-typography-body1-font-weight, 400);letter-spacing:0.03125em;letter-spacing:var(--mdc-typography-body1-letter-spacing, 0.03125em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-body1-text-decoration, inherit);text-decoration:var(--mdc-typography-body1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-body1-text-transform, inherit)}.mdc-typography--body2{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-body2-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-body2-font-size, 0.875rem);line-height:1.25rem;line-height:var(--mdc-typography-body2-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-body2-font-weight, 400);letter-spacing:0.0178571429em;letter-spacing:var(--mdc-typography-body2-letter-spacing, 0.0178571429em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-decoration:var(--mdc-typography-body2-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-body2-text-transform, inherit)}.mdc-typography--caption{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-caption-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.75rem;font-size:var(--mdc-typography-caption-font-size, 0.75rem);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight, 400);letter-spacing:0.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing, 0.0333333333em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform, inherit)}.mdc-typography--button{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);line-height:2.25rem;line-height:var(--mdc-typography-button-line-height, 2.25rem);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);text-decoration:none;-webkit-text-decoration:var(--mdc-typography-button-text-decoration, none);text-decoration:var(--mdc-typography-button-text-decoration, none);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase)}.mdc-typography--overline{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-overline-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.75rem;font-size:var(--mdc-typography-overline-font-size, 0.75rem);line-height:2rem;line-height:var(--mdc-typography-overline-line-height, 2rem);font-weight:500;font-weight:var(--mdc-typography-overline-font-weight, 500);letter-spacing:0.1666666667em;letter-spacing:var(--mdc-typography-overline-letter-spacing, 0.1666666667em);text-decoration:none;-webkit-text-decoration:var(--mdc-typography-overline-text-decoration, none);text-decoration:var(--mdc-typography-overline-text-decoration, none);text-transform:uppercase;text-transform:var(--mdc-typography-overline-text-transform, uppercase)}.mdc-touch-target-wrapper{display:inline}.mdc-elevation-overlay{position:absolute;border-radius:inherit;pointer-events:none;opacity:0;opacity:var(--mdc-elevation-overlay-opacity, 0);transition:opacity 280ms cubic-bezier(0.4, 0, 0.2, 1);background-color:#fff;background-color:var(--mdc-elevation-overlay-color, #fff)}.mdc-button{position:relative;display:inline-flex;align-items:center;justify-content:center;box-sizing:border-box;min-width:64px;border:none;outline:none;line-height:inherit;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-webkit-appearance:none;overflow:visible;vertical-align:middle;background:transparent}.mdc-button .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-button::-moz-focus-inner{padding:0;border:0}.mdc-button:active{outline:none}.mdc-button:hover{cursor:pointer}.mdc-button:disabled{cursor:default;pointer-events:none}.mdc-button .mdc-button__icon{margin-left:0;margin-right:8px;display:inline-block;position:relative;vertical-align:top}[dir=rtl] .mdc-button .mdc-button__icon,.mdc-button .mdc-button__icon[dir=rtl]{margin-left:8px;margin-right:0}.mdc-button .mdc-button__touch{position:absolute;top:50%;height:48px;left:0;right:0;transform:translateY(-50%)}.mdc-button__label+.mdc-button__icon{margin-left:8px;margin-right:0}[dir=rtl] .mdc-button__label+.mdc-button__icon,.mdc-button__label+.mdc-button__icon[dir=rtl]{margin-left:0;margin-right:8px}svg.mdc-button__icon{fill:currentColor}.mdc-button--raised .mdc-button__icon,.mdc-button--unelevated .mdc-button__icon,.mdc-button--outlined .mdc-button__icon{margin-left:-4px;margin-right:8px}[dir=rtl] .mdc-button--raised .mdc-button__icon,[dir=rtl] .mdc-button--unelevated .mdc-button__icon,[dir=rtl] .mdc-button--outlined .mdc-button__icon,.mdc-button--raised .mdc-button__icon[dir=rtl],.mdc-button--unelevated .mdc-button__icon[dir=rtl],.mdc-button--outlined .mdc-button__icon[dir=rtl]{margin-left:8px;margin-right:-4px}.mdc-button--raised .mdc-button__label+.mdc-button__icon,.mdc-button--unelevated .mdc-button__label+.mdc-button__icon,.mdc-button--outlined .mdc-button__label+.mdc-button__icon{margin-left:8px;margin-right:-4px}[dir=rtl] .mdc-button--raised .mdc-button__label+.mdc-button__icon,[dir=rtl] .mdc-button--unelevated .mdc-button__label+.mdc-button__icon,[dir=rtl] .mdc-button--outlined .mdc-button__label+.mdc-button__icon,.mdc-button--raised .mdc-button__label+.mdc-button__icon[dir=rtl],.mdc-button--unelevated .mdc-button__label+.mdc-button__icon[dir=rtl],.mdc-button--outlined .mdc-button__label+.mdc-button__icon[dir=rtl]{margin-left:-4px;margin-right:8px}.mdc-button--touch{margin-top:6px;margin-bottom:6px}.mdc-button{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));text-decoration:none;-webkit-text-decoration:var(--mdc-typography-button-text-decoration, none);text-decoration:var(--mdc-typography-button-text-decoration, none)}@-webkit-keyframes mdc-ripple-fg-radius-in{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@keyframes mdc-ripple-fg-radius-in{from{-webkit-animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);animation-timing-function:cubic-bezier(0.4, 0, 0.2, 1);transform:translate(var(--mdc-ripple-fg-translate-start, 0)) scale(1)}to{transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}}@-webkit-keyframes mdc-ripple-fg-opacity-in{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@keyframes mdc-ripple-fg-opacity-in{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:0}to{opacity:var(--mdc-ripple-fg-opacity, 0)}}@-webkit-keyframes mdc-ripple-fg-opacity-out{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}@keyframes mdc-ripple-fg-opacity-out{from{-webkit-animation-timing-function:linear;animation-timing-function:linear;opacity:var(--mdc-ripple-fg-opacity, 0)}to{opacity:0}}.mdc-button{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity}.mdc-button .mdc-button__ripple::before,.mdc-button .mdc-button__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-button .mdc-button__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index, 1)}.mdc-button .mdc-button__ripple::after{z-index:0;z-index:var(--mdc-ripple-z-index, 0)}.mdc-button.mdc-ripple-upgraded .mdc-button__ripple::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-button.mdc-ripple-upgraded .mdc-button__ripple::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-button.mdc-ripple-upgraded--unbounded .mdc-button__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-button.mdc-ripple-upgraded--foreground-activation .mdc-button__ripple::after{-webkit-animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards;animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-button.mdc-ripple-upgraded--foreground-deactivation .mdc-button__ripple::after{-webkit-animation:mdc-ripple-fg-opacity-out 150ms;animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-button .mdc-button__ripple::before,.mdc-button .mdc-button__ripple::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-button.mdc-ripple-upgraded .mdc-button__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-button .mdc-button__ripple{position:absolute;box-sizing:content-box;width:100%;height:100%;overflow:hidden}.mdc-button:not(.mdc-button--outlined) .mdc-button__ripple{top:0;left:0}.mdc-button--raised{transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-button--outlined{border-style:solid}.mdc-button{font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);height:36px;border-radius:4px;border-radius:var(--mdc-shape-small, 4px);padding:0 8px 0 8px}.mdc-button:not(:disabled){color:#5865F2;color:var(--mdc-theme-primary, #5865F2)}.mdc-button:disabled{color:rgba(0, 0, 0, 0.38)}.mdc-button .mdc-button__icon{font-size:1.125rem;height:1.125rem;width:1.125rem}.mdc-button .mdc-button__ripple::before,.mdc-button .mdc-button__ripple::after{background-color:#5865F2;background-color:var(--mdc-ripple-color, var(--mdc-theme-primary, #5865F2))}.mdc-button:hover .mdc-button__ripple::before,.mdc-button.mdc-ripple-surface--hover .mdc-button__ripple::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-button.mdc-ripple-upgraded--background-focused .mdc-button__ripple::before,.mdc-button:not(.mdc-ripple-upgraded):focus .mdc-button__ripple::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-button:not(.mdc-ripple-upgraded) .mdc-button__ripple::after{transition:opacity 150ms linear}.mdc-button:not(.mdc-ripple-upgraded):active .mdc-button__ripple::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-button.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-button .mdc-button__ripple{border-radius:4px;border-radius:var(--mdc-shape-small, 4px)}.mdc-button--unelevated{padding:0 16px 0 16px;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);height:36px;border-radius:4px;border-radius:var(--mdc-shape-small, 4px)}.mdc-button--unelevated.mdc-button--icon-trailing{padding:0 12px 0 16px}.mdc-button--unelevated.mdc-button--icon-leading{padding:0 16px 0 12px}.mdc-button--unelevated:not(:disabled){background-color:#5865F2;background-color:var(--mdc-theme-primary, #5865F2)}.mdc-button--unelevated:disabled{background-color:rgba(0, 0, 0, 0.12)}.mdc-button--unelevated:not(:disabled){color:#000;color:var(--mdc-theme-on-primary, #000)}.mdc-button--unelevated:disabled{color:rgba(0, 0, 0, 0.38)}.mdc-button--unelevated .mdc-button__icon{font-size:1.125rem;height:1.125rem;width:1.125rem}.mdc-button--unelevated .mdc-button__ripple::before,.mdc-button--unelevated .mdc-button__ripple::after{background-color:#000;background-color:var(--mdc-ripple-color, var(--mdc-theme-on-primary, #000))}.mdc-button--unelevated:hover .mdc-button__ripple::before,.mdc-button--unelevated.mdc-ripple-surface--hover .mdc-button__ripple::before{opacity:0.08;opacity:var(--mdc-ripple-hover-opacity, 0.08)}.mdc-button--unelevated.mdc-ripple-upgraded--background-focused .mdc-button__ripple::before,.mdc-button--unelevated:not(.mdc-ripple-upgraded):focus .mdc-button__ripple::before{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-focus-opacity, 0.24)}.mdc-button--unelevated:not(.mdc-ripple-upgraded) .mdc-button__ripple::after{transition:opacity 150ms linear}.mdc-button--unelevated:not(.mdc-ripple-upgraded):active .mdc-button__ripple::after{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-press-opacity, 0.24)}.mdc-button--unelevated.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.24)}.mdc-button--unelevated .mdc-button__ripple{border-radius:4px;border-radius:var(--mdc-shape-small, 4px)}.mdc-button--raised{padding:0 16px 0 16px;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);height:36px;border-radius:4px;border-radius:var(--mdc-shape-small, 4px);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2),0px 2px 2px 0px rgba(0, 0, 0, 0.14),0px 1px 5px 0px rgba(0,0,0,.12)}.mdc-button--raised.mdc-button--icon-trailing{padding:0 12px 0 16px}.mdc-button--raised.mdc-button--icon-leading{padding:0 16px 0 12px}.mdc-button--raised:not(:disabled){background-color:#5865F2;background-color:var(--mdc-theme-primary, #5865F2)}.mdc-button--raised:disabled{background-color:rgba(0, 0, 0, 0.12)}.mdc-button--raised:not(:disabled){color:#000;color:var(--mdc-theme-on-primary, #000)}.mdc-button--raised:disabled{color:rgba(0, 0, 0, 0.38)}.mdc-button--raised .mdc-button__icon{font-size:1.125rem;height:1.125rem;width:1.125rem}.mdc-button--raised .mdc-button__ripple::before,.mdc-button--raised .mdc-button__ripple::after{background-color:#000;background-color:var(--mdc-ripple-color, var(--mdc-theme-on-primary, #000))}.mdc-button--raised:hover .mdc-button__ripple::before,.mdc-button--raised.mdc-ripple-surface--hover .mdc-button__ripple::before{opacity:0.08;opacity:var(--mdc-ripple-hover-opacity, 0.08)}.mdc-button--raised.mdc-ripple-upgraded--background-focused .mdc-button__ripple::before,.mdc-button--raised:not(.mdc-ripple-upgraded):focus .mdc-button__ripple::before{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-focus-opacity, 0.24)}.mdc-button--raised:not(.mdc-ripple-upgraded) .mdc-button__ripple::after{transition:opacity 150ms linear}.mdc-button--raised:not(.mdc-ripple-upgraded):active .mdc-button__ripple::after{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-press-opacity, 0.24)}.mdc-button--raised.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.24)}.mdc-button--raised .mdc-button__ripple{border-radius:4px;border-radius:var(--mdc-shape-small, 4px)}.mdc-button--raised.mdc-ripple-upgraded--background-focused,.mdc-button--raised:not(.mdc-ripple-upgraded):focus{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0,0,0,.12)}.mdc-button--raised:hover{box-shadow:0px 2px 4px -1px rgba(0, 0, 0, 0.2),0px 4px 5px 0px rgba(0, 0, 0, 0.14),0px 1px 10px 0px rgba(0,0,0,.12)}.mdc-button--raised:not(:disabled):active{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0,0,0,.12)}.mdc-button--raised:disabled{box-shadow:0px 0px 0px 0px rgba(0, 0, 0, 0.2),0px 0px 0px 0px rgba(0, 0, 0, 0.14),0px 0px 0px 0px rgba(0,0,0,.12)}.mdc-button--outlined{font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);height:36px;border-radius:4px;border-radius:var(--mdc-shape-small, 4px);padding:0 15px 0 15px;border-width:1px}.mdc-button--outlined:not(:disabled){color:#5865F2;color:var(--mdc-theme-primary, #5865F2)}.mdc-button--outlined:disabled{color:rgba(0, 0, 0, 0.38)}.mdc-button--outlined .mdc-button__icon{font-size:1.125rem;height:1.125rem;width:1.125rem}.mdc-button--outlined .mdc-button__ripple::before,.mdc-button--outlined .mdc-button__ripple::after{background-color:#5865F2;background-color:var(--mdc-ripple-color, var(--mdc-theme-primary, #5865F2))}.mdc-button--outlined:hover .mdc-button__ripple::before,.mdc-button--outlined.mdc-ripple-surface--hover .mdc-button__ripple::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-button--outlined.mdc-ripple-upgraded--background-focused .mdc-button__ripple::before,.mdc-button--outlined:not(.mdc-ripple-upgraded):focus .mdc-button__ripple::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-button--outlined:not(.mdc-ripple-upgraded) .mdc-button__ripple::after{transition:opacity 150ms linear}.mdc-button--outlined:not(.mdc-ripple-upgraded):active .mdc-button__ripple::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-button--outlined.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-button--outlined .mdc-button__ripple{border-radius:4px;border-radius:var(--mdc-shape-small, 4px)}.mdc-button--outlined:not(:disabled){border-color:rgba(0, 0, 0, 0.12)}.mdc-button--outlined:disabled{border-color:rgba(0, 0, 0, 0.12)}.mdc-button--outlined.mdc-button--icon-trailing{padding:0 11px 0 15px}.mdc-button--outlined.mdc-button--icon-leading{padding:0 15px 0 11px}.mdc-button--outlined .mdc-button__ripple{top:-1px;left:-1px;border:1px solid transparent}.mdc-button--outlined .mdc-button__touch{left:-1px;width:calc(100% + 2 * 1px)}.mdc-floating-label{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:0.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);position:absolute;left:0;transform-origin:left top;line-height:1.15rem;text-align:left;text-overflow:ellipsis;white-space:nowrap;cursor:text;overflow:hidden;will-change:transform;transition:transform 150ms cubic-bezier(0.4, 0, 0.2, 1),color 150ms cubic-bezier(0.4, 0, 0.2, 1)}[dir=rtl] .mdc-floating-label,.mdc-floating-label[dir=rtl]{right:0;left:auto;transform-origin:right top;text-align:right}.mdc-floating-label--float-above{cursor:auto}.mdc-floating-label--required::after{margin-left:1px;margin-right:0px;content:"*"}[dir=rtl] .mdc-floating-label--required::after,.mdc-floating-label--required[dir=rtl]::after{margin-left:0;margin-right:1px}.mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-floating-label--shake{-webkit-animation:mdc-floating-label-shake-float-above-standard 250ms 1;animation:mdc-floating-label-shake-float-above-standard 250ms 1}@-webkit-keyframes mdc-floating-label-shake-float-above-standard{0%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-106%) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-106%) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-standard{0%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-106%) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-106%) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-106%) scale(0.75)}}.mdc-line-ripple::before,.mdc-line-ripple::after{position:absolute;bottom:0;left:0;width:100%;border-bottom-style:solid;content:""}.mdc-line-ripple::before{border-bottom-width:1px;z-index:1}.mdc-line-ripple::after{transform:scaleX(0);border-bottom-width:2px;opacity:0;z-index:2}.mdc-line-ripple::after{transition:transform 180ms cubic-bezier(0.4, 0, 0.2, 1),opacity 180ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-line-ripple--active::after{transform:scaleX(1);opacity:1}.mdc-line-ripple--deactivating::after{opacity:0}.mdc-notched-outline{display:flex;position:absolute;top:0;right:0;left:0;box-sizing:border-box;width:100%;max-width:100%;height:100%;text-align:left;pointer-events:none}[dir=rtl] .mdc-notched-outline,.mdc-notched-outline[dir=rtl]{text-align:right}.mdc-notched-outline__leading,.mdc-notched-outline__notch,.mdc-notched-outline__trailing{box-sizing:border-box;height:100%;border-top:1px solid;border-bottom:1px solid;pointer-events:none}.mdc-notched-outline__leading{border-left:1px solid;border-right:none;width:12px}[dir=rtl] .mdc-notched-outline__leading,.mdc-notched-outline__leading[dir=rtl]{border-left:none;border-right:1px solid}.mdc-notched-outline__trailing{border-left:none;border-right:1px solid;flex-grow:1}[dir=rtl] .mdc-notched-outline__trailing,.mdc-notched-outline__trailing[dir=rtl]{border-left:1px solid;border-right:none}.mdc-notched-outline__notch{flex:0 0 auto;width:auto;max-width:calc(100% - 12px * 2)}.mdc-notched-outline .mdc-floating-label{display:inline-block;position:relative;max-width:100%}.mdc-notched-outline .mdc-floating-label--float-above{text-overflow:clip}.mdc-notched-outline--upgraded .mdc-floating-label--float-above{max-width:calc(100% / 0.75)}.mdc-notched-outline--notched .mdc-notched-outline__notch{padding-left:0;padding-right:8px;border-top:none}[dir=rtl] .mdc-notched-outline--notched .mdc-notched-outline__notch,.mdc-notched-outline--notched .mdc-notched-outline__notch[dir=rtl]{padding-left:8px;padding-right:0}.mdc-notched-outline--no-label .mdc-notched-outline__notch{display:none}.mdc-fab{position:relative;display:inline-flex;position:relative;align-items:center;justify-content:center;box-sizing:border-box;width:56px;height:56px;padding:0;border:none;fill:currentColor;text-decoration:none;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;-moz-appearance:none;-webkit-appearance:none;overflow:visible;transition:box-shadow 280ms cubic-bezier(0.4, 0, 0.2, 1),opacity 15ms linear 30ms,transform 270ms 0ms cubic-bezier(0, 0, 0.2, 1)}.mdc-fab .mdc-elevation-overlay{width:100%;height:100%;top:0;left:0}.mdc-fab::-moz-focus-inner{padding:0;border:0}.mdc-fab:hover{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0,0,0,.12)}.mdc-fab.mdc-ripple-upgraded--background-focused,.mdc-fab:not(.mdc-ripple-upgraded):focus{box-shadow:0px 5px 5px -3px rgba(0, 0, 0, 0.2),0px 8px 10px 1px rgba(0, 0, 0, 0.14),0px 3px 14px 2px rgba(0,0,0,.12)}.mdc-fab:active,.mdc-fab:focus:active{box-shadow:0px 7px 8px -4px rgba(0, 0, 0, 0.2),0px 12px 17px 2px rgba(0, 0, 0, 0.14),0px 5px 22px 4px rgba(0,0,0,.12)}.mdc-fab:active,.mdc-fab:focus{outline:none}.mdc-fab:hover{cursor:pointer}.mdc-fab>svg{width:100%}.mdc-fab--mini{width:40px;height:40px}.mdc-fab--extended{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-button-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.875rem;font-size:var(--mdc-typography-button-font-size, 0.875rem);line-height:2.25rem;line-height:var(--mdc-typography-button-line-height, 2.25rem);font-weight:500;font-weight:var(--mdc-typography-button-font-weight, 500);letter-spacing:0.0892857143em;letter-spacing:var(--mdc-typography-button-letter-spacing, 0.0892857143em);text-decoration:none;-webkit-text-decoration:var(--mdc-typography-button-text-decoration, none);text-decoration:var(--mdc-typography-button-text-decoration, none);text-transform:uppercase;text-transform:var(--mdc-typography-button-text-transform, uppercase);border-radius:24px;padding-left:20px;padding-right:20px;width:auto;max-width:100%;height:48px;line-height:normal}.mdc-fab--extended .mdc-fab__ripple{border-radius:24px}.mdc-fab--extended .mdc-fab__icon{margin-left:calc(12px - 20px);margin-right:12px}[dir=rtl] .mdc-fab--extended .mdc-fab__icon,.mdc-fab--extended .mdc-fab__icon[dir=rtl]{margin-left:12px;margin-right:calc(12px - 20px)}.mdc-fab--extended .mdc-fab__label+.mdc-fab__icon{margin-left:12px;margin-right:calc(12px - 20px)}[dir=rtl] .mdc-fab--extended .mdc-fab__label+.mdc-fab__icon,.mdc-fab--extended .mdc-fab__label+.mdc-fab__icon[dir=rtl]{margin-left:calc(12px - 20px);margin-right:12px}.mdc-fab--touch{margin-top:4px;margin-bottom:4px;margin-right:4px;margin-left:4px}.mdc-fab--touch .mdc-fab__touch{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}.mdc-fab::before{position:absolute;box-sizing:border-box;width:100%;height:100%;top:0;left:0;border:1px solid transparent;border-radius:inherit;content:"";pointer-events:none}.mdc-fab__label{justify-content:flex-start;text-overflow:ellipsis;white-space:nowrap;overflow-x:hidden;overflow-y:visible}.mdc-fab__icon{transition:transform 180ms 90ms cubic-bezier(0, 0, 0.2, 1);fill:currentColor;will-change:transform}.mdc-fab .mdc-fab__icon{display:inline-flex;align-items:center;justify-content:center}.mdc-fab--exited{transform:scale(0);opacity:0;transition:opacity 15ms linear 150ms,transform 180ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mdc-fab--exited .mdc-fab__icon{transform:scale(0);transition:transform 135ms 0ms cubic-bezier(0.4, 0, 1, 1)}.mdc-fab{background-color:#5865F2;background-color:var(--mdc-theme-secondary, #5865F2);box-shadow:0px 3px 5px -1px rgba(0, 0, 0, 0.2),0px 6px 10px 0px rgba(0, 0, 0, 0.14),0px 1px 18px 0px rgba(0,0,0,.12)}.mdc-fab .mdc-fab__icon{width:24px;height:24px;font-size:24px}.mdc-fab,.mdc-fab:not(:disabled) .mdc-fab__icon,.mdc-fab:not(:disabled) .mdc-fab__label,.mdc-fab:disabled .mdc-fab__icon,.mdc-fab:disabled .mdc-fab__label{color:#fff;color:var(--mdc-theme-on-secondary, #fff)}.mdc-fab:not(.mdc-fab--extended){border-radius:50%}.mdc-fab:not(.mdc-fab--extended) .mdc-fab__ripple{border-radius:50%}.mdc-fab{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity}.mdc-fab .mdc-fab__ripple::before,.mdc-fab .mdc-fab__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-fab .mdc-fab__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index, 1)}.mdc-fab .mdc-fab__ripple::after{z-index:0;z-index:var(--mdc-ripple-z-index, 0)}.mdc-fab.mdc-ripple-upgraded .mdc-fab__ripple::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-fab.mdc-ripple-upgraded .mdc-fab__ripple::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-fab.mdc-ripple-upgraded--unbounded .mdc-fab__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-fab.mdc-ripple-upgraded--foreground-activation .mdc-fab__ripple::after{-webkit-animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards;animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-fab.mdc-ripple-upgraded--foreground-deactivation .mdc-fab__ripple::after{-webkit-animation:mdc-ripple-fg-opacity-out 150ms;animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-fab .mdc-fab__ripple::before,.mdc-fab .mdc-fab__ripple::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-fab.mdc-ripple-upgraded .mdc-fab__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-fab .mdc-fab__ripple::before,.mdc-fab .mdc-fab__ripple::after{background-color:#fff;background-color:var(--mdc-ripple-color, var(--mdc-theme-on-secondary, #fff))}.mdc-fab:hover .mdc-fab__ripple::before,.mdc-fab.mdc-ripple-surface--hover .mdc-fab__ripple::before{opacity:0.08;opacity:var(--mdc-ripple-hover-opacity, 0.08)}.mdc-fab.mdc-ripple-upgraded--background-focused .mdc-fab__ripple::before,.mdc-fab:not(.mdc-ripple-upgraded):focus .mdc-fab__ripple::before{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-focus-opacity, 0.24)}.mdc-fab:not(.mdc-ripple-upgraded) .mdc-fab__ripple::after{transition:opacity 150ms linear}.mdc-fab:not(.mdc-ripple-upgraded):active .mdc-fab__ripple::after{transition-duration:75ms;opacity:0.24;opacity:var(--mdc-ripple-press-opacity, 0.24)}.mdc-fab.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.24)}.mdc-fab .mdc-fab__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none;overflow:hidden}.mdc-fab{z-index:0}.mdc-fab .mdc-fab__ripple::before,.mdc-fab .mdc-fab__ripple::after{z-index:-1;z-index:var(--mdc-ripple-z-index, -1)}.mdc-icon-button{display:inline-block;position:relative;box-sizing:border-box;border:none;outline:none;background-color:transparent;fill:currentColor;color:inherit;font-size:24px;text-decoration:none;cursor:pointer;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none;width:48px;height:48px;padding:12px}.mdc-icon-button svg,.mdc-icon-button img{width:24px;height:24px}.mdc-icon-button:disabled{color:rgba(0, 0, 0, 0.38);color:var(--mdc-theme-text-disabled-on-light, rgba(0, 0, 0, 0.38))}.mdc-icon-button:disabled{cursor:default;pointer-events:none}.mdc-icon-button .mdc-icon-button__touch{position:absolute;top:50%;height:48px;left:50%;width:48px;transform:translate(-50%, -50%)}.mdc-icon-button__icon{display:inline-block}.mdc-icon-button__icon.mdc-icon-button__icon--on{display:none}.mdc-icon-button--on .mdc-icon-button__icon{display:none}.mdc-icon-button--on .mdc-icon-button__icon.mdc-icon-button__icon--on{display:inline-block}.mdc-icon-button--touch{margin-top:0px;margin-bottom:0px}.mdc-icon-button{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity}.mdc-icon-button .mdc-icon-button__ripple::before,.mdc-icon-button .mdc-icon-button__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-icon-button .mdc-icon-button__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index, 1)}.mdc-icon-button .mdc-icon-button__ripple::after{z-index:0;z-index:var(--mdc-ripple-z-index, 0)}.mdc-icon-button.mdc-ripple-upgraded .mdc-icon-button__ripple::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-icon-button.mdc-ripple-upgraded .mdc-icon-button__ripple::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-icon-button.mdc-ripple-upgraded--unbounded .mdc-icon-button__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-icon-button.mdc-ripple-upgraded--foreground-activation .mdc-icon-button__ripple::after{-webkit-animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards;animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-icon-button.mdc-ripple-upgraded--foreground-deactivation .mdc-icon-button__ripple::after{-webkit-animation:mdc-ripple-fg-opacity-out 150ms;animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-icon-button .mdc-icon-button__ripple::before,.mdc-icon-button .mdc-icon-button__ripple::after{top:calc(50% - 50%);left:calc(50% - 50%);width:100%;height:100%}.mdc-icon-button.mdc-ripple-upgraded .mdc-icon-button__ripple::before,.mdc-icon-button.mdc-ripple-upgraded .mdc-icon-button__ripple::after{top:var(--mdc-ripple-top, calc(50% - 50%));left:var(--mdc-ripple-left, calc(50% - 50%));width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-icon-button.mdc-ripple-upgraded .mdc-icon-button__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-icon-button .mdc-icon-button__ripple::before,.mdc-icon-button .mdc-icon-button__ripple::after{background-color:#000;background-color:var(--mdc-ripple-color, #000)}.mdc-icon-button:hover .mdc-icon-button__ripple::before,.mdc-icon-button.mdc-ripple-surface--hover .mdc-icon-button__ripple::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-icon-button.mdc-ripple-upgraded--background-focused .mdc-icon-button__ripple::before,.mdc-icon-button:not(.mdc-ripple-upgraded):focus .mdc-icon-button__ripple::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-icon-button:not(.mdc-ripple-upgraded) .mdc-icon-button__ripple::after{transition:opacity 150ms linear}.mdc-icon-button:not(.mdc-ripple-upgraded):active .mdc-icon-button__ripple::after{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-icon-button.mdc-ripple-upgraded{--mdc-ripple-fg-opacity:var(--mdc-ripple-press-opacity, 0.12)}.mdc-icon-button .mdc-icon-button__ripple{pointer-events:none;z-index:1}.mdc-text-field--filled{--mdc-ripple-fg-size: 0;--mdc-ripple-left: 0;--mdc-ripple-top: 0;--mdc-ripple-fg-scale: 1;--mdc-ripple-fg-translate-end: 0;--mdc-ripple-fg-translate-start: 0;-webkit-tap-highlight-color:rgba(0,0,0,0);will-change:transform,opacity}.mdc-text-field--filled .mdc-text-field__ripple::before,.mdc-text-field--filled .mdc-text-field__ripple::after{position:absolute;border-radius:50%;opacity:0;pointer-events:none;content:""}.mdc-text-field--filled .mdc-text-field__ripple::before{transition:opacity 15ms linear,background-color 15ms linear;z-index:1;z-index:var(--mdc-ripple-z-index, 1)}.mdc-text-field--filled .mdc-text-field__ripple::after{z-index:0;z-index:var(--mdc-ripple-z-index, 0)}.mdc-text-field--filled.mdc-ripple-upgraded .mdc-text-field__ripple::before{transform:scale(var(--mdc-ripple-fg-scale, 1))}.mdc-text-field--filled.mdc-ripple-upgraded .mdc-text-field__ripple::after{top:0;left:0;transform:scale(0);transform-origin:center center}.mdc-text-field--filled.mdc-ripple-upgraded--unbounded .mdc-text-field__ripple::after{top:var(--mdc-ripple-top, 0);left:var(--mdc-ripple-left, 0)}.mdc-text-field--filled.mdc-ripple-upgraded--foreground-activation .mdc-text-field__ripple::after{-webkit-animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards;animation:mdc-ripple-fg-radius-in 225ms forwards,mdc-ripple-fg-opacity-in 75ms forwards}.mdc-text-field--filled.mdc-ripple-upgraded--foreground-deactivation .mdc-text-field__ripple::after{-webkit-animation:mdc-ripple-fg-opacity-out 150ms;animation:mdc-ripple-fg-opacity-out 150ms;transform:translate(var(--mdc-ripple-fg-translate-end, 0)) scale(var(--mdc-ripple-fg-scale, 1))}.mdc-text-field--filled .mdc-text-field__ripple::before,.mdc-text-field--filled .mdc-text-field__ripple::after{top:calc(50% - 100%);left:calc(50% - 100%);width:200%;height:200%}.mdc-text-field--filled.mdc-ripple-upgraded .mdc-text-field__ripple::after{width:var(--mdc-ripple-fg-size, 100%);height:var(--mdc-ripple-fg-size, 100%)}.mdc-text-field__ripple{position:absolute;top:0;left:0;width:100%;height:100%;pointer-events:none}.mdc-text-field{border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small, 4px);border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small, 4px);border-bottom-right-radius:0;border-bottom-left-radius:0;display:inline-flex;align-items:baseline;padding:0 16px;position:relative;box-sizing:border-box;overflow:hidden;will-change:opacity,transform,color}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(0, 0, 0, 0.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input{color:rgba(0, 0, 0, 0.87)}@media all{.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input::-moz-placeholder{color:rgba(0, 0, 0, 0.54)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:rgba(0, 0, 0, 0.54)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input::placeholder{color:rgba(0, 0, 0, 0.54)}}@media all{.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__input:-ms-input-placeholder{color:rgba(0, 0, 0, 0.54)}}.mdc-text-field .mdc-text-field__input{caret-color:#5865F2;caret-color:var(--mdc-theme-primary, #5865F2)}.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0, 0, 0, 0.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field-character-counter,.mdc-text-field:not(.mdc-text-field--disabled)+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:rgba(0, 0, 0, 0.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon--leading{color:rgba(0, 0, 0, 0.54)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__icon--trailing{color:rgba(0, 0, 0, 0.54)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__affix--prefix{color:rgba(0, 0, 0, 0.6)}.mdc-text-field:not(.mdc-text-field--disabled) .mdc-text-field__affix--suffix{color:rgba(0, 0, 0, 0.6)}.mdc-text-field .mdc-floating-label{top:50%;transform:translateY(-50%);pointer-events:none}.mdc-text-field__input{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:0.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);height:28px;transition:opacity 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1);width:100%;min-width:0;border:none;border-radius:0;background:none;-webkit-appearance:none;-moz-appearance:none;appearance:none;padding:0}.mdc-text-field__input::-ms-clear{display:none}.mdc-text-field__input::-webkit-calendar-picker-indicator{display:none}.mdc-text-field__input:focus{outline:none}.mdc-text-field__input:invalid{box-shadow:none}@media all{.mdc-text-field__input::-moz-placeholder{-moz-transition:opacity 67ms 0ms cubic-bezier(0.4, 0, 0.2, 1);transition:opacity 67ms 0ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0}.mdc-text-field__input:-ms-input-placeholder{-ms-transition:opacity 67ms 0ms cubic-bezier(0.4, 0, 0.2, 1);transition:opacity 67ms 0ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0}.mdc-text-field__input::placeholder{transition:opacity 67ms 0ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0}}@media all{.mdc-text-field__input:-ms-input-placeholder{-ms-transition:opacity 67ms 0ms cubic-bezier(0.4, 0, 0.2, 1);transition:opacity 67ms 0ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0}}@media all{.mdc-text-field--no-label .mdc-text-field__input::-moz-placeholder, .mdc-text-field--focused .mdc-text-field__input::-moz-placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}.mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder, .mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}.mdc-text-field--no-label .mdc-text-field__input::placeholder,.mdc-text-field--focused .mdc-text-field__input::placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}}@media all{.mdc-text-field--no-label .mdc-text-field__input:-ms-input-placeholder,.mdc-text-field--focused .mdc-text-field__input:-ms-input-placeholder{transition-delay:40ms;transition-duration:110ms;opacity:1}}.mdc-text-field__affix{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-subtitle1-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:1rem;font-size:var(--mdc-typography-subtitle1-font-size, 1rem);font-weight:400;font-weight:var(--mdc-typography-subtitle1-font-weight, 400);letter-spacing:0.009375em;letter-spacing:var(--mdc-typography-subtitle1-letter-spacing, 0.009375em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-decoration:var(--mdc-typography-subtitle1-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-subtitle1-text-transform, inherit);height:28px;transition:opacity 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1);opacity:0;white-space:nowrap}.mdc-text-field--label-floating .mdc-text-field__affix,.mdc-text-field--no-label .mdc-text-field__affix{opacity:1}@supports(-webkit-hyphens: none){.mdc-text-field--outlined .mdc-text-field__affix{align-items:center;align-self:center;display:inline-flex;height:100%}}.mdc-text-field__affix--prefix{padding-left:0;padding-right:2px}[dir=rtl] .mdc-text-field__affix--prefix,.mdc-text-field__affix--prefix[dir=rtl]{padding-left:2px;padding-right:0}.mdc-text-field--end-aligned .mdc-text-field__affix--prefix{padding-left:0;padding-right:12px}[dir=rtl] .mdc-text-field--end-aligned .mdc-text-field__affix--prefix,.mdc-text-field--end-aligned .mdc-text-field__affix--prefix[dir=rtl]{padding-left:12px;padding-right:0}.mdc-text-field__affix--suffix{padding-left:12px;padding-right:0}[dir=rtl] .mdc-text-field__affix--suffix,.mdc-text-field__affix--suffix[dir=rtl]{padding-left:0;padding-right:12px}.mdc-text-field--end-aligned .mdc-text-field__affix--suffix{padding-left:2px;padding-right:0}[dir=rtl] .mdc-text-field--end-aligned .mdc-text-field__affix--suffix,.mdc-text-field--end-aligned .mdc-text-field__affix--suffix[dir=rtl]{padding-left:0;padding-right:2px}.mdc-text-field--filled{height:56px}.mdc-text-field--filled .mdc-text-field__ripple::before,.mdc-text-field--filled .mdc-text-field__ripple::after{background-color:rgba(0, 0, 0, 0.87);background-color:var(--mdc-ripple-color, rgba(0, 0, 0, 0.87))}.mdc-text-field--filled:hover .mdc-text-field__ripple::before,.mdc-text-field--filled.mdc-ripple-surface--hover .mdc-text-field__ripple::before{opacity:0.04;opacity:var(--mdc-ripple-hover-opacity, 0.04)}.mdc-text-field--filled.mdc-ripple-upgraded--background-focused .mdc-text-field__ripple::before,.mdc-text-field--filled:not(.mdc-ripple-upgraded):focus .mdc-text-field__ripple::before{transition-duration:75ms;opacity:0.12;opacity:var(--mdc-ripple-focus-opacity, 0.12)}.mdc-text-field--filled::before{display:inline-block;width:0;height:40px;content:"";vertical-align:0}.mdc-text-field--filled:not(.mdc-text-field--disabled){background-color:whitesmoke}.mdc-text-field--filled:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:rgba(0, 0, 0, 0.42)}.mdc-text-field--filled:not(.mdc-text-field--disabled):hover .mdc-line-ripple::before{border-bottom-color:rgba(0, 0, 0, 0.87)}.mdc-text-field--filled .mdc-line-ripple::after{border-bottom-color:#5865F2;border-bottom-color:var(--mdc-theme-primary, #5865F2)}.mdc-text-field--filled .mdc-floating-label{left:16px;right:initial}[dir=rtl] .mdc-text-field--filled .mdc-floating-label,.mdc-text-field--filled .mdc-floating-label[dir=rtl]{left:initial;right:16px}.mdc-text-field--filled .mdc-floating-label--float-above{transform:translateY(-106%) scale(0.75)}.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__input{height:100%}.mdc-text-field--filled.mdc-text-field--no-label .mdc-floating-label{display:none}.mdc-text-field--filled.mdc-text-field--no-label::before{display:none}@supports(-webkit-hyphens: none){.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__affix{align-items:center;align-self:center;display:inline-flex;height:100%}}.mdc-text-field--outlined{height:56px;overflow:visible}.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) scale(1)}.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) scale(0.75)}.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--outlined .mdc-floating-label--shake{-webkit-animation:mdc-floating-label-shake-float-above-text-field-outlined 250ms 1;animation:mdc-floating-label-shake-float-above-text-field-outlined 250ms 1}@-webkit-keyframes mdc-floating-label-shake-float-above-text-field-outlined{0%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-34.75px) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined{0%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-34.75px) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-34.75px) scale(0.75)}}.mdc-text-field--outlined .mdc-text-field__input{height:100%}.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:rgba(0, 0, 0, 0.38)}.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing{border-color:rgba(0, 0, 0, 0.87)}.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--outlined:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#5865F2;border-color:var(--mdc-theme-primary, #5865F2)}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small, 4px);border-top-right-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:4px;border-bottom-left-radius:var(--mdc-shape-small, 4px)}[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading[dir=rtl]{border-top-left-radius:0;border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small, 4px);border-bottom-right-radius:4px;border-bottom-right-radius:var(--mdc-shape-small, 4px);border-bottom-left-radius:0}@supports(top: max(0%)){.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__leading{width:max(12px, var(--mdc-shape-small, 4px))}}@supports(top: max(0%)){.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__notch{max-width:calc(100% - max(12px, var(--mdc-shape-small, 4px)) * 2)}}.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing{border-top-left-radius:0;border-top-right-radius:4px;border-top-right-radius:var(--mdc-shape-small, 4px);border-bottom-right-radius:4px;border-bottom-right-radius:var(--mdc-shape-small, 4px);border-bottom-left-radius:0}[dir=rtl] .mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing,.mdc-text-field--outlined .mdc-notched-outline .mdc-notched-outline__trailing[dir=rtl]{border-top-left-radius:4px;border-top-left-radius:var(--mdc-shape-small, 4px);border-top-right-radius:0;border-bottom-right-radius:0;border-bottom-left-radius:4px;border-bottom-left-radius:var(--mdc-shape-small, 4px)}@supports(top: max(0%)){.mdc-text-field--outlined{padding-left:max(16px, calc(var(--mdc-shape-small, 4px) + 4px))}}@supports(top: max(0%)){.mdc-text-field--outlined{padding-right:max(16px, var(--mdc-shape-small, 4px))}}@supports(top: max(0%)){.mdc-text-field--outlined+.mdc-text-field-helper-line{padding-left:max(16px, calc(var(--mdc-shape-small, 4px) + 4px))}}@supports(top: max(0%)){.mdc-text-field--outlined+.mdc-text-field-helper-line{padding-right:max(16px, var(--mdc-shape-small, 4px))}}.mdc-text-field--outlined.mdc-text-field--with-leading-icon{padding-left:0}@supports(top: max(0%)){.mdc-text-field--outlined.mdc-text-field--with-leading-icon{padding-right:max(16px, var(--mdc-shape-small, 4px))}}[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-leading-icon,.mdc-text-field--outlined.mdc-text-field--with-leading-icon[dir=rtl]{padding-right:0}@supports(top: max(0%)){[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-leading-icon,.mdc-text-field--outlined.mdc-text-field--with-leading-icon[dir=rtl]{padding-left:max(16px, var(--mdc-shape-small, 4px))}}.mdc-text-field--outlined.mdc-text-field--with-trailing-icon{padding-right:0}@supports(top: max(0%)){.mdc-text-field--outlined.mdc-text-field--with-trailing-icon{padding-left:max(16px, calc(var(--mdc-shape-small, 4px) + 4px))}}[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-trailing-icon,.mdc-text-field--outlined.mdc-text-field--with-trailing-icon[dir=rtl]{padding-left:0}@supports(top: max(0%)){[dir=rtl] .mdc-text-field--outlined.mdc-text-field--with-trailing-icon,.mdc-text-field--outlined.mdc-text-field--with-trailing-icon[dir=rtl]{padding-right:max(16px, calc(var(--mdc-shape-small, 4px) + 4px))}}.mdc-text-field--outlined.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon{padding-left:0;padding-right:0}.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:1px}.mdc-text-field--outlined .mdc-text-field__ripple::before,.mdc-text-field--outlined .mdc-text-field__ripple::after{content:none}.mdc-text-field--outlined .mdc-floating-label{left:4px;right:initial}[dir=rtl] .mdc-text-field--outlined .mdc-floating-label,.mdc-text-field--outlined .mdc-floating-label[dir=rtl]{left:initial;right:4px}.mdc-text-field--outlined .mdc-text-field__input{display:flex;border:none !important;background-color:transparent}.mdc-text-field--outlined .mdc-notched-outline{z-index:1}.mdc-text-field--textarea{flex-direction:column;align-items:center;width:auto;height:auto;padding:0;transition:none}.mdc-text-field--textarea .mdc-floating-label{top:19px}.mdc-text-field--textarea .mdc-floating-label:not(.mdc-floating-label--float-above){transform:none}.mdc-text-field--textarea .mdc-text-field__input{flex-grow:1;height:auto;min-height:1.5rem;overflow-x:hidden;overflow-y:auto;box-sizing:border-box;resize:none;padding:0 16px;line-height:1.5rem}.mdc-text-field--textarea.mdc-text-field--filled::before{display:none}.mdc-text-field--textarea.mdc-text-field--filled .mdc-floating-label--float-above{transform:translateY(-10.25px) scale(0.75)}.mdc-text-field--textarea.mdc-text-field--filled .mdc-floating-label--shake{-webkit-animation:mdc-floating-label-shake-float-above-textarea-filled 250ms 1;animation:mdc-floating-label-shake-float-above-textarea-filled 250ms 1}@-webkit-keyframes mdc-floating-label-shake-float-above-textarea-filled{0%{transform:translateX(calc(0 - 0%)) translateY(-10.25px) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-10.25px) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-10.25px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-10.25px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-textarea-filled{0%{transform:translateX(calc(0 - 0%)) translateY(-10.25px) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-10.25px) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-10.25px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-10.25px) scale(0.75)}}.mdc-text-field--textarea.mdc-text-field--filled .mdc-text-field__input{margin-top:23px;margin-bottom:9px}.mdc-text-field--textarea.mdc-text-field--filled.mdc-text-field--no-label .mdc-text-field__input{margin-top:16px;margin-bottom:16px}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:0}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-27.25px) scale(1)}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--textarea.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-24.75px) scale(0.75)}.mdc-text-field--textarea.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--textarea.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label--shake{-webkit-animation:mdc-floating-label-shake-float-above-textarea-outlined 250ms 1;animation:mdc-floating-label-shake-float-above-textarea-outlined 250ms 1}@-webkit-keyframes mdc-floating-label-shake-float-above-textarea-outlined{0%{transform:translateX(calc(0 - 0%)) translateY(-24.75px) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-24.75px) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-24.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-24.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-textarea-outlined{0%{transform:translateX(calc(0 - 0%)) translateY(-24.75px) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 0%)) translateY(-24.75px) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 0%)) translateY(-24.75px) scale(0.75)}100%{transform:translateX(calc(0 - 0%)) translateY(-24.75px) scale(0.75)}}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-text-field__input{margin-top:16px;margin-bottom:16px}.mdc-text-field--textarea.mdc-text-field--outlined .mdc-floating-label{top:18px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field__input{margin-bottom:2px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field-character-counter{align-self:flex-end;padding:0 16px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field-character-counter::after{display:inline-block;width:0;height:16px;content:"";vertical-align:-16px}.mdc-text-field--textarea.mdc-text-field--with-internal-counter .mdc-text-field-character-counter::before{display:none}.mdc-text-field__resizer{align-self:stretch;display:inline-flex;flex-direction:column;flex-grow:1;max-height:100%;max-width:100%;min-height:56px;min-width:-webkit-fit-content;min-width:-moz-fit-content;min-width:fit-content;min-width:-moz-available;min-width:-webkit-fill-available;overflow:hidden;resize:both}.mdc-text-field--filled .mdc-text-field__resizer{transform:translateY(-1px)}.mdc-text-field--filled .mdc-text-field__resizer .mdc-text-field__input,.mdc-text-field--filled .mdc-text-field__resizer .mdc-text-field-character-counter{transform:translateY(1px)}.mdc-text-field--outlined .mdc-text-field__resizer{transform:translateX(-1px) translateY(-1px)}[dir=rtl] .mdc-text-field--outlined .mdc-text-field__resizer,.mdc-text-field--outlined .mdc-text-field__resizer[dir=rtl]{transform:translateX(1px) translateY(-1px)}.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field__input,.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field-character-counter{transform:translateX(1px) translateY(1px)}[dir=rtl] .mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field__input,[dir=rtl] .mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field-character-counter,.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field__input[dir=rtl],.mdc-text-field--outlined .mdc-text-field__resizer .mdc-text-field-character-counter[dir=rtl]{transform:translateX(-1px) translateY(1px)}.mdc-text-field--with-leading-icon{padding-left:0;padding-right:16px}[dir=rtl] .mdc-text-field--with-leading-icon,.mdc-text-field--with-leading-icon[dir=rtl]{padding-left:16px;padding-right:0}.mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label{max-width:calc(100% - 48px);left:48px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label[dir=rtl]{left:initial;right:48px}.mdc-text-field--with-leading-icon.mdc-text-field--filled .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 64px / 0.75)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label{left:36px;right:initial}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label[dir=rtl]{left:initial;right:36px}.mdc-text-field--with-leading-icon.mdc-text-field--outlined :not(.mdc-notched-outline--notched) .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{transform:translateY(-37.25px) translateX(-32px) scale(1)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-37.25px) translateX(32px) scale(1)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--float-above{font-size:.75rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{transform:translateY(-34.75px) translateX(-32px) scale(0.75)}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl],.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above[dir=rtl]{transform:translateY(-34.75px) translateX(32px) scale(0.75)}.mdc-text-field--with-leading-icon.mdc-text-field--outlined.mdc-notched-outline--upgraded .mdc-floating-label--float-above,.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-notched-outline--upgraded .mdc-floating-label--float-above{font-size:1rem}.mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake{-webkit-animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1;animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1}@-webkit-keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon{0%{transform:translateX(calc(0 - 32px)) translateY(-34.75px) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 32px)) translateY(-34.75px) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 32px)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 32px)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon{0%{transform:translateX(calc(0 - 32px)) translateY(-34.75px) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - 32px)) translateY(-34.75px) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - 32px)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - 32px)) translateY(-34.75px) scale(0.75)}}[dir=rtl] .mdc-text-field--with-leading-icon.mdc-text-field--outlined .mdc-floating-label--shake,.mdc-text-field--with-leading-icon.mdc-text-field--outlined[dir=rtl] .mdc-floating-label--shake{-webkit-animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1;animation:mdc-floating-label-shake-float-above-text-field-outlined-leading-icon 250ms 1}@-webkit-keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-rtl{0%{transform:translateX(calc(0 - -32px)) translateY(-34.75px) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - -32px)) translateY(-34.75px) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - -32px)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - -32px)) translateY(-34.75px) scale(0.75)}}@keyframes mdc-floating-label-shake-float-above-text-field-outlined-leading-icon-rtl{0%{transform:translateX(calc(0 - -32px)) translateY(-34.75px) scale(0.75)}33%{-webkit-animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);animation-timing-function:cubic-bezier(0.5, 0, 0.701732, 0.495819);transform:translateX(calc(4% - -32px)) translateY(-34.75px) scale(0.75)}66%{-webkit-animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);animation-timing-function:cubic-bezier(0.302435, 0.381352, 0.55, 0.956352);transform:translateX(calc(-4% - -32px)) translateY(-34.75px) scale(0.75)}100%{transform:translateX(calc(0 - -32px)) translateY(-34.75px) scale(0.75)}}.mdc-text-field--with-trailing-icon{padding-left:16px;padding-right:0}[dir=rtl] .mdc-text-field--with-trailing-icon,.mdc-text-field--with-trailing-icon[dir=rtl]{padding-left:0;padding-right:16px}.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label{max-width:calc(100% - 64px)}.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 64px / 0.75)}.mdc-text-field--with-trailing-icon.mdc-text-field--outlined :not(.mdc-notched-outline--notched) .mdc-notched-outline__notch{max-width:calc(100% - 60px)}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon{padding-left:0;padding-right:0}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label{max-width:calc(100% - 96px)}.mdc-text-field--with-leading-icon.mdc-text-field--with-trailing-icon.mdc-text-field--filled .mdc-floating-label--float-above{max-width:calc(100% / 0.75 - 96px / 0.75)}.mdc-text-field-helper-line{display:flex;justify-content:space-between;box-sizing:border-box}.mdc-text-field+.mdc-text-field-helper-line{padding-right:16px;padding-left:16px}.mdc-form-field>.mdc-text-field+label{align-self:flex-start}.mdc-text-field--focused:not(.mdc-text-field--disabled) .mdc-floating-label{color:rgba(88, 101, 242, 0.87)}.mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--focused .mdc-notched-outline__trailing{border-width:2px}.mdc-text-field--focused+.mdc-text-field-helper-line .mdc-text-field-helper-text:not(.mdc-text-field-helper-text--validation-msg){opacity:1}.mdc-text-field--focused.mdc-text-field--outlined .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:2px}.mdc-text-field--focused.mdc-text-field--outlined.mdc-text-field--textarea .mdc-notched-outline--notched .mdc-notched-outline__notch{padding-top:0}.mdc-text-field--invalid:not(.mdc-text-field--disabled):hover .mdc-line-ripple::before{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::after{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-floating-label{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid .mdc-text-field__input{caret-color:#b00020;caret-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-text-field__icon--trailing{color:#b00020;color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-line-ripple::before{border-bottom-color:#b00020;border-bottom-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__leading,.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__notch,.mdc-text-field--invalid:not(.mdc-text-field--disabled) .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__leading,.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__notch,.mdc-text-field--invalid:not(.mdc-text-field--disabled):not(.mdc-text-field--focused):hover .mdc-notched-outline .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__leading,.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__notch,.mdc-text-field--invalid:not(.mdc-text-field--disabled).mdc-text-field--focused .mdc-notched-outline__trailing{border-color:#b00020;border-color:var(--mdc-theme-error, #b00020)}.mdc-text-field--invalid+.mdc-text-field-helper-line .mdc-text-field-helper-text--validation-msg{opacity:1}.mdc-text-field--disabled{pointer-events:none}.mdc-text-field--disabled .mdc-text-field__input{color:rgba(0, 0, 0, 0.38)}@media all{.mdc-text-field--disabled .mdc-text-field__input::-moz-placeholder{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled .mdc-text-field__input:-ms-input-placeholder{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled .mdc-text-field__input::placeholder{color:rgba(0, 0, 0, 0.38)}}@media all{.mdc-text-field--disabled .mdc-text-field__input:-ms-input-placeholder{color:rgba(0, 0, 0, 0.38)}}.mdc-text-field--disabled .mdc-floating-label{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled .mdc-text-field__icon--leading{color:rgba(0, 0, 0, 0.3)}.mdc-text-field--disabled .mdc-text-field__icon--trailing{color:rgba(0, 0, 0, 0.3)}.mdc-text-field--disabled .mdc-text-field__affix--prefix{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled .mdc-text-field__affix--suffix{color:rgba(0, 0, 0, 0.38)}.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:rgba(0, 0, 0, 0.06)}.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:rgba(0, 0, 0, 0.06)}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__input::-moz-placeholder{color:GrayText}.mdc-text-field--disabled .mdc-text-field__input:-ms-input-placeholder{color:GrayText}.mdc-text-field--disabled .mdc-text-field__input::placeholder{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__input:-ms-input-placeholder{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-floating-label{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-helper-text{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field-character-counter,.mdc-text-field--disabled+.mdc-text-field-helper-line .mdc-text-field-character-counter{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__icon--leading{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__icon--trailing{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__affix--prefix{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-text-field__affix--suffix{color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-line-ripple::before{border-bottom-color:GrayText}}@media screen and (forced-colors: active),(-ms-high-contrast: active){.mdc-text-field--disabled .mdc-notched-outline__leading,.mdc-text-field--disabled .mdc-notched-outline__notch,.mdc-text-field--disabled .mdc-notched-outline__trailing{border-color:GrayText}}@media screen and (forced-colors: active){.mdc-text-field--disabled .mdc-text-field__input{background-color:Window}.mdc-text-field--disabled .mdc-floating-label{z-index:1}}.mdc-text-field--disabled .mdc-floating-label{cursor:default}.mdc-text-field--disabled.mdc-text-field--filled{background-color:#fafafa}.mdc-text-field--disabled.mdc-text-field--filled .mdc-text-field__ripple{display:none}.mdc-text-field--disabled .mdc-text-field__input{pointer-events:auto}.mdc-text-field--end-aligned .mdc-text-field__input{text-align:right}[dir=rtl] .mdc-text-field--end-aligned .mdc-text-field__input,.mdc-text-field--end-aligned .mdc-text-field__input[dir=rtl]{text-align:left}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__input,[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__input,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix{direction:ltr}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--prefix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--prefix{padding-left:0;padding-right:2px}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--suffix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--suffix{padding-left:12px;padding-right:0}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__icon--leading,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__icon--leading{order:1}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--suffix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--suffix{order:2}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__input,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__input{order:3}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__affix--prefix,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__affix--prefix{order:4}[dir=rtl] .mdc-text-field--ltr-text .mdc-text-field__icon--trailing,.mdc-text-field--ltr-text[dir=rtl] .mdc-text-field__icon--trailing{order:5}[dir=rtl] .mdc-text-field--ltr-text.mdc-text-field--end-aligned .mdc-text-field__input,.mdc-text-field--ltr-text.mdc-text-field--end-aligned[dir=rtl] .mdc-text-field__input{text-align:right}[dir=rtl] .mdc-text-field--ltr-text.mdc-text-field--end-aligned .mdc-text-field__affix--prefix,.mdc-text-field--ltr-text.mdc-text-field--end-aligned[dir=rtl] .mdc-text-field__affix--prefix{padding-right:12px}[dir=rtl] .mdc-text-field--ltr-text.mdc-text-field--end-aligned .mdc-text-field__affix--suffix,.mdc-text-field--ltr-text.mdc-text-field--end-aligned[dir=rtl] .mdc-text-field__affix--suffix{padding-left:2px}.mdc-text-field-helper-text{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-caption-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.75rem;font-size:var(--mdc-typography-caption-font-size, 0.75rem);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight, 400);letter-spacing:0.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing, 0.0333333333em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform, inherit);display:block;margin-top:0;line-height:normal;margin:0;opacity:0;will-change:opacity;transition:opacity 150ms 0ms cubic-bezier(0.4, 0, 0.2, 1)}.mdc-text-field-helper-text::before{display:inline-block;width:0;height:16px;content:"";vertical-align:0}.mdc-text-field-helper-text--persistent{transition:none;opacity:1;will-change:initial}.mdc-text-field-character-counter{-moz-osx-font-smoothing:grayscale;-webkit-font-smoothing:antialiased;font-family:Roboto, sans-serif;font-family:var(--mdc-typography-caption-font-family, var(--mdc-typography-font-family, Roboto, sans-serif));font-size:0.75rem;font-size:var(--mdc-typography-caption-font-size, 0.75rem);line-height:1.25rem;line-height:var(--mdc-typography-caption-line-height, 1.25rem);font-weight:400;font-weight:var(--mdc-typography-caption-font-weight, 400);letter-spacing:0.0333333333em;letter-spacing:var(--mdc-typography-caption-letter-spacing, 0.0333333333em);text-decoration:inherit;-webkit-text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-decoration:var(--mdc-typography-caption-text-decoration, inherit);text-transform:inherit;text-transform:var(--mdc-typography-caption-text-transform, inherit);display:block;margin-top:0;line-height:normal;margin-left:auto;margin-right:0;padding-left:16px;padding-right:0;white-space:nowrap}.mdc-text-field-character-counter::before{display:inline-block;width:0;height:16px;content:"";vertical-align:0}[dir=rtl] .mdc-text-field-character-counter,.mdc-text-field-character-counter[dir=rtl]{margin-left:0;margin-right:auto}[dir=rtl] .mdc-text-field-character-counter,.mdc-text-field-character-counter[dir=rtl]{padding-left:0;padding-right:16px}.mdc-text-field__icon{align-self:center;cursor:pointer}.mdc-text-field__icon:not([tabindex]),.mdc-text-field__icon[tabindex="-1"]{cursor:default;pointer-events:none}.mdc-text-field__icon svg{display:block}.mdc-text-field__icon--leading{margin-left:16px;margin-right:8px}[dir=rtl] .mdc-text-field__icon--leading,.mdc-text-field__icon--leading[dir=rtl]{margin-left:8px;margin-right:16px}.mdc-text-field__icon--trailing{padding:12px;margin-left:0px;margin-right:0px}[dir=rtl] .mdc-text-field__icon--trailing,.mdc-text-field__icon--trailing[dir=rtl]{margin-left:0px;margin-right:0px}body{margin:0px;background-color:var(--mdc-theme-background);overflow-x:hidden}#authContainer{display:flex;align-items:center;flex-direction:column;flex-wrap:nowrap;text-align:center;padding:0px 20px;box-sizing:border-box;height:100vh;width:100vw}#authContainer .expand{flex-grow:1}#authContainer>h1{margin-bottom:0}#authContainer .goButtonContainer{margin-left:10px;display:inline-block}#content{background-repeat:no-repeat;background-size:contain;background-position:center;width:100vw;height:calc(100vh - 60px)}#caption{width:100vw;height:60px;padding:10px 20px;text-align:center;box-sizing:border-box}#caption h4{margin:0}
/*# sourceURL=webpack://./node_modules/@material/theme/_theme.scss */
/*# sourceURL=webpack://./node_modules/@material/theme/_css.scss */
/*# sourceURL=webpack://./node_modules/@material/typography/_typography.scss */
/*# sourceURL=webpack://./node_modules/@material/touch-target/_touch-target.scss */
/*# sourceURL=webpack://./node_modules/@material/elevation/_elevation.scss */
/*# sourceURL=webpack://./node_modules/@material/button/_button-base.scss */
/*# sourceURL=webpack://./node_modules/@material/elevation/_elevation-theme.scss */
/*# sourceURL=webpack://./node_modules/@material/rtl/_rtl.scss */
/*# sourceURL=webpack://./node_modules/@material/ripple/_ripple.scss */
/*# sourceURL=webpack://./node_modules/@material/animation/_animation.scss */
/*# sourceURL=webpack://./node_modules/@material/button/_button-ripple.scss */
/*# sourceURL=webpack://./node_modules/@material/button/_button-protected.scss */
/*# sourceURL=webpack://./node_modules/@material/button/_button-outlined.scss */
/*# sourceURL=webpack://./node_modules/@material/button/_button-text.scss */
/*# sourceURL=webpack://./node_modules/@material/button/_button-shared-theme.scss */
/*# sourceURL=webpack://./node_modules/@material/ripple/_ripple-theme.scss */
/*# sourceURL=webpack://./node_modules/@material/button/_button-filled.scss */
/*# sourceURL=webpack://./node_modules/@material/button/_button-outlined-theme.scss */
/*# sourceURL=webpack://./node_modules/@material/floating-label/_mixins.scss */
/*# sourceURL=webpack://./node_modules/@material/line-ripple/_mixins.scss */
/*# sourceURL=webpack://./node_modules/@material/notched-outline/_mixins.scss */
/*# sourceURL=webpack://./node_modules/@material/notched-outline/_variables.scss */
/*# sourceURL=webpack://./node_modules/@material/fab/_fab.scss */
/*# sourceURL=webpack://./node_modules/@material/fab/_fab-theme.scss */
/*# sourceURL=webpack://./node_modules/@material/fab/_extended-fab-theme.scss */
/*# sourceURL=webpack://./node_modules/@material/dom/_dom.scss */
/*# sourceURL=webpack://./node_modules/@material/icon-button/_mixins.scss */
/*# sourceURL=webpack://./node_modules/@material/icon-button/_variables.scss */
/*# sourceURL=webpack://./node_modules/@material/textfield/_mixins.scss */
/*# sourceURL=webpack://./node_modules/@material/textfield/helper-text/_mixins.scss */
/*# sourceURL=webpack://./node_modules/@material/textfield/character-counter/_mixins.scss */
/*# sourceURL=webpack://./node_modules/@material/textfield/icon/_mixins.scss */
/*# sourceURL=webpack://./node_modules/@material/textfield/_variables.scss */
/*# sourceURL=webpack://./src/app.scss */
/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGhlbWUvX3RoZW1lLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3RoZW1lL19jc3Muc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdHlwb2dyYXBoeS9fdHlwb2dyYXBoeS5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90b3VjaC10YXJnZXQvX3RvdWNoLXRhcmdldC5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9lbGV2YXRpb24vX2VsZXZhdGlvbi5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9idXR0b24vX2J1dHRvbi1iYXNlLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2VsZXZhdGlvbi9fZWxldmF0aW9uLXRoZW1lLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3J0bC9fcnRsLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL3JpcHBsZS9fcmlwcGxlLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2FuaW1hdGlvbi9fYW5pbWF0aW9uLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2J1dHRvbi9fYnV0dG9uLXJpcHBsZS5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9idXR0b24vX2J1dHRvbi1wcm90ZWN0ZWQuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvYnV0dG9uL19idXR0b24tb3V0bGluZWQuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvYnV0dG9uL19idXR0b24tdGV4dC5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9idXR0b24vX2J1dHRvbi1zaGFyZWQtdGhlbWUuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvcmlwcGxlL19yaXBwbGUtdGhlbWUuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvYnV0dG9uL19idXR0b24tZmlsbGVkLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2J1dHRvbi9fYnV0dG9uLW91dGxpbmVkLXRoZW1lLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2Zsb2F0aW5nLWxhYmVsL19taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvbGluZS1yaXBwbGUvX21peGlucy5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9ub3RjaGVkLW91dGxpbmUvX21peGlucy5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9ub3RjaGVkLW91dGxpbmUvX3ZhcmlhYmxlcy5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mYWIvX2ZhYi5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mYWIvX2ZhYi10aGVtZS5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9mYWIvX2V4dGVuZGVkLWZhYi10aGVtZS5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9kb20vX2RvbS5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC9pY29uLWJ1dHRvbi9fbWl4aW5zLnNjc3MiLCJ3ZWJwYWNrOi8vLi9ub2RlX21vZHVsZXMvQG1hdGVyaWFsL2ljb24tYnV0dG9uL192YXJpYWJsZXMuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGV4dGZpZWxkL19taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGV4dGZpZWxkL2hlbHBlci10ZXh0L19taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGV4dGZpZWxkL2NoYXJhY3Rlci1jb3VudGVyL19taXhpbnMuc2NzcyIsIndlYnBhY2s6Ly8uL25vZGVfbW9kdWxlcy9AbWF0ZXJpYWwvdGV4dGZpZWxkL2ljb24vX21peGlucy5zY3NzIiwid2VicGFjazovLy4vbm9kZV9tb2R1bGVzL0BtYXRlcmlhbC90ZXh0ZmllbGQvX3ZhcmlhYmxlcy5zY3NzIiwid2VicGFjazovLy4vc3JjL2FwcC5zY3NzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiJBQXVDRSxNQ3VDRSwyQkFBQSxDQUFBLDZCQUFBLENBQUEsMkJBQUEsQ0FBQSx3QkFBQSxDQUFBLHlCQUFBLENBQUEsMkJBQUEsQ0FBQSw2QkFBQSxDQUFBLDJCQUFBLENBQUEseUJBQUEsQ0FBQSwwREFBQSxDQUFBLDREQUFBLENBQUEsdURBQUEsQ0FBQSwyREFBQSxDQUFBLHVEQUFBLENBQUEscURBQUEsQ0FBQSx1REFBQSxDQUFBLGtEQUFBLENBQUEsc0RBQUEsQ0FBQSxrREFBQSxDQUFBLHNDQUFBLENBQUEsMkRBQUEsQ0FBQSxzREFBQSxDQUFBLDBEQUFBLENBQUEsc0RBQUEsQ0QzQkUsb0JDZUEseUJBQUEsQ0FZRixrREFBQSxDRDNCRSxzQkNlQSx5QkFBQSxDQVlGLG9EQUFBLENEckJFLHVCQ1NBLHFCQUFBLENBWUYsa0RBQUEsQ0RyQkUsb0JDU0EscUJBQUEsQ0FZRiwrQ0FBQSxDRDNCRSxrQkNlQSx5QkFBQSxDQVlGLGdEQUFBLENEM0JFLHVCQ2VBLHNCQUFBLENBWUYsa0RBQUEsQ0QzQkUseUJDZUEsc0JBQUEsQ0FZRixvREFBQSxDRDNCRSx1QkNlQSxzQkFBQSxDQVlGLGtEQUFBLENEM0JFLHFCQ2VBLHNCQUFBLENBWUYsZ0RBQUEsQ0QzQkUs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QUEsQ1JsakRKLDRHQUVJLGVZNURrQixDWjBEdEIscUlBRUksYVE2akR5QyxDVDNuRDNDLHVGbEIvQkUsMkJBQUEsQ0FZRixtREFBQSxDa0JTQSxnRmxCckJFLDJCQUFBLENBWUYsbURBQUEsQzJCMjRFRiw0RTNCdjVFSSxhQUFBLENBWUYscUNBQUEsQzRCK0JGLHdKNUIzQ0ksYUFBQSxDQVlGLHFDQUFBLEMyQm81QkYsZ0QzQmg2QkksbUJBQUEsQ0FZRiwyQ0FBQSxDOEJzRkYsd0Y5QmxHSSxhQUFBLENBWUYscUNBQUEsQ2tCbUJBLGlGbEIvQkUsMkJBQUEsQ0FZRixtREFBQSxDbUJrREYsaVFuQjlESSxvQkFBQSxDQVlGLDRDQUFBLENtQmtERiw0YW5COURJLG9CQUFBLENBWUYsNENBQUEsQ21Ca0RGLHlVbkI5REksb0JBQUEsQ0FZRiw0Q0FBQSxDMkI0bURGLGlHQUVJLFNBQUEsQ0EvNUNKLDBCQXcyQ0UsbUJBQUEsQ0Erd0JGLGlEM0J0MEVFLHlCQUFBLEMyQjY2RUYsV0FHRSxtRTNCaDdFQSx5QkFBQSxDMkJnN0VBLHVFM0JoN0VBLHlCQUFBLEMyQmc3RUEsOEQzQmg3RUEseUJBQUEsQ0FBQSxDMkJxN0VGLFdBR0UsdUUzQng3RUEseUJBQUEsQ0FBQSxDMkIyNEVGLDhDM0IzNEVFLHlCQUFBLEM0QnFCRixrRjVCckJFLHlCQUFBLEM2QnFCRixvSjdCckJFLHlCQUFBLEM4QjRFRix5RDlCNUVFLHdCQUFBLEM4QnNGRiwwRDlCdEZFLHdCQUFBLEMyQm81RUEseUQzQnA1RUEseUJBQUEsQzJCODVFQSx5RDNCOTVFQSx5QkFBQSxDa0JtQkEsbURsQm5CQSx1Q0FBQSxDbUJrREYsdUtuQmxERSxnQ0FBQSxDMkI2NkVGLHNFQUdFLG1FM0JoN0VBLGNBQUEsQzJCZzdFQSx1RTNCaDdFQSxjQUFBLEMyQmc3RUEsOEQzQmg3RUEsY0FBQSxDQUFBLEMyQnE3RUYsc0VBR0UsdUUzQng3RUEsY0FBQSxDQUFBLEN3QmFBLHNFRzgzRUYsOEMzQjM0RUUsY0FBQSxDQUFBLEN3QmFBLHNFSVFGLGtGNUJyQkUsY0FB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QUFBLENBSUosU0FDRSwyQkFBQSxDQUNBLHVCQUFBLENBQ0EsMEJBQUEsQ0FDQSxXQUFBLENBQ0EseUJBQUEsQ0FHRixTQUNFLFdBQUEsQ0FDQSxXQUFBLENBQ0EsaUJBQUEsQ0FDQSxpQkFBQSxDQUNBLHFCQUFBLENBRUEsWUFDRSxRQUFBIiwic291cmNlc0NvbnRlbnQiOlsiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVyblxuXG5AdXNlICdzYXNzOmxpc3QnO1xuQHVzZSAnc2FzczptYXAnO1xuQHVzZSAnc2FzczptZXRhJztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICcuL2Nzcyc7XG5AdXNlICcuL2N1c3RvbS1wcm9wZXJ0aWVzJztcbkB1c2UgJy4vZ3NzJztcbkB1c2UgJy4va2V5cyc7XG5AdXNlICcuL3JlcGxhY2UnO1xuQHVzZSAnLi90aGVtZS1jb2xvcic7XG5cbkBtaXhpbiBjb3JlLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIDpyb290IHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBAZWFjaCAkc3R5bGUgaW4gdGhlbWUtY29sb3IuZ2V0LXRoZW1lLWtleXMoKSB7XG4gICAgICAgIEBpbmNsdWRlIGN1c3RvbS1wcm9wZXJ0aWVzLmRlY2xhcmF0aW9uKFxuICAgICAgICAgIGtleXMuY3JlYXRlLWN1c3RvbS1wcm9wZXJ0eSgkc3R5bGUpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgQGVhY2ggJHN0eWxlIGluIHRoZW1lLWNvbG9yLmdldC10aGVtZS1rZXlzKCkge1xuICAgIEBpZiAkc3R5bGUgIT0gJ2JhY2tncm91bmQnIGFuZCAkc3R5bGUgIT0gJ3N1cmZhY2UnIHtcbiAgICAgIC5tZGMtdGhlbWUtLSN7JHN0eWxlfSB7XG4gICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgICAgICBAaW5jbHVkZSBwcm9wZXJ0eShjb2xvciwgJHN0eWxlLCAkaW1wb3J0YW50OiB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH0gQGVsc2Uge1xuICAgICAgLm1kYy10aGVtZS0tI3skc3R5bGV9IHtcbiAgICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgICAgICAgIEBpbmNsdWRlIHByb3BlcnR5KGJhY2tncm91bmQtY29sb3IsICRzdHlsZSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBDU1MgcnVsZXMgZm9yIHVzaW5nIHByaW1hcnkgYW5kIHNlY29uZGFyeSAocGx1cyBsaWdodC9kYXJrIHZhcmlhbnRzKSBhcyBiYWNrZ3JvdW5kIGNvbG9ycy5cbiAgQGVhY2ggJHN0eWxlIGluICgncHJpbWFyeScsICdzZWNvbmRhcnknKSB7XG4gICAgLm1kYy10aGVtZS0tI3skc3R5bGV9LWJnIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgICAgQGluY2x1ZGUgcHJvcGVydHkoYmFja2dyb3VuZC1jb2xvciwgJHN0eWxlLCAkaW1wb3J0YW50OiB0cnVlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vIEFwcGxpZXMgYSBkeW5hbWljIHZhbHVlIHRvIHRoZSBzcGVjaWZpZWQgcHJvcGVydHkuIFRoaXMgbWl4aW4gc2hvdWxkIGJlIHVzZWRcbi8vLyBpbiB0aGVtZSBzdHlsZSBtaXhpbnMgd2hlbiBzZXR0aW5nIHByb3BlcnRpZXMuXG4vLy9cbi8vLyBUaGUgdmFsdWUgbWF5IGJlIGFueSBvZiB0aGUgZm9sbG93aW5nOlxuLy8vIC0gYSBzdGFuZGFyZCBDU1MgdmFsdWVcbi8vLyAtIGEgY3VzdG9tIHByb3BlcnR5IE1hcCwgZS5nLiAodmFybmFtZTogLS1tZGMtZm9vLCBmYWxsYmFjazogYmx1ZSlcbi8vLyAtIGEgTWF0ZXJpYWwgdGhlbWUga2V5IFN0cmluZywgZS5nLiAncHJpbWFyeScsICdvbi1wcmltYXJ5J1xuLy8vXG4vLy8gQGV4YW1wbGVcbi8vLyAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGNvbG9yLCB0ZWFsKTtcbi8vLyAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGNvbG9yLCBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoZm9vLCBibHVlKSk7XG4vLy8gICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShjb2xvciwgcHJpbWFyeSk7XG4vLy9cbi8vLyBBIGAkcmVwbGFjZWAgTWFwIHBhcmFtZXRlciBtYXkgYmUgcHJvdmlkZWQgdG8gcmVwbGFjZSBrZXkvdmFsdWUgcGFpcnMgZm9yXG4vLy8gc3RyaW5nIHZhbHVlcy4gVGhpcyBjYW4gYmUgdXNlZCB0byBzdWJzdGl0dXRlIHBhcmFtZXRlcnMgaW4gY29tcGxleCBzdHJpbmdcbi8vLyB2YWx1ZXMgc3VjaCBhcyBgY2FsYygpYCB3aXRoIGN1c3RvbSBwcm9wZXJ0aWVzLlxuLy8vXG4vLy8gQGV4YW1wbGVcbi8vLyAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KFxuLy8vICAgICB3aWR0aCxcbi8vLyAgICAgY2FsYyhmb28gKyBiYXIpLFxuLy8vICAgICAkcmVwbGFjZTogKGZvbzogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKGZvbyksIGJhcjogOHB4KVxuLy8vICAgKTtcbi8vL1xuLy8vIE5vdGU6IE1hdGVyaWFsIHRoZW1lIGtleSBTdHJpbmdzIChlLmcuIGBwcmltYXJ5YCkgYXJlIG5vdCBzdXBwb3J0ZWQgYXNcbi8vLyByZXBsYWNlbWVudCB2YWx1ZXMuXG4vLy9cbi8vLyBBIENTUyBjdXN0b20gcHJvcGVydHkgZGVjbGFyYXRpb24gbWF5IGJlIGVtaXR0ZWQgYnkgcHJvdmlkaW5nIGEgY3VzdG9tXG4vLy8gcHJvcGVydHkgTWFwIHRvIGAkcHJvcGVydHlgLiBUaGUgZmFsbGJhY2sgdmFsdWUgKG9yIGAkdmFsdWVgIGlmIHByb3ZpZGVkKVxuLy8vIHdpbGwgYmUgdXNlZCBhcyB0aGUgZGVjbGFyYXRpb24gdmFsdWUuXG4vLy9cbi8vLyBAZXhhbXBsZSAtIHNjc3Ncbi8vLyAgIC5mb28ge1xuLy8vICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoZm9vLCB0ZWFsKSk7XG4vLy8gICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGN1c3RvbS1wcm9wZXJ0aWVzLmNyZWF0ZShiYXIsIHRlYWwpLCBibHVlKTtcbi8vLyAgIH1cbi8vL1xuLy8vIEBleGFtcGxlIC0gY3NzXG4vLy8gICAuZm9vIHtcbi8vLyAgICAgLS1tZGMtZm9vOiB0ZWFsO1xuLy8vICAgICAtLW1kYy1iYXI6IGJsdWU7XG4vLy8gICB9XG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZyB8IE1hcH0gJHByb3BlcnR5IC0gVGhlIG5hbWUgb2YgdGhlIENTUyBwcm9wZXJ0eS4gTWF5IGFsc28gYmVcbi8vLyAgICAgYSBjdXN0b20gcHJvcGVydHkgTWFwIHRvIGVtaXQgYSBjdXN0b20gcHJvcGVyeSBkZWNsYXJhdGlvbi5cbi8vLyBAcGFyYW0ge1N0cmluZyB8IE51bWJlciB8IENvbG9yIHwgTGlzdCB8IE1hcH0gJHZhbHVlIC0gVGhlIHByb3BlcnR5J3MgdmFsdWUuXG4vLy8gICAgIFRoaXMgcGFyYW1ldGVyIG1heSBiZSBvbWl0dGVkIGlmIGAkcHJvcGVydHlgIGlzIGEgY3VzdG9tIHByb3BlcnR5IE1hcC5cbi8vLyBAcGFyYW0ge01hcH0gJGdzcyAtIE9wdGlvbmFsIE1hcCBvZiBHU1MgYW5ub3RhdGlvbnMgdG8gc2V0LlxuLy8vIEBwYXJhbSB7TWFwfSAkcmVwbGFjZSAtIEFuIG9wdGlvbmFsIE1hcCBvZiByZXBsYWNlbWVudCBrZXkvdmFsdWUgcGFpcnMgaWZcbi8vLyAgICAgdGhlIGAkdmFsdWVgIGlzIGEgc3RyaW5nLlxuLy8vIEBwYXJhbSB7Qm9vbH0gJGltcG9ydGFudCAtIFNldCB0byB0cnVlIHRvIGFkZCBhbiBgIWltcG9ydGFudGAgcnVsZS4gRGVmYXVsdHNcbi8vLyAgICAgdG8gZmFsc2UuXG5AbWl4aW4gcHJvcGVydHkoXG4gICRwcm9wZXJ0eSxcbiAgJHZhbHVlOiBudWxsLFxuICAkZ3NzOiAoKSxcbiAgJHJlcGxhY2U6IG51bGwsXG4gICRpbXBvcnRhbnQ6IGZhbHNlXG4pIHtcbiAgQGlmIGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCRwcm9wZXJ0eSkge1xuICAgIC8vICRwcm9wZXJ0eSBpcyBhIGN1c3RvbSBwcm9wZXJ0eSBNYXBcbiAgICAvLyAgIC0tbWRjLWZvbzogdmFsdWU7XG4gICAgQGlmICR2YWx1ZSB7XG4gICAgICAkcHJvcGVydHk6IGN1c3RvbS1wcm9wZXJ0aWVzLnNldC1mYWxsYmFjayhcbiAgICAgICAgJHByb3BlcnR5LFxuICAgICAgICAkdmFsdWUsXG4gICAgICAgICRzaGFsbG93OiB0cnVlXG4gICAgICApO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGN1c3RvbS1wcm9wZXJ0aWVzLmRlY2xhcmF0aW9uKFxuICAgICAgJHByb3BlcnR5LFxuICAgICAgJGdzczogJGdzcyxcbiAgICAgICRpbXBvcnRhbnQ6ICRpbXBvcnRhbnRcbiAgICApO1xuICB9IEBlbHNlIGlmIGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCR2YWx1ZSkge1xuICAgIC8vICR2YWx1ZSBpcyBhIGN1c3RvbSBwcm9wZXJ0eSBNYXBcbiAgICAvLyAgIHByb3BlcnR5OiB2YXIoLS1tZGMtZm9vLCBmYWxsYmFjayk7XG4gICAgQGluY2x1ZGUgY3VzdG9tLXByb3BlcnRpZXMuZGVjbGFyYXRpb24oXG4gICAgICAkcHJvcGVydHksXG4gICAgICAkdmFsdWUsXG4gICAgICAkZ3NzOiAkZ3NzLFxuICAgICAgJGltcG9ydGFudDogJGltcG9ydGFudFxuICAgICk7XG4gIH0gQGVsc2UgaWYga2V5cy5pcy1rZXkoJHZhbHVlKSB7XG4gICAgLy8gJHZhbHVlIGlzIGEga2V5IFN0cmluZ1xuICAgIC8vICAgcHJvcGVydHk6IGtleTtcbiAgICAkY3VzdG9tLXByb3A6IGtleXMuY3JlYXRlLWN1c3RvbS1wcm9wZXJ0eSgkdmFsdWUpO1xuXG4gICAgQGlmIHRoZW1lLWNvbG9yLmlzLXRoZW1lLWtleSgkdmFsdWUpIHtcbiAgICAgIC8vIERldGVybWluZSBpZiB3ZSBuZWVkIHRvIHVzZSBhIGNvbXBpbGUtdGltZSB1cGRhdGVkIHZhbHVlIHRvIHN1cHBvcnRcbiAgICAgIC8vIEFuZ3VsYXIuXG4gICAgICAka2V5OiAkdmFsdWU7XG4gICAgICAvLyAoY2hhbmdlZDogQm9vbCwgdmFsdWU6ICopXG4gICAgICAkcmVzdWx0OiB0aGVtZS1jb2xvci5kZXByZWNhdGVkLWdldC1nbG9iYWwtdGhlbWUta2V5LXZhbHVlLWlmLWNoYW5nZWQoXG4gICAgICAgICRrZXlcbiAgICAgICk7XG5cbiAgICAgIEBpZiBtYXAuZ2V0KCRyZXN1bHQsIGNoYW5nZWQpIHtcbiAgICAgICAgLy8gJG1kYy10aGVtZS1wcm9wZXJ0eS12YWx1ZXMgd2FzIGNoYW5nZWQgYXQgY29tcGlsZSB0aW1lLiBVc2UgdGhlXG4gICAgICAgIC8vIGdsb2JhbCB2YWx1ZSBpbnN0ZWFkLiBPdGhlcndpc2UgaWYgaXQgd2FzIG5vdCBjaGFuZ2VkLCBjb250aW51ZVxuICAgICAgICAvLyB1c2luZyB0aGUga2V5IHN0b3JlIG5vcm1hbGx5LlxuICAgICAgICAkY3VzdG9tLXByb3A6IGtleXMuY3JlYXRlLWN1c3RvbS1wcm9wZXJ0eSgka2V5KTtcbiAgICAgICAgJGN1c3RvbS1wcm9wOiBjdXN0b20tcHJvcGVydGllcy5zZXQtZmFsbGJhY2soXG4gICAgICAgICAgJGN1c3RvbS1wcm9wLFxuICAgICAgICAgIG1hcC5nZXQoJHJlc3VsdCwgdmFsdWUpXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgY3VzdG9tLXByb3BlcnRpZXMuZGVjbGFyYXRpb24oXG4gICAgICAkcHJvcGVydHksXG4gICAgICAkY3VzdG9tLXByb3AsXG4gICAgICAkZ3NzOiAkZ3NzLFxuICAgICAgJGltcG9ydGFudDogJGltcG9ydGFudFxuICAgICk7XG4gIH0gQGVsc2Uge1xuICAgIC8vICR2YWx1ZSBpcyBhIHN0YW5kYXJkIENTUyB2YWx1ZVxuICAgIC8vICAgcHJvcGVydHk6IHZhbHVlO1xuICAgICRmYWxsYmFjazogbnVsbDtcbiAgICBAaWYgJHJlcGxhY2Uge1xuICAgICAgLy8gSWYgYW55IHJlcGxhY2VtZW50cyBhcmUgbnVsbCwgdHJlYXQgdGhlIGVudGlyZSB2YWx1ZSBhcyBudWxsIChkbyBub3RcbiAgICAgIC8vIGVtaXQgYW55dGhpbmcpLlxuICAgICAgQGVhY2ggJG5hbWUsICRyZXBsYWNlbWVudCBpbiAkcmVwbGFjZSB7XG4gICAgICAgIEBpZiAkcmVwbGFjZW1lbnQgPT0gbnVsbCB7XG4gICAgICAgICAgJHZhbHVlOiBudWxsO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRyZXBsYWNlIGFuZCAkdmFsdWUge1xuICAgICAgQGlmIG1ldGEudHlwZS1vZigkcmVwbGFjZSkgIT0gJ21hcCcge1xuICAgICAgICBAZXJyb3IgJ21kYy10aGVtZTogSW52YWxpZCByZXBsYWNlbWVudCAjeyRyZXBsYWNlfS4gTXVzdCBiZSBhIE1hcC4nO1xuICAgICAgfVxuXG4gICAgICAkcmVwbGFjZS1tYXAtZmFsbGJhY2s6ICgpO1xuICAgICAgJHJlcGxhY2UtbWFwLXZhbHVlOiAoKTtcbiAgICAgICRuZWVkcy1mYWxsYmFjazogZmFsc2U7XG4gICAgICBAZWFjaCAkbmFtZSwgJHJlcGxhY2VtZW50IGluICRyZXBsYWNlIHtcbiAgICAgICAgQGlmIGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCRyZXBsYWNlbWVudCkge1xuICAgICAgICAgICRyZXBsYWNlLXZhbHVlOiBjdXN0b20tcHJvcGVydGllcy5nZXQtZGVjbGFyYXRpb24tdmFsdWUoJHJlcGxhY2VtZW50KTtcbiAgICAgICAgICAkcmVwbGFjZS1mYWxsYmFjazogY3VzdG9tLXByb3BlcnRpZXMuZ2V0LWRlY2xhcmF0aW9uLWZhbGxiYWNrKFxuICAgICAgICAgICAgJHJlcGxhY2VtZW50XG4gICAgICAgICAgKTtcbiAgICAgICAgICBAaWYgJHJlcGxhY2UtZmFsbGJhY2sge1xuICAgICAgICAgICAgJG5lZWRzLWZhbGxiYWNrOiB0cnVlO1xuICAgICAgICAgIH1cblxuICAgICAgICAgICRyZXBsYWNlLW1hcC12YWx1ZTogbWFwLnNldChcbiAgICAgICAgICAgICRyZXBsYWNlLW1hcC12YWx1ZSxcbiAgICAgICAgICAgICRuYW1lLFxuICAgICAgICAgICAgJHJlcGxhY2UtdmFsdWVcbiAgICAgICAgICApO1xuICAgICAgICAgICRyZXBsYWNlLW1hcC1mYWxsYmFjazogbWFwLnNldChcbiAgICAgICAgICAgICRyZXBsYWNlLW1hcC1mYWxsYmFjayxcbiAgICAgICAgICAgICRuYW1lLFxuICAgICAgICAgICAgJHJlcGxhY2UtZmFsbGJhY2tcbiAgICAgICAgICApO1xuICAgICAgICB9IEBlbHNlIHtcbiAgICAgICAgICAkcmVwbGFjZS1tYXAtdmFsdWU6IG1hcC5zZXQoJHJlcGxhY2UtbWFwLXZhbHVlLCAkbmFtZSwgJHJlcGxhY2VtZW50KTtcbiAgICAgICAgICAkcmVwbGFjZS1tYXAtZmFsbGJhY2s6IG1hcC5zZXQoXG4gICAgICAgICAgICAkcmVwbGFjZS1tYXAtZmFsbGJhY2ssXG4gICAgICAgICAgICAkbmFtZSxcbiAgICAgICAgICAgICRyZXBsYWNlbWVudFxuICAgICAgICAgICk7XG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgQGlmIG1ldGEudHlwZS1vZigkdmFsdWUpID09ICdzdHJpbmcnIHtcbiAgICAgICAgQGlmICRuZWVkcy1mYWxsYmFjayB7XG4gICAgICAgICAgJGZhbGxiYWNrOiByZXBsYWNlLnJlcGxhY2Utc3RyaW5nKCR2YWx1ZSwgJHJlcGxhY2UtbWFwLWZhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICAkdmFsdWU6IHJlcGxhY2UucmVwbGFjZS1zdHJpbmcoJHZhbHVlLCAkcmVwbGFjZS1tYXAtdmFsdWUpO1xuICAgICAgfSBAZWxzZSBpZiBtZXRhLnR5cGUtb2YoJHZhbHVlKSA9PSAnbGlzdCcge1xuICAgICAgICBAaWYgJG5lZWRzLWZhbGxiYWNrIHtcbiAgICAgICAgICAkZmFsbGJhY2s6IHJlcGxhY2UucmVwbGFjZS1saXN0KCR2YWx1ZSwgJHJlcGxhY2UtbWFwLWZhbGxiYWNrKTtcbiAgICAgICAgfVxuICAgICAgICAkdmFsdWU6IHJlcGxhY2UucmVwbGFjZS1saXN0KCR2YWx1ZSwgJHJlcGxhY2UtbWFwLXZhbHVlKTtcbiAgICAgIH0gQGVsc2Uge1xuICAgICAgICBAZXJyb3IgJ21kYy10aGVtZTogSW52YWxpZCByZXBsYWNlbWVudCB2YWx1ZSAjeyR2YWx1ZX0uICRyZXBsYWNlIG1heSBvbmx5IGJlIHVzZWQgd2l0aCBzdHJpbmcgb3IgbGlzdCB2YWx1ZXMuJztcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaW5jbHVkZSBjc3MuZGVjbGFyYXRpb24oXG4gICAgICAkcHJvcGVydHksXG4gICAgICAkdmFsdWUsXG4gICAgICAkZmFsbGJhY2stdmFsdWU6ICRmYWxsYmFjayxcbiAgICAgICRnc3M6ICRnc3MsXG4gICAgICAkaW1wb3J0YW50OiAkaW1wb3J0YW50XG4gICAgKTtcbiAgfVxufVxuXG4vLyBAZGVwcmVjYXRlZCB1c2UgdGhlIGBwcm9wZXJ0eSgpYCBtaXhpbiBpbnN0ZWFkXG5AbWl4aW4gcHJvcCgkcHJvcGVydHksICRzdHlsZSwgJGltcG9ydGFudDogZmFsc2UpIHtcbiAgQGluY2x1ZGUgcHJvcGVydHkoJHByb3BlcnR5LCAkc3R5bGUsICRpbXBvcnRhbnQ6ICRpbXBvcnRhbnQpO1xufVxuXG4vLy8gVmFsaWRhdGVzIGtleXMgaW4gcHJvdmlkZWQgdGhlbWUgY29uZmlndXJhdGlvbiBieSBjb21wYXJpbmcgd2l0aCBvcmlnaW5hbFxuLy8vIHRoZW1lIGNvbmZpZ3VyYXRpb24uXG4vLy8gVXNlIHRoaXMgaW4gY29tcG9uZW50J3MgYHRoZW1lKClgIG1peGluIGltcGxlbWVudGF0aW9uIHRvIHZhbGlkYXRlIGlmXG4vLy8gcHJvdmlkZWQgdGhlbWUgY29uZmlndXJhdGlvbiBoYXMgc3VwcG9ydGVkIHRoZW1lIGNvbmZpZ3VyYXRpb24ga2V5cy5cbi8vLyBAcGFyYW0ge01hcH0gJG9yaWdpbi10aGVtZSAtIE9yaWdpbmFsIHRoZW1lIGNvbmZpZ3VyYXRpb24gaW4gU2FzcyBtYXAgZm9ybWF0XG4vLy8gICAgIHRoYXQgaGFzIGFsbCBzdXBwb3J0ZWQga2V5cy5cbi8vLyBAcGFyYW0ge01hcH0gJGN1c3RvbS10aGVtZSAtIFByb3ZpZGVkIHRoZW1lIGNvbmZpZ3VyYXRpb24gaW4gU2FzcyBtYXAgZm9ybWF0XG4vLy8gICAgIHRoYXQgc2hvdWxkIGJlIHZhbGlkYXRlZCBhZ2FpbnN0IGAkb3JpZ2luLXRoZW1lYC5cbi8vLyBAZXhhbXBsZXNcbi8vLyAgICAgQG1peGluIHRoZW1lKCR0aGVtZSkge1xuLy8vICAgICAgIEBpbmNsdWRlIHRoZW1lLnZhbGlkYXRlLWtleXMoJGxpZ2h0LXRoZW1lLCAkdGhlbWUpO1xuLy8vXG4vLy8gICAgICAgLy8gLi4uXG4vLy8gICAgIH1cbkBtaXhpbiB2YWxpZGF0ZS1rZXlzKCRvcmlnaW4tdGhlbWUsICRjdXN0b20tdGhlbWUsICR0ZXN0LW9ubHk6IGZhbHNlKSB7XG4gICRvcmlnaW4ta2V5czogbWFwLmtleXMoJG9yaWdpbi10aGVtZSk7XG4gICR1bnN1cHBvcnRlZC1rZXlzOiAoKTtcbiAgJHVuc3VwcG9ydGVkLWN1c3RvbS1wcm9wLWtleXM6ICgpO1xuXG4gIEBlYWNoICRrZXksICR2YWx1ZSBpbiAkY3VzdG9tLXRoZW1lIHtcbiAgICBAaWYgKG5vdCBsaXN0LmluZGV4KCRvcmlnaW4ta2V5cywgJGtleSkpIHtcbiAgICAgICR1bnN1cHBvcnRlZC1rZXlzOiBsaXN0LmFwcGVuZChcbiAgICAgICAgJHVuc3VwcG9ydGVkLWtleXMsXG4gICAgICAgICRrZXksXG4gICAgICAgICRzZXBhcmF0b3I6IGNvbW1hXG4gICAgICApO1xuICAgIH1cblxuICAgICRpcy1wcm9wOiBjdXN0b20tcHJvcGVydGllcy5pcy1jdXN0b20tcHJvcCgkdmFsdWUpIG9yXG4gICAgICBjdXN0b20tcHJvcGVydGllcy5pcy1jdXN0b20tcHJvcC1zdHJpbmcoJHZhbHVlKTtcbiAgICBAaWYgJGlzLXByb3Age1xuICAgICAgJHVuc3VwcG9ydGVkLWN1c3RvbS1wcm9wLWtleXM6IGxpc3QuYXBwZW5kKFxuICAgICAgICAkdW5zdXBwb3J0ZWQtY3VzdG9tLXByb3Ata2V5cyxcbiAgICAgICAgJGtleSxcbiAgICAgICAgJHNlcGFyYXRvcjogY29tbWFcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQGlmIGxpc3QubGVuZ3RoKCR1bnN1cHBvcnRlZC1rZXlzKSA+IDAge1xuICAgICRlcnJvci1tZXNzYWdlOiAnVW5zdXBwb3J0ZWQga2V5cyBmb3VuZDogI3skdW5zdXBwb3J0ZWQta2V5c30uIEV4cGVjdGVkIG9uZSBvZjogI3skb3JpZ2luLWtleXN9Lic7XG5cbiAgICBAaWYgJHRlc3Qtb25seSB7XG4gICAgICBjb250ZW50OiAkZXJyb3ItbWVzc2FnZTtcbiAgICB9IEBlbHNlIHtcbiAgICAgIEBlcnJvciAkZXJyb3ItbWVzc2FnZTtcbiAgICB9XG4gIH1cblxuICBAaWYgbGlzdC5sZW5ndGgoJHVuc3VwcG9ydGVkLWN1c3RvbS1wcm9wLWtleXMpID4gMCB7XG4gICAgJGVycm9yLW1lc3NhZ2U6ICdDdXN0b20gcHJvcGVydGllcyBhcmUgbm90IHN1cHBvcnRlZCBmb3IgdGhlbWUgbWFwIGtleXM6ICN7JHVuc3VwcG9ydGVkLWN1c3RvbS1wcm9wLWtleXN9JztcblxuICAgIEBpZiAkdGVzdC1vbmx5IHtcbiAgICAgIGNvbnRlbnQ6ICRlcnJvci1tZXNzYWdlO1xuICAgIH0gQGVsc2Uge1xuICAgICAgQGVycm9yICRlcnJvci1tZXNzYWdlO1xuICAgIH1cbiAgfVxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbkB1c2UgJ3Nhc3M6bGlzdCc7XG5AdXNlICdzYXNzOm1hcCc7XG5AdXNlICdzYXNzOm1ldGEnO1xuQHVzZSAnLi9nc3MnO1xuXG4vLy8gV2hlbiB0cnVlLCBhZGQgYW4gYWRkaXRpb25hbCBwcm9wZXJ0eS92YWx1ZSBkZWNsYXJhdGlvbiBiZWZvcmUgZGVjbGFyYXRpb25zXG4vLy8gdGhhdCB1c2UgYWR2YW5jZWQgZmVhdHVyZXMgc3VjaCBhcyBjdXN0b20gcHJvcGVydGllcyBvciBDU1MgZnVuY3Rpb25zLiBUaGlzXG4vLy8gYWRkcyBmYWxsYmFjayBzdXBwb3J0IGZvciBvbGRlciBicm93c2VycyBzdWNoIGFzIElFMTEgdGhhdCBkbyBub3Qgc3VwcG9ydFxuLy8vIHRoZXNlIGZlYXR1cmVzIGF0IHRoZSBjb3N0IG9mIGFkZGl0aW9uYWwgQ1NTLiBTZXQgdGhpcyB2YXJpYWJsZSB0byBmYWxzZSB0b1xuLy8vIGRpc2FibGUgZ2VuZXJhdGluZyBmYWxsYmFjayBkZWNsYXJhdGlvbnMuXG4kZW5hYmxlLWZhbGxiYWNrLWRlY2xhcmF0aW9uczogdHJ1ZSAhZGVmYXVsdDtcblxuLy8vIFdyaXRlcyBhIENTUyBwcm9wZXJ0eS92YWx1ZSBkZWNsYXJhdGlvbi4gVGhpcyBtaXhpbiBpcyB1c2VkIHRocm91Z2hvdXQgdGhlXG4vLy8gdGhlbWUgcGFja2FnZSBmb3IgY29uc2lzdGVuY3kgZm9yIGR5bmFtaWNhbGx5IHNldHRpbmcgQ1NTIHByb3BlcnR5IHZhbHVlcy5cbi8vL1xuLy8vIFRoaXMgbWl4aW4gbWF5IG9wdGlvbmFsbHkgdGFrZSBhIGZhbGxiYWNrIHZhbHVlLiBGb3IgYWR2YW5jZWQgZmVhdHVyZXMgc3VjaFxuLy8vIGFzIGN1c3RvbSBwcm9wZXJ0aWVzIG9yIENTUyBmdW5jdGlvbnMgbGlrZSBtaW4gYW5kIG1heCwgYSBmYWxsYmFjayB2YWx1ZSBpc1xuLy8vIHJlY29tbWVuZGVkIHRvIHN1cHBvcnQgb2xkZXIgYnJvd3NlcnMuXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJHByb3BlcnR5IC0gVGhlIENTUyBwcm9wZXJ0eSBvZiB0aGUgZGVjbGFyYXRpb24uXG4vLy8gQHBhcmFtIHsqfSAkdmFsdWUgLSBUaGUgdmFsdWUgb2YgdGhlIENTUyBkZWNsYXJhdGlvbi4gVGhlIHZhbHVlIHNob3VsZCBiZVxuLy8vICAgICByZXNvbHZlZCBieSBvdGhlciB0aGVtZSBmdW5jdGlvbnMgZmlyc3QgKGkuZS4gY3VzdG9tIHByb3BlcnR5IE1hcHMgYW5kXG4vLy8gICAgIE1hdGVyaWFsIHRoZW1lIGtleXMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gdGhpcyBtaXhpbikuIElmIHRoZSB2YWx1ZSBpc1xuLy8vICAgICBudWxsLCBubyBkZWNsYXJhdGlvbnMgd2lsbCBiZSBlbWl0dGVkLlxuLy8vIEBwYXJhbSB7Kn0gJGZhbGxiYWNrIC0gQW4gb3B0aW9uYWwgZmFsbGJhY2sgdmFsdWUgZm9yIG9sZGVyIGJyb3dzZXJzLiBJZlxuLy8vICAgICBwcm92aWRlZCwgYSBzZWNvbmQgcHJvcGVydHkvdmFsdWUgZGVjbGFyYXRpb24gd2lsbCBiZSBhZGRlZCBiZWZvcmUgdGhlXG4vLy8gICAgIG1haW4gcHJvcGVydHkvdmFsdWUgZGVjbGFyYXRpb24uXG4vLy8gQHBhcmFtIHtNYXB9ICRnc3MgLSBBbiBvcHRpb25hbCBNYXAgb2YgR1NTIGFubm90YXRpb25zIHRvIGFkZC5cbi8vLyBAcGFyYW0ge0Jvb2x9ICRpbXBvcnRhbnQgLSBJZiB0cnVlLCBhZGQgYCFpbXBvcnRhbnRgIHRvIHRoZSBkZWNsYXJhdGlvbi5cbkBtaXhpbiBkZWNsYXJhdGlvbihcbiAgJHByb3BlcnR5LFxuICAkdmFsdWUsXG4gICRmYWxsYmFjay12YWx1ZTogbnVsbCxcbiAgJGdzczogKCksXG4gICRpbXBvcnRhbnQ6IGZhbHNlXG4pIHtcbiAgLy8gTm9ybWFsbHkgc2V0dGluZyBhIG51bGwgdmFsdWUgdG8gYSBwcm9wZXJ0eSB3aWxsIG5vdCBlbWl0IENTUywgc28gbWl4aW5zXG4gIC8vIHdvdWxkbid0IG5lZWQgdG8gY2hlY2sgdGhpcy4gSG93ZXZlciwgU2FzcyB3aWxsIHRocm93IGFuIGVycm9yIGlmIHRoZVxuICAvLyBpbnRlcnBvbGF0ZWQgcHJvcGVydHkgaXMgYSBjdXN0b20gcHJvcGVydHkuXG4gIEBpZiAkdmFsdWUgIT0gbnVsbCB7XG4gICAgJGltcG9ydGFudC1ydWxlOiBpZigkaW1wb3J0YW50LCAnICFpbXBvcnRhbnQnLCAnJyk7XG5cbiAgICBAaWYgJGZhbGxiYWNrLXZhbHVlIGFuZCAkZW5hYmxlLWZhbGxiYWNrLWRlY2xhcmF0aW9ucyB7XG4gICAgICBAaW5jbHVkZSBnc3MuYW5ub3RhdGUoJGdzcyk7XG4gICAgICAjeyRwcm9wZXJ0eX06ICN7JGZhbGxiYWNrLXZhbHVlfSAjeyRpbXBvcnRhbnQtcnVsZX07XG5cbiAgICAgIC8vIEFkZCBAYWx0ZXJuYXRlIHRvIGFubm90YXRpb25zLlxuICAgICAgJGdzczogbWFwLm1lcmdlKFxuICAgICAgICAkZ3NzLFxuICAgICAgICAoXG4gICAgICAgICAgYWx0ZXJuYXRlOiB0cnVlLFxuICAgICAgICApXG4gICAgICApO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGdzcy5hbm5vdGF0ZSgkZ3NzKTtcbiAgICAjeyRwcm9wZXJ0eX06ICN7JHZhbHVlfSN7JGltcG9ydGFudC1ydWxlfTtcbiAgfVxufVxuXG4vLy8gVW5wYWNrcyBzaG9ydGhhbmQgdmFsdWVzIGZvciBDU1MgcHJvcGVydGllcyAoaS5lLiBsaXN0cyBvZiAxLTMgdmFsdWVzKS5cbi8vLyBJZiBhIGxpc3Qgb2YgNCB2YWx1ZXMgaXMgZ2l2ZW4sIGl0IGlzIHJldHVybmVkIGFzLWlzLlxuLy8vXG4vLy8gRXhhbXBsZXM6XG4vLy9cbi8vLyB1bnBhY2stdmFsdWUoNHB4KSA9PiA0cHggNHB4IDRweCA0cHhcbi8vLyB1bnBhY2stdmFsdWUoNHB4IDJweCkgPT4gNHB4IDJweCA0cHggMnB4XG4vLy8gdW5wYWNrLXZhbHVlKDRweCAycHggMnB4KSA9PiA0cHggMnB4IDJweCAycHhcbi8vLyB1bnBhY2stdmFsdWUoNHB4IDJweCAwIDJweCkgPT4gNHB4IDJweCAwIDJweFxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXIgfCBNYXAgfCBMaXN0fSAkdmFsdWUgLSBMaXN0IG9mIDEgdG8gNCB2YWx1ZSBudW1iZXJzLlxuLy8vIEByZXR1cm4ge0xpc3R9IGEgTGlzdCBvZiA0IHZhbHVlIG51bWJlcnMuXG5AZnVuY3Rpb24gdW5wYWNrLXZhbHVlKCR2YWx1ZSkge1xuICBAaWYgbWV0YS50eXBlLW9mKCR2YWx1ZSkgPT0gJ21hcCcgb3IgbGlzdC5sZW5ndGgoJHZhbHVlKSA9PSAxIHtcbiAgICBAcmV0dXJuICR2YWx1ZSAkdmFsdWUgJHZhbHVlICR2YWx1ZTtcbiAgfSBAZWxzZSBpZiBsaXN0Lmxlbmd0aCgkdmFsdWUpID09IDQge1xuICAgIEByZXR1cm4gJHZhbHVlO1xuICB9IEBlbHNlIGlmIGxpc3QubGVuZ3RoKCR2YWx1ZSkgPT0gMyB7XG4gICAgQHJldHVybiBsaXN0Lm50aCgkdmFsdWUsIDEpIGxpc3QubnRoKCR2YWx1ZSwgMikgbGlzdC5udGgoJHZhbHVlLCAzKVxuICAgICAgbGlzdC5udGgoJHZhbHVlLCAyKTtcbiAgfSBAZWxzZSBpZiBsaXN0Lmxlbmd0aCgkdmFsdWUpID09IDIge1xuICAgIEByZXR1cm4gbGlzdC5udGgoJHZhbHVlLCAxKSBsaXN0Lm50aCgkdmFsdWUsIDIpIGxpc3QubnRoKCR2YWx1ZSwgMSlcbiAgICAgIGxpc3QubnRoKCR2YWx1ZSwgMik7XG4gIH1cblxuICBAZXJyb3IgXCJJbnZhbGlkIENTUyBwcm9wZXJ0eSB2YWx1ZTogJyN7JHZhbHVlfScgaXMgbW9yZSB0aGFuIDQgdmFsdWVzXCI7XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuXG5cbkB1c2UgJ3Nhc3M6bWF0aCc7XG5AdXNlICdzYXNzOmxpc3QnO1xuQHVzZSAnc2FzczptYXAnO1xuQHVzZSAnc2FzczpzdHJpbmcnO1xuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9jdXN0b20tcHJvcGVydGllcyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUva2V5cyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUnO1xuXG4vLy8gQGRlcHJlY2F0ZWQgQXZvaWQgY2FsbGluZyB0aGlzIGZ1bmN0aW9uIGRpcmVjdGx5LiBJbnN0ZWFkLCBjb25maWd1cmUgdGhlXG4vLy8gYCRzdHlsZXMtPHN0eWxlPmAgdmFyaWFibGUgTWFwcy5cbkBmdW5jdGlvbiBzZXQtc3R5bGVzXygkYmFzZS1zdHlsZXMsICRzY2FsZS1zdHlsZXMsICRvdmVycmlkZS1zdHlsZXMpIHtcbiAgJG9wdGlvbnM6IChcbiAgICBjdXN0b20tcHJvcGVydHktcHJlZml4OiB0eXBvZ3JhcGh5LFxuICApO1xuXG4gICRiYXNlLXN0eWxlczoga2V5cy5zZXQtdmFsdWVzKCRiYXNlLXN0eWxlcywgJG9wdGlvbnM6ICRvcHRpb25zKTtcblxuICBAZWFjaCAkc3R5bGUsICRzdHlsZS1wcm9wcyBpbiAkc2NhbGUtc3R5bGVzIHtcbiAgICBAZWFjaCAkYmFzZS1rZXkgaW4gbWFwLmtleXMoJGJhc2Utc3R5bGVzKSB7XG4gICAgICAvLyBJZ25vcmUgdGhlIHJldHVybiByZXN1bHQsIGl0J3Mgbm90IG5lZWRlZFxuICAgICAgJHVudXNlZDoga2V5cy5hZGQtbGluayhrZXlzLmNvbWJpbmUoJHN0eWxlLCAkYmFzZS1rZXkpLCAkYmFzZS1rZXkpO1xuICAgIH1cblxuICAgIC8vIE1lcmdlIGJhc2UgcHJvcGVydGllcyBmb3IgYWxsIHN0eWxlcy5cbiAgICAkc3R5bGUtcHJvcHM6IG1hcC5tZXJnZSgkYmFzZS1zdHlsZXMsICRzdHlsZS1wcm9wcyk7XG5cbiAgICAvLyBNZXJnZSBvdmVycmlkZXMgb250byBlYWNoIHN0eWxlLlxuICAgICRzdHlsZS1wcm9wczogbWFwLm1lcmdlKCRzdHlsZS1wcm9wcywgbWFwLmdldCgkb3ZlcnJpZGUtc3R5bGVzLCAkc3R5bGUpKTtcblxuICAgIC8vIFJlZ2lzdGVyIGtleXMgZm9yIHRoaXMgc3R5bGVcbiAgICBAZWFjaCAkcHJvcGVydHksICR2YWx1ZSBpbiAkc3R5bGUtcHJvcHMge1xuICAgICAgJHVudXNlZDoga2V5cy5zZXQtdmFsdWUoXG4gICAgICAgIGtleXMuY29tYmluZSgkc3R5bGUsICRwcm9wZXJ0eSksXG4gICAgICAgICR2YWx1ZSxcbiAgICAgICAgJG9wdGlvbnM6ICRvcHRpb25zXG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIE92ZXJyaWRlIG9yaWdpbmFsIHN0eWxlcyB3aXRoIG5ldyBzdHlsZXMuXG4gICAgJHNjYWxlLXN0eWxlczogbWFwLm1lcmdlKCRzY2FsZS1zdHlsZXMsICgjeyRzdHlsZX06ICRzdHlsZS1wcm9wcykpO1xuICB9XG5cbiAgQHJldHVybiAkc2NhbGUtc3R5bGVzO1xufVxuXG5AZnVuY3Rpb24gZ2V0LWxldHRlci1zcGFjaW5nXygkdHJhY2tpbmcsICRmb250LXNpemUpIHtcbiAgQHJldHVybiBtYXRoLmRpdigkdHJhY2tpbmcsICRmb250LXNpemUgKiAxNikgKiAxZW07XG59XG5cbkBmdW5jdGlvbiBweC10by1yZW0oJHB4KSB7XG4gIEByZXR1cm4gbWF0aC5kaXYoJHB4LCAxNnB4KSAqIDFyZW07XG59XG5cbiRmb250LWZhbWlseTogc3RyaW5nLnVucXVvdGUoJ1JvYm90bywgc2Fucy1zZXJpZicpICFkZWZhdWx0O1xuXG4vLyBPdmVycmlkZSBzdHlsZXNcbiRzdHlsZXMtaGVhZGxpbmUxOiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtaGVhZGxpbmUyOiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtaGVhZGxpbmUzOiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtaGVhZGxpbmU0OiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtaGVhZGxpbmU1OiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtaGVhZGxpbmU2OiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtc3VidGl0bGUxOiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtc3VidGl0bGUyOiAoKSAhZGVmYXVsdDtcbiRzdHlsZXMtYm9keTE6ICgpICFkZWZhdWx0O1xuJHN0eWxlcy1ib2R5MjogKCkgIWRlZmF1bHQ7XG4kc3R5bGVzLWNhcHRpb246ICgpICFkZWZhdWx0O1xuJHN0eWxlcy1idXR0b246ICgpICFkZWZhdWx0O1xuJHN0eWxlcy1vdmVybGluZTogKCkgIWRlZmF1bHQ7XG5cbi8vLyBAZGVwcmVjYXRlZCBEbyBub3Qgb3ZlcnJpZGUgdGhpcyB2YXJpYWJsZS4gVXNlIHRoZSAkc3R5bGVzLTxzdHlsZT4gb3ZlcnJpZGVcbi8vLyBNYXAgdmFyaWFibGVzIGluc3RlYWQsIG9yICRmb250LWZhbWlseSB0byBzZXQgdGhlIGJhc2UgZm9udCBmYW1pbHkuXG4kYmFzZTogKFxuICBmb250LWZhbWlseTogJGZvbnQtZmFtaWx5LFxuKSAhZGVmYXVsdDtcblxuJGZvbnQtd2VpZ2h0LXZhbHVlczogKFxuICB0aGluOiAxMDAsXG4gIGxpZ2h0OiAzMDAsXG4gIHJlZ3VsYXI6IDQwMCxcbiAgbWVkaXVtOiA1MDAsXG4gIGJvbGQ6IDcwMCxcbiAgYmxhY2s6IDkwMCxcbikgIWRlZmF1bHQ7XG5cbi8vLyBAZGVwcmVjYXRlZCBEbyBub3Qgb3ZlcnJpZGUgdGhpcyB2YXJpYWJsZS4gVXNlIHRoZSAkc3R5bGVzLTxzdHlsZT4gb3ZlcnJpZGVcbi8vLyBNYXAgdmFyaWFibGVzIGluc3RlYWQuXG4kc3R5bGVzOiBzZXQtc3R5bGVzXyhcbiAgJGJhc2UsXG4gIChcbiAgICBoZWFkbGluZTE6IChcbiAgICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDk2cHgpLFxuICAgICAgbGluZS1oZWlnaHQ6IHB4LXRvLXJlbSg5NnB4KSxcbiAgICAgIGZvbnQtd2VpZ2h0OiBtYXAuZ2V0KCRmb250LXdlaWdodC12YWx1ZXMsIGxpZ2h0KSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBnZXQtbGV0dGVyLXNwYWNpbmdfKC0xLjUsIDYpLFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0LFxuICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQsXG4gICAgKSxcbiAgICBoZWFkbGluZTI6IChcbiAgICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDYwcHgpLFxuICAgICAgbGluZS1oZWlnaHQ6IHB4LXRvLXJlbSg2MHB4KSxcbiAgICAgIGZvbnQtd2VpZ2h0OiBtYXAuZ2V0KCRmb250LXdlaWdodC12YWx1ZXMsIGxpZ2h0KSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBnZXQtbGV0dGVyLXNwYWNpbmdfKC0wLjUsIDMuNzUpLFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0LFxuICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQsXG4gICAgKSxcbiAgICBoZWFkbGluZTM6IChcbiAgICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDQ4cHgpLFxuICAgICAgbGluZS1oZWlnaHQ6IHB4LXRvLXJlbSg1MHB4KSxcbiAgICAgIGZvbnQtd2VpZ2h0OiBtYXAuZ2V0KCRmb250LXdlaWdodC12YWx1ZXMsIHJlZ3VsYXIpLFxuICAgICAgbGV0dGVyLXNwYWNpbmc6IG5vcm1hbCxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0LFxuICAgICksXG4gICAgaGVhZGxpbmU0OiAoXG4gICAgICBmb250LXNpemU6IHB4LXRvLXJlbSgzNHB4KSxcbiAgICAgIGxpbmUtaGVpZ2h0OiBweC10by1yZW0oNDBweCksXG4gICAgICBmb250LXdlaWdodDogbWFwLmdldCgkZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBnZXQtbGV0dGVyLXNwYWNpbmdfKDAuMjUsIDIuMTI1KSxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0LFxuICAgICksXG4gICAgaGVhZGxpbmU1OiAoXG4gICAgICBmb250LXNpemU6IHB4LXRvLXJlbSgyNHB4KSxcbiAgICAgIGxpbmUtaGVpZ2h0OiBweC10by1yZW0oMzJweCksXG4gICAgICBmb250LXdlaWdodDogbWFwLmdldCgkZm9udC13ZWlnaHQtdmFsdWVzLCByZWd1bGFyKSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBub3JtYWwsXG4gICAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdCxcbiAgICApLFxuICAgIGhlYWRsaW5lNjogKFxuICAgICAgZm9udC1zaXplOiBweC10by1yZW0oMjBweCksXG4gICAgICBsaW5lLWhlaWdodDogcHgtdG8tcmVtKDMycHgpLFxuICAgICAgZm9udC13ZWlnaHQ6IG1hcC5nZXQoJGZvbnQtd2VpZ2h0LXZhbHVlcywgbWVkaXVtKSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBnZXQtbGV0dGVyLXNwYWNpbmdfKDAuMjUsIDEuMjUpLFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0LFxuICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQsXG4gICAgKSxcbiAgICBzdWJ0aXRsZTE6IChcbiAgICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDE2cHgpLFxuICAgICAgbGluZS1oZWlnaHQ6IHB4LXRvLXJlbSgyOHB4KSxcbiAgICAgIGZvbnQtd2VpZ2h0OiBtYXAuZ2V0KCRmb250LXdlaWdodC12YWx1ZXMsIHJlZ3VsYXIpLFxuICAgICAgbGV0dGVyLXNwYWNpbmc6IGdldC1sZXR0ZXItc3BhY2luZ18oMC4xNSwgMSksXG4gICAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdCxcbiAgICApLFxuICAgIHN1YnRpdGxlMjogKFxuICAgICAgZm9udC1zaXplOiBweC10by1yZW0oMTRweCksXG4gICAgICBsaW5lLWhlaWdodDogcHgtdG8tcmVtKDIycHgpLFxuICAgICAgZm9udC13ZWlnaHQ6IG1hcC5nZXQoJGZvbnQtd2VpZ2h0LXZhbHVlcywgbWVkaXVtKSxcbiAgICAgIGxldHRlci1zcGFjaW5nOiBnZXQtbGV0dGVyLXNwYWNpbmdfKDAuMSwgMC44NzUpLFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0LFxuICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQsXG4gICAgKSxcbiAgICBib2R5MTogKFxuICAgICAgZm9udC1zaXplOiBweC10by1yZW0oMTZweCksXG4gICAgICBsaW5lLWhlaWdodDogcHgtdG8tcmVtKDI0cHgpLFxuICAgICAgZm9udC13ZWlnaHQ6IG1hcC5nZXQoJGZvbnQtd2VpZ2h0LXZhbHVlcywgcmVndWxhciksXG4gICAgICBsZXR0ZXItc3BhY2luZzogZ2V0LWxldHRlci1zcGFjaW5nXygwLjUsIDEpLFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBpbmhlcml0LFxuICAgICAgdGV4dC10cmFuc2Zvcm06IGluaGVyaXQsXG4gICAgKSxcbiAgICBib2R5MjogKFxuICAgICAgZm9udC1zaXplOiBweC10by1yZW0oMTRweCksXG4gICAgICBsaW5lLWhlaWdodDogcHgtdG8tcmVtKDIwcHgpLFxuICAgICAgZm9udC13ZWlnaHQ6IG1hcC5nZXQoJGZvbnQtd2VpZ2h0LXZhbHVlcywgcmVndWxhciksXG4gICAgICBsZXR0ZXItc3BhY2luZzogZ2V0LWxldHRlci1zcGFjaW5nXygwLjI1LCAwLjg3NSksXG4gICAgICB0ZXh0LWRlY29yYXRpb246IGluaGVyaXQsXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogaW5oZXJpdCxcbiAgICApLFxuICAgIGNhcHRpb246IChcbiAgICAgIGZvbnQtc2l6ZTogcHgtdG8tcmVtKDEycHgpLFxuICAgICAgbGluZS1oZWlnaHQ6IHB4LXRvLXJlbSgyMHB4KSxcbiAgICAgIGZvbnQtd2VpZ2h0OiBtYXAuZ2V0KCRmb250LXdlaWdodC12YWx1ZXMsIHJlZ3VsYXIpLFxuICAgICAgbGV0dGVyLXNwYWNpbmc6IGdldC1sZXR0ZXItc3BhY2luZ18oMC40LCAwLjc1KSxcbiAgICAgIHRleHQtZGVjb3JhdGlvbjogaW5oZXJpdCxcbiAgICAgIHRleHQtdHJhbnNmb3JtOiBpbmhlcml0LFxuICAgICksXG4gICAgYnV0dG9uOiAoXG4gICAgICBmb250LXNpemU6IHB4LXRvLXJlbSgxNHB4KSxcbiAgICAgIGxpbmUtaGVpZ2h0OiBweC10by1yZW0oMzZweCksXG4gICAgICBmb250LXdlaWdodDogbWFwLmdldCgkZm9udC13ZWlnaHQtdmFsdWVzLCBtZWRpdW0pLFxuICAgICAgbGV0dGVyLXNwYWNpbmc6IGdldC1sZXR0ZXItc3BhY2luZ18oMS4yNSwgMC44NzUpLFxuICAgICAgdGV4dC1kZWNvcmF0aW9uOiBub25lLFxuICAgICAgdGV4dC10cmFuc2Zvcm06IHVwcGVyY2FzZSxcbiAgICApLFxuICAgIG92ZXJsaW5lOiAoXG4gICAgICBmb250LXNpemU6IHB4LXRvLXJlbSgxMnB4KSxcbiAgICAgIGxpbmUtaGVpZ2h0OiBweC10by1yZW0oMzJweCksXG4gICAgICBmb250LXdlaWdodDogbWFwLmdldCgkZm9udC13ZWlnaHQtdmFsdWVzLCBtZWRpdW0pLFxuICAgICAgbGV0dGVyLXNwYWNpbmc6IGdldC1sZXR0ZXItc3BhY2luZ18oMiwgMC43NSksXG4gICAgICB0ZXh0LWRlY29yYXRpb246IG5vbmUsXG4gICAgICB0ZXh0LXRyYW5zZm9ybTogdXBwZXJjYXNlLFxuICAgICksXG4gICksXG4gIChcbiAgICBoZWFkbGluZTE6ICRzdHlsZXMtaGVhZGxpbmUxLFxuICAgIGhlYWRsaW5lMjogJHN0eWxlcy1oZWFkbGluZTIsXG4gICAgaGVhZGxpbmUzOiAkc3R5bGVzLWhlYWRsaW5lMyxcbiAgICBoZWFkbGluZTQ6ICRzdHlsZXMtaGVhZGxpbmU0LFxuICAgIGhlYWRsaW5lNTogJHN0eWxlcy1oZWFkbGluZTUsXG4gICAgaGVhZGxpbmU2OiAkc3R5bGVzLWhlYWRsaW5lNixcbiAgICBzdWJ0aXRsZTE6ICRzdHlsZXMtc3VidGl0bGUxLFxuICAgIHN1YnRpdGxlMjogJHN0eWxlcy1zdWJ0aXRsZTIsXG4gICAgYm9keTE6ICRzdHlsZXMtYm9keTEsXG4gICAgYm9keTI6ICRzdHlsZXMtYm9keTIsXG4gICAgY2FwdGlvbjogJHN0eWxlcy1jYXB0aW9uLFxuICAgIGJ1dHRvbjogJHN0eWxlcy1idXR0b24sXG4gICAgb3ZlcmxpbmU6ICRzdHlsZXMtb3ZlcmxpbmUsXG4gIClcbikgIWRlZmF1bHQ7XG5cbi8vIEEgY29weSBvZiB0aGUgc3R5bGVzIE1hcCB0aGF0IGlzIHVzZWQgdG8gZGV0ZWN0IGNvbXBpbGUtdGltZSBjaGFuZ2VzIGZvclxuLy8gQW5ndWxhciBzdXBwb3J0LlxuJF9zdHlsZXMtY29weTogJHN0eWxlcztcblxuQGZ1bmN0aW9uIGlzLXR5cG9ncmFwaHktc3R5bGUoJHN0eWxlKSB7XG4gIEByZXR1cm4gbWFwLmhhcy1rZXkoJHN0eWxlcywgJHN0eWxlKTtcbn1cblxuQGZ1bmN0aW9uIGdldC10eXBvZ3JhcGh5LXN0eWxlcygpIHtcbiAgQHJldHVybiBtYXAua2V5cygkc3R5bGVzKTtcbn1cblxuQG1peGluIGNvcmUtc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgLm1kYy10eXBvZ3JhcGh5IHtcbiAgICBAaW5jbHVkZSBiYXNlKCRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxuXG4gIEBlYWNoICRzdHlsZSBpbiBnZXQtdHlwb2dyYXBoeS1zdHlsZXMoKSB7XG4gICAgLm1kYy10eXBvZ3JhcGh5LS0jeyRzdHlsZX0ge1xuICAgICAgQGluY2x1ZGUgdHlwb2dyYXBoeSgkc3R5bGUsICRxdWVyeTogJHF1ZXJ5KTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGJhc2UoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC10eXBvZ3JhcGh5OiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgdHlwb2dyYXBoeSk7XG5cbiAgQGluY2x1ZGUgc21vb3RoLWZvbnQoJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXR5cG9ncmFwaHkpIHtcbiAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShmb250LWZhbWlseSwgZm9udC1mYW1pbHkpO1xuICB9XG59XG5cbkBtaXhpbiB0eXBvZ3JhcGh5KCRzdHlsZSwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSwgJGV4Y2x1ZGUtcHJvcHM6ICgpKSB7XG4gICRmZWF0LXR5cG9ncmFwaHk6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCB0eXBvZ3JhcGh5KTtcblxuICBAaWYgbm90IGlzLXR5cG9ncmFwaHktc3R5bGUoJHN0eWxlKSB7XG4gICAgQGVycm9yIFwiSW52YWxpZCBzdHlsZSBzcGVjaWZpZWQhICN7JHN0eWxlfSBkb2Vzbid0IGV4aXN0LiBDaG9vc2Ugb25lIG9mICN7Z2V0LXR5cG9ncmFwaHktc3R5bGVzKCl9XCI7XG4gIH1cblxuICBAaW5jbHVkZSBzbW9vdGgtZm9udCgkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtdHlwb2dyYXBoeSkge1xuICAgIEBlYWNoICRrZXkgaW4ga2V5cy5nZXQta2V5cygkc3R5bGUpIHtcbiAgICAgIC8vIDxzdHlsZT4tPHByb3BlcnR5PjogaGVhZGxpbmUxLWZvbnQtc2l6ZVxuICAgICAgLy8gU2xpY2UgdGhlIHN0cmluZyBwYXN0IHRoZSBmaXJzdCBrZXkgc2VwYXJhdG9yIHRvIHJldHJpZXZlIHRoZVxuICAgICAgLy8gcHJvcGVydHkgbmFtZVxuICAgICAgJHByb3BlcnR5OiBzdHJpbmcuc2xpY2UoJGtleSwgc3RyaW5nLmluZGV4KCRrZXksICctJykgKyAxKTtcbiAgICAgIEBpZiBsaXN0LmluZGV4KCRleGNsdWRlLXByb3BzLCAkcHJvcGVydHkpID09IG51bGwge1xuICAgICAgICAkY3VycmVudC1nbG9iYWwtdmFsdWU6IG1hcC5nZXQoJHN0eWxlcywgJHN0eWxlLCAkcHJvcGVydHkpO1xuICAgICAgICAkY29uZmlndXJlZC1nbG9iYWwtdmFsdWU6IG1hcC5nZXQoJF9zdHlsZXMtY29weSwgJHN0eWxlLCAkcHJvcGVydHkpO1xuICAgICAgICBAaWYgJGN1cnJlbnQtZ2xvYmFsLXZhbHVlICE9ICRjb25maWd1cmVkLWdsb2JhbC12YWx1ZSB7XG4gICAgICAgICAgLy8gQSBjb21waWxlIHRpbWUgY2hhbmdlIHdhcyBtYWRlIHRvICRtZGMtdHlwb2dyYXBoeS1zdHlsZXMuIFRvXG4gICAgICAgICAgLy8gc3VwcG9ydCBBbmd1bGFyLCB1c2UgdGhpcyB2YWx1ZSBpbnN0ZWFkIG9mIHRoZSBrZXkncyB2YWx1ZS5cbiAgICAgICAgICBAaWYgJGN1cnJlbnQtZ2xvYmFsLXZhbHVlIHtcbiAgICAgICAgICAgIC8vIE9ubHkgZW1pdCBpZiB0aGUgb3ZlcnJpZGRlbiB2YWx1ZSBleGlzdHNcbiAgICAgICAgICAgICRjdXN0b20tcHJvcDoga2V5cy5jcmVhdGUtY3VzdG9tLXByb3BlcnR5KCRrZXkpO1xuICAgICAgICAgICAgJGN1c3RvbS1wcm9wOiBjdXN0b20tcHJvcGVydGllcy5zZXQtZmFsbGJhY2soXG4gICAgICAgICAgICAgICRjdXN0b20tcHJvcCxcbiAgICAgICAgICAgICAgJGN1cnJlbnQtZ2xvYmFsLXZhbHVlXG4gICAgICAgICAgICApO1xuICAgICAgICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoJHByb3BlcnR5LCAkY3VzdG9tLXByb3ApO1xuICAgICAgICAgIH1cbiAgICAgICAgfSBAZWxzZSB7XG4gICAgICAgICAgLy8gT3RoZXJ3aXNlLCB1c2UgdGhlIGtleSwgd2hpY2ggbWF5IGJlIGRpZmZlcmVudCBmcm9tIHRoZSBvcmlnaW5hbFxuICAgICAgICAgIC8vIGNvbmZpZ3VyZWQgZ2xvYmFsIHZhbHVlLlxuICAgICAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KCRwcm9wZXJ0eSwgJGtleSk7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vIEFwcGxpZXMgYW50aWFsaWFzaW5nIHZpYSBmb250LXNtb290aGluZyB0byB0ZXh0LlxuQG1peGluIHNtb290aC1mb250KCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtdHlwb2dyYXBoeTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHR5cG9ncmFwaHkpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtdHlwb2dyYXBoeSkge1xuICAgIC1tb3otb3N4LWZvbnQtc21vb3RoaW5nOiBncmF5c2NhbGU7XG4gICAgLXdlYmtpdC1mb250LXNtb290aGluZzogYW50aWFsaWFzZWQ7XG4gIH1cbn1cblxuLy8gRWxlbWVudCBtdXN0IGJlIGBkaXNwbGF5OiBibG9ja2Agb3IgYGRpc3BsYXk6IGlubGluZS1ibG9ja2AgZm9yIHRoaXMgdG8gd29yay5cbkBtaXhpbiBvdmVyZmxvdy1lbGxpcHNpcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cbn1cblxuLy8vIFNldHMgYSBjb250YWluZXIncyBiYXNlbGluZSB0aGF0IHRleHQgY29udGVudCB3aWxsIGFsaWduIHRvLlxuLy8vXG4vLy8gSWYgdGhlIGAkZGlzcGxheWAgaXMgc2V0IHRvIGEgZmxleGJveCBkaXNwbGF5LCBvbmx5IGAkdG9wYCBiYXNlbGluZSBtYXkgYmVcbi8vLyBzZXQuIEEgc2VwYXJhdGUgZWxlbWVudCBtdXN0IGJlIGFkZGVkIGFzIGEgY2hpbGQgb2YgdGhlIGNvbnRhaW5lciB3aXRoIGFcbi8vLyBgJGJvdHRvbWAgYmFzZWxpbmUuXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJHRvcCAtIHRoZSBkaXN0YW5jZSBmcm9tIHRoZSB0b3Agb2YgdGhlIGNvbnRhaW5lciB0byB0aGVcbi8vLyAgICAgdGV4dCdzIGJhc2VsaW5lLlxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkYm90dG9tIC0gdGhlIGRpc3RhbmNlIGZyb20gdGhlIHRleHQncyBiYXNlbGluZSB0byB0aGVcbi8vLyAgICAgYm90dG9tIG9mIHRoZSBjb250YWluZXIuXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRkaXNwbGF5IC0gdGhlIGRpc3BsYXkgdHlwZSBvZiB0aGUgY29udGFpbmVyLiBNYXkgYmUgYGZsZXhgLFxuLy8vICAgICBgaW5saW5lLWZsZXhgLCBgYmxvY2tgLCBvciBgaW5saW5lLWJsb2NrYC5cbkBtaXhpbiBiYXNlbGluZShcbiAgJHRvcDogMCxcbiAgJGJvdHRvbTogMCxcbiAgJGRpc3BsYXk6IGJsb2NrLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJHZhbGlkRGlzcGxheVR5cGVzOiAoZmxleCwgaW5saW5lLWZsZXgsIGJsb2NrLCBpbmxpbmUtYmxvY2spO1xuXG4gIEBpZiBsaXN0LmluZGV4KCR2YWxpZERpc3BsYXlUeXBlcywgJGRpc3BsYXkpID09IG51bGwge1xuICAgIEBlcnJvciBcIm1kYy10eXBvZ3JhcGh5OiBpbnZhbGlkIGRpc3BsYXkgc3BlY2lmaWVkISAjeyRkaXNwbGF5fSBtdXN0IGJlIG9uZSBvZiAjeyR2YWxpZERpc3BsYXlUeXBlc31cIjtcbiAgfVxuXG4gICRpc0ZsZXhib3g6ICRkaXNwbGF5ID09ICdmbGV4JyBvciAkZGlzcGxheSA9PSAnaW5saW5lLWZsZXgnO1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgZGlzcGxheTogJGRpc3BsYXk7XG5cbiAgICBAaWYgJGlzRmxleGJveCB7XG4gICAgICBhbGlnbi1pdGVtczogYmFzZWxpbmU7XG4gICAgfVxuICB9XG5cbiAgQGlmICR0b3AgPiAwIHtcbiAgICBAaW5jbHVkZSBiYXNlbGluZS10b3AoJHRvcCwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgQGlmICRib3R0b20gPiAwIHtcbiAgICBAaWYgJGlzRmxleGJveCB7XG4gICAgICBAZXJyb3IgXCJtZGMtdHlwb2dyYXBoeTogaW52YWxpZCBiYXNlbGluZSB3aXRoIGRpc3BsYXkgdHlwZS4gI3skZGlzcGxheX0gY2Fubm90IHNwZWNpZml5ICRib3R0b20uIEFkZCBhIHNlcGFyYXRlIGNoaWxkIGVsZW1lbnQgd2l0aCBpdHMgb3duICRib3R0b20uXCI7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgYmFzZWxpbmUtYm90dG9tKCRib3R0b20sICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy8gU2V0cyB0aGUgYmFzZWxpbmUgb2YgZmxvdyB0ZXh0IGNvbnRlbnQuXG4vLy9cbi8vLyBTZXBhcmF0ZSBgJHRvcGAgYW5kIGAkYm90dG9tYCBiYXNlbGluZXMgbWF5IGJlIHNwZWNpZmllZC4gWW91IHNob3VsZCBlbnN1cmVcbi8vLyB0aGF0IHRoZSBgJHRvcGAgYmFzZWxpbmUgbWF0Y2hlcyB0aGUgcHJldmlvdXMgdGV4dCBjb250ZW50J3MgJGJvdHRvbVxuLy8vIGJhc2VsaW5lIHRvIGVuc3VyZSB0ZXh0IGlzIHBvc2l0aW9uZWQgYXBwcm9wcmlhdGVseS5cbi8vL1xuLy8vIFNlZSBnby9jc3MtYmFzZWxpbmUgZm9yIHJlZmVyZW5jZSBvbiBob3cgdGhpcyBtaXhpbiB3b3Jrcy5cbi8vL1xuLy8vIFRoaXMgaXMgaW50ZW5kZWQgZm9yIHRleHQgZmxvdyBjb250ZW50IG9ubHkgKGUuZy4gYDxoMT5gLCBgPHA+YCwgYDxzcGFuPmAsXG4vLy8gb3IgYDxkaXY+YCB3aXRoIG9ubHkgdGV4dCBjb250ZW50KS4gVXNlIGBiYXNlbGluZSgpYCB0byBzZXQgdGhlIGJhc2VsaW5lIG9mXG4vLy8gY29udGFpbmVycyB0aGF0IGFyZSBmbGV4Ym94IG9yIGhhdmUgbm9uLWZsb3cgY29udGVudCBjaGlsZHJlbi5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkdG9wIC0gdGhlIGRpc3RhbmNlIGZyb20gdGhlIHRvcCBvZiB0aGUgY29udGFpbmVyIHRvIHRoZVxuLy8vICAgICB0ZXh0J3MgYmFzZWxpbmUuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRib3R0b20gLSB0aGUgZGlzdGFuY2UgZnJvbSB0aGUgdGV4dCdzIGJhc2VsaW5lIHRvIHRoZVxuLy8vICAgICBib3R0b20gb2YgdGhlIGNvbnRhaW5lci5cbi8vLyBAcGFyYW0ge0Jvb2xlYW59ICRsaW5lSGVpZ2h0IC0gdGhlIGxpbmUtaGVpZ2h0IHRvIHVzZSBmb3IgdGhlIHRleHQuIFRoaXNcbi8vLyAgICAgaXMgdGhlIGRpc3RhbmNlIGJldHdlZW4gYmFzZWxpbmVzIG9mIG11bHRpcGxlIGxpbmVzIG9mIHRleHQuXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRkaXNwbGF5IC0gdGhlIGRpc3BsYXkgdHlwZSBvZiB0aGUgY29udGFpbmVyLiBNYXkgYmUgYGJsb2NrYFxuLy8vICAgICBvciBgaW5saW5lLWJsb2NrYC5cbkBtaXhpbiB0ZXh0LWJhc2VsaW5lKFxuICAkdG9wOiAwLFxuICAkYm90dG9tOiAwLFxuICAkZGlzcGxheTogYmxvY2ssXG4gICRsaW5lSGVpZ2h0OiBub3JtYWwsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkdmFsaWREaXNwbGF5VHlwZXM6IChibG9jaywgaW5saW5lLWJsb2NrKTtcblxuICBAaWYgbGlzdC5pbmRleCgkdmFsaWREaXNwbGF5VHlwZXMsICRkaXNwbGF5KSA9PSBudWxsIHtcbiAgICBAZXJyb3IgXCJtZGMtdHlwb2dyYXBoeTogaW52YWxpZCBkaXNwbGF5IHNwZWNpZmllZCEgI3skZGlzcGxheX0gbXVzdCBiZSBvbmUgb2YgI3skdmFsaWREaXNwbGF5VHlwZXN9XCI7XG4gIH1cblxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGJhc2VsaW5lKFxuICAgICRkaXNwbGF5OiAkZGlzcGxheSxcbiAgICAkdG9wOiAkdG9wLFxuICAgICRib3R0b206ICRib3R0b20sXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBAaWYgJHRvcCA+IDAge1xuICAgICAgbWFyZ2luLXRvcDogMDtcbiAgICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICAgIGxpbmUtaGVpZ2h0OiAjeyRsaW5lSGVpZ2h0fTtcbiAgICB9XG5cbiAgICBAaWYgJGJvdHRvbSA+IDAge1xuICAgICAgbWFyZ2luLWJvdHRvbTogLTEgKiAkYm90dG9tO1xuICAgIH1cbiAgfVxufVxuXG4vLy8gQ3JlYXRlcyBhIGJhc2VsaW5lIHN0cnV0IGZyb20gdGhlIHRvcCBvZiBhIGNvbnRhaW5lci4gVGhpcyBtaXhpbiBpcyBmb3Jcbi8vLyBhZHZhbmNlZCB1c2VycywgcHJlZmVyIGBiYXNlbGluZSgpYC5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkZGlzdGFuY2UgLSBUaGUgZGlzdGFuY2UgZnJvbSB0aGUgdG9wIG9mIHRoZSBjb250YWluZXIgdG9cbi8vLyAgICAgdGhlIHRleHQncyBiYXNlbGluZS5cbkBtaXhpbiBiYXNlbGluZS10b3AoJGRpc3RhbmNlLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgJjo6YmVmb3JlIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgQGluY2x1ZGUgYmFzZWxpbmUtc3RydXRfKCRkaXN0YW5jZSk7XG5cbiAgICAgIHZlcnRpY2FsLWFsaWduOiAwO1xuICAgIH1cbiAgfVxufVxuXG4vLy8gQ3JlYXRlcyBhIGJhc2VsaW5lIHN0cnV0IGZyb20gdGhlIGJhc2VsaW5lIHRvIHRoZSBib3R0b20gb2YgYSBjb250YWluZXIuXG4vLy8gVGhpcyBtaXhpbiBpcyBmb3IgYWR2YW5jZWQgdXNlcnMsIHByZWZlciBgYmFzZWxpbmUoKWAuXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJGRpc3RhbmNlIC0gVGhlIGRpc3RhbmNlIGZyb20gdGhlIHRleHQncyBiYXNlbGluZSB0byB0aGVcbi8vLyAgICAgYm90dG9tIG9mIHRoZSBjb250YWluZXIuXG5AbWl4aW4gYmFzZWxpbmUtYm90dG9tKCRkaXN0YW5jZSwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gICY6OmFmdGVyIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgQGluY2x1ZGUgYmFzZWxpbmUtc3RydXRfKCRkaXN0YW5jZSk7XG5cbiAgICAgIHZlcnRpY2FsLWFsaWduOiAtMSAqICRkaXN0YW5jZTtcbiAgICB9XG4gIH1cbn1cblxuLy8vIEFkZHMgYW4gaW52aXNpYmxlLCB6ZXJvLXdpZHRoIHByZWZpeCB0byBhIGNvbnRhaW5lcidzIHRleHQuXG4vLy8gVGhpcyBlbnN1cmVzIHRoYXQgdGhlIGJhc2VsaW5lIGlzIGFsd2F5cyB3aGVyZSB0aGUgdGV4dCB3b3VsZCBiZSwgaW5zdGVhZFxuLy8vIG9mIGRlZmF1bHRpbmcgdG8gdGhlIGNvbnRhaW5lciBib3R0b20gd2hlbiB0ZXh0IGlzIGVtcHR5LiBEbyBub3QgdXNlIHRoaXNcbi8vLyBtaXhpbiBpZiB0aGUgYGJhc2VsaW5lYCBtaXhpbiBpcyBhbHJlYWR5IGFwcGxpZWQuXG5AbWl4aW4gemVyby13aWR0aC1wcmVmaXgoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gICY6OmJlZm9yZSB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIGNvbnRlbnQ6ICdcXDIwMGInO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gYmFzZWxpbmUtc3RydXRfKCRkaXN0YW5jZSkge1xuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHdpZHRoOiAwO1xuICBoZWlnaHQ6ICRkaXN0YW5jZTtcbiAgY29udGVudDogJyc7XG59XG5cbkBmdW5jdGlvbiBnZXQtZm9udCgkdHlwb2dyYXBoeSkge1xuICBAcmV0dXJuIG1hcC5nZXQoJHN0eWxlcywgJHR5cG9ncmFwaHksIGZvbnQtZmFtaWx5KTtcbn1cblxuQGZ1bmN0aW9uIGdldC1saW5lLWhlaWdodCgkdHlwb2dyYXBoeSkge1xuICBAcmV0dXJuIG1hcC5nZXQoJHN0eWxlcywgJHR5cG9ncmFwaHksIGxpbmUtaGVpZ2h0KTtcbn1cblxuQGZ1bmN0aW9uIGdldC1zaXplKCR0eXBvZ3JhcGh5KSB7XG4gIEByZXR1cm4gbWFwLmdldCgkc3R5bGVzLCAkdHlwb2dyYXBoeSwgZm9udC1zaXplKTtcbn1cblxuQGZ1bmN0aW9uIGdldC13ZWlnaHQoJHR5cG9ncmFwaHkpIHtcbiAgQHJldHVybiBtYXAuZ2V0KCRzdHlsZXMsICR0eXBvZ3JhcGh5LCBmb250LXdlaWdodCk7XG59XG5cbkBmdW5jdGlvbiBnZXQtdHJhY2tpbmcoJHR5cG9ncmFwaHkpIHtcbiAgQHJldHVybiBtYXAuZ2V0KCRzdHlsZXMsICR0eXBvZ3JhcGh5LCBsZXR0ZXItc3BhY2luZyk7XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTkgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuXG5cbkB1c2UgJ3Nhc3M6bWF0aCc7XG5AdXNlICdAbWF0ZXJpYWwvYmFzZS9taXhpbnMnIGFzIGJhc2UtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcblxuJGhlaWdodDogNDhweCAhZGVmYXVsdDtcbiR3aWR0aDogJGhlaWdodCAhZGVmYXVsdDtcblxuLy8vIFN0eWxlcyBhcHBsaWVkIHRvIHRoZSBjb21wb25lbnQncyB0b3VjaCB0YXJnZXQgd3JhcHBlciBlbGVtZW50LlxuQG1peGluIHdyYXBwZXIoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC5tZGMtdG91Y2gtdGFyZ2V0LXdyYXBwZXIge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAvLyBFbnN1cmUgdGhhdCBzdHlsZXMgYXJlIG9ubHkgZW1pdHRlZCBvbmNlIGFjcm9zcyBhbGwgY29tcG9uZW50cyB0aGF0XG4gICAgICAvLyBoYXZlIGluY3JlYXNlZCB0b3VjaCB0YXJnZXRzLlxuICAgICAgQGluY2x1ZGUgYmFzZS1taXhpbnMuZW1pdC1vbmNlKCdtZGMtdG91Y2gtdGFyZ2V0L3dyYXBwZXInKSB7XG4gICAgICAgIC8vIE5PVEU6IFdpbGwgY2hhbmdlIHRvIGBpbmxpbmUtYmxvY2tgIGluIHRoZSBmdXR1cmUsIGJ1dCBrZWVwaW5nIGFzIGlzXG4gICAgICAgIC8vIHRlbXBvcmFyaWx5IGZvciBiYWNrd2FyZHMtY29tcGF0aWJpbGl0eS5cbiAgICAgICAgZGlzcGxheTogaW5saW5lO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLy8gU3R5bGVzIGFwcGxpZWQgdG8gdGhlIGNvbXBvbmVudCdzIGlubmVyIHRvdWNoIHRhcmdldCBlbGVtZW50LlxuLy8vIEJ5IGRlZmF1bHQsIG9ubHkgc2V0cyB0aGUgaW5uZXIgZWxlbWVudCBoZWlnaHQgdG8gdGhlIG1pbmltdW0gdG91Y2ggdGFyZ2V0XG4vLy8gaGVpZ2h0ICgkbWRjLXRvdWNoLXRhcmdldC1oZWlnaHQpLlxuLy8vIEBwYXJhbSB7Qm9vbGVhbn0gJHNldC13aWR0aCBbZmFsc2VdIC0gU2V0cyB0aGUgaW5uZXIgZWxlbWVudCB3aWR0aCB0byB0aGVcbi8vLyAgICAgbWluaW11bSB0b3VjaCB0YXJnZXQgd2lkdGggKCRtZGMtdG91Y2gtdGFyZ2V0LXdpZHRoKS5cbkBtaXhpbiB0b3VjaC10YXJnZXQoJHNldC13aWR0aDogZmFsc2UsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDUwJTtcbiAgICBoZWlnaHQ6ICRoZWlnaHQ7XG4gIH1cblxuICBAaWYgJHNldC13aWR0aCB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgIGxlZnQ6IDUwJTtcbiAgICAgIHdpZHRoOiAkd2lkdGg7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICB9XG4gIH0gQGVsc2Uge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBsZWZ0OiAwO1xuICAgICAgcmlnaHQ6IDA7XG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTUwJSk7XG4gICAgfVxuICB9XG59XG5cbi8vLyBBcHBsaWVzIG1hcmdpbiB0byB0aGUgY29tcG9uZW50IHdpdGggdGhlIGluY3JlYXNlZCB0b3VjaCB0YXJnZXQsXG4vLy8gdG8gY29tcGVuc2F0ZSBmb3IgdGhlIHRvdWNoIHRhcmdldC5cbkBtaXhpbiBtYXJnaW4oXG4gICRjb21wb25lbnQtaGVpZ2h0LFxuICAkY29tcG9uZW50LXdpZHRoOiBudWxsLFxuICAkdG91Y2gtdGFyZ2V0LWhlaWdodDogJGhlaWdodCxcbiAgJHRvdWNoLXRhcmdldC13aWR0aDogJHdpZHRoLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAkdmVydGljYWwtbWFyZ2luLXZhbHVlOiBtYXRoLmRpdigkdG91Y2gtdGFyZ2V0LWhlaWdodCAtICRjb21wb25lbnQtaGVpZ2h0LCAyKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIG1hcmdpbi10b3A6ICR2ZXJ0aWNhbC1tYXJnaW4tdmFsdWU7XG4gICAgbWFyZ2luLWJvdHRvbTogJHZlcnRpY2FsLW1hcmdpbi12YWx1ZTtcbiAgfVxuXG4gIEBpZiAkY29tcG9uZW50LXdpZHRoIHtcbiAgICAkaG9yaXpvbnRhbC1tYXJnaW4tdmFsdWU6IG1hdGguZGl2KFxuICAgICAgJHRvdWNoLXRhcmdldC13aWR0aCAtICRjb21wb25lbnQtd2lkdGgsXG4gICAgICAyXG4gICAgKTtcblxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBtYXJnaW4tcmlnaHQ6ICRob3Jpem9udGFsLW1hcmdpbi12YWx1ZTtcbiAgICAgIG1hcmdpbi1sZWZ0OiAkaG9yaXpvbnRhbC1tYXJnaW4tdmFsdWU7XG4gICAgfVxuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuXG5cbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9jdXN0b20tcHJvcGVydGllcyc7XG5AdXNlICdAbWF0ZXJpYWwvYmFzZS9taXhpbnMnIGFzIGJhc2UtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUtY29sb3InO1xuQHVzZSAnLi9lbGV2YXRpb24tdGhlbWUnO1xuXG5AbWl4aW4gY29yZS1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1hbmltYXRpb246IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBmb3IgJHotdmFsdWUgZnJvbSAwIHRocm91Z2ggMjQge1xuICAgIC5tZGMtZWxldmF0aW9uLS16I3skei12YWx1ZX0ge1xuICAgICAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLmVsZXZhdGlvbigkei12YWx1ZSwgJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtZWxldmF0aW9uLXRyYW5zaXRpb24ge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgICB0cmFuc2l0aW9uOiBlbGV2YXRpb24tdGhlbWUudHJhbnNpdGlvbi12YWx1ZSgpO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICB3aWxsLWNoYW5nZTogZWxldmF0aW9uLXRoZW1lLiRwcm9wZXJ0eTtcbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gQ2FsbGVkIG9uY2UgcGVyIGFwcGxpY2F0aW9uIHRvIHNldCB1cCB0aGUgZ2xvYmFsIGRlZmF1bHQgZWxldmF0aW9uIHN0eWxlcy5cbi8vL1xuQG1peGluIG92ZXJsYXktY29tbW9uKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAubWRjLWVsZXZhdGlvbi1vdmVybGF5IHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgQGluY2x1ZGUgYmFzZS1taXhpbnMuZW1pdC1vbmNlKCdtZGMtZWxldmF0aW9uL2NvbW1vbi9zdHJ1Y3R1cmUnKSB7XG4gICAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgICAgYm9yZGVyLXJhZGl1czogaW5oZXJpdDtcbiAgICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG5cbiAgICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoXG4gICAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgICBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoLS1tZGMtZWxldmF0aW9uLW92ZXJsYXktb3BhY2l0eSwgMClcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgICAgQGluY2x1ZGUgYmFzZS1taXhpbnMuZW1pdC1vbmNlKCdtZGMtZWxldmF0aW9uL2NvbW1vbi9hbmltYXRpb24nKSB7XG4gICAgICAgIHRyYW5zaXRpb246IGVsZXZhdGlvbi10aGVtZS5vdmVybGF5LXRyYW5zaXRpb24tdmFsdWUoKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaW5jbHVkZSBiYXNlLW1peGlucy5lbWl0LW9uY2UoJ21kYy1lbGV2YXRpb24vY29tbW9uL2NvbG9yJykge1xuICAgICAgJGZpbGwtY29sb3I6IGN1c3RvbS1wcm9wZXJ0aWVzLmNyZWF0ZShcbiAgICAgICAgLS1tZGMtZWxldmF0aW9uLW92ZXJsYXktY29sb3IsXG4gICAgICAgIGVsZXZhdGlvbi10aGVtZS4kb3ZlcmxheS1jb2xvclxuICAgICAgKTtcbiAgICAgIEBpbmNsdWRlIGVsZXZhdGlvbi10aGVtZS5vdmVybGF5LWZpbGwtY29sb3IoJGZpbGwtY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuIC0tXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cblxuQHVzZSAnQG1hdGVyaWFsL2VsZXZhdGlvbi9lbGV2YXRpb24nO1xuQHVzZSAnQG1hdGVyaWFsL2VsZXZhdGlvbi9lbGV2YXRpb24tdGhlbWUnO1xuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJ0BtYXRlcmlhbC9ydGwvcnRsJztcbkB1c2UgJ0BtYXRlcmlhbC90b3VjaC10YXJnZXQvdG91Y2gtdGFyZ2V0JztcbkB1c2UgJ0BtYXRlcmlhbC90eXBvZ3JhcGh5L3R5cG9ncmFwaHknO1xuQHVzZSAnLi9idXR0b24tcmlwcGxlJztcbkB1c2UgJy4vYnV0dG9uLXNoYXJlZC10aGVtZSc7XG5cbkBtaXhpbiBzdGF0aWMtc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgX3N0YXRpYy1zdHlsZXMtYmFzZSgkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIF90eXBvZ3JhcGh5LXN0eWxlcygkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIGJ1dHRvbi1yaXBwbGUuc3RhdGljLXN0eWxlcygkcXVlcnk6ICRxdWVyeSk7XG59XG5cbkBtaXhpbiBfc3RhdGljLXN0eWxlcy1iYXNlKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSB0b3VjaC10YXJnZXQud3JhcHBlcigkcXVlcnkpOyAvLyBDT1BZQkFSQV9DT01NRU5UX1RISVNfTElORVxuICAvLyBwcmV0dGllci1pZ25vcmVcbiAgQGluY2x1ZGUgZWxldmF0aW9uLm92ZXJsYXktY29tbW9uKCRxdWVyeSk7IC8vIENPUFlCQVJBX0NPTU1FTlRfVEhJU19MSU5FXG5cbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBkZWZpbmUgYnV0dG9uXG4gIC5tZGMtYnV0dG9uIHtcbiAgICBAaW5jbHVkZSBfcm9vdC1zdHJ1Y3R1cmUoJHF1ZXJ5KTtcbiAgICAvLyBUaGUgaWNvbiBDU1MgY2xhc3Mgb3ZlcnJpZGVzIHN0eWxlcyBkZWZpbmVkIGluIHRoZSAubWF0ZXJpYWwtaWNvbnMgQ1NTXG4gICAgLy8gY2xhc3MsIHdoaWNoIGlzIGxvYWRlZCBzZXBhcmF0ZWx5IHNvIHRoZSBvcmRlciBvZiBDU1MgZGVmaW5pdGlvbnMgaXMgbm90XG4gICAgLy8gZ3VhcmFudGVlZC4gVGhlcmVmb3JlLCBpbmNyZWFzZSBzcGVjaWZpdHkgYnkgbmVzdGluZyB0aGlzIGNsYXNzIHRvIGVuc3VyZVxuICAgIC8vIG92ZXJyaWRlcyBhcHBseS5cbiAgICAubWRjLWJ1dHRvbl9faWNvbiB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBAaW5jbHVkZSBfaWNvbi1zdHJ1Y3R1cmU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1kYy1idXR0b25fX3RvdWNoIHtcbiAgICAgIEBpbmNsdWRlIHRvdWNoLXRhcmdldC50b3VjaC10YXJnZXQoJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtYnV0dG9uX19sYWJlbCArIC5tZGMtYnV0dG9uX19pY29uIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgQGluY2x1ZGUgaWNvbi10cmFpbGluZztcbiAgICB9XG4gIH1cblxuICBzdmcubWRjLWJ1dHRvbl9faWNvbiB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIEBpbmNsdWRlIGljb24tc3ZnO1xuICAgIH1cbiAgfVxuXG4gIC8vIFRPRE86IGZpZ3VyZSBvdXQgdGhlIGNvcnJlY3QgcGxhY2UgZm9yIHRoaXMgcnVsZS5cbiAgLm1kYy1idXR0b24tLXJhaXNlZCxcbiAgLm1kYy1idXR0b24tLXVuZWxldmF0ZWQsXG4gIC5tZGMtYnV0dG9uLS1vdXRsaW5lZCB7XG4gICAgLm1kYy1idXR0b25fX2ljb24ge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgLy8gSWNvbnMgaW5zaWRlIGNvbnRhaW5lZCBidXR0b25zIGhhdmUgZGlmZmVyZW50IHN0eWxlcyBkdWUgdG8gaW5jcmVhc2VkIGJ1dHRvbiBwYWRkaW5nXG4gICAgICAgIEBpbmNsdWRlIGljb24tY29udGFpbmVkO1xuICAgICAgfVxuICAgIH1cblxuICAgIC5tZGMtYnV0dG9uX19sYWJlbCArIC5tZGMtYnV0dG9uX19pY29uIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIEBpbmNsdWRlIGljb24tY29udGFpbmVkLXRyYWlsaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tZGMtYnV0dG9uLS10b3VjaCB7XG4gICAgLy8gVG91Y2ggdGFyZ2V0IGRvZXNuJ3QgY2hhbmdlIHdpdGggaGVpZ2h0LiBJdCBzaW1wbHkgZ2V0cyByZW1vdmVkIGlmXG4gICAgLy8gZGVuc2l0eSAoaGVpZ2h0KSBjaGFuZ2VzLiBUaGVyZWZvcmUsIGl0IGlzIGEgc3RhdGljIHN0eWxlLlxuICAgIEBpbmNsdWRlIHRvdWNoLXRhcmdldC5tYXJnaW4oXG4gICAgICAkY29tcG9uZW50LWhlaWdodDogYnV0dG9uLXNoYXJlZC10aGVtZS4kaGVpZ2h0LFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9XG4gIC8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZW5kXG59XG5cbkBtaXhpbiBfdHlwb2dyYXBoeS1zdHlsZXMoJHF1ZXJ5KSB7XG4gIC5tZGMtYnV0dG9uIHtcbiAgICAvLyBFeGNsdWRlIHByb3BlcnRpZXMgZGVjbGFyZWQgaW4gdGhlbWUgc3R5bGVzLlxuICAgIEBpbmNsdWRlIHR5cG9ncmFwaHkudHlwb2dyYXBoeShcbiAgICAgIGJ1dHRvbixcbiAgICAgICRleGNsdWRlLXByb3BzOiAoXG4gICAgICAgIGZvbnQtc2l6ZSxcbiAgICAgICAgbGluZS1oZWlnaHQsXG4gICAgICAgIGZvbnQtd2VpZ2h0LFxuICAgICAgICBsZXR0ZXItc3BhY2luZyxcbiAgICAgICAgdGV4dC10cmFuc2Zvcm1cbiAgICAgICksXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cbn1cblxuLy8vIEBkZXByZWNhdGVkIENvbnRhaW5zIHR5cG9ncmFwaHkgZGVjbGFyYXRpb25zIG5vdyBwYXJ0IG9mIHRoZW1lLXN0eWxlcy5cbkBtaXhpbiBkZXByZWNhdGVkLXN0YXRpYy1zdHlsZXMtd2l0aG91dC1yaXBwbGUoXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICBAaW5jbHVkZSBfZGVwcmVjYXRlZC10eXBvZ3JhcGh5LXN0eWxlcygkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIF9zdGF0aWMtc3R5bGVzLWJhc2UoJHF1ZXJ5OiAkcXVlcnkpO1xufVxuXG5AbWl4aW4gX2RlcHJlY2F0ZWQtdHlwb2dyYXBoeS1zdHlsZXMoJHF1ZXJ5KSB7XG4gIC5tZGMtYnV0dG9uIHtcbiAgICBAaW5jbHVkZSB0eXBvZ3JhcGh5LnR5cG9ncmFwaHkoYnV0dG9uLCAkcXVlcnkpO1xuICB9XG59XG5cbkBtaXhpbiBkZXByZWNhdGVkLWJhc2UoJHF1ZXJ5KSB7XG4gIEBpbmNsdWRlIGJhc2UoJHF1ZXJ5KTtcbn1cblxuQG1peGluIGJhc2UoJHF1ZXJ5KSB7XG4gIEBpbmNsdWRlIHR5cG9ncmFwaHkudHlwb2dyYXBoeShidXR0b24sICRxdWVyeSk7XG4gIEBpbmNsdWRlIF9yb290LXN0cnVjdHVyZSgkcXVlcnk6ICRxdWVyeSk7XG59XG5cbkBtaXhpbiBfcm9vdC1zdHJ1Y3R1cmUoJHF1ZXJ5KSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLm92ZXJsYXktc3VyZmFjZS1wb3NpdGlvbigkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIGVsZXZhdGlvbi10aGVtZS5vdmVybGF5LWRpbWVuc2lvbnMoMTAwJSwgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgZGlzcGxheTogaW5saW5lLWZsZXg7XG4gICAgLy8gcG9zaXRpb246IHJlbGF0aXZlOyBhbHJlYWR5IHNldCBpbiBtZGMtZWxldmF0aW9uLW92ZXJsYXktc3VyZmFjZS1wb3NpdGlvblxuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAganVzdGlmeS1jb250ZW50OiBjZW50ZXI7XG4gICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICBtaW4td2lkdGg6IDY0cHg7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgLyogQGFsdGVybmF0ZSAqL1xuICAgIGxpbmUtaGVpZ2h0OiBpbmhlcml0O1xuICAgIHVzZXItc2VsZWN0OiBub25lO1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAvLyBFdmVuIHRob3VnaCBgdmlzaWJsZWAgaXMgdGhlIGRlZmF1bHQsIElFIDExIGNvbXB1dGVzIHRoZSBwcm9wZXJ0eSBhc1xuICAgIC8vIGBoaWRkZW5gIGluIHNvbWUgY2FzZXMsIHVubGVzcyBpdCdzIGV4cGxpY2l0bHkgZGVmaW5lZCBoZXJlLlxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICAgIHZlcnRpY2FsLWFsaWduOiBtaWRkbGU7XG4gICAgYmFja2dyb3VuZDogdHJhbnNwYXJlbnQ7XG4gIH1cblxuICAmOjotbW96LWZvY3VzLWlubmVyIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGJvcmRlcjogMDtcbiAgICB9XG4gIH1cblxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGlnbm9yZVxuICAmOmFjdGl2ZSB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIG91dGxpbmU6IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgJjpob3ZlciB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB9XG4gIH1cblxuICAmOmRpc2FibGVkIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBpY29uIHtcbiAgQGluY2x1ZGUgX2ljb24tc3RydWN0dXJlO1xuICBAaW5jbHVkZSBfaWNvbi1zaXplKDE4cHgpO1xufVxuXG5AbWl4aW4gX2ljb24tc3RydWN0dXJlIHtcbiAgQGluY2x1ZGUgcnRsLnJlZmxleGl2ZS1ib3gobWFyZ2luLCByaWdodCwgOHB4KTtcblxuICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgdmVydGljYWwtYWxpZ246IHRvcDtcbn1cblxuQG1peGluIF9pY29uLXNpemUoJHNpemUtcHgpIHtcbiAgJGljb24tc2l6ZTogdHlwb2dyYXBoeS5weC10by1yZW0oJHNpemUtcHgpO1xuXG4gIGZvbnQtc2l6ZTogJGljb24tc2l6ZTtcbiAgaGVpZ2h0OiAkaWNvbi1zaXplO1xuICB3aWR0aDogJGljb24tc2l6ZTtcbn1cblxuQG1peGluIGljb24tdHJhaWxpbmcge1xuICBAaW5jbHVkZSBydGwucmVmbGV4aXZlLWJveChtYXJnaW4sIGxlZnQsIDhweCk7XG59XG5cbkBtaXhpbiBpY29uLXN2ZyB7XG4gIGZpbGw6IGN1cnJlbnRDb2xvcjtcbn1cblxuQG1peGluIGljb24tY29udGFpbmVkIHtcbiAgQGluY2x1ZGUgcnRsLnJlZmxleGl2ZS1wcm9wZXJ0eShtYXJnaW4sIC00cHgsIDhweCk7XG59XG5cbkBtaXhpbiBpY29uLWNvbnRhaW5lZC10cmFpbGluZyB7XG4gIEBpbmNsdWRlIHJ0bC5yZWZsZXhpdmUtcHJvcGVydHkobWFyZ2luLCA4cHgsIC00cHgpO1xufVxuXG4vLy8gQGRlcHJlY2F0ZWQgUHJpdmF0ZSBzdHlsZSBtaXhpbiBmb3IgcGFydG5lcnM7IG5vdCBhdmFpbGFibGUgZm9yIHB1YmxpYyB1c2UuXG5AbWl4aW4gZGVwcmVjYXRlZC1pY29uIHtcbiAgQGluY2x1ZGUgaWNvbjtcbn1cblxuLy8vIEBkZXByZWNhdGVkIFByaXZhdGUgc3R5bGUgbWl4aW4gZm9yIHBhcnRuZXJzOyBub3QgYXZhaWxhYmxlIGZvciBwdWJsaWMgdXNlLlxuQG1peGluIGRlcHJlY2F0ZWQtaWNvbi10cmFpbGluZyB7XG4gIEBpbmNsdWRlIGljb24tdHJhaWxpbmc7XG59XG5cbi8vLyBAZGVwcmVjYXRlZCBQcml2YXRlIHN0eWxlIG1peGluIGZvciBwYXJ0bmVyczsgbm90IGF2YWlsYWJsZSBmb3IgcHVibGljIHVzZS5cbkBtaXhpbiBkZXByZWNhdGVkLWljb24tc3ZnIHtcbiAgQGluY2x1ZGUgaWNvbi1zdmc7XG59XG5cbi8vLyBAZGVwcmVjYXRlZCBQcml2YXRlIHN0eWxlIG1peGluIGZvciBwYXJ0bmVyczsgbm90IGF2YWlsYWJsZSBmb3IgcHVibGljIHVzZS5cbkBtaXhpbiBkZXByZWNhdGVkLWljb24tY29udGFpbmVkIHtcbiAgQGluY2x1ZGUgaWNvbi1jb250YWluZWQ7XG59XG5cbi8vLyBAZGVwcmVjYXRlZCBQcml2YXRlIHN0eWxlIG1peGluIGZvciBwYXJ0bmVyczsgbm90IGF2YWlsYWJsZSBmb3IgcHVibGljIHVzZS5cbkBtaXhpbiBkZXByZWNhdGVkLWljb24tY29udGFpbmVkLXRyYWlsaW5nIHtcbiAgQGluY2x1ZGUgaWNvbi1jb250YWluZWQtdHJhaWxpbmc7XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTcgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuXG5cbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJ3Nhc3M6bWF0aCc7XG5AdXNlICdzYXNzOm1ldGEnO1xuQHVzZSAnQG1hdGVyaWFsL2FuaW1hdGlvbi92YXJpYWJsZXMnIGFzIGFuaW1hdGlvbi12YXJpYWJsZXM7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3VzdG9tLXByb3BlcnRpZXMnO1xuQHVzZSAnQG1hdGVyaWFsL2Jhc2UvbWl4aW5zJyBhcyBiYXNlLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3NzJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUtY29sb3InO1xuXG4kYmFzZWxpbmUtY29sb3I6IGJsYWNrICFkZWZhdWx0O1xuJHVtYnJhLW9wYWNpdHk6IDAuMiAhZGVmYXVsdDtcbiRwZW51bWJyYS1vcGFjaXR5OiAwLjE0ICFkZWZhdWx0O1xuJGFtYmllbnQtb3BhY2l0eTogMC4xMiAhZGVmYXVsdDtcblxuJHVtYnJhLW1hcDogKFxuICAwOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgMTogJzBweCAycHggMXB4IC0xcHgnLFxuICAyOiAnMHB4IDNweCAxcHggLTJweCcsXG4gIDM6ICcwcHggM3B4IDNweCAtMnB4JyxcbiAgNDogJzBweCAycHggNHB4IC0xcHgnLFxuICA1OiAnMHB4IDNweCA1cHggLTFweCcsXG4gIDY6ICcwcHggM3B4IDVweCAtMXB4JyxcbiAgNzogJzBweCA0cHggNXB4IC0ycHgnLFxuICA4OiAnMHB4IDVweCA1cHggLTNweCcsXG4gIDk6ICcwcHggNXB4IDZweCAtM3B4JyxcbiAgMTA6ICcwcHggNnB4IDZweCAtM3B4JyxcbiAgMTE6ICcwcHggNnB4IDdweCAtNHB4JyxcbiAgMTI6ICcwcHggN3B4IDhweCAtNHB4JyxcbiAgMTM6ICcwcHggN3B4IDhweCAtNHB4JyxcbiAgMTQ6ICcwcHggN3B4IDlweCAtNHB4JyxcbiAgMTU6ICcwcHggOHB4IDlweCAtNXB4JyxcbiAgMTY6ICcwcHggOHB4IDEwcHggLTVweCcsXG4gIDE3OiAnMHB4IDhweCAxMXB4IC01cHgnLFxuICAxODogJzBweCA5cHggMTFweCAtNXB4JyxcbiAgMTk6ICcwcHggOXB4IDEycHggLTZweCcsXG4gIDIwOiAnMHB4IDEwcHggMTNweCAtNnB4JyxcbiAgMjE6ICcwcHggMTBweCAxM3B4IC02cHgnLFxuICAyMjogJzBweCAxMHB4IDE0cHggLTZweCcsXG4gIDIzOiAnMHB4IDExcHggMTRweCAtN3B4JyxcbiAgMjQ6ICcwcHggMTFweCAxNXB4IC03cHgnLFxuKSAhZGVmYXVsdDtcblxuJHBlbnVtYnJhLW1hcDogKFxuICAwOiAnMHB4IDBweCAwcHggMHB4JyxcbiAgMTogJzBweCAxcHggMXB4IDBweCcsXG4gIDI6ICcwcHggMnB4IDJweCAwcHgnLFxuICAzOiAnMHB4IDNweCA0cHggMHB4JyxcbiAgNDogJzBweCA0cHggNXB4IDBweCcsXG4gIDU6ICcwcHggNXB4IDhweCAwcHgnLFxuICA2OiAnMHB4IDZweCAxMHB4IDBweCcsXG4gIDc6ICcwcHggN3B4IDEwcHggMXB4JyxcbiAgODogJzBweCA4cHggMTBweCAxcHgnLFxuICA5OiAnMHB4IDlweCAxMnB4IDFweCcsXG4gIDEwOiAnMHB4IDEwcHggMTRweCAxcHgnLFxuICAxMTogJzBweCAxMXB4IDE1cHggMXB4JyxcbiAgMTI6ICcwcHggMTJweCAxN3B4IDJweCcsXG4gIDEzOiAnMHB4IDEzcHggMTlweCAycHgnLFxuICAxNDogJzBweCAxNHB4IDIxcHggMnB4JyxcbiAgMTU6ICcwcHggMTVweCAyMnB4IDJweCcsXG4gIDE2OiAnMHB4IDE2cHggMjRweCAycHgnLFxuICAxNzogJzBweCAxN3B4IDI2cHggMnB4JyxcbiAgMTg6ICcwcHggMThweCAyOHB4IDJweCcsXG4gIDE5OiAnMHB4IDE5cHggMjlweCAycHgnLFxuICAyMDogJzBweCAyMHB4IDMxcHggM3B4JyxcbiAgMjE6ICcwcHggMjFweCAzM3B4IDNweCcsXG4gIDIyOiAnMHB4IDIycHggMzVweCAzcHgnLFxuICAyMzogJzBweCAyM3B4IDM2cHggM3B4JyxcbiAgMjQ6ICcwcHggMjRweCAzOHB4IDNweCcsXG4pICFkZWZhdWx0O1xuXG4kYW1iaWVudC1tYXA6IChcbiAgMDogJzBweCAwcHggMHB4IDBweCcsXG4gIDE6ICcwcHggMXB4IDNweCAwcHgnLFxuICAyOiAnMHB4IDFweCA1cHggMHB4JyxcbiAgMzogJzBweCAxcHggOHB4IDBweCcsXG4gIDQ6ICcwcHggMXB4IDEwcHggMHB4JyxcbiAgNTogJzBweCAxcHggMTRweCAwcHgnLFxuICA2OiAnMHB4IDFweCAxOHB4IDBweCcsXG4gIDc6ICcwcHggMnB4IDE2cHggMXB4JyxcbiAgODogJzBweCAzcHggMTRweCAycHgnLFxuICA5OiAnMHB4IDNweCAxNnB4IDJweCcsXG4gIDEwOiAnMHB4IDRweCAxOHB4IDNweCcsXG4gIDExOiAnMHB4IDRweCAyMHB4IDNweCcsXG4gIDEyOiAnMHB4IDVweCAyMnB4IDRweCcsXG4gIDEzOiAnMHB4IDVweCAyNHB4IDRweCcsXG4gIDE0OiAnMHB4IDVweCAyNnB4IDRweCcsXG4gIDE1OiAnMHB4IDZweCAyOHB4IDVweCcsXG4gIDE2OiAnMHB4IDZweCAzMHB4IDVweCcsXG4gIDE3OiAnMHB4IDZweCAzMnB4IDVweCcsXG4gIDE4OiAnMHB4IDdweCAzNHB4IDZweCcsXG4gIDE5OiAnMHB4IDdweCAzNnB4IDZweCcsXG4gIDIwOiAnMHB4IDhweCAzOHB4IDdweCcsXG4gIDIxOiAnMHB4IDhweCA0MHB4IDdweCcsXG4gIDIyOiAnMHB4IDhweCA0MnB4IDdweCcsXG4gIDIzOiAnMHB4IDlweCA0NHB4IDhweCcsXG4gIDI0OiAnMHB4IDlweCA0NnB4IDhweCcsXG4pICFkZWZhdWx0O1xuXG4vLyBUaGUgY3NzIHByb3BlcnR5IHVzZWQgZm9yIGVsZXZhdGlvbi4gSW4gbW9zdCBjYXNlcyB0aGlzIHNob3VsZCBub3QgYmUgY2hhbmdlZC4gSXQgaXMgZXhwb3NlZFxuLy8gYXMgYSB2YXJpYWJsZSBmb3IgYWJzdHJhY3Rpb24gLyBlYXN5IHVzZSB3aGVuIG5lZWRpbmcgdG8gcmVmZXJlbmNlIHRoZSBwcm9wZXJ0eSBkaXJlY3RseSwgZm9yXG4vLyBleGFtcGxlIGluIGEgYHdpbGwtY2hhbmdlYCBydWxlLlxuJHByb3BlcnR5OiBib3gtc2hhZG93ICFkZWZhdWx0O1xuXG4vLyBUaGUgZGVmYXVsdCBjb2xvciBmb3IgdGhlIGVsZXZhdGlvbiBvdmVybGF5LlxuJG92ZXJsYXktY29sb3I6ICNmZmY7XG5cbi8vIFRoZSBjc3MgcHJvcGVydHkgdXNlZCBmb3IgZWxldmF0aW9uIG92ZXJsYXkgdHJhbnNpdGlvbnMuIEluIG1vc3QgY2FzZXMgdGhpcyBzaG91bGQgbm90IGJlIGNoYW5nZWQuIEl0IGlzIGV4cG9zZWRcbi8vIGFzIGEgdmFyaWFibGUgZm9yIGFic3RyYWN0aW9uIC8gZWFzeSB1c2Ugd2hlbiBuZWVkaW5nIHRvIHJlZmVyZW5jZSB0aGUgcHJvcGVydHkgZGlyZWN0bHksIGZvclxuLy8gZXhhbXBsZSBpbiBhIGB3aWxsLWNoYW5nZWAgcnVsZS5cbiRvdmVybGF5LXByb3BlcnR5OiBvcGFjaXR5ICFkZWZhdWx0O1xuXG4vLyBUaGUgZGVmYXVsdCBkdXJhdGlvbiB2YWx1ZSBmb3IgZWxldmF0aW9uIHRyYW5zaXRpb25zLlxuJHRyYW5zaXRpb24tZHVyYXRpb246IDI4MG1zICFkZWZhdWx0O1xuXG4vLyBUaGUgZGVmYXVsdCBlYXNpbmcgdmFsdWUgZm9yIGVsZXZhdGlvbiB0cmFuc2l0aW9ucy5cbiR0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvbjogYW5pbWF0aW9uLXZhcmlhYmxlcy4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uICFkZWZhdWx0O1xuXG4vLy9cbi8vLyBTZXRzIHRoZSBlbGV2YXRpb24gdHJhbnNpdGlvbiB2YWx1ZS5cbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZHVyYXRpb24gLSBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24uXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRlYXNpbmcgLSBUaGUgZWFzaW5nIGZ1bmN0aW9uIGZvciB0aGUgdHJhbnNpdGlvbi5cbi8vLyBAcmV0dXJuIHtTdHJpbmd9XG4vLy9cbkBmdW5jdGlvbiB0cmFuc2l0aW9uLXZhbHVlKFxuICAkZHVyYXRpb246ICR0cmFuc2l0aW9uLWR1cmF0aW9uLFxuICAkZWFzaW5nOiAkdHJhbnNpdGlvbi10aW1pbmctZnVuY3Rpb25cbikge1xuICBAcmV0dXJuICN7JHByb3BlcnR5fSAjeyRkdXJhdGlvbn0gI3skZWFzaW5nfTtcbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgZWxldmF0aW9uIG92ZXJsYXkgdHJhbnNpdGlvbiB2YWx1ZS5cbi8vL1xuLy8vIEBwYXJhbSB7U3RyaW5nfSAkZHVyYXRpb24gLSBUaGUgZHVyYXRpb24gb2YgdGhlIHRyYW5zaXRpb24uXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRlYXNpbmcgLSBUaGUgZWFzaW5nIGZ1bmN0aW9uIGZvciB0aGUgdHJhbnNpdGlvbi5cbi8vLyBAcmV0dXJuIHtTdHJpbmd9XG4vLy9cbkBmdW5jdGlvbiBvdmVybGF5LXRyYW5zaXRpb24tdmFsdWUoXG4gICRkdXJhdGlvbjogJHRyYW5zaXRpb24tZHVyYXRpb24sXG4gICRlYXNpbmc6ICR0cmFuc2l0aW9uLXRpbWluZy1mdW5jdGlvblxuKSB7XG4gIEByZXR1cm4gI3skb3ZlcmxheS1wcm9wZXJ0eX0gI3skZHVyYXRpb259ICN7JGVhc2luZ307XG59XG5cbi8vL1xuLy8vIENyZWF0ZXMgYSBib3gtc2hhZG93IGZyb20gdGhlIE1hdGVyaWFsIGVsZXZhdGlvbiBzeXN0ZW0uXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRsZXZlbCAtIHRoZSBsZXZlbCBvZiB0aGUgTWF0ZXJpYWwgZWxldmF0aW9uIHN5c3RlbS5cbi8vLyBAcGFyYW0ge1N0cmluZ30gJGNvbG9yIC0gdGhlIGNvbG9yIG9mIHRoZSBzaGFkb3cuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRvcGFjaXR5LWJvb3N0IFswXSAtIG9wdGlvbmFsIG9wYWNpdHkgYm9vc3QgZm9yIHRoZSBzaGFkb3cuXG4vLy8gQHJldHVybiB7TGlzdH0gdGhlIGNvbXBsZXRlIGJveCBzaGFkb3cuXG4vLy9cbkBmdW5jdGlvbiBfYm94LXNoYWRvdygkbGV2ZWwsICRjb2xvciwgJG9wYWNpdHktYm9vc3Q6IDApIHtcbiAgJGNvbG9yOiB0aGVtZS1jb2xvci5wcm9wLXZhbHVlKCRjb2xvcik7XG4gICR1bWJyYS16LXZhbHVlOiBtYXAuZ2V0KCR1bWJyYS1tYXAsICRsZXZlbCk7XG4gICRwZW51bWJyYS16LXZhbHVlOiBtYXAuZ2V0KCRwZW51bWJyYS1tYXAsICRsZXZlbCk7XG4gICRhbWJpZW50LXotdmFsdWU6IG1hcC5nZXQoJGFtYmllbnQtbWFwLCAkbGV2ZWwpO1xuXG4gICR1bWJyYS1jb2xvcjogcmdiYSgkY29sb3IsICR1bWJyYS1vcGFjaXR5ICsgJG9wYWNpdHktYm9vc3QpO1xuICAkcGVudW1icmEtY29sb3I6IHJnYmEoJGNvbG9yLCAkcGVudW1icmEtb3BhY2l0eSArICRvcGFjaXR5LWJvb3N0KTtcbiAgJGFtYmllbnQtY29sb3I6IHJnYmEoJGNvbG9yLCAkYW1iaWVudC1vcGFjaXR5ICsgJG9wYWNpdHktYm9vc3QpO1xuXG4gIEByZXR1cm4gKFxuICAgICN7JyN7JHVtYnJhLXotdmFsdWV9ICN7JHVtYnJhLWNvbG9yfSd9LFxuICAgICN7JyN7JHBlbnVtYnJhLXotdmFsdWV9ICN7JHBlbnVtYnJhLWNvbG9yfSd9LFxuICAgICN7JGFtYmllbnQtei12YWx1ZX0gJGFtYmllbnQtY29sb3JcbiAgKTtcbn1cblxuLy8gUmV0dXJucyB0aGUgY29ycmVjdCBib3gtc2hhZG93IHNwZWNpZmllZCBieSAkei12YWx1ZS5cbi8vIFRoZSAkei12YWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjQuXG4vLyBJZiAkY29sb3IgaGFzIGFuIGFscGhhIGNoYW5uZWwsIGl0IHdpbGwgYmUgaWdub3JlZCBhbmQgb3ZlcnJpZGRlbi4gVG8gaW5jcmVhc2UgdGhlIG9wYWNpdHkgb2YgdGhlIHNoYWRvdywgdXNlXG4vLyAkb3BhY2l0eS1ib29zdC5cbkBmdW5jdGlvbiBlbGV2YXRpb24tYm94LXNoYWRvdyhcbiAgJHotdmFsdWUsXG4gICRjb2xvcjogJGJhc2VsaW5lLWNvbG9yLFxuICAkb3BhY2l0eS1ib29zdDogMFxuKSB7XG4gIEBpZiBtZXRhLnR5cGUtb2YoJHotdmFsdWUpICE9IG51bWJlciBvciBub3QgbWF0aC5pcy11bml0bGVzcygkei12YWx1ZSkge1xuICAgIEBlcnJvciBcIiR6LXZhbHVlIG11c3QgYmUgYSB1bml0bGVzcyBudW1iZXIsIGJ1dCByZWNlaXZlZCAnI3skei12YWx1ZX0nXCI7XG4gIH1cblxuICBAaWYgJHotdmFsdWUgPCAwIG9yICR6LXZhbHVlID4gMjQge1xuICAgIEBlcnJvciBcIiR6LXZhbHVlIG11c3QgYmUgYmV0d2VlbiAwIGFuZCAyNCwgYnV0IHJlY2VpdmVkICcjeyR6LXZhbHVlfSdcIjtcbiAgfVxuXG4gIEByZXR1cm4gX2JveC1zaGFkb3coJHotdmFsdWUsICRjb2xvciwgJG9wYWNpdHktYm9vc3QpO1xufVxuXG4vLy9cbi8vLyBSZXR1cm5zIGEgc2hhZG93IG9yIG51bGwgaWYgcGFyYW1zIGFyZSBpbnZhbGlkLlxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkbGV2ZWwgLSB0aGUgbGV2ZWwgb2YgdGhlIE1hdGVyaWFsIGVsZXZhdGlvbiBzeXN0ZW0uXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRjb2xvciBbIzAwMF0gLSB0aGUgY29sb3Igb2YgdGhlIHNoYWRvdy5cbi8vLyBAcmV0dXJuIHtMaXN0fG51bGx9IHRoZSBjb21wbGV0ZSBib3ggc2hhZG93IG9yIG51bGwuXG4vLy9cbkBmdW5jdGlvbiBfc2hhZG93KCRsZXZlbCwgJGNvbG9yOiAjMDAwKSB7XG4gIEBpZiAkbGV2ZWwgPT0gbnVsbCBvciAkbGV2ZWwgPCAwIG9yICRsZXZlbCA+IDI0IHtcbiAgICBAd2FybiBcIiRsZXZlbCBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjQ7IHJlY2VpdmVkICcjeyRsZXZlbH0nXCI7XG4gICAgQHJldHVybiBudWxsO1xuICB9XG5cbiAgQGlmICRjb2xvciA9PSBudWxsIHtcbiAgICBAd2FybiBcIm5vICRjb2xvciBwcm92aWRlZDsgcmVjZWl2ZWQgJyN7JGNvbG9yfSdcIjtcbiAgICBAcmV0dXJuIG51bGw7XG4gIH1cblxuICBAcmV0dXJuIF9ib3gtc2hhZG93KCRsZXZlbCwgJGNvbG9yKTtcbn1cblxuQGZ1bmN0aW9uIGdldC1lbGV2YXRpb24oJGxldmVsKSB7XG4gIEByZXR1cm4gKGJveC1zaGFkb3c6IGVsZXZhdGlvbi1ib3gtc2hhZG93KCRsZXZlbCkpO1xufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSBzaGFkb3cgb2YgdGhlIGVsZW1lbnQuXG4vLy9cbi8vLyBAcGFyYW0ge1N0cmluZ30gJGJveC1zaGFkb3cgLSBUaGUgc2hhZG93IHRvIGFwcGx5IHRvIHRoZSBlbGVtZW50LlxuLy8vXG5AbWl4aW4gX2JveC1zaGFkb3coJHNoYWRvdywgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoYm94LXNoYWRvdywgJHNoYWRvdyk7XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgc2hhZG93IG9mIHRoZSBlbGVtZW50LlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRib3gtc2hhZG93IC0gVGhlIHNoYWRvdyB0byBhcHBseSB0byB0aGUgZWxlbWVudC5cbi8vL1xuQG1peGluIHNoYWRvdygkYm94LXNoYWRvdywgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgQGlmIGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCRib3gtc2hhZG93KSB7XG4gICAgICAvLyBUT0RPKGIvMTg1MTg4NDU4KTogVXNlIHRoZW1lLnByb3BlcnR5KCkgb25jZSByZXNvbHZlZC5cbiAgICAgICRmYWxsYmFjazogY3VzdG9tLXByb3BlcnRpZXMuZ2V0LWZhbGxiYWNrKCRib3gtc2hhZG93KTtcblxuICAgICAgLy8gdmFyKC0tPGJveC1zaGFkb3ctcHJvcD4sIHZhcigtLW0tZWxldmF0aW9uLWJveC1zaGFkb3ctZm9yLWdzcykpXG4gICAgICAkZ3NzLWN1c3RvbS1wcm9wOiBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoXG4gICAgICAgIGN1c3RvbS1wcm9wZXJ0aWVzLmdldC12YXJuYW1lKCRib3gtc2hhZG93KSxcbiAgICAgICAgY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKGVsZXZhdGlvbi1ib3gtc2hhZG93LWZvci1nc3MpXG4gICAgICApO1xuXG4gICAgICAkdmFsdWU6IGN1c3RvbS1wcm9wZXJ0aWVzLmNyZWF0ZS12YXIoJGdzcy1jdXN0b20tcHJvcCk7XG4gICAgICBAaWYgJHZhbHVlID09IG51bGwge1xuICAgICAgICAvLyBDdXN0b20gcHJvcGVydGllcyBhcmUgZGlzYWJsZWQsIHNpbmNlICRnc3MtY3VzdG9tLXByb3BcbiAgICAgICAgLy8gZG9lcyBub3QgaGF2ZSBhIGZhbGxiYWNrLiBBdm9pZCBlbWl0dGluZyB0d28gbm9uLWN1c3RvbVxuICAgICAgICAvLyBwcm9wIGRlY2xhcmF0aW9ucyBieSBzZXR0aW5nICRmYWxsYmFjayB0byBudWxsLlxuICAgICAgICAkdmFsdWU6ICRmYWxsYmFjaztcbiAgICAgICAgJGZhbGxiYWNrOiBudWxsO1xuICAgICAgfVxuXG4gICAgICBAaW5jbHVkZSBjc3MuZGVjbGFyYXRpb24oYm94LXNoYWRvdywgJHZhbHVlLCAkZmFsbGJhY2stdmFsdWU6ICRmYWxsYmFjayk7XG4gICAgICBAaW5jbHVkZSBjdXN0b20tcHJvcGVydGllcy5kZWNsYXJhdGlvbihcbiAgICAgICAgY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKGVsZXZhdGlvbi1ib3gtc2hhZG93LWZvci1nc3MsICRmYWxsYmFjaylcbiAgICAgICk7XG4gICAgfSBAZWxzZSB7XG4gICAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgICBib3gtc2hhZG93OiAkYm94LXNoYWRvdztcbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgZWxldmF0aW9uIG92ZXJsYXkgc3VyZmFjZSByZXF1aXJlZCBwb3NpdGlvbmluZy5cbi8vL1xuQG1peGluIG92ZXJsYXktc3VyZmFjZS1wb3NpdGlvbigkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgdGhlIGRpbWVuc2lvbnMgb2YgdGhlIGVsZXZhdGlvbiBvdmVybGF5LCBpbmNsdWRpbmcgcG9zaXRpb25pbmcgYW5kIHNpemluZy5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIGVsZXZhdGlvbiBvdmVybGF5XG4vLy8gQHBhcmFtIHtOdW1iZXJ9IFskaGVpZ2h0XSAtIFRoZSBoZWlnaHQgb2YgdGhlIGVsZXZhdGlvbiBvdmVybGF5XG4vLy8gQHBhcmFtIHtCb29sZWFufSBbJGhhcy1jb250ZW50LXNpemluZ10gLSBTZXQgdG8gZmFsc2UgaWYgdGhlIGNvbnRhaW5lciBoYXMgbm8gY29udGVudCBzaXppbmdcbi8vL1xuQG1peGluIG92ZXJsYXktZGltZW5zaW9ucyhcbiAgJHdpZHRoLFxuICAkaGVpZ2h0OiAkd2lkdGgsXG4gICRoYXMtY29udGVudC1zaXppbmc6IHRydWUsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC5tZGMtZWxldmF0aW9uLW92ZXJsYXkge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eSh3aWR0aCwgJHdpZHRoKTtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGhlaWdodCwgJGhlaWdodCk7XG5cbiAgICAgIEBpZiAkaGFzLWNvbnRlbnQtc2l6aW5nIHtcbiAgICAgICAgdG9wOiAwO1xuICAgICAgICAvKiBAbm9mbGlwICovXG4gICAgICAgIGxlZnQ6IDA7XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgdG9wOiA1MCU7XG4gICAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgICAgbGVmdDogNTAlO1xuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSgtNTAlLCAtNTAlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgZWxldmF0aW9uIG92ZXJsYXkgZmlsbCBjb2xvci5cbi8vLyBFeHBlY3RlZCB0byBiZSBjYWxsZWQgZGlyZWN0bHkgb24gdGhlIGVsZXZhdGlvbiBvdmVybGF5IGVsZW1lbnQuXG4vLy9cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgY29sb3Igb2YgdGhlIGVsZXZhdGlvbiBvdmVybGF5LlxuLy8vXG5AbWl4aW4gb3ZlcmxheS1maWxsLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoYmFja2dyb3VuZC1jb2xvciwgJGNvbG9yKTtcbiAgfVxufVxuXG4vLy9cbi8vLyBBcHBsaWVzIHRoZSBnaXZlbiBjb2xvciB0byB0aGUgY29udGFpbmVyIG9mIHRoZSBvdmVybGF5LlxuLy8vIEBwYXJhbSB7Y29sb3J9ICRjb2xvciAtIHRoZSBjb2xvciBvZiB0aGUgb3ZlcmxheSBjb250YWluZXJcbi8vL1xuQG1peGluIF9vdmVybGF5LWNvbnRhaW5lci1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgLm1kYy1lbGV2YXRpb24tb3ZlcmxheSB7XG4gICAgQGluY2x1ZGUgb3ZlcmxheS1maWxsLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgdGhlIGVsZXZhdGlvbiBvdmVybGF5IG9wYWNpdHkuXG4vLy8gRXhwZWN0ZWQgdG8gYmUgY2FsbGVkIGZyb20gYSBwYXJlbnQgZWxlbWVudC5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkb3BhY2l0eSAtIFRoZSBvcGFjaXR5IG9mIHRoZSBlbGV2YXRpb24gb3ZlcmxheS5cbi8vL1xuQG1peGluIG92ZXJsYXktb3BhY2l0eSgkb3BhY2l0eSwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICAubWRjLWVsZXZhdGlvbi1vdmVybGF5IHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShvcGFjaXR5LCAkb3BhY2l0eSk7XG4gICAgfVxuICB9XG59XG5cbi8vIEFwcGxpZXMgdGhlIGNvcnJlY3QgQ1NTIHJ1bGVzIHRvIGFuIGVsZW1lbnQgdG8gZ2l2ZSBpdCB0aGUgZWxldmF0aW9uIHNwZWNpZmllZCBieSAkei12YWx1ZS5cbi8vIFRoZSAkei12YWx1ZSBtdXN0IGJlIGJldHdlZW4gMCBhbmQgMjQuXG4vLyBJZiAkY29sb3IgaGFzIGFuIGFscGhhIGNoYW5uZWwsIGl0IHdpbGwgYmUgaWdub3JlZCBhbmQgb3ZlcnJpZGRlbi4gVG8gaW5jcmVhc2UgdGhlIG9wYWNpdHkgb2YgdGhlIHNoYWRvdywgdXNlXG4vLyAkb3BhY2l0eS1ib29zdC5cbkBtaXhpbiBlbGV2YXRpb24oXG4gICR6LXZhbHVlLFxuICAkY29sb3I6ICRiYXNlbGluZS1jb2xvcixcbiAgJG9wYWNpdHktYm9vc3Q6IDAsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkYm94LXNoYWRvdzogZWxldmF0aW9uLWJveC1zaGFkb3coXG4gICAgJHotdmFsdWUsXG4gICAgJGNvbG9yOiAkY29sb3IsXG4gICAgJG9wYWNpdHktYm9vc3Q6ICRvcGFjaXR5LWJvb3N0XG4gICk7XG5cbiAgQGluY2x1ZGUgc2hhZG93KCRib3gtc2hhZG93LCAkcXVlcnk6ICRxdWVyeSk7XG59XG5cbi8vL1xuLy8vIFJlcHJlc2VudHMgdGhlIGNvbmZpZ3VyYWJsZSB2YWx1ZXMgb2YgdGhlIGVsZXZhdGlvbiB0aGVtZS5cbi8vL1xuJF90aGVtZS12YWx1ZXM6IChcbiAgc2hhZG93OiBudWxsLFxuICBvdmVybGF5LW9wYWNpdHk6IG51bGwsXG4gIG92ZXJsYXktY29sb3I6IG51bGwsXG4pO1xuXG4vLy9cbi8vLyBBcHBsaWVzIHRoZSBzaGFkb3cgdGhlbWUgd2l0aCB0aGUgZ2l2ZW4gJHJlc29sdmVyIGZ1bmN0aW9uLlxuLy8vIEBwYXJhbSB7RnVuY3Rpb259ICRyZXNvbHZlciAtIGEgZnVuY3Rpb24gdGhhdCByZXR1cm5zIGEgdmFsaWQgdGhlbWUgY29uZmlnLlxuLy8vICAgQHNlZSByZXNvbHZlciBmb3IgYW4gZXhhbXBsZSBhbmQgZXhwZWN0ZWQgYXJndW1lbnRzIGFuZCByZXR1cm4gdmFsdWUuXG4vLy8gQWNjZXB0cyB0aGUgZm9sbG93aW5nIG9wdGlvbmFsIGtleXdvcmQgYXJnczpcbi8vLyBAcGFyYW0ge051bWJlcn0gJGVsZXZhdGlvbiAtIHRoZSBsZXZlbCBpbiB0aGUgZWxldmF0aW9uIHN5c3RlbS5cbi8vLyBAcGFyYW0ge1N0cmluZ30gJHNoYWRvdy1jb2xvciAtIHRoZSBjb2xvciB1c2VkIGZvciB0aGUgc2hhZG93LlxuLy8vXG5AbWl4aW4gd2l0aC1yZXNvbHZlcigkcmVzb2x2ZXIsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCksICRhcmdzLi4uKSB7XG4gIEBpZiAkcmVzb2x2ZXIge1xuICAgIEBpbmNsdWRlIF90aGVtZShtZXRhLmNhbGwoJHJlc29sdmVyLCAkYXJncy4uLiksICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBBcHBsaWVzIHRoZSBnaXZlbiB0aGVtZSB3aXRoIHZhbGlkYXRpb24uXG4vLy8gQHBhcmFtIHtNYXB9ICR0aGVtZSAtIEBzZWUgJF90aGVtZS12YWx1ZXMgZm9yIGFjY2VwdGVkIHRoZW1lIHByb3BlcnRpZXMuXG4vLy9cbkBtaXhpbiB0aGVtZSgkdGhlbWU6ICgpLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIHRoZW1lLnZhbGlkYXRlLWtleXMoJF90aGVtZS12YWx1ZXMsICR0aGVtZSk7XG4gIEBpbmNsdWRlIF90aGVtZSgkdGhlbWUsICRxdWVyeTogJHF1ZXJ5KTtcbn1cblxuLy8vXG4vLy8gQXBwbGllcyB0aGUgZ2l2ZW4gdGhlbWUuXG4vLy8gQHBhcmFtIHtNYXB9ICR0aGVtZSAtIEBzZWUgJF90aGVtZS12YWx1ZXMgZm9yIGFjY2VwdGVkIHRoZW1lIHByb3BlcnRpZXMuXG4vLy9cbkBtaXhpbiBfdGhlbWUoJHRoZW1lOiAoKSwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBzaGFkb3cobWFwLmdldCgkdGhlbWUsIHNoYWRvdyksICRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgb3ZlcmxheS1vcGFjaXR5KG1hcC5nZXQoJHRoZW1lLCBvdmVybGF5LW9wYWNpdHkpLCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIF9vdmVybGF5LWNvbnRhaW5lci1jb2xvcihcbiAgICBtYXAuZ2V0KCR0aGVtZSwgb3ZlcmxheS1jb2xvciksXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbn1cblxuLy8vXG4vLy8gVHJhbnNmb3JtcyB0aGUgZm9sbG93aW5nIG9wdGlvbmFsIHBhcmFtZXRlcnMgaW50byBhIHRoZW1lIGNvbmZpZy5cbi8vLyBAcGFyYW0ge051bWJlcn0gJGVsZXZhdGlvbiAtIHRoZSBsZXZlbCBvZiB0aGUgZWxldmF0aW9uIHN5c3RlbSBpbiBNYXRlcmlhbC5cbi8vLyBAcGFyYW0ge1N0cmluZ30gJHNoYWRvdy1jb2xvciAtIHRoZSBjb2xvciB0byBiZSB1c2VkIGJ5IHRoZSBzaGFkb3cuXG4vLy8gQHJldHVybiB7TWFwfSBAc2VlICRfdGhlbWUtdmFsdWVzIGZvciBhY2NlcHRlZCB0aGVtZSBwcm9wZXJ0aWVzLlxuLy8vXG5AZnVuY3Rpb24gcmVzb2x2ZXIoJGFyZ3MuLi4pIHtcbiAgJG9wdHM6IG1ldGEua2V5d29yZHMoJGFyZ3MpO1xuICAkZWxldmF0aW9uOiBtYXAuZ2V0KCRvcHRzLCBlbGV2YXRpb24pO1xuICAkc2hhZG93LWNvbG9yOiBtYXAuZ2V0KCRvcHRzLCBzaGFkb3ctY29sb3IpO1xuICBAaWYgY3VzdG9tLXByb3BlcnRpZXMuaXMtY3VzdG9tLXByb3AoJGVsZXZhdGlvbikge1xuICAgIEByZXR1cm4gX3Jlc29sdmUtY3VzdG9tLXByb3BzKCRlbGV2YXRpb24sICRzaGFkb3ctY29sb3IpO1xuICB9XG5cbiAgQHJldHVybiAoc2hhZG93OiBfc2hhZG93KCRlbGV2YXRpb24sICRzaGFkb3ctY29sb3IpKTtcbn1cblxuQGZ1bmN0aW9uIF9yZXNvbHZlLWN1c3RvbS1wcm9wcygkZWxldmF0aW9uLCAkc2hhZG93LWNvbG9yKSB7XG4gICRmYWxsYmFjay1kcDogY3VzdG9tLXByb3BlcnRpZXMuZ2V0LWZhbGxiYWNrKCRlbGV2YXRpb24pO1xuICAkZmFsbGJhY2stc2hhZG93LWNvbG9yOiBjdXN0b20tcHJvcGVydGllcy5nZXQtZmFsbGJhY2soJHNoYWRvdy1jb2xvcik7XG4gICRzaGFkb3c6IGN1c3RvbS1wcm9wZXJ0aWVzLnNldC1mYWxsYmFjayhcbiAgICAkZWxldmF0aW9uLFxuICAgIF9zaGFkb3coJGZhbGxiYWNrLWRwLCAkZmFsbGJhY2stc2hhZG93LWNvbG9yKVxuICApO1xuICBAcmV0dXJuIChzaGFkb3c6ICRzaGFkb3cpO1xufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE3IEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVyblxuXG5AdXNlICdzYXNzOmxpc3QnO1xuQHVzZSAnc2FzczptZXRhJztcbkB1c2UgJ3Nhc3M6c2VsZWN0b3InO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9zZWxlY3Rvci1leHQnO1xuXG4kaW5jbHVkZTogdHJ1ZSAhZGVmYXVsdDtcblxuLy8vIENyZWF0ZXMgYSBydWxlIHRoYXQgd2lsbCBiZSBhcHBsaWVkIHdoZW4gYSBjb21wb25lbnQgaXMgd2l0aGluIHRoZSBjb250ZXh0XG4vLy8gb2YgYW4gUlRMIGxheW91dC5cbi8vL1xuLy8vIEBleGFtcGxlIC0gc2Nzc1xuLy8vIC5tZGMtZm9vIHtcbi8vLyAgIHBhZGRpbmctbGVmdDogNHB4O1xuLy8vXG4vLy8gICBAaW5jbHVkZSBydGwge1xuLy8vICAgICBwYWRkaW5nLWxlZnQ6IGF1dG87XG4vLy8gICAgIHBhZGRpbmctcmlnaHQ6IDRweDtcbi8vLyAgIH1cbi8vLyB9XG4vLy9cbi8vLyBAZXhhbXBsZSAtIGNzc1xuLy8vICAgLm1kYy1mb28ge1xuLy8vICAgICBwYWRkaW5nLWxlZnQ6IDRweDtcbi8vLyAgIH1cbi8vL1xuLy8vICAgW2Rpcj1cInJ0bFwiXSAubWRjLWZvbyxcbi8vLyAgIC5tZGMtZm9vW2Rpcj1cInJ0bFwiXSB7XG4vLy8gICAgIHBhZGRpbmctbGVmdDogYXV0bztcbi8vLyAgICAgcGFkZGluZy1yaWdodDogNHB4O1xuLy8vICAgfVxuLy8vXG4vLy8gTm90ZSB0aGF0IHRoaXMgbWl4aW4gd29ya3MgYnkgY2hlY2tpbmcgZm9yIGFuIGFuY2VzdG9yIGVsZW1lbnQgd2l0aFxuLy8vIGBbZGlyPVwicnRsXCJdYC4gQXMgYSByZXN1bHQsIG5lc3RlZCBgZGlyYCB2YWx1ZXMgYXJlIG5vdCBzdXBwb3J0ZWQ6XG4vLy9cbi8vLyBAZXhhbXBsZSAtIGh0bWxcbi8vLyA8aHRtbCBkaXI9XCJydGxcIj5cbi8vLyAgIDwhLS0gLi4uIC0tPlxuLy8vICAgPGRpdiBkaXI9XCJsdHJcIj5cbi8vLyAgICAgPGRpdiBjbGFzcz1cIm1kYy1mb29cIj5TdHlsZWQgaW5jb3JyZWN0bHkgYXMgUlRMITwvZGl2PlxuLy8vICAgPC9kaXY+XG4vLy8gPC9odG1sPlxuLy8vXG4vLy8gSW4gdGhlIGZ1dHVyZSwgc2VsZWN0b3JzIHN1Y2ggYXMgdGhlIGA6ZGlyYCBwc2V1ZG8tY2xhc3Ncbi8vLyAoaHR0cDovL21kbi5pby9jc3MvOmRpcikgd2lsbCBoZWxwIHVzIG1pdGlnYXRlIHRoaXMuXG4vLy9cbi8vLyBAY29udGVudCBDb250ZW50IHRvIGJlIHN0eWxlZCBpbiBhbiBSVEwgY29udGV4dC5cbkBtaXhpbiBydGwoKSB7XG4gIEBpZiAoJGluY2x1ZGUpIHtcbiAgICAkZGlyLXJ0bDogJ1tkaXI9cnRsXSc7XG5cbiAgICAkcnRsLXNlbGVjdG9yczogbGlzdC5qb2luKFxuICAgICAgc2VsZWN0b3IubmVzdCgkZGlyLXJ0bCwgJiksXG4gICAgICBzZWxlY3Rvci1leHQuYXBwZW5kLXN0cmljdCgmLCAkZGlyLXJ0bClcbiAgICApO1xuXG4gICAgQGF0LXJvb3Qge1xuICAgICAgI3skcnRsLXNlbGVjdG9yc30ge1xuICAgICAgICBAY29udGVudDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gVGFrZXMgYSBiYXNlIGJveC1tb2RlbCBwcm9wZXJ0eSBuYW1lIChgbWFyZ2luYCwgYGJvcmRlcmAsIGBwYWRkaW5nYCwgZXRjLikgYWxvbmcgd2l0aCBhXG4vLyBkZWZhdWx0IGRpcmVjdGlvbiAoYGxlZnRgIG9yIGByaWdodGApIGFuZCB2YWx1ZSwgYW5kIGVtaXRzIHJ1bGVzIHdoaWNoIGFwcGx5IHRoZSBnaXZlbiB2YWx1ZSB0byB0aGVcbi8vIHNwZWNpZmllZCBkaXJlY3Rpb24gYnkgZGVmYXVsdCBhbmQgdGhlIG9wcG9zaXRlIGRpcmVjdGlvbiBpbiBSVEwuXG4vL1xuLy8gRm9yIGV4YW1wbGU6XG4vL1xuLy8gYGBgc2Nzc1xuLy8gLm1kYy1mb28ge1xuLy8gICBAaW5jbHVkZSBydGwtcmVmbGV4aXZlLWJveChtYXJnaW4sIGxlZnQsIDhweCk7XG4vLyB9XG4vLyBgYGBcbi8vXG4vLyBpcyBlcXVpdmFsZW50IHRvOlxuLy9cbi8vIGBgYHNjc3Ncbi8vIC5tZGMtZm9vIHtcbi8vICAgbWFyZ2luLWxlZnQ6IDhweDtcbi8vICAgbWFyZ2luLXJpZ2h0OiAwO1xuLy9cbi8vICAgQGluY2x1ZGUgcnRsIHtcbi8vICAgICBtYXJnaW4tbGVmdDogMDtcbi8vICAgICBtYXJnaW4tcmlnaHQ6IDhweDtcbi8vICAgfVxuLy8gfVxuLy8gYGBgXG4vL1xuLy8gd2hlcmVhczpcbi8vXG4vLyBgYGBzY3NzXG4vLyAubWRjLWZvbyB7XG4vLyAgIEBpbmNsdWRlIHJ0bC1yZWZsZXhpdmUtYm94KG1hcmdpbiwgcmlnaHQsIDhweCk7XG4vLyB9XG4vLyBgYGBcbi8vXG4vLyBpcyBlcXVpdmFsZW50IHRvOlxuLy9cbi8vIGBgYHNjc3Ncbi8vIC5tZGMtZm9vIHtcbi8vICAgbWFyZ2luLWxlZnQ6IDA7XG4vLyAgIG1hcmdpbi1yaWdodDogOHB4O1xuLy9cbi8vICAgQGluY2x1ZGUgcnRsIHtcbi8vICAgICBtYXJnaW4tbGVmdDogOHB4O1xuLy8gICAgIG1hcmdpbi1yaWdodDogMDtcbi8vICAgfVxuLy8gfVxuLy8gYGBgXG4vL1xuLy8gWW91IGNhbiBhbHNvIHBhc3MgYW4gb3B0aW9uYWwgNHRoIGAkcm9vdC1zZWxlY3RvcmAgYXJndW1lbnQgd2hpY2ggd2lsbCBiZSBmb3J3YXJkZWQgdG8gYG1kYy1ydGxgLFxuLy8gZS5nLiBgQGluY2x1ZGUgcnRsLXJlZmxleGl2ZS1ib3gobWFyZ2luLCBsZWZ0LCA4cHgsICcubWRjLWNvbXBvbmVudCcpYC5cbi8vXG4vLyBOb3RlIHRoYXQgdGhpcyBmdW5jdGlvbiB3aWxsIGFsd2F5cyB6ZXJvIG91dCB0aGUgb3JpZ2luYWwgdmFsdWUgaW4gYW4gUlRMIGNvbnRleHQuXG4vLyBJZiB5b3UncmUgdHJ5aW5nIHRvIGZsaXAgdGhlIHZhbHVlcywgdXNlIGBtZGMtcnRsLXJlZmxleGl2ZS1wcm9wZXJ0eSgpYCBpbnN0ZWFkLlxuQG1peGluIHJlZmxleGl2ZS1ib3goXG4gICRiYXNlLXByb3BlcnR5LFxuICAkZGVmYXVsdC1kaXJlY3Rpb24sXG4gICR2YWx1ZSxcbiAgJHJlcGxhY2U6IG51bGxcbikge1xuICBAaWYgKGxpc3QuaW5kZXgoKHJpZ2h0LCBsZWZ0KSwgJGRlZmF1bHQtZGlyZWN0aW9uKSA9PSBudWxsKSB7XG4gICAgQGVycm9yIFwiSW52YWxpZCBkZWZhdWx0IGRpcmVjdGlvbjogJyN7JGRlZmF1bHQtZGlyZWN0aW9ufScuIFBsZWFzZSBzcGVjaWZpeSBlaXRoZXIgJ3JpZ2h0JyBvciAnbGVmdCcuXCI7XG4gIH1cblxuICAkbGVmdC12YWx1ZTogJHZhbHVlO1xuICAkcmlnaHQtdmFsdWU6IDA7XG5cbiAgQGlmICgkZGVmYXVsdC1kaXJlY3Rpb24gPT0gcmlnaHQpIHtcbiAgICAkbGVmdC12YWx1ZTogMDtcbiAgICAkcmlnaHQtdmFsdWU6ICR2YWx1ZTtcbiAgfVxuXG4gIEBpbmNsdWRlIHJlZmxleGl2ZS1wcm9wZXJ0eShcbiAgICAkYmFzZS1wcm9wZXJ0eSxcbiAgICAkbGVmdC12YWx1ZSxcbiAgICAkcmlnaHQtdmFsdWUsXG4gICAgJHJlcGxhY2U6ICRyZXBsYWNlXG4gICk7XG59XG5cbi8vIFRha2VzIGEgYmFzZSBwcm9wZXJ0eSBhbmQgZW1pdHMgcnVsZXMgdGhhdCBhc3NpZ24gPGJhc2UtcHJvcGVydHk+LWxlZnQgdG8gPGxlZnQtdmFsdWU+IGFuZFxuLy8gPGJhc2UtcHJvcGVydHk+LXJpZ2h0IHRvIDxyaWdodC12YWx1ZT4gaW4gYSBMVFIgY29udGV4dCwgYW5kIHZpY2UgdmVyc2EgaW4gYSBSVEwgY29udGV4dC5cbi8vIEZvciBleGFtcGxlOlxuLy9cbi8vIGBgYHNjc3Ncbi8vIC5tZGMtZm9vIHtcbi8vICAgQGluY2x1ZGUgcnRsLXJlZmxleGl2ZS1wcm9wZXJ0eShtYXJnaW4sIGF1dG8sIDEycHgpO1xuLy8gfVxuLy8gYGBgXG4vL1xuLy8gaXMgZXF1aXZhbGVudCB0bzpcbi8vXG4vLyBgYGBzY3NzXG4vLyAubWRjLWZvbyB7XG4vLyAgIG1hcmdpbi1sZWZ0OiBhdXRvO1xuLy8gICBtYXJnaW4tcmlnaHQ6IDEycHg7XG4vL1xuLy8gICBAaW5jbHVkZSBydGwge1xuLy8gICAgIG1hcmdpbi1sZWZ0OiAxMnB4O1xuLy8gICAgIG1hcmdpbi1yaWdodDogYXV0bztcbi8vICAgfVxuLy8gfVxuLy8gYGBgXG4vL1xuLy8gQW4gb3B0aW9uYWwgNHRoIGAkcm9vdC1zZWxlY3RvcmAgYXJndW1lbnQgY2FuIGJlIGdpdmVuLCB3aGljaCB3aWxsIGJlIHBhc3NlZCB0byBgbWRjLXJ0bGAuXG5AbWl4aW4gcmVmbGV4aXZlLXByb3BlcnR5KFxuICAkYmFzZS1wcm9wZXJ0eSxcbiAgJGxlZnQtdmFsdWUsXG4gICRyaWdodC12YWx1ZSxcbiAgJHJlcGxhY2U6IG51bGxcbikge1xuICAkcHJvcC1sZWZ0OiAjeyRiYXNlLXByb3BlcnR5fS1sZWZ0O1xuICAkcHJvcC1yaWdodDogI3skYmFzZS1wcm9wZXJ0eX0tcmlnaHQ7XG5cbiAgQGluY2x1ZGUgcmVmbGV4aXZlKFxuICAgICRwcm9wLWxlZnQsXG4gICAgJGxlZnQtdmFsdWUsXG4gICAgJHByb3AtcmlnaHQsXG4gICAgJHJpZ2h0LXZhbHVlLFxuICAgICRyZXBsYWNlOiAkcmVwbGFjZVxuICApO1xufVxuXG4vLyBUYWtlcyBhbiBhcmd1bWVudCBzcGVjaWZ5aW5nIGEgaG9yaXpvbnRhbCBwb3NpdGlvbiBwcm9wZXJ0eSAoZWl0aGVyICdsZWZ0JyBvciAncmlnaHQnKSBhcyB3ZWxsXG4vLyBhcyBhIHZhbHVlLCBhbmQgYXBwbGllcyB0aGF0IHZhbHVlIHRvIHRoZSBzcGVjaWZpZWQgcG9zaXRpb24gaW4gYSBMVFIgY29udGV4dCwgYW5kIGZsaXBzIGl0IGluIGFcbi8vIFJUTCBjb250ZXh0LiBGb3IgZXhhbXBsZTpcbi8vXG4vLyBgYGBzY3NzXG4vLyAubWRjLWZvbyB7XG4vLyAgIEBpbmNsdWRlIHJ0bC1yZWZsZXhpdmUtcG9zaXRpb24obGVmdCwgMCk7XG4vLyB9XG4vLyBgYGBcbi8vXG4vLyBpcyBlcXVpdmFsZW50IHRvOlxuLy9cbi8vIGBgYHNjc3Ncbi8vIC5tZGMtZm9vIHtcbi8vICAgbGVmdDogMDtcbi8vICAgcmlnaHQ6IGluaXRpYWw7XG4vL1xuLy8gICBAaW5jbHVkZSBydGwge1xuLy8gICAgIGxlZnQ6IGluaXRpYWw7XG4vLyAgICAgcmlnaHQ6IDA7XG4vLyAgIH1cbi8vIH1cbi8vIGBgYFxuLy9cbi8vIEFuIG9wdGlvbmFsIHRoaXJkICRyb290LXNlbGVjdG9yIGFyZ3VtZW50IG1heSBhbHNvIGJlIGdpdmVuLCB3aGljaCBpcyBwYXNzZWQgdG8gYG1kYy1ydGxgLlxuQG1peGluIHJlZmxleGl2ZS1wb3NpdGlvbigkcG9zaXRpb24tcHJvcGVydHksICR2YWx1ZSwgJHJlcGxhY2U6IG51bGwpIHtcbiAgQGlmIChsaXN0LmluZGV4KChyaWdodCwgbGVmdCksICRwb3NpdGlvbi1wcm9wZXJ0eSkgPT0gbnVsbCkge1xuICAgIEBlcnJvciBcIkludmFsaWQgcG9zaXRpb24gI3twb3NpdGlvbi1wcm9wZXJ0eX0uIFBsZWFzZSBzcGVjaWZpeSBlaXRoZXIgcmlnaHQgb3IgbGVmdFwiO1xuICB9XG5cbiAgLy8gVE9ETzogJ2luaXRpYWwnIGlzIG5vdCBzdXBwb3J0ZWQgaW4gSUUgMTEuIGh0dHBzOi8vY2FuaXVzZS5jb20vI2ZlYXQ9Y3NzLWluaXRpYWwtdmFsdWVcbiAgJGxlZnQtdmFsdWU6ICR2YWx1ZTtcbiAgJHJpZ2h0LXZhbHVlOiBpbml0aWFsO1xuXG4gIEBpZiAoJHBvc2l0aW9uLXByb3BlcnR5ID09IHJpZ2h0KSB7XG4gICAgJHJpZ2h0LXZhbHVlOiAkdmFsdWU7XG4gICAgJGxlZnQtdmFsdWU6IGluaXRpYWw7XG4gIH1cblxuICBAaW5jbHVkZSByZWZsZXhpdmUoXG4gICAgbGVmdCxcbiAgICAkbGVmdC12YWx1ZSxcbiAgICByaWdodCxcbiAgICAkcmlnaHQtdmFsdWUsXG4gICAgJHJlcGxhY2U6ICRyZXBsYWNlXG4gICk7XG59XG5cbi8vIFRha2VzIHBhaXIgb2YgcHJvcGVydGllcyB3aXRoIHZhbHVlcyBhcyBhcmd1bWVudHMgYW5kIGZsaXBzIGl0IGluIFJUTCBjb250ZXh0LlxuLy8gRm9yIGV4YW1wbGU6XG4vL1xuLy8gYGBgc2Nzc1xuLy8gLm1kYy1mb28ge1xuLy8gICBAaW5jbHVkZSBydGwtcmVmbGV4aXZlKGxlZnQsIDJweCwgcmlnaHQsIDVweCk7XG4vLyB9XG4vLyBgYGBcbi8vXG4vLyBpcyBlcXVpdmFsZW50IHRvOlxuLy9cbi8vIGBgYHNjc3Ncbi8vIC5tZGMtZm9vIHtcbi8vICAgbGVmdDogMnB4O1xuLy8gICByaWdodDogNXB4O1xuLy9cbi8vICAgQGluY2x1ZGUgcnRsIHtcbi8vICAgICByaWdodDogMnB4O1xuLy8gICAgIGxlZnQ6IDVweDtcbi8vICAgfVxuLy8gfVxuLy8gYGBgXG4vL1xuLy8gQW4gb3B0aW9uYWwgZmlmdGggYCRyb290LXNlbGVjdG9yYCBhcmd1bWVudCBtYXkgYWxzbyBiZSBnaXZlbiwgd2hpY2ggaXMgcGFzc2VkIHRvIGBtZGMtcnRsYC5cbkBtaXhpbiByZWZsZXhpdmUoXG4gICRsZWZ0LXByb3BlcnR5LFxuICAkbGVmdC12YWx1ZSxcbiAgJHJpZ2h0LXByb3BlcnR5LFxuICAkcmlnaHQtdmFsdWUsXG4gICRyZXBsYWNlOiBudWxsXG4pIHtcbiAgJGxlZnQtcmVwbGFjZTogbnVsbDtcbiAgJHJpZ2h0LXJlcGxhY2U6IG51bGw7XG4gIEBpZiAkcmVwbGFjZSB7XG4gICAgQGlmIG1ldGEudHlwZS1vZigkbGVmdC12YWx1ZSkgPT0gJ3N0cmluZycge1xuICAgICAgJGxlZnQtcmVwbGFjZTogJHJlcGxhY2U7XG4gICAgfVxuXG4gICAgQGlmIG1ldGEudHlwZS1vZigkcmlnaHQtdmFsdWUpID09ICdzdHJpbmcnIHtcbiAgICAgICRyaWdodC1yZXBsYWNlOiAkcmVwbGFjZTtcbiAgICB9XG5cbiAgICBAaWYgJGxlZnQtcmVwbGFjZSA9PSBudWxsIGFuZCAkcmlnaHQtcmVwbGFjZSA9PSBudWxsIHtcbiAgICAgIEBlcnJvciAnbWRjLXJ0bDogJHJlcGxhY2UgbWF5IG9ubHkgYmUgdXNlZCB3aXRoIHN0cmluZ3MgYnV0IG5laXRoZXIgbGVmdCBub3IgcmlnaHQgdmFsdWVzIGFyZSBzdHJpbmdzLic7XG4gICAgfVxuXG4gICAgLy8gSWYgYW55IHJlcGxhY2VtZW50cyBhcmUgbnVsbCwgdHJlYXQgdGhlIGVudGlyZSB2YWx1ZSBhcyBudWxsIChkbyBub3RcbiAgICAvLyBlbWl0IGFueXRoaW5nKS5cbiAgICBAZWFjaCAkbmFtZSwgJHJlcGxhY2VtZW50IGluICRyZXBsYWNlIHtcbiAgICAgIEBpZiAkcmVwbGFjZW1lbnQgPT0gbnVsbCB7XG4gICAgICAgICRsZWZ0LXZhbHVlOiBudWxsO1xuICAgICAgICAkcmlnaHQtdmFsdWU6IG51bGw7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLy8gRG8gbm90IGVtaXQgaWYgZWl0aGVyIHZhbHVlIGFyZSBudWxsXG4gIEBpZiAkbGVmdC12YWx1ZSBhbmQgJHJpZ2h0LXZhbHVlIHtcbiAgICBAaW5jbHVkZSBfcHJvcGVydHkoJGxlZnQtcHJvcGVydHksICRsZWZ0LXZhbHVlLCAkcmVwbGFjZTogJGxlZnQtcmVwbGFjZSk7XG4gICAgQGluY2x1ZGUgX3Byb3BlcnR5KCRyaWdodC1wcm9wZXJ0eSwgJHJpZ2h0LXZhbHVlLCAkcmVwbGFjZTogJHJpZ2h0LXJlcGxhY2UpO1xuXG4gICAgQGluY2x1ZGUgcnRsIHtcbiAgICAgIEBpbmNsdWRlIF9wcm9wZXJ0eShcbiAgICAgICAgJGxlZnQtcHJvcGVydHksXG4gICAgICAgICRyaWdodC12YWx1ZSxcbiAgICAgICAgJHJlcGxhY2U6ICRyaWdodC1yZXBsYWNlXG4gICAgICApO1xuICAgICAgQGluY2x1ZGUgX3Byb3BlcnR5KCRyaWdodC1wcm9wZXJ0eSwgJGxlZnQtdmFsdWUsICRyZXBsYWNlOiAkbGVmdC1yZXBsYWNlKTtcbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gQWRkcyBgQG5vZmxpcGAgYW5ub3RhdGlvbiB3aGVuIGAkbWRjLXJ0bC1pbmNsdWRlYCBpcyB0cnVlLlxuLy8vXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICRwcm9wZXJ0eVxuLy8vIEBwYXJhbSB7U3RyaW5nfSAkdmFsdWVcbi8vLyBAcGFyYW0ge01hcH0gJHJlcGxhY2Vcbi8vL1xuQG1peGluIF9wcm9wZXJ0eSgkcHJvcGVydHksICR2YWx1ZSwgJHJlcGxhY2U6IG51bGwpIHtcbiAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoXG4gICAgJHByb3BlcnR5LFxuICAgICR2YWx1ZSxcbiAgICAkcmVwbGFjZTogJHJlcGxhY2UsXG4gICAgJGdzczogKG5vZmxpcDogJGluY2x1ZGUpXG4gICk7XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuXG5cbkB1c2UgJ3Nhc3M6bWF0aCc7XG5AdXNlICdzYXNzOmNvbG9yJztcbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJ0BtYXRlcmlhbC9hbmltYXRpb24vZnVuY3Rpb25zJyBhcyBmdW5jdGlvbnMyO1xuQHVzZSAnQG1hdGVyaWFsL2FuaW1hdGlvbi92YXJpYWJsZXMnIGFzIHZhcmlhYmxlczI7XG5AdXNlICdAbWF0ZXJpYWwvYmFzZS9taXhpbnMnIGFzIGJhc2UtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL2N1c3RvbS1wcm9wZXJ0aWVzJztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUnO1xuQHVzZSAnLi9yaXBwbGUtdGhlbWUnO1xuXG5AbWl4aW4gY29yZS1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBzdGF0aWMtc3R5bGVzKCRxdWVyeTogJHF1ZXJ5KTtcblxuICAubWRjLXJpcHBsZS1zdXJmYWNlIHtcbiAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzKCRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG5AbWl4aW4gc3RhdGljLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLm1kYy1yaXBwbGUtc3VyZmFjZSB7XG4gICAgQGluY2x1ZGUgc3VyZmFjZSgkcXVlcnk6ICRxdWVyeSk7XG4gICAgQGluY2x1ZGUgcmFkaXVzLWJvdW5kZWQoJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIEBpbmNsdWRlIHN1cmZhY2Utc3R5bGVzKCRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxuXG4gIC5tZGMtcmlwcGxlLXN1cmZhY2VbZGF0YS1tZGMtcmlwcGxlLWlzLXVuYm91bmRlZF0sXG4gIC5tZGMtcmlwcGxlLXVwZ3JhZGVkLS11bmJvdW5kZWQge1xuICAgIEBpbmNsdWRlIHJhZGl1cy11bmJvdW5kZWQoJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIEBpbmNsdWRlIHVuYm91bmRlZC1zdHlsZXMoJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vLyBTZXRzIGFsbCBzdGF0ZXMgKGluY2x1ZGluZyBob3ZlciwgZm9jdXMsIHByZXNzLCBhY3RpdmF0ZWQgYW5kIHNlbGVjdGVkKSB3aXRoXG4vLy8gZ2l2ZW4gY29sb3IgYXMgYmFzZSBjb2xvci5cbi8vL1xuLy8vIFRoaXMgbWl4aW4gaXMgZm9yIGludGVybmFsIHVzZSBvbmx5LiBVc2UgYHJpcHBsZS10aGVtZS5zdGF0ZXMoJGNvbG9yKWAgbWl4aW5cbi8vLyB0byBzZXQgaW50ZXJhY3RpdmUgc3RhdGVzIChob3ZlciwgZm9jdXMgJiBwcmVzcykgY29sb3IuXG4vLy9cbi8vLyBAcGFyYW0ge0NvbG9yfFN0cmluZ30gJGNvbG9yIC0gVGFyZ2V0IGJhc2UgY29sb3IuIENhbiBiZSB2YWxpZCBDU1MgY29sb3Igb3Jcbi8vLyAgICAgYSBjb2xvciBzdHJpbmcgbGl0ZXJhbCAoaS5lLiwgYHByaW1hcnlgLCBgc2Vjb25kYXJ5YCwgZXRjKS5cbkBtaXhpbiBzdGF0ZXMtZm9yLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzLWFjdGl2YXRlZCgkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLnN0YXRlcy1zZWxlY3RlZCgkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbn1cblxuQG1peGluIHN1cmZhY2Utc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBvdXRsaW5lOiBub25lO1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gIH1cbn1cblxuQG1peGluIHVuYm91bmRlZC1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICB9XG59XG5cbkBtaXhpbiBjb21tb24oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1hbmltYXRpb246IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xuXG4gIC8vIEVuc3VyZSB0aGF0IHN0eWxlcyBuZWVkZWQgYnkgYW55IGNvbXBvbmVudCB1c2luZyBNREMgUmlwcGxlIGFyZSBlbWl0dGVkLCBidXQgb25seSBvbmNlLlxuICAvLyAoRXZlcnkgY29tcG9uZW50IHVzaW5nIE1EQyBSaXBwbGUgaW1wb3J0cyB0aGVzZSBtaXhpbnMsIGJ1dCBkb2Vzbid0IG5lY2Vzc2FyaWx5IGltcG9ydFxuICAvLyBtZGMtcmlwcGxlLnNjc3MuKVxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgIEBpbmNsdWRlIGJhc2UtbWl4aW5zLmVtaXQtb25jZSgnbWRjLXJpcHBsZS9jb21tb24vYW5pbWF0aW9uJykge1xuICAgICAgQGluY2x1ZGUga2V5ZnJhbWVzXztcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHN1cmZhY2UoXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCksXG4gICRyaXBwbGUtdGFyZ2V0OiAnJicsXG4gICRpbmNsdWRlLXdpbGwtY2hhbmdlOiB0cnVlIC8vIFRPRE8oYi8xNTE5MzE5NjEpOiBSZW1vdmUgb25jZSByZXNvbHZlZFxuKSB7XG4gICRmZWF0LWFuaW1hdGlvbjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGFuaW1hdGlvbik7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAtLW1kYy1yaXBwbGUtZmctc2l6ZTogMDtcbiAgICAtLW1kYy1yaXBwbGUtbGVmdDogMDtcbiAgICAtLW1kYy1yaXBwbGUtdG9wOiAwO1xuICAgIC0tbWRjLXJpcHBsZS1mZy1zY2FsZTogMTtcbiAgICAtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZDogMDtcbiAgICAtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLXN0YXJ0OiAwO1xuXG4gICAgLXdlYmtpdC10YXAtaGlnaGxpZ2h0LWNvbG9yOiByZ2JhKDAsIDAsIDAsIDApO1xuICAgIC8vIFRPRE8oYi8xNTE5MzE5NjEpOiBSZW1vdmUgdGhlIGZvbGxvd2luZyBibG9jayBvbmNlIHJlc29sdmVkXG4gICAgQGlmICRpbmNsdWRlLXdpbGwtY2hhbmdlIHtcbiAgICAgIHdpbGwtY2hhbmdlOiB0cmFuc2Zvcm0sIG9wYWNpdHk7XG4gICAgfVxuICB9XG5cbiAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSxcbiAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm9yZGVyLXJhZGl1czogNTAlO1xuICAgICAgb3BhY2l0eTogMDtcbiAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgY29udGVudDogJyc7XG4gICAgfVxuICB9XG5cbiAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcbiAgICAgIC8vIEFsc28gdHJhbnNpdGlvbiBiYWNrZ3JvdW5kLWNvbG9yIHRvIGF2b2lkIHVubmF0dXJhbCBjb2xvciBmbGFzaGVzIHdoZW4gdG9nZ2xpbmcgYWN0aXZhdGVkL3NlbGVjdGVkIHN0YXRlXG4gICAgICB0cmFuc2l0aW9uOiBvcGFjaXR5IHJpcHBsZS10aGVtZS4kc3RhdGVzLXdhc2gtZHVyYXRpb24gbGluZWFyLFxuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yIHJpcHBsZS10aGVtZS4kc3RhdGVzLXdhc2gtZHVyYXRpb24gbGluZWFyO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAvLyBFbnN1cmUgdGhhdCB0aGUgcmlwcGxlIHdhc2ggZm9yIGhvdmVyL2ZvY3VzIHN0YXRlcyBpcyBkaXNwbGF5ZWQgb24gdG9wIG9mIHBvc2l0aW9uZWQgY2hpbGQgZWxlbWVudHNcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KFxuICAgICAgICB6LWluZGV4LFxuICAgICAgICBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoLS1tZGMtcmlwcGxlLXotaW5kZXgsIDEpXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KFxuICAgICAgICB6LWluZGV4LFxuICAgICAgICBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoLS1tZGMtcmlwcGxlLXotaW5kZXgsIDApXG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gIC8vIENvbW1vbiBzdHlsZXMgZm9yIHVwZ3JhZGVkIHN1cmZhY2VzIChzb21lIG9mIHRoZXNlIGRlcGVuZCBvbiBjdXN0b20gcHJvcGVydGllcyBzZXQgdmlhIEpTIG9yIG90aGVyIG1peGlucylcblxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQge1xuICAgICN7JHJpcHBsZS10YXJnZXR9OjpiZWZvcmUge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgdHJhbnNmb3JtOiBzY2FsZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXNjYWxlLCAxKSk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgLyogQG5vZmxpcCAqL1xuICAgICAgICBsZWZ0OiAwO1xuICAgICAgICB0cmFuc2Zvcm06IHNjYWxlKDApO1xuICAgICAgICB0cmFuc2Zvcm0tb3JpZ2luOiBjZW50ZXIgY2VudGVyO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZC0tdW5ib3VuZGVkIHtcbiAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgdG9wOiB2YXIoLS1tZGMtcmlwcGxlLXRvcCwgMCk7XG4gICAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgICAgbGVmdDogdmFyKC0tbWRjLXJpcHBsZS1sZWZ0LCAwKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAmLm1kYy1yaXBwbGUtdXBncmFkZWQtLWZvcmVncm91bmQtYWN0aXZhdGlvbiB7XG4gICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgICAgIGFuaW1hdGlvbjogbWRjLXJpcHBsZS1mZy1yYWRpdXMtaW4gcmlwcGxlLXRoZW1lLiR0cmFuc2xhdGUtZHVyYXRpb25cbiAgICAgICAgICAgIGZvcndhcmRzLFxuICAgICAgICAgIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1pbiByaXBwbGUtdGhlbWUuJGZhZGUtaW4tZHVyYXRpb24gZm9yd2FyZHM7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1mb3JlZ3JvdW5kLWRlYWN0aXZhdGlvbiB7XG4gICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgICAgIGFuaW1hdGlvbjogbWRjLXJpcHBsZS1mZy1vcGFjaXR5LW91dCByaXBwbGUtdGhlbWUuJGZhZGUtb3V0LWR1cmF0aW9uO1xuICAgICAgfVxuXG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICAvLyBSZXRhaW4gdHJhbnNmb3JtIGZyb20gbWRjLXJpcHBsZS1mZy1yYWRpdXMtaW4gYWN0aXZhdGlvblxuICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1lbmQsIDApKVxuICAgICAgICAgIHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDEpKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHJhZGl1cy1ib3VuZGVkKFxuICAkcmFkaXVzOiAxMDAlLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpLFxuICAkcmlwcGxlLXRhcmdldDogJyYnXG4pIHtcbiAgJGZlYXQtc3RydXR1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gICN7JHJpcHBsZS10YXJnZXR9OjpiZWZvcmUsXG4gICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1dHVyZSkge1xuICAgICAgdG9wOiBjYWxjKDUwJSAtICN7JHJhZGl1c30pO1xuICAgICAgLyogQG5vZmxpcCAqL1xuICAgICAgbGVmdDogY2FsYyg1MCUgLSAjeyRyYWRpdXN9KTtcbiAgICAgIHdpZHRoOiAkcmFkaXVzICogMjtcbiAgICAgIGhlaWdodDogJHJhZGl1cyAqIDI7XG4gICAgfVxuICB9XG5cbiAgJi5tZGMtcmlwcGxlLXVwZ3JhZGVkIHtcbiAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1dHVyZSkge1xuICAgICAgICB3aWR0aDogdmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAkcmFkaXVzKTtcbiAgICAgICAgaGVpZ2h0OiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsICRyYWRpdXMpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gcmFkaXVzLXVuYm91bmRlZChcbiAgJHJhZGl1czogMTAwJSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xuKSB7XG4gICRmZWF0LXN0cnV0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlLFxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydXR1cmUpIHtcbiAgICAgIHRvcDogY2FsYyg1MCUgLSAje21hdGguZGl2KCRyYWRpdXMsIDIpfSk7XG4gICAgICAvKiBAbm9mbGlwICovXG4gICAgICBsZWZ0OiBjYWxjKDUwJSAtICN7bWF0aC5kaXYoJHJhZGl1cywgMil9KTtcbiAgICAgIHdpZHRoOiAkcmFkaXVzO1xuICAgICAgaGVpZ2h0OiAkcmFkaXVzO1xuICAgIH1cbiAgfVxuXG4gICYubWRjLXJpcHBsZS11cGdyYWRlZCB7XG4gICAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSxcbiAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1dHVyZSkge1xuICAgICAgICB0b3A6IHZhcigtLW1kYy1yaXBwbGUtdG9wLCBjYWxjKDUwJSAtICN7bWF0aC5kaXYoJHJhZGl1cywgMil9KSk7XG4gICAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgICAgbGVmdDogdmFyKC0tbWRjLXJpcHBsZS1sZWZ0LCBjYWxjKDUwJSAtICN7bWF0aC5kaXYoJHJhZGl1cywgMil9KSk7XG4gICAgICAgIHdpZHRoOiB2YXIoLS1tZGMtcmlwcGxlLWZnLXNpemUsICRyYWRpdXMpO1xuICAgICAgICBoZWlnaHQ6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydXR1cmUpIHtcbiAgICAgICAgd2lkdGg6IHZhcigtLW1kYy1yaXBwbGUtZmctc2l6ZSwgJHJhZGl1cyk7XG4gICAgICAgIGhlaWdodDogdmFyKC0tbWRjLXJpcHBsZS1mZy1zaXplLCAkcmFkaXVzKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gQ29tbW9uIHN0eWxlcyBmb3IgYSByaXBwbGUgdGFyZ2V0IGVsZW1lbnQuXG4vLyBVc2VkIGZvciBjb21wb25lbnRzIHdoaWNoIGhhdmUgYW4gaW5uZXIgcmlwcGxlIHRhcmdldCBlbGVtZW50LlxuQG1peGluIHRhcmdldC1jb21tb24oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgIHRvcDogMDtcbiAgICBsZWZ0OiAwO1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICAvLyBOZWNlc3NhcnkgZm9yIGNsaWNrcyBvbiBvdGhlciBpbm5lciBlbGVtZW50cyAoZS5nLiBjbG9zZSBpY29uIGluIGNoaXApXG4gICAgLy8gdG8gZ28gdGhyb3VnaC5cbiAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgfVxufVxuXG5AbWl4aW4ga2V5ZnJhbWVzXyB7XG4gIEBrZXlmcmFtZXMgbWRjLXJpcHBsZS1mZy1yYWRpdXMtaW4ge1xuICAgIGZyb20ge1xuICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogdmFyaWFibGVzMi4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uO1xuICAgICAgLy8gTk9URTogRm9yIHRoZXNlIGtleWZyYW1lcywgd2UgZG8gbm90IG5lZWQgY3VzdG9tIHByb3BlcnR5IGZhbGxiYWNrcyBiZWNhdXNlIHRoZXkgYXJlIG9ubHlcbiAgICAgIC8vIHVzZWQgaW4gY29uanVuY3Rpb24gd2l0aCBgLm1kYy1yaXBwbGUtdXBncmFkZWRgLiBTaW5jZSBNRENSaXBwbGVGb3VuZGF0aW9uIGNoZWNrcyB0byBlbnN1cmVcbiAgICAgIC8vIHRoYXQgY3VzdG9tIHByb3BlcnRpZXMgYXJlIHN1cHBvcnRlZCB3aXRoaW4gdGhlIGJyb3dzZXIgYmVmb3JlIGFkZGluZyB0aGlzIGNsYXNzLCB3ZSBjYW5cbiAgICAgIC8vIHNhZmVseSB1c2UgdGhlbSB3aXRob3V0IGEgZmFsbGJhY2suXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZSh2YXIoLS1tZGMtcmlwcGxlLWZnLXRyYW5zbGF0ZS1zdGFydCwgMCkpIHNjYWxlKDEpO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlKHZhcigtLW1kYy1yaXBwbGUtZmctdHJhbnNsYXRlLWVuZCwgMCkpXG4gICAgICAgIHNjYWxlKHZhcigtLW1kYy1yaXBwbGUtZmctc2NhbGUsIDEpKTtcbiAgICB9XG4gIH1cblxuICBAa2V5ZnJhbWVzIG1kYy1yaXBwbGUtZmctb3BhY2l0eS1pbiB7XG4gICAgZnJvbSB7XG4gICAgICBhbmltYXRpb24tdGltaW5nLWZ1bmN0aW9uOiBsaW5lYXI7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cblxuICAgIHRvIHtcbiAgICAgIG9wYWNpdHk6IHZhcigtLW1kYy1yaXBwbGUtZmctb3BhY2l0eSwgMCk7XG4gICAgfVxuICB9XG5cbiAgQGtleWZyYW1lcyBtZGMtcmlwcGxlLWZnLW9wYWNpdHktb3V0IHtcbiAgICBmcm9tIHtcbiAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGxpbmVhcjtcbiAgICAgIG9wYWNpdHk6IHZhcigtLW1kYy1yaXBwbGUtZmctb3BhY2l0eSwgMCk7XG4gICAgfVxuXG4gICAgdG8ge1xuICAgICAgb3BhY2l0eTogMDtcbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4kZGVjZWxlcmF0aW9uLWN1cnZlLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAsIDAsIDAuMiwgMSkgIWRlZmF1bHQ7XG4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uOiBjdWJpYy1iZXppZXIoMC40LCAwLCAwLjIsIDEpICFkZWZhdWx0O1xuJGFjY2VsZXJhdGlvbi1jdXJ2ZS10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjQsIDAsIDEsIDEpICFkZWZhdWx0O1xuJHNoYXJwLWN1cnZlLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKDAuNCwgMCwgMC42LCAxKSAhZGVmYXVsdDtcblxuQGZ1bmN0aW9uIGVudGVyKCRuYW1lLCAkZHVyYXRpb24sICRkZWxheTogMG1zKSB7XG4gIEByZXR1cm4gJG5hbWUgJGR1cmF0aW9uICRkZWxheSAkZGVjZWxlcmF0aW9uLWN1cnZlLXRpbWluZy1mdW5jdGlvbjtcbn1cblxuQGZ1bmN0aW9uIGV4aXQtcGVybWFuZW50KCRuYW1lLCAkZHVyYXRpb24sICRkZWxheTogMG1zKSB7XG4gIEByZXR1cm4gJG5hbWUgJGR1cmF0aW9uICRkZWxheSAkYWNjZWxlcmF0aW9uLWN1cnZlLXRpbWluZy1mdW5jdGlvbjtcbn1cblxuQGZ1bmN0aW9uIGV4aXQtdGVtcG9yYXJ5KCRuYW1lLCAkZHVyYXRpb24sICRkZWxheTogMG1zKSB7XG4gIEByZXR1cm4gJG5hbWUgJGR1cmF0aW9uICRkZWxheSAkc2hhcnAtY3VydmUtdGltaW5nLWZ1bmN0aW9uO1xufVxuXG5AZnVuY3Rpb24gc3RhbmRhcmQoJG5hbWUsICRkdXJhdGlvbiwgJGRlbGF5OiAwbXMpIHtcbiAgQHJldHVybiAkbmFtZSAkZHVyYXRpb24gJGRlbGF5ICRzdGFuZGFyZC1jdXJ2ZS10aW1pbmctZnVuY3Rpb247XG59XG5cbkBmdW5jdGlvbiBsaW5lYXIoJG5hbWUsICRkdXJhdGlvbiwgJGRlbGF5OiAwbXMpIHtcbiAgQHJldHVybiAkbmFtZSAkZHVyYXRpb24gJGRlbGF5IGxpbmVhcjtcbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuIC0tXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cblxuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJ0BtYXRlcmlhbC9yaXBwbGUvcmlwcGxlJztcblxuJHJpcHBsZS10YXJnZXQ6ICcubWRjLWJ1dHRvbl9fcmlwcGxlJztcblxuQG1peGluIHN0YXRpYy1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIHJpcHBsZS5jb21tb24oJHF1ZXJ5KTsgLy8gQ09QWUJBUkFfQ09NTUVOVF9USElTX0xJTkVcblxuICAubWRjLWJ1dHRvbiB7XG4gICAgQGluY2x1ZGUgcmlwcGxlLnN1cmZhY2UoJHF1ZXJ5OiAkcXVlcnksICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldCk7XG4gICAgQGluY2x1ZGUgcmlwcGxlLnJhZGl1cy1ib3VuZGVkKFxuICAgICAgJHF1ZXJ5OiAkcXVlcnksXG4gICAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXRcbiAgICApO1xuXG4gICAgI3skcmlwcGxlLXRhcmdldH0ge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgICAvLyBSaXBwbGUgbmVlZHMgY29udGVudC1ib3ggYXMgdGhlIGJveCBzaXppbmcgYW5kIGJveC1zaXppbmc6IGJvcmRlci1ib3hcbiAgICAgICAgLy8gaXMgb2Z0ZW4gc2V0IGFzIGEgZGVmYXVsdCwgc28gd2Ugb3ZlcnJpZGUgdGhhdCBoZXJlLlxuICAgICAgICBib3gtc2l6aW5nOiBjb250ZW50LWJveDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGhlaWdodDogMTAwJTtcbiAgICAgICAgb3ZlcmZsb3c6IGhpZGRlbjtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAvLyBSaXBwbGUgdGFyZ2V0cyBpbnNpZGUgb3V0bGluZWQgYnV0dG9ucyBzZXQgdGhlaXIgb3duIGB0b3BgL2BsZWZ0YCxcbiAgICAvLyBkZXBlbmRpbmcgb24gdGhlIGJvcmRlciB3aWR0aC5cbiAgICAmOm5vdCgubWRjLWJ1dHRvbi0tb3V0bGluZWQpICN7JHJpcHBsZS10YXJnZXR9IHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIHRvcDogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuIC0tXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cblxuQHVzZSAnQG1hdGVyaWFsL2VsZXZhdGlvbi9lbGV2YXRpb24tdGhlbWUnO1xuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJy4vYnV0dG9uLWJhc2UnO1xuQHVzZSAnLi9idXR0b24tcHJvdGVjdGVkLXRoZW1lJztcbkB1c2UgJy4vYnV0dG9uLXNoYXJlZC10aGVtZSc7XG5cbkBtaXhpbiBzdHlsZXMoXG4gICR0aGVtZTogYnV0dG9uLXByb3RlY3RlZC10aGVtZS4kbGlnaHQtdGhlbWUsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICBAaW5jbHVkZSBidXR0b24tYmFzZS5zdGF0aWMtc3R5bGVzKCRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgc3RhdGljLXN0eWxlcygkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIHRoZW1lLXN0eWxlcygkdGhlbWUsICRxdWVyeTogJHF1ZXJ5KTtcbn1cblxuQG1peGluIHRoZW1lLXN0eWxlcyhcbiAgJHRoZW1lOiBidXR0b24tcHJvdGVjdGVkLXRoZW1lLiRsaWdodC10aGVtZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gIC5tZGMtYnV0dG9uLS1yYWlzZWQge1xuICAgIC8vIFRPRE8oYi8xNzk0MDI2NzcpOiBtb3ZlIGludG8gdGhlbWUgY29uZmlnLlxuICAgIEBpbmNsdWRlIGJ1dHRvbi1zaGFyZWQtdGhlbWUuaG9yaXpvbnRhbC1wYWRkaW5nKFxuICAgICAgJHBhZGRpbmc6IGJ1dHRvbi1zaGFyZWQtdGhlbWUuJGNvbnRhaW5lZC1ob3Jpem9udGFsLXBhZGRpbmcsXG4gICAgICAkcGFkZGluZy1pY29uOiBidXR0b24tc2hhcmVkLXRoZW1lLiRjb250YWluZWQtaG9yaXpvbnRhbC1wYWRkaW5nLWljb24sXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG5cbiAgICBAaW5jbHVkZSBidXR0b24tcHJvdGVjdGVkLXRoZW1lLnRoZW1lKCR0aGVtZSwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbkBtaXhpbiBzdGF0aWMtc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgLm1kYy1idXR0b24tLXJhaXNlZCB7XG4gICAgQGluY2x1ZGUgX3JhaXNlZC10cmFuc2l0aW9uKCRxdWVyeSk7XG4gIH1cbn1cblxuLy8vIEBkZXByZWNhdGVkIFByaXZhdGUgc3R5bGUgbWl4aW4gZm9yIHBhcnRuZXJzOyBub3QgYXZhaWxhYmxlIGZvciBwdWJsaWMgdXNlLlxuQG1peGluIGRlcHJlY2F0ZWQtcmFpc2VkKCRxdWVyeSkge1xuICBAaW5jbHVkZSByYWlzZWQoJHF1ZXJ5KTtcbn1cblxuQG1peGluIHJhaXNlZCgkcXVlcnkpIHtcbiAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLmVsZXZhdGlvbigyLCAkcXVlcnk6ICRxdWVyeSk7XG5cbiAgJjpob3ZlcixcbiAgJjpmb2N1cyB7XG4gICAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLmVsZXZhdGlvbig0LCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cblxuICAmOmFjdGl2ZSB7XG4gICAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLmVsZXZhdGlvbig4LCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cblxuICAmOmRpc2FibGVkIHtcbiAgICBAaW5jbHVkZSBlbGV2YXRpb24tdGhlbWUuZWxldmF0aW9uKDAsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxuXG4gIEBpbmNsdWRlIF9yYWlzZWQtdHJhbnNpdGlvbigkcXVlcnkpO1xufVxuXG5AbWl4aW4gX3JhaXNlZC10cmFuc2l0aW9uKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgIHRyYW5zaXRpb246IGVsZXZhdGlvbi10aGVtZS50cmFuc2l0aW9uLXZhbHVlKCk7XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAyMCBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuIC0tXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cblxuQHVzZSAnc2FzczptYXAnO1xuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJy4vYnV0dG9uLWJhc2UnO1xuQHVzZSAnLi9idXR0b24tb3V0bGluZWQtdGhlbWUnO1xuQHVzZSAnLi9idXR0b24tc2hhcmVkLXRoZW1lJztcblxuQG1peGluIHN0eWxlcyhcbiAgJHRoZW1lOiBidXR0b24tb3V0bGluZWQtdGhlbWUuJGxpZ2h0LXRoZW1lLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgQGluY2x1ZGUgYnV0dG9uLWJhc2Uuc3RhdGljLXN0eWxlcygkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIHN0YXRpYy1zdHlsZXMoJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSB0aGVtZS1zdHlsZXMoJHRoZW1lLCAkcXVlcnk6ICRxdWVyeSk7XG59XG5cbkBtaXhpbiB0aGVtZS1zdHlsZXMoXG4gICR0aGVtZTogYnV0dG9uLW91dGxpbmVkLXRoZW1lLiRsaWdodC10aGVtZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gIC5tZGMtYnV0dG9uLS1vdXRsaW5lZCB7XG4gICAgQGluY2x1ZGUgX3RoZW1lLXN0eWxlcygkdGhlbWUsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG5AbWl4aW4gc3RhdGljLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIC5tZGMtYnV0dG9uLS1vdXRsaW5lZCB7XG4gICAgQGluY2x1ZGUgX3N0YXRpYy1zdHlsZXMoJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbkBtaXhpbiBkZXByZWNhdGVkLXRoZW1lLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIC5tZGMtYnV0dG9uLS1vdXRsaW5lZCB7XG4gICAgJHRoZW1lOiBtYXAubWVyZ2UoXG4gICAgICBidXR0b24tb3V0bGluZWQtdGhlbWUuJGxpZ2h0LXRoZW1lLFxuICAgICAgKFxuICAgICAgICBmb2N1cy1zdGF0ZS1sYXllci1jb2xvcjogbnVsbCxcbiAgICAgICAgZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eTogbnVsbCxcbiAgICAgICAgaG92ZXItc3RhdGUtbGF5ZXItY29sb3I6IG51bGwsXG4gICAgICAgIGhvdmVyLXN0YXRlLWxheWVyLW9wYWNpdHk6IG51bGwsXG4gICAgICAgIHByZXNzZWQtc3RhdGUtbGF5ZXItY29sb3I6IG51bGwsXG4gICAgICAgIHByZXNzZWQtc3RhdGUtbGF5ZXItb3BhY2l0eTogbnVsbCxcbiAgICAgICAgbGFiZWwtdGV4dC1mb250OiBudWxsLFxuICAgICAgICBsYWJlbC10ZXh0LXNpemU6IG51bGwsXG4gICAgICAgIGxhYmVsLXRleHQtdHJhY2tpbmc6IG51bGwsXG4gICAgICAgIGxhYmVsLXRleHQtdHJhbnNmb3JtOiBudWxsLFxuICAgICAgICBsYWJlbC10ZXh0LXdlaWdodDogbnVsbCxcbiAgICAgIClcbiAgICApO1xuICAgIEBpbmNsdWRlIF90aGVtZS1zdHlsZXMoJHRoZW1lLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuQG1peGluIF90aGVtZS1zdHlsZXMoJHRoZW1lLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIGJ1dHRvbi1vdXRsaW5lZC10aGVtZS50aGVtZSgkdGhlbWUsICRxdWVyeTogJHF1ZXJ5KTtcbn1cblxuQG1peGluIF9zdGF0aWMtc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGJvcmRlci1zdHlsZTogc29saWQ7XG4gIH1cbn1cblxuQG1peGluIG91dGxpbmVkKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgX3N0YXRpYy1zdHlsZXMoJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBfdGhlbWUtc3R5bGVzKGJ1dHRvbi1vdXRsaW5lZC10aGVtZS4kbGlnaHQtdGhlbWUsICRxdWVyeTogJHF1ZXJ5KTtcbn1cblxuLy8vIEBkZXByZWNhdGVkIFByaXZhdGUgc3R5bGUgbWl4aW4gZm9yIHBhcnRuZXJzOyBub3QgYXZhaWxhYmxlIGZvciBwdWJsaWMgdXNlLlxuQG1peGluIGRlcHJlY2F0ZWQtb3V0bGluZWQoJHF1ZXJ5KSB7XG4gIEBpbmNsdWRlIG91dGxpbmVkKCRxdWVyeSk7XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjEgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVybiAtLVxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG5cbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJy4vYnV0dG9uLXNoYXJlZC10aGVtZSc7XG5AdXNlICcuL2J1dHRvbi10ZXh0LXRoZW1lJztcblxuQG1peGluIHN0eWxlcygkdGhlbWU6IGJ1dHRvbi10ZXh0LXRoZW1lLiRsaWdodC10aGVtZSwgJHF1ZXJ5OiAkcXVlcnkpIHtcbiAgQGluY2x1ZGUgYnV0dG9uLWJhc2Uuc3RhdGljLXN0eWxlcygkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIHN0YXRpYy1zdHlsZXMoJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSB0aGVtZS1zdHlsZXMoJHRoZW1lLCAkcXVlcnk6ICRxdWVyeSk7XG59XG5cbkBtaXhpbiB0aGVtZS1zdHlsZXMoXG4gICR0aGVtZTogYnV0dG9uLXRleHQtdGhlbWUuJGxpZ2h0LXRoZW1lLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgLm1kYy1idXR0b24ge1xuICAgIEBpbmNsdWRlIGJ1dHRvbi10ZXh0LXRoZW1lLnRoZW1lKCR0aGVtZSwgJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIC8vIFRPRE8oYi8xNzk0MDI2NzcpOiBtb3ZlIHRoaXMgaW50byB0aGVtZSBjb25maWdcbiAgICBAaW5jbHVkZSBidXR0b24tc2hhcmVkLXRoZW1lLmhvcml6b250YWwtcGFkZGluZyhcbiAgICAgIGJ1dHRvbi1zaGFyZWQtdGhlbWUuJGhvcml6b250YWwtcGFkZGluZyxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcbiAgfVxufVxuXG5AbWl4aW4gc3RhdGljLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIC8vIEludGVudGlvbmFsbHkgbGVmdCBibGFuayBmb3IgZnV0dXJlLXByb29maW5nLlxufVxuXG5AbWl4aW4gZGVwcmVjYXRlZC10aGVtZS1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkdGhlbWU6IG1hcC5tZXJnZShcbiAgICBidXR0b24tdGV4dC10aGVtZS4kbGlnaHQtdGhlbWUsXG4gICAgKFxuICAgICAgZm9jdXMtc3RhdGUtbGF5ZXItY29sb3I6IG51bGwsXG4gICAgICBmb2N1cy1zdGF0ZS1sYXllci1vcGFjaXR5OiBudWxsLFxuICAgICAgaG92ZXItc3RhdGUtbGF5ZXItY29sb3I6IG51bGwsXG4gICAgICBob3Zlci1zdGF0ZS1sYXllci1vcGFjaXR5OiBudWxsLFxuICAgICAgcHJlc3NlZC1zdGF0ZS1sYXllci1jb2xvcjogbnVsbCxcbiAgICAgIHByZXNzZWQtc3RhdGUtbGF5ZXItb3BhY2l0eTogbnVsbCxcbiAgICAgIGxhYmVsLXRleHQtZm9udDogbnVsbCxcbiAgICAgIGxhYmVsLXRleHQtc2l6ZTogbnVsbCxcbiAgICAgIGxhYmVsLXRleHQtdHJhY2tpbmc6IG51bGwsXG4gICAgICBsYWJlbC10ZXh0LXRyYW5zZm9ybTogbnVsbCxcbiAgICAgIGxhYmVsLXRleHQtd2VpZ2h0OiBudWxsLFxuICAgIClcbiAgKTtcblxuICAubWRjLWJ1dHRvbiB7XG4gICAgQGluY2x1ZGUgYnV0dG9uLXRleHQtdGhlbWUudGhlbWUoJHRoZW1lLCAkcXVlcnk6ICRxdWVyeSk7XG4gICAgLy8gVE9ETyhiLzE3OTQwMjY3Nyk6IG1vdmUgdGhpcyBpbnRvIHRoZW1lIGNvbmZpZ1xuICAgIEBpbmNsdWRlIGJ1dHRvbi1zaGFyZWQtdGhlbWUuaG9yaXpvbnRhbC1wYWRkaW5nKFxuICAgICAgYnV0dG9uLXNoYXJlZC10aGVtZS4kaG9yaXpvbnRhbC1wYWRkaW5nLFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjEgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVybiAtLVxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG5cbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJ3Nhc3M6bWF0aCc7XG5AdXNlICdzYXNzOm1ldGEnO1xuQHVzZSAnQG1hdGVyaWFsL2RlbnNpdHkvZnVuY3Rpb25zJyBhcyBkZW5zaXR5LWZ1bmN0aW9ucztcbkB1c2UgJ0BtYXRlcmlhbC9kZW5zaXR5L3ZhcmlhYmxlcycgYXMgZGVuc2l0eS12YXJpYWJsZXM7XG5AdXNlICdAbWF0ZXJpYWwvZG9tL21peGlucycgYXMgZG9tLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9lbGV2YXRpb24vZWxldmF0aW9uLXRoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvcmlwcGxlL3JpcHBsZS10aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvc2hhcGUvbWl4aW5zJyBhcyBzaGFwZS1taXhpbnM7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvc3RhdGUnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZS1jb2xvcic7XG5AdXNlICdAbWF0ZXJpYWwvdHlwb2dyYXBoeS90eXBvZ3JhcGh5JztcbkB1c2UgJy4vYnV0dG9uLXJpcHBsZSc7XG5cbiRoZWlnaHQ6IDM2cHggIWRlZmF1bHQ7XG4kaG9yaXpvbnRhbC1wYWRkaW5nOiA4cHggIWRlZmF1bHQ7XG4kY29udGFpbmVkLWhvcml6b250YWwtcGFkZGluZzogMTZweCAhZGVmYXVsdDtcbi8vIEZvciBhIGNvbnRhaW5lZCBidXR0b24gd2l0aCBhbiBpY29uLCB0aGUgcGFkZGluZyBvbiB0aGUgc2lkZSBvZiB0aGVcbi8vIGJ1dHRvbiB3aXRoIHRoZSBpY29uLlxuJGNvbnRhaW5lZC1ob3Jpem9udGFsLXBhZGRpbmctaWNvbjogMTJweCAhZGVmYXVsdDtcblxuJG1pbmltdW0taGVpZ2h0OiAyNHB4ICFkZWZhdWx0O1xuJG1heGltdW0taGVpZ2h0OiAkaGVpZ2h0ICFkZWZhdWx0O1xuJGRlbnNpdHktc2NhbGU6IGRlbnNpdHktdmFyaWFibGVzLiRkZWZhdWx0LXNjYWxlICFkZWZhdWx0O1xuJGRlbnNpdHktY29uZmlnOiAoXG4gIGhlaWdodDogKFxuICAgIGRlZmF1bHQ6ICRoZWlnaHQsXG4gICAgbWF4aW11bTogJG1heGltdW0taGVpZ2h0LFxuICAgIG1pbmltdW06ICRtaW5pbXVtLWhlaWdodCxcbiAgKSxcbikgIWRlZmF1bHQ7XG5cbiRzaGFwZS1yYWRpdXM6IHNtYWxsICFkZWZhdWx0O1xuXG4kZGlzYWJsZWQtaW5rLWNvbG9yOiByZ2JhKHRoZW1lLWNvbG9yLnByb3AtdmFsdWUob24tc3VyZmFjZSksIDAuMzgpICFkZWZhdWx0O1xuJGRpc2FibGVkLWNvbnRhaW5lci1jb2xvcjogcmdiYShcbiAgdGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSxcbiAgMC4xMlxuKSAhZGVmYXVsdDtcblxuQG1peGluIHRoZW1lKCR0aGVtZSwgJHJlc29sdmVyLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIF9sYWJlbC10ZXh0LXR5cG9ncmFwaHkoXG4gICAgKFxuICAgICAgZmFtaWx5OiBtYXAuZ2V0KCR0aGVtZSwgbGFiZWwtdGV4dC1mb250KSxcbiAgICAgIHNpemU6IG1hcC5nZXQoJHRoZW1lLCBsYWJlbC10ZXh0LXNpemUpLFxuICAgICAgdHJhY2tpbmc6IG1hcC5nZXQoJHRoZW1lLCBsYWJlbC10ZXh0LXRyYWNraW5nKSxcbiAgICAgIHdlaWdodDogbWFwLmdldCgkdGhlbWUsIGxhYmVsLXRleHQtd2VpZ2h0KSxcbiAgICAgIHRyYW5zZm9ybTogbWFwLmdldCgkdGhlbWUsIGxhYmVsLXRleHQtdHJhbnNmb3JtKSxcbiAgICApLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG5cbiAgQGluY2x1ZGUgY29udGFpbmVyLWZpbGwtY29sb3IoXG4gICAgKFxuICAgICAgZGVmYXVsdDogbWFwLmdldCgkdGhlbWUsIGNvbnRhaW5lci1jb2xvciksXG4gICAgICBkaXNhYmxlZDogbWFwLmdldCgkdGhlbWUsIGRpc2FibGVkLWNvbnRhaW5lci1jb2xvciksXG4gICAgKSxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xuXG4gIEBpbmNsdWRlIGluay1jb2xvcihcbiAgICAoXG4gICAgICBkZWZhdWx0OiBtYXAuZ2V0KCR0aGVtZSwgbGFiZWwtdGV4dC1jb2xvciksXG4gICAgICBob3ZlcjogbWFwLmdldCgkdGhlbWUsIGhvdmVyLWxhYmVsLXRleHQtY29sb3IpLFxuICAgICAgZm9jdXM6IG1hcC5nZXQoJHRoZW1lLCBmb2N1cy1sYWJlbC10ZXh0LWNvbG9yKSxcbiAgICAgIHByZXNzZWQ6IG1hcC5nZXQoJHRoZW1lLCBwcmVzc2VkLWxhYmVsLXRleHQtY29sb3IpLFxuICAgICAgZGlzYWJsZWQ6IG1hcC5nZXQoJHRoZW1lLCBkaXNhYmxlZC1sYWJlbC10ZXh0LWNvbG9yKSxcbiAgICApLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG5cbiAgQGluY2x1ZGUgaWNvbi1jb2xvcihcbiAgICAoXG4gICAgICBkZWZhdWx0OiBtYXAuZ2V0KCR0aGVtZSwgd2l0aC1pY29uLWljb24tY29sb3IpLFxuICAgICAgaG92ZXI6IG1hcC5nZXQoJHRoZW1lLCB3aXRoLWljb24taG92ZXItaWNvbi1jb2xvciksXG4gICAgICBmb2N1czogbWFwLmdldCgkdGhlbWUsIHdpdGgtaWNvbi1mb2N1cy1pY29uLWNvbG9yKSxcbiAgICAgIHByZXNzZWQ6IG1hcC5nZXQoJHRoZW1lLCB3aXRoLWljb24tcHJlc3NlZC1pY29uLWNvbG9yKSxcbiAgICAgIGRpc2FibGVkOiBtYXAuZ2V0KCR0aGVtZSwgd2l0aC1pY29uLWRpc2FibGVkLWljb24tY29sb3IpLFxuICAgICksXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcblxuICAkaWNvbi1zaXplOiBtYXAuZ2V0KCR0aGVtZSwgd2l0aC1pY29uLWljb24tc2l6ZSk7XG4gIEBpbmNsdWRlIF9pY29uLXNpemUoJGljb24tc2l6ZSwgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gIEBpbmNsdWRlIF9zdGF0ZXMtY29sb3JzKFxuICAgIChcbiAgICAgIGZvY3VzOiBtYXAuZ2V0KCR0aGVtZSwgZm9jdXMtc3RhdGUtbGF5ZXItY29sb3IpLFxuICAgICAgaG92ZXI6IG1hcC5nZXQoJHRoZW1lLCBob3Zlci1zdGF0ZS1sYXllci1jb2xvciksXG4gICAgICBwcmVzc2VkOiBtYXAuZ2V0KCR0aGVtZSwgcHJlc3NlZC1zdGF0ZS1sYXllci1jb2xvciksXG4gICAgKSxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xuXG4gICRob3Zlci1zdGF0ZS1sYXllci1vcGFjaXR5OiBtYXAuZ2V0KCR0aGVtZSwgaG92ZXItc3RhdGUtbGF5ZXItb3BhY2l0eSk7XG4gICRmb2N1cy1zdGF0ZS1sYXllci1vcGFjaXR5OiBtYXAuZ2V0KCR0aGVtZSwgZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eSk7XG4gICRwcmVzc2VkLXN0YXRlLWxheWVyLW9wYWNpdHk6IG1hcC5nZXQoJHRoZW1lLCBwcmVzc2VkLXN0YXRlLWxheWVyLW9wYWNpdHkpO1xuICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzLW9wYWNpdGllcyhcbiAgICAkb3BhY2l0eS1tYXA6IChcbiAgICAgIGZvY3VzOiAkZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eSxcbiAgICAgIGhvdmVyOiAkaG92ZXItc3RhdGUtbGF5ZXItb3BhY2l0eSxcbiAgICAgIHByZXNzOiAkcHJlc3NlZC1zdGF0ZS1sYXllci1vcGFjaXR5LFxuICAgICksXG4gICAgJHJpcHBsZS10YXJnZXQ6IGJ1dHRvbi1yaXBwbGUuJHJpcHBsZS10YXJnZXQsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcblxuICAkZGVuc2l0eTogbWFwLmdldCgkdGhlbWUsIGRlbnNpdHkpO1xuICBAaWYgJGRlbnNpdHkgIT0gbnVsbCB7XG4gICAgQGluY2x1ZGUgZGVuc2l0eSgkZGVuc2l0eS1zY2FsZTogJGRlbnNpdHksICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxuXG4gICRzaGFwZTogbWFwLmdldCgkdGhlbWUsIGNvbnRhaW5lci1zaGFwZSk7XG4gIEBpZiAkZGVuc2l0eSA9PSBudWxsIHtcbiAgICAkZGVuc2l0eTogJGRlbnNpdHktc2NhbGU7XG4gIH1cbiAgQGlmICRzaGFwZSB7XG4gICAgQGluY2x1ZGUgc2hhcGUtcmFkaXVzKCRzaGFwZSwgJGRlbnNpdHktc2NhbGU6ICRkZW5zaXR5LCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cblxuICBAaW5jbHVkZSBfZWxldmF0aW9uKFxuICAgICRyZXNvbHZlcixcbiAgICAkZWxldmF0aW9uLW1hcDogKFxuICAgICAgZGVmYXVsdDogbWFwLmdldCgkdGhlbWUsIGNvbnRhaW5lci1lbGV2YXRpb24pLFxuICAgICAgZGlzYWJsZWQ6IG1hcC5nZXQoJHRoZW1lLCBkaXNhYmxlZC1jb250YWluZXItZWxldmF0aW9uKSxcbiAgICAgIGZvY3VzOiBtYXAuZ2V0KCR0aGVtZSwgZm9jdXMtY29udGFpbmVyLWVsZXZhdGlvbiksXG4gICAgICBob3ZlcjogbWFwLmdldCgkdGhlbWUsIGhvdmVyLWNvbnRhaW5lci1lbGV2YXRpb24pLFxuICAgICAgcHJlc3NlZDogbWFwLmdldCgkdGhlbWUsIHByZXNzZWQtY29udGFpbmVyLWVsZXZhdGlvbilcbiAgICApLFxuICAgICRzaGFkb3ctY29sb3I6IG1hcC5nZXQoJHRoZW1lLCBjb250YWluZXItc2hhZG93LWNvbG9yKSxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xufVxuXG4vLy9cbi8vLyBTZXRzIHJpcHBsZSBjb2xvciBmb3IgYnV0dG9uLlxuLy8vXG5AbWl4aW4gcmlwcGxlLXN0YXRlcyhcbiAgJGNvbG9yLFxuICAkb3BhY2l0eS1tYXA6IG51bGwsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzKFxuICAgICRjb2xvcjogJGNvbG9yLFxuICAgICRvcGFjaXR5LW1hcDogJG9wYWNpdHktbWFwLFxuICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICRyaXBwbGUtdGFyZ2V0OiBidXR0b24tcmlwcGxlLiRyaXBwbGUtdGFyZ2V0XG4gICk7XG59XG5cbkBtaXhpbiBmaWxsZWQtYWNjZXNzaWJsZShcbiAgJGNvbnRhaW5lci1maWxsLWNvbG9yLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZpbGwtdG9uZTogdGhlbWUtY29sb3IudG9uZSgkY29udGFpbmVyLWZpbGwtY29sb3IpO1xuXG4gIEBpbmNsdWRlIGNvbnRhaW5lci1maWxsLWNvbG9yKCRjb250YWluZXItZmlsbC1jb2xvciwgJHF1ZXJ5KTtcblxuICBAaWYgKCRmaWxsLXRvbmUgPT0gJ2RhcmsnKSB7XG4gICAgQGluY2x1ZGUgaW5rLWNvbG9yKHRleHQtcHJpbWFyeS1vbi1kYXJrLCAkcXVlcnkpO1xuICAgIEBpbmNsdWRlIHJpcHBsZS1zdGF0ZXMoJGNvbG9yOiB0ZXh0LXByaW1hcnktb24tZGFyaywgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9IEBlbHNlIHtcbiAgICBAaW5jbHVkZSBpbmstY29sb3IodGV4dC1wcmltYXJ5LW9uLWxpZ2h0LCAkcXVlcnkpO1xuICAgIEBpbmNsdWRlIHJpcHBsZS1zdGF0ZXMoJGNvbG9yOiB0ZXh0LXByaW1hcnktb24tbGlnaHQsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSBjb250YWluZXIgZmlsbCBjb2xvciB0byB0aGUgZ2l2ZW4gY29sb3IgZm9yIGFuIGVuYWJsZWQgYnV0dG9uLlxuLy8vIEBwYXJhbSB7Q29sb3J8bWFwfSAkY29sb3Itb3ItbWFwIC0gVGhlIGRlc2lyZWQgY29udGFpbmVyIGZpbGwgY29sb3IsXG4vLy8gICAgIHNwZWNpZmllZCBlaXRoZXIgYXMgYSBmbGF0IHZhbHVlIG9yIGEgbWFwIG9mIGNvbG9ycyB3aXRoIHN0YXRlc1xuLy8vICAgICB7ZGVmYXVsdCwgaG92ZXIsIGZvY3VzZWQsIHByZXNzZWQsIGRpc2FibGVkfSBhcyBrZXlzLlxuLy8vXG5AbWl4aW4gY29udGFpbmVyLWZpbGwtY29sb3IoJGNvbG9yLW9yLW1hcCwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAvLyA6bm90KDpkaXNhYmxlZCkgaXMgdXNlZCB0byBzdXBwb3J0IGxpbmsgc3R5bGVkIGFzIGJ1dHRvblxuICAvLyBhcyBsaW5rIGRvZXMgbm90IHN1cHBvcnQgOmVuYWJsZWQgc3R5bGVcbiAgJjpub3QoOmRpc2FibGVkKSB7XG4gICAgQGluY2x1ZGUgX2NvbnRhaW5lci1maWxsLWNvbG9yKFxuICAgICAgc3RhdGUuZ2V0LWRlZmF1bHQtc3RhdGUoJGNvbG9yLW9yLW1hcCksXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIEBpbmNsdWRlIF9jb250YWluZXItZmlsbC1jb2xvcihcbiAgICAgICAgc3RhdGUuZ2V0LWhvdmVyLXN0YXRlKCRjb2xvci1vci1tYXApLFxuICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuZm9jdXMoKSB7XG4gICAgICBAaW5jbHVkZSBfY29udGFpbmVyLWZpbGwtY29sb3IoXG4gICAgICAgIHN0YXRlLmdldC1mb2N1cy1zdGF0ZSgkY29sb3Itb3ItbWFwKSxcbiAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLmFjdGl2ZSB7XG4gICAgICBAaW5jbHVkZSBfY29udGFpbmVyLWZpbGwtY29sb3IoXG4gICAgICAgIHN0YXRlLmdldC1wcmVzc2VkLXN0YXRlKCRjb2xvci1vci1tYXApLFxuICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAmOmRpc2FibGVkIHtcbiAgICBAaW5jbHVkZSBfY29udGFpbmVyLWZpbGwtY29sb3IoXG4gICAgICBzdGF0ZS5nZXQtZGlzYWJsZWQtc3RhdGUoJGNvbG9yLW9yLW1hcCksXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgY29udGFpbmVyIGZpbGwgY29sb3IgdG8gdGhlIGdpdmVuIGNvbG9yIGZvciBhIGRpc2FibGVkIGJ1dHRvbi5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBjb250YWluZXIgZmlsbCBjb2xvci5cbi8vLyBAZGVwcmVjYXRlZCAtIGNhbGwgYGNvbnRhaW5lci1maWxsLWNvbG9yYCBpbnN0ZWFkIHdpdGggYGRpc2FibGVkYCBhcyBhIG1hcFxuLy8vICAgICBrZXkuXG4vLy9cbkBtaXhpbiBkaXNhYmxlZC1jb250YWluZXItZmlsbC1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgY29udGFpbmVyLWZpbGwtY29sb3IoXG4gICAgKFxuICAgICAgZGlzYWJsZWQ6ICRjb2xvcixcbiAgICApLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG59XG5cbi8vL1xuLy8vIFNldHMgdGhlIGljb24gY29sb3IgdG8gdGhlIGdpdmVuIGNvbG9yIGZvciBhbiBlbmFibGVkIGJ1dHRvbi5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3Itb3ItbWFwIC0gVGhlIGRlc2lyZWQgaWNvbiBjb2xvciwgc3BlY2lmaWVkIGVpdGhlclxuLy8vICAgICBhcyBhIGZsYXQgdmFsdWUgb3IgYSBtYXAgb2YgY29sb3JzIHdpdGggc3RhdGVzXG4vLy8gICAgIHtkZWZhdWx0LCBob3ZlciwgZm9jdXNlZCwgcHJlc3NlZCwgZGlzYWJsZWR9IGFzIGtleXMuXG4vLy9cbkBtaXhpbiBpY29uLWNvbG9yKCRjb2xvci1vci1tYXAsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJjpub3QoOmRpc2FibGVkKSB7XG4gICAgQGluY2x1ZGUgX2ljb24tY29sb3IoXG4gICAgICBzdGF0ZS5nZXQtZGVmYXVsdC1zdGF0ZSgkY29sb3Itb3ItbWFwKSxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcblxuICAgICY6aG92ZXIge1xuICAgICAgQGluY2x1ZGUgX2ljb24tY29sb3IoXG4gICAgICAgIHN0YXRlLmdldC1ob3Zlci1zdGF0ZSgkY29sb3Itb3ItbWFwKSxcbiAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLmZvY3VzKCkge1xuICAgICAgQGluY2x1ZGUgX2ljb24tY29sb3IoXG4gICAgICAgIHN0YXRlLmdldC1mb2N1cy1zdGF0ZSgkY29sb3Itb3ItbWFwKSxcbiAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICk7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLmFjdGl2ZSB7XG4gICAgICBAaW5jbHVkZSBfaWNvbi1jb2xvcihcbiAgICAgICAgc3RhdGUuZ2V0LXByZXNzZWQtc3RhdGUoJGNvbG9yLW9yLW1hcCksXG4gICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gICY6ZGlzYWJsZWQge1xuICAgIEBpbmNsdWRlIF9pY29uLWNvbG9yKFxuICAgICAgc3RhdGUuZ2V0LWRpc2FibGVkLXN0YXRlKCRjb2xvci1vci1tYXApLFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgdGhlIGljb24gY29sb3IgdG8gdGhlIGdpdmVuIGNvbG9yIGZvciBhIGRpc2FibGVkIGJ1dHRvbi5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBpY29uIGNvbG9yLlxuLy8vIEBkZXByZWNhdGVkIC0gY2FsbCBgaWNvbi1jb2xvcmAgaW5zdGVhZCB3aXRoIGBkaXNhYmxlZGAgYXMgYSBtYXAga2V5LlxuLy8vXG5AbWl4aW4gZGlzYWJsZWQtaWNvbi1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgaWNvbi1jb2xvcihcbiAgICAoXG4gICAgICBkaXNhYmxlZDogJGNvbG9yLFxuICAgICksXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgaW5rIGNvbG9yIHRvIHRoZSBnaXZlbiBjb2xvciBmb3IgYW4gZW5hYmxlZCBidXR0b24sXG4vLy8gYW5kIHNldHMgdGhlIGljb24gY29sb3IgdG8gdGhlIGdpdmVuIGNvbG9yIHVubGVzcyBgbWRjLWJ1dHRvbi1pY29uLWNvbG9yYFxuLy8vIGlzIGFsc28gdXNlZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3Itb3ItbWFwIC0gVGhlIGRlc2lyZWQgaW5rIGNvbG9yLCBzcGVjaWZpZWQgZWl0aGVyXG4vLy8gICAgIGFzIGEgZmxhdCB2YWx1ZSBvciBhIG1hcCBvZiBjb2xvcnMgd2l0aCBzdGF0ZXNcbi8vLyAgICAge2RlZmF1bHQsIGhvdmVyLCBmb2N1c2VkLCBwcmVzc2VkLCBkaXNhYmxlZH0gYXMga2V5cy5cbi8vL1xuQG1peGluIGluay1jb2xvcigkY29sb3Itb3ItbWFwLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICY6bm90KDpkaXNhYmxlZCkge1xuICAgIEBpbmNsdWRlIF9pbmstY29sb3Ioc3RhdGUuZ2V0LWRlZmF1bHQtc3RhdGUoJGNvbG9yLW9yLW1hcCksICRxdWVyeTogJHF1ZXJ5KTtcblxuICAgICY6aG92ZXIge1xuICAgICAgQGluY2x1ZGUgX2luay1jb2xvcihzdGF0ZS5nZXQtaG92ZXItc3RhdGUoJGNvbG9yLW9yLW1hcCksICRxdWVyeTogJHF1ZXJ5KTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuZm9jdXMoKSB7XG4gICAgICBAaW5jbHVkZSBfaW5rLWNvbG9yKHN0YXRlLmdldC1mb2N1cy1zdGF0ZSgkY29sb3Itb3ItbWFwKSwgJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5hY3RpdmUge1xuICAgICAgQGluY2x1ZGUgX2luay1jb2xvcihcbiAgICAgICAgc3RhdGUuZ2V0LXByZXNzZWQtc3RhdGUoJGNvbG9yLW9yLW1hcCksXG4gICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICApO1xuICAgIH1cbiAgfVxuXG4gICY6ZGlzYWJsZWQge1xuICAgIEBpbmNsdWRlIF9pbmstY29sb3IoXG4gICAgICBzdGF0ZS5nZXQtZGlzYWJsZWQtc3RhdGUoJGNvbG9yLW9yLW1hcCksXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgaW5rIGNvbG9yIHRvIHRoZSBnaXZlbiBjb2xvciBmb3IgYSBkaXNhYmxlZCBidXR0b24sXG4vLy8gYW5kIHNldHMgdGhlIGljb24gY29sb3IgdG8gdGhlIGdpdmVuIGNvbG9yIHVubGVzcyBgbWRjLWJ1dHRvbi1pY29uLWNvbG9yYFxuLy8vIGlzIGFsc28gdXNlZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBpbmsgY29sb3IuXG4vLy8gQGRlcHJlY2F0ZWQgLSBjYWxsIGBpbmstY29sb3JgIGluc3RlYWQgd2l0aCBgZGlzYWJsZWRgIGFzIGEgbWFwIGtleS5cbi8vL1xuQG1peGluIGRpc2FibGVkLWluay1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgaW5rLWNvbG9yKFxuICAgIChcbiAgICAgIGRpc2FibGVkOiAkY29sb3IsXG4gICAgKSxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xufVxuXG4vLy9cbi8vLyBTZXRzIGRlbnNpdHkgc2NhbGUgZm9yIGJ1dHRvbi5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyIHwgU3RyaW5nfSAkZGVuc2l0eS1zY2FsZSAtIERlbnNpdHkgc2NhbGUgdmFsdWUgZm9yIGNvbXBvbmVudC4gU3VwcG9ydGVkIGRlbnNpdHkgc2NhbGUgdmFsdWVzIGAtM2AsXG4vLy8gICAgIGAtMmAsIGAtMWAsIGAwYC5cbi8vL1xuQG1peGluIGRlbnNpdHkoJGRlbnNpdHktc2NhbGUsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGhlaWdodDogZGVuc2l0eS1mdW5jdGlvbnMucHJvcC12YWx1ZShcbiAgICAkZGVuc2l0eS1jb25maWc6ICRkZW5zaXR5LWNvbmZpZyxcbiAgICAkZGVuc2l0eS1zY2FsZTogJGRlbnNpdHktc2NhbGUsXG4gICAgJHByb3BlcnR5LW5hbWU6IGhlaWdodCxcbiAgKTtcblxuICBAaW5jbHVkZSBoZWlnaHQoJGhlaWdodCwgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gIEBpZiAkZGVuc2l0eS1zY2FsZSAhPSAwIHtcbiAgICBAaW5jbHVkZSBfdG91Y2gtdGFyZ2V0LXJlc2V0KCRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBSZXNldHMgdG91Y2ggdGFyZ2V0LXJlbGF0ZWQgc3R5bGVzLiBUaGlzIGlzIGNhbGxlZCBmcm9tIHRoZSBkZW5zaXR5IG1peGluIHRvXG4vLy8gYXV0b21hdGljYWxseSByZW1vdmUgdGhlIGluY3JlYXNlZCB0b3VjaCB0YXJnZXQsIHNpbmNlIGRlbnNlIGNvbXBvbmVudHNcbi8vLyBkb24ndCBoYXZlIHRoZSBzYW1lIGRlZmF1bHQgYTExeSByZXF1aXJlbWVudHMuXG4vLy8gQGFjY2VzcyBwcml2YXRlXG4vLy9cbkBtaXhpbiBfdG91Y2gtdGFyZ2V0LXJlc2V0KCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIG1hcmdpbi10b3A6IDA7XG4gICAgbWFyZ2luLWJvdHRvbTogMDtcbiAgfVxuXG4gIC5tZGMtYnV0dG9uX190b3VjaCB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgY3VzdG9tIGhlaWdodCBmb3IgYnV0dG9uLlxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkaGVpZ2h0IC0gSGVpZ2h0IG9mIGJ1dHRvbiBpbiBgcHhgLlxuLy8vXG5AbWl4aW4gaGVpZ2h0KCRoZWlnaHQsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGhlaWdodDogJGhlaWdodDtcbiAgfVxufVxuXG5AbWl4aW4gc2hhcGUtcmFkaXVzKFxuICAkcmFkaXVzLFxuICAkcnRsLXJlZmxleGl2ZTogZmFsc2UsXG4gICRkZW5zaXR5LXNjYWxlOiAkZGVuc2l0eS1zY2FsZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRoZWlnaHQ6IGRlbnNpdHktZnVuY3Rpb25zLnByb3AtdmFsdWUoXG4gICAgJGRlbnNpdHktY29uZmlnOiAkZGVuc2l0eS1jb25maWcsXG4gICAgJGRlbnNpdHktc2NhbGU6ICRkZW5zaXR5LXNjYWxlLFxuICAgICRwcm9wZXJ0eS1uYW1lOiBoZWlnaHQsXG4gICk7XG5cbiAgQGluY2x1ZGUgc2hhcGUtbWl4aW5zLnJhZGl1cyhcbiAgICAkcmFkaXVzLFxuICAgICRydGwtcmVmbGV4aXZlLFxuICAgICRjb21wb25lbnQtaGVpZ2h0OiAkaGVpZ2h0LFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG5cbiAgI3tidXR0b24tcmlwcGxlLiRyaXBwbGUtdGFyZ2V0fSB7XG4gICAgQGluY2x1ZGUgc2hhcGUtbWl4aW5zLnJhZGl1cyhcbiAgICAgICRyYWRpdXMsXG4gICAgICAkcnRsLXJlZmxleGl2ZSxcbiAgICAgICRjb21wb25lbnQtaGVpZ2h0OiAkaGVpZ2h0LFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgaG9yaXpvbnRhbCBwYWRkaW5nIHRvIHRoZSBnaXZlbiBudW1iZXIuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRwYWRkaW5nXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRwYWRkaW5nLWljb24gW251bGxdIEZvciBidXR0b25zIHdpdGggYW4gaWNvbiwgdGhlXG4vLy8gICAgIGhvcml6b250YWwgcGFkZGluZyBvbiB0aGUgc2lkZSB3aXRoIHRoZSBpY29uLCBpZiBkaWZmZXJlbnQgZnJvbVxuLy8vICAgICAkcGFkZGluZy5cbi8vL1xuQG1peGluIGhvcml6b250YWwtcGFkZGluZyhcbiAgJHBhZGRpbmcsXG4gICRwYWRkaW5nLWljb246IG51bGwsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgLy8gJHBhZGRpbmcgc2hvdWxkIGJlIGEgc2luZ2xlIHZhbHVlOyBlbmZvcmNlIGl0IGJ5IHNwZWNpZnlpbmcgYWxsIDQgc2lkZXMgaW4gdGhlIG91dHB1dFxuICAgIHBhZGRpbmc6IDAgJHBhZGRpbmcgMCAkcGFkZGluZztcbiAgfVxuXG4gIEBpZiAkcGFkZGluZy1pY29uICE9IG51bGwge1xuICAgICYubWRjLWJ1dHRvbi0taWNvbi10cmFpbGluZyB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICAvLyAkcGFkZGluZyBzaG91bGQgYmUgYSBzaW5nbGUgdmFsdWU7IGVuZm9yY2UgaXQgYnkgc3BlY2lmeWluZyBhbGwgNFxuICAgICAgICAvLyBzaWRlcyBpbiB0aGUgb3V0cHV0LlxuICAgICAgICBwYWRkaW5nOiAwICRwYWRkaW5nLWljb24gMCAkcGFkZGluZztcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm1kYy1idXR0b24tLWljb24tbGVhZGluZyB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICAvLyAkcGFkZGluZyBzaG91bGQgYmUgYSBzaW5nbGUgdmFsdWU7IGVuZm9yY2UgaXQgYnkgc3BlY2lmeWluZyBhbGwgNFxuICAgICAgICAvLyBzaWRlcyBpbiB0aGUgb3V0cHV0LlxuICAgICAgICBwYWRkaW5nOiAwICRwYWRkaW5nIDAgJHBhZGRpbmctaWNvbjtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgYnV0dG9uIGxhYmVsIHRvIG92ZXJmbG93IGFzIGVsbGlwc2lzXG4vLy9cbkBtaXhpbiBsYWJlbC1vdmVyZmxvdy1lbGxpcHNpcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIC5tZGMtYnV0dG9uX19sYWJlbCB7XG4gICAgQGluY2x1ZGUgdHlwb2dyYXBoeS5vdmVyZmxvdy1lbGxpcHNpcygkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gSW5jbHVkZXMgYWQtaG9jIGhpZ2ggY29udHJhc3QgbW9kZSBzdXBwb3J0LlxuLy8vXG5AbWl4aW4gaGlnaC1jb250cmFzdC1tb2RlLXNoaW0oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAmOjpiZWZvcmUge1xuICAgIEBpbmNsdWRlIGRvbS1taXhpbnMudHJhbnNwYXJlbnQtYm9yZGVyKCRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxuXG4gIC8vIExpbmsgYnV0dG9ucyBhcHBseSBmb2N1cyB0byB0aGUgY29udGFpbmVkIGxpbmsuIEZvY3VzIGlzIGluZGljYXRlZCB2aWEgdGhlXG4gIC8vIGxpbmsgc2luY2UgZm9jdXMtd2l0aGluIGlzbid0IHN1cHBvcnRlZCBieSBJRS5cbiAgJiAubWRjLWJ1dHRvbl9fbGluazpmb2N1cyxcbiAgJjpmb2N1cyB7XG4gICAgJjo6YmVmb3JlIHtcbiAgICAgIEBpbmNsdWRlIGRvbS1taXhpbnMudHJhbnNwYXJlbnQtYm9yZGVyKFxuICAgICAgICAkYm9yZGVyLXdpZHRoOiA1cHgsXG4gICAgICAgICRib3JkZXItc3R5bGU6IGRvdWJsZSxcbiAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgdGhlIGNvbnRhaW5lciBmaWxsIGNvbG9yIHRvIHRoZSBnaXZlbiBjb2xvci4gVGhpcyBtaXhpbiBzaG91bGQgYmVcbi8vLyB3cmFwcGVkIGluIGEgc2VsZWN0b3IgdGhhdCBxdWFsaWZpZXMgYnV0dG9uIHN0YXRlLlxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG5AbWl4aW4gX2NvbnRhaW5lci1maWxsLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICBAaWYgJGNvbG9yIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShiYWNrZ3JvdW5kLWNvbG9yLCAkY29sb3IpO1xuICAgIH1cbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSBpY29uIGNvbG9yIHRvIHRoZSBnaXZlbiBjb2xvci4gVGhpcyBtaXhpbiBzaG91bGQgYmVcbi8vLyB3cmFwcGVkIGluIGEgc2VsZWN0b3IgdGhhdCBxdWFsaWZpZXMgYnV0dG9uIHN0YXRlLlxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG5AbWl4aW4gX2ljb24tY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIEBpZiAkY29sb3Ige1xuICAgIC5tZGMtYnV0dG9uX19pY29uIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoY29sb3IsICRjb2xvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfaWNvbi1zaXplKCRzaXplLXB4LCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGlmICRzaXplLXB4ICE9IG51bGwge1xuICAgICRzaXplLXJlbTogdHlwb2dyYXBoeS5weC10by1yZW0oJHNpemUtcHgpO1xuICAgIC5tZGMtYnV0dG9uX19pY29uIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIGZvbnQtc2l6ZTogJHNpemUtcmVtO1xuICAgICAgICBoZWlnaHQ6ICRzaXplLXJlbTtcbiAgICAgICAgd2lkdGg6ICRzaXplLXJlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgaW5rIGNvbG9yIHRvIHRoZSBnaXZlbiBjb2xvci4gVGhpcyBtaXhpbiBzaG91bGQgYmVcbi8vLyB3cmFwcGVkIGluIGEgc2VsZWN0b3IgdGhhdCBxdWFsaWZpZXMgYnV0dG9uIHN0YXRlLlxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG5AbWl4aW4gX2luay1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgQGlmICRjb2xvciB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoY29sb3IsICRjb2xvcik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfc3RhdGVzLWNvbG9ycygkY29sb3ItbWFwLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRob3ZlcjogbWFwLmdldCgkY29sb3ItbWFwLCBob3Zlcik7XG4gICRmb2N1czogbWFwLmdldCgkY29sb3ItbWFwLCBmb2N1cyk7XG4gICRwcmVzc2VkOiBtYXAuZ2V0KCRjb2xvci1tYXAsIHByZXNzZWQpO1xuXG4gIEBpZiAkaG92ZXIgIT0gbnVsbCBhbmQgJGhvdmVyID09ICRmb2N1cyBhbmQgJGZvY3VzID09ICRwcmVzc2VkIHtcbiAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzLWJhc2UtY29sb3IoXG4gICAgICAkY29sb3I6ICRob3ZlcixcbiAgICAgICRyaXBwbGUtdGFyZ2V0OiBidXR0b24tcmlwcGxlLiRyaXBwbGUtdGFyZ2V0LFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9IEBlbHNlIHtcbiAgICAmOmhvdmVyIHtcbiAgICAgIEBpZiAkaG92ZXIgIT0gbnVsbCB7XG4gICAgICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5zdGF0ZXMtYmFzZS1jb2xvcihcbiAgICAgICAgICAkaG92ZXIsXG4gICAgICAgICAgJHJpcHBsZS10YXJnZXQ6IGJ1dHRvbi1yaXBwbGUuJHJpcHBsZS10YXJnZXQsXG4gICAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuZm9jdXMge1xuICAgICAgQGlmICRmb2N1cyAhPSBudWxsIHtcbiAgICAgICAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLnN0YXRlcy1iYXNlLWNvbG9yKFxuICAgICAgICAgICRmb2N1cyxcbiAgICAgICAgICAkcmlwcGxlLXRhcmdldDogYnV0dG9uLXJpcHBsZS4kcmlwcGxlLXRhcmdldCxcbiAgICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5hY3RpdmUge1xuICAgICAgQGlmICRwcmVzc2VkICE9IG51bGwge1xuICAgICAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzLWJhc2UtY29sb3IoXG4gICAgICAgICAgJGFjdGl2ZSxcbiAgICAgICAgICAkcmlwcGxlLXRhcmdldDogYnV0dG9uLXJpcHBsZS4kcmlwcGxlLXRhcmdldCxcbiAgICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX2xhYmVsLXRleHQtdHlwb2dyYXBoeShcbiAgJHR5cG9ncmFwaHktbWFwLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZlYXQtdHlwb2dyYXBoeTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHR5cG9ncmFwaHkpO1xuXG4gICRmYW1pbHk6IG1hcC5nZXQoJHR5cG9ncmFwaHktbWFwLCBmYW1pbHkpO1xuICAkc2l6ZTogbWFwLmdldCgkdHlwb2dyYXBoeS1tYXAsIHNpemUpO1xuICAkdHJhY2tpbmc6IG1hcC5nZXQoJHR5cG9ncmFwaHktbWFwLCB0cmFja2luZyk7XG4gICR3ZWlnaHQ6IG1hcC5nZXQoJHR5cG9ncmFwaHktbWFwLCB3ZWlnaHQpO1xuICAkdHJhbnNmb3JtOiBtYXAuZ2V0KCR0eXBvZ3JhcGh5LW1hcCwgdHJhbnNmb3JtKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXR5cG9ncmFwaHkpIHtcbiAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShmb250LWZhbWlseSwgJGZhbWlseSk7XG5cbiAgICAkaXMtc2l6ZS1weDogbWV0YS50eXBlLW9mKCRzaXplKSA9PSAnbnVtYmVyJyBhbmQgbWF0aC51bml0KCRzaXplKSA9PSAncHgnO1xuICAgIEBpZiAkaXMtc2l6ZS1weCB7XG4gICAgICAkc2l6ZS1yZW06IHR5cG9ncmFwaHkucHgtdG8tcmVtKCRzaXplKTtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGZvbnQtc2l6ZSwgJHNpemUtcmVtKTtcbiAgICB9IEBlbHNlIHtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGZvbnQtc2l6ZSwgJHNpemUpO1xuICAgIH1cblxuICAgIEBpZiAkdHJhY2tpbmcgYW5kICRpcy1zaXplLXB4IHtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGxldHRlci1zcGFjaW5nLCBtYXRoLmRpdigkdHJhY2tpbmcsICRzaXplKSAqIDFlbSk7XG4gICAgfSBAZWxzZSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShsZXR0ZXItc3BhY2luZywgJHRyYWNraW5nKTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShmb250LXdlaWdodCwgJHdlaWdodCk7XG4gICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkodGV4dC10cmFuc2Zvcm0sICR0cmFuc2Zvcm0pO1xuICB9XG59XG5cbkBtaXhpbiBfZWxldmF0aW9uKFxuICAkcmVzb2x2ZXIsXG4gICRlbGV2YXRpb24tbWFwLFxuICAkc2hhZG93LWNvbG9yLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGVsZXZhdGlvbi1yZXNvbHZlcjogbWFwLmdldCgkcmVzb2x2ZXIsIGVsZXZhdGlvbik7XG5cbiAgQGlmICRzaGFkb3ctY29sb3Ige1xuICAgICRkZWZhdWx0OiBzdGF0ZS5nZXQtZGVmYXVsdC1zdGF0ZSgkZWxldmF0aW9uLW1hcCk7XG4gICAgQGlmICRkZWZhdWx0ICE9IG51bGwge1xuICAgICAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLndpdGgtcmVzb2x2ZXIoXG4gICAgICAgICRlbGV2YXRpb24tcmVzb2x2ZXIsXG4gICAgICAgICRlbGV2YXRpb246ICRkZWZhdWx0LFxuICAgICAgICAkc2hhZG93LWNvbG9yOiAkc2hhZG93LWNvbG9yLFxuICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAkZm9jdXM6IHN0YXRlLmdldC1mb2N1cy1zdGF0ZSgkZWxldmF0aW9uLW1hcCk7XG4gICAgQGlmICRmb2N1cyAhPSBudWxsIHtcbiAgICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5mb2N1cyB7XG4gICAgICAgIEBpbmNsdWRlIGVsZXZhdGlvbi10aGVtZS53aXRoLXJlc29sdmVyKFxuICAgICAgICAgICRlbGV2YXRpb24tcmVzb2x2ZXIsXG4gICAgICAgICAgJGVsZXZhdGlvbjogJGZvY3VzLFxuICAgICAgICAgICRzaGFkb3ctY29sb3I6ICRzaGFkb3ctY29sb3IsXG4gICAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAkaG92ZXI6IHN0YXRlLmdldC1ob3Zlci1zdGF0ZSgkZWxldmF0aW9uLW1hcCk7XG4gICAgQGlmICRob3ZlciAhPSBudWxsIHtcbiAgICAgICY6aG92ZXIge1xuICAgICAgICBAaW5jbHVkZSBlbGV2YXRpb24tdGhlbWUud2l0aC1yZXNvbHZlcihcbiAgICAgICAgICAkZWxldmF0aW9uLXJlc29sdmVyLFxuICAgICAgICAgICRlbGV2YXRpb246ICRob3ZlcixcbiAgICAgICAgICAkc2hhZG93LWNvbG9yOiAkc2hhZG93LWNvbG9yLFxuICAgICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJHByZXNzZWQ6IHN0YXRlLmdldC1wcmVzc2VkLXN0YXRlKCRlbGV2YXRpb24tbWFwKTtcbiAgICBAaWYgJHByZXNzZWQgIT0gbnVsbCB7XG4gICAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuYWN0aXZlIHtcbiAgICAgICAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLndpdGgtcmVzb2x2ZXIoXG4gICAgICAgICAgJGVsZXZhdGlvbi1yZXNvbHZlcixcbiAgICAgICAgICAkZWxldmF0aW9uOiAkcHJlc3NlZCxcbiAgICAgICAgICAkc2hhZG93LWNvbG9yOiAkc2hhZG93LWNvbG9yLFxuICAgICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgJGRpc2FibGVkOiBzdGF0ZS5nZXQtZGlzYWJsZWQtc3RhdGUoJGVsZXZhdGlvbi1tYXApO1xuICAgIEBpZiAkZGlzYWJsZWQgIT0gbnVsbCB7XG4gICAgICAmOmRpc2FibGVkIHtcbiAgICAgICAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLndpdGgtcmVzb2x2ZXIoXG4gICAgICAgICAgJGVsZXZhdGlvbi1yZXNvbHZlcixcbiAgICAgICAgICAkZWxldmF0aW9uOiAkZGlzYWJsZWQsXG4gICAgICAgICAgJHNoYWRvdy1jb2xvcjogJHNoYWRvdy1jb2xvcixcbiAgICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE2IEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVyblxuXG5AdXNlICdzYXNzOmNvbG9yJztcbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJ0BtYXRlcmlhbC9hbmltYXRpb24vZnVuY3Rpb25zJyBhcyBmdW5jdGlvbnMyO1xuQHVzZSAnQG1hdGVyaWFsL2FuaW1hdGlvbi92YXJpYWJsZXMnIGFzIHZhcmlhYmxlczI7XG5AdXNlICdAbWF0ZXJpYWwvYmFzZS9taXhpbnMnIGFzIGJhc2UtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9jc3MnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL2N1c3RvbS1wcm9wZXJ0aWVzJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUva2V5cyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvc2hhZG93LWRvbSc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUtY29sb3InO1xuXG4kY3VzdG9tLXByb3BlcnR5LXByZWZpeDogJ3JpcHBsZSc7XG5cbiRmYWRlLWluLWR1cmF0aW9uOiA3NW1zICFkZWZhdWx0O1xuJGZhZGUtb3V0LWR1cmF0aW9uOiAxNTBtcyAhZGVmYXVsdDtcbiR0cmFuc2xhdGUtZHVyYXRpb246IDIyNW1zICFkZWZhdWx0O1xuJHN0YXRlcy13YXNoLWR1cmF0aW9uOiAxNW1zICFkZWZhdWx0O1xuXG4vLyBOb3RlcyBvbiBzdGF0ZXM6XG4vLyAqIGZvY3VzIHRha2VzIHByZWNlZGVuY2Ugb3ZlciBob3ZlciAoaS5lLiBpZiBhbiBlbGVtZW50IGlzIGJvdGggZm9jdXNlZCBhbmQgaG92ZXJlZCwgb25seSBmb2N1cyB2YWx1ZSBhcHBsaWVzKVxuLy8gKiBwcmVzcyBzdGF0ZSBhcHBsaWVzIHRvIGEgc2VwYXJhdGUgcHNldWRvLWVsZW1lbnQsIHNvIGl0IGhhcyBhbiBhZGRpdGl2ZSBlZmZlY3Qgb24gdG9wIG9mIG90aGVyIHN0YXRlc1xuLy8gKiBzZWxlY3RlZC9hY3RpdmF0ZWQgYXJlIGFwcGxpZWQgYWRkaXRpdmVseSB0byBob3Zlci9mb2N1cyB2aWEgY2FsY3VsYXRpb25zIGF0IHByZXByb2Nlc3NpbmcgdGltZVxuXG4kZGFyay1pbmstb3BhY2l0aWVzOiAoXG4gIGhvdmVyOiAwLjA0LFxuICBmb2N1czogMC4xMixcbiAgcHJlc3M6IDAuMTIsXG4gIHNlbGVjdGVkOiAwLjA4LFxuICBhY3RpdmF0ZWQ6IDAuMTIsXG4pICFkZWZhdWx0O1xuXG4kbGlnaHQtaW5rLW9wYWNpdGllczogKFxuICBob3ZlcjogMC4wOCxcbiAgZm9jdXM6IDAuMjQsXG4gIHByZXNzOiAwLjI0LFxuICBzZWxlY3RlZDogMC4xNixcbiAgYWN0aXZhdGVkOiAwLjI0LFxuKSAhZGVmYXVsdDtcblxuLy8gTGVnYWN5XG5cbiRwcmVzc2VkLWRhcmstaW5rLW9wYWNpdHk6IDAuMTYgIWRlZmF1bHQ7XG4kcHJlc3NlZC1saWdodC1pbmstb3BhY2l0eTogMC4zMiAhZGVmYXVsdDtcblxuLy8gU3RhdGUgc2VsZWN0b3IgdmFyaWFibGVzIHVzZWQgZm9yIHN0YXRlIHNlbGVjdG9yIG1peGlucyBiZWxvdy5cbiRfaG92ZXItc2VsZWN0b3I6ICcmOmhvdmVyJztcbiRfZm9jdXMtc2VsZWN0b3I6ICcmLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZCwgJjpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmZvY3VzJztcbiRfYWN0aXZlLXNlbGVjdG9yOiAnJjpub3QoOmRpc2FibGVkKTphY3RpdmUnO1xuXG4kbGlnaHQtdGhlbWU6IChcbiAgZm9jdXMtc3RhdGUtbGF5ZXItY29sb3I6IHRoZW1lLWNvbG9yLiRvbi1zdXJmYWNlLFxuICBmb2N1cy1zdGF0ZS1sYXllci1vcGFjaXR5OiBtYXAuZ2V0KCRkYXJrLWluay1vcGFjaXRpZXMsIGZvY3VzKSxcbiAgaG92ZXItc3RhdGUtbGF5ZXItY29sb3I6IHRoZW1lLWNvbG9yLiRvbi1zdXJmYWNlLFxuICBob3Zlci1zdGF0ZS1sYXllci1vcGFjaXR5OiBtYXAuZ2V0KCRkYXJrLWluay1vcGFjaXRpZXMsIGhvdmVyKSxcbiAgcHJlc3NlZC1zdGF0ZS1sYXllci1jb2xvcjogdGhlbWUtY29sb3IuJG9uLXN1cmZhY2UsXG4gIHByZXNzZWQtc3RhdGUtbGF5ZXItb3BhY2l0eTogbWFwLmdldCgkZGFyay1pbmstb3BhY2l0aWVzLCBwcmVzcyksXG4pO1xuXG5AbWl4aW4gdGhlbWUoJHRoZW1lKSB7XG4gIEBpbmNsdWRlIGtleXMuZGVjbGFyZS1jdXN0b20tcHJvcGVydGllcyhcbiAgICAkdGhlbWUsXG4gICAgJHByZWZpeDogJGN1c3RvbS1wcm9wZXJ0eS1wcmVmaXhcbiAgKTtcblxuICBAaWYgc2hhZG93LWRvbS4kY3NzLXNlbGVjdG9yLWZhbGxiYWNrLWRlY2xhcmF0aW9ucyB7XG4gICAgLm1kYy1yaXBwbGUtc3VyZmFjZSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS1zdHlsZXMoJHRoZW1lKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHRoZW1lLXN0eWxlcygkdGhlbWUpIHtcbiAgJHRoZW1lOiBrZXlzLmNyZWF0ZS10aGVtZS1wcm9wZXJ0aWVzKFxuICAgICR0aGVtZSxcbiAgICAkcHJlZml4OiAkY3VzdG9tLXByb3BlcnR5LXByZWZpeFxuICApO1xuXG4gIC8vIFRPRE8oYi8xOTEyOTg3OTYpOiBTdXBwb3J0IHN0YXRlcyBsYXllciBjb2xvciBmb3IgZXZlcnkgaW50ZXJhY3RpdmUgc3RhdGVzLlxuICAvLyBVc2Ugb25seSBob3ZlciBzdGF0ZSBsYXllciBjb2xvciwgaWdub3JpbmcgZm9jdXMgYW5kIHByZXNzZWQgY29sb3IuXG4gIEBpbmNsdWRlIHN0YXRlcy1iYXNlLWNvbG9yKG1hcC5nZXQoJHRoZW1lLCBob3Zlci1zdGF0ZS1sYXllci1jb2xvcikpO1xuICBAaW5jbHVkZSBzdGF0ZXMtaG92ZXItb3BhY2l0eShtYXAuZ2V0KCR0aGVtZSwgaG92ZXItc3RhdGUtbGF5ZXItb3BhY2l0eSkpO1xuICBAaW5jbHVkZSBzdGF0ZXMtZm9jdXMtb3BhY2l0eShtYXAuZ2V0KCR0aGVtZSwgZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eSkpO1xuICBAaW5jbHVkZSBzdGF0ZXMtcHJlc3Mtb3BhY2l0eShtYXAuZ2V0KCR0aGVtZSwgcHJlc3NlZC1zdGF0ZS1sYXllci1vcGFjaXR5KSk7XG59XG5cbkBtaXhpbiBzdGF0ZXMtYmFzZS1jb2xvcihcbiAgJGNvbG9yLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpLFxuICAkcmlwcGxlLXRhcmdldDogJyYnXG4pIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgQGlmICRjb2xvciB7XG4gICAgQGlmIG5vdCBjdXN0b20tcHJvcGVydGllcy5pcy1jdXN0b20tcHJvcCgkY29sb3IpIHtcbiAgICAgICRjb2xvcjogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKFxuICAgICAgICByaXBwbGUtY29sb3IsXG4gICAgICAgIHRoZW1lLWNvbG9yLmdldC1jdXN0b20tcHJvcGVydHkoJGNvbG9yKVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlLFxuICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICAgIEBpZiBjb2xvci5hbHBoYSh0aGVtZS1jb2xvci5wcm9wLXZhbHVlKCRjb2xvcikpID4gMCB7XG4gICAgICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoYmFja2dyb3VuZC1jb2xvciwgJGNvbG9yKTtcbiAgICAgICAgfSBAZWxzZSB7XG4gICAgICAgICAgLy8gSWYgYSBjb2xvciB3aXRoIDAgYWxwaGEgaXMgc3BlY2lmaWVkLCBkb24ndCByZW5kZXIgdGhlIHJpcHBsZSBwc2V1ZG8tZWxlbWVudHMgYXQgYWxsLlxuICAgICAgICAgIC8vIFRoaXMgYXZvaWRzIHVubmVjZXNzYXJ5IHRyYW5zaXRpb25zIGFuZCBvdmVyZmxvdy5cbiAgICAgICAgICBjb250ZW50OiBub25lO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgcmlwcGxlIG9wYWNpdGllcyBpbiBgaG92ZXJgLCBgZm9jdXNgLCBvciBgcHJlc3NgIHN0YXRlc1xuLy8vIEBwYXJhbSB7bWFwfSAkb3BhY2l0eS1tYXAgLSBtYXAgc3BlY2lmeWluZyBjdXN0b20gb3BhY2l0eSBvZiB6ZXJvIG9yIG1vcmUgc3RhdGVzXG4vLy8gQHBhcmFtIHtib29sfSAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudCAtIHdoZXRoZXIgdGhlIGNvbXBvbmVudCBjb250YWlucyBhIGZvY3VzYWJsZSBlbGVtZW50IGluIHRoZSByb290XG4vLy8gQHBhcmFtIHtzdHJpbmd9ICRyaXBwbGUtdGFyZ2V0IC0gdGhlIG9wdGlvbmFsIHNlbGVjdG9yIGZvciB0aGUgcmlwcGxlIGVsZW1lbnRcbi8vL1xuQG1peGluIHN0YXRlcy1vcGFjaXRpZXMoXG4gICRvcGFjaXR5LW1hcDogKCksXG4gICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiBmYWxzZSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJyxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gIC8vIEVuc3VyZSBzdWZmaWNpZW50IHNwZWNpZmljaXR5IHRvIG92ZXJyaWRlIGJhc2Ugc3RhdGUgb3BhY2l0aWVzXG4gIEBpZiBtYXAuZ2V0KCRvcGFjaXR5LW1hcCwgaG92ZXIpIHtcbiAgICBAaW5jbHVkZSBzdGF0ZXMtaG92ZXItb3BhY2l0eShcbiAgICAgIG1hcC5nZXQoJG9wYWNpdHktbWFwLCBob3ZlciksXG4gICAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXQsXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cblxuICBAaWYgbWFwLmdldCgkb3BhY2l0eS1tYXAsIGZvY3VzKSB7XG4gICAgQGluY2x1ZGUgc3RhdGVzLWZvY3VzLW9wYWNpdHkoXG4gICAgICBtYXAuZ2V0KCRvcGFjaXR5LW1hcCwgZm9jdXMpLFxuICAgICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0LFxuICAgICAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9XG5cbiAgQGlmIG1hcC5nZXQoJG9wYWNpdHktbWFwLCBwcmVzcykge1xuICAgIEBpbmNsdWRlIHN0YXRlcy1wcmVzcy1vcGFjaXR5KFxuICAgICAgbWFwLmdldCgkb3BhY2l0eS1tYXAsIHByZXNzKSxcbiAgICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldCxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcbiAgfVxufVxuXG5AbWl4aW4gc3RhdGVzLWhvdmVyLW9wYWNpdHkoXG4gICRvcGFjaXR5LFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpLFxuICAkcmlwcGxlLXRhcmdldDogJyYnXG4pIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgQGlmICRvcGFjaXR5IGFuZCBub3QgY3VzdG9tLXByb3BlcnRpZXMuaXMtY3VzdG9tLXByb3AoJG9wYWNpdHkpIHtcbiAgICAkb3BhY2l0eTogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKHJpcHBsZS1ob3Zlci1vcGFjaXR5LCAkb3BhY2l0eSk7XG4gIH1cblxuICAvLyBCYWNrZ3JvdW5kIHdhc2ggc3R5bGVzLCBmb3IgYm90aCBDU1Mtb25seSBhbmQgdXBncmFkZWQgc3RhdGVmdWwgc3VyZmFjZXNcbiAgJjpob3ZlcixcbiAgJi5tZGMtcmlwcGxlLXN1cmZhY2UtLWhvdmVyIHtcbiAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlIHtcbiAgICAgIC8vIE9wYWNpdHkgZmFsbHMgdW5kZXIgY29sb3IgYmVjYXVzZSB0aGUgY2hvc2VuIG9wYWNpdHkgaXMgY29sb3ItZGVwZW5kZW50IGluIHR5cGljYWwgdXNhZ2VcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkob3BhY2l0eSwgJG9wYWNpdHkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gc3RhdGVzLWZvY3VzLW9wYWNpdHkoXG4gICRvcGFjaXR5LFxuICAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudDogZmFsc2UsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCksXG4gICRyaXBwbGUtdGFyZ2V0OiAnJidcbikge1xuICAvLyBGb2N1cyBvdmVycmlkZXMgaG92ZXIgYnkgcmV1c2luZyB0aGUgOjpiZWZvcmUgcHNldWRvLWVsZW1lbnQuXG4gIC8vIDpmb2N1cy13aXRoaW4gZ2VuZXJhbGx5IHdvcmtzIG9uIG5vbi1NUyBicm93c2VycyBhbmQgbWF0Y2hlcyB3aGVuIGEgKmNoaWxkKiBvZiB0aGUgZWxlbWVudCBoYXMgZm9jdXMuXG4gIC8vIEl0IGlzIHVzZWZ1bCBmb3IgY2FzZXMgd2hlcmUgYSBjb21wb25lbnQgaGFzIGEgZm9jdXNhYmxlIGVsZW1lbnQgd2l0aGluIHRoZSByb290IG5vZGUsIGUuZy4gdGV4dCBmaWVsZCxcbiAgLy8gYnV0IHVuZGVzaXJhYmxlIGluIGdlbmVyYWwgaW4gY2FzZSBvZiBuZXN0ZWQgc3RhdGVmdWwgY29tcG9uZW50cy5cbiAgLy8gV2UgdXNlIGEgbW9kaWZpZXIgY2xhc3MgZm9yIEpTLWVuYWJsZWQgc3VyZmFjZXMgdG8gc3VwcG9ydCBhbGwgdXNlIGNhc2VzIGluIGFsbCBicm93c2Vycy5cbiAgQGlmICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50IHtcbiAgICAvLyBKUy1lbmFibGVkIHNlbGVjdG9ycy5cbiAgICAmLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZCxcbiAgICAmLm1kYy1yaXBwbGUtdXBncmFkZWQ6Zm9jdXMtd2l0aGluLFxuICAgIC8vIENTUy1vbmx5IHNlbGVjdG9ycy5cbiAgICAmOm5vdCgubWRjLXJpcHBsZS11cGdyYWRlZCk6Zm9jdXMsXG4gICAgJjpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmZvY3VzLXdpdGhpbiB7XG4gICAgICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlIHtcbiAgICAgICAgQGluY2x1ZGUgc3RhdGVzLWZvY3VzLW9wYWNpdHktcHJvcGVydGllc18oXG4gICAgICAgICAgJG9wYWNpdHk6ICRvcGFjaXR5LFxuICAgICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICAvLyBKUy1lbmFibGVkIHNlbGVjdG9ycy5cbiAgICAmLm1kYy1yaXBwbGUtdXBncmFkZWQtLWJhY2tncm91bmQtZm9jdXNlZCxcbiAgICAvLyBDU1Mtb25seSBzZWxlY3RvcnMuXG4gICAgJjpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpOmZvY3VzIHtcbiAgICAgICN7JHJpcHBsZS10YXJnZXR9OjpiZWZvcmUge1xuICAgICAgICBAaW5jbHVkZSBzdGF0ZXMtZm9jdXMtb3BhY2l0eS1wcm9wZXJ0aWVzXyhcbiAgICAgICAgICAkb3BhY2l0eTogJG9wYWNpdHksXG4gICAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICAgKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHN0YXRlcy1mb2N1cy1vcGFjaXR5LXByb3BlcnRpZXNfKCRvcGFjaXR5LCAkcXVlcnkpIHtcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcbiAgLy8gT3BhY2l0eSBmYWxscyB1bmRlciBjb2xvciBiZWNhdXNlIHRoZSBjaG9zZW4gb3BhY2l0eSBpcyBjb2xvci1kZXBlbmRlbnQgaW4gdHlwaWNhbCB1c2FnZVxuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICBAaWYgJG9wYWNpdHkge1xuICAgIEBpZiBub3QgY3VzdG9tLXByb3BlcnRpZXMuaXMtY3VzdG9tLXByb3AoJG9wYWNpdHkpIHtcbiAgICAgICRvcGFjaXR5OiBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUocmlwcGxlLWZvY3VzLW9wYWNpdHksICRvcGFjaXR5KTtcbiAgICB9XG5cbiAgICAvLyBOb3RlIHRoYXQgdGhpcyBkdXJhdGlvbiBpcyBvbmx5IGVmZmVjdGl2ZSBvbiBmb2N1cywgbm90IGJsdXJcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogNzVtcztcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShvcGFjaXR5LCAkb3BhY2l0eSk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBzdGF0ZXMtcHJlc3Mtb3BhY2l0eShcbiAgJG9wYWNpdHksXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCksXG4gICRyaXBwbGUtdGFyZ2V0OiAnJidcbikge1xuICAkZmVhdC1hbmltYXRpb246IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICAvLyBTdHlsZXMgZm9yIG5vbi11cGdyYWRlZCAoQ1NTLW9ubHkpIHN0YXRlZnVsIHN1cmZhY2VzXG5cbiAgQGlmICRvcGFjaXR5IHtcbiAgICBAaWYgbm90IGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCRvcGFjaXR5KSB7XG4gICAgICAkb3BhY2l0eTogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKHJpcHBsZS1wcmVzcy1vcGFjaXR5LCAkb3BhY2l0eSk7XG4gICAgfVxuXG4gICAgJjpub3QoLm1kYy1yaXBwbGUtdXBncmFkZWQpIHtcbiAgICAgIC8vIEFwcGx5IHByZXNzIGFkZGl0aXZlbHkgYnkgdXNpbmcgdGhlIDo6YWZ0ZXIgcHNldWRvLWVsZW1lbnRcbiAgICAgICN7JHJpcHBsZS10YXJnZXR9OjphZnRlciB7XG4gICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgICAgICAgdHJhbnNpdGlvbjogb3BhY2l0eSAkZmFkZS1vdXQtZHVyYXRpb24gbGluZWFyO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgICY6YWN0aXZlIHtcbiAgICAgICAgI3skcmlwcGxlLXRhcmdldH06OmFmdGVyIHtcbiAgICAgICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgICAgICAgICAgdHJhbnNpdGlvbi1kdXJhdGlvbjogJGZhZGUtaW4tZHVyYXRpb247XG4gICAgICAgICAgfVxuXG4gICAgICAgICAgLy8gT3BhY2l0eSBmYWxscyB1bmRlciBjb2xvciBiZWNhdXNlIHRoZSBjaG9zZW4gb3BhY2l0eSBpcyBjb2xvci1kZXBlbmRlbnQgaW4gdHlwaWNhbCB1c2FnZVxuICAgICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgICAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KG9wYWNpdHksICRvcGFjaXR5KTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm1kYy1yaXBwbGUtdXBncmFkZWQge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgICAgICAvLyBVcGdyYWRlZCByaXBwbGUgc2hvdWxkIGFsd2F5cyBlbWl0IGN1c3RvbSBwcm9wZXJ0eSwgcmVnYXJkbGVzcyBvZlxuICAgICAgICAvLyBjb25maWd1cmF0aW9uLCBzaW5jZSByaXBwbGUgaXRzZWxmIGZlYXR1cmUgZGV0ZWN0cyBjdXN0b20gcHJvcGVydHlcbiAgICAgICAgLy8gc3VwcG9ydCBhdCBydW50aW1lLlxuICAgICAgICBAaW5jbHVkZSBjdXN0b20tcHJvcGVydGllcy5jb25maWd1cmUoJGVtaXQtY3VzdG9tLXByb3BlcnRpZXM6IHRydWUpIHtcbiAgICAgICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShcbiAgICAgICAgICAgIGN1c3RvbS1wcm9wZXJ0aWVzLmNyZWF0ZShyaXBwbGUtZmctb3BhY2l0eSwgJG9wYWNpdHkpXG4gICAgICAgICAgKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBTaW1wbGUgbWl4aW4gZm9yIGJhc2Ugc3RhdGVzIHdoaWNoIGF1dG9tYXRpY2FsbHkgc2VsZWN0cyBvcGFjaXR5IHZhbHVlcyBiYXNlZCBvbiB3aGV0aGVyIHRoZSBpbmsgY29sb3IgaXNcbi8vIGxpZ2h0IG9yIGRhcmsuXG5AbWl4aW4gc3RhdGVzKFxuICAkY29sb3I6IHRoZW1lLWNvbG9yLnByb3AtdmFsdWUob24tc3VyZmFjZSksXG4gICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiBmYWxzZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJyxcbiAgJG9wYWNpdHktbWFwOiBudWxsXG4pIHtcbiAgQGluY2x1ZGUgc3RhdGVzLWludGVyYWN0aW9uc18oXG4gICAgJGNvbG9yOiAkY29sb3IsXG4gICAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxuICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldCxcbiAgICAkb3BhY2l0eS1tYXA6ICRvcGFjaXR5LW1hcFxuICApO1xufVxuXG4vLyBTaW1wbGUgbWl4aW4gZm9yIGFjdGl2YXRlZCBzdGF0ZXMgd2hpY2ggYXV0b21hdGljYWxseSBzZWxlY3RzIG9wYWNpdHkgdmFsdWVzIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGluayBjb2xvciBpc1xuLy8gbGlnaHQgb3IgZGFyay5cbkBtaXhpbiBzdGF0ZXMtYWN0aXZhdGVkKFxuICAkY29sb3IsXG4gICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiBmYWxzZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJ1xuKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuICAkYWN0aXZhdGVkLW9wYWNpdHk6IHN0YXRlcy1vcGFjaXR5KCRjb2xvciwgYWN0aXZhdGVkKTtcblxuICAmLS1hY3RpdmF0ZWQge1xuICAgIC8vIFN0eWxlbGludCBzZWVtcyB0byB0aGluayB0aGF0ICcmJyBxdWFsaWZpZXMgYXMgYSB0eXBlIHNlbGVjdG9yIGhlcmU/XG4gICAgLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlbGVjdG9yLW1heC10eXBlXG4gICAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSB7XG4gICAgICAvLyBPcGFjaXR5IGZhbGxzIHVuZGVyIGNvbG9yIGJlY2F1c2UgdGhlIGNob3NlbiBvcGFjaXR5IGlzIGNvbG9yLWRlcGVuZGVudC5cbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoXG4gICAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgICBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoXG4gICAgICAgICAgICAtLW1kYy1yaXBwbGUtYWN0aXZhdGVkLW9wYWNpdHksXG4gICAgICAgICAgICAkYWN0aXZhdGVkLW9wYWNpdHlcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgc3RhdGVzLWludGVyYWN0aW9uc18oXG4gICAgICAkY29sb3I6ICRjb2xvcixcbiAgICAgICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50OiAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudCxcbiAgICAgICRvcGFjaXR5LW1vZGlmaWVyOiAkYWN0aXZhdGVkLW9wYWNpdHksXG4gICAgICAkcXVlcnk6ICRxdWVyeSxcbiAgICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldFxuICAgICk7XG4gIH1cbn1cblxuLy8gU2ltcGxlIG1peGluIGZvciBzZWxlY3RlZCBzdGF0ZXMgd2hpY2ggYXV0b21hdGljYWxseSBzZWxlY3RzIG9wYWNpdHkgdmFsdWVzIGJhc2VkIG9uIHdoZXRoZXIgdGhlIGluayBjb2xvciBpc1xuLy8gbGlnaHQgb3IgZGFyay5cbkBtaXhpbiBzdGF0ZXMtc2VsZWN0ZWQoXG4gICRjb2xvcixcbiAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6IGZhbHNlLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpLFxuICAkcmlwcGxlLXRhcmdldDogJyYnXG4pIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG4gICRzZWxlY3RlZC1vcGFjaXR5OiBzdGF0ZXMtb3BhY2l0eSgkY29sb3IsIHNlbGVjdGVkKTtcblxuICAmLS1zZWxlY3RlZCB7XG4gICAgLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlbGVjdG9yLW1heC10eXBlXG4gICAgI3skcmlwcGxlLXRhcmdldH06OmJlZm9yZSB7XG4gICAgICAvLyBPcGFjaXR5IGZhbGxzIHVuZGVyIGNvbG9yIGJlY2F1c2UgdGhlIGNob3NlbiBvcGFjaXR5IGlzIGNvbG9yLWRlcGVuZGVudC5cbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoXG4gICAgICAgICAgb3BhY2l0eSxcbiAgICAgICAgICBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoXG4gICAgICAgICAgICAtLW1kYy1yaXBwbGUtc2VsZWN0ZWQtb3BhY2l0eSxcbiAgICAgICAgICAgICRzZWxlY3RlZC1vcGFjaXR5XG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgfVxuICAgIH1cblxuICAgIEBpbmNsdWRlIHN0YXRlcy1pbnRlcmFjdGlvbnNfKFxuICAgICAgJGNvbG9yOiAkY29sb3IsXG4gICAgICAkaGFzLW5lc3RlZC1mb2N1c2FibGUtZWxlbWVudDogJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQsXG4gICAgICAkb3BhY2l0eS1tb2RpZmllcjogJHNlbGVjdGVkLW9wYWNpdHksXG4gICAgICAkcXVlcnk6ICRxdWVyeSxcbiAgICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldFxuICAgICk7XG4gIH1cbn1cblxuQG1peGluIHN0YXRlcy1pbnRlcmFjdGlvbnNfKFxuICAkY29sb3IsXG4gICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxuICAkb3BhY2l0eS1tb2RpZmllcjogMCxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSxcbiAgJHJpcHBsZS10YXJnZXQ6ICcmJyxcbiAgJG9wYWNpdHktbWFwOiBudWxsXG4pIHtcbiAgQGluY2x1ZGUgdGFyZ2V0LXNlbGVjdG9yKCRyaXBwbGUtdGFyZ2V0KSB7XG4gICAgQGluY2x1ZGUgc3RhdGVzLWJhc2UtY29sb3IoJGNvbG9yLCAkcXVlcnkpO1xuICB9XG5cbiAgQGlmICRvcGFjaXR5LW1hcCA9PSBudWxsIHtcbiAgICAkb3BhY2l0eS1tYXA6IChcbiAgICAgIGhvdmVyOiBzdGF0ZXMtb3BhY2l0eSgkY29sb3IsIGhvdmVyKSArICRvcGFjaXR5LW1vZGlmaWVyLFxuICAgICAgZm9jdXM6IHN0YXRlcy1vcGFjaXR5KCRjb2xvciwgZm9jdXMpICsgJG9wYWNpdHktbW9kaWZpZXIsXG4gICAgICBwcmVzczogc3RhdGVzLW9wYWNpdHkoJGNvbG9yLCBwcmVzcykgKyAkb3BhY2l0eS1tb2RpZmllcixcbiAgICApO1xuICB9XG5cbiAgQGluY2x1ZGUgc3RhdGVzLW9wYWNpdGllcyhcbiAgICAkb3BhY2l0eS1tYXAsXG4gICAgJGhhcy1uZXN0ZWQtZm9jdXNhYmxlLWVsZW1lbnQ6ICRoYXMtbmVzdGVkLWZvY3VzYWJsZS1lbGVtZW50LFxuICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldCxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xufVxuXG4vLyBXcmFwcyBjb250ZW50IGluIHRoZSBgcmlwcGxlLXRhcmdldGAgc2VsZWN0b3IgaWYgaXQgZXhpc3RzLlxuQG1peGluIHRhcmdldC1zZWxlY3RvcigkcmlwcGxlLXRhcmdldDogJyYnKSB7XG4gIEBpZiAkcmlwcGxlLXRhcmdldCA9PSAnJicge1xuICAgIEBjb250ZW50O1xuICB9IEBlbHNlIHtcbiAgICAjeyRyaXBwbGUtdGFyZ2V0fSB7XG4gICAgICBAY29udGVudDtcbiAgICB9XG4gIH1cbn1cblxuLy8vIFNlbGVjdG9yIGZvciBob3ZlciwgYWN0aXZlIGFuZCBmb2N1cyBzdGF0ZXMuXG5AbWl4aW4gc3RhdGVzLXNlbGVjdG9yKCkge1xuICAjeyRfaG92ZXItc2VsZWN0b3J9LFxuICAjeyRfZm9jdXMtc2VsZWN0b3J9LFxuICAjeyRfYWN0aXZlLXNlbGVjdG9yfSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuQG1peGluIGhvdmVyKCkge1xuICAjeyRfaG92ZXItc2VsZWN0b3J9IHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyBTZWxlY3RvciBmb3IgZm9jdXMgc3RhdGUuIFVzaW5nICc6bm90KC5tZGMtcmlwcGxlLXVwZ3JhZGVkKScgdG8gY29udGludWVcbi8vIGFwcGx5aW5nIGZvY3VzIHN0eWxlcyBvbiBKUy1kaXNhYmxlZCBjb21wb25lbnRzLCBhbmQgY29udHJvbCBmb2N1c1xuLy8gb24gSlMtZW5hYmxlZCBjb21wb25lbnRzIHdpdGggJy5tZGMtcmlwcGxlLXVwZ3JhZGVkLS1iYWNrZ3JvdW5kLWZvY3VzZWQnLlxuQG1peGluIGZvY3VzKCkge1xuICAjeyRfZm9jdXMtc2VsZWN0b3J9IHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLyBTZWxlY3RvciBmb3IgYWN0aXZlIHN0YXRlLiBVc2luZyBgOmFjdGl2ZTphY3RpdmVgIHRvIG92ZXJyaWRlIGZvY3VzIHN0eWxlcy5cbkBtaXhpbiBhY3RpdmUoKSB7XG4gICN7JF9hY3RpdmUtc2VsZWN0b3J9IHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLy8gS2VlcCB0aGUgcmlwcGxlIChTdGF0ZSBvdmVybGF5KSBiZWhpbmQgdGhlIGNvbnRlbnQuXG5AbWl4aW4gYmVoaW5kLWNvbnRlbnQoXG4gICRyaXBwbGUtdGFyZ2V0LFxuICAkY29udGVudC1yb290LXNlbGVjdG9yOiAnJicsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAvLyBOZWVkZWQgZm9yIElFMTEuIFdpdGhvdXQgdGhpcywgSUUxMSByZW5kZXJzIHRoZSBzdGF0ZSBsYXllciBjb21wbGV0ZWx5XG4gIC8vIHVuZGVybmVhdGggdGhlIGNvbnRhaW5lciwgbWFraW5nIGl0IGludmlzaWJsZS5cbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAjeyRjb250ZW50LXJvb3Qtc2VsZWN0b3J9IHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgei1pbmRleDogMDtcbiAgICB9XG4gIH1cblxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YmVmb3JlLFxuICAjeyRyaXBwbGUtdGFyZ2V0fTo6YWZ0ZXIge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShcbiAgICAgICAgei1pbmRleCxcbiAgICAgICAgY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKC0tbWRjLXJpcHBsZS16LWluZGV4LCAtMSlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbkBmdW5jdGlvbiBzdGF0ZXMtb3BhY2l0eSgkY29sb3IsICRzdGF0ZSkge1xuICAkY29sb3ItdmFsdWU6IHRoZW1lLWNvbG9yLnByb3AtdmFsdWUoJGNvbG9yKTtcbiAgJG9wYWNpdHktbWFwOiBpZihcbiAgICB0aGVtZS1jb2xvci50b25lKCRjb2xvci12YWx1ZSkgPT0gJ2xpZ2h0JyxcbiAgICAkbGlnaHQtaW5rLW9wYWNpdGllcyxcbiAgICAkZGFyay1pbmstb3BhY2l0aWVzXG4gICk7XG5cbiAgQGlmIG5vdCBtYXAuaGFzLWtleSgkb3BhY2l0eS1tYXAsICRzdGF0ZSkge1xuICAgIEBlcnJvciBcIkludmFsaWQgc3RhdGU6ICcjeyRzdGF0ZX0nLiBDaG9vc2Ugb25lIG9mOiAje21hcC5rZXlzKCRvcGFjaXR5LW1hcCl9XCI7XG4gIH1cblxuICBAcmV0dXJuIG1hcC5nZXQoJG9wYWNpdHktbWFwLCAkc3RhdGUpO1xufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm4gLS1cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuXG5AdXNlICdzYXNzOm1hcCc7XG5AdXNlICdAbWF0ZXJpYWwvZmVhdHVyZS10YXJnZXRpbmcvZmVhdHVyZS10YXJnZXRpbmcnO1xuQHVzZSAnLi9idXR0b24tYmFzZSc7XG5AdXNlICcuL2J1dHRvbi1maWxsZWQtdGhlbWUnO1xuQHVzZSAnLi9idXR0b24tc2hhcmVkLXRoZW1lJztcblxuQG1peGluIHN0eWxlcyhcbiAgJHRoZW1lOiBidXR0b24tZmlsbGVkLXRoZW1lLiRsaWdodC10aGVtZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gIEBpbmNsdWRlIGJ1dHRvbi1iYXNlLnN0YXRpYy1zdHlsZXMoJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBzdGF0aWMtc3R5bGVzKCRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgdGhlbWUtc3R5bGVzKCR0aGVtZSwgJHF1ZXJ5OiAkcXVlcnkpO1xufVxuXG5AbWl4aW4gdGhlbWUtc3R5bGVzKFxuICAkdGhlbWU6IGJ1dHRvbi1maWxsZWQtdGhlbWUuJGxpZ2h0LXRoZW1lLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgLm1kYy1idXR0b24tLXVuZWxldmF0ZWQge1xuICAgIEBpbmNsdWRlIF90aGVtZS1zdHlsZXMoJHRoZW1lLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuQG1peGluIHN0YXRpYy1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAvLyBJbnRlbnRpb25hbGx5IGxlZnQgYmxhbmsgZm9yIGZ1dHVyZS1wcm9vZmluZy5cbn1cblxuQG1peGluIGZpbGxlZCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIF90aGVtZS1zdHlsZXMoYnV0dG9uLWZpbGxlZC10aGVtZS4kbGlnaHQtdGhlbWUsICRxdWVyeTogJHF1ZXJ5KTtcbn1cblxuQG1peGluIF90aGVtZS1zdHlsZXMoJHRoZW1lLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIC8vIFRPRE8oYi8xNzk0MDI2NzcpOiBtb3ZlIGludG8gdGhlbWUgY29uZmlnLlxuICBAaW5jbHVkZSBidXR0b24tc2hhcmVkLXRoZW1lLmhvcml6b250YWwtcGFkZGluZyhcbiAgICAkcGFkZGluZzogYnV0dG9uLXNoYXJlZC10aGVtZS4kY29udGFpbmVkLWhvcml6b250YWwtcGFkZGluZyxcbiAgICAkcGFkZGluZy1pY29uOiBidXR0b24tc2hhcmVkLXRoZW1lLiRjb250YWluZWQtaG9yaXpvbnRhbC1wYWRkaW5nLWljb24sXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcblxuICBAaW5jbHVkZSBidXR0b24tZmlsbGVkLXRoZW1lLnRoZW1lKCR0aGVtZSwgJHF1ZXJ5OiAkcXVlcnkpO1xufVxuXG4vLy8gQGRlcHJlY2F0ZWQgUHJpdmF0ZSBzdHlsZSBtaXhpbiBmb3IgcGFydG5lcnM7IG5vdCBhdmFpbGFibGUgZm9yIHB1YmxpYyB1c2UuXG5AbWl4aW4gZGVwcmVjYXRlZC1maWxsZWQoJHF1ZXJ5KSB7XG4gIEBpbmNsdWRlIGZpbGxlZCgkcXVlcnkpO1xufVxuXG5AbWl4aW4gZGVwcmVjYXRlZC10aGVtZS1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAubWRjLWJ1dHRvbi0tcmFpc2VkLFxuICAubWRjLWJ1dHRvbi0tdW5lbGV2YXRlZCB7XG4gICAgLy8gVE9ETyhiLzE3OTQwMjY3Nyk6IG1vdmUgaW50byB0aGVtZSBjb25maWcuXG4gICAgQGluY2x1ZGUgYnV0dG9uLXNoYXJlZC10aGVtZS5ob3Jpem9udGFsLXBhZGRpbmcoXG4gICAgICBidXR0b24tc2hhcmVkLXRoZW1lLiRjb250YWluZWQtaG9yaXpvbnRhbC1wYWRkaW5nLFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuXG4gICAgJHRoZW1lOiBtYXAubWVyZ2UoXG4gICAgICBidXR0b24tZmlsbGVkLXRoZW1lLiRsaWdodC10aGVtZSxcbiAgICAgIChcbiAgICAgICAgZm9jdXMtc3RhdGUtbGF5ZXItY29sb3I6IG51bGwsXG4gICAgICAgIGZvY3VzLXN0YXRlLWxheWVyLW9wYWNpdHk6IG51bGwsXG4gICAgICAgIGhvdmVyLXN0YXRlLWxheWVyLWNvbG9yOiBudWxsLFxuICAgICAgICBob3Zlci1zdGF0ZS1sYXllci1vcGFjaXR5OiBudWxsLFxuICAgICAgICBwcmVzc2VkLXN0YXRlLWxheWVyLWNvbG9yOiBudWxsLFxuICAgICAgICBwcmVzc2VkLXN0YXRlLWxheWVyLW9wYWNpdHk6IG51bGwsXG4gICAgICAgIGxhYmVsLXRleHQtZm9udDogbnVsbCxcbiAgICAgICAgbGFiZWwtdGV4dC1zaXplOiBudWxsLFxuICAgICAgICBsYWJlbC10ZXh0LXRyYWNraW5nOiBudWxsLFxuICAgICAgICBsYWJlbC10ZXh0LXRyYW5zZm9ybTogbnVsbCxcbiAgICAgICAgbGFiZWwtdGV4dC13ZWlnaHQ6IG51bGwsXG4gICAgICApXG4gICAgKTtcbiAgICBAaW5jbHVkZSBidXR0b24tZmlsbGVkLXRoZW1lLnRoZW1lKCR0aGVtZSwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMjEgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVybiAtLVxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG5cbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJ3Nhc3M6bWF0aCc7XG5AdXNlICdAbWF0ZXJpYWwvZmVhdHVyZS10YXJnZXRpbmcvZmVhdHVyZS10YXJnZXRpbmcnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3N0YXRlJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUtY29sb3InO1xuQHVzZSAnQG1hdGVyaWFsL3Rva2Vucy9yZXNvbHZlcnMnO1xuQHVzZSAnQG1hdGVyaWFsL3JpcHBsZS9yaXBwbGUtdGhlbWUnO1xuQHVzZSAnLi9idXR0b24tYmFzZSc7XG5AdXNlICcuL2J1dHRvbi1zaGFyZWQtdGhlbWUnO1xuQHVzZSAnLi9idXR0b24tcmlwcGxlJztcblxuJG91dGxpbmVkLWJvcmRlci13aWR0aDogMXB4ICFkZWZhdWx0O1xuJG91dGxpbmUtY29sb3I6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC4xMikgIWRlZmF1bHQ7XG5cbiRsaWdodC10aGVtZTogKFxuICBjb250YWluZXItZGlzYWJsZWQtY29sb3I6IHRyYW5zcGFyZW50LFxuICBjb250YWluZXItc2hhcGU6IGJ1dHRvbi1zaGFyZWQtdGhlbWUuJHNoYXBlLXJhZGl1cyxcbiAgZGVuc2l0eTogYnV0dG9uLXNoYXJlZC10aGVtZS4kZGVuc2l0eS1zY2FsZSxcbiAgZGlzYWJsZWQtbGFiZWwtdGV4dC1jb2xvcjogYnV0dG9uLXNoYXJlZC10aGVtZS4kZGlzYWJsZWQtaW5rLWNvbG9yLFxuICBkaXNhYmxlZC1vdXRsaW5lLWNvbG9yOiBidXR0b24tc2hhcmVkLXRoZW1lLiRkaXNhYmxlZC1jb250YWluZXItY29sb3IsXG4gIGZvY3VzLWxhYmVsLXRleHQtY29sb3I6IG51bGwsXG4gIGZvY3VzLXN0YXRlLWxheWVyLWNvbG9yOiBwcmltYXJ5LFxuICBmb2N1cy1zdGF0ZS1sYXllci1vcGFjaXR5OiAwLjEyLFxuICBmb2N1cy1vdXRsaW5lLWNvbG9yOiBudWxsLFxuICBob3Zlci1sYWJlbC10ZXh0LWNvbG9yOiBudWxsLFxuICBob3Zlci1zdGF0ZS1sYXllci1jb2xvcjogcHJpbWFyeSxcbiAgaG92ZXItc3RhdGUtbGF5ZXItb3BhY2l0eTogMC4wNCxcbiAgbGFiZWwtdGV4dC1jb2xvcjogcHJpbWFyeSxcbiAgbGFiZWwtdGV4dC1mb250OiBidXR0b24tZm9udC1mYW1pbHksXG4gIGxhYmVsLXRleHQtc2l6ZTogYnV0dG9uLWZvbnQtc2l6ZSxcbiAgbGFiZWwtdGV4dC10cmFja2luZzogYnV0dG9uLWxldHRlci1zcGFjaW5nLFxuICBsYWJlbC10ZXh0LXRyYW5zZm9ybTogYnV0dG9uLXRleHQtdHJhbnNmb3JtLFxuICBsYWJlbC10ZXh0LXdlaWdodDogYnV0dG9uLWZvbnQtd2VpZ2h0LFxuICBvdXRsaW5lLWNvbG9yOiAkb3V0bGluZS1jb2xvcixcbiAgb3V0bGluZS13aWR0aDogJG91dGxpbmVkLWJvcmRlci13aWR0aCxcbiAgcHJlc3NlZC1sYWJlbC10ZXh0LWNvbG9yOiBudWxsLFxuICBwcmVzc2VkLXN0YXRlLWxheWVyLWNvbG9yOiBwcmltYXJ5LFxuICBwcmVzc2VkLXN0YXRlLWxheWVyLW9wYWNpdHk6IDAuMTIsXG4gIHdpdGgtaWNvbi1pY29uLWNvbG9yOiBudWxsLFxuICB3aXRoLWljb24taWNvbi1zaXplOiAxOHB4LFxuICB3aXRoLWljb24taG92ZXItaWNvbi1jb2xvcjogbnVsbCxcbiAgd2l0aC1pY29uLWZvY3VzLWljb24tY29sb3I6IG51bGwsXG4gIHdpdGgtaWNvbi1wcmVzc2VkLWljb24tY29sb3I6IG51bGwsXG4gIHdpdGgtaWNvbi1kaXNhYmxlZC1pY29uLWNvbG9yOiBudWxsLFxuKTtcblxuLy8vIFNldHMgdGhlbWUgYmFzZWQgb24gcHJvdmlkZWQgdGhlbWUgY29uZmlndXJhdGlvbi5cbi8vLyBPbmx5IGVtaXRzIHRoZW1lIHJlbGF0ZWQgc3R5bGVzLlxuLy8vIEBwYXJhbSB7TWFwfSAkdGhlbWUgLSBUaGVtZSBjb25maWd1cmF0aW9uIHRvIHVzZS5cbkBtaXhpbiB0aGVtZShcbiAgJHRoZW1lLFxuICAkcmVzb2x2ZXI6IHJlc29sdmVycy4kbWF0ZXJpYWwsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICBAaW5jbHVkZSB0aGVtZS52YWxpZGF0ZS1rZXlzKCRsaWdodC10aGVtZSwgJHRoZW1lKTtcbiAgQGluY2x1ZGUgYnV0dG9uLXNoYXJlZC10aGVtZS50aGVtZSgkdGhlbWUsICRyZXNvbHZlciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBvdXRsaW5lLWNvbG9yKFxuICAgIChcbiAgICAgIGRlZmF1bHQ6IG1hcC5nZXQoJHRoZW1lLCBvdXRsaW5lLWNvbG9yKSxcbiAgICAgIGRpc2FibGVkOiBtYXAuZ2V0KCR0aGVtZSwgZGlzYWJsZWQtb3V0bGluZS1jb2xvciksXG4gICAgICBmb2N1czogbWFwLmdldCgkdGhlbWUsIGZvY3VzLW91dGxpbmUtY29sb3IpLFxuICAgICksXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbiAgQGluY2x1ZGUgb3V0bGluZS13aWR0aChtYXAuZ2V0KCR0aGVtZSwgb3V0bGluZS13aWR0aCksICRxdWVyeTogJHF1ZXJ5KTtcbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgb3V0bGluZSBjb2xvciB0byB0aGUgZ2l2ZW4gY29sb3IgZm9yIGFuIGVuYWJsZWQgYnV0dG9uLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvci1vci1tYXAgLSBUaGUgZGVzaXJlZCBvdXRsaW5lIGNvbG9yLCBzcGVjaWZpZWQgZWl0aGVyXG4vLy8gICAgIGFzIGEgZmxhdCB2YWx1ZSBvciBhIG1hcCBvZiBjb2xvcnMgd2l0aCBzdGF0ZXNcbi8vLyAgICAge2RlZmF1bHQsIGhvdmVyLCBmb2N1c2VkLCBwcmVzc2VkLCBkaXNhYmxlZH0gYXMga2V5cy5cbi8vL1xuQG1peGluIG91dGxpbmUtY29sb3IoJGNvbG9yLW9yLW1hcCwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAmOm5vdCg6ZGlzYWJsZWQpIHtcbiAgICBAaW5jbHVkZSBfb3V0bGluZS1jb2xvcihcbiAgICAgIHN0YXRlLmdldC1kZWZhdWx0LXN0YXRlKCRjb2xvci1vci1tYXApLFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuXG4gICAgJjpob3ZlciB7XG4gICAgICBAaW5jbHVkZSBfb3V0bGluZS1jb2xvcihcbiAgICAgICAgc3RhdGUuZ2V0LWhvdmVyLXN0YXRlKCRjb2xvci1vci1tYXApLFxuICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgKTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuZm9jdXMoKSB7XG4gICAgICBAaW5jbHVkZSBfb3V0bGluZS1jb2xvcihcbiAgICAgICAgc3RhdGUuZ2V0LWZvY3VzLXN0YXRlKCRjb2xvci1vci1tYXApLFxuICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgKTtcbiAgICB9XG5cbiAgICAvLyBJbmNyZWFzZSBhY3RpdmUgc3RhdGUgc3BlY2lmaWNpdHkgZHVlIHRvIHJpcHBsZS10aGVtZS5mb2N1cygpLlxuICAgICY6YWN0aXZlLFxuICAgICY6Zm9jdXM6YWN0aXZlIHtcbiAgICAgIEBpbmNsdWRlIF9vdXRsaW5lLWNvbG9yKFxuICAgICAgICBzdGF0ZS5nZXQtcHJlc3NlZC1zdGF0ZSgkY29sb3Itb3ItbWFwKSxcbiAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgJjpkaXNhYmxlZCB7XG4gICAgQGluY2x1ZGUgX291dGxpbmUtY29sb3IoXG4gICAgICBzdGF0ZS5nZXQtZGlzYWJsZWQtc3RhdGUoJGNvbG9yLW9yLW1hcCksXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgb3V0bGluZSBjb2xvciB0byB0aGUgZ2l2ZW4gY29sb3IgZm9yIGEgZGlzYWJsZWQgYnV0dG9uLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIG91dGxpbmUgY29sb3IuXG4vLy8gQGRlcHJlY2F0ZWQgLSBjYWxsIGBvdXRsaW5lLWNvbG9yYCBpbnN0ZWFkIHdpdGggYGRpc2FibGVkYCBhcyBhIG1hcCBrZXkuXG4vLy9cbkBtaXhpbiBkaXNhYmxlZC1vdXRsaW5lLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBvdXRsaW5lLWNvbG9yKFxuICAgIChcbiAgICAgIGRpc2FibGVkOiAkY29sb3IsXG4gICAgKSxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xufVxuXG5AbWl4aW4gb3V0bGluZS13aWR0aChcbiAgJG91dGxpbmUtd2lkdGgsXG4gICRwYWRkaW5nOiBidXR0b24tc2hhcmVkLXRoZW1lLiRjb250YWluZWQtaG9yaXpvbnRhbC1wYWRkaW5nLFxuICAvLyBGb3IgYSBidXR0b24gd2l0aCBhbiBpY29uLCB0aGUgcGFkZGluZyBvbiB0aGUgc2lkZSBvZiB0aGUgYnV0dG9uIHdpdGggdGhlXG4gIC8vIGljb24uXG4gICRwYWRkaW5nLWljb246IGJ1dHRvbi1zaGFyZWQtdGhlbWUuJGNvbnRhaW5lZC1ob3Jpem9udGFsLXBhZGRpbmctaWNvbixcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gIEBpZiAkb3V0bGluZS13aWR0aCAhPSBudWxsIHtcbiAgICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuICAgIC8vIE5vdGU6IEFkanVzdCBwYWRkaW5nIHRvIG1haW50YWluIGNvbnNpc3RlbnQgd2lkdGggd2l0aCBub24tb3V0bGluZWQgYnV0dG9uc1xuICAgICRwYWRkaW5nLXZhbHVlOiBtYXRoLm1heCgkcGFkZGluZyAtICRvdXRsaW5lLXdpZHRoLCAwKTtcbiAgICAkcGFkZGluZy1pY29uLXZhbHVlOiBtYXRoLm1heCgkcGFkZGluZy1pY29uIC0gJG91dGxpbmUtd2lkdGgsIDApO1xuXG4gICAgQGluY2x1ZGUgYnV0dG9uLXNoYXJlZC10aGVtZS5ob3Jpem9udGFsLXBhZGRpbmcoXG4gICAgICAkcGFkZGluZzogJHBhZGRpbmctdmFsdWUsXG4gICAgICAkcGFkZGluZy1pY29uOiAkcGFkZGluZy1pY29uLXZhbHVlLFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIGJvcmRlci13aWR0aDogJG91dGxpbmUtd2lkdGg7XG4gICAgfVxuXG4gICAgI3tidXR0b24tcmlwcGxlLiRyaXBwbGUtdGFyZ2V0fSB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICB0b3A6IC0kb3V0bGluZS13aWR0aDtcbiAgICAgICAgbGVmdDogLSRvdXRsaW5lLXdpZHRoO1xuICAgICAgICBib3JkZXI6ICRvdXRsaW5lLXdpZHRoIHNvbGlkIHRyYW5zcGFyZW50O1xuICAgICAgfVxuICAgIH1cblxuICAgIC5tZGMtYnV0dG9uX190b3VjaCB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBsZWZ0OiAtJG91dGxpbmUtd2lkdGg7XG4gICAgICAgIHdpZHRoOiBjYWxjKDEwMCUgKyAyICogI3skb3V0bGluZS13aWR0aH0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSBvdXRsaW5lIGNvbG9yIHRvIHRoZSBnaXZlbiBjb2xvci4gVGhpcyBtaXhpbiBzaG91bGQgYmVcbi8vLyB3cmFwcGVkIGluIGEgc2VsZWN0b3IgdGhhdCBxdWFsaWZpZXMgYnV0dG9uIHN0YXRlLlxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG5AbWl4aW4gX291dGxpbmUtY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIEBpZiAkY29sb3Ige1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGJvcmRlci1jb2xvciwgJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm5cblxuQHVzZSAnQG1hdGVyaWFsL3J0bC9taXhpbnMnIGFzIHJ0bC1taXhpbnM7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUtY29sb3InO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvYW5pbWF0aW9uL3ZhcmlhYmxlcycgYXMgYW5pbWF0aW9uLXZhcmlhYmxlcztcbkB1c2UgJ0BtYXRlcmlhbC90eXBvZ3JhcGh5L3R5cG9ncmFwaHknO1xuQHVzZSAnLi92YXJpYWJsZXMnO1xuXG5AbWl4aW4gY29yZS1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuICAkZmVhdC1hbmltYXRpb246IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xuXG4gIC8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZGVmaW5lIGZsb2F0aW5nLWxhYmVsXG4gIC5tZGMtZmxvYXRpbmctbGFiZWwge1xuICAgIEBpbmNsdWRlIHR5cG9ncmFwaHkudHlwb2dyYXBoeShcbiAgICAgIHN1YnRpdGxlMSxcbiAgICAgICRleGNsdWRlLXByb3BzOiAobGluZS1oZWlnaHQpLFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgIGxlZnQ6IDA7XG4gICAgICAvKiBAbm9mbGlwICovXG4gICAgICAtd2Via2l0LXRyYW5zZm9ybS1vcmlnaW46IGxlZnQgdG9wO1xuICAgICAgLyogQG5vZmxpcCAqL1xuICAgICAgdHJhbnNmb3JtLW9yaWdpbjogbGVmdCB0b3A7XG4gICAgICBsaW5lLWhlaWdodDogMS4xNXJlbTtcbiAgICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgICB0ZXh0LW92ZXJmbG93OiBlbGxpcHNpcztcbiAgICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgICBjdXJzb3I6IHRleHQ7XG4gICAgICBvdmVyZmxvdzogaGlkZGVuO1xuXG4gICAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgICAvLyBGb3JjZSB0aGUgbGFiZWwgaW50byBpdHMgb3duIGxheWVyIHRvIHByZXZlbnQgdmlzaWJsZSBsYXllciBwcm9tb3Rpb24gYWRqdXN0bWVudHNcbiAgICAgIC8vIHdoZW4gdGhlIHJpcHBsZSBpcyBhY3RpdmF0ZWQgYmVoaW5kIGl0LlxuICAgICAgd2lsbC1jaGFuZ2U6IHRyYW5zZm9ybTtcblxuICAgICAgQGluY2x1ZGUgcnRsLW1peGlucy5ydGwge1xuICAgICAgICAvKiBAbm9mbGlwICovXG4gICAgICAgIHJpZ2h0OiAwO1xuICAgICAgICAvKiBAbm9mbGlwICovXG4gICAgICAgIGxlZnQ6IGF1dG87XG4gICAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgICAgLXdlYmtpdC10cmFuc2Zvcm0tb3JpZ2luOiByaWdodCB0b3A7XG4gICAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgICAgdHJhbnNmb3JtLW9yaWdpbjogcmlnaHQgdG9wO1xuICAgICAgICAvKiBAbm9mbGlwICovXG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgICAgfVxuICAgIH1cblxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgICB0cmFuc2l0aW9uOiB0cmFuc2Zvcm0gdmFyaWFibGVzLiR0cmFuc2l0aW9uLWR1cmF0aW9uXG4gICAgICAgICAgYW5pbWF0aW9uLXZhcmlhYmxlcy4kc3RhbmRhcmQtY3VydmUtdGltaW5nLWZ1bmN0aW9uLFxuICAgICAgICBjb2xvciB2YXJpYWJsZXMuJHRyYW5zaXRpb24tZHVyYXRpb25cbiAgICAgICAgICBhbmltYXRpb24tdmFyaWFibGVzLiRzdGFuZGFyZC1jdXJ2ZS10aW1pbmctZnVuY3Rpb247XG4gICAgfVxuICB9XG5cbiAgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmUge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBjdXJzb3I6IGF1dG87XG4gICAgfVxuICB9XG5cbiAgLm1kYy1mbG9hdGluZy1sYWJlbC0tcmVxdWlyZWQge1xuICAgICY6OmFmdGVyIHtcbiAgICAgIEBpbmNsdWRlIF9yZXF1aXJlZC1jb250ZW50KCRxdWVyeSk7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgcnRsLW1peGlucy5ydGwge1xuICAgICAgJjo6YWZ0ZXIge1xuICAgICAgICBAaW5jbHVkZSBfcmVxdWlyZWQtY29udGVudC1ydGwoJHF1ZXJ5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICBAYXQtcm9vdCB7XG4gICAgQGluY2x1ZGUgZmxvYXQtcG9zaXRpb24odmFyaWFibGVzLiRwb3NpdGlvbi15LCAkcXVlcnk6ICRxdWVyeSk7XG4gICAgQGluY2x1ZGUgc2hha2UtYW5pbWF0aW9uKHN0YW5kYXJkLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cblxuICBAaW5jbHVkZSBzaGFrZS1rZXlmcmFtZXMoc3RhbmRhcmQsIHZhcmlhYmxlcy4kcG9zaXRpb24teSwgJHF1ZXJ5OiAkcXVlcnkpO1xufVxuXG5AbWl4aW4gaW5rLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoY29sb3IsICRjb2xvcik7XG4gIH1cbn1cblxuLy8gVXNlZCBmb3IgdGV4dGFyZWEgaW4gY2FzZSBvZiBzY3JvbGxpbmdcbkBtaXhpbiBmaWxsLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoYmFja2dyb3VuZC1jb2xvciwgJGNvbG9yKTtcbiAgfVxufVxuXG5AbWl4aW4gc2hha2Uta2V5ZnJhbWVzKFxuICAkbW9kaWZpZXIsXG4gICRwb3NpdGlvblksXG4gICRwb3NpdGlvblg6IDAlLFxuICAkc2NhbGU6IHZhcmlhYmxlcy4kZmxvYXQtc2NhbGUsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkZmVhdC1hbmltYXRpb246IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgQGtleWZyYW1lcyBtZGMtZmxvYXRpbmctbGFiZWwtc2hha2UtZmxvYXQtYWJvdmUtI3skbW9kaWZpZXJ9IHtcbiAgICAgIDAlIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKGNhbGMoMCAtICN7JHBvc2l0aW9uWH0pKVxuICAgICAgICAgIHRyYW5zbGF0ZVkoLSN7JHBvc2l0aW9uWX0pIHNjYWxlKCN7JHNjYWxlfSk7XG4gICAgICB9XG5cbiAgICAgIDMzJSB7XG4gICAgICAgIGFuaW1hdGlvbi10aW1pbmctZnVuY3Rpb246IGN1YmljLWJlemllcigwLjUsIDAsIDAuNzAxNzMyLCAwLjQ5NTgxOSk7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWChjYWxjKDQlIC0gI3skcG9zaXRpb25YfSkpXG4gICAgICAgICAgdHJhbnNsYXRlWSgtI3skcG9zaXRpb25ZfSkgc2NhbGUoI3skc2NhbGV9KTtcbiAgICAgIH1cblxuICAgICAgNjYlIHtcbiAgICAgICAgYW5pbWF0aW9uLXRpbWluZy1mdW5jdGlvbjogY3ViaWMtYmV6aWVyKFxuICAgICAgICAgIDAuMzAyNDM1LFxuICAgICAgICAgIDAuMzgxMzUyLFxuICAgICAgICAgIDAuNTUsXG4gICAgICAgICAgMC45NTYzNTJcbiAgICAgICAgKTtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKGNhbGMoLTQlIC0gI3skcG9zaXRpb25YfSkpXG4gICAgICAgICAgdHJhbnNsYXRlWSgtI3skcG9zaXRpb25ZfSkgc2NhbGUoI3skc2NhbGV9KTtcbiAgICAgIH1cblxuICAgICAgMTAwJSB7XG4gICAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWChjYWxjKDAgLSAjeyRwb3NpdGlvblh9KSlcbiAgICAgICAgICB0cmFuc2xhdGVZKC0jeyRwb3NpdGlvbll9KSBzY2FsZSgjeyRzY2FsZX0pO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gZmxvYXQtcG9zaXRpb24oXG4gICRwb3NpdGlvblksXG4gICRwb3NpdGlvblg6IDAlLFxuICAkc2NhbGU6IHZhcmlhYmxlcy4kZmxvYXQtc2NhbGUsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgQGlmICRwb3NpdGlvblggPiAwIG9yICRwb3NpdGlvblggPCAwIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xICogJHBvc2l0aW9uWSlcbiAgICAgICAgICB0cmFuc2xhdGVYKC0xICogJHBvc2l0aW9uWClcbiAgICAgICAgICBzY2FsZSgkc2NhbGUpO1xuXG4gICAgICAgIEBpbmNsdWRlIHJ0bC1taXhpbnMucnRsIHtcbiAgICAgICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoLTEgKiAkcG9zaXRpb25ZKSB0cmFuc2xhdGVYKCRwb3NpdGlvblgpXG4gICAgICAgICAgICBzY2FsZSgkc2NhbGUpO1xuICAgICAgICB9XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC0xICogJHBvc2l0aW9uWSkgc2NhbGUoJHNjYWxlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHNoYWtlLWFuaW1hdGlvbigkbW9kaWZpZXIsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcblxuICAubWRjLWZsb2F0aW5nLWxhYmVsLS1zaGFrZSB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcbiAgICAgIGFuaW1hdGlvbjogbWRjLWZsb2F0aW5nLWxhYmVsLXNoYWtlLWZsb2F0LWFib3ZlLSN7JG1vZGlmaWVyfSAyNTBtcyAxO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gbWF4LXdpZHRoKCRtYXgtd2lkdGgsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIG1heC13aWR0aDogJG1heC13aWR0aDtcbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSBDU1MgdHJhbnNpdGlvbiBmb3IgdGhlIGZsb2F0aW5nIGFuaW1hdGlvbi5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkZHVyYXRpb24tbXMgLSBEdXJhdGlvbiAoaW4gbXMpIG9mIHRoZSBhbmltYXRpb24uXG4vLy8gQHBhcmFtIHtTdHJpbmd9ICR0aW1pbmctZnVuY3Rpb24gLSBPcHRpb25hbGx5IG92ZXJyaWRlcyB0aGUgZGVmYXVsdCBhbmltYXRpb24gdGltaW5nIGZ1bmN0aW9uLlxuLy8vXG5AbWl4aW4gZmxvYXQtdHJhbnNpdGlvbihcbiAgJGR1cmF0aW9uLW1zLFxuICAkdGltaW5nLWZ1bmN0aW9uOiBhbmltYXRpb24tdmFyaWFibGVzLiRzdGFuZGFyZC1jdXJ2ZS10aW1pbmctZnVuY3Rpb24sXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkZmVhdC1hbmltYXRpb246IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgdHJhbnNpdGlvbjogY29sb3IgJGR1cmF0aW9uLW1zICR0aW1pbmctZnVuY3Rpb24sXG4gICAgICB0cmFuc2Zvcm0gJGR1cmF0aW9uLW1zICR0aW1pbmctZnVuY3Rpb247XG4gIH1cbn1cblxuQG1peGluIF9yZXF1aXJlZC1jb250ZW50KCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIC8qIEBub2ZsaXAgKi9cbiAgICBtYXJnaW4tbGVmdDogMXB4O1xuICAgIC8qIEBub2ZsaXAgKi9cbiAgICBtYXJnaW4tcmlnaHQ6IDBweDtcbiAgICBjb250ZW50OiAnKic7XG4gIH1cbn1cblxuLy8gTmVlZCB0byBzcGVjaWZ5IExUUi9SVEwgbWFudWFsbHkgc2luY2UgcnRsIG1peGlucyB3aWxsIGFkZCA6OmFmdGVyW2Rpcj1ydGxdXG4vLyBzZWxlY3RvciBhbmQgdGhhdCBicmVha3Mgc29tZSBicm93c2Vyc1xuQG1peGluIF9yZXF1aXJlZC1jb250ZW50LXJ0bCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAvKiBAbm9mbGlwICovXG4gICAgbWFyZ2luLWxlZnQ6IDA7XG4gICAgLyogQG5vZmxpcCAqL1xuICAgIG1hcmdpbi1yaWdodDogMXB4O1xuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuXG5cbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUnO1xuQHVzZSAnLi9mdW5jdGlvbnMnO1xuXG4vLyBQdWJsaWNcblxuQG1peGluIGNvcmUtc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcblxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGRlZmluZSBsaW5lLXJpcHBsZVxuICAubWRjLWxpbmUtcmlwcGxlIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgJjo6YmVmb3JlLFxuICAgICAgJjo6YWZ0ZXIge1xuICAgICAgICBwb3NpdGlvbjogYWJzb2x1dGU7XG4gICAgICAgIGJvdHRvbTogMDtcbiAgICAgICAgbGVmdDogMDtcbiAgICAgICAgd2lkdGg6IDEwMCU7XG4gICAgICAgIGJvcmRlci1ib3R0b20tc3R5bGU6IHNvbGlkO1xuICAgICAgICBjb250ZW50OiAnJztcbiAgICAgIH1cblxuICAgICAgJjo6YmVmb3JlIHtcbiAgICAgICAgYm9yZGVyLWJvdHRvbS13aWR0aDogMXB4O1xuICAgICAgICB6LWluZGV4OiAxO1xuICAgICAgfVxuXG4gICAgICAmOjphZnRlciB7XG4gICAgICAgIHRyYW5zZm9ybTogc2NhbGVYKDApO1xuICAgICAgICBib3JkZXItYm90dG9tLXdpZHRoOiAycHg7XG4gICAgICAgIG9wYWNpdHk6IDA7XG4gICAgICAgIHotaW5kZXg6IDI7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcbiAgICAgICY6OmFmdGVyIHtcbiAgICAgICAgdHJhbnNpdGlvbjogZnVuY3Rpb25zLnRyYW5zaXRpb24tdmFsdWUodHJhbnNmb3JtKSxcbiAgICAgICAgICBmdW5jdGlvbnMudHJhbnNpdGlvbi12YWx1ZShvcGFjaXR5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubWRjLWxpbmUtcmlwcGxlLS1hY3RpdmU6OmFmdGVyIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgdHJhbnNmb3JtOiBzY2FsZVgoMSk7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtbGluZS1yaXBwbGUtLWRlYWN0aXZhdGluZzo6YWZ0ZXIge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBvcGFjaXR5OiAwO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gYWN0aXZlLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgJjo6YWZ0ZXIge1xuICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoYm9yZGVyLWJvdHRvbS1jb2xvciwgJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGluYWN0aXZlLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgJjo6YmVmb3JlIHtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGJvcmRlci1ib3R0b20tY29sb3IsICRjb2xvcik7XG4gICAgfVxuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuXG5cbkB1c2UgJ3Nhc3M6bGlzdCc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3VzdG9tLXByb3BlcnRpZXMnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC9zaGFwZS9mdW5jdGlvbnMnIGFzIHNoYXBlLWZ1bmN0aW9ucztcbkB1c2UgJ0BtYXRlcmlhbC9zaGFwZS9taXhpbnMnIGFzIHNoYXBlLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9mbG9hdGluZy1sYWJlbC9taXhpbnMnIGFzIGZsb2F0aW5nLWxhYmVsLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvcnRsL21peGlucycgYXMgcnRsLW1peGlucztcbkB1c2UgJy4vdmFyaWFibGVzJztcblxuQG1peGluIGNvcmUtc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAubWRjLW5vdGNoZWQtb3V0bGluZSB7XG4gICAgQGluY2x1ZGUgYmFzZV8oJHF1ZXJ5KTtcblxuICAgICZfX2xlYWRpbmcsXG4gICAgJl9fbm90Y2gsXG4gICAgJl9fdHJhaWxpbmcge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgYm94LXNpemluZzogYm9yZGVyLWJveDtcbiAgICAgICAgaGVpZ2h0OiAxMDAlO1xuICAgICAgICBib3JkZXItdG9wOiB2YXJpYWJsZXMuJGJvcmRlci13aWR0aCBzb2xpZDtcbiAgICAgICAgYm9yZGVyLWJvdHRvbTogdmFyaWFibGVzLiRib3JkZXItd2lkdGggc29saWQ7XG4gICAgICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX2xlYWRpbmcge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgQGluY2x1ZGUgcnRsLW1peGlucy5yZWZsZXhpdmUtcHJvcGVydHkoXG4gICAgICAgICAgYm9yZGVyLFxuICAgICAgICAgIHZhcmlhYmxlcy4kYm9yZGVyLXdpZHRoIHNvbGlkLFxuICAgICAgICAgIG5vbmVcbiAgICAgICAgKTtcblxuICAgICAgICB3aWR0aDogdmFyaWFibGVzLiRsZWFkaW5nLXdpZHRoO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX3RyYWlsaW5nIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIEBpbmNsdWRlIHJ0bC1taXhpbnMucmVmbGV4aXZlLXByb3BlcnR5KFxuICAgICAgICAgIGJvcmRlcixcbiAgICAgICAgICBub25lLFxuICAgICAgICAgIHZhcmlhYmxlcy4kYm9yZGVyLXdpZHRoIHNvbGlkXG4gICAgICAgICk7XG5cbiAgICAgICAgZmxleC1ncm93OiAxO1xuICAgICAgfVxuICAgIH1cblxuICAgICZfX25vdGNoIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIGZsZXg6IDAgMCBhdXRvO1xuICAgICAgICB3aWR0aDogYXV0bztcbiAgICAgICAgbWF4LXdpZHRoOiBjYWxjKDEwMCUgLSAje3ZhcmlhYmxlcy4kbGVhZGluZy13aWR0aH0gKiAyKTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAubWRjLWZsb2F0aW5nLWxhYmVsIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgICAgICBtYXgtd2lkdGg6IDEwMCU7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmUge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgdGV4dC1vdmVyZmxvdzogY2xpcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLS11cGdyYWRlZCAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZSB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBtYXgtd2lkdGg6IGNhbGMoMTAwJSAvIDAuNzUpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tZGMtbm90Y2hlZC1vdXRsaW5lLS1ub3RjaGVkIHtcbiAgICAubWRjLW5vdGNoZWQtb3V0bGluZV9fbm90Y2gge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgQGluY2x1ZGUgcnRsLW1peGlucy5yZWZsZXhpdmUtYm94KHBhZGRpbmcsIHJpZ2h0LCA4cHgpO1xuXG4gICAgICAgIGJvcmRlci10b3A6IG5vbmU7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLm1kYy1ub3RjaGVkLW91dGxpbmUtLW5vLWxhYmVsIHtcbiAgICAubWRjLW5vdGNoZWQtb3V0bGluZV9fbm90Y2gge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZyxcbiAgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLFxuICAubWRjLW5vdGNoZWQtb3V0bGluZV9fdHJhaWxpbmcge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGJvcmRlci1jb2xvciwgJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHN0cm9rZS13aWR0aCgkd2lkdGgsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZyxcbiAgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoLFxuICAubWRjLW5vdGNoZWQtb3V0bGluZV9fdHJhaWxpbmcge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBib3JkZXItd2lkdGg6ICR3aWR0aDtcbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gQWRkcyB0b3Agb2Zmc2V0IHRvIGNvbXBlbnNhdGUgZm9yIGJvcmRlciB3aWR0aCBib3ggc2l6ZSB3aGVuIGl0IGlzIG5vdGNoZWQuXG4vLy8gVXNlIHRoaXMgd2hlbiBmbG9hdGluZyBsYWJlbCBpcyBhbGlnbmVkIHRvIGNlbnRlciB0byBwcmV2ZW50IGxhYmVsIGp1bXAgb24gZm9jdXMuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRzdHJva2Utd2lkdGggU3Ryb2tlIHdpZHRoIG9mIG5vdGNoZWQgb3V0bGluZSB0aGF0IG5lZWRzIHRvIGJlIG9mZnNldC5cbi8vL1xuQG1peGluIG5vdGNoLW9mZnNldCgkc3Ryb2tlLXdpZHRoLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLm1kYy1ub3RjaGVkLW91dGxpbmUtLW5vdGNoZWQgLm1kYy1ub3RjaGVkLW91dGxpbmVfX25vdGNoIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgcGFkZGluZy10b3A6ICRzdHJva2Utd2lkdGg7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBzaGFwZS1yYWRpdXMoXG4gICRyYWRpdXMsXG4gICRydGwtcmVmbGV4aXZlOiBmYWxzZSxcbiAgJGNvbXBvbmVudC1oZWlnaHQ6IG51bGwsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuICAvLyBSZXNvbHZlIHRoZSByYWRpdXMgcmVsYXRpdmUgdG8gdGhlIG5vdGNoZWQgb3V0bGluZSBjb21wb25lbnQncyBoZWlnaHQuIFRoZVxuICAvLyBjb21wb25lbnQgc2hvdWxkIHByb3ZpZGUgaXRzIGN1cnJlbnQgaGVpZ2h0IGZyb20gaXRzIGRlbnNpdHkuIFRoZSByZXNvbHZlZFxuICAvLyByYWRpdXMgYWxsb3dzIHBlcmNlbnRhZ2UgcmFkaWkgdG8gYmUgY29udmVydGVkIHRvIHBpeGVscy5cbiAgJHJlc29sdmVkLXJhZGl1czogc2hhcGUtZnVuY3Rpb25zLnJlc29sdmUtcmFkaXVzKFxuICAgICRyYWRpdXMsXG4gICAgJGNvbXBvbmVudC1oZWlnaHQ6ICRjb21wb25lbnQtaGVpZ2h0XG4gICk7XG5cbiAgLy8gR3JhYiB0aGUgdG9wLWxlZnQgcmFkaXVzLiBXZSdsbCBuZWVkIGl0IHRvIGFkanVzdCB0aGUgbGVhZGluZyBmb3IgdGhlXG4gIC8vIGxhYmVsIG5vdGNoIGlmIHRoZSByZXN1bHRpbmcgcmFkaXVzIHNoYXBlIGlzIGxhcmdlciB0aGFuIHRoZSBkZWZhdWx0XG4gIC8vIGxlYWRpbmcuXG4gICR0b3AtbGVmdC1yYWRpdXM6IGxpc3QubnRoKFxuICAgIHNoYXBlLWZ1bmN0aW9ucy51bnBhY2stcmFkaXVzKCRyZXNvbHZlZC1yYWRpdXMpLFxuICAgIDFcbiAgKTtcbiAgJHRvcC1sZWZ0LWlzLWN1c3RvbS1wcm9wOiBjdXN0b20tcHJvcGVydGllcy5pcy1jdXN0b20tcHJvcCgkdG9wLWxlZnQtcmFkaXVzKTtcbiAgJHRvcC1sZWZ0LXJhZGl1cy1weDogJHRvcC1sZWZ0LXJhZGl1cztcbiAgQGlmICgkdG9wLWxlZnQtaXMtY3VzdG9tLXByb3ApIHtcbiAgICAkdG9wLWxlZnQtcmFkaXVzLXB4OiBjdXN0b20tcHJvcGVydGllcy5nZXQtZmFsbGJhY2soJHRvcC1sZWZ0LXJhZGl1cyk7XG4gIH1cblxuICAubWRjLW5vdGNoZWQtb3V0bGluZV9fbGVhZGluZyB7XG4gICAgLy8gbWFzayB0aGUgbGVhZGluZyB0byBhcHBseSB0aGUgdG9wLWxlZnQgYW5kIGJvdHRvbS1sZWZ0IGNvcm5lcnNcbiAgICBAaW5jbHVkZSBzaGFwZS1taXhpbnMucmFkaXVzKFxuICAgICAgc2hhcGUtZnVuY3Rpb25zLm1hc2stcmFkaXVzKCRyYWRpdXMsIDEgMCAwIDEpLFxuICAgICAgJHJ0bC1yZWZsZXhpdmU6IHRydWUsXG4gICAgICAkY29tcG9uZW50LWhlaWdodDogJGNvbXBvbmVudC1oZWlnaHQsXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG5cbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgQGlmICgkdG9wLWxlZnQtcmFkaXVzLXB4ID4gdmFyaWFibGVzLiRsZWFkaW5nLXdpZHRoKSB7XG4gICAgICAgIC8vIElmIHRoZSByYWRpdXMgaXMgYmlnZ2VyIHRoYW4gdGhlIGRlZmF1bHQgbGVhZGluZyB3aWR0aCwgd2UgbmVlZCB0b1xuICAgICAgICAvLyBpbmNyZWFzZSB0aGUgbGVhZGluZyB3aWR0aFxuICAgICAgICB3aWR0aDogJHRvcC1sZWZ0LXJhZGl1cy1weDtcbiAgICAgICAgQGlmICgkdG9wLWxlZnQtaXMtY3VzdG9tLXByb3ApIHtcbiAgICAgICAgICAvLyBUaGUgcmFkaXVzIG1heSBiZSBhIGN1c3RvbSBwcm9wZXJ0eSwgaW4gd2hpY2ggY2FzZSB0aGUgYWJvdmUgd2lkdGhcbiAgICAgICAgICAvLyBpcyB0aGUgSUUxMSBmYWxsYmFjayB2YWx1ZS5cbiAgICAgICAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgICAgIH1cbiAgICAgIH1cblxuICAgICAgQGlmICgkdG9wLWxlZnQtaXMtY3VzdG9tLXByb3ApIHtcbiAgICAgICAgLy8gSWYgdGhlIHRvcC1sZWZ0IHJhZGl1cyBpcyBkeW5hbWljLCB0aGUgd2lkdGggb2YgdGhlIGxlYWRpbmcgaXNcbiAgICAgICAgLy8gdGhlIG1heCBvZiB3aGljaGV2ZXIgaXMgbGFyZ2VyOiB0aGUgZGVmYXVsdCBsZWFkaW5nIHdpZHRoIG9yIHRoZVxuICAgICAgICAvLyB2YWx1ZSBvZiB0aGUgY3VzdG9tIHByb3BlcnR5LlxuICAgICAgICAkdmFyOiBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUtdmFyKCR0b3AtbGVmdC1yYWRpdXMpO1xuICAgICAgICBAc3VwcG9ydHMgKHRvcDogbWF4KDAlKSkge1xuICAgICAgICAgIHdpZHRoOiBtYXgoI3t2YXJpYWJsZXMuJGxlYWRpbmctd2lkdGh9LCAjeyR2YXJ9KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC8vIFNpbWlsYXIgdG8gYWJvdmUsIGFkanVzdCB0aGUgbWF4LXdpZHRoIG9mIHRoZSBub3RjaCBpZiB3ZSBhZGp1c3RlZCB0aGVcbiAgLy8gbGVhZGluZydzIHdpZHRoLlxuICAubWRjLW5vdGNoZWQtb3V0bGluZV9fbm90Y2gge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBAaWYgKCR0b3AtbGVmdC1yYWRpdXMtcHggPiB2YXJpYWJsZXMuJGxlYWRpbmctd2lkdGgpIHtcbiAgICAgICAgbWF4LXdpZHRoOiBjYWxjKDEwMCUgLSAjeyR0b3AtbGVmdC1yYWRpdXMtcHh9ICogMik7XG4gICAgICAgIEBpZiAoJHRvcC1sZWZ0LWlzLWN1c3RvbS1wcm9wKSB7XG4gICAgICAgICAgLyogQGFsdGVybmF0ZSAqL1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIEBpZiAoJHRvcC1sZWZ0LWlzLWN1c3RvbS1wcm9wKSB7XG4gICAgICAgICR2YXI6IGN1c3RvbS1wcm9wZXJ0aWVzLmNyZWF0ZS12YXIoJHRvcC1sZWZ0LXJhZGl1cyk7XG4gICAgICAgIEBzdXBwb3J0cyAodG9wOiBtYXgoMCUpKSB7XG4gICAgICAgICAgbWF4LXdpZHRoOiBjYWxjKDEwMCUgLSBtYXgoI3t2YXJpYWJsZXMuJGxlYWRpbmctd2lkdGh9LCAjeyR2YXJ9KSAqIDIpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLm1kYy1ub3RjaGVkLW91dGxpbmVfX3RyYWlsaW5nIHtcbiAgICAvLyBtYXNrIHRoZSBsZWFkaW5nIHRvIGFwcGx5IHRoZSB0b3AtcmlnaHQgYW5kIGJvdHRvbS1yaWdodCBjb3JuZXJzXG4gICAgQGluY2x1ZGUgc2hhcGUtbWl4aW5zLnJhZGl1cyhcbiAgICAgIHNoYXBlLWZ1bmN0aW9ucy5tYXNrLXJhZGl1cygkcmFkaXVzLCAwIDEgMSAwKSxcbiAgICAgICRydGwtcmVmbGV4aXZlOiB0cnVlLFxuICAgICAgJGNvbXBvbmVudC1oZWlnaHQ6ICRjb21wb25lbnQtaGVpZ2h0LFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9XG59XG5cbkBtaXhpbiBmbG9hdGluZy1sYWJlbC1mbG9hdC1wb3NpdGlvbihcbiAgJHBvc2l0aW9uWSxcbiAgJHBvc2l0aW9uWDogMCUsXG4gICRzY2FsZTogMC43NSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWwtbWl4aW5zLmZsb2F0LXBvc2l0aW9uKFxuICAgICRwb3NpdGlvblkgKyB2YXJpYWJsZXMuJGxhYmVsLWFkanVzdCxcbiAgICAkcG9zaXRpb25YLFxuICAgIDEsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcblxuICAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZSB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIGZvbnQtc2l6ZTogKCRzY2FsZSAqIDFyZW0pO1xuICAgIH1cbiAgfVxuXG4gIC8vIFR3byBzZWxlY3RvcnMgdG8gZW5zdXJlIHdlIHNlbGVjdCB0aGUgYXBwcm9wcmlhdGUgY2xhc3Mgd2hlbiBhcHBsaWVkIGZyb20gdGhpcyBjb21wb25lbnQgb3IgYSBwYXJlbnQgY29tcG9uZW50LlxuICAmLm1kYy1ub3RjaGVkLW91dGxpbmUtLXVwZ3JhZGVkLFxuICAubWRjLW5vdGNoZWQtb3V0bGluZS0tdXBncmFkZWQge1xuICAgIEBpbmNsdWRlIGZsb2F0aW5nLWxhYmVsLW1peGlucy5mbG9hdC1wb3NpdGlvbihcbiAgICAgICRwb3NpdGlvblksXG4gICAgICAkcG9zaXRpb25YLFxuICAgICAgJHNjYWxlLFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuXG4gICAgLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLWRlc2NlbmRpbmctc3BlY2lmaWNpdHlcbiAgICAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZSB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBmb250LXNpemU6IDFyZW07XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgZmxvYXRpbmcgbGFiZWwgcG9zaXRpb24gaW4gbm90Y2hlZCBvdXRsaW5lIHdoZW4gbGFiZWwgaXMgYWZsb2F0LlxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRwb3NpdGlvblkgQWJzb2x1dGUgWS1heGlzIHBvc2l0aW9uIGluIGBweGAuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRwb3NpdGlvblggQWJzb2x1dGUgWC1heGlzIHBvc2l0aW9uIGluIGBweGAuIERlZmF1bHRzIHRvIGAwYC5cbi8vLyBAcGFyYW0ge051bWJlcn0gJHNjYWxlIERlZmF1bHRzIHRvIGAuNzVgLlxuLy8vXG4vLy8gQHRvZG8gUmVwbGFjZSBtaXhpbiBgbWRjLW5vdGNoZWQtb3V0bGluZS1mbG9hdGluZy1sYWJlbC1mbG9hdC1wb3NpdGlvbmAgd2l0aCB0aGlzIG1peGluIHdoZW4gZmxvYXRpbmcgbGFiZWwgaXNcbi8vLyAgICAgY2VudGVyIGFsaWduZWQgaW4gYWxsIHRoZSBwbGFjZXMuXG4vLy9cbkBtaXhpbiBmbG9hdGluZy1sYWJlbC1mbG9hdC1wb3NpdGlvbi1hYnNvbHV0ZShcbiAgJHBvc2l0aW9uWSxcbiAgJHBvc2l0aW9uWDogMCxcbiAgJHNjYWxlOiAwLjc1LFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmbG9hdGluZy1sYWJlbC1taXhpbnMuZmxvYXQtcG9zaXRpb24oXG4gICAgJHBvc2l0aW9uWSArIHZhcmlhYmxlcy4kbGFiZWwtYWRqdXN0LWFic29sdXRlLFxuICAgICRwb3NpdGlvblgsXG4gICAgMSxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xuXG4gIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgZm9udC1zaXplOiAoJHNjYWxlICogMXJlbSk7XG4gICAgfVxuICB9XG5cbiAgLy8gVHdvIHNlbGVjdG9ycyB0byBlbnN1cmUgd2Ugc2VsZWN0IHRoZSBhcHByb3ByaWF0ZSBjbGFzcyB3aGVuIGFwcGxpZWQgZnJvbSB0aGlzIGNvbXBvbmVudCBvciBhIHBhcmVudCBjb21wb25lbnQuXG4gICYubWRjLW5vdGNoZWQtb3V0bGluZS0tdXBncmFkZWQsXG4gIC5tZGMtbm90Y2hlZC1vdXRsaW5lLS11cGdyYWRlZCB7XG4gICAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWwtbWl4aW5zLmZsb2F0LXBvc2l0aW9uKFxuICAgICAgJHBvc2l0aW9uWSxcbiAgICAgICRwb3NpdGlvblgsXG4gICAgICAkc2NhbGUsXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG5cbiAgICAvLyBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tZGVzY2VuZGluZy1zcGVjaWZpY2l0eVxuICAgIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIGZvbnQtc2l6ZTogMXJlbTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgbWF4LXdpZHRoIGZvciB0aGUgbm90Y2hcbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkbWF4LXdpZHRoIE1heC13aWR0aCBmb3IgdGhlIG5vdGNoXG4vLy9cbkBtaXhpbiBub3RjaC1tYXgtd2lkdGgoJG1heC13aWR0aCwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIDpub3QoLm1kYy1ub3RjaGVkLW91dGxpbmUtLW5vdGNoZWQpIC5tZGMtbm90Y2hlZC1vdXRsaW5lX19ub3RjaCB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIG1heC13aWR0aDogJG1heC13aWR0aDtcbiAgICB9XG4gIH1cbn1cblxuLy9cbi8vIFByaXZhdGVcbi8vXG5AbWl4aW4gYmFzZV8oJHF1ZXJ5KSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBkaXNwbGF5OiBmbGV4O1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB0b3A6IDA7XG4gICAgcmlnaHQ6IDA7XG4gICAgbGVmdDogMDtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIG1heC13aWR0aDogMTAwJTtcbiAgICBoZWlnaHQ6IDEwMCU7XG4gICAgLyogQG5vZmxpcCAqL1xuICAgIHRleHQtYWxpZ246IGxlZnQ7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG5cbiAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJ0bCB7XG4gICAgICAvKiBAbm9mbGlwICovXG4gICAgICB0ZXh0LWFsaWduOiByaWdodDtcbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBLZWVwIHRoaXMgaW4gc3luYyB3aXRoIGNvbnN0YW50cy5udW1iZXJzLk1JTl9MRUFESU5HX1NUUk9LRV9FREdFX1BPU0lUSU9OXG4kbWluLWxlYWRpbmctc3Ryb2tlLWVkZ2UtcG9zaXRpb246IDEycHggIWRlZmF1bHQ7XG4vLyBUaGUgZ2FwIGJldHdlZW4gdGhlIHN0cm9rZSBlbmQgYW5kIGZsb2F0aW5nIGxhYmVsXG4vLyBLZWVwIHRoaXMgaW4gc3luYyB3aXRoIGNvbnN0YW50cy5udW1iZXJzLk5PVENIX0dVVFRFUl9TSVpFXG4kbm90Y2gtZ3V0dGVyLXNpemU6IDRweCAhZGVmYXVsdDtcbiRib3JkZXItd2lkdGg6IDFweCAhZGVmYXVsdDtcbiRsZWFkaW5nLXdpZHRoOiAxMnB4ICFkZWZhdWx0O1xuJHBhZGRpbmc6IDRweCAhZGVmYXVsdDtcbi8vIFRoaXMgdmFyaWFibGUga2VlcHMgdGhlIGJlZm9yZS9hZnRlciBKUyBsYWJlbCBjZW50ZXJlZCBpbiB0aGUgbm90Y2ggd2hlbiB0aGUgZm9udC1zaXplIGlzIGNoYW5nZWQuXG4kbGFiZWwtYWRqdXN0OiAxNCUgIWRlZmF1bHQ7XG5cbi8vLyBMYWJlbCBib3ggaGVpZ2h0IHdoZW4gaXQgaXMgZmxvYXRpbmcgYWJvdmUgZm9yIG5vdGNoZWQgdXBncmFkZWQuIFRoaXMgdmFsdWUgaXMgdXNlZCB0byBwdXQgdGhlIGxhYmVsIHZlcnRpY2FsbHkgaW5cbi8vLyB0aGUgbWlkZGxlIHdoZW4gaXQgaXMgbm90Y2hlZC5cbiRsYWJlbC1ib3gtaGVpZ2h0OiAxMy41cHggIWRlZmF1bHQ7XG5cbi8vLyBMYWJlbCBhZGp1c3Qgb2Zmc2V0IGFwcGxpZWQgdG8gZmxvYXRpbmcgbGFiZWwgd2hlbiBpdCBpcyBub3RjaGVkLiBTaW5jZSBub3RjaCB3aXRob3V0IHVwZ3JhZGVkIGhhcyBkaWZmZXJlbnQgZm9udFxuLy8vIHNpemUgd2UgYWRkIGFkZGl0aW9uYWwgb2Zmc2V0IHZhbHVlLlxuJGxhYmVsLWFkanVzdC1hYnNvbHV0ZTogMi41cHggIWRlZmF1bHQ7XG4iLCIvLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm4gLS1cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuXG5AdXNlICdAbWF0ZXJpYWwvYW5pbWF0aW9uL2Z1bmN0aW9ucycgYXMgYW5pbWF0aW9uLWZ1bmN0aW9ucztcbkB1c2UgJ0BtYXRlcmlhbC9lbGV2YXRpb24vZWxldmF0aW9uLXRoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC9lbGV2YXRpb24vZWxldmF0aW9uJztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvZG9tL21peGlucycgYXMgZG9tLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9yaXBwbGUvcmlwcGxlJztcbkB1c2UgJ0BtYXRlcmlhbC9yaXBwbGUvcmlwcGxlLXRoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC9ydGwvbWl4aW5zJyBhcyBydGwtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL3NoYXBlL21peGlucycgYXMgc2hhcGUtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL3NoYXBlL2Z1bmN0aW9ucycgYXMgc2hhcGUtZnVuY3Rpb25zO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL2Nzcyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3VzdG9tLXByb3BlcnRpZXMnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3JlcGxhY2UnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3N0YXRlJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZS1jb2xvcic7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUnO1xuQHVzZSAnQG1hdGVyaWFsL3RvdWNoLXRhcmdldC9taXhpbnMnIGFzIHRvdWNoLXRhcmdldC1taXhpbnM7XG5AdXNlICdAbWF0ZXJpYWwvdHlwb2dyYXBoeS90eXBvZ3JhcGh5JztcbkB1c2UgJy4vZmFiLWN1c3RvbS1wcm9wZXJ0aWVzJztcbkB1c2UgJy4vZXh0ZW5kZWQtZmFiLXRoZW1lJztcbkB1c2UgJy4vZmFiLXRoZW1lJztcbkB1c2UgJ3Nhc3M6bWF0aCc7XG5AdXNlICdzYXNzOmxpc3QnO1xuXG5AbWl4aW4gY29yZS1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSB3aXRob3V0LXJpcHBsZSgkcXVlcnkpO1xuICBAaW5jbHVkZSByaXBwbGUoJHF1ZXJ5KTtcbn1cblxuQG1peGluIHN0YXRpYy1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGRlZmluZSBmYWJcblxuICBAaW5jbHVkZSB0b3VjaC10YXJnZXQtbWl4aW5zLndyYXBwZXIoJHF1ZXJ5KTsgLy8gQ09QWUJBUkFfQ09NTUVOVF9USElTX0xJTkVcbiAgLy8gcHJldHRpZXItaWdub3JlXG4gIEBpbmNsdWRlIGVsZXZhdGlvbi5vdmVybGF5LWNvbW1vbigkcXVlcnkpOyAvLyBDT1BZQkFSQV9DT01NRU5UX1RISVNfTElORVxuXG4gIC5tZGMtZmFiIHtcbiAgICBAaW5jbHVkZSBiYXNlXygkcXVlcnk6ICRxdWVyeSk7XG4gIH1cblxuICAubWRjLWZhYi0tbWluaSB7XG4gICAgQGluY2x1ZGUgbWluaV8oJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgLm1kYy1mYWItLWV4dGVuZGVkIHtcbiAgICBAaW5jbHVkZSBleHRlbmRlZF8oJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgLm1kYy1mYWItLXRvdWNoIHtcbiAgICBAaW5jbHVkZSB0b3VjaC10YXJnZXQtbWl4aW5zLm1hcmdpbihcbiAgICAgICRjb21wb25lbnQtaGVpZ2h0OiBmYWItdGhlbWUuJG1pbmktaGVpZ2h0LFxuICAgICAgJGNvbXBvbmVudC13aWR0aDogZmFiLXRoZW1lLiRtaW5pLWhlaWdodCxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcblxuICAgIC5tZGMtZmFiX190b3VjaCB7XG4gICAgICBAaW5jbHVkZSB0b3VjaC10YXJnZXQtbWl4aW5zLnRvdWNoLXRhcmdldChcbiAgICAgICAgJHNldC13aWR0aDogdHJ1ZSxcbiAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgLm1kYy1mYWI6OmJlZm9yZSB7XG4gICAgQGluY2x1ZGUgZG9tLW1peGlucy50cmFuc3BhcmVudC1ib3JkZXIoJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgLm1kYy1mYWJfX2xhYmVsIHtcbiAgICBAaW5jbHVkZSBsYWJlbF8oJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgLm1kYy1mYWJfX2ljb24ge1xuICAgIEBpbmNsdWRlIGljb25fKCRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxuXG4gIC8vIEluY3JlYXNlIHNwZWNpZmljaXR5IGZvciBGQUIgaWNvbiBzdHlsZXMgdGhhdCBuZWVkIHRvIG92ZXJyaWRlIHN0eWxlcyBkZWZpbmVkIGZvciAubWF0ZXJpYWwtaWNvbnNcbiAgLy8gKHdoaWNoIGlzIGxvYWRlZCBzZXBhcmF0ZWx5IHNvIHRoZSBvcmRlciBvZiBDU1MgZGVmaW5pdGlvbnMgaXMgbm90IGd1YXJhbnRlZWQpXG4gIC5tZGMtZmFiIC5tZGMtZmFiX19pY29uIHtcbiAgICBAaW5jbHVkZSBpY29uLW92ZXJyaWRlc18oJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgLm1kYy1mYWItLWV4aXRlZCB7XG4gICAgQGluY2x1ZGUgZXhpdGVkXygkcXVlcnk6ICRxdWVyeSk7XG4gIH1cblxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGVuZFxufVxuXG5AbWl4aW4gd2l0aG91dC1yaXBwbGUoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBzdGF0aWMtc3R5bGVzKCRxdWVyeTogJHF1ZXJ5KTtcblxuICAubWRjLWZhYiB7XG4gICAgQGluY2x1ZGUgZmFiLXRoZW1lLmNvbnRhaW5lci1jb2xvcihzZWNvbmRhcnksICRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSBmYWItdGhlbWUuaWNvbi1zaXplKDI0cHgsICRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSBmYWItdGhlbWUuaW5rLWNvbG9yKG9uLXNlY29uZGFyeSwgJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIEBpbmNsdWRlIGZhYi10aGVtZS5zaGFwZS1yYWRpdXMoZmFiLXRoZW1lLiRzaGFwZS1yYWRpdXMsICRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSBlbGV2YXRpb24tdGhlbWUuZWxldmF0aW9uKDYsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG5AbWl4aW4gcmlwcGxlKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSByaXBwbGUuY29tbW9uKCRxdWVyeSk7IC8vIENPUFlCQVJBX0NPTU1FTlRfVEhJU19MSU5FXG5cbiAgLm1kYy1mYWIge1xuICAgIEBpbmNsdWRlIHJpcHBsZS5zdXJmYWNlKFxuICAgICAgJHF1ZXJ5OiAkcXVlcnksXG4gICAgICAkcmlwcGxlLXRhcmdldDogZmFiLXRoZW1lLiRyaXBwbGUtdGFyZ2V0XG4gICAgKTtcbiAgICBAaW5jbHVkZSByaXBwbGUucmFkaXVzLWJvdW5kZWQoXG4gICAgICAkcXVlcnk6ICRxdWVyeSxcbiAgICAgICRyaXBwbGUtdGFyZ2V0OiBmYWItdGhlbWUuJHJpcHBsZS10YXJnZXRcbiAgICApO1xuICAgIC8vIFNldCBgJG9wYWNpdHktbWFwYCB0byBudWxsIHRvIGFwcGx5IGRlZmF1bHQgb3BhY2l0eS1tYXAuXG4gICAgQGluY2x1ZGUgZmFiLXRoZW1lLnJpcHBsZS1jb2xvcihcbiAgICAgIG9uLXNlY29uZGFyeSxcbiAgICAgICRvcGFjaXR5LW1hcDogbnVsbCxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcblxuICAgICN7ZmFiLXRoZW1lLiRyaXBwbGUtdGFyZ2V0fSB7XG4gICAgICBAaW5jbHVkZSByaXBwbGUudGFyZ2V0LWNvbW1vbigkcXVlcnk6ICRxdWVyeSk7XG5cbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgICB9XG4gICAgfVxuICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5iZWhpbmQtY29udGVudChcbiAgICAgIGZhYi10aGVtZS4kcmlwcGxlLXRhcmdldCxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcbiAgfVxufVxuXG4kaWNvbi1lbnRlci1kZWxheV86IDkwbXM7XG4kaWNvbi1lbnRlci1kdXJhdGlvbl86IDE4MG1zO1xuXG5AbWl4aW4gYmFzZV8oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBlbGV2YXRpb24tdGhlbWUub3ZlcmxheS1zdXJmYWNlLXBvc2l0aW9uKCRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLm92ZXJsYXktZGltZW5zaW9ucygxMDAlLCAkcXVlcnk6ICRxdWVyeSk7XG5cbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgd2lkdGg6IGZhYi10aGVtZS4kaGVpZ2h0O1xuICAgIGhlaWdodDogZmFiLXRoZW1lLiRoZWlnaHQ7XG4gICAgcGFkZGluZzogMDtcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgZmlsbDogY3VycmVudENvbG9yO1xuICAgIHRleHQtZGVjb3JhdGlvbjogbm9uZTtcbiAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgdXNlci1zZWxlY3Q6IG5vbmU7XG4gICAgLW1vei1hcHBlYXJhbmNlOiBub25lO1xuICAgIC13ZWJraXQtYXBwZWFyYW5jZTogbm9uZTtcbiAgICAvLyBFdmVuIHRob3VnaCBgdmlzaWJsZWAgaXMgdGhlIGRlZmF1bHQsIElFIDExIGNvbXB1dGVzIHRoZSBwcm9wZXJ0eSBhc1xuICAgIC8vIGBoaWRkZW5gIGluIHNvbWUgY2FzZXMsIHVubGVzcyBpdCdzIGV4cGxpY2l0bHkgZGVmaW5lZCBoZXJlLlxuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICB9XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcbiAgICB0cmFuc2l0aW9uOiBib3gtc2hhZG93IGVsZXZhdGlvbi10aGVtZS4kdHJhbnNpdGlvbi1kdXJhdGlvblxuICAgICAgICBlbGV2YXRpb24tdGhlbWUuJHRyYW5zaXRpb24tdGltaW5nLWZ1bmN0aW9uLFxuICAgICAgb3BhY2l0eSAxNW1zIGxpbmVhciAzMG1zLFxuICAgICAgYW5pbWF0aW9uLWZ1bmN0aW9ucy5lbnRlcihcbiAgICAgICAgdHJhbnNmb3JtLFxuICAgICAgICAkaWNvbi1lbnRlci1kdXJhdGlvbl8gKyAkaWNvbi1lbnRlci1kZWxheV9cbiAgICAgICk7XG4gIH1cblxuICAmOjotbW96LWZvY3VzLWlubmVyIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgcGFkZGluZzogMDtcbiAgICAgIGJvcmRlcjogMDtcbiAgICB9XG4gIH1cblxuICAmOmhvdmVyIHtcbiAgICBAaW5jbHVkZSBlbGV2YXRpb24tdGhlbWUuZWxldmF0aW9uKDgsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxuXG4gIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5mb2N1cygpIHtcbiAgICBAaW5jbHVkZSBlbGV2YXRpb24tdGhlbWUuZWxldmF0aW9uKDgsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxuXG4gIC8vIEluY3JlYXNlIGFjdGl2ZSBzdGF0ZSBzcGVjaWZpY2l0eSBkdWUgdG8gcmlwcGxlLXRoZW1lLmZvY3VzKCkuXG4gICY6YWN0aXZlLFxuICAmOmZvY3VzOmFjdGl2ZSB7XG4gICAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLmVsZXZhdGlvbigxMiwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgJjphY3RpdmUsXG4gICY6Zm9jdXMge1xuICAgIC8vIFRPRE8oYWNkdm9yYWspOiBTaG91bGQgdGhpcyBiZSBwYWlyZWQgd2l0aCBzdGF0ZXMgYW5kL29yIHJpcHBsZT8gV2UgZG9uJ3Qgd2FudCB0byBkaXNhYmxlIG91dGxpbmVcbiAgICAvLyAoYW4gYWNjZXNzaWJpbGl0eS91c2FiaWxpdHkgZmVhdHVyZSkgdW5sZXNzIHdlJ3JlIGNvbmZpZGVudCB0aGF0IHRoZXJlIGlzIGFsc28gYSB2aXN1YWwgaW5kaWNhdGlvbiB0aGF0IHRoZVxuICAgIC8vIGVsZW1lbnQgaGFzIGZvY3VzLiBJZiB0aGUgY2xpZW50IGhhcyBjdXN0b21pemVkIHRoZSBET00gaW4gc29tZSB1bmV4cGVjdGVkIHdheSwgYW5kIGlzIGNlcnRhaW4gdGhhdCBhbm90aGVyXG4gICAgLy8gZWxlbWVudCB3aWxsIHJlY2VpdmUgZm9jdXMgaW5zdGVhZCwgdGhleSBjYW4gYWx3YXlzIG92ZXJyaWRlIHRoaXMgcHJvcGVydHkgbWFudWFsbHkgaW4gdGhlaXIgQ1NTLlxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBvdXRsaW5lOiBub25lO1xuICAgIH1cbiAgfVxuXG4gICY6aG92ZXIge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBjdXJzb3I6IHBvaW50ZXI7XG4gICAgfVxuICB9XG5cbiAgLy8gVGhpcyBhbGxvd3MgZm9yIHVzaW5nIFNWR3Mgd2l0aGluIHRoZW0gdG8gYWxpZ24gcHJvcGVybHkgaW4gYWxsIGJyb3dzZXJzLlxuICAvLyBDYW4gcmVtb3ZlIG9uY2U6IGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTEyOTQ1MTUgaXMgcmVzb2x2ZWQuXG5cbiAgLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItbWF4LXR5cGVcbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBpZ25vcmVcbiAgPiBzdmcge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICB3aWR0aDogMTAwJTtcbiAgICB9XG4gIH1cbiAgLy8gc3R5bGVsaW50LWVuYWJsZSBzZWxlY3Rvci1tYXgtdHlwZVxufVxuXG5AbWl4aW4gbWluaV8oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgd2lkdGg6IGZhYi10aGVtZS4kbWluaS1oZWlnaHQ7XG4gICAgaGVpZ2h0OiBmYWItdGhlbWUuJG1pbmktaGVpZ2h0O1xuICB9XG59XG5cbkBtaXhpbiBleHRlbmRlZF8oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSB0eXBvZ3JhcGh5LnR5cG9ncmFwaHkoYnV0dG9uLCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIGV4dGVuZGVkLWZhYi10aGVtZS5leHRlbmRlZC1zaGFwZS1yYWRpdXMoXG4gICAgZmFiLXRoZW1lLiRzaGFwZS1yYWRpdXMsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbiAgJGV4dGVuZGVkLWljb24tcGFkZGluZzogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlKFxuICAgIGZhYi1jdXN0b20tcHJvcGVydGllcy4kZXh0ZW5kZWQtaWNvbi1wYWRkaW5nLFxuICAgIGV4dGVuZGVkLWZhYi10aGVtZS4kZXh0ZW5kZWQtaWNvbi1wYWRkaW5nXG4gICk7XG4gICRleHRlbmRlZC1sYWJlbC1wYWRkaW5nOiBjdXN0b20tcHJvcGVydGllcy5jcmVhdGUoXG4gICAgZmFiLWN1c3RvbS1wcm9wZXJ0aWVzLiRleHRlbmRlZC1sYWJlbC1wYWRkaW5nLFxuICAgIGV4dGVuZGVkLWZhYi10aGVtZS4kZXh0ZW5kZWQtbGFiZWwtcGFkZGluZ1xuICApO1xuICBAaW5jbHVkZSBleHRlbmRlZC1mYWItdGhlbWUuZXh0ZW5kZWQtcGFkZGluZyhcbiAgICBleHRlbmRlZC1mYWItdGhlbWUuJGV4dGVuZGVkLWljb24tcGFkZGluZyxcbiAgICBleHRlbmRlZC1mYWItdGhlbWUuJGV4dGVuZGVkLWxhYmVsLXBhZGRpbmcsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcblxuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgd2lkdGg6IGF1dG87XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogZXh0ZW5kZWQtZmFiLXRoZW1lLiRleHRlbmRlZC1oZWlnaHQ7XG4gICAgLy8gVGhpcyBhbGxvd3MgdGhlIHRleHQgd2l0aGluIHRoZSBleHRlbmRlZCBmYWIgdG8gYmUgY2VudGVyZWQgZm9yIHZhcnlpbmcgZm9udCBzaXplcy5cbiAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgbGluZS1oZWlnaHQ6IG5vcm1hbDtcbiAgfVxufVxuXG5AbWl4aW4gaWNvbl8oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1hbmltYXRpb246IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgdHJhbnNpdGlvbjogYW5pbWF0aW9uLWZ1bmN0aW9ucy5lbnRlcihcbiAgICAgIHRyYW5zZm9ybSxcbiAgICAgICRpY29uLWVudGVyLWR1cmF0aW9uXyxcbiAgICAgICRpY29uLWVudGVyLWRlbGF5X1xuICAgICk7XG4gIH1cblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGZpbGw6IGN1cnJlbnRDb2xvcjtcbiAgICB3aWxsLWNoYW5nZTogdHJhbnNmb3JtO1xuICB9XG59XG5cbkBtaXhpbiBsYWJlbF8oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAganVzdGlmeS1jb250ZW50OiBmbGV4LXN0YXJ0O1xuICAgIHRleHQtb3ZlcmZsb3c6IGVsbGlwc2lzO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gICAgb3ZlcmZsb3cteDogaGlkZGVuO1xuICAgIG92ZXJmbG93LXk6IHZpc2libGU7XG4gIH1cbn1cblxuQG1peGluIGljb24tb3ZlcnJpZGVzXygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtZmxleDtcbiAgICBhbGlnbi1pdGVtczogY2VudGVyO1xuICAgIGp1c3RpZnktY29udGVudDogY2VudGVyO1xuICB9XG59XG5cbkBtaXhpbiBleGl0ZWRfKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgb3BhY2l0eTogMDtcbiAgfVxuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgdHJhbnNpdGlvbjogb3BhY2l0eSAxNW1zIGxpbmVhciAxNTBtcyxcbiAgICAgIGFuaW1hdGlvbi1mdW5jdGlvbnMuZXhpdC1wZXJtYW5lbnQodHJhbnNmb3JtLCAxODBtcyk7XG4gIH1cblxuICAubWRjLWZhYl9faWNvbiB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIHRyYW5zZm9ybTogc2NhbGUoMCk7XG4gICAgfVxuXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcbiAgICAgIHRyYW5zaXRpb246IGFuaW1hdGlvbi1mdW5jdGlvbnMuZXhpdC1wZXJtYW5lbnQodHJhbnNmb3JtLCAxMzVtcyk7XG4gICAgfVxuICB9XG59XG4iLCIvLyBDb3B5cmlnaHQgMjAxNiBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm4gLS1cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuXG5AdXNlICdAbWF0ZXJpYWwvZWxldmF0aW9uL2VsZXZhdGlvbi10aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvYW5pbWF0aW9uL2Z1bmN0aW9ucycgYXMgYW5pbWF0aW9uLWZ1bmN0aW9ucztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvcmlwcGxlL3JpcHBsZS10aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvc2hhcGUvbWl4aW5zJyBhcyBzaGFwZS1taXhpbnM7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvY3NzJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9jdXN0b20tcHJvcGVydGllcyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUva2V5cyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvcmVwbGFjZSc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvc3RhdGUnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZS1jb2xvcic7XG5AdXNlICdAbWF0ZXJpYWwvdG9rZW5zL3Jlc29sdmVycyc7XG5AdXNlICcuL2ZhYi1jdXN0b20tcHJvcGVydGllcyc7XG5AdXNlICdzYXNzOm1hdGgnO1xuQHVzZSAnc2FzczpsaXN0JztcbkB1c2UgJ3Nhc3M6bWFwJztcbkB1c2UgJ3Nhc3M6bWV0YSc7XG5cbiRoZWlnaHQ6IDU2cHggIWRlZmF1bHQ7XG4kbWluaS1oZWlnaHQ6IDQwcHggIWRlZmF1bHQ7XG4kc2hhcGUtcmFkaXVzOiA1MCUgIWRlZmF1bHQ7XG4kcmlwcGxlLXRhcmdldDogJy5tZGMtZmFiX19yaXBwbGUnO1xuXG4kX2xpZ2h0LXRoZW1lOiAoXG4gIGNvbnRhaW5lci1jb2xvcjogc2Vjb25kYXJ5LFxuICBjb250YWluZXItZWxldmF0aW9uOiA2LFxuICBjb250YWluZXItaGVpZ2h0OiA1NnB4LFxuICBjb250YWluZXItc2hhZG93LWNvbG9yOiBibGFjayxcbiAgY29udGFpbmVyLXNoYXBlOiAkc2hhcGUtcmFkaXVzLFxuICBjb250YWluZXItd2lkdGg6IDU2cHgsXG4gIGZvY3VzLWNvbnRhaW5lci1lbGV2YXRpb246IG51bGwsXG4gIGZvY3VzLWljb24tY29sb3I6IG51bGwsXG4gIGZvY3VzLW91dGxpbmUtY29sb3I6IG51bGwsXG4gIGZvY3VzLW91dGxpbmUtd2lkdGg6IG51bGwsXG4gIGZvY3VzLXN0YXRlLWxheWVyLWNvbG9yOiB0aGVtZS1jb2xvci4kcHJpbWFyeSxcbiAgZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eTogbnVsbCxcbiAgaG92ZXItY29udGFpbmVyLWVsZXZhdGlvbjogbnVsbCxcbiAgaG92ZXItaWNvbi1jb2xvcjogbnVsbCxcbiAgaG92ZXItc3RhdGUtbGF5ZXItY29sb3I6IHRoZW1lLWNvbG9yLiRwcmltYXJ5LFxuICBob3Zlci1zdGF0ZS1sYXllci1vcGFjaXR5OiBudWxsLFxuICBpY29uLWNvbG9yOiBvbi1zZWNvbmRhcnksXG4gIGljb24tc2l6ZTogMjRweCxcbiAgbG93ZXJlZC1jb250YWluZXItZWxldmF0aW9uOiBudWxsLFxuICBsb3dlcmVkLWZvY3VzLWNvbnRhaW5lci1lbGV2YXRpb246IG51bGwsXG4gIGxvd2VyZWQtaG92ZXItY29udGFpbmVyLWVsZXZhdGlvbjogbnVsbCxcbiAgbG93ZXJlZC1wcmVzc2VkLWNvbnRhaW5lci1lbGV2YXRpb246IG51bGwsXG4gIHByZXNzZWQtY29udGFpbmVyLWVsZXZhdGlvbjogbnVsbCxcbiAgcHJlc3NlZC1pY29uLWNvbG9yOiBudWxsLFxuICBwcmVzc2VkLXJpcHBsZS1jb2xvcjogbnVsbCxcbiAgcHJlc3NlZC1yaXBwbGUtb3BhY2l0eTogbnVsbCxcbiAgcHJlc3NlZC1zdGF0ZS1sYXllci1jb2xvcjogdGhlbWUtY29sb3IuJHByaW1hcnksXG4gIHByZXNzZWQtc3RhdGUtbGF5ZXItb3BhY2l0eTogbnVsbCxcbik7XG5cbiRjdXN0b20tcHJvcGVydHktcHJlZml4OiAnZmFiJztcblxuLy8vXG4vLy8gQXBwbGllcyB0aGUgZ2l2ZW4gdGhlbWUgYXMgY3VzdG9tIHByb3BlcnRpZXMgd2l0aG91dCBhbnkgc2VsZWN0b3JzLlxuLy8vXG5AbWl4aW4gdGhlbWUtZGVjbGFyZS1jdXN0b20tcHJvcGVydGllcyhcbiAgJHRoZW1lLFxuICAkcmVzb2x2ZXJzOiByZXNvbHZlcnMuJG1hdGVyaWFsXG4pIHtcbiAgQGluY2x1ZGUgdGhlbWUudmFsaWRhdGUta2V5cygkX2xpZ2h0LXRoZW1lLCAkdGhlbWUpO1xuICAkcmVzb2x2ZWQtdGhlbWU6IF9yZXNvbHZlLXRoZW1lKCR0aGVtZSwgJHJlc29sdmVycyk7XG4gIEBpbmNsdWRlIGtleXMuZGVjbGFyZS1jdXN0b20tcHJvcGVydGllcyhcbiAgICAkcmVzb2x2ZWQtdGhlbWUsXG4gICAgJHByZWZpeDogJGN1c3RvbS1wcm9wZXJ0eS1wcmVmaXhcbiAgKTtcbn1cblxuQG1peGluIHRoZW1lLXN0eWxlcygkdGhlbWUsICRyZXNvbHZlcnM6IHJlc29sdmVycy4kbWF0ZXJpYWwpIHtcbiAgQGluY2x1ZGUgdGhlbWUudmFsaWRhdGUta2V5cygkX2xpZ2h0LXRoZW1lLCAkdGhlbWUpO1xuXG4gICR0aGVtZToga2V5cy5jcmVhdGUtdGhlbWUtcHJvcGVydGllcyhcbiAgICAkdGhlbWUsXG4gICAgJHByZWZpeDogJGN1c3RvbS1wcm9wZXJ0eS1wcmVmaXhcbiAgKTtcbiAgQGluY2x1ZGUgdGhlbWUoJHRoZW1lLCAkcmVzb2x2ZXJzOiAkcmVzb2x2ZXJzKTtcbn1cblxuQG1peGluIHRoZW1lKCR0aGVtZSwgJHJlc29sdmVyczogcmVzb2x2ZXJzLiRtYXRlcmlhbCkge1xuICBAaW5jbHVkZSBiYXNlLXRoZW1lKCR0aGVtZSwgJHJlc29sdmVyczogJHJlc29sdmVycyk7XG5cbiAgJHNoYXBlLXJhZGl1czogbWFwLmdldCgkdGhlbWUsIGNvbnRhaW5lci1zaGFwZSk7XG4gIEBpZiAkc2hhcGUtcmFkaXVzIHtcbiAgICBAaW5jbHVkZSBzaGFwZS1yYWRpdXMoJHNoYXBlLXJhZGl1cyk7XG4gIH1cbn1cblxuLy8vXG4vLy8gUmVzb2x2ZXMgdGhlIGdpdmVuIHRoZW1lIHdpdGggdGhlIGdpdmVuIHJlc29sdmVycy5cbi8vL1xuQGZ1bmN0aW9uIF9yZXNvbHZlLXRoZW1lKCR0aGVtZSwgJHJlc29sdmVycykge1xuICAkZWxldmF0aW9uLXJlc29sdmVyOiBtYXAuZ2V0KCRyZXNvbHZlcnMsIGVsZXZhdGlvbik7XG4gIEByZXR1cm4gX3Jlc29sdmUtdGhlbWUtZWxldmF0aW9uLWtleXMoXG4gICAgJHRoZW1lLFxuICAgICRlbGV2YXRpb24tcmVzb2x2ZXIsXG4gICAgKFxuICAgICAgY29udGFpbmVyLWVsZXZhdGlvbixcbiAgICAgIGhvdmVyLWNvbnRhaW5lci1lbGV2YXRpb24sXG4gICAgICBmb2N1cy1jb250YWluZXItZWxldmF0aW9uLFxuICAgICAgcHJlc3NlZC1jb250YWluZXItZWxldmF0aW9uLFxuICAgICAgZGlzYWJsZWQtY29udGFpbmVyLWVsZXZhdGlvbixcbiAgICAgIGxvd2VyZWQtY29udGFpbmVyLWVsZXZhdGlvbixcbiAgICAgIGxvd2VyZWQtZm9jdXMtY29udGFpbmVyLWVsZXZhdGlvbixcbiAgICAgIGxvd2VyZWQtaG92ZXItY29udGFpbmVyLWVsZXZhdGlvbixcbiAgICAgIGxvd2VyZWQtcHJlc3NlZC1jb250YWluZXItZWxldmF0aW9uXG4gICAgKVxuICApO1xufVxuXG4vLy9cbi8vLyBSZXR1cm5zIHRoZSB0aGVtZSB3aXRoIHRoZSBlbGV2YXRpb24ga2V5cyByZXNvbHZlZC5cbi8vL1xuQGZ1bmN0aW9uIF9yZXNvbHZlLXRoZW1lLWVsZXZhdGlvbi1rZXlzKCR0aGVtZSwgJHJlc29sdmVyLCAkZWxldmF0aW9uLWtleXMpIHtcbiAgQGlmICRyZXNvbHZlciA9PSBudWxsIHtcbiAgICBAcmV0dXJuICR0aGVtZTtcbiAgfVxuXG4gIC8vIFNoYWRvdyBjb2xvciBpcyB1bml2ZXJzYWwgZm9yIHRoZSBjb21wb25lbnQuXG4gICRzaGFkb3ctY29sb3I6IG1hcC5nZXQoJHRoZW1lLCBjb250YWluZXItc2hhZG93LWNvbG9yKTtcblxuICBAZWFjaCAka2V5IGluICRlbGV2YXRpb24ta2V5cyB7XG4gICAgJGVsZXZhdGlvbjogbWFwLmdldCgkdGhlbWUsICRrZXkpO1xuICAgIEBpZiAkZWxldmF0aW9uICE9IG51bGwge1xuICAgICAgJHJlc29sdmVkLXZhbHVlOiBtZXRhLmNhbGwoXG4gICAgICAgICRyZXNvbHZlcixcbiAgICAgICAgJGVsZXZhdGlvbjogJGVsZXZhdGlvbixcbiAgICAgICAgJHNoYWRvdy1jb2xvcjogJHNoYWRvdy1jb2xvclxuICAgICAgKTtcbiAgICAgIC8vIFVwZGF0ZSB0aGUga2V5IHdpdGggdGhlIHJlc29sdmVkIHZhbHVlLlxuICAgICAgJHRoZW1lOiBtYXAuc2V0KCR0aGVtZSwgJGtleSwgJHJlc29sdmVkLXZhbHVlKTtcbiAgICB9XG4gIH1cblxuICBAcmV0dXJuICR0aGVtZTtcbn1cblxuQG1peGluIGJhc2UtdGhlbWUoJHRoZW1lLCAkcmVzb2x2ZXJzOiByZXNvbHZlcnMuJG1hdGVyaWFsKSB7XG4gIEBpbmNsdWRlIGNvbnRhaW5lci1jb2xvcihtYXAuZ2V0KCR0aGVtZSwgY29udGFpbmVyLWNvbG9yKSk7XG4gIEBpbmNsdWRlIF9jb250YWluZXItZWxldmF0aW9uKFxuICAgIG1hcC5nZXQoJHJlc29sdmVycywgZWxldmF0aW9uKSxcbiAgICBtYXAuZ2V0KCR0aGVtZSwgY29udGFpbmVyLXNoYWRvdy1jb2xvciksXG4gICAgKFxuICAgICAgZGVmYXVsdDogbWFwLmdldCgkdGhlbWUsIGNvbnRhaW5lci1lbGV2YXRpb24pLFxuICAgICAgaG92ZXI6IG1hcC5nZXQoJHRoZW1lLCBob3Zlci1jb250YWluZXItZWxldmF0aW9uKSxcbiAgICAgIGZvY3VzOiBtYXAuZ2V0KCR0aGVtZSwgZm9jdXMtY29udGFpbmVyLWVsZXZhdGlvbiksXG4gICAgICBwcmVzc2VkOiBtYXAuZ2V0KCR0aGVtZSwgcHJlc3NlZC1jb250YWluZXItZWxldmF0aW9uKSxcbiAgICApXG4gICk7XG4gIEBpbmNsdWRlIF9jb250YWluZXItaGVpZ2h0KG1hcC5nZXQoJHRoZW1lLCBjb250YWluZXItaGVpZ2h0KSk7XG4gIEBpbmNsdWRlIF9jb250YWluZXItd2lkdGgobWFwLmdldCgkdGhlbWUsIGNvbnRhaW5lci13aWR0aCkpO1xuICBAaW5jbHVkZSBpY29uLXNpemUobWFwLmdldCgkdGhlbWUsIGljb24tc2l6ZSkpO1xuICBAaW5jbHVkZSBfaWNvbi1jb2xvcihcbiAgICAoXG4gICAgICBkZWZhdWx0OiBtYXAuZ2V0KCR0aGVtZSwgaWNvbi1jb2xvciksXG4gICAgICBob3ZlcjogbWFwLmdldCgkdGhlbWUsIGhvdmVyLWljb24tY29sb3IpLFxuICAgICAgZm9jdXM6IG1hcC5nZXQoJHRoZW1lLCBmb2N1cy1pY29uLWNvbG9yKSxcbiAgICAgIHByZXNzZWQ6IG1hcC5nZXQoJHRoZW1lLCBwcmVzc2VkLWljb24tY29sb3IpLFxuICAgIClcbiAgKTtcblxuICAkb3BhY2l0eS1tYXA6IChcbiAgICBob3ZlcjogbWFwLmdldCgkdGhlbWUsIGhvdmVyLXN0YXRlLWxheWVyLW9wYWNpdHkpLFxuICAgIGZvY3VzOiBtYXAuZ2V0KCR0aGVtZSwgZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eSksXG4gICAgcHJlc3M6IG1hcC5nZXQoJHRoZW1lLCBwcmVzc2VkLXN0YXRlLWxheWVyLW9wYWNpdHkpLFxuICApO1xuICAkaG92ZXItc3RhdGUtbGF5ZXItY29sb3I6IG1hcC5nZXQoJHRoZW1lLCBob3Zlci1zdGF0ZS1sYXllci1jb2xvcik7XG4gIEBpZiAkaG92ZXItc3RhdGUtbGF5ZXItY29sb3Ige1xuICAgIEBpbmNsdWRlIHJpcHBsZS1jb2xvcigkaG92ZXItc3RhdGUtbGF5ZXItY29sb3IsICRvcGFjaXR5LW1hcDogJG9wYWNpdHktbWFwKTtcbiAgfVxuXG4gICRmb2N1cy1vdXRsaW5lLWNvbG9yOiBtYXAuZ2V0KCR0aGVtZSwgZm9jdXMtb3V0bGluZS1jb2xvcik7XG4gIEBpZiAkZm9jdXMtb3V0bGluZS1jb2xvciB7XG4gICAgQGluY2x1ZGUgZm9jdXMtb3V0bGluZS1jb2xvcigkZm9jdXMtb3V0bGluZS1jb2xvcik7XG4gIH1cbiAgJGZvY3VzLW91dGxpbmUtd2lkdGg6IG1hcC5nZXQoJHRoZW1lLCBmb2N1cy1vdXRsaW5lLXdpZHRoKTtcbiAgQGlmICRmb2N1cy1vdXRsaW5lLXdpZHRoIHtcbiAgICBAaW5jbHVkZSBmb2N1cy1vdXRsaW5lLXdpZHRoKCRmb2N1cy1vdXRsaW5lLXdpZHRoKTtcbiAgfVxufVxuXG5AbWl4aW4gcmlwcGxlLWNvbG9yKCRjb2xvciwgJG9wYWNpdHktbWFwOiAoKSwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzKFxuICAgICRjb2xvcixcbiAgICAkb3BhY2l0eS1tYXA6ICRvcGFjaXR5LW1hcCxcbiAgICAkcXVlcnk6ICRxdWVyeSxcbiAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXRcbiAgKTtcbn1cblxuQG1peGluIGFjY2Vzc2libGUoJGNvbnRhaW5lci1jb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBjb250YWluZXItY29sb3IoJGNvbnRhaW5lci1jb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gICRmaWxsLXRvbmU6IHRoZW1lLWNvbG9yLnRvbmUoJGNvbnRhaW5lci1jb2xvcik7XG5cbiAgQGlmICgkZmlsbC10b25lID09ICdkYXJrJykge1xuICAgIEBpbmNsdWRlIGluay1jb2xvcih0ZXh0LXByaW1hcnktb24tZGFyaywgJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5zdGF0ZXMoXG4gICAgICB0ZXh0LXByaW1hcnktb24tZGFyayxcbiAgICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0XG4gICAgKTtcbiAgfSBAZWxzZSB7XG4gICAgQGluY2x1ZGUgaW5rLWNvbG9yKHRleHQtcHJpbWFyeS1vbi1saWdodCwgJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIEBpbmNsdWRlIHJpcHBsZS10aGVtZS5zdGF0ZXMoXG4gICAgICB0ZXh0LXByaW1hcnktb24tbGlnaHQsXG4gICAgICAkcXVlcnk6ICRxdWVyeSxcbiAgICAgICRyaXBwbGUtdGFyZ2V0OiAkcmlwcGxlLXRhcmdldFxuICAgICk7XG4gIH1cbn1cblxuQG1peGluIGNvbnRhaW5lci1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGJhY2tncm91bmQtY29sb3IsICRjb2xvcik7XG4gIH1cbn1cblxuQG1peGluIGljb24tc2l6ZSgkd2lkdGgsICRoZWlnaHQ6ICR3aWR0aCwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC5tZGMtZmFiX19pY29uIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoJ3dpZHRoJywgJHdpZHRoKTtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KCdoZWlnaHQnLCAkaGVpZ2h0KTtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KCdmb250LXNpemUnLCAkaGVpZ2h0KTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGluay1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgICYsXG4gICAgJjpub3QoOmRpc2FibGVkKSAubWRjLWZhYl9faWNvbixcbiAgICAmOm5vdCg6ZGlzYWJsZWQpIC5tZGMtZmFiX19sYWJlbCxcbiAgICAmOmRpc2FibGVkIC5tZGMtZmFiX19pY29uLFxuICAgICY6ZGlzYWJsZWQgLm1kYy1mYWJfX2xhYmVsIHtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGNvbG9yLCAkY29sb3IpO1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX2NvbnRhaW5lci1oZWlnaHQoJGhlaWdodCkge1xuICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eSgnaGVpZ2h0JywgJGhlaWdodCk7XG59XG5cbkBtaXhpbiBfY29udGFpbmVyLXdpZHRoKCR3aWR0aCkge1xuICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eSgnd2lkdGgnLCAkd2lkdGgpO1xufVxuXG5AbWl4aW4gX2ljb24tY29sb3IoJGNvbG9yLW9yLW1hcCkge1xuICAmOm5vdCg6ZGlzYWJsZWQpIHtcbiAgICBAaW5jbHVkZSBfc2V0LWljb24tY29sb3Ioc3RhdGUuZ2V0LWRlZmF1bHQtc3RhdGUoJGNvbG9yLW9yLW1hcCkpO1xuXG4gICAgJjpob3ZlciB7XG4gICAgICBAaW5jbHVkZSBfc2V0LWljb24tY29sb3Ioc3RhdGUuZ2V0LWhvdmVyLXN0YXRlKCRjb2xvci1vci1tYXApKTtcbiAgICB9XG5cbiAgICAmOmZvY3VzIHtcbiAgICAgIEBpbmNsdWRlIF9zZXQtaWNvbi1jb2xvcihzdGF0ZS5nZXQtZm9jdXMtc3RhdGUoJGNvbG9yLW9yLW1hcCkpO1xuICAgIH1cblxuICAgICY6YWN0aXZlIHtcbiAgICAgIEBpbmNsdWRlIF9zZXQtaWNvbi1jb2xvcihzdGF0ZS5nZXQtcHJlc3NlZC1zdGF0ZSgkY29sb3Itb3ItbWFwKSk7XG4gICAgfVxuICB9XG5cbiAgJjpkaXNhYmxlZCB7XG4gICAgQGluY2x1ZGUgX3NldC1pY29uLWNvbG9yKHN0YXRlLmdldC1kaXNhYmxlZC1zdGF0ZSgkY29sb3Itb3ItbWFwKSk7XG4gIH1cbn1cblxuQG1peGluIF9zZXQtaWNvbi1jb2xvcigkY29sb3IpIHtcbiAgLm1kYy1mYWJfX2ljb24ge1xuICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KGNvbG9yLCAkY29sb3IpO1xuICB9XG59XG5cbkBtaXhpbiBfY29udGFpbmVyLWVsZXZhdGlvbigkcmVzb2x2ZXIsICRzaGFkb3ctY29sb3IsICRtYXApIHtcbiAgJjpub3QoOmRpc2FibGVkKSB7XG4gICAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLndpdGgtcmVzb2x2ZXIoXG4gICAgICAkcmVzb2x2ZXIsXG4gICAgICAkZWxldmF0aW9uOiBzdGF0ZS5nZXQtZGVmYXVsdC1zdGF0ZSgkbWFwKSxcbiAgICAgICRzaGFkb3ctY29sb3I6ICRzaGFkb3ctY29sb3JcbiAgICApO1xuXG4gICAgJjpob3ZlciB7XG4gICAgICBAaW5jbHVkZSBlbGV2YXRpb24tdGhlbWUud2l0aC1yZXNvbHZlcihcbiAgICAgICAgJHJlc29sdmVyLFxuICAgICAgICAkZWxldmF0aW9uOiBzdGF0ZS5nZXQtaG92ZXItc3RhdGUoJG1hcCksXG4gICAgICAgICRzaGFkb3ctY29sb3I6ICRzaGFkb3ctY29sb3JcbiAgICAgICk7XG4gICAgfVxuXG4gICAgJjpmb2N1cyB7XG4gICAgICBAaW5jbHVkZSBlbGV2YXRpb24tdGhlbWUud2l0aC1yZXNvbHZlcihcbiAgICAgICAgJHJlc29sdmVyLFxuICAgICAgICAkZWxldmF0aW9uOiBzdGF0ZS5nZXQtZm9jdXMtc3RhdGUoJG1hcCksXG4gICAgICAgICRzaGFkb3ctY29sb3I6ICRzaGFkb3ctY29sb3JcbiAgICAgICk7XG4gICAgfVxuXG4gICAgJjphY3RpdmUge1xuICAgICAgQGluY2x1ZGUgZWxldmF0aW9uLXRoZW1lLndpdGgtcmVzb2x2ZXIoXG4gICAgICAgICRyZXNvbHZlcixcbiAgICAgICAgJGVsZXZhdGlvbjogc3RhdGUuZ2V0LXByZXNzZWQtc3RhdGUoJG1hcCksXG4gICAgICAgICRzaGFkb3ctY29sb3I6ICRzaGFkb3ctY29sb3JcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgJjpkaXNhYmxlZCB7XG4gICAgLy8gRkFCIGRvZXMgbm90IGhhdmUgZGlzYWJsZWQgc3RhdGUuIFVzZSBkZWZhdWx0IHN0YXRlJ3MgZWxldmF0aW9uLlxuICAgIEBpbmNsdWRlIGVsZXZhdGlvbi10aGVtZS53aXRoLXJlc29sdmVyKFxuICAgICAgJHJlc29sdmVyLFxuICAgICAgJGVsZXZhdGlvbjogc3RhdGUuZ2V0LWRlZmF1bHQtc3RhdGUoJG1hcCksXG4gICAgICAkc2hhZG93LWNvbG9yOiAkc2hhZG93LWNvbG9yXG4gICAgKTtcbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIG91dGxpbmUgd2lkdGggb25seSB3aGVuIGJ1dHRvbiBpcyBpbiBmb2N1cy4gQWxzbyBzZXRzIHBhZGRpbmcgdG9cbi8vLyBpbmNsdWRlIG91dGxpbmUgb24gZm9jdXMgKEhlbHBzIHByZXZlbnQgc2l6ZSBqdW1wIG9uIGZvY3VzKS5cbi8vLyBAcGFyYW0ge051bWJlcn0gJHdpZHRoIC0gT3V0bGluZSAoYm9yZGVyKSB3aWR0aC5cbi8vLyBAcGFyYW0ge051bWJlcnxMaXN0fSAkcGFkZGluZyBbMF0gLSBQYWRkaW5nIHdoZW4gYnV0dG9uIGlzIG5vdCBpbiBmb2N1cy5cbi8vLyAgICAgT2Zmc2V0cyBwYWRkaW5nIGJhc2VkIG9uIGdpdmVuIG91dGxpbmUgd2lkdGggb24gZm9jdXMuXG4vLy9cbkBtaXhpbiBmb2N1cy1vdXRsaW5lLXdpZHRoKFxuICAkd2lkdGgsXG4gICRwYWRkaW5nOiAwLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAkcGFkZGluZzogY3NzLnVucGFjay12YWx1ZSgkcGFkZGluZyk7XG4gICRwYWRkaW5nLWZhbGxiYWNrczogKDAgMCAwIDApO1xuICAkaXMtcGFkZGluZy1jdXN0b20tcHJvcDogKGZhbHNlIGZhbHNlIGZhbHNlIGZhbHNlKTtcbiAgJGlzLXdpZHRoLWN1c3RvbS1wcm9wOiBjdXN0b20tcHJvcGVydGllcy5pcy1jdXN0b20tcHJvcCgkd2lkdGgpO1xuICAkd2lkdGgtZmFsbGJhY2s6IGlmKFxuICAgIGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCR3aWR0aCksXG4gICAgY3VzdG9tLXByb3BlcnRpZXMuZ2V0LWZhbGxiYWNrKCR3aWR0aCksXG4gICAgJHdpZHRoXG4gICk7XG4gICR3aWR0aDogaWYoXG4gICAgY3VzdG9tLXByb3BlcnRpZXMuaXMtY3VzdG9tLXByb3AoJHdpZHRoKSxcbiAgICBjdXN0b20tcHJvcGVydGllcy5nZXQtZGVjbGFyYXRpb24tdmFsdWUoJHdpZHRoKSxcbiAgICAkd2lkdGhcbiAgKTtcblxuICAvLyBjb25mb3JtIHBhZGRpbmcgdmFsdWVzIGFuZCBleHRyYWN0IGN1c3RvbSBwcm9wZXJ0eSBtZXRhZGF0YSBmcm9tIHRoZW1cbiAgQGZvciAkaSBmcm9tIDEgdGhyb3VnaCBsaXN0Lmxlbmd0aCgkcGFkZGluZykge1xuICAgICR2YWx1ZTogbGlzdC5udGgoJHBhZGRpbmcsICRpKTtcbiAgICAkdmFsdWUtaXMtY3VzdG9tLXByb3A6IGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCR2YWx1ZSk7XG4gICAgLy8gY3NzIG1heCB3aWxsIGZhaWwgdG8gY29tcGFyZSBhIGJhcmUgMCB0byBhIHB4IHZhbHVlXG4gICAgJHZhbHVlOiBpZigkdmFsdWUgPT0gMCwgMHB4LCAkdmFsdWUpO1xuICAgICR2YWx1ZS1mYWxsYmFjazogaWYoXG4gICAgICAkdmFsdWUtaXMtY3VzdG9tLXByb3AsXG4gICAgICBjdXN0b20tcHJvcGVydGllcy5nZXQtZmFsbGJhY2soJHZhbHVlKSxcbiAgICAgICR2YWx1ZVxuICAgICk7XG4gICAgJHZhbHVlOiBpZihcbiAgICAgICR2YWx1ZS1pcy1jdXN0b20tcHJvcCxcbiAgICAgIGN1c3RvbS1wcm9wZXJ0aWVzLmdldC1kZWNsYXJhdGlvbi12YWx1ZSgkdmFsdWUpLFxuICAgICAgJHZhbHVlXG4gICAgKTtcblxuICAgICRwYWRkaW5nOiBsaXN0LnNldC1udGgoJHBhZGRpbmcsICRpLCAkdmFsdWUpO1xuICAgICRwYWRkaW5nLWZhbGxiYWNrczogbGlzdC5zZXQtbnRoKCRwYWRkaW5nLWZhbGxiYWNrcywgJGksICR2YWx1ZS1mYWxsYmFjayk7XG4gICAgJGlzLXBhZGRpbmctY3VzdG9tLXByb3A6IGxpc3Quc2V0LW50aChcbiAgICAgICRpcy1wYWRkaW5nLWN1c3RvbS1wcm9wLFxuICAgICAgJGksXG4gICAgICAkdmFsdWUtaXMtY3VzdG9tLXByb3BcbiAgICApO1xuICB9XG5cbiAgLy8gUGFkZGluZyBzaG91bGQgaW5jbHVkZSBvdXRsaW5lIHdpZHRoIHdoaWNoIHdpbGwgYmUgc2V0IG9uIGZvY3VzLlxuICAvLyBzYXNzIG1hdGggcmVxdWlyZWQgZm9yIElFIHNpbmNlIElFIGRvZXNuJ3Qgc3VwcG9ydCBjc3MgbWF4XG4gICRwYWRkaW5nLXRvcC1mYWxsYmFjazogbWF0aC5tYXgoXG4gICAgbGlzdC5udGgoJHBhZGRpbmctZmFsbGJhY2tzLCAxKSxcbiAgICAkd2lkdGgtZmFsbGJhY2tcbiAgKTtcbiAgJHBhZGRpbmctcmlnaHQtZmFsbGJhY2s6IG1hdGgubWF4KFxuICAgIGxpc3QubnRoKCRwYWRkaW5nLWZhbGxiYWNrcywgMiksXG4gICAgJHdpZHRoLWZhbGxiYWNrXG4gICk7XG4gICRwYWRkaW5nLWJvdHRvbS1mYWxsYmFjazogbWF0aC5tYXgoXG4gICAgbGlzdC5udGgoJHBhZGRpbmctZmFsbGJhY2tzLCAzKSxcbiAgICAkd2lkdGgtZmFsbGJhY2tcbiAgKTtcbiAgJHBhZGRpbmctbGVmdC1mYWxsYmFjazogbWF0aC5tYXgoXG4gICAgbGlzdC5udGgoJHBhZGRpbmctZmFsbGJhY2tzLCA0KSxcbiAgICAkd2lkdGgtZmFsbGJhY2tcbiAgKTtcblxuICAkcGFkZGluZy10b3A6IHJlcGxhY2UucmVwbGFjZS1zdHJpbmcoXG4gICAgJ21heChwYWRkaW5ndmFsLCB3aWR0aCknLFxuICAgIChcbiAgICAgIHBhZGRpbmd2YWw6IGxpc3QubnRoKCRwYWRkaW5nLCAxKSxcbiAgICAgIHdpZHRoOiAkd2lkdGgsXG4gICAgKVxuICApO1xuICAkcGFkZGluZy1yaWdodDogcmVwbGFjZS5yZXBsYWNlLXN0cmluZyhcbiAgICAnbWF4KHBhZGRpbmd2YWwsIHdpZHRoKScsXG4gICAgKFxuICAgICAgcGFkZGluZ3ZhbDogbGlzdC5udGgoJHBhZGRpbmcsIDIpLFxuICAgICAgd2lkdGg6ICR3aWR0aCxcbiAgICApXG4gICk7XG4gICRwYWRkaW5nLWJvdHRvbTogcmVwbGFjZS5yZXBsYWNlLXN0cmluZyhcbiAgICAnbWF4KHBhZGRpbmd2YWwsIHdpZHRoKScsXG4gICAgKFxuICAgICAgcGFkZGluZ3ZhbDogbGlzdC5udGgoJHBhZGRpbmcsIDMpLFxuICAgICAgd2lkdGg6ICR3aWR0aCxcbiAgICApXG4gICk7XG4gICRwYWRkaW5nLWxlZnQ6IHJlcGxhY2UucmVwbGFjZS1zdHJpbmcoXG4gICAgJ21heChwYWRkaW5ndmFsLCB3aWR0aCknLFxuICAgIChcbiAgICAgIHBhZGRpbmd2YWw6IGxpc3QubnRoKCRwYWRkaW5nLCA0KSxcbiAgICAgIHdpZHRoOiAkd2lkdGgsXG4gICAgKVxuICApO1xuXG4gICR0b3AtaGFzLWN1c3RvbS1wcm9wOiAkaXMtd2lkdGgtY3VzdG9tLXByb3Agb3JcbiAgICBsaXN0Lm50aCgkaXMtcGFkZGluZy1jdXN0b20tcHJvcCwgMSk7XG4gIEBpbmNsdWRlIGNzcy5kZWNsYXJhdGlvbihcbiAgICBwYWRkaW5nLXRvcCxcbiAgICAkcGFkZGluZy10b3AtZmFsbGJhY2ssXG4gICAgJGdzczogKGFsdGVybmF0ZTogJHRvcC1oYXMtY3VzdG9tLXByb3ApXG4gICk7XG4gIEBpZiAkdG9wLWhhcy1jdXN0b20tcHJvcCB7XG4gICAgQGluY2x1ZGUgY3NzLmRlY2xhcmF0aW9uKHBhZGRpbmctdG9wLCAkcGFkZGluZy10b3ApO1xuICB9XG5cbiAgJHJpZ2h0LWhhcy1jdXN0b20tcHJvcDogJGlzLXdpZHRoLWN1c3RvbS1wcm9wIG9yXG4gICAgbGlzdC5udGgoJGlzLXBhZGRpbmctY3VzdG9tLXByb3AsIDIpO1xuICBAaW5jbHVkZSBjc3MuZGVjbGFyYXRpb24oXG4gICAgcGFkZGluZy1yaWdodCxcbiAgICAkcGFkZGluZy1yaWdodC1mYWxsYmFjayxcbiAgICAkZ3NzOiAoYWx0ZXJuYXRlOiAkcmlnaHQtaGFzLWN1c3RvbS1wcm9wKVxuICApO1xuICBAaWYgJHJpZ2h0LWhhcy1jdXN0b20tcHJvcCB7XG4gICAgQGluY2x1ZGUgY3NzLmRlY2xhcmF0aW9uKHBhZGRpbmctcmlnaHQsICRwYWRkaW5nLXJpZ2h0KTtcbiAgfVxuXG4gICRib3R0b20taGFzLWN1c3RvbS1wcm9wOiAkaXMtd2lkdGgtY3VzdG9tLXByb3Agb3JcbiAgICBsaXN0Lm50aCgkaXMtcGFkZGluZy1jdXN0b20tcHJvcCwgMyk7XG4gIEBpbmNsdWRlIGNzcy5kZWNsYXJhdGlvbihcbiAgICBwYWRkaW5nLWJvdHRvbSxcbiAgICAkcGFkZGluZy1ib3R0b20tZmFsbGJhY2ssXG4gICAgJGdzczogKGFsdGVybmF0ZTogJGJvdHRvbS1oYXMtY3VzdG9tLXByb3ApXG4gICk7XG4gIEBpZiAkYm90dG9tLWhhcy1jdXN0b20tcHJvcCB7XG4gICAgQGluY2x1ZGUgY3NzLmRlY2xhcmF0aW9uKHBhZGRpbmctYm90dG9tLCAkcGFkZGluZy1ib3R0b20pO1xuICB9XG5cbiAgJGxlZnQtaGFzLWN1c3RvbS1wcm9wOiAkaXMtd2lkdGgtY3VzdG9tLXByb3Agb3JcbiAgICBsaXN0Lm50aCgkaXMtcGFkZGluZy1jdXN0b20tcHJvcCwgNCk7XG4gIEBpbmNsdWRlIGNzcy5kZWNsYXJhdGlvbihcbiAgICBwYWRkaW5nLWxlZnQsXG4gICAgJHBhZGRpbmctbGVmdC1mYWxsYmFjayxcbiAgICAkZ3NzOiAoYWx0ZXJuYXRlOiAkbGVmdC1oYXMtY3VzdG9tLXByb3ApXG4gICk7XG4gIEBpZiAkbGVmdC1oYXMtY3VzdG9tLXByb3Age1xuICAgIEBpbmNsdWRlIGNzcy5kZWNsYXJhdGlvbihwYWRkaW5nLWxlZnQsICRwYWRkaW5nLWxlZnQpO1xuICB9XG5cbiAgJjpub3QoOmRpc2FibGVkKSB7XG4gICAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLmZvY3VzKCkge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgYm9yZGVyLXN0eWxlOiBzb2xpZDtcbiAgICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoYm9yZGVyLXdpZHRoLCAkd2lkdGgpO1xuXG4gICAgICAgIC8vIHNhc3MgbWF0aCByZXF1aXJlZCBmb3IgSUUgc2luY2UgSUUgZG9lc24ndCBzdXBwb3J0IGNzcyBtYXhcbiAgICAgICAgJHBhZGRpbmctdG9wLWZhbGxiYWNrOiBtYXRoLmFicyhcbiAgICAgICAgICBsaXN0Lm50aCgkcGFkZGluZy1mYWxsYmFja3MsIDEpIC0gJHdpZHRoLWZhbGxiYWNrXG4gICAgICAgICk7XG4gICAgICAgICRwYWRkaW5nLXJpZ2h0LWZhbGxiYWNrOiBtYXRoLmFicyhcbiAgICAgICAgICBsaXN0Lm50aCgkcGFkZGluZy1mYWxsYmFja3MsIDIpIC0gJHdpZHRoLWZhbGxiYWNrXG4gICAgICAgICk7XG4gICAgICAgICRwYWRkaW5nLWJvdHRvbS1mYWxsYmFjazogbWF0aC5hYnMoXG4gICAgICAgICAgbGlzdC5udGgoJHBhZGRpbmctZmFsbGJhY2tzLCAzKSAtICR3aWR0aC1mYWxsYmFja1xuICAgICAgICApO1xuICAgICAgICAkcGFkZGluZy1sZWZ0LWZhbGxiYWNrOiBtYXRoLmFicyhcbiAgICAgICAgICBsaXN0Lm50aCgkcGFkZGluZy1mYWxsYmFja3MsIDQpIC0gJHdpZHRoLWZhbGxiYWNrXG4gICAgICAgICk7XG5cbiAgICAgICAgLy8gbWF4KGEsIGNhbGMoYSAqIC0xKSkgaXMgZXF1aXZhbGVudCB0byBtYXRoLmFic1xuICAgICAgICAkcGFkZGluZy10b3A6IHJlcGxhY2UucmVwbGFjZS1zdHJpbmcoXG4gICAgICAgICAgJ21heChwYWRkaW5nY2FsYywgY2FsYyhwYWRkaW5nY2FsYyAqIC0xKSknLFxuICAgICAgICAgIChcbiAgICAgICAgICAgIHBhZGRpbmdjYWxjOiAnY2FsYyhwYWRkaW5ndmFsIC0gd2lkdGgpJyxcbiAgICAgICAgICAgIHBhZGRpbmd2YWw6IGxpc3QubnRoKCRwYWRkaW5nLCAxKSxcbiAgICAgICAgICAgIHdpZHRoOiAkd2lkdGgsXG4gICAgICAgICAgKVxuICAgICAgICApO1xuICAgICAgICAkcGFkZGluZy1yaWdodDogcmVwbGFjZS5yZXBsYWNlLXN0cmluZyhcbiAgICAgICAgICAnbWF4KHBhZGRpbmdjYWxjLCBjYWxjKHBhZGRpbmdjYWxjICogLTEpKScsXG4gICAgICAgICAgKFxuICAgICAgICAgICAgcGFkZGluZ2NhbGM6ICdjYWxjKHBhZGRpbmd2YWwgLSB3aWR0aCknLFxuICAgICAgICAgICAgcGFkZGluZ3ZhbDogbGlzdC5udGgoJHBhZGRpbmcsIDIpLFxuICAgICAgICAgICAgd2lkdGg6ICR3aWR0aCxcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgICRwYWRkaW5nLWJvdHRvbTogcmVwbGFjZS5yZXBsYWNlLXN0cmluZyhcbiAgICAgICAgICAnbWF4KHBhZGRpbmdjYWxjLCBjYWxjKHBhZGRpbmdjYWxjICogLTEpKScsXG4gICAgICAgICAgKFxuICAgICAgICAgICAgcGFkZGluZ2NhbGM6ICdjYWxjKHBhZGRpbmd2YWwgLSB3aWR0aCknLFxuICAgICAgICAgICAgcGFkZGluZ3ZhbDogbGlzdC5udGgoJHBhZGRpbmcsIDMpLFxuICAgICAgICAgICAgd2lkdGg6ICR3aWR0aCxcbiAgICAgICAgICApXG4gICAgICAgICk7XG4gICAgICAgICRwYWRkaW5nLWxlZnQ6IHJlcGxhY2UucmVwbGFjZS1zdHJpbmcoXG4gICAgICAgICAgJ21heChwYWRkaW5nY2FsYywgY2FsYyhwYWRkaW5nY2FsYyAqIC0xKSknLFxuICAgICAgICAgIChcbiAgICAgICAgICAgIHBhZGRpbmdjYWxjOiAnY2FsYyhwYWRkaW5ndmFsIC0gd2lkdGgpJyxcbiAgICAgICAgICAgIHBhZGRpbmd2YWw6IGxpc3QubnRoKCRwYWRkaW5nLCA0KSxcbiAgICAgICAgICAgIHdpZHRoOiAkd2lkdGgsXG4gICAgICAgICAgKVxuICAgICAgICApO1xuXG4gICAgICAgIEBpbmNsdWRlIGNzcy5kZWNsYXJhdGlvbihcbiAgICAgICAgICBwYWRkaW5nLXRvcCxcbiAgICAgICAgICAkcGFkZGluZy10b3AtZmFsbGJhY2ssXG4gICAgICAgICAgJGdzczogKGFsdGVybmF0ZTogJHRvcC1oYXMtY3VzdG9tLXByb3ApXG4gICAgICAgICk7XG4gICAgICAgIEBpZiAkdG9wLWhhcy1jdXN0b20tcHJvcCB7XG4gICAgICAgICAgQGluY2x1ZGUgY3NzLmRlY2xhcmF0aW9uKHBhZGRpbmctdG9wLCAkcGFkZGluZy10b3ApO1xuICAgICAgICB9XG4gICAgICAgIEBpbmNsdWRlIGNzcy5kZWNsYXJhdGlvbihcbiAgICAgICAgICBwYWRkaW5nLXJpZ2h0LFxuICAgICAgICAgICRwYWRkaW5nLXJpZ2h0LWZhbGxiYWNrLFxuICAgICAgICAgICRnc3M6IChhbHRlcm5hdGU6ICRyaWdodC1oYXMtY3VzdG9tLXByb3ApXG4gICAgICAgICk7XG4gICAgICAgIEBpZiAkcmlnaHQtaGFzLWN1c3RvbS1wcm9wIHtcbiAgICAgICAgICBAaW5jbHVkZSBjc3MuZGVjbGFyYXRpb24ocGFkZGluZy1yaWdodCwgJHBhZGRpbmctcmlnaHQpO1xuICAgICAgICB9XG4gICAgICAgIEBpbmNsdWRlIGNzcy5kZWNsYXJhdGlvbihcbiAgICAgICAgICBwYWRkaW5nLWJvdHRvbSxcbiAgICAgICAgICAkcGFkZGluZy1ib3R0b20tZmFsbGJhY2ssXG4gICAgICAgICAgJGdzczogKGFsdGVybmF0ZTogJGJvdHRvbS1oYXMtY3VzdG9tLXByb3ApXG4gICAgICAgICk7XG4gICAgICAgIEBpZiAkYm90dG9tLWhhcy1jdXN0b20tcHJvcCB7XG4gICAgICAgICAgQGluY2x1ZGUgY3NzLmRlY2xhcmF0aW9uKHBhZGRpbmctYm90dG9tLCAkcGFkZGluZy1ib3R0b20pO1xuICAgICAgICB9XG4gICAgICAgIEBpbmNsdWRlIGNzcy5kZWNsYXJhdGlvbihcbiAgICAgICAgICBwYWRkaW5nLWxlZnQsXG4gICAgICAgICAgJHBhZGRpbmctbGVmdC1mYWxsYmFjayxcbiAgICAgICAgICAkZ3NzOiAoYWx0ZXJuYXRlOiAkbGVmdC1oYXMtY3VzdG9tLXByb3ApXG4gICAgICAgICk7XG4gICAgICAgIEBpZiAkbGVmdC1oYXMtY3VzdG9tLXByb3Age1xuICAgICAgICAgIEBpbmNsdWRlIGNzcy5kZWNsYXJhdGlvbihwYWRkaW5nLWxlZnQsICRwYWRkaW5nLWxlZnQpO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgb3V0bGluZSBjb2xvciBvbmx5IHdoZW4gYnV0dG9uIGlzIGluIGZvY3VzLiBVc2UgYGZvY3VzLW91dGxpbmUtd2lkdGgoKWBcbi8vLyB0byBzZXQgYXBwcm9wcmlhdGUgb3V0bGluZSB3aWR0aC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBPdXRsaW5lIChib3JkZXIpIGNvbG9yLlxuLy8vXG5AbWl4aW4gZm9jdXMtb3V0bGluZS1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgJjpub3QoOmRpc2FibGVkKSB7XG4gICAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLmZvY3VzKCkge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShib3JkZXItY29sb3IsICRjb2xvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBzaGFwZS1yYWRpdXMoXG4gICRyYWRpdXMsXG4gICRydGwtcmVmbGV4aXZlOiBmYWxzZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICY6bm90KC5tZGMtZmFiLS1leHRlbmRlZCkge1xuICAgIC8vIERvIG5vdCBzcGVjaWZ5ICRjb21wb25lbnQtaGVpZ2h0IGZvciBzaGFwZSByYWRpdXMuIEZBQnMgYXJlIGNpcmN1bGFyLFxuICAgIC8vIHdoaWNoIG1lYW5zIHRoZXkgY2FuIHVzZSBwZXJjZW50YWdlIGJvcmRlciByYWRpdXMgd2l0aG91dCByZXNvbHZpbmcgdG9cbiAgICAvLyBhIGNvbXBvbmVudCBoZWlnaHQuXG4gICAgQGluY2x1ZGUgc2hhcGUtbWl4aW5zLnJhZGl1cygkcmFkaXVzLCAkcnRsLXJlZmxleGl2ZSwgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gICAgI3skcmlwcGxlLXRhcmdldH0ge1xuICAgICAgQGluY2x1ZGUgc2hhcGUtbWl4aW5zLnJhZGl1cygkcmFkaXVzLCAkcnRsLXJlZmxleGl2ZSwgJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIH1cbiAgfVxufVxuIiwiLy8gQ29weXJpZ2h0IDIwMTYgR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuIC0tXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cblxuQHVzZSAnQG1hdGVyaWFsL2FuaW1hdGlvbi9mdW5jdGlvbnMnIGFzIGFuaW1hdGlvbi1mdW5jdGlvbnM7XG5AdXNlICdAbWF0ZXJpYWwvZWxldmF0aW9uL2VsZXZhdGlvbi10aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvZmVhdHVyZS10YXJnZXRpbmcvZmVhdHVyZS10YXJnZXRpbmcnO1xuQHVzZSAnQG1hdGVyaWFsL2RvbS9taXhpbnMnIGFzIGRvbS1taXhpbnM7XG5AdXNlICdAbWF0ZXJpYWwvcmlwcGxlL3JpcHBsZSc7XG5AdXNlICdAbWF0ZXJpYWwvcmlwcGxlL3JpcHBsZS10aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvcnRsL21peGlucycgYXMgcnRsLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9zaGFwZS9taXhpbnMnIGFzIHNoYXBlLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC9zaGFwZS9mdW5jdGlvbnMnIGFzIHNoYXBlLWZ1bmN0aW9ucztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9jc3MnO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL2N1c3RvbS1wcm9wZXJ0aWVzJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9yZXBsYWNlJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9zdGF0ZSc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUtY29sb3InO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC90b2tlbnMvcmVzb2x2ZXJzJztcbkB1c2UgJ0BtYXRlcmlhbC90b3VjaC10YXJnZXQvbWl4aW5zJyBhcyB0b3VjaC10YXJnZXQtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL3R5cG9ncmFwaHkvdHlwb2dyYXBoeSc7XG5AdXNlICcuL2ZhYi10aGVtZSc7XG5AdXNlICdzYXNzOm1hdGgnO1xuQHVzZSAnc2FzczptYXAnO1xuQHVzZSAnc2FzczpsaXN0JztcblxuJGV4dGVuZGVkLWljb24tcGFkZGluZzogMTJweCAhZGVmYXVsdDtcbiRleHRlbmRlZC1sYWJlbC1wYWRkaW5nOiAyMHB4ICFkZWZhdWx0O1xuJGV4dGVuZGVkLWhlaWdodDogNDhweCAhZGVmYXVsdDtcblxuJF9leHRlbmRlZC1saWdodC10aGVtZTogKFxuICBjb250YWluZXItY29sb3I6IHRoZW1lLWNvbG9yLiRzdXJmYWNlLFxuICBjb250YWluZXItZWxldmF0aW9uOiAzLFxuICBjb250YWluZXItaGVpZ2h0OiA1NnB4LFxuICBjb250YWluZXItc2hhZG93LWNvbG9yOiBibGFjayxcbiAgY29udGFpbmVyLXNoYXBlOiA1MCUsXG4gIGZvY3VzLWNvbnRhaW5lci1lbGV2YXRpb246IG51bGwsXG4gIGZvY3VzLWljb24tY29sb3I6IG51bGwsXG4gIGZvY3VzLWxhYmVsLXRleHQtY29sb3I6IG51bGwsXG4gIGZvY3VzLW91dGxpbmUtY29sb3I6IG51bGwsXG4gIGZvY3VzLW91dGxpbmUtd2lkdGg6IG51bGwsXG4gIGZvY3VzLXN0YXRlLWxheWVyLWNvbG9yOiB0aGVtZS1jb2xvci4kcHJpbWFyeSxcbiAgZm9jdXMtc3RhdGUtbGF5ZXItb3BhY2l0eTogbnVsbCxcbiAgaG92ZXItY29udGFpbmVyLWVsZXZhdGlvbjogbnVsbCxcbiAgaG92ZXItaWNvbi1jb2xvcjogbnVsbCxcbiAgaG92ZXItbGFiZWwtdGV4dC1jb2xvcjogbnVsbCxcbiAgaG92ZXItc3RhdGUtbGF5ZXItY29sb3I6IHRoZW1lLWNvbG9yLiRwcmltYXJ5LFxuICBob3Zlci1zdGF0ZS1sYXllci1vcGFjaXR5OiBudWxsLFxuICBpY29uLWNvbG9yOiBudWxsLFxuICBpY29uLXNpemU6IDM2cHgsXG4gIGxhYmVsLXRleHQtY29sb3I6IHRoZW1lLWNvbG9yLiRvbi1zdXJmYWNlLFxuICBsYWJlbC10ZXh0LWZvbnQ6IHR5cG9ncmFwaHkuZ2V0LWZvbnQoYnV0dG9uKSxcbiAgbGFiZWwtdGV4dC1zaXplOiB0eXBvZ3JhcGh5LmdldC1zaXplKGJ1dHRvbiksXG4gIGxhYmVsLXRleHQtdHJhY2tpbmc6IHR5cG9ncmFwaHkuZ2V0LXRyYWNraW5nKGJ1dHRvbiksXG4gIGxhYmVsLXRleHQtd2VpZ2h0OiB0eXBvZ3JhcGh5LmdldC13ZWlnaHQoYnV0dG9uKSxcbiAgbG93ZXJlZC1jb250YWluZXItZWxldmF0aW9uOiBudWxsLFxuICBsb3dlcmVkLWZvY3VzLWNvbnRhaW5lci1lbGV2YXRpb246IG51bGwsXG4gIGxvd2VyZWQtaG92ZXItY29udGFpbmVyLWVsZXZhdGlvbjogbnVsbCxcbiAgbG93ZXJlZC1wcmVzc2VkLWNvbnRhaW5lci1lbGV2YXRpb246IG51bGwsXG4gIHByZXNzZWQtY29udGFpbmVyLWVsZXZhdGlvbjogbnVsbCxcbiAgcHJlc3NlZC1pY29uLWNvbG9yOiBudWxsLFxuICBwcmVzc2VkLWxhYmVsLXRleHQtY29sb3I6IG51bGwsXG4gIHByZXNzZWQtcmlwcGxlLWNvbG9yOiBudWxsLFxuICBwcmVzc2VkLXJpcHBsZS1vcGFjaXR5OiBudWxsLFxuICBwcmVzc2VkLXN0YXRlLWxheWVyLWNvbG9yOiB0aGVtZS1jb2xvci4kcHJpbWFyeSxcbiAgcHJlc3NlZC1zdGF0ZS1sYXllci1vcGFjaXR5OiBudWxsLFxuKTtcblxuQG1peGluIHRoZW1lKCR0aGVtZSwgJHJlc29sdmVyczogcmVzb2x2ZXJzLiRtYXRlcmlhbCkge1xuICBAaW5jbHVkZSB0aGVtZS52YWxpZGF0ZS1rZXlzKCRfZXh0ZW5kZWQtbGlnaHQtdGhlbWUsICR0aGVtZSk7XG4gIEBpbmNsdWRlIGZhYi10aGVtZS5iYXNlLXRoZW1lKCR0aGVtZSwgJHJlc29sdmVyczogJHJlc29sdmVycyk7XG4gICRjb250YWluZXItc2hhcGU6IG1hcC5nZXQoJHRoZW1lLCBjb250YWluZXItc2hhcGUpO1xuICBAaWYgJGNvbnRhaW5lci1zaGFwZSB7XG4gICAgQGluY2x1ZGUgZXh0ZW5kZWQtc2hhcGUtcmFkaXVzKCRjb250YWluZXItc2hhcGUpO1xuICB9XG4gIEBpbmNsdWRlIF9sYWJlbC1jb2xvcihcbiAgICAoXG4gICAgICBkZWZhdWx0OiBtYXAuZ2V0KCR0aGVtZSwgbGFiZWwtdGV4dC1jb2xvciksXG4gICAgICBob3ZlcjogbWFwLmdldCgkdGhlbWUsIGhvdmVyLWxhYmVsLXRleHQtY29sb3IpLFxuICAgICAgZm9jdXM6IG1hcC5nZXQoJHRoZW1lLCBmb2N1cy1sYWJlbC10ZXh0LWNvbG9yKSxcbiAgICAgIHByZXNzZWQ6IG1hcC5nZXQoJHRoZW1lLCBwcmVzc2VkLWxhYmVsLXRleHQtY29sb3IpLFxuICAgIClcbiAgKTtcbiAgQGluY2x1ZGUgX2xhYmVsLXR5cG9ncmFwaHkoXG4gICAgKFxuICAgICAgZm9udDogbWFwLmdldCgkdGhlbWUsIGxhYmVsLXRleHQtZm9udCksXG4gICAgICBzaXplOiBtYXAuZ2V0KCR0aGVtZSwgbGFiZWwtdGV4dC1zaXplKSxcbiAgICAgIHdlaWdodDogbWFwLmdldCgkdGhlbWUsIGxhYmVsLXRleHQtd2VpZ2h0KSxcbiAgICAgIHRyYWNraW5nOiBtYXAuZ2V0KCR0aGVtZSwgbGFiZWwtdGV4dC10cmFja2luZyksXG4gICAgKVxuICApO1xufVxuXG5AbWl4aW4gZXh0ZW5kZWQtZmx1aWQoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgd2lkdGg6IDEwMCU7XG4gIH1cbn1cblxuQG1peGluIGV4dGVuZGVkLXBhZGRpbmcoXG4gICRpY29uLXBhZGRpbmcsXG4gICRsYWJlbC1wYWRkaW5nLFxuICAkZm9jdXMtb3V0bGluZS13aWR0aDogbnVsbCxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZXh0ZW5kZWQtbGFiZWwtcGFkZGluZygkbGFiZWwtcGFkZGluZywgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gIC8vIE9mZnNldHMgdGhlIG91dGVyIGxhYmVsIHBhZGRpbmcgYnkgZGVkdWN0aW5nIGl0IGZyb20gaWNvbiBwYWRkaW5nLlxuICAubWRjLWZhYl9faWNvbiB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIEBpbmNsdWRlIGV4dGVuZGVkLWljb24tcGFkZGluZygkaWNvbi1wYWRkaW5nLCAkbGFiZWwtcGFkZGluZyk7XG4gICAgfVxuICB9XG5cbiAgLy8gRm9yIEV4dGVuZGVkIEZBQiB3aXRoIHRleHQgbGFiZWwgZm9sbG93ZWQgYnkgaWNvbi5cbiAgLm1kYy1mYWJfX2xhYmVsICsgLm1kYy1mYWJfX2ljb24ge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBAaW5jbHVkZSBleHRlbmRlZC1pY29uLXBhZGRpbmcoXG4gICAgICAgICRpY29uLXBhZGRpbmcsXG4gICAgICAgICRsYWJlbC1wYWRkaW5nLFxuICAgICAgICAkaXMtaWNvbi1hdC1lbmQ6IHRydWVcbiAgICAgICk7XG4gICAgfVxuICB9XG5cbiAgQGlmICRmb2N1cy1vdXRsaW5lLXdpZHRoIHtcbiAgICBAaW5jbHVkZSBmYWItdGhlbWUuZm9jdXMtb3V0bGluZS13aWR0aChcbiAgICAgICRmb2N1cy1vdXRsaW5lLXdpZHRoLFxuICAgICAgJHBhZGRpbmc6IDAgJGxhYmVsLXBhZGRpbmdcbiAgICApO1xuICB9XG59XG5cbkBtaXhpbiBleHRlbmRlZC1pY29uLXBhZGRpbmcoXG4gICRpY29uLXBhZGRpbmcsXG4gICRsYWJlbC1wYWRkaW5nLFxuICAkaXMtaWNvbi1hdC1lbmQ6IGZhbHNlXG4pIHtcbiAgJHN0YXJ0OiBjYWxjKGljb24gLSBsYWJlbCk7XG4gICRlbmQ6ICRpY29uLXBhZGRpbmc7XG5cbiAgQGlmICRpcy1pY29uLWF0LWVuZCB7XG4gICAgJHN0YXJ0OiAkaWNvbi1wYWRkaW5nO1xuICAgICRlbmQ6IGNhbGMoaWNvbiAtIGxhYmVsKTtcbiAgfVxuXG4gIEBpbmNsdWRlIHJ0bC1taXhpbnMucmVmbGV4aXZlLXByb3BlcnR5KFxuICAgIG1hcmdpbixcbiAgICAkc3RhcnQsXG4gICAgJGVuZCxcbiAgICAkcmVwbGFjZTogKGljb246ICRpY29uLXBhZGRpbmcsIGxhYmVsOiAkbGFiZWwtcGFkZGluZylcbiAgKTtcbn1cblxuQG1peGluIGV4dGVuZGVkLWxhYmVsLXBhZGRpbmcoJGxhYmVsLXBhZGRpbmcsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIEBpbmNsdWRlIHRoZW1lLnByb3BlcnR5KHBhZGRpbmctbGVmdCwgJGxhYmVsLXBhZGRpbmcsICRnc3M6IChub2ZsaXA6IHRydWUpKTtcbiAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShcbiAgICAgIHBhZGRpbmctcmlnaHQsXG4gICAgICAkbGFiZWwtcGFkZGluZyxcbiAgICAgICRnc3M6IChub2ZsaXA6IHRydWUpXG4gICAgKTtcbiAgfVxufVxuXG5AbWl4aW4gZXh0ZW5kZWQtc2hhcGUtcmFkaXVzKFxuICAkcmFkaXVzLFxuICAkcnRsLXJlZmxleGl2ZTogZmFsc2UsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAvLyBFeHRlbmRlZCBGQUJzIF9kb18gbmVlZCBhICRjb21wb25lbnQtaGVpZ2h0IHNpbmNlIHRoZXkgYXJlIG5vdCBjaXJjdWxhci5cbiAgLy8gUGVyY2VudGFnZSByYWRpaSBtdXN0IGJlIHJlc29sdmVkLlxuICBAaW5jbHVkZSBzaGFwZS1taXhpbnMucmFkaXVzKFxuICAgICRyYWRpdXMsXG4gICAgJHJ0bC1yZWZsZXhpdmUsXG4gICAgJGNvbXBvbmVudC1oZWlnaHQ6ICRleHRlbmRlZC1oZWlnaHQsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcblxuICAje2ZhYi10aGVtZS4kcmlwcGxlLXRhcmdldH0ge1xuICAgIEBpbmNsdWRlIHNoYXBlLW1peGlucy5yYWRpdXMoXG4gICAgICAkcmFkaXVzLFxuICAgICAgJHJ0bC1yZWZsZXhpdmUsXG4gICAgICAkY29tcG9uZW50LWhlaWdodDogJGV4dGVuZGVkLWhlaWdodCxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcbiAgfVxufVxuXG5AbWl4aW4gX2xhYmVsLWNvbG9yKCRjb2xvci1vci1tYXApIHtcbiAgJjpub3QoOmRpc2FibGVkKSB7XG4gICAgQGluY2x1ZGUgX3NldC1sYWJlbC1jb2xvcihzdGF0ZS5nZXQtZGVmYXVsdC1zdGF0ZSgkY29sb3Itb3ItbWFwKSk7XG5cbiAgICAmOmhvdmVyIHtcbiAgICAgIEBpbmNsdWRlIF9zZXQtbGFiZWwtY29sb3Ioc3RhdGUuZ2V0LWhvdmVyLXN0YXRlKCRjb2xvci1vci1tYXApKTtcbiAgICB9XG5cbiAgICAmOmZvY3VzIHtcbiAgICAgIEBpbmNsdWRlIF9zZXQtbGFiZWwtY29sb3Ioc3RhdGUuZ2V0LWZvY3VzLXN0YXRlKCRjb2xvci1vci1tYXApKTtcbiAgICB9XG5cbiAgICAmOmFjdGl2ZSB7XG4gICAgICBAaW5jbHVkZSBfc2V0LWxhYmVsLWNvbG9yKHN0YXRlLmdldC1wcmVzc2VkLXN0YXRlKCRjb2xvci1vci1tYXApKTtcbiAgICB9XG4gIH1cblxuICAmOmRpc2FibGVkIHtcbiAgICBAaW5jbHVkZSBfc2V0LWxhYmVsLWNvbG9yKHN0YXRlLmdldC1kaXNhYmxlZC1zdGF0ZSgkY29sb3Itb3ItbWFwKSk7XG4gIH1cbn1cblxuQG1peGluIF9zZXQtbGFiZWwtY29sb3IoJGNvbG9yKSB7XG4gIC5tZGMtZmFiX19sYWJlbCB7XG4gICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoY29sb3IsICRjb2xvcik7XG4gIH1cbn1cblxuQG1peGluIF9sYWJlbC10eXBvZ3JhcGh5KCR0eXBvZ3JhcGh5LW1hcCkge1xuICBmb250LWZhbWlseTogbWFwLmdldCgkdHlwb2dyYXBoeS1tYXAsIGZvbnQpO1xuICBmb250LXNpemU6IG1hcC5nZXQoJHR5cG9ncmFwaHktbWFwLCBzaXplKTtcbiAgZm9udC13ZWlnaHQ6IG1hcC5nZXQoJHR5cG9ncmFwaHktbWFwLCB3ZWlnaHQpO1xuICBsZXR0ZXItc3BhY2luZzogbWFwLmdldCgkdHlwb2dyYXBoeS1tYXAsIHRyYWNraW5nKTtcbn1cbiIsIi8vIENvcHlyaWdodCAyMDIwIEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cblxuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbi8vL1xuLy8vIEVtaXRzIG5lY2Vzc2FyeSBsYXlvdXQgc3R5bGVzIHRvIHNldCBhIHRyYW5zcGFyZW50IGJvcmRlciBhcm91bmQgYW4gZWxlbWVudFxuLy8vIHdpdGhvdXQgaW50ZXJmZXJpbmcgd2l0aCB0aGUgcmVzdCBvZiBpdHMgY29tcG9uZW50IGxheW91dC4gVGhlIGJvcmRlciBpc1xuLy8vIG9ubHkgdmlzaWJsZSBpbiBoaWdoLWNvbnRyYXN0IG1vZGUuIFRoZSB0YXJnZXQgZWxlbWVudCBzaG91bGQgYmUgYSBjaGlsZCBvZlxuLy8vIGEgcmVsYXRpdmVseSBwb3NpdGlvbmVkIHRvcC1sZXZlbCBlbGVtZW50IChpLmUuIGEgOjpiZWZvcmUgcHNldWRvLWVsZW1lbnQpLlxuLy8vXG4vLy8gQHBhcmFtIHtudW1iZXJ9ICRib3JkZXItd2lkdGggLSBUaGUgd2lkdGggb2YgdGhlIHRyYW5zcGFyZW50IGJvcmRlci5cbi8vLyBAcGFyYW0ge3N0cmluZ30gJGJvcmRlci1zdHlsZSAtIFRoZSBzdHlsZSBvZiB0aGUgdHJhbnNwYXJlbnQgYm9yZGVyLlxuLy8vXG5AbWl4aW4gdHJhbnNwYXJlbnQtYm9yZGVyKFxuICAkYm9yZGVyLXdpZHRoOiAxcHgsXG4gICRib3JkZXItc3R5bGU6IHNvbGlkLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHdpZHRoOiAxMDAlO1xuICAgIGhlaWdodDogMTAwJTtcbiAgICB0b3A6IDA7XG4gICAgbGVmdDogMDtcbiAgICBib3JkZXI6ICRib3JkZXItd2lkdGggJGJvcmRlci1zdHlsZSB0cmFuc3BhcmVudDtcbiAgICBib3JkZXItcmFkaXVzOiBpbmhlcml0O1xuICAgIGNvbnRlbnQ6ICcnO1xuICAgIHBvaW50ZXItZXZlbnRzOiBub25lO1xuICB9XG59XG5cbi8vL1xuLy8vIFZpc3VhbGx5IGhpZGVzIHRleHQgY29udGVudCBmb3IgYWNjZXNzaWJpbGl0eS4gVGhpcyB0ZXh0IHNob3VsZCBvbmx5IGJlXG4vLy8gdmlzaWJsZSB0byBzY3JlZW4gcmVhZGVyIHVzZXJzLlxuLy8vIFNlZSBodHRwczovL2ExMXlwcm9qZWN0LmNvbS9wb3N0cy9ob3ctdG8taGlkZS1jb250ZW50L1xuLy8vXG5AbWl4aW4gdmlzdWFsbHktaGlkZGVuKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGNsaXA6IHJlY3QoMXB4LCAxcHgsIDFweCwgMXB4KTtcbiAgICBoZWlnaHQ6IDFweDtcbiAgICBvdmVyZmxvdzogaGlkZGVuO1xuICAgIHBvc2l0aW9uOiBhYnNvbHV0ZTtcbiAgICB3aGl0ZS1zcGFjZTogbm93cmFwOyAvKiBhZGRlZCBsaW5lICovXG4gICAgd2lkdGg6IDFweDtcbiAgfVxufVxuXG4vLy8gU2VsZWN0cyBmb3IgSUUxMSBzdXBwb3J0LlxuLy8vXG4vLy8gQGNvbnRlbnQgc3R5bGVzIHRvIGVtaXQgZm9yIElFMTEgc3VwcG9ydFxuQG1peGluIGllMTEtc3VwcG9ydCB7XG4gIEBtZWRpYSBhbGwgYW5kICgtbXMtaGlnaC1jb250cmFzdDogbm9uZSksICgtbXMtaGlnaC1jb250cmFzdDogYWN0aXZlKSB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cblxuLy8vIFNlbGVjdHMgZm9yIGBmb3JjZWQtY29sb3JzYCBoaWdoIGNvbnRyYXN0IG1vZGUuXG4vLy9cbi8vLyBXaGlsZSBpbiBgZm9yY2VkLWNvbG9yc2AgbW9kZSwgb25seSBzeXN0ZW0gY29sb3JzIHNob3VsZCBiZSB1c2VkLlxuLy8vXG4vLy8gQGxpbmsgaHR0cHM6Ly9kZXZlbG9wZXIubW96aWxsYS5vcmcvZW4tVVMvZG9jcy9XZWIvQ1NTL2NvbG9yX3ZhbHVlI3N5c3RlbV9jb2xvcnNcbi8vLyBAbGluayBodHRwczovL2RldmVsb3Blci5tb3ppbGxhLm9yZy9lbi1VUy9kb2NzL1dlYi9DU1MvQG1lZGlhL2ZvcmNlZC1jb2xvcnNcbi8vLyBAY29udGVudCBzdHlsZXMgdG8gZW1pdCBpbiBgZm9yY2VkLWNvbG9yc2AgbW9kZVxuQG1peGluIGZvcmNlZC1jb2xvcnMtbW9kZSgkZXhjbHVkZS1pZTExOiBmYWxzZSkge1xuICBAaWYgJGV4Y2x1ZGUtaWUxMSB7XG4gICAgQG1lZGlhIHNjcmVlbiBhbmQgKGZvcmNlZC1jb2xvcnM6IGFjdGl2ZSkge1xuICAgICAgQGNvbnRlbnQ7XG4gICAgfVxuICB9IEBlbHNlIHtcbiAgICBAbWVkaWEgc2NyZWVuIGFuZCAoZm9yY2VkLWNvbG9yczogYWN0aXZlKSwgKC1tcy1oaWdoLWNvbnRyYXN0OiBhY3RpdmUpIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVyblxuXG5AdXNlICdzYXNzOm1hdGgnO1xuQHVzZSAnQG1hdGVyaWFsL2RlbnNpdHkvZnVuY3Rpb25zJyBhcyBkZW5zaXR5LWZ1bmN0aW9ucztcbkB1c2UgJ0BtYXRlcmlhbC9mZWF0dXJlLXRhcmdldGluZy9mZWF0dXJlLXRhcmdldGluZyc7XG5AdXNlICdAbWF0ZXJpYWwvcmlwcGxlL3JpcHBsZSc7XG5AdXNlICdAbWF0ZXJpYWwvcmlwcGxlL3JpcHBsZS10aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvcnRsL21peGlucycgYXMgcnRsO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC90b3VjaC10YXJnZXQvbWl4aW5zJyBhcyB0b3VjaC10YXJnZXQtbWl4aW5zO1xuQHVzZSAnLi92YXJpYWJsZXMnO1xuXG4kcmlwcGxlLXRhcmdldDogJy5tZGMtaWNvbi1idXR0b25fX3JpcHBsZSc7XG5cbkBtaXhpbiBjb3JlLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIHdpdGhvdXQtcmlwcGxlKCRxdWVyeSk7XG4gIEBpbmNsdWRlIHJpcHBsZSgkcXVlcnkpO1xufVxuXG5AbWl4aW4gd2l0aG91dC1yaXBwbGUoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZGVmaW5lIGljb24tYnV0dG9uXG4gIC5tZGMtaWNvbi1idXR0b24ge1xuICAgIEBpbmNsdWRlIGJhc2VfKCRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSBkZW5zaXR5KDAsICRxdWVyeTogJHF1ZXJ5KTtcblxuICAgIC5tZGMtaWNvbi1idXR0b25fX3RvdWNoIHtcbiAgICAgIEBpbmNsdWRlIHRvdWNoLXRhcmdldC1taXhpbnMudG91Y2gtdGFyZ2V0KFxuICAgICAgICAkc2V0LXdpZHRoOiB0cnVlLFxuICAgICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICAgKTtcbiAgICB9XG4gIH1cblxuICAubWRjLWljb24tYnV0dG9uX19pY29uIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgZGlzcGxheTogaW5saW5lLWJsb2NrO1xuICAgIH1cblxuICAgIC8vIHN0eWxlbGludC1kaXNhYmxlLW5leHQtbGluZSBwbHVnaW4vc2VsZWN0b3ItYmVtLXBhdHRlcm5cbiAgICAmLm1kYy1pY29uLWJ1dHRvbl9faWNvbi0tb24ge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubWRjLWljb24tYnV0dG9uLS1vbiB7XG4gICAgLm1kYy1pY29uLWJ1dHRvbl9faWNvbiB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBkaXNwbGF5OiBub25lO1xuICAgICAgfVxuXG4gICAgICAvLyBzdHlsZWxpbnQtZGlzYWJsZS1uZXh0LWxpbmUgcGx1Z2luL3NlbGVjdG9yLWJlbS1wYXR0ZXJuXG4gICAgICAmLm1kYy1pY29uLWJ1dHRvbl9faWNvbi0tb24ge1xuICAgICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICAgIGRpc3BsYXk6IGlubGluZS1ibG9jaztcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tZGMtaWNvbi1idXR0b24tLXRvdWNoIHtcbiAgICBAaW5jbHVkZSB0b3VjaC10YXJnZXQtbWl4aW5zLm1hcmdpbihcbiAgICAgICRjb21wb25lbnQtaGVpZ2h0OiB2YXJpYWJsZXMuJHNpemUsXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBlbmRcbn1cblxuQG1peGluIHJpcHBsZSgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIHJpcHBsZS5jb21tb24oJHF1ZXJ5KTsgLy8gQ09QWUJBUkFfQ09NTUVOVF9USElTX0xJTkVcblxuICAubWRjLWljb24tYnV0dG9uIHtcbiAgICBAaW5jbHVkZSByaXBwbGUuc3VyZmFjZSgkcXVlcnk6ICRxdWVyeSwgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0KTtcbiAgICBAaW5jbHVkZSByaXBwbGUucmFkaXVzLXVuYm91bmRlZChcbiAgICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICAgJHJpcHBsZS10YXJnZXQ6ICRyaXBwbGUtdGFyZ2V0XG4gICAgKTtcbiAgICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzKFxuICAgICAgJHF1ZXJ5OiAkcXVlcnksXG4gICAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXRcbiAgICApO1xuXG4gICAgLm1kYy1pY29uLWJ1dHRvbl9fcmlwcGxlIHtcbiAgICAgICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICAgICAgei1pbmRleDogMTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgZGVuc2l0eSBzY2FsZSBmb3IgaWNvbiBidXR0b24uXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlciB8IFN0cmluZ30gJGRlbnNpdHktc2NhbGUgLSBEZW5zaXR5IHNjYWxlIHZhbHVlIGZvciBjb21wb25lbnQuXG4vLy8gICAgIFN1cHBvcnRlZCBkZW5zaXR5IHNjYWxlIHZhbHVlcyByYW5nZSBmcm9tIGAtNWAgdG8gYDBgLCB3aXRoIGAwYCBiZWluZyB0aGUgZGVmYXVsdC5cbi8vL1xuQG1peGluIGRlbnNpdHkoJGRlbnNpdHktc2NhbGUsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJHNpemU6IGRlbnNpdHktZnVuY3Rpb25zLnByb3AtdmFsdWUoXG4gICAgJGRlbnNpdHktY29uZmlnOiB2YXJpYWJsZXMuJGRlbnNpdHktY29uZmlnLFxuICAgICRkZW5zaXR5LXNjYWxlOiAkZGVuc2l0eS1zY2FsZSxcbiAgICAkcHJvcGVydHktbmFtZTogc2l6ZSxcbiAgKTtcblxuICBAaW5jbHVkZSBzaXplKCRzaXplLCAkcXVlcnk6ICRxdWVyeSk7XG5cbiAgJi5tZGMtaWNvbi1idXR0b24tLXRvdWNoIHtcbiAgICBAaWYgJGRlbnNpdHktc2NhbGUgIT0gMCB7XG4gICAgICBAaW5jbHVkZSBfdG91Y2gtdGFyZ2V0LXJlc2V0KCRxdWVyeTogJHF1ZXJ5KTtcbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgc2l6ZSBvZiB0aGUgaWNvbi1idXR0b24uXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJHNpemUgLSBTaXplIHZhbHVlIGZvciBpY29uLWJ1dHRvbi5cbi8vLyAgICAgU2l6ZSB3aWxsIHNldCB0aGUgd2lkdGgsIGhlaWdodCwgYW5kIHBhZGRpbmcgZm9yIHRoZSBvdmVyYWxsIGNvbXBvbmVudC5cbi8vL1xuQG1peGluIHNpemUoJHNpemUsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIHdpZHRoOiAkc2l6ZTtcbiAgICBoZWlnaHQ6ICRzaXplO1xuICAgIHBhZGRpbmc6IG1hdGguZGl2KCRzaXplIC0gdmFyaWFibGVzLiRpY29uLXNpemUsIDIpO1xuICB9XG59XG5cbi8vL1xuLy8vIFJlc2V0cyB0b3VjaCB0YXJnZXQtcmVsYXRlZCBzdHlsZXMuIFRoaXMgaXMgY2FsbGVkIGZyb20gdGhlIGRlbnNpdHkgbWl4aW4gdG9cbi8vLyBhdXRvbWF0aWNhbGx5IHJlbW92ZSB0aGUgaW5jcmVhc2VkIHRvdWNoIHRhcmdldCwgc2luY2UgZGVuc2UgY29tcG9uZW50c1xuLy8vIGRvbid0IGhhdmUgdGhlIHNhbWUgZGVmYXVsdCBhMTF5IHJlcXVpcmVtZW50cy5cbi8vLyBAYWNjZXNzIHByaXZhdGVcbi8vL1xuQG1peGluIF90b3VjaC10YXJnZXQtcmVzZXQoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgbWFyZ2luLXRvcDogMDtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xuICB9XG5cbiAgLm1kYy1pY29uLWJ1dHRvbl9fdG91Y2gge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSB3aWR0aCwgaGVpZ2h0IGFuZCBwYWRkaW5nIG9mIGljb24gYnV0dG9uLiBBbHNvIGNoYW5nZXMgdGhlIHNpemUgb2Zcbi8vLyB0aGUgaWNvbiBpdHNlbGYgYmFzZWQgb24gYnV0dG9uIHNpemUuXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJHdpZHRoIC0gV2lkdGggdmFsdWUgZm9yIGljb24tYnV0dG9uLlxuLy8vIEBwYXJhbSB7TnVtYmVyfSAkaGVpZ2h0IC0gSGVpZ2h0IHZhbHVlIGZvciBpY29uLWJ1dHRvbi4gKGRlZmF1bHQ6ICR3aWR0aClcbi8vLyBAcGFyYW0ge051bWJlcn0gJHBhZGRpbmcgLSBQYWRkaW5nIHZhbHVlIGZvciBpY29uLWJ1dHRvbi4gKGRlZmF1bHQ6IG1heCgkd2lkdGgsICRoZWlnaHQpIC8gMilcbi8vLyBAZGVwcmVjYXRlZFxuLy8vICAgICBUaGlzIG1peGluIHByb3ZpZGVzIHRvbyBtdWNoIG9mIGxvdyBsZXZlbCBjdXN0b21pemF0aW9uLlxuLy8vICAgICBQbGVhc2UgdXNlIG1kYy1pY29uLWJ1dHRvbi1zaXplIGluc3RlYWQuXG4vLy9cbkBtaXhpbiBpY29uLXNpemUoXG4gICR3aWR0aCxcbiAgJGhlaWdodDogJHdpZHRoLFxuICAkcGFkZGluZzogbWF0aC5kaXYobWF0aC5tYXgoJHdpZHRoLCAkaGVpZ2h0KSwgMiksXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgd2lkdGg6ICR3aWR0aCArICRwYWRkaW5nICogMjtcbiAgICBoZWlnaHQ6ICRoZWlnaHQgKyAkcGFkZGluZyAqIDI7XG4gICAgcGFkZGluZzogJHBhZGRpbmc7XG4gICAgZm9udC1zaXplOiBtYXRoLm1heCgkd2lkdGgsICRoZWlnaHQpO1xuICB9XG5cbiAgLy8gc3R5bGVsaW50LWRpc2FibGUtbmV4dC1saW5lIHNlbGVjdG9yLW1heC10eXBlXG4gIHN2ZyxcbiAgaW1nIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgd2lkdGg6ICR3aWR0aDtcbiAgICAgIGhlaWdodDogJGhlaWdodDtcbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgZm9udCBjb2xvciBhbmQgdGhlIHJpcHBsZSBjb2xvciB0byB0aGUgcHJvdmlkZWQgY29sb3IgdmFsdWUuXG4vLy8gQHBhcmFtIHtDb2xvcn0gJGNvbG9yIC0gVGhlIGRlc2lyZWQgZm9udCBhbmQgcmlwcGxlIGNvbG9yLlxuLy8vXG5AbWl4aW4gaW5rLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpbmstY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzKFxuICAgICRjb2xvcixcbiAgICAkcXVlcnk6ICRxdWVyeSxcbiAgICAkcmlwcGxlLXRhcmdldDogJHJpcHBsZS10YXJnZXRcbiAgKTtcbn1cblxuLy8vXG4vLy8gRmxpcHMgaWNvbiBvbmx5IGluIFJUTCBjb250ZXh0LlxuLy8vXG5AbWl4aW4gZmxpcC1pY29uLWluLXJ0bCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLm1kYy1idXR0b25fX2ljb24ge1xuICAgIEBpbmNsdWRlIHJ0bC5ydGwge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgLyogQG5vZmxpcCAqL1xuICAgICAgICB0cmFuc2Zvcm06IHJvdGF0ZSgxODBkZWcpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSBmb250IGNvbG9yIHRvIHRoZSBwcm92aWRlZCBjb2xvciB2YWx1ZSBmb3IgYSBkaXNhYmxlZCBpY29uIGJ1dHRvbi5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBmb250IGNvbG9yLlxuLy8vXG5AbWl4aW4gZGlzYWJsZWQtaW5rLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1kaXNhYmxlZF8ge1xuICAgIEBpbmNsdWRlIGluay1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gSW5jbHVkZXMgYWQtaG9jIGhpZ2ggY29udHJhc3QgbW9kZSBzdXBwb3J0LlxuLy8vXG5AbWl4aW4gaGlnaC1jb250cmFzdC1tb2RlLXNoaW0oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgLy8gVE9ETyhiLzE3NTgwNjg3NCk6IFVzZSB0aGUgRE9NIGJvcmRlciBtaXhpbiBhZnRlciB0aGUgcmlwcGxlIGlzIG1vdmVkXG4gICAgLy8gYXdheSBmcm9tIDpiZWZvcmUgdG8gYSBkZWRpY2F0ZWQgZWxlbWVudC5cbiAgICBvdXRsaW5lOiBzb2xpZCAzcHggdHJhbnNwYXJlbnQ7XG5cbiAgICAmOmZvY3VzIHtcbiAgICAgIG91dGxpbmU6IGRvdWJsZSA1cHggdHJhbnNwYXJlbnQ7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBiYXNlXygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gICAgcG9zaXRpb246IHJlbGF0aXZlO1xuICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgYm9yZGVyOiBub25lO1xuICAgIG91dGxpbmU6IG5vbmU7XG4gICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgZmlsbDogY3VycmVudENvbG9yO1xuICAgIGNvbG9yOiBpbmhlcml0O1xuICAgIGZvbnQtc2l6ZTogdmFyaWFibGVzLiRpY29uLXNpemU7XG4gICAgdGV4dC1kZWNvcmF0aW9uOiBub25lO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgICB1c2VyLXNlbGVjdDogbm9uZTtcbiAgfVxuXG4gIC8vIHN0eWxlbGludC1kaXNhYmxlLW5leHQtbGluZSBzZWxlY3Rvci1tYXgtdHlwZVxuICBzdmcsXG4gIGltZyB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIHdpZHRoOiB2YXJpYWJsZXMuJGljb24tc2l6ZTtcbiAgICAgIGhlaWdodDogdmFyaWFibGVzLiRpY29uLXNpemU7XG4gICAgfVxuICB9XG5cbiAgQGluY2x1ZGUgZGlzYWJsZWQtaW5rLWNvbG9yKHRleHQtZGlzYWJsZWQtb24tbGlnaHQsICRxdWVyeTogJHF1ZXJ5KTtcblxuICBAaW5jbHVkZSBpZi1kaXNhYmxlZF8ge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgZm9udCBjb2xvciB0byB0aGUgcHJvdmlkZWQgY29sb3IgdmFsdWUuIFRoaXMgY2FuIGJlIHdyYXBwZWQgaW5cbi8vLyBhIHN0YXRlIHF1YWxpZmllciBzdWNoIGFzIGBtZGMtaWNvbi1idXR0b24taWYtZGlzYWJsZWRfYC5cbi8vLyBAYWNjZXNzIHByaXZhdGVcbi8vL1xuQG1peGluIGluay1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShjb2xvciwgJGNvbG9yKTtcbiAgfVxufVxuXG4vLy9cbi8vLyBIZWxwcyBzdHlsZSB0aGUgaWNvbiBidXR0b24gaW4gaXRzIGRpc2FibGVkIHN0YXRlLlxuLy8vIEBhY2Nlc3MgcHJpdmF0ZVxuLy8vXG5AbWl4aW4gaWYtZGlzYWJsZWRfIHtcbiAgJjpkaXNhYmxlZCB7XG4gICAgQGNvbnRlbnQ7XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxOCBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG5AdXNlICdAbWF0ZXJpYWwvZGVuc2l0eS92YXJpYWJsZXMnO1xuXG4kaWNvbi1zaXplOiAyNHB4ICFkZWZhdWx0O1xuXG4kc2l6ZTogNDhweCAhZGVmYXVsdDtcbiRtaW5pbXVtLWhlaWdodDogMjhweCAhZGVmYXVsdDtcbiRtYXhpbXVtLWhlaWdodDogJHNpemUgIWRlZmF1bHQ7XG4kZGVuc2l0eS1zY2FsZTogdmFyaWFibGVzLiRkZWZhdWx0LXNjYWxlICFkZWZhdWx0O1xuJGRlbnNpdHktY29uZmlnOiAoXG4gIHNpemU6IChcbiAgICBkZWZhdWx0OiAkc2l6ZSxcbiAgICBtYXhpbXVtOiAkbWF4aW11bS1oZWlnaHQsXG4gICAgbWluaW11bTogJG1pbmltdW0taGVpZ2h0LFxuICApLFxuKSAhZGVmYXVsdDtcbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm4gLS1cbi8vIFRPRE86IGRvY3VtZW50IHdoeSB0aGlzIGRpc2FibGUgaXMgbmVjY2Vzc2FyeVxuXG5AdXNlICdzYXNzOm1hdGgnO1xuQHVzZSAnc2FzczpsaXN0JztcbkB1c2UgJ3Nhc3M6bWV0YSc7XG5AdXNlICdAbWF0ZXJpYWwvYW5pbWF0aW9uL2FuaW1hdGlvbic7XG5AdXNlICdAbWF0ZXJpYWwvZGVuc2l0eS9mdW5jdGlvbnMnIGFzIGRlbnNpdHktZnVuY3Rpb25zO1xuQHVzZSAnQG1hdGVyaWFsL2RvbS9kb20nO1xuQHVzZSAnQG1hdGVyaWFsL2Zsb2F0aW5nLWxhYmVsL21peGlucycgYXMgZmxvYXRpbmctbGFiZWwtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL2Zsb2F0aW5nLWxhYmVsL3ZhcmlhYmxlcycgYXMgZmxvYXRpbmctbGFiZWwtdmFyaWFibGVzO1xuQHVzZSAnQG1hdGVyaWFsL2xpbmUtcmlwcGxlL21peGlucycgYXMgbGluZS1yaXBwbGUtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL25vdGNoZWQtb3V0bGluZS9taXhpbnMnIGFzIG5vdGNoZWQtb3V0bGluZS1taXhpbnM7XG5AdXNlICdAbWF0ZXJpYWwvbm90Y2hlZC1vdXRsaW5lL3ZhcmlhYmxlcycgYXMgbm90Y2hlZC1vdXRsaW5lLXZhcmlhYmxlcztcbkB1c2UgJ0BtYXRlcmlhbC9yaXBwbGUvcmlwcGxlJztcbkB1c2UgJ0BtYXRlcmlhbC9yaXBwbGUvcmlwcGxlLXRoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS9jdXN0b20tcHJvcGVydGllcyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUnO1xuQHVzZSAnQG1hdGVyaWFsL3NoYXBlL21peGlucycgYXMgc2hhcGUtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL3NoYXBlL2Z1bmN0aW9ucycgYXMgc2hhcGUtZnVuY3Rpb25zO1xuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJ0BtYXRlcmlhbC90eXBvZ3JhcGh5L3R5cG9ncmFwaHknO1xuQHVzZSAnaGVscGVyLXRleHQvbWl4aW5zJyBhcyBoZWxwZXItdGV4dC1taXhpbnM7XG5AdXNlICdjaGFyYWN0ZXItY291bnRlci9taXhpbnMnIGFzIGNoYXJhY3Rlci1jb3VudGVyLW1peGlucztcbkB1c2UgJ2ljb24vbWl4aW5zJyBhcyBpY29uLW1peGlucztcbkB1c2UgJ2ljb24vdmFyaWFibGVzJyBhcyBpY29uLXZhcmlhYmxlcztcbkB1c2UgJy4vdmFyaWFibGVzJztcbkB1c2UgJ0BtYXRlcmlhbC9ydGwvbWl4aW5zJyBhcyBydGwtbWl4aW5zO1xuXG5AbWl4aW4gY29yZS1zdHlsZXMoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSByaXBwbGUoJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgd2l0aG91dC1yaXBwbGUoJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgaGVscGVyLXRleHQtbWl4aW5zLmhlbHBlci10ZXh0LWNvcmUtc3R5bGVzKCRxdWVyeSk7XG4gIEBpbmNsdWRlIGNoYXJhY3Rlci1jb3VudGVyLW1peGlucy5jaGFyYWN0ZXItY291bnRlci1jb3JlLXN0eWxlcygkcXVlcnkpO1xuICBAaW5jbHVkZSBpY29uLW1peGlucy5pY29uLWNvcmUtc3R5bGVzKCRxdWVyeSk7XG59XG5cbkBtaXhpbiB3aXRob3V0LXJpcHBsZSgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLy8gQmFzZWxpbmVcbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBkZWZpbmUgdGV4dC1maWVsZFxuICAubWRjLXRleHQtZmllbGQge1xuICAgIEBpbmNsdWRlIF9iYXNlKCRxdWVyeSk7XG4gIH1cblxuICAubWRjLXRleHQtZmllbGRfX2lucHV0IHtcbiAgICBAaW5jbHVkZSBfaW5wdXQoJHF1ZXJ5KTtcblxuICAgIEBpbmNsdWRlIHBsYWNlaG9sZGVyLXNlbGVjdG9yXyB7XG4gICAgICBAaW5jbHVkZSBfaW5wdXQtcGxhY2Vob2xkZXIoJHF1ZXJ5KTtcbiAgICB9XG5cbiAgICAvLyBBbHdheXMgc2hvdyBwbGFjZWhvbGRlciBmb3IgdGV4dCBmaWVsZHMgdGhhdCBoYXMgbm9cbiAgICAvLyBsYWJlbCBhbmQgc2hvdyBvbmx5IG9uIGZvY3VzZWQgc3RhdGUgd2hlbiBsYWJlbCBpcyBwcmVzZW50LlxuICAgIC5tZGMtdGV4dC1maWVsZC0tbm8tbGFiZWwgJixcbiAgICAubWRjLXRleHQtZmllbGQtLWZvY3VzZWQgJiB7XG4gICAgICBAaW5jbHVkZSBwbGFjZWhvbGRlci1zZWxlY3Rvcl8ge1xuICAgICAgICBAaW5jbHVkZSBfaW5wdXQtcGxhY2Vob2xkZXItdmlzaWJsZSgkcXVlcnkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tZGMtdGV4dC1maWVsZF9fYWZmaXgge1xuICAgIEBpbmNsdWRlIF9hZmZpeCgkcXVlcnk6ICRxdWVyeSk7XG5cbiAgICAubWRjLXRleHQtZmllbGQtLWxhYmVsLWZsb2F0aW5nICYsXG4gICAgLm1kYy10ZXh0LWZpZWxkLS1uby1sYWJlbCAmIHtcbiAgICAgIEBpbmNsdWRlIF9hZmZpeC12aXNpYmxlKCRxdWVyeTogJHF1ZXJ5KTtcbiAgICB9XG5cbiAgICAvLyBTYWZhcmkgb25seVxuICAgIEBzdXBwb3J0cyAoLXdlYmtpdC1oeXBoZW5zOiBub25lKSB7XG4gICAgICAubWRjLXRleHQtZmllbGQtLW91dGxpbmVkICYge1xuICAgICAgICBAaW5jbHVkZSBfY2VudGVyZWQtYWZmaXgtc2FmYXJpLXN1cHBvcnQoJHF1ZXJ5OiAkcXVlcnkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIC5tZGMtdGV4dC1maWVsZF9fYWZmaXgtLXByZWZpeCB7XG4gICAgQGluY2x1ZGUgX3ByZWZpeCgkcXVlcnk6ICRxdWVyeSk7XG5cbiAgICAubWRjLXRleHQtZmllbGQtLWVuZC1hbGlnbmVkICYge1xuICAgICAgQGluY2x1ZGUgX3ByZWZpeC1lbmQtYWxpZ25lZCgkcXVlcnk6ICRxdWVyeSk7XG4gICAgfVxuICB9XG5cbiAgLm1kYy10ZXh0LWZpZWxkX19hZmZpeC0tc3VmZml4IHtcbiAgICBAaW5jbHVkZSBfc3VmZml4KCRxdWVyeTogJHF1ZXJ5KTtcblxuICAgIC5tZGMtdGV4dC1maWVsZC0tZW5kLWFsaWduZWQgJiB7XG4gICAgICBAaW5jbHVkZSBfc3VmZml4LWVuZC1hbGlnbmVkKCRxdWVyeTogJHF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICAvLyBWYXJpYW50c1xuXG4gIC5tZGMtdGV4dC1maWVsZC0tZmlsbGVkIHtcbiAgICBAaW5jbHVkZSBfZmlsbGVkKCRxdWVyeSk7XG5cbiAgICAmLm1kYy10ZXh0LWZpZWxkLS1uby1sYWJlbCB7XG4gICAgICBAaW5jbHVkZSBfZmlsbGVkLW5vLWxhYmVsKCRxdWVyeSk7XG4gICAgfVxuICB9XG5cbiAgLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCB7XG4gICAgQGluY2x1ZGUgb3V0bGluZWRfKCRxdWVyeSk7XG5cbiAgICAubWRjLW5vdGNoZWQtb3V0bGluZSB7XG4gICAgICBAaW5jbHVkZSBfb3V0bGluZWQtbm90Y2hlZC1vdXRsaW5lKCRxdWVyeSk7XG4gICAgfVxuICB9XG5cbiAgLy8gT3RoZXIgVmFyaWF0aW9uc1xuXG4gIC5tZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEge1xuICAgIEBpbmNsdWRlIHRleHRhcmVhXygkcXVlcnkpO1xuXG4gICAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCB7XG4gICAgICBAaW5jbHVkZSBfdGV4dGFyZWEtaW5wdXQoJHF1ZXJ5KTtcbiAgICB9XG5cbiAgICAmLm1kYy10ZXh0LWZpZWxkLS1maWxsZWQge1xuICAgICAgQGluY2x1ZGUgX3RleHRhcmVhLWZpbGxlZCgkcXVlcnkpO1xuXG4gICAgICAubWRjLXRleHQtZmllbGRfX2lucHV0IHtcbiAgICAgICAgQGluY2x1ZGUgX3RleHRhcmVhLWZpbGxlZC1pbnB1dCgkcXVlcnkpO1xuICAgICAgfVxuXG4gICAgICAmLm1kYy10ZXh0LWZpZWxkLS1uby1sYWJlbCB7XG4gICAgICAgIC5tZGMtdGV4dC1maWVsZF9faW5wdXQge1xuICAgICAgICAgIEBpbmNsdWRlIF90ZXh0YXJlYS1maWxsZWQtbm8tbGFiZWwtaW5wdXQoJHF1ZXJ5KTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICYubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIHtcbiAgICAgIEBpbmNsdWRlIF90ZXh0YXJlYS1vdXRsaW5lZCgkcXVlcnkpO1xuXG4gICAgICAubWRjLXRleHQtZmllbGRfX2lucHV0IHtcbiAgICAgICAgQGluY2x1ZGUgX3RleHRhcmVhLW91dGxpbmVkLWlucHV0KCRxdWVyeSk7XG4gICAgICB9XG5cbiAgICAgIC5tZGMtZmxvYXRpbmctbGFiZWwge1xuICAgICAgICBAaW5jbHVkZSBfdGV4dGFyZWEtb3V0bGluZWQtZmxvYXRpbmctbGFiZWwoJHF1ZXJ5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm1kYy10ZXh0LWZpZWxkLS13aXRoLWludGVybmFsLWNvdW50ZXIge1xuICAgICAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCB7XG4gICAgICAgIEBpbmNsdWRlIF90ZXh0YXJlYS1pbnB1dC13aXRoLWludGVybmFsLWNvdW50ZXIoJHF1ZXJ5KTtcbiAgICAgIH1cblxuICAgICAgLm1kYy10ZXh0LWZpZWxkLWNoYXJhY3Rlci1jb3VudGVyIHtcbiAgICAgICAgQGluY2x1ZGUgX3RleHRhcmVhLWludGVybmFsLWNvdW50ZXIoJHF1ZXJ5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAvLyBSZXNpemVyIGVsZW1lbnQgZG9lcyBub3QgbmVlZCB0byBiZSB1bmRlciBtZGMtdGV4dC1maWVsZC0tdGV4dGFyZWEsIHRoYXRcbiAgLy8ganVzdCBhZGRzIHNwZWNpZmljaXR5XG4gIC5tZGMtdGV4dC1maWVsZF9fcmVzaXplciB7XG4gICAgQGluY2x1ZGUgX3RleHRhcmVhLXJlc2l6ZXIoJHF1ZXJ5KTtcblxuICAgIC5tZGMtdGV4dC1maWVsZC0tZmlsbGVkICYge1xuICAgICAgQGluY2x1ZGUgX3RleHRhcmVhLWZpbGxlZC1yZXNpemVyKCRxdWVyeSk7XG5cbiAgICAgIC5tZGMtdGV4dC1maWVsZF9faW5wdXQsXG4gICAgICAubWRjLXRleHQtZmllbGQtY2hhcmFjdGVyLWNvdW50ZXIge1xuICAgICAgICBAaW5jbHVkZSBfdGV4dGFyZWEtZmlsbGVkLXJlc2l6ZXItY2hpbGRyZW4oJHF1ZXJ5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAubWRjLXRleHQtZmllbGQtLW91dGxpbmVkICYge1xuICAgICAgQGluY2x1ZGUgX3RleHRhcmVhLW91dGxpbmVkLXJlc2l6ZXIoJHF1ZXJ5KTtcblxuICAgICAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCxcbiAgICAgIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlciB7XG4gICAgICAgIEBpbmNsdWRlIF90ZXh0YXJlYS1vdXRsaW5lZC1yZXNpemVyLWNoaWxkcmVuKCRxdWVyeSk7XG4gICAgICB9XG4gICAgfVxuICB9XG5cbiAgLm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbiB7XG4gICAgQGluY2x1ZGUgX3BhZGRpbmctaG9yaXpvbnRhbC13aXRoLWxlYWRpbmctaWNvbigkcXVlcnkpO1xuXG4gICAgJi5tZGMtdGV4dC1maWVsZC0tZmlsbGVkIHtcbiAgICAgIEBpbmNsdWRlIHdpdGgtbGVhZGluZy1pY29uXygkcXVlcnkpO1xuICAgIH1cblxuICAgICYubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIHtcbiAgICAgIEBpbmNsdWRlIG91dGxpbmVkLXdpdGgtbGVhZGluZy1pY29uXygkcXVlcnkpO1xuICAgIH1cbiAgfVxuXG4gIC5tZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29uIHtcbiAgICBAaW5jbHVkZSBfcGFkZGluZy1ob3Jpem9udGFsLXdpdGgtdHJhaWxpbmctaWNvbigkcXVlcnkpO1xuXG4gICAgJi5tZGMtdGV4dC1maWVsZC0tZmlsbGVkIHtcbiAgICAgIEBpbmNsdWRlIF93aXRoLXRyYWlsaW5nLWljb24oJHF1ZXJ5KTtcbiAgICB9XG5cbiAgICAmLm1kYy10ZXh0LWZpZWxkLS1vdXRsaW5lZCB7XG4gICAgICBAaW5jbHVkZSBfb3V0bGluZWQtd2l0aC10cmFpbGluZy1pY29uKCRxdWVyeSk7XG4gICAgfVxuICB9XG5cbiAgLm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbi5tZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29uIHtcbiAgICBAaW5jbHVkZSBfcGFkZGluZy1ob3Jpem9udGFsLXdpdGgtYm90aC1pY29ucygkcXVlcnkpO1xuXG4gICAgJi5tZGMtdGV4dC1maWVsZC0tZmlsbGVkIHtcbiAgICAgIEBpbmNsdWRlIF93aXRoLWxlYWRpbmctYW5kLXRyYWlsaW5nLWljb24oJHF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGRlZmluZSB0ZXh0LWZpZWxkLWhlbHBlci10ZXh0XG4gIC8vIHN0eWxlbGludC1kaXNhYmxlIHBsdWdpbi9zZWxlY3Rvci1iZW0tcGF0dGVybiAtLVxuICAvLyBUT0RPOiBkb2N1bWVudCB3aHkgdGhpcyBkaXNhYmxlIGlzIG5lY2Nlc3NhcnlcbiAgLm1kYy10ZXh0LWZpZWxkLWhlbHBlci1saW5lIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgZGlzcGxheTogZmxleDtcbiAgICAgIGp1c3RpZnktY29udGVudDogc3BhY2UtYmV0d2VlbjtcbiAgICAgIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG4gICAgfVxuXG4gICAgLm1kYy10ZXh0LWZpZWxkICsgJiB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBwYWRkaW5nLXJpZ2h0OiB2YXJpYWJsZXMuJGhlbHBlci1saW5lLXBhZGRpbmc7XG4gICAgICAgIHBhZGRpbmctbGVmdDogdmFyaWFibGVzLiRoZWxwZXItbGluZS1wYWRkaW5nO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICAvLyBzdHlsZWxpbnQtZW5hYmxlIHBsdWdpbi9zZWxlY3Rvci1iZW0tcGF0dGVyblxuICAvLyBwb3N0Y3NzLWJlbS1saW50ZXI6IGVuZFxuXG4gIC8vIG1kYy1mb3JtLWZpZWxkIHR3ZWFrcyB0byBhbGlnbiB0ZXh0IGZpZWxkIGxhYmVsIGNvcnJlY3RseVxuICAvLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1tYXgtdHlwZSAtLVxuICAvLyBUT0RPOiBkb2N1bWVudCB3aHkgdGhpcyBkaXNhYmxlIGlzIG5lY2Nlc3NhcnlcbiAgLm1kYy1mb3JtLWZpZWxkID4gLm1kYy10ZXh0LWZpZWxkICsgbGFiZWwge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBhbGlnbi1zZWxmOiBmbGV4LXN0YXJ0O1xuICAgIH1cbiAgfVxuICAvLyBzdHlsZWxpbnQtZW5hYmxlIHNlbGVjdG9yLW1heC10eXBlXG5cbiAgLy8gU3RhdGVzXG4gIC5tZGMtdGV4dC1maWVsZC0tZm9jdXNlZCB7XG4gICAgQGluY2x1ZGUgZm9jdXNlZF8oJHF1ZXJ5KTtcblxuICAgICYubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIHtcbiAgICAgIEBpbmNsdWRlIF9mb2N1c2VkLW91dGxpbmVkKCRxdWVyeSk7XG5cbiAgICAgICYubWRjLXRleHQtZmllbGQtLXRleHRhcmVhIHtcbiAgICAgICAgQGluY2x1ZGUgX2ZvY3VzZWQtb3V0bGluZWQtdGV4dGFyZWEoJHF1ZXJ5KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cblxuICAubWRjLXRleHQtZmllbGQtLWludmFsaWQge1xuICAgIEBpbmNsdWRlIGludmFsaWRfKCRxdWVyeSk7XG4gIH1cblxuICAubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIHtcbiAgICBAaW5jbHVkZSBkaXNhYmxlZF8oJHF1ZXJ5KTtcblxuICAgICYubWRjLXRleHQtZmllbGQtLWZpbGxlZCB7XG4gICAgICBAaW5jbHVkZSBfZGlzYWJsZWQtZmlsbGVkKCRxdWVyeSk7XG4gICAgfVxuXG4gICAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCB7XG4gICAgICBAaW5jbHVkZSBfZGlzYWJsZWQtaW5wdXQoJHF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICAubWRjLXRleHQtZmllbGQtLWVuZC1hbGlnbmVkIHtcbiAgICBAaW5jbHVkZSBlbmQtYWxpZ25lZF8oJHF1ZXJ5KTtcbiAgfVxuXG4gIC5tZGMtdGV4dC1maWVsZC0tbHRyLXRleHQge1xuICAgIEBpbmNsdWRlIF9sdHItdGV4dCgkcXVlcnkpO1xuXG4gICAgJi5tZGMtdGV4dC1maWVsZC0tZW5kLWFsaWduZWQge1xuICAgICAgQGluY2x1ZGUgX2x0ci10ZXh0LWVuZC1hbGlnbmVkKCRxdWVyeSk7XG4gICAgfVxuICB9XG59XG5cbi8vIFRoaXMgQVBJIGlzIGludGVuZGVkIGZvciB1c2UgYnkgZnJhbWV3b3JrcyB0aGF0IG1heSB3YW50IHRvIHNlcGFyYXRlIHRoZSByaXBwbGUtcmVsYXRlZCBzdHlsZXNcbi8vIGZyb20gdGhlIG90aGVyIHRleHQgZmllbGQgc3R5bGVzLiBJdCBpcyByZWNvbW1lbmRlZCB0aGF0IG1vc3QgdXNlcnMgdXNlIGBtZGMtdGV4dC1maWVsZC1jb3JlLXN0eWxlc2AgaW5zdGVhZC5cbkBtaXhpbiByaXBwbGUoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSByaXBwbGUuY29tbW9uKCRxdWVyeSk7IC8vIENPUFlCQVJBX0NPTU1FTlRfVEhJU19MSU5FXG5cbiAgLm1kYy10ZXh0LWZpZWxkLS1maWxsZWQge1xuICAgIEBpbmNsdWRlIHJpcHBsZS5zdXJmYWNlKFxuICAgICAgJHF1ZXJ5OiAkcXVlcnksXG4gICAgICAkcmlwcGxlLXRhcmdldDogdmFyaWFibGVzLiRyaXBwbGUtdGFyZ2V0XG4gICAgKTtcbiAgICBAaW5jbHVkZSByaXBwbGUucmFkaXVzLWJvdW5kZWQoXG4gICAgICAkcXVlcnk6ICRxdWVyeSxcbiAgICAgICRyaXBwbGUtdGFyZ2V0OiB2YXJpYWJsZXMuJHJpcHBsZS10YXJnZXRcbiAgICApO1xuICB9XG5cbiAgI3t2YXJpYWJsZXMuJHJpcHBsZS10YXJnZXR9IHtcbiAgICBAaW5jbHVkZSByaXBwbGUudGFyZ2V0LWNvbW1vbigkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyBkZW5zaXR5IHNjYWxlIGZvciBkZWZhdWx0IHRleHQgZmllbGQgdmFyaWFudC5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyIHwgU3RyaW5nfSAkZGVuc2l0eS1zY2FsZSAtIERlbnNpdHkgc2NhbGUgdmFsdWUgZm9yIGNvbXBvbmVudC4gU3VwcG9ydGVkIGRlbnNpdHkgc2NhbGUgdmFsdWVzIGAtNGAsXG4vLy8gICAgIGAtM2AsIGAtMmAsIGAtMWAsIGAwYC4gRGVmYXVsdCBpcyBgMGAuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRtaW5pbXVtLWhlaWdodC1mb3ItZmlsbGVkLWxhYmVsIFNldHMgdGhlIG1pbmltdW0gaGVpZ2h0IGZvclxuLy8vICAgICBmaWxsZWQgdGV4dGZpZWxkcyBhdCB3aGljaCB0byBhbGxvdyBmbG9hdGluZyBsYWJlbHMuXG4vLy9cbkBtaXhpbiBkZW5zaXR5KFxuICAkZGVuc2l0eS1zY2FsZSxcbiAgJG1pbmltdW0taGVpZ2h0LWZvci1maWxsZWQtbGFiZWw6IHZhcmlhYmxlcy4kbWluaW11bS1oZWlnaHQtZm9yLWZpbGxlZC1sYWJlbCxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRoZWlnaHQ6IGRlbnNpdHktZnVuY3Rpb25zLnByb3AtdmFsdWUoXG4gICAgJGRlbnNpdHktY29uZmlnOiB2YXJpYWJsZXMuJGRlbnNpdHktY29uZmlnLFxuICAgICRkZW5zaXR5LXNjYWxlOiAkZGVuc2l0eS1zY2FsZSxcbiAgICAkcHJvcGVydHktbmFtZTogaGVpZ2h0LFxuICApO1xuXG4gIEBpbmNsdWRlIGhlaWdodChcbiAgICAkaGVpZ2h0LFxuICAgICRtaW5pbXVtLWhlaWdodC1mb3ItZmlsbGVkLWxhYmVsOiAkbWluaW11bS1oZWlnaHQtZm9yLWZpbGxlZC1sYWJlbCxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xuICAvLyBUT0RPKGIvMTUxODM5MjE5KTogcmVzaXplIGljb25zIGFuZCBhZGp1c3QgbGFiZWwgcG9zaXRpb25cbiAgLy8gQGlmICRkZW5zaXR5LXNjYWxlIDwgMCB7XG4gIC8vICAgQGluY2x1ZGUgaWNvbi1taXhpbnMuc2l6ZShpY29uLXZhcmlhYmxlcy4kZGVuc2UtaWNvbi1zaXplKTtcbiAgLy8gfVxufVxuXG4vLy9cbi8vLyBTZXRzIGRlbnNpdHkgc2NhbGUgZm9yIG91dGxpbmVkIHRleHQgZmllbGQgKEV4Y2x1ZGluZyBvdXRsaW5lZCB0ZXh0IGZpZWxkIHdpdGggbGVhZGluZyBpY29uKS5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyIHwgU3RyaW5nfSAkZGVuc2l0eS1zY2FsZSAtIERlbnNpdHkgc2NhbGUgdmFsdWUgZm9yIGNvbXBvbmVudC4gU3VwcG9ydGVkIGRlbnNpdHkgc2NhbGUgdmFsdWVzIGAtNGAsXG4vLy8gICAgIGAtM2AsIGAtMmAsIGAtMWAsIGAwYC4gRGVmYXVsdCBpcyBgMGAuXG4vLy9cbkBtaXhpbiBvdXRsaW5lZC1kZW5zaXR5KCRkZW5zaXR5LXNjYWxlLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRoZWlnaHQ6IGRlbnNpdHktZnVuY3Rpb25zLnByb3AtdmFsdWUoXG4gICAgJGRlbnNpdHktY29uZmlnOiB2YXJpYWJsZXMuJGRlbnNpdHktY29uZmlnLFxuICAgICRkZW5zaXR5LXNjYWxlOiAkZGVuc2l0eS1zY2FsZSxcbiAgICAkcHJvcGVydHktbmFtZTogaGVpZ2h0LFxuICApO1xuXG4gIEBpbmNsdWRlIG91dGxpbmVkLWhlaWdodCgkaGVpZ2h0LCAkcXVlcnk6ICRxdWVyeSk7XG4gIC8vIFRPRE8oYi8xNTE4MzkyMTkpOiByZXNpemUgaWNvbnMgYW5kIGFkanVzdCBsYWJlbCBwb3NpdGlvblxuICAvLyBAaWYgJGRlbnNpdHktc2NhbGUgPCAwIHtcbiAgLy8gICBAaW5jbHVkZSBpY29uLW1peGlucy5zaXplKGljb24tdmFyaWFibGVzLiRkZW5zZS1pY29uLXNpemUpO1xuICAvLyB9XG59XG5cbi8vL1xuLy8vIFNldHMgZGVuc2l0eSBzY2FsZSBmb3Igb3V0bGluZWQgdGV4dCBmaWVsZCB3aXRoIGxlYWRpbmcgaWNvbi5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyIHwgU3RyaW5nfSAkZGVuc2l0eS1zY2FsZSAtIERlbnNpdHkgc2NhbGUgdmFsdWUgZm9yIGNvbXBvbmVudC4gU3VwcG9ydGVkIGRlbnNpdHkgc2NhbGUgdmFsdWVzIGAtNGAsXG4vLy8gICAgIGAtM2AsIGAtMmAsIGAtMWAsIGAwYC4gRGVmYXVsdCBpcyBgMGAuXG4vLy9cbkBtaXhpbiBvdXRsaW5lZC13aXRoLWxlYWRpbmctaWNvbi1kZW5zaXR5KFxuICAkZGVuc2l0eS1zY2FsZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRoZWlnaHQ6IGRlbnNpdHktZnVuY3Rpb25zLnByb3AtdmFsdWUoXG4gICAgJGRlbnNpdHktY29uZmlnOiB2YXJpYWJsZXMuJGRlbnNpdHktY29uZmlnLFxuICAgICRkZW5zaXR5LXNjYWxlOiAkZGVuc2l0eS1zY2FsZSxcbiAgICAkcHJvcGVydHktbmFtZTogaGVpZ2h0LFxuICApO1xuXG4gIEBpbmNsdWRlIG91dGxpbmVkLXdpdGgtbGVhZGluZy1pY29uLWhlaWdodCgkaGVpZ2h0LCAkcXVlcnk6ICRxdWVyeSk7XG4gIC8vIFRPRE8oYi8xNTE4MzkyMTkpOiByZXNpemUgaWNvbnMgYW5kIGFkanVzdCBsYWJlbCBwb3NpdGlvblxuICAvLyBAaWYgJGRlbnNpdHktc2NhbGUgPCAwIHtcbiAgLy8gICBAaW5jbHVkZSBpY29uLW1peGlucy5zaXplKGljb24tdmFyaWFibGVzLiRkZW5zZS1pY29uLXNpemUpO1xuICAvLyB9XG59XG5cbi8vL1xuLy8vIFNldHMgZGVuc2l0eSBzY2FsZSBmb3IgZmlsbGVkIHRleHRhcmVhLlxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXIgfCBTdHJpbmd9ICRkZW5zaXR5LXNjYWxlIC0gRGVuc2l0eSBzY2FsZSB2YWx1ZSBmb3IgY29tcG9uZW50LiBTdXBwb3J0ZWQgZGVuc2l0eSBzY2FsZSB2YWx1ZXMgYC00YCxcbi8vLyAgICAgYC0zYCwgYC0yYCwgYC0xYCwgYDBgLiBEZWZhdWx0IGlzIGAwYC5cbi8vL1xuQG1peGluIGZpbGxlZC10ZXh0YXJlYS1kZW5zaXR5KFxuICAkZGVuc2l0eS1zY2FsZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gICR0ZXh0ZmllbGQtaGVpZ2h0OiBkZW5zaXR5LWZ1bmN0aW9ucy5wcm9wLXZhbHVlKFxuICAgICRkZW5zaXR5LWNvbmZpZzogdmFyaWFibGVzLiRkZW5zaXR5LWNvbmZpZyxcbiAgICAkZGVuc2l0eS1zY2FsZTogJGRlbnNpdHktc2NhbGUsXG4gICAgJHByb3BlcnR5LW5hbWU6IGhlaWdodCxcbiAgKTtcbiAgJG5vLWxhYmVsLW1hcmdpbi10b3A6IGRlbnNpdHktZnVuY3Rpb25zLnByb3AtdmFsdWUoXG4gICAgJGRlbnNpdHktY29uZmlnOiB2YXJpYWJsZXMuJHRleHRhcmVhLWZpbGxlZC1uby1sYWJlbC1kZW5zaXR5LWNvbmZpZyxcbiAgICAkZGVuc2l0eS1zY2FsZTogbWF0aC5kaXYoJGRlbnNpdHktc2NhbGUsIDIpLFxuICAgICRwcm9wZXJ0eS1uYW1lOiBtYXJnaW4tdG9wLFxuICApO1xuICAkbm8tbGFiZWwtbWFyZ2luLWJvdHRvbTogZGVuc2l0eS1mdW5jdGlvbnMucHJvcC12YWx1ZShcbiAgICAkZGVuc2l0eS1jb25maWc6IHZhcmlhYmxlcy4kdGV4dGFyZWEtZmlsbGVkLW5vLWxhYmVsLWRlbnNpdHktY29uZmlnLFxuICAgICRkZW5zaXR5LXNjYWxlOiBtYXRoLmRpdigkZGVuc2l0eS1zY2FsZSwgMiksXG4gICAgJHByb3BlcnR5LW5hbWU6IG1hcmdpbi1ib3R0b20sXG4gICk7XG5cbiAgLy8gVGV4dGFyZWEgbWl4aW5zIHJlcXVpcmUgdHdvIG1vZGlmaWVyIGNsYXNzZXMgc2luY2UgdHdvIGFyZSB1c2VkIGludGVybmFsbHlcbiAgLy8gZm9yIHN0eWxlcyAodGV4dGFyZWEgYW5kIGZpbGxlZCkuIEFuIGV4dHJhIGNsYXNzIGlzIGFkZGVkIGZvciB0aGUgcHVibGljXG4gIC8vIG1peGluIHNvIHRoYXQgb25seSBhIHNpbmdsZSBwdWJsaWMgY2xhc3MgaXMgbmVlZGVkIGZvciBzcGVjaWZpY2l0eS5cbiAgJi5tZGMtdGV4dC1maWVsZC0tZmlsbGVkIHtcbiAgICAubWRjLXRleHQtZmllbGRfX3Jlc2l6ZXIge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgbWluLWhlaWdodDogJHRleHRmaWVsZC1oZWlnaHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgQGlmICRkZW5zaXR5LXNjYWxlID49IC0xIHtcbiAgICAgICRrZXlmcmFtZS1zdWZmaXg6IHRleHQtZmllbGQtZmlsbGVkLSN7JGRlbnNpdHktc2NhbGV9O1xuICAgICAgJGxhYmVsLXRvcDogZGVuc2l0eS1mdW5jdGlvbnMucHJvcC12YWx1ZShcbiAgICAgICAgJGRlbnNpdHktY29uZmlnOiB2YXJpYWJsZXMuJHRleHRhcmVhLWZpbGxlZC1sYWJlbC1kZW5zaXR5LWNvbmZpZyxcbiAgICAgICAgJGRlbnNpdHktc2NhbGU6IG1hdGguZGl2KCRkZW5zaXR5LXNjYWxlLCAyKSxcbiAgICAgICAgJHByb3BlcnR5LW5hbWU6IHRvcCxcbiAgICAgICk7XG5cbiAgICAgIC8vIEFkanVzdCB0aGUgZmxvYXRpbmcgcG9zaXRpb24gYW5kIGFuaW1hdGlvbi9rZXlmcmFtZXMgb2YgdGhlIGZsb2F0aW5nXG4gICAgICAvLyBsYWJlbCBieSB0aGUgbmV3IHBvc2l0aW9uIG9mIHRoZSByZXN0aW5nIGxhYmVsXG4gICAgICAkbGFiZWwtdG9wLWRpZmZlcmVuY2U6IHZhcmlhYmxlcy4kdGV4dGFyZWEtb3V0bGluZWQtbGFiZWwtdG9wIC1cbiAgICAgICAgJGxhYmVsLXRvcDtcblxuICAgICAgLy8gRmxvYXRpbmcgbGFiZWwgcG9zaXRpb25cbiAgICAgIEBpbmNsdWRlIGZsb2F0aW5nLWxhYmVsLW1peGlucy5mbG9hdC1wb3NpdGlvbihcbiAgICAgICAgdmFyaWFibGVzLiR0ZXh0YXJlYS1maWxsZWQtbGFiZWwtcG9zaXRpb24teSAtICRsYWJlbC10b3AtZGlmZmVyZW5jZSxcbiAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICk7XG5cbiAgICAgIC8vIEZsb2F0aW5nIGxhYmVsIGFuaW1hdGlvblxuICAgICAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWwtbWl4aW5zLnNoYWtlLWFuaW1hdGlvbihcbiAgICAgICAgJGtleWZyYW1lLXN1ZmZpeCxcbiAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICk7XG4gICAgICBAYXQtcm9vdCB7XG4gICAgICAgIEBpbmNsdWRlIGZsb2F0aW5nLWxhYmVsLW1peGlucy5zaGFrZS1rZXlmcmFtZXMoXG4gICAgICAgICAgJGtleWZyYW1lLXN1ZmZpeCxcbiAgICAgICAgICB2YXJpYWJsZXMuJHRleHRhcmVhLWZpbGxlZC1sYWJlbC1wb3NpdGlvbi15IC0gJGxhYmVsLXRvcC1kaWZmZXJlbmNlLFxuICAgICAgICAgIDAlLFxuICAgICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICAgICk7XG4gICAgICB9XG5cbiAgICAgIC8vIFJlc3RpbmcgbGFiZWwgcG9zaXRpb25cbiAgICAgIC5tZGMtZmxvYXRpbmctbGFiZWwge1xuICAgICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICAgIHRvcDogJGxhYmVsLXRvcDtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAkbWFyZ2luLWJvdHRvbTogZGVuc2l0eS1mdW5jdGlvbnMucHJvcC12YWx1ZShcbiAgICAgICAgJGRlbnNpdHktY29uZmlnOiB2YXJpYWJsZXMuJHRleHRhcmVhLWZpbGxlZC1kZW5zaXR5LWNvbmZpZyxcbiAgICAgICAgJGRlbnNpdHktc2NhbGU6ICRkZW5zaXR5LXNjYWxlLFxuICAgICAgICAkcHJvcGVydHktbmFtZTogbWFyZ2luLWJvdHRvbSxcbiAgICAgICk7XG5cbiAgICAgIC5tZGMtdGV4dC1maWVsZF9faW5wdXQge1xuICAgICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRtYXJnaW4tYm90dG9tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSBAZWxzZSB7XG4gICAgICAvLyBUaGUgdGV4dGFyZWEgaXMgdG9vIGRlbnNlIHRvIHNob3cgYSBmbG9hdGluZyBsYWJlbFxuICAgICAgLm1kYy1mbG9hdGluZy1sYWJlbCB7XG4gICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgICAgZGlzcGxheTogbm9uZTtcbiAgICAgICAgfVxuICAgICAgfVxuXG4gICAgICAubWRjLXRleHQtZmllbGRfX2lucHV0IHtcbiAgICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgICBtYXJnaW4tdG9wOiAkbm8tbGFiZWwtbWFyZ2luLXRvcDtcbiAgICAgICAgICBtYXJnaW4tYm90dG9tOiAkbm8tbGFiZWwtbWFyZ2luLWJvdHRvbTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cblxuICAgICYubWRjLXRleHQtZmllbGQtLW5vLWxhYmVsIHtcbiAgICAgIC5tZGMtdGV4dC1maWVsZF9faW5wdXQge1xuICAgICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICAgIG1hcmdpbi10b3A6ICRuby1sYWJlbC1tYXJnaW4tdG9wO1xuICAgICAgICAgIG1hcmdpbi1ib3R0b206ICRuby1sYWJlbC1tYXJnaW4tYm90dG9tO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgJi5tZGMtdGV4dC1maWVsZC0td2l0aC1pbnRlcm5hbC1jb3VudGVyIHtcbiAgICAgIC5tZGMtdGV4dC1maWVsZF9faW5wdXQge1xuICAgICAgICAvLyBTcGFjZSBiZXR3ZWVuIHRleHRhcmVhIGFuZCBpbnRlcm5hbCBjb3VudGVyIHNob3VsZCBub3QgYmUgYWZmZWN0ZWRcbiAgICAgICAgQGluY2x1ZGUgX3RleHRhcmVhLWlucHV0LXdpdGgtaW50ZXJuYWwtY291bnRlcigkcXVlcnkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIGRlbnNpdHkgc2NhbGUgZm9yIG91dGxpbmVkIHRleHRhcmVhLlxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXIgfCBTdHJpbmd9ICRkZW5zaXR5LXNjYWxlIC0gRGVuc2l0eSBzY2FsZSB2YWx1ZSBmb3IgY29tcG9uZW50LiBTdXBwb3J0ZWQgZGVuc2l0eSBzY2FsZSB2YWx1ZXMgYC00YCxcbi8vLyAgICAgYC0zYCwgYC0yYCwgYC0xYCwgYDBgLiBEZWZhdWx0IGlzIGAwYC5cbi8vL1xuQG1peGluIG91dGxpbmVkLXRleHRhcmVhLWRlbnNpdHkoXG4gICRkZW5zaXR5LXNjYWxlLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcbiAgJGtleWZyYW1lLXN1ZmZpeDogdGV4dC1maWVsZC1vdXRsaW5lZC0jeyRkZW5zaXR5LXNjYWxlfTtcbiAgJGxhYmVsLXRvcDogZGVuc2l0eS1mdW5jdGlvbnMucHJvcC12YWx1ZShcbiAgICAkZGVuc2l0eS1jb25maWc6IHZhcmlhYmxlcy4kdGV4dGFyZWEtb3V0bGluZWQtbGFiZWwtZGVuc2l0eS1jb25maWcsXG4gICAgJGRlbnNpdHktc2NhbGU6IG1hdGguZGl2KCRkZW5zaXR5LXNjYWxlLCAyKSxcbiAgICAkcHJvcGVydHktbmFtZTogdG9wLFxuICApO1xuICAkdGV4dGZpZWxkLWhlaWdodDogZGVuc2l0eS1mdW5jdGlvbnMucHJvcC12YWx1ZShcbiAgICAkZGVuc2l0eS1jb25maWc6IHZhcmlhYmxlcy4kZGVuc2l0eS1jb25maWcsXG4gICAgJGRlbnNpdHktc2NhbGU6ICRkZW5zaXR5LXNjYWxlLFxuICAgICRwcm9wZXJ0eS1uYW1lOiBoZWlnaHQsXG4gICk7XG4gICRtYXJnaW4tdG9wOiBkZW5zaXR5LWZ1bmN0aW9ucy5wcm9wLXZhbHVlKFxuICAgICRkZW5zaXR5LWNvbmZpZzogdmFyaWFibGVzLiR0ZXh0YXJlYS1vdXRsaW5lZC1kZW5zaXR5LWNvbmZpZyxcbiAgICAkZGVuc2l0eS1zY2FsZTogbWF0aC5kaXYoJGRlbnNpdHktc2NhbGUsIDIpLFxuICAgICRwcm9wZXJ0eS1uYW1lOiBtYXJnaW4tdG9wLFxuICApO1xuICAkbWFyZ2luLWJvdHRvbTogZGVuc2l0eS1mdW5jdGlvbnMucHJvcC12YWx1ZShcbiAgICAkZGVuc2l0eS1jb25maWc6IHZhcmlhYmxlcy4kdGV4dGFyZWEtb3V0bGluZWQtZGVuc2l0eS1jb25maWcsXG4gICAgJGRlbnNpdHktc2NhbGU6IG1hdGguZGl2KCRkZW5zaXR5LXNjYWxlLCAyKSxcbiAgICAkcHJvcGVydHktbmFtZTogbWFyZ2luLWJvdHRvbSxcbiAgKTtcblxuICAvLyBUZXh0YXJlYSBtaXhpbnMgcmVxdWlyZSB0d28gbW9kaWZpZXIgY2xhc3NlcyBzaW5jZSB0d28gYXJlIHVzZWQgaW50ZXJuYWxseVxuICAvLyBmb3Igc3R5bGVzICh0ZXh0YXJlYSBhbmQgb3V0bGluZWQpLiBBbiBleHRyYSBjbGFzcyBpcyBhZGRlZCBmb3IgdGhlIHB1YmxpY1xuICAvLyBtaXhpbiBzbyB0aGF0IG9ubHkgYSBzaW5nbGUgcHVibGljIGNsYXNzIGlzIG5lZWRlZCBmb3Igc3BlY2lmaWNpdHkuXG4gICYubWRjLXRleHQtZmllbGQtLW91dGxpbmVkIHtcbiAgICAvLyBBZGp1c3QgdGhlIGZsb2F0aW5nIHBvc2l0aW9uIGFuZCBhbmltYXRpb24va2V5ZnJhbWVzIG9mIHRoZSBmbG9hdGluZ1xuICAgIC8vIGxhYmVsIGJ5IHRoZSBuZXcgcG9zaXRpb24gb2YgdGhlIHJlc3RpbmcgbGFiZWxcbiAgICAkbGFiZWwtdG9wLWRpZmZlcmVuY2U6IHZhcmlhYmxlcy4kdGV4dGFyZWEtb3V0bGluZWQtbGFiZWwtdG9wIC0gJGxhYmVsLXRvcDtcblxuICAgIC8vIEZsb2F0aW5nIGxhYmVsIHBvc2l0aW9uXG4gICAgQGluY2x1ZGUgbm90Y2hlZC1vdXRsaW5lLW1peGlucy5mbG9hdGluZy1sYWJlbC1mbG9hdC1wb3NpdGlvbi1hYnNvbHV0ZShcbiAgICAgIHZhcmlhYmxlcy4kdGV4dGFyZWEtb3V0bGluZWQtbGFiZWwtcG9zaXRpb24teSAtICRsYWJlbC10b3AtZGlmZmVyZW5jZSxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcblxuICAgIC8vIEZsb2F0aW5nIGxhYmVsIGFuaW1hdGlvblxuICAgIEBpbmNsdWRlIGZsb2F0aW5nLWxhYmVsLW1peGlucy5zaGFrZS1hbmltYXRpb24oXG4gICAgICAka2V5ZnJhbWUtc3VmZml4LFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICAgIEBhdC1yb290IHtcbiAgICAgIEBpbmNsdWRlIGZsb2F0aW5nLWxhYmVsLW1peGlucy5zaGFrZS1rZXlmcmFtZXMoXG4gICAgICAgICRrZXlmcmFtZS1zdWZmaXgsXG4gICAgICAgIHZhcmlhYmxlcy4kdGV4dGFyZWEtb3V0bGluZWQtbGFiZWwtcG9zaXRpb24teSAtICRsYWJlbC10b3AtZGlmZmVyZW5jZSxcbiAgICAgICAgMCUsXG4gICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIFJlc3RpbmcgbGFiZWwgcG9zaXRpb25cbiAgICAubWRjLWZsb2F0aW5nLWxhYmVsIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIHRvcDogJGxhYmVsLXRvcDtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAubWRjLXRleHQtZmllbGRfX3Jlc2l6ZXIge1xuICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgbWluLWhlaWdodDogJHRleHRmaWVsZC1oZWlnaHQ7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBtYXJnaW4tdG9wOiAkbWFyZ2luLXRvcDtcbiAgICAgICAgbWFyZ2luLWJvdHRvbTogJG1hcmdpbi1ib3R0b207XG4gICAgICB9XG4gICAgfVxuXG4gICAgJi5tZGMtdGV4dC1maWVsZC0td2l0aC1pbnRlcm5hbC1jb3VudGVyIHtcbiAgICAgIC5tZGMtdGV4dC1maWVsZF9faW5wdXQge1xuICAgICAgICAvLyBTcGFjZSBiZXR3ZWVuIHRleHRhcmVhIGFuZCBpbnRlcm5hbCBjb3VudGVyIHNob3VsZCBub3QgYmUgYWZmZWN0ZWRcbiAgICAgICAgQGluY2x1ZGUgX3RleHRhcmVhLWlucHV0LXdpdGgtaW50ZXJuYWwtY291bnRlcigkcXVlcnkpO1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHRoZSBtaW5pbXVtIG51bWJlciBvZiByb3dzIGZvciBhIHRleHRhcmVhIGEgdGV4dGFyZWEgbWF5IGJlIHJlc2l6ZWQgdG8uXG4vLy9cbi8vLyBGb3IgSUUxMSB0aGlzIG1peGluIGNhbiBiZSB1c2VkIGluc3RlYWQgb2YgdGhlIHJvd3MgYXR0cmlidXRlLlxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRyb3dzIC0gVGhlIG1pbmltdW0gbnVtYmVyIG9mIHJvd3MgZm9yIGEgdGV4dGFyZWEuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRsaW5lLWhlaWdodCAtIFRoZSBsaW5lLWhlaWdodCBvZiB0aGUgdGV4dGFyZWEuXG4vLy9cbkBtaXhpbiB0ZXh0YXJlYS1taW4tcm93cyhcbiAgJHJvd3MsXG4gICRsaW5lLWhlaWdodDogdmFyaWFibGVzLiR0ZXh0YXJlYS1saW5lLWhlaWdodCxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIG1pbi1oZWlnaHQ6ICRyb3dzICogJGxpbmUtaGVpZ2h0O1xuICAgIH1cbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIGhlaWdodCBvZiBkZWZhdWx0IHRleHQgZmllbGQgdmFyaWFudC5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkaGVpZ2h0XG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRtaW5pbXVtLWhlaWdodC1mb3ItZmlsbGVkLWxhYmVsIFNldHMgdGhlIG1pbmltdW0gaGVpZ2h0IGZvclxuLy8vICAgICBmaWxsZWQgdGV4dGZpZWxkcyBhdCB3aGljaCB0byBhbGxvdyBmbG9hdGluZyBsYWJlbHMuXG4vLy8gQGFjY2VzcyBwdWJsaWNcbi8vL1xuQG1peGluIGhlaWdodChcbiAgJGhlaWdodCxcbiAgJG1pbmltdW0taGVpZ2h0LWZvci1maWxsZWQtbGFiZWw6IHZhcmlhYmxlcy4kbWluaW11bS1oZWlnaHQtZm9yLWZpbGxlZC1sYWJlbCxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgaGVpZ2h0OiAkaGVpZ2h0O1xuICB9XG5cbiAgQGlmICRoZWlnaHQgPCAkbWluaW11bS1oZWlnaHQtZm9yLWZpbGxlZC1sYWJlbCB7XG4gICAgQGluY2x1ZGUgX2ZpbGxlZC1uby1sYWJlbCgkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyBoZWlnaHQgb2Ygb3V0bGluZWQgdGV4dCBmaWVsZCB2YXJpYW50IChFeGNsdWRpbmcgb3V0bGluZWQgdGV4dCBmaWVsZCB3aXRoIGxlYWRpbmcgaWNvbikuXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJGhlaWdodFxuLy8vIEBwYXJhbSB7U3RyaW5nfSAka2V5ZnJhbWUtc3VmZml4IC0gT3B0aW9uYWwgc3VmZml4IHRvIHVzZSBmb3IgZ2VuZXJhdGVkXG4vLy8gICAgIGZsb2F0aW5nIGxhYmVsIGtleWZyYW1lc1xuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy9cbkBtaXhpbiBvdXRsaW5lZC1oZWlnaHQoXG4gICRoZWlnaHQsXG4gICRrZXlmcmFtZS1zdWZmaXg6IHRleHQtZmllbGQtb3V0bGluZWQtI3skaGVpZ2h0fSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gICRwb3NpdGlvblk6IHZhcmlhYmxlcy5nZXQtb3V0bGluZWQtbGFiZWwtcG9zaXRpb24teSgkaGVpZ2h0KTtcblxuICAvLyBGbG9hdGluZyBsYWJlbCBwb3NpdGlvblxuICBAaW5jbHVkZSBub3RjaGVkLW91dGxpbmUtbWl4aW5zLmZsb2F0aW5nLWxhYmVsLWZsb2F0LXBvc2l0aW9uLWFic29sdXRlKFxuICAgICRwb3NpdGlvblksXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcblxuICAvLyBGbG9hdGluZyBsYWJlbCBhbmltYXRpb25cbiAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWwtbWl4aW5zLnNoYWtlLWFuaW1hdGlvbihcbiAgICAka2V5ZnJhbWUtc3VmZml4LFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBhdC1yb290IHtcbiAgICBAaW5jbHVkZSBmbG9hdGluZy1sYWJlbC1taXhpbnMuc2hha2Uta2V5ZnJhbWVzKFxuICAgICAgJGtleWZyYW1lLXN1ZmZpeCxcbiAgICAgICRwb3NpdGlvblksXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGhlaWdodDogJGhlaWdodDtcbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIGhlaWdodCBvZiBvdXRsaW5lZCB0ZXh0IGZpZWxkIHdpdGggbGVhZGluZyBpY29uIHZhcmlhbnQuXG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJGhlaWdodFxuLy8vIEBwYXJhbSB7U3RyaW5nfSAka2V5ZnJhbWUtc3VmZml4IC0gT3B0aW9uYWwgc3VmZml4IHRvIHVzZSBmb3IgZ2VuZXJhdGVkXG4vLy8gICAgIGZsb2F0aW5nIGxhYmVsIGtleWZyYW1lc1xuLy8vIEBhY2Nlc3MgcHVibGljXG4vLy9cbkBtaXhpbiBvdXRsaW5lZC13aXRoLWxlYWRpbmctaWNvbi1oZWlnaHQoXG4gICRoZWlnaHQsXG4gICRrZXlmcmFtZS1zdWZmaXg6IG51bGwsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC8vIFRoaXMgZXh0cmEgc3BlY2lmaWNpdHkgaXMgbmVlZGVkIGJlY2F1c2UgdGV4dGZpZWxkIGFwcGxpZXMgdGhlIGJlbG93IG1peGluXG4gIC8vIGFscmVhZHkgdG8gdHdvIHNlbGVjdG9ycyAob3V0bGluZWQgKyB3aXRoLWxlYWRpbmctaWNvbikuIFRvIG92ZXJyaWRlXG4gIC8vIHRoZW0gd2l0aCBhIG5ldyBsYWJlbCBwb3NpdGlvbiBhbmQgYW5pbWF0aW9uLCBhbm90aGVyIHNlbGVjdG9yIGlzIG5lZWRlZC5cbiAgJi5tZGMtdGV4dC1maWVsZC0tb3V0bGluZWQge1xuICAgIEBpbmNsdWRlIF9vdXRsaW5lZC13aXRoLWxlYWRpbmctaWNvbi1mbG9hdGluZy1sYWJlbC1wb3NpdGlvbi1hbmltYXRpb24oXG4gICAgICAkaGVpZ2h0LFxuICAgICAgJGtleWZyYW1lLXN1ZmZpeCxcbiAgICAgICRxdWVyeVxuICAgICk7XG4gIH1cblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGhlaWdodDogJGhlaWdodDtcbiAgfVxufVxuXG4vLyBNaXhpbiB0aGF0IHNldHMgdGhlIGZsb2F0aW5nIGxhYmVsIHBvc2l0aW9uIGFuZCBhbmltYXRpb25zIGZvciBhIGdpdmVuIGhlaWdodC5cbi8vIFRoaXMgbWl4aW4gaXMgc2VwYXJhdGUgdG8gYWxsb3cgb3V0bGluZWQtd2l0aC1sZWFkaW5nLWljb24taGVpZ2h0KCkgdG9cbi8vIHByb3ZpZGUgZ3JlYXRlciBzcGVjaWZpY2l0eSBvdmVyIHRoZSBkZWZhdWx0IG1peGluIHRoYXQgYWRkcyBzdHlsZXMgZm9yXG4vLyBvdXRsaW5lZCB3aXRoIGxlYWRpbmcgaWNvbnMuXG5AbWl4aW4gX291dGxpbmVkLXdpdGgtbGVhZGluZy1pY29uLWZsb2F0aW5nLWxhYmVsLXBvc2l0aW9uLWFuaW1hdGlvbihcbiAgJGhlaWdodCxcbiAgJGtleWZyYW1lLXN1ZmZpeDogdGV4dC1maWVsZC1vdXRsaW5lZC13aXRoLWxlYWRpbmctaWNvbi0jeyRoZWlnaHR9LFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJHBvc2l0aW9uWTogdmFyaWFibGVzLmdldC1vdXRsaW5lZC1sYWJlbC1wb3NpdGlvbi15KCRoZWlnaHQpO1xuXG4gIC8vIEZsb2F0aW5nIGxhYmVsIHBvc2l0aW9uXG4gIEBpbmNsdWRlIG5vdGNoZWQtb3V0bGluZS1taXhpbnMuZmxvYXRpbmctbGFiZWwtZmxvYXQtcG9zaXRpb24tYWJzb2x1dGUoXG4gICAgJHBvc2l0aW9uWSxcbiAgICB2YXJpYWJsZXMuJG91dGxpbmVkLXdpdGgtbGVhZGluZy1pY29uLWxhYmVsLXBvc2l0aW9uLXgsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcblxuICAvLyBGbG9hdGluZyBsYWJlbCBhbmltYXRpb25cbiAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWwtbWl4aW5zLnNoYWtlLWFuaW1hdGlvbihcbiAgICAka2V5ZnJhbWUtc3VmZml4LFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBhdC1yb290IHtcbiAgICBAaW5jbHVkZSBmbG9hdGluZy1sYWJlbC1taXhpbnMuc2hha2Uta2V5ZnJhbWVzKFxuICAgICAgJGtleWZyYW1lLXN1ZmZpeCxcbiAgICAgICRwb3NpdGlvblksXG4gICAgICB2YXJpYWJsZXMuJG91dGxpbmVkLXdpdGgtbGVhZGluZy1pY29uLWxhYmVsLXBvc2l0aW9uLXgsXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cblxuICAka2V5ZnJhbWUtc3VmZml4LXJ0bDogI3ska2V5ZnJhbWUtc3VmZml4fS1ydGw7XG4gIEBpbmNsdWRlIHJ0bC1taXhpbnMucnRsIHtcbiAgICBAaW5jbHVkZSBmbG9hdGluZy1sYWJlbC1taXhpbnMuc2hha2UtYW5pbWF0aW9uKFxuICAgICAgJGtleWZyYW1lLXN1ZmZpeCxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcbiAgfVxuICBAYXQtcm9vdCB7XG4gICAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWwtbWl4aW5zLnNoYWtlLWtleWZyYW1lcyhcbiAgICAgICRrZXlmcmFtZS1zdWZmaXgtcnRsLFxuICAgICAgJHBvc2l0aW9uWSxcbiAgICAgIC0odmFyaWFibGVzLiRvdXRsaW5lZC13aXRoLWxlYWRpbmctaWNvbi1sYWJlbC1wb3NpdGlvbi14KSxcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcbiAgfVxufVxuXG4vLy9cbi8vLyBTZXRzIHNoYXBlIHJhZGl1cyBvZiBkZWZhdWx0IHRleHQgZmllbGQgdmFyaWFudC5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkcmFkaXVzIFNoYXBlIHJhZGl1cyB2YWx1ZSBpbiBgcHhgIG9yIGluIHBlcmNlbnRhZ2UuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICR0ZXh0LWZpZWxkLWhlaWdodCBIZWlnaHQgb2YgZGVmYXVsdCB0ZXh0IGZpZWxkIHZhcmlhbnQuIFJlcXVpcmVkIG9ubHkgd2hlbiBgJHJhZGl1c2AgaXMgaW5cbi8vLyAgICAgcGVyY2VudGFnZSB1bml0IGFuZCBpZiB0ZXh0IGZpZWxkIGhhcyBjdXN0b20gaGVpZ2h0LiBEZWZhdWx0cyB0byBgdmFyaWFibGVzLiRoZWlnaHRgLlxuLy8vIEBwYXJhbSB7Qm9vbGVhbn0gJHJ0bC1yZWZsZXhpdmUgU2V0IHRvIHRydWUgdG8gZmxpcCBzaGFwZSByYWRpdXMgaW4gUlRMIGNvbnRleHQuIERlZmF1bHRzIHRvIGBmYWxzZWAuXG4vLy9cbkBtaXhpbiBzaGFwZS1yYWRpdXMoXG4gICRyYWRpdXMsXG4gICRkZW5zaXR5LXNjYWxlOiB2YXJpYWJsZXMuJGRlbnNpdHktc2NhbGUsXG4gICRydGwtcmVmbGV4aXZlOiBmYWxzZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gIEBpZiBtZXRhLnR5cGUtb2YoJHJhZGl1cykgPT0gJ2xpc3QnIGFuZCBsaXN0Lmxlbmd0aCgkcmFkaXVzKSA+IDIge1xuICAgIEBlcnJvciBcIm1kYy10ZXh0ZmllbGQ6IEludmFsaWQgcmFkaXVzICN7JHJhZGl1c30uIE9ubHkgdG9wLWxlZnQgYW5kIHRvcC1yaWdodCBjb3JuZXJzIG1heSBiZSBjdXN0b21pemVkLlwiO1xuICB9XG5cbiAgJGhlaWdodDogZGVuc2l0eS1mdW5jdGlvbnMucHJvcC12YWx1ZShcbiAgICAkZGVuc2l0eS1jb25maWc6IHZhcmlhYmxlcy4kZGVuc2l0eS1jb25maWcsXG4gICAgJGRlbnNpdHktc2NhbGU6ICRkZW5zaXR5LXNjYWxlLFxuICAgICRwcm9wZXJ0eS1uYW1lOiBoZWlnaHQsXG4gICk7XG5cbiAgJG1hc2tlZC1yYWRpdXM6IHNoYXBlLWZ1bmN0aW9ucy5tYXNrLXJhZGl1cygkcmFkaXVzLCAxIDEgMCAwKTtcblxuICBAaW5jbHVkZSBzaGFwZS1taXhpbnMucmFkaXVzKFxuICAgICRtYXNrZWQtcmFkaXVzLFxuICAgICRydGwtcmVmbGV4aXZlLFxuICAgICRjb21wb25lbnQtaGVpZ2h0OiAkaGVpZ2h0LFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG59XG5cbkBtaXhpbiB0ZXh0YXJlYS1zaGFwZS1yYWRpdXMoXG4gICRyYWRpdXMsXG4gICRydGwtcmVmbGV4aXZlOiBmYWxzZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gIEBpbmNsdWRlIG5vdGNoZWQtb3V0bGluZS1taXhpbnMuc2hhcGUtcmFkaXVzKFxuICAgICRyYWRpdXMsXG4gICAgJHJ0bC1yZWZsZXhpdmUsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbn1cblxuLy8vXG4vLy8gQ3VzdG9taXplcyB0aGUgY29sb3Igb2YgdGhlIHRleHQgZW50ZXJlZCBpbnRvIGFuIGVuYWJsZWQgdGV4dCBmaWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBpbnB1dCB0ZXh0IGNvbG9yLlxuLy8vXG5AbWl4aW4gaW5rLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1lbmFibGVkXyB7XG4gICAgQGluY2x1ZGUgaW5rLWNvbG9yXygkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBDdXN0b21pemVzIHRoZSBjb2xvciBvZiB0aGUgZW50ZXJlZCB0ZXh0IGluIGEgZGlzYWJsZWQgdGV4dCBmaWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBpbnB1dCB0ZXh0IGNvbG9yLlxuLy8vXG5AbWl4aW4gZGlzYWJsZWQtaW5rLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1kaXNhYmxlZF8ge1xuICAgIEBpbmNsdWRlIGluay1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gQ3VzdG9taXplcyB0aGUgY29sb3Igb2YgdGhlIHBsYWNlaG9sZGVyIGluIGFuIGVuYWJsZWQgdGV4dCBmaWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBwbGFjZWhvbGRlciB0ZXh0IGNvbG9yLlxuLy8vXG5AbWl4aW4gcGxhY2Vob2xkZXItY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIGlmLWVuYWJsZWRfIHtcbiAgICBAaW5jbHVkZSBwbGFjZWhvbGRlci1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gQ3VzdG9taXplcyB0aGUgY29sb3Igb2YgdGhlIHBsYWNlaG9sZGVyIGluIGEgZGlzYWJsZWQgdGV4dCBmaWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBwbGFjZWhvbGRlciB0ZXh0IGNvbG9yLlxuLy8vXG5AbWl4aW4gZGlzYWJsZWQtcGxhY2Vob2xkZXItY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIGlmLWRpc2FibGVkXyB7XG4gICAgQGluY2x1ZGUgcGxhY2Vob2xkZXItY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIGJhY2tncm91bmQgY29sb3Igb2YgdGhlIHRleHQgZmllbGQgb3IgdGV4dGFyZWEgd2hlbiBlbmFibGVkLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIGJhY2tncm91bmQgY29sb3IuXG4vLy9cbkBtaXhpbiBmaWxsLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1lbmFibGVkXyB7XG4gICAgQGluY2x1ZGUgZmlsbC1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gQ3VzdG9taXplcyB0aGUgYmFja2dyb3VuZCBjb2xvciBvZiB0aGUgdGV4dCBmaWVsZCBvciB0ZXh0YXJlYSB3aGVuIGRpc2FibGVkLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIGJhY2tncm91bmQgY29sb3IuXG4vLy9cbkBtaXhpbiBkaXNhYmxlZC1maWxsLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1kaXNhYmxlZF8ge1xuICAgIEBpbmNsdWRlIGZpbGwtY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIHRleHQgZmllbGQgYm90dG9tIGxpbmUgY29sb3IgZm9yIHRoZSBmaWxsZWQgdmFyaWFudC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBib3R0b20gbGluZSBjb2xvci5cbi8vL1xuQG1peGluIGJvdHRvbS1saW5lLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1lbmFibGVkXyB7XG4gICAgQGluY2x1ZGUgYm90dG9tLWxpbmUtY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIGRpc2FibGVkIHRleHQgZmllbGQgYm90dG9tIGxpbmUgY29sb3IgZm9yIHRoZSBmaWxsZWQgdmFyaWFudC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBib3R0b20gbGluZSBjb2xvci5cbi8vL1xuQG1peGluIGRpc2FibGVkLWJvdHRvbS1saW5lLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1kaXNhYmxlZF8ge1xuICAgIEBpbmNsdWRlIGJvdHRvbS1saW5lLWNvbG9yXygkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBDdXN0b21pemVzIHRoZSBob3ZlciB0ZXh0IGZpZWxkIGJvdHRvbSBsaW5lIGNvbG9yIGZvciB0aGUgZmlsbGVkIHZhcmlhbnQuXG4vLy8gQHBhcmFtIHtDb2xvcn0gJGNvbG9yIC0gVGhlIGRlc2lyZWQgYm90dG9tIGxpbmUgY29sb3IuXG4vLy9cbkBtaXhpbiBob3Zlci1ib3R0b20tbGluZS1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgaWYtZW5hYmxlZF8ge1xuICAgIEBpbmNsdWRlIGhvdmVyLWJvdHRvbS1saW5lLWNvbG9yXygkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBDdXN0b21pemVzIHRoZSBjb2xvciBvZiB0aGUgZGVmYXVsdCBsaW5lIHJpcHBsZSBvZiB0aGUgdGV4dCBmaWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBsaW5lIHJpcHBsZSBjb2xvci5cbi8vL1xuQG1peGluIGxpbmUtcmlwcGxlLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1lbmFibGVkXyB7XG4gICAgQGluY2x1ZGUgbGluZS1yaXBwbGUtY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIHRleHQgY29sb3Igb2YgdGhlIGxhYmVsIGluIGFuIGVuYWJsZWQgdGV4dCBmaWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBsYWJlbCB0ZXh0IGNvbG9yLlxuLy8vXG5AbWl4aW4gbGFiZWwtY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIGlmLWVuYWJsZWRfIHtcbiAgICBAaW5jbHVkZSBsYWJlbC1pbmstY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIHRleHQgY29sb3Igb2YgdGhlIGxhYmVsIGluIGEgZGlzYWJsZWQgdGV4dCBmaWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBsYWJlbCB0ZXh0IGNvbG9yLlxuLy8vXG5AbWl4aW4gZGlzYWJsZWQtbGFiZWwtY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIEBpbmNsdWRlIGlmLWRpc2FibGVkXyB7XG4gICAgQGluY2x1ZGUgbGFiZWwtaW5rLWNvbG9yXygkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBDdXN0b21pemVzIHRoZSBib3JkZXIgY29sb3Igb2YgdGhlIG91dGxpbmVkIHRleHQgZmllbGQgb3IgdGV4dGFyZWEuXG4vLy8gQHBhcmFtIHtDb2xvcn0gJGNvbG9yIC0gVGhlIGRlc2lyZWQgb3V0bGluZSBib3JkZXIgY29sb3IuXG4vLy9cbkBtaXhpbiBvdXRsaW5lLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1lbmFibGVkXyB7XG4gICAgQGluY2x1ZGUgbm90Y2hlZC1vdXRsaW5lLW1peGlucy5jb2xvcigkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBDdXN0b21pemVzIHRoZSBvdXRsaW5lIGJvcmRlciBjb2xvciB3aGVuIHRoZSB0ZXh0IGZpZWxkIG9yIHRleHRhcmVhIGlzIGhvdmVyZWQuXG4vLy8gQHBhcmFtIHtDb2xvcn0gJGNvbG9yIC0gVGhlIGRlc2lyZWQgb3V0bGluZSBib3JkZXIgY29sb3IuXG4vLy9cbkBtaXhpbiBob3Zlci1vdXRsaW5lLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1lbmFibGVkXyB7XG4gICAgQGluY2x1ZGUgaG92ZXItb3V0bGluZS1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gQ3VzdG9taXplcyB0aGUgb3V0bGluZSBib3JkZXIgY29sb3Igd2hlbiB0aGUgdGV4dCBmaWVsZCBvciB0ZXh0YXJlYSBpcyBmb2N1c2VkLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIG91dGxpbmUgYm9yZGVyIGNvbG9yLlxuLy8vXG5AbWl4aW4gZm9jdXNlZC1vdXRsaW5lLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1lbmFibGVkXyB7XG4gICAgQGluY2x1ZGUgZm9jdXNlZC1vdXRsaW5lLWNvbG9yXygkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBDdXN0b21pemVzIHRoZSBvdXRsaW5lIGJvcmRlciBjb2xvciB3aGVuIHRoZSB0ZXh0IGZpZWxkIG9yIHRleHRhcmVhIGlzIGRpc2FibGVkLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIG91dGxpbmUgYm9yZGVyIGNvbG9yLlxuLy8vXG5AbWl4aW4gZGlzYWJsZWQtb3V0bGluZS1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgaWYtZGlzYWJsZWRfIHtcbiAgICBAaW5jbHVkZSBub3RjaGVkLW91dGxpbmUtbWl4aW5zLmNvbG9yKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIGNhcmV0IGNvbG9yIG9mIHRoZSB0ZXh0IGZpZWxkIG9yIHRleHRhcmVhLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIGNhcmV0IGNvbG9yLlxuLy8vXG5AbWl4aW4gY2FyZXQtY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIC5tZGMtdGV4dC1maWVsZF9faW5wdXQge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3AoY2FyZXQtY29sb3IsICRjb2xvcik7XG4gICAgfVxuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIGNvbG9yIG9mIHRoZSBwcmVmaXggdGV4dCBmb3IgYW4gZW5hYmxlZCB0ZXh0IGZpZWxkLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIHByZWZpeCB0ZXh0IGNvbG9yLlxuLy8vXG5AbWl4aW4gcHJlZml4LWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1lbmFibGVkXyB7XG4gICAgQGluY2x1ZGUgX3ByZWZpeC1jb2xvcigkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBDdXN0b21pemVzIHRoZSBjb2xvciBvZiB0aGUgcHJlZml4IHRleHQgZm9yIGEgZGlzYWJsZWQgdGV4dCBmaWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBwcmVmaXggdGV4dCBjb2xvci5cbi8vL1xuQG1peGluIGRpc2FibGVkLXByZWZpeC1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgaWYtZGlzYWJsZWRfIHtcbiAgICBAaW5jbHVkZSBfcHJlZml4LWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIGNvbG9yIG9mIHRoZSBzdWZmaXggdGV4dCBmb3IgYW4gZW5hYmxlZCB0ZXh0IGZpZWxkLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIHN1ZmZpeCB0ZXh0IGNvbG9yLlxuLy8vXG5AbWl4aW4gc3VmZml4LWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICBAaW5jbHVkZSBpZi1lbmFibGVkXyB7XG4gICAgQGluY2x1ZGUgX3N1ZmZpeC1jb2xvcigkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBDdXN0b21pemVzIHRoZSBjb2xvciBvZiB0aGUgc3VmZml4IHRleHQgZm9yIGEgZGlzYWJsZWQgdGV4dCBmaWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBzdWZmaXggdGV4dCBjb2xvci5cbi8vL1xuQG1peGluIGRpc2FibGVkLXN1ZmZpeC1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgaWYtZGlzYWJsZWRfIHtcbiAgICBAaW5jbHVkZSBfc3VmZml4LWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIFNldHMgc2hhcGUgcmFkaXVzIG9mIG91dGxpbmVkIHRleHQgZmllbGQgdmFyaWFudC5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkcmFkaXVzIFNoYXBlIHJhZGl1cyB2YWx1ZSBpbiBgcHhgIG9yIGluIHBlcmNlbnRhZ2UuXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICR0ZXh0LWZpZWxkLWhlaWdodCBIZWlnaHQgb2Ygb3V0bGluZWQgdGV4dCBmaWVsZCB2YXJpYW50LiBSZXF1aXJlZCBvbmx5IHdoZW4gYCRyYWRpdXNgIGlzIGluXG4vLy8gICAgIHBlcmNlbnRhZ2UgdW5pdCBhbmQgaWYgdGV4dCBmaWVsZCBoYXMgY3VzdG9tIGhlaWdodC4gRGVmYXVsdHMgdG8gYHZhcmlhYmxlcy4kaGVpZ2h0YC5cbi8vLyBAcGFyYW0ge0Jvb2xlYW59ICRydGwtcmVmbGV4aXZlIFNldCB0byB0cnVlIHRvIGZsaXAgc2hhcGUgcmFkaXVzIGluIFJUTCBjb250ZXh0LiBEZWZhdWx0cyB0byBgZmFsc2VgLlxuLy8vXG5AbWl4aW4gb3V0bGluZS1zaGFwZS1yYWRpdXMoXG4gICRyYWRpdXMsXG4gICRkZW5zaXR5LXNjYWxlOiB2YXJpYWJsZXMuJGRlbnNpdHktc2NhbGUsXG4gICRydGwtcmVmbGV4aXZlOiBmYWxzZSxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gICRoZWlnaHQ6IGRlbnNpdHktZnVuY3Rpb25zLnByb3AtdmFsdWUoXG4gICAgJGRlbnNpdHktY29uZmlnOiB2YXJpYWJsZXMuJGRlbnNpdHktY29uZmlnLFxuICAgICRkZW5zaXR5LXNjYWxlOiAkZGVuc2l0eS1zY2FsZSxcbiAgICAkcHJvcGVydHktbmFtZTogaGVpZ2h0LFxuICApO1xuXG4gIC5tZGMtbm90Y2hlZC1vdXRsaW5lIHtcbiAgICBAaW5jbHVkZSBub3RjaGVkLW91dGxpbmUtbWl4aW5zLnNoYXBlLXJhZGl1cyhcbiAgICAgICRyYWRpdXMsXG4gICAgICAkcnRsLXJlZmxleGl2ZSxcbiAgICAgICRjb21wb25lbnQtaGVpZ2h0OiAkaGVpZ2h0LFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9XG5cbiAgJHJlc29sdmVkLXJhZGl1czogc2hhcGUtZnVuY3Rpb25zLnJlc29sdmUtcmFkaXVzKFxuICAgICRyYWRpdXMsXG4gICAgJGNvbXBvbmVudC1oZWlnaHQ6ICRoZWlnaHRcbiAgKTtcbiAgJHVucGFja2VkLXJhZGl1czogc2hhcGUtZnVuY3Rpb25zLnVucGFjay1yYWRpdXMoJHJlc29sdmVkLXJhZGl1cyk7XG4gICR0b3AtbGVmdC1yYWRpdXM6IGxpc3QubnRoKCR1bnBhY2tlZC1yYWRpdXMsIDEpO1xuICAkdG9wLWxlZnQtaXMtY3VzdG9tLXByb3A6IGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCR0b3AtbGVmdC1yYWRpdXMpO1xuICAkdG9wLWxlZnQtcmFkaXVzLXB4OiAkdG9wLWxlZnQtcmFkaXVzO1xuICBAaWYgKCR0b3AtbGVmdC1pcy1jdXN0b20tcHJvcCkge1xuICAgICR0b3AtbGVmdC1yYWRpdXMtcHg6IGN1c3RvbS1wcm9wZXJ0aWVzLmdldC1mYWxsYmFjaygkdG9wLWxlZnQtcmFkaXVzKTtcbiAgfVxuICAkdG9wLXJpZ2h0LXJhZGl1czogbGlzdC5udGgoJHVucGFja2VkLXJhZGl1cywgMik7XG4gICR0b3AtcmlnaHQtaXMtY3VzdG9tLXByb3A6IGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKFxuICAgICR0b3AtcmlnaHQtcmFkaXVzXG4gICk7XG5cbiAgQGlmIChcbiAgICAkdG9wLWxlZnQtaXMtY3VzdG9tLXByb3Agb3JcbiAgICAgICR0b3AtcmlnaHQtaXMtY3VzdG9tLXByb3Agb3JcbiAgICAgICR0b3AtbGVmdC1yYWRpdXMtcHggPlxuICAgICAgbm90Y2hlZC1vdXRsaW5lLXZhcmlhYmxlcy4kbGVhZGluZy13aWR0aFxuICApIHtcbiAgICAvLyBUaGUgaG9yaXpvbnRhbCBwYWRkaW5nIG9ubHkgbmVlZHMgdG8gYmUgb3ZlcnJpZGVuIGZyb20gdGhlIGJhc2UgcGFkZGluZ1xuICAgIC8vIGlmIHRoZSByYWRpdXMgaXMgYSBjdXN0b20gcHJvcGVydHksIG9yIGlmIHRoZSB0b3AtbGVmdCByYWRpdXMgaXMgYSB2YWx1ZVxuICAgIC8vIHRoYXQgaXMgbGFyZ2UgdGhhbiB0aGF0IGRlZmF1bHQgbm90Y2hlZCBvdXRsaW5lJ3MgbGVhZGluZyB3aWR0aC5cbiAgICBAaW5jbHVkZSBfb3V0bGluZS1zaGFwZS1yYWRpdXMtaG9yaXpvbnRhbC1wYWRkaW5nKFxuICAgICAgJHRvcC1sZWZ0LXJhZGl1cyxcbiAgICAgICR0b3AtcmlnaHQtcmFkaXVzLFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuXG4gICAgKyAubWRjLXRleHQtZmllbGQtaGVscGVyLWxpbmUge1xuICAgICAgQGluY2x1ZGUgX291dGxpbmUtc2hhcGUtcmFkaXVzLWhvcml6b250YWwtcGFkZGluZyhcbiAgICAgICAgJHRvcC1sZWZ0LXJhZGl1cyxcbiAgICAgICAgJHRvcC1yaWdodC1yYWRpdXMsXG4gICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICApO1xuICAgIH1cblxuICAgIC8vIEVuc3VyZSB0aGF0IGxlYWRpbmcvdHJhaWxpbmcgaWNvbiBwYWRkaW5nIGlzIG92ZXJyaWRlbi4gRXZlbiBpZiB0aGVcbiAgICAvLyB0b3AgbGVmdC9yaWdodCBpc24ndCBhIGN1c3RvbSBwcm9wZXJ0eSBvciB0aGUgbGVhZGluZyBpc24ndCBsYXJnZXIsIHdlXG4gICAgLy8gc3RpbGwgbmVlZCB0byBvdmVycmlkZS4gVGhlIGFib3ZlIGxlZnQvcmlnaHQgcGFkZGluZyBydWxlcyBoYXZlIG1vcmVcbiAgICAvLyBzcGVjaWZpY3R5IHRoYW4gdGhlIG9yaWdpbmFsIGxlYWRpbmcvdHJhaWxpbmcgaWNvbiBydWxlcywgc28gd2UgbmVlZCB0b1xuICAgIC8vIHJlLWFwcGx5IHRoZW0uXG4gICAgLy8gQWRkaXRpb25hbGx5LCBpZiB0aGUgdG9wIGxlZnQvcmlnaHQgcmFkaWkgX2FyZV8gY3VzdG9tIHByb3BlcnRpZXMsIHdlXG4gICAgLy8gc2hvdWxkIHVzZSB0aG9zZSBpbnN0ZWFkLlxuXG4gICAgJi5tZGMtdGV4dC1maWVsZC0td2l0aC1sZWFkaW5nLWljb24ge1xuICAgICAgQGlmICgkdG9wLXJpZ2h0LWlzLWN1c3RvbS1wcm9wKSB7XG4gICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgICAgLyogQG5vZmxpcCAqL1xuICAgICAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgICAgfVxuICAgICAgICBAaW5jbHVkZSBfYXBwbHktb3V0bGluZS1zaGFwZS1wYWRkaW5nKFxuICAgICAgICAgIHBhZGRpbmctcmlnaHQsXG4gICAgICAgICAgJHRvcC1yaWdodC1yYWRpdXMsXG4gICAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICAgKTtcblxuICAgICAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJ0bCB7XG4gICAgICAgICAgQGluY2x1ZGUgX2FwcGx5LW91dGxpbmUtc2hhcGUtcGFkZGluZyhcbiAgICAgICAgICAgIHBhZGRpbmctbGVmdCxcbiAgICAgICAgICAgICR0b3AtcmlnaHQtcmFkaXVzLFxuICAgICAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICAgICApO1xuICAgICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgICAgICAvKiBAbm9mbGlwICovXG4gICAgICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgfSBAZWxzZSB7XG4gICAgICAgIEBpbmNsdWRlIF9wYWRkaW5nLWhvcml6b250YWwtd2l0aC1sZWFkaW5nLWljb24oJHF1ZXJ5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm1kYy10ZXh0LWZpZWxkLS13aXRoLXRyYWlsaW5nLWljb24ge1xuICAgICAgQGlmIChcbiAgICAgICAgJHRvcC1sZWZ0LWlzLWN1c3RvbS1wcm9wIG9yXG4gICAgICAgICAgJHRvcC1sZWZ0LXJhZGl1cy1weCA+XG4gICAgICAgICAgbm90Y2hlZC1vdXRsaW5lLXZhcmlhYmxlcy4kbGVhZGluZy13aWR0aFxuICAgICAgKSB7XG4gICAgICAgIEBpbmNsdWRlIF9hcHBseS1vdXRsaW5lLXNoYXBlLXBhZGRpbmcoXG4gICAgICAgICAgcGFkZGluZy1sZWZ0LFxuICAgICAgICAgICR0b3AtbGVmdC1yYWRpdXMsXG4gICAgICAgICAgJGFkZC1sYWJlbC1wYWRkaW5nOiB0cnVlLFxuICAgICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICAgICk7XG4gICAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgICAgLyogQG5vZmxpcCAqL1xuICAgICAgICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gICAgICAgIH1cblxuICAgICAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJ0bCB7XG4gICAgICAgICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgICAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgICAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgICAgICB9XG4gICAgICAgICAgQGluY2x1ZGUgX2FwcGx5LW91dGxpbmUtc2hhcGUtcGFkZGluZyhcbiAgICAgICAgICAgIHBhZGRpbmctcmlnaHQsXG4gICAgICAgICAgICAkdG9wLWxlZnQtcmFkaXVzLFxuICAgICAgICAgICAgJGFkZC1sYWJlbC1wYWRkaW5nOiB0cnVlLFxuICAgICAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICAgICApO1xuICAgICAgICB9XG4gICAgICB9IEBlbHNlIHtcbiAgICAgICAgQGluY2x1ZGUgX3BhZGRpbmctaG9yaXpvbnRhbC13aXRoLXRyYWlsaW5nLWljb24oJHF1ZXJ5KTtcbiAgICAgIH1cbiAgICB9XG5cbiAgICAmLm1kYy10ZXh0LWZpZWxkLS13aXRoLWxlYWRpbmctaWNvbi5tZGMtdGV4dC1maWVsZC0td2l0aC10cmFpbGluZy1pY29uIHtcbiAgICAgIEBpbmNsdWRlIF9wYWRkaW5nLWhvcml6b250YWwtd2l0aC1ib3RoLWljb25zKCRxdWVyeSk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfb3V0bGluZS1zaGFwZS1yYWRpdXMtaG9yaXpvbnRhbC1wYWRkaW5nKFxuICAkdG9wLWxlZnQtcmFkaXVzLFxuICAkdG9wLXJpZ2h0LXJhZGl1cyxcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gIEBpbmNsdWRlIF9hcHBseS1vdXRsaW5lLXNoYXBlLXBhZGRpbmcoXG4gICAgcGFkZGluZy1sZWZ0LFxuICAgICR0b3AtbGVmdC1yYWRpdXMsXG4gICAgJGFkZC1sYWJlbC1wYWRkaW5nOiB0cnVlLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIF9hcHBseS1vdXRsaW5lLXNoYXBlLXBhZGRpbmcoXG4gICAgcGFkZGluZy1yaWdodCxcbiAgICAkdG9wLXJpZ2h0LXJhZGl1cyxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xuXG4gICR0b3AtbGVmdC1pcy1jdXN0b20tcHJvcDogY3VzdG9tLXByb3BlcnRpZXMuaXMtY3VzdG9tLXByb3AoJHRvcC1sZWZ0LXJhZGl1cyk7XG4gICR0b3AtbGVmdC1yYWRpdXMtcHg6ICR0b3AtbGVmdC1yYWRpdXM7XG4gIEBpZiAoJHRvcC1sZWZ0LWlzLWN1c3RvbS1wcm9wKSB7XG4gICAgJHRvcC1sZWZ0LXJhZGl1cy1weDogY3VzdG9tLXByb3BlcnRpZXMuZ2V0LWZhbGxiYWNrKCR0b3AtbGVmdC1yYWRpdXMpO1xuICB9XG4gICR0b3AtcmlnaHQtaXMtY3VzdG9tLXByb3A6IGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKFxuICAgICR0b3AtcmlnaHQtcmFkaXVzXG4gICk7XG4gICR0b3AtcmlnaHQtcmFkaXVzLXB4OiAkdG9wLXJpZ2h0LXJhZGl1cztcbiAgQGlmICgkdG9wLXJpZ2h0LWlzLWN1c3RvbS1wcm9wKSB7XG4gICAgJHRvcC1yaWdodC1yYWRpdXMtcHg6IGN1c3RvbS1wcm9wZXJ0aWVzLmdldC1mYWxsYmFjaygkdG9wLXJpZ2h0LXJhZGl1cyk7XG4gIH1cblxuICBAaWYgKFxuICAgIChcbiAgICAgICAgJHRvcC1sZWZ0LWlzLWN1c3RvbS1wcm9wIGFuZFxuICAgICAgICAgICR0b3AtcmlnaHQtaXMtY3VzdG9tLXByb3AgYW5kIG5vdFxuICAgICAgICAgIGN1c3RvbS1wcm9wZXJ0aWVzLmFyZS1lcXVhbCgkdG9wLWxlZnQtcmFkaXVzLCAkdG9wLXJpZ2h0LXJhZGl1cylcbiAgICAgICkgb3JcbiAgICAgICR0b3AtbGVmdC1yYWRpdXMtcHggIT1cbiAgICAgICR0b3AtcmlnaHQtcmFkaXVzLXB4XG4gICkge1xuICAgIC8vIE5vcm1hbGx5IGJhc2UgaG9yaXpvbnRhbCBwYWRkaW5nIGRvZXNuJ3QgbmVlZCBSVEwsIGJ1dCBpZiB0aGUgdmFsdWVzXG4gICAgLy8gYXJlIGRpZmZlcmVudCBvciB0aGV5IGFyZSB0d28gZGlmZmVyZW50IGN1c3RvbSBwcm9wZXJ0aWVzLCB0aGV5IG5lZWQgdG9cbiAgICAvLyBiZSByZXZlcnNlZC5cbiAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJ0bCB7XG4gICAgICBAaW5jbHVkZSBfYXBwbHktb3V0bGluZS1zaGFwZS1wYWRkaW5nKFxuICAgICAgICBwYWRkaW5nLXJpZ2h0LFxuICAgICAgICAkdG9wLWxlZnQtcmFkaXVzLFxuICAgICAgICAkYWRkLWxhYmVsLXBhZGRpbmc6IHRydWUsXG4gICAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgICApO1xuICAgICAgQGluY2x1ZGUgX2FwcGx5LW91dGxpbmUtc2hhcGUtcGFkZGluZyhcbiAgICAgICAgcGFkZGluZy1sZWZ0LFxuICAgICAgICAkdG9wLXJpZ2h0LXJhZGl1cyxcbiAgICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICAgICk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfYXBwbHktb3V0bGluZS1zaGFwZS1wYWRkaW5nKFxuICAkcHJvcGVydHksXG4gICRwYWRkaW5nLFxuICAkYWRkLWxhYmVsLXBhZGRpbmc6IGZhbHNlLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcbiAgJHBhZGRpbmctaXMtY3VzdG9tLXByb3A6IGN1c3RvbS1wcm9wZXJ0aWVzLmlzLWN1c3RvbS1wcm9wKCRwYWRkaW5nKTtcbiAgJHBhZGRpbmctcHg6ICRwYWRkaW5nO1xuICBAaWYgKCRwYWRkaW5nLWlzLWN1c3RvbS1wcm9wKSB7XG4gICAgJHBhZGRpbmctcHg6IGN1c3RvbS1wcm9wZXJ0aWVzLmdldC1mYWxsYmFjaygkcGFkZGluZyk7XG4gIH1cblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIC8vIFRoZSBzaGFwZSBzaG91bGQgb25seSBjaGFuZ2UgdGhlIHBhZGRpbmcgaWYgdGhlIHJhZGl1cyBiZWNvbWVzIGdyZWF0ZXJcbiAgICAvLyB0aGFuIHRoZSBkZWZhdWx0IHBhZGRpbmcuIFRoYXQgbWVhbnMgd2UgbmVlZCB0byBhZGQgbW9yZSBwYWRkaW5nLlxuICAgIEBpZiAoJHBhZGRpbmctcHggPiB2YXJpYWJsZXMuJHBhZGRpbmctaG9yaXpvbnRhbCkge1xuICAgICAgLy8gU2V0IGEgcHggdmFsdWUgaWYgaXQncyBncmVhdGVyLiBUaGlzIGlzIGVpdGhlciB0aGUgb25seSB2YWx1ZSAoaWZcbiAgICAgIC8vIHdlJ3JlIGdpdmVuIGFuIGV4YWN0IHZhbHVlKSwgb3IgYW4gSUUxMSBmYWxsYmFjayBpZiB3ZSdyZSBnaXZlbiBhXG4gICAgICAvLyBjdXN0b20gcHJvcGVydHkgYW5kIHRoZSBmYWxsYmFjayB2YWx1ZSBpcyBncmVhdGVyIHRoYW4gdGhlIHBhZGRpbmcuXG4gICAgICAkdmFsdWU6ICRwYWRkaW5nLXB4O1xuICAgICAgQGlmICgkYWRkLWxhYmVsLXBhZGRpbmcpIHtcbiAgICAgICAgLy8gSWYgdGhpcyBpcyBmb3IgdGhlIHRvcC1sZWZ0IGxlYWRpbmcsIGFkZCB0aGUgbm90Y2hlZCBvdXRsaW5lIHBhZGRpbmdcbiAgICAgICAgLy8gdG8ga2VlcCBpdCBhbGlnbmVkIHdpdGggdGhlIGxhYmVsXG4gICAgICAgICR2YWx1ZTogJHBhZGRpbmctcHggKyBub3RjaGVkLW91dGxpbmUtdmFyaWFibGVzLiRwYWRkaW5nO1xuICAgICAgfVxuXG4gICAgICAvKiBAbm9mbGlwICovXG4gICAgICAjeyRwcm9wZXJ0eX06ICR2YWx1ZTtcbiAgICAgIEBpZiAoJHBhZGRpbmctaXMtY3VzdG9tLXByb3ApIHtcbiAgICAgICAgLy8gQWRkIGFuIGFsdGVybmF0ZSBHU1MgdGFnIGIvYyB0aGlzIHdhcyBhbiBJRTExIGZhbGxiYWNrIGFuZCB3ZSdyZVxuICAgICAgICAvLyBnb2luZyB0byBhZGQgYW5vdGhlciBwcm9wZXJ0eSB3aXRoIHRoZSB2YXIoKSB2YWx1ZVxuICAgICAgICAvKiBAYWx0ZXJuYXRlICovXG4gICAgICB9XG4gICAgfVxuICAgIEBpZiAoJHBhZGRpbmctaXMtY3VzdG9tLXByb3ApIHtcbiAgICAgIC8vIElmIGl0J3MgYSBjdXN0b20gcHJvcGVydHksIGFsd2F5cyBhZGQgaXQgc2luY2UgdGhlIHZhbHVlIG1heSBjaGFuZ2VcbiAgICAgIC8vIHRvIGJlIGdyZWF0ZXIgdGhhbiB0aGUgcGFkZGluZyBhdCBydW50aW1lLCBldmVuIGlmIHRoZSBmYWxsYmFjayBpc1xuICAgICAgLy8gbm90IGN1cnJlbnRseSBncmVhdGVyIHRoYW4gdGhlIGRlZmF1bHQgcGFkZGluZy5cbiAgICAgICR2YWx1ZTogY3VzdG9tLXByb3BlcnRpZXMuY3JlYXRlLXZhcigkcGFkZGluZyk7XG4gICAgICBAaWYgKCRhZGQtbGFiZWwtcGFkZGluZykge1xuICAgICAgICAkdmFsdWU6IGNhbGMoI3skdmFsdWV9ICsgI3tub3RjaGVkLW91dGxpbmUtdmFyaWFibGVzLiRwYWRkaW5nfSk7XG4gICAgICB9XG5cbiAgICAgIEBzdXBwb3J0cyAodG9wOiBtYXgoMCUpKSB7XG4gICAgICAgIC8vIEEgbWF4KCkgZnVuY3Rpb24gbWFrZXMgdGhpcyBydW50aW1lIGR5bmFtaWMuIFRoZSBwYWRkaW5nIHdpbGwgYmVcbiAgICAgICAgLy8gd2hpY2hldmVyIGlzIGdyZWF0ZXI6IHRoZSBkZWZhdWx0IGhvcml6b250YWwgcGFkZGluZywgb3IgdGhlIGNhbGN1bGF0ZWRcbiAgICAgICAgLy8gY3VzdG9tIHByb3BlcnR5IHBsdXMgZXh0cmEgcGFkZGluZy5cbiAgICAgICAgLyogQG5vZmxpcCAqL1xuICAgICAgICAjeyRwcm9wZXJ0eX06IG1heCgje3ZhcmlhYmxlcy4kcGFkZGluZy1ob3Jpem9udGFsfSwgI3skdmFsdWV9KTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8vXG4vLy8gU2V0cyB0aGUgQ1NTIHRyYW5zaXRpb24gZm9yIHRoZSBmbG9hdGluZyBsYWJlbCdzICdmbG9hdCcgYW5pbWF0aW9uLlxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICRkdXJhdGlvbi1tcyAtIER1cmF0aW9uIChpbiBtcykgb2YgdGhlIGFuaW1hdGlvbi5cbi8vLyBAcGFyYW0ge1N0cmluZ30gJHRpbWluZy1mdW5jdGlvbiAtIE9wdGlvbmFsbHkgb3ZlcnJpZGVzIHRoZSBkZWZhdWx0IGFuaW1hdGlvbiB0aW1pbmcgZnVuY3Rpb24uXG4vLy9cbkBtaXhpbiBmbG9hdGluZy1sYWJlbC1mbG9hdC10cmFuc2l0aW9uKFxuICAkZHVyYXRpb24tbXMsXG4gICR0aW1pbmctZnVuY3Rpb246IG51bGwsXG4gICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKClcbikge1xuICAubWRjLWZsb2F0aW5nLWxhYmVsIHtcbiAgICBAaW5jbHVkZSBmbG9hdGluZy1sYWJlbC1taXhpbnMuZmxvYXQtdHJhbnNpdGlvbihcbiAgICAgICRkdXJhdGlvbi1tcyxcbiAgICAgICR0aW1pbmctZnVuY3Rpb24sXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cbn1cblxuLy8gUHJpdmF0ZSBtaXhpbnNcblxuLy8gQmFzZSBzaGFyZWQgc3R5bGVzXG5AbWl4aW4gX2Jhc2UoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC8vIFNoYXBlXG4gIEBpbmNsdWRlIHNoYXBlLXJhZGl1cyh2YXJpYWJsZXMuJHNoYXBlLXJhZGl1cywgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gIC8vIENvbG9yc1xuICBAaW5jbHVkZSBsYWJlbC1jb2xvcih2YXJpYWJsZXMuJGxhYmVsLCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIGluay1jb2xvcih2YXJpYWJsZXMuJGluay1jb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBwbGFjZWhvbGRlci1jb2xvcih2YXJpYWJsZXMuJHBsYWNlaG9sZGVyLWluay1jb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBjYXJldC1jb2xvcihwcmltYXJ5LCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIGhlbHBlci10ZXh0LW1peGlucy5oZWxwZXItdGV4dC1jb2xvcihcbiAgICB2YXJpYWJsZXMuJGhlbHBlci10ZXh0LWNvbG9yLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGNoYXJhY3Rlci1jb3VudGVyLW1peGlucy5jaGFyYWN0ZXItY291bnRlci1jb2xvcihcbiAgICB2YXJpYWJsZXMuJGhlbHBlci10ZXh0LWNvbG9yLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGljb24tbWl4aW5zLmxlYWRpbmctaWNvbi1jb2xvcihcbiAgICB2YXJpYWJsZXMuJGljb24tY29sb3IsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbiAgQGluY2x1ZGUgaWNvbi1taXhpbnMudHJhaWxpbmctaWNvbi1jb2xvcihcbiAgICB2YXJpYWJsZXMuJGljb24tY29sb3IsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbiAgQGluY2x1ZGUgcHJlZml4LWNvbG9yKHZhcmlhYmxlcy4kYWZmaXgtY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgc3VmZml4LWNvbG9yKHZhcmlhYmxlcy4kYWZmaXgtY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcblxuICAvLyBGbG9hdGluZyBMYWJlbFxuICBAaW5jbHVkZSBmbG9hdGluZy1sYWJlbF8oJHF1ZXJ5KTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIC8vIGRpc3BsYXkgYW5kIGFsaWduLWl0ZW1zIGFyZSBuZWNlc3NhcnkgdG8gbWFrZSB0aGUgdGV4dCBmaWVsZCBwYXJ0aWNpcGF0ZVxuICAgIC8vIGluIGJhc2VsaW5lIGFsaWdubWVudCwgZXZlbiB0aG91Z2ggc29tZSB2YXJpYW50cyBhcmUgJ2NlbnRlcmVkJy4gVGhvc2VcbiAgICAvLyB2YXJpYW50cyBzaG91bGQgdXNlIHRoZSBfYmFzZWxpbmUtY2VudGVyLWFsaWduZWQoKSBtaXhpblxuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgIGFsaWduLWl0ZW1zOiBiYXNlbGluZTtcbiAgICBwYWRkaW5nOiAwIHZhcmlhYmxlcy4kcGFkZGluZy1ob3Jpem9udGFsO1xuICAgIHBvc2l0aW9uOiByZWxhdGl2ZTtcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgLyogQGFsdGVybmF0ZSAqL1xuICAgIHdpbGwtY2hhbmdlOiBvcGFjaXR5LCB0cmFuc2Zvcm0sIGNvbG9yO1xuICB9XG59XG5cbi8vIFRoaXMgbWl4aW4gYWRkcyBzdHlsZXMgdG8gdmlzdWFsbHkgY2VudGVyIHRoZSB0ZXh0IHdpdGhpbiB0aGUgdGV4dCBmaWVsZC5cbi8vIFNpYmxpbmcgdGV4dCB3aWxsIGFsaWduIHRvIHRoZSBiYXNlbGluZSBhbmQgYXBwZWFyIGNlbnRlcmVkIG5leHQgdG8gdGhlXG4vLyB0ZXh0IGZpZWxkLlxuQG1peGluIF9iYXNlbGluZS1jZW50ZXItYWxpZ25lZCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAvLyBJbiBvcmRlciBmb3IgYSBmbGV4Ym94IGNvbnRhaW5lciB0byBwYXJ0aWNpcGF0ZSBpbiBiYXNlbGluZSBhbGlnbm1lbnQsXG4gICAgLy8gaXQgZm9sbG93cyB0aGVzZSBydWxlcyB0byBkZXRlcm1pbmUgd2hlcmUgaXRzIGJhc2VsaW5lIGlzOlxuICAgIC8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi9jc3MtZmxleGJveC0xLyNmbGV4LWJhc2VsaW5lc1xuICAgIC8vXG4gICAgLy8gSW4gb3JkZXIgdG8gYXZvaWQgbGVhZGluZyBpY29ucyAnY29udHJvbGxpbmcnIHRoZSBiYXNlbGluZSAoc2luY2UgdGhleVxuICAgIC8vIGFyZSB0aGUgZmlyc3QgY2hpbGQpLCBmbGV4Ym94IHdpbGwgZ2VuZXJhdGUgYSBiYXNlbGluZSBmcm9tIGFueSBjaGlsZFxuICAgIC8vIGZsZXggaXRlbXMgdGhhdCBwYXJ0aWNpcGF0ZSBpbiBiYXNlbGluZSBhbGlnbm1lbnQuXG4gICAgLy9cbiAgICAvLyBJY29ucyBhcmUgc2V0IHRvIFwiYWxpZ24tc2VsZjogY2VudGVyXCIsIHdoaWxlIGFsbCBvdGhlciBjaGlsZHJlbiBhcmVcbiAgICAvLyBhbGlnbmVkIHRvIGJhc2VsaW5lLiBUaGUgbmV4dCBwcm9ibGVtIGlzIGRlY2lkaW5nIHdoaWNoIGNoaWxkIGlzXG4gICAgLy8gdXNlZCB0byBkZXRlcm1pbmUgdGhlIGJhc2VsaW5lLlxuICAgIC8vXG4gICAgLy8gQWNjb3JkaW5nIHRvIHNwZWMsIHRoZSBpdGVtIHdpdGggdGhlIGxhcmdlc3QgZGlzdGFuY2UgYmV0d2VlbiBpdHNcbiAgICAvLyBiYXNlbGluZSBhbmQgdGhlIGVkZ2Ugb2YgdGhlIGNyb3NzIGF4aXMgaXMgcGxhY2VkIGZsdXNoIHdpdGggdGhhdCBlZGdlLFxuICAgIC8vIG1ha2luZyBpdCB0aGUgYmFzZWxpbmUgb2YgdGhlIGNvbnRhaW5lci5cbiAgICAvLyBodHRwczovL3d3dy53My5vcmcvVFIvY3NzLWZsZXhib3gtMS8jYmFzZWxpbmUtcGFydGljaXBhdGlvblxuICAgIC8vXG4gICAgLy8gRm9yIHRoZSBmaWxsZWQgdmFyaWFudCwgdGhlIHBzZXVkbyA6OmJlZm9yZSBzdHJ1dCBpcyB0aGUgJ2xhcmdlc3QnXG4gICAgLy8gY2hpbGQgc2luY2UgdGhlIGlucHV0IGhhcyBhIGhlaWdodCBvZiAyOHB4IGFuZCB0aGUgc3RydXQgaXMgNDBweC4gV2VcbiAgICAvLyBjYW4gZW11bGF0ZSBjZW50ZXIgYWxpZ25tZW50IGFuZCBmb3JjZSB0aGUgYmFzZWxpbmUgdG8gdXNlIHRoZSBpbnB1dFxuICAgIC8vIHRleHQgYnkgbWFraW5nIHRoZSBpbnB1dCB0aGUgZnVsbCBoZWlnaHQgb2YgdGhlIGNvbnRhaW5lciBhbmQgcmVtb3ZpbmdcbiAgICAvLyB0aGUgYmFzZWxpbmUgc3RydXQuXG5cbiAgICAvLyBJRTExIGRvZXMgbm90IHJlc3BlY3QgdGhpcywgYW5kIG1ha2VzIHRoZSBsZWFkaW5nIGljb24gKGlmIHByZXNlbnQpIHRoZVxuICAgIC8vIGJhc2VsaW5lLiBUaGlzIGlzIGEgZ2FwIHdpdGggSUUxMSB0aGF0IHdlIGhhdmUgYWNjZXB0ZWQuXG4gICAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCB7XG4gICAgICBoZWlnaHQ6IDEwMCU7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfcGFkZGluZy1ob3Jpem9udGFsLXdpdGgtbGVhZGluZy1pY29uKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIEBpbmNsdWRlIHJ0bC1taXhpbnMucmVmbGV4aXZlLXByb3BlcnR5KFxuICAgICAgcGFkZGluZyxcbiAgICAgIDAsXG4gICAgICB2YXJpYWJsZXMuJHBhZGRpbmctaG9yaXpvbnRhbFxuICAgICk7XG4gIH1cbn1cblxuQG1peGluIF9wYWRkaW5nLWhvcml6b250YWwtd2l0aC10cmFpbGluZy1pY29uKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIEBpbmNsdWRlIHJ0bC1taXhpbnMucmVmbGV4aXZlLXByb3BlcnR5KFxuICAgICAgcGFkZGluZyxcbiAgICAgIHZhcmlhYmxlcy4kcGFkZGluZy1ob3Jpem9udGFsLFxuICAgICAgMFxuICAgICk7XG4gIH1cbn1cblxuQG1peGluIF9wYWRkaW5nLWhvcml6b250YWwtd2l0aC1ib3RoLWljb25zKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIC8qIEBub2ZsaXAgKi9cbiAgICBwYWRkaW5nLWxlZnQ6IDA7XG4gICAgLyogQG5vZmxpcCAqL1xuICAgIHBhZGRpbmctcmlnaHQ6IDA7XG4gIH1cbn1cblxuQG1peGluIGZsb2F0aW5nLWxhYmVsXygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLm1kYy1mbG9hdGluZy1sYWJlbCB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIHRvcDogNTAlO1xuICAgICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVZKC01MCUpO1xuICAgICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gICAgfVxuICB9XG59XG5cbi8vIEZpbGxlZFxuXG5AbWl4aW4gX2ZpbGxlZCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIC8vIFRleHQgRmllbGQgaW50ZW50aW9uYWxseSBvbWl0cyBwcmVzcyByaXBwbGUsIHNvIGVhY2ggc3RhdGUgbmVlZHMgdG8gYmUgc3BlY2lmaWVkIGluZGl2aWR1YWxseS5cbiAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLnN0YXRlcy1iYXNlLWNvbG9yKFxuICAgIHZhcmlhYmxlcy4kaW5rLWNvbG9yLFxuICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICRyaXBwbGUtdGFyZ2V0OiB2YXJpYWJsZXMuJHJpcHBsZS10YXJnZXRcbiAgKTtcbiAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLnN0YXRlcy1ob3Zlci1vcGFjaXR5KFxuICAgIHJpcHBsZS10aGVtZS5zdGF0ZXMtb3BhY2l0eSh2YXJpYWJsZXMuJGluay1jb2xvciwgaG92ZXIpLFxuICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICRyaXBwbGUtdGFyZ2V0OiB2YXJpYWJsZXMuJHJpcHBsZS10YXJnZXRcbiAgKTtcbiAgQGluY2x1ZGUgcmlwcGxlLXRoZW1lLnN0YXRlcy1mb2N1cy1vcGFjaXR5KFxuICAgIHJpcHBsZS10aGVtZS5zdGF0ZXMtb3BhY2l0eSh2YXJpYWJsZXMuJGluay1jb2xvciwgZm9jdXMpLFxuICAgICRxdWVyeTogJHF1ZXJ5LFxuICAgICRyaXBwbGUtdGFyZ2V0OiB2YXJpYWJsZXMuJHJpcHBsZS10YXJnZXRcbiAgKTtcblxuICBAaW5jbHVkZSBoZWlnaHQodmFyaWFibGVzLiRoZWlnaHQsICRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgdHlwb2dyYXBoeS5iYXNlbGluZS10b3AoXG4gICAgdmFyaWFibGVzLiRmaWxsZWQtYmFzZWxpbmUtdG9wLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGZpbGwtY29sb3IodmFyaWFibGVzLiRiYWNrZ3JvdW5kLCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIGJvdHRvbS1saW5lLWNvbG9yKHZhcmlhYmxlcy4kYm90dG9tLWxpbmUtaWRsZSwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBob3Zlci1ib3R0b20tbGluZS1jb2xvcihcbiAgICB2YXJpYWJsZXMuJGJvdHRvbS1saW5lLWhvdmVyLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGxpbmUtcmlwcGxlLWNvbG9yXyhwcmltYXJ5LCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIF9maWxsZWQtZmxvYXRpbmctbGFiZWwoJHF1ZXJ5KTtcbn1cblxuQG1peGluIF9maWxsZWQtZmxvYXRpbmctbGFiZWwoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC5tZGMtZmxvYXRpbmctbGFiZWwge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJlZmxleGl2ZS1wb3NpdGlvbihsZWZ0LCB2YXJpYWJsZXMuJGxhYmVsLW9mZnNldCk7XG4gICAgfVxuICB9XG5cbiAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWwtbWl4aW5zLmZsb2F0LXBvc2l0aW9uKFxuICAgIHZhcmlhYmxlcy4kbGFiZWwtcG9zaXRpb24teSxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xufVxuXG4vLyBGaWxsZWQgdmFyaWFudCB3aXRoIG5vIGxhYmVsLiBUaGlzIHZhcmlhbnQgY2VudGVycyB0aGUgdGV4dCBlbGVtZW50cyBhbmRcbi8vIGhpZGVzIHRoZSBsYWJlbCBhbmQgaXMgdXNlZCB3aXRoIHRoZXJlIGlzIGV4cGxpY2l0bHkgbm8gbGFiZWwgcHJvdmlkZWQgb3Jcbi8vIHdoZW4gdGhlIGhlaWdodCBvZiB0aGUgdGV4dCBmaWVsZCBpcyB0b28gc21hbGwgZm9yIGEgbGFiZWwgdG8gYmUgYWxsb3dlZC5cbkBtaXhpbiBfZmlsbGVkLW5vLWxhYmVsKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBfYmFzZWxpbmUtY2VudGVyLWFsaWduZWQoJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAubWRjLWZsb2F0aW5nLWxhYmVsIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgJjo6YmVmb3JlIHtcbiAgICAgIC8vIFJlbW92ZSBiYXNlbGluZS10b3Agc3RydXRcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgLy8gU2FmYXJpIG9ubHlcbiAgQHN1cHBvcnRzICgtd2Via2l0LWh5cGhlbnM6IG5vbmUpIHtcbiAgICAubWRjLXRleHQtZmllbGRfX2FmZml4IHtcbiAgICAgIEBpbmNsdWRlIF9jZW50ZXJlZC1hZmZpeC1zYWZhcmktc3VwcG9ydCgkcXVlcnk6ICRxdWVyeSk7XG4gICAgfVxuICB9XG59XG5cbi8vIE91dGxpbmVkXG5cbkBtaXhpbiBvdXRsaW5lZF8oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIG91dGxpbmVkLWhlaWdodChcbiAgICAkaGVpZ2h0OiB2YXJpYWJsZXMuJGhlaWdodCxcbiAgICAka2V5ZnJhbWUtc3VmZml4OiB0ZXh0LWZpZWxkLW91dGxpbmVkLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIF9iYXNlbGluZS1jZW50ZXItYWxpZ25lZCgkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIG91dGxpbmUtY29sb3IodmFyaWFibGVzLiRvdXRsaW5lZC1pZGxlLWJvcmRlciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBob3Zlci1vdXRsaW5lLWNvbG9yKFxuICAgIHZhcmlhYmxlcy4kb3V0bGluZWQtaG92ZXItYm9yZGVyLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGZvY3VzZWQtb3V0bGluZS1jb2xvcihwcmltYXJ5LCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIG91dGxpbmUtc2hhcGUtcmFkaXVzKHZhcmlhYmxlcy4kc2hhcGUtcmFkaXVzLCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIG5vdGNoZWQtb3V0bGluZS1taXhpbnMubm90Y2gtb2Zmc2V0KFxuICAgIG5vdGNoZWQtb3V0bGluZS12YXJpYWJsZXMuJGJvcmRlci13aWR0aCxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xuICBAaW5jbHVkZSByaXBwbGUtdGhlbWUuc3RhdGVzLWJhc2UtY29sb3IoXG4gICAgdHJhbnNwYXJlbnQsXG4gICAgJHF1ZXJ5OiAkcXVlcnksXG4gICAgJHJpcHBsZS10YXJnZXQ6IHZhcmlhYmxlcy4kcmlwcGxlLXRhcmdldFxuICApO1xuICBAaW5jbHVkZSBfb3V0bGluZWQtZmxvYXRpbmctbGFiZWwoJHF1ZXJ5KTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIG92ZXJmbG93OiB2aXNpYmxlO1xuICB9XG5cbiAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIC8vIFRPRE8oYi8xNTQzNDk3MzUpOiBJbnZlc3RpZ2F0ZSB0aGUgbmVjY2Vzc2l0eSBvZiB0aGVzZSBzdHlsZXNcbiAgICAgIGRpc3BsYXk6IGZsZXg7XG4gICAgICBib3JkZXI6IG5vbmUgIWltcG9ydGFudDsgLy8gRkYgYWRkcyB1bndhbnRlZCBib3JkZXIgaW4gSEMgbW9kZSBvbiB3aW5kb3dzLlxuICAgICAgYmFja2dyb3VuZC1jb2xvcjogdHJhbnNwYXJlbnQ7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfb3V0bGluZWQtZmxvYXRpbmctbGFiZWwoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC5tZGMtZmxvYXRpbmctbGFiZWwge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJlZmxleGl2ZS1wb3NpdGlvbihcbiAgICAgICAgbGVmdCxcbiAgICAgICAgbm90Y2hlZC1vdXRsaW5lLXZhcmlhYmxlcy4kcGFkZGluZ1xuICAgICAgKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9vdXRsaW5lZC1ub3RjaGVkLW91dGxpbmUoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgLy8gRm9yY2UgdGhlIG91dGxpbmUgdG8gYXBwZWFyIFwiYWJvdmVcIiB0aGUgdGV4dGZpZWxkIGVsZW1lbnRzLCBldmVuIHRob3VnaFxuICAgIC8vIGl0IGlzIGFic29sdXRlbHkgcG9zaXRpb25lZCBhbmQgY29tZXMgYmVmb3JlIHRoZSBpbnB1dCBpbiB0aGUgRE9NLiBUaGlzXG4gICAgLy8gaXMgcHJpbWFyaWx5IGZvciB0aGUgdGV4dGFyZWEgc2Nyb2xsYmFyIGFuZCByZXNpemUgZWxlbWVudHMsIHdoaWNoIG1heVxuICAgIC8vIGNsaXAgd2l0aCB3aXRoIG91dGxpbmUgYm9yZGVyLlxuICAgIHotaW5kZXg6IDE7XG4gIH1cbn1cblxuLy8gU3RhdGVzXG5cbkBtaXhpbiBkaXNhYmxlZF8oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGluay1jb2xvcl8odmFyaWFibGVzLiRkaXNhYmxlZC1pbmstY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgcGxhY2Vob2xkZXItY29sb3JfKFxuICAgIHZhcmlhYmxlcy4kZGlzYWJsZWQtcGxhY2Vob2xkZXItaW5rLWNvbG9yLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGxhYmVsLWluay1jb2xvcl8odmFyaWFibGVzLiRkaXNhYmxlZC1sYWJlbC1jb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBoZWxwZXItdGV4dC1taXhpbnMuaGVscGVyLXRleHQtY29sb3JfKFxuICAgIHZhcmlhYmxlcy4kZGlzYWJsZWQtaGVscGVyLXRleHQtY29sb3IsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbiAgQGluY2x1ZGUgY2hhcmFjdGVyLWNvdW50ZXItbWl4aW5zLmNoYXJhY3Rlci1jb3VudGVyLWNvbG9yXyhcbiAgICB2YXJpYWJsZXMuJGRpc2FibGVkLWhlbHBlci10ZXh0LWNvbG9yLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGljb24tbWl4aW5zLmxlYWRpbmctaWNvbi1jb2xvcl8oXG4gICAgdmFyaWFibGVzLiRkaXNhYmxlZC1pY29uLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGljb24tbWl4aW5zLnRyYWlsaW5nLWljb24tY29sb3JfKFxuICAgIHZhcmlhYmxlcy4kZGlzYWJsZWQtaWNvbixcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xuICBAaW5jbHVkZSBfcHJlZml4LWNvbG9yKHZhcmlhYmxlcy4kZGlzYWJsZWQtYWZmaXgtY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgX3N1ZmZpeC1jb2xvcih2YXJpYWJsZXMuJGRpc2FibGVkLWFmZml4LWNvbG9yLCAkcXVlcnk6ICRxdWVyeSk7XG5cbiAgLy8gTWl4aW5zIHRoYXQgYXJlIG9rIHRvIGluY2x1ZGUgc2luY2UgdGhleSB0YXJnZXQgdmFyaWFudC1zcGVjaWZpYyBlbGVtZW50c1xuICBAaW5jbHVkZSBib3R0b20tbGluZS1jb2xvcl8odmFyaWFibGVzLiRkaXNhYmxlZC1ib3JkZXIsICRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgbm90Y2hlZC1vdXRsaW5lLW1peGlucy5jb2xvcihcbiAgICB2YXJpYWJsZXMuJG91dGxpbmVkLWRpc2FibGVkLWJvcmRlcixcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xuXG4gIEBpbmNsdWRlIGRvbS5mb3JjZWQtY29sb3JzLW1vZGUge1xuICAgIEBpbmNsdWRlIHBsYWNlaG9sZGVyLWNvbG9yXyhHcmF5VGV4dCwgJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIEBpbmNsdWRlIGxhYmVsLWluay1jb2xvcl8oR3JheVRleHQsICRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSBoZWxwZXItdGV4dC1taXhpbnMuaGVscGVyLXRleHQtY29sb3JfKEdyYXlUZXh0LCAkcXVlcnk6ICRxdWVyeSk7XG4gICAgQGluY2x1ZGUgY2hhcmFjdGVyLWNvdW50ZXItbWl4aW5zLmNoYXJhY3Rlci1jb3VudGVyLWNvbG9yXyhcbiAgICAgIEdyYXlUZXh0LFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICAgIEBpbmNsdWRlIGljb24tbWl4aW5zLmxlYWRpbmctaWNvbi1jb2xvcl8oR3JheVRleHQsICRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSBpY29uLW1peGlucy50cmFpbGluZy1pY29uLWNvbG9yXyhHcmF5VGV4dCwgJHF1ZXJ5OiAkcXVlcnkpO1xuICAgIEBpbmNsdWRlIF9wcmVmaXgtY29sb3IoR3JheVRleHQsICRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSBfc3VmZml4LWNvbG9yKEdyYXlUZXh0LCAkcXVlcnk6ICRxdWVyeSk7XG5cbiAgICAvLyBNaXhpbnMgdGhhdCBhcmUgb2sgdG8gaW5jbHVkZSBzaW5jZSB0aGV5IHRhcmdldCB2YXJpYW50LXNwZWNpZmljIGVsZW1lbnRzXG4gICAgQGluY2x1ZGUgYm90dG9tLWxpbmUtY29sb3JfKEdyYXlUZXh0LCAkcXVlcnk6ICRxdWVyeSk7XG4gICAgQGluY2x1ZGUgbm90Y2hlZC1vdXRsaW5lLW1peGlucy5jb2xvcihHcmF5VGV4dCwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgQGluY2x1ZGUgZG9tLmZvcmNlZC1jb2xvcnMtbW9kZSgkZXhjbHVkZS1pZTExOiB0cnVlKSB7XG4gICAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICBiYWNrZ3JvdW5kLWNvbG9yOiBXaW5kb3c7XG4gICAgICB9XG4gICAgfVxuXG4gICAgLm1kYy1mbG9hdGluZy1sYWJlbCB7XG4gICAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgICB6LWluZGV4OiAxO1xuICAgICAgfVxuICAgIH1cbiAgfVxuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgcG9pbnRlci1ldmVudHM6IG5vbmU7XG4gIH1cblxuICAubWRjLWZsb2F0aW5nLWxhYmVsIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgY3Vyc29yOiBkZWZhdWx0O1xuICAgIH1cbiAgfVxufVxuXG5AbWl4aW4gX2Rpc2FibGVkLWlucHV0KCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIC8vIGRpc2FibGVkIGlucHV0cyBzaG91bGQgc3RpbGwgYWxsb3cgdXNlcnMgdG8gaW50ZXJhY3Qgd2l0aCB0aGVtIHRvIHNlbGVjdFxuICAgIC8vIHRleHQgYW5kIHNjcm9sbCBmb3IgdGV4dGFyZWFzXG4gICAgcG9pbnRlci1ldmVudHM6IGF1dG87XG4gIH1cbn1cblxuQG1peGluIF9kaXNhYmxlZC1maWxsZWQoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZpbGwtY29sb3JfKHZhcmlhYmxlcy4kZGlzYWJsZWQtYmFja2dyb3VuZCwgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gICN7dmFyaWFibGVzLiRyaXBwbGUtdGFyZ2V0fSB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIC8vIHByZXZlbnQgcmlwcGxlIGZyb20gZGlzcGxheWluZyBvbiBob3ZlciB3aGVuIHNvbWUgaW50ZXJhY3RpYmxlXG4gICAgICAvLyBlbGVtZW50cyBsaWtlIGlucHV0IGFuZCByZXNpemUgaGFuZGxlcyBhcmUgaG92ZXJlZFxuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGludmFsaWRfKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBob3Zlci1ib3R0b20tbGluZS1jb2xvcih2YXJpYWJsZXMuJGVycm9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIGxpbmUtcmlwcGxlLWNvbG9yKHZhcmlhYmxlcy4kZXJyb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgbGFiZWwtY29sb3IodmFyaWFibGVzLiRlcnJvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBoZWxwZXItdGV4dC1taXhpbnMuaGVscGVyLXRleHQtdmFsaWRhdGlvbi1jb2xvcihcbiAgICB2YXJpYWJsZXMuJGVycm9yLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGNhcmV0LWNvbG9yKHZhcmlhYmxlcy4kZXJyb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgaWNvbi1taXhpbnMudHJhaWxpbmctaWNvbi1jb2xvcih2YXJpYWJsZXMuJGVycm9yLCAkcXVlcnk6ICRxdWVyeSk7XG5cbiAgLy8gTWl4aW5zIHRoYXQgYXJlIG9rIHRvIGluY2x1ZGUgc2luY2UgdGhleSB0YXJnZXQgdmFyaWFudC1zcGVjaWZpYyBlbGVtZW50c1xuICBAaW5jbHVkZSBib3R0b20tbGluZS1jb2xvcih2YXJpYWJsZXMuJGVycm9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gIEBpbmNsdWRlIG91dGxpbmUtY29sb3IodmFyaWFibGVzLiRlcnJvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICBAaW5jbHVkZSBob3Zlci1vdXRsaW5lLWNvbG9yKHZhcmlhYmxlcy4kZXJyb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgZm9jdXNlZC1vdXRsaW5lLWNvbG9yKHZhcmlhYmxlcy4kZXJyb3IsICRxdWVyeTogJHF1ZXJ5KTtcblxuICArIC5tZGMtdGV4dC1maWVsZC1oZWxwZXItbGluZSAubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHQtLXZhbGlkYXRpb24tbXNnIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGZvY3VzZWRfKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBsYWJlbC1jb2xvcih2YXJpYWJsZXMuJGZvY3VzZWQtbGFiZWwtY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcblxuICAvLyBNaXhpbnMgdGhhdCBhcmUgb2sgdG8gaW5jbHVkZSBzaW5jZSB0aGV5IHRhcmdldCB2YXJpYW50LXNwZWNpZmljIGVsZW1lbnRzXG4gIEBpbmNsdWRlIG5vdGNoZWQtb3V0bGluZS1taXhpbnMuc3Ryb2tlLXdpZHRoKFxuICAgIHZhcmlhYmxlcy4kb3V0bGluZWQtc3Ryb2tlLXdpZHRoLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG5cbiAgKyAubWRjLXRleHQtZmllbGQtaGVscGVyLWxpbmVcbiAgICAubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHQ6bm90KC5tZGMtdGV4dC1maWVsZC1oZWxwZXItdGV4dC0tdmFsaWRhdGlvbi1tc2cpIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgb3BhY2l0eTogMTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9mb2N1c2VkLW91dGxpbmVkKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgbm90Y2hlZC1vdXRsaW5lLW1peGlucy5ub3RjaC1vZmZzZXQoXG4gICAgdmFyaWFibGVzLiRvdXRsaW5lZC1zdHJva2Utd2lkdGgsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbn1cblxuQG1peGluIF9mb2N1c2VkLW91dGxpbmVkLXRleHRhcmVhKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgbm90Y2hlZC1vdXRsaW5lLW1peGlucy5ub3RjaC1vZmZzZXQoMCwgJHF1ZXJ5OiAkcXVlcnkpO1xufVxuXG4vLyBJY29uc1xuXG5AbWl4aW4gd2l0aC1sZWFkaW5nLWljb25fKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAkaWNvbi1wYWRkaW5nOiBpY29uLXZhcmlhYmxlcy4kbGVhZGluZy1pY29uLXBhZGRpbmctbGVmdCArXG4gICAgaWNvbi12YXJpYWJsZXMuJGljb24tc2l6ZSArIGljb24tdmFyaWFibGVzLiRsZWFkaW5nLWljb24tcGFkZGluZy1yaWdodDtcblxuICAubWRjLWZsb2F0aW5nLWxhYmVsIHtcbiAgICBAaW5jbHVkZSBfdHJ1bmNhdGUtZmxvYXRpbmctbGFiZWwtbWF4LXdpZHRoKCRpY29uLXBhZGRpbmcsICRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgQGluY2x1ZGUgcnRsLW1peGlucy5yZWZsZXhpdmUtcG9zaXRpb24obGVmdCwgJGljb24tcGFkZGluZyk7XG4gICAgfVxuICB9XG5cbiAgJHRydW5jYXRpb246ICRpY29uLXBhZGRpbmcgKyB2YXJpYWJsZXMuJHBhZGRpbmctaG9yaXpvbnRhbDtcblxuICAubWRjLWZsb2F0aW5nLWxhYmVsLS1mbG9hdC1hYm92ZSB7XG4gICAgQGluY2x1ZGUgX3RydW5jYXRlLWZsb2F0aW5nLWxhYmVsLWZsb2F0ZWQtbWF4LXdpZHRoKFxuICAgICAgJHRydW5jYXRpb24sXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cbn1cblxuQG1peGluIF93aXRoLXRyYWlsaW5nLWljb24oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkdHJ1bmNhdGlvbjogaWNvbi12YXJpYWJsZXMuJHRyYWlsaW5nLWljb24tcGFkZGluZy1sZWZ0ICtcbiAgICBpY29uLXZhcmlhYmxlcy4kaWNvbi1zaXplICsgaWNvbi12YXJpYWJsZXMuJHRyYWlsaW5nLWljb24tcGFkZGluZy1yaWdodCArXG4gICAgdmFyaWFibGVzLiRsYWJlbC1vZmZzZXQ7XG5cbiAgLm1kYy1mbG9hdGluZy1sYWJlbCB7XG4gICAgQGluY2x1ZGUgX3RydW5jYXRlLWZsb2F0aW5nLWxhYmVsLW1heC13aWR0aCgkdHJ1bmNhdGlvbiwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmUge1xuICAgIEBpbmNsdWRlIF90cnVuY2F0ZS1mbG9hdGluZy1sYWJlbC1mbG9hdGVkLW1heC13aWR0aChcbiAgICAgICR0cnVuY2F0aW9uLFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9XG59XG5cbkBtaXhpbiBfd2l0aC1sZWFkaW5nLWFuZC10cmFpbGluZy1pY29uKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGxlYWRpbmctaWNvbjogaWNvbi12YXJpYWJsZXMuJGxlYWRpbmctaWNvbi1wYWRkaW5nLWxlZnQgK1xuICAgIGljb24tdmFyaWFibGVzLiRpY29uLXNpemUgKyBpY29uLXZhcmlhYmxlcy4kbGVhZGluZy1pY29uLXBhZGRpbmctcmlnaHQ7XG4gICR0cmFpbGluZy1pY29uOiBpY29uLXZhcmlhYmxlcy4kdHJhaWxpbmctaWNvbi1wYWRkaW5nLWxlZnQgK1xuICAgIGljb24tdmFyaWFibGVzLiRpY29uLXNpemUgKyBpY29uLXZhcmlhYmxlcy4kdHJhaWxpbmctaWNvbi1wYWRkaW5nLXJpZ2h0O1xuICAkdHJ1bmNhdGlvbjogJGxlYWRpbmctaWNvbiArICR0cmFpbGluZy1pY29uO1xuXG4gIC5tZGMtZmxvYXRpbmctbGFiZWwge1xuICAgIEBpbmNsdWRlIF90cnVuY2F0ZS1mbG9hdGluZy1sYWJlbC1tYXgtd2lkdGgoJHRydW5jYXRpb24sICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxuXG4gIC5tZGMtZmxvYXRpbmctbGFiZWwtLWZsb2F0LWFib3ZlIHtcbiAgICBAaW5jbHVkZSBfdHJ1bmNhdGUtZmxvYXRpbmctbGFiZWwtZmxvYXRlZC1tYXgtd2lkdGgoXG4gICAgICAkdHJ1bmNhdGlvbixcbiAgICAgICRxdWVyeTogJHF1ZXJ5XG4gICAgKTtcbiAgfVxufVxuXG5AbWl4aW4gb3V0bGluZWQtd2l0aC1sZWFkaW5nLWljb25fKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAvLyBSZXN0aW5nIGxhYmVsIHBvc2l0aW9uXG4gICRpY29uLXBhZGRpbmc6IGljb24tdmFyaWFibGVzLiRsZWFkaW5nLWljb24tcGFkZGluZy1sZWZ0ICtcbiAgICBpY29uLXZhcmlhYmxlcy4kaWNvbi1zaXplICsgaWNvbi12YXJpYWJsZXMuJGxlYWRpbmctaWNvbi1wYWRkaW5nLXJpZ2h0O1xuICAkbGVmdC1zcGFjaW5nOiAkaWNvbi1wYWRkaW5nIC0gbm90Y2hlZC1vdXRsaW5lLXZhcmlhYmxlcy4kbGVhZGluZy13aWR0aDtcblxuICAubWRjLWZsb2F0aW5nLWxhYmVsIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgICAgQGluY2x1ZGUgcnRsLW1peGlucy5yZWZsZXhpdmUtcG9zaXRpb24obGVmdCwgJGxlZnQtc3BhY2luZyk7XG4gICAgfVxuICB9XG5cbiAgLy8gTm90Y2ggd2lkdGhcbiAgJG5vdGNoLXRydW5jYXRpb246ICRpY29uLXBhZGRpbmcgKyBub3RjaGVkLW91dGxpbmUtdmFyaWFibGVzLiRsZWFkaW5nLXdpZHRoO1xuICBAaW5jbHVkZSBfdHJ1bmNhdGUtbm90Y2hlZC1vdXRsaW5lLW1heC13aWR0aChcbiAgICAkbm90Y2gtdHJ1bmNhdGlvbixcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xuXG4gIC8vIEZsb2F0aW5nIGxhYmVsIHBvc2l0aW9uIGFuZCBhbmltYXRpb25cbiAgQGluY2x1ZGUgX291dGxpbmVkLXdpdGgtbGVhZGluZy1pY29uLWZsb2F0aW5nLWxhYmVsLXBvc2l0aW9uLWFuaW1hdGlvbihcbiAgICAkaGVpZ2h0OiB2YXJpYWJsZXMuJGhlaWdodCxcbiAgICAka2V5ZnJhbWUtc3VmZml4OiB0ZXh0LWZpZWxkLW91dGxpbmVkLWxlYWRpbmctaWNvbixcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xufVxuXG4vLy9cbi8vLyBBcHBsaWVkIHRvIHRoZSBvdXRsaW5lZCB0ZXh0IGZpZWxkIHdpdGggYSB0cmFpbGluZyBpY29uXG4vLy9cbkBtaXhpbiBfb3V0bGluZWQtd2l0aC10cmFpbGluZy1pY29uKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgLy8gUmVzdGluZyBsYWJlbCBwb3NpdGlvblxuICAkaWNvbi1wYWRkaW5nOiBpY29uLXZhcmlhYmxlcy4kdHJhaWxpbmctaWNvbi1wYWRkaW5nLWxlZnQgK1xuICAgIGljb24tdmFyaWFibGVzLiRpY29uLXNpemUgKyBpY29uLXZhcmlhYmxlcy4kdHJhaWxpbmctaWNvbi1wYWRkaW5nLXJpZ2h0O1xuICAvLyBOb3RjaCB3aWR0aFxuICAkbm90Y2gtdHJ1bmNhdGlvbjogJGljb24tcGFkZGluZyArIG5vdGNoZWQtb3V0bGluZS12YXJpYWJsZXMuJGxlYWRpbmctd2lkdGg7XG5cbiAgQGluY2x1ZGUgX3RydW5jYXRlLW5vdGNoZWQtb3V0bGluZS1tYXgtd2lkdGgoXG4gICAgJG5vdGNoLXRydW5jYXRpb24sXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbn1cblxuLy8vXG4vLy8gVHJ1bmNhdGVzIHRoZSBtYXgtd2lkdGggb2YgdGhlIG5vdGNoZWQgb3V0bGluZSBieSB0aGUgZ2l2ZW4gYW1vdW50XG4vLy9cbi8vLyBAcGFyYW0ge051bWJlcn0gJHRydW5jYXRpb24gLSBBbW91bnQgdG8gdHJ1bmNhdGUgdGhlIG5vdGNoZWQgb3V0bGluZSBtYXgtd2lkdGhcbi8vL1xuQG1peGluIF90cnVuY2F0ZS1ub3RjaGVkLW91dGxpbmUtbWF4LXdpZHRoKFxuICAkdHJ1bmNhdGlvbixcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gIEBpbmNsdWRlIG5vdGNoZWQtb3V0bGluZS1taXhpbnMubm90Y2gtbWF4LXdpZHRoKFxuICAgIGNhbGMoMTAwJSAtICN7JHRydW5jYXRpb259KSxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xufVxuXG4vLy9cbi8vLyBUcnVuY2F0ZXMgdGhlIG1heC13aWR0aCBvZiB0aGUgZmxvYXRpbmcgbGFiZWwgYnkgdGhlIGdpdmVuIGFtb3VudFxuLy8vXG4vLy8gQHBhcmFtIHtOdW1iZXJ9ICR0cnVuY2F0aW9uIC0gQW1vdW50IHRvIHRydW5jYXRlIHRoZSBmbG9hdGluZyBsYWJlbCBtYXgtd2lkdGhcbi8vL1xuQG1peGluIF90cnVuY2F0ZS1mbG9hdGluZy1sYWJlbC1tYXgtd2lkdGgoXG4gICR0cnVuY2F0aW9uLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWwtbWl4aW5zLm1heC13aWR0aChcbiAgICBjYWxjKDEwMCUgLSAjeyR0cnVuY2F0aW9ufSksXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbn1cblxuLy8vXG4vLy8gVHJ1bmNhdGVzIHRoZSBtYXgtd2lkdGggb2YgdGhlIGZsb2F0aW5nIGxhYmVsIGJ5IHRoZSBnaXZlbiBhbW91bnQgd2hpbGUgc2NhbGluZyBieSB0aGUgZ2l2ZW4gc2NhbGUgdmFsdWVcbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkdHJ1bmNhdGlvbiAtIEFtb3VudCB0byB0cnVuY2F0ZSB0aGUgZmxvYXRpbmcgbGFiZWwgbWF4LXdpZHRoXG4vLy9cbkBtaXhpbiBfdHJ1bmNhdGUtZmxvYXRpbmctbGFiZWwtZmxvYXRlZC1tYXgtd2lkdGgoXG4gICR0cnVuY2F0aW9uLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJHNjYWxlOiBmbG9hdGluZy1sYWJlbC12YXJpYWJsZXMuJGZsb2F0LXNjYWxlO1xuICBAaW5jbHVkZSBmbG9hdGluZy1sYWJlbC1taXhpbnMubWF4LXdpZHRoKFxuICAgIGNhbGMoMTAwJSAvICN7JHNjYWxlfSAtICN7JHRydW5jYXRpb259IC8gI3skc2NhbGV9KSxcbiAgICAkcXVlcnk6ICRxdWVyeVxuICApO1xufVxuXG4vLyBUZXh0YXJlYVxuXG5AbWl4aW4gdGV4dGFyZWFfKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcbiAgJGZlYXQtYW5pbWF0aW9uOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgYW5pbWF0aW9uKTtcblxuICBAaW5jbHVkZSBfdGV4dGFyZWEtZmxvYXRpbmctbGFiZWwoJHF1ZXJ5KTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgICB3aWR0aDogYXV0bztcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgcGFkZGluZzogMDsgLy8gc2VlIGJlbG93IGZvciBleHBsYW5hdGlvblxuICB9XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcbiAgICB0cmFuc2l0aW9uOiBub25lO1xuICB9XG59XG5cbkBtaXhpbiBfdGV4dGFyZWEtcmVzaXplcigkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBhbGlnbi1zZWxmOiBzdHJldGNoO1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgIGZsZXgtZGlyZWN0aW9uOiBjb2x1bW47XG4gICAgZmxleC1ncm93OiAxO1xuICAgIG1heC1oZWlnaHQ6IDEwMCU7XG4gICAgbWF4LXdpZHRoOiAxMDAlO1xuICAgIG1pbi1oZWlnaHQ6IHZhcmlhYmxlcy4kaGVpZ2h0O1xuICAgIC8vIHN0eWxlbGludC1kaXNhYmxlIGRlY2xhcmF0aW9uLWJsb2NrLW5vLWR1cGxpY2F0ZS1wcm9wZXJ0aWVzIC0tXG4gICAgLy8gVE9ETzogZG9jdW1lbnQgd2h5IHRoaXMgZGlzYWJsZSBpcyBuZWNjZXNzYXJ5XG5cbiAgICAvLyAnc3RyZXRjaCcgaXMgdGhlIHByZWZlcnJlZCBydWxlIGhlcmUuIEl0IHdpbGwgYWxsb3cgdGhlIHRleHRhcmVhIHRvIGdyb3dcbiAgICAvLyB0byB0aGUgbWluL21heCB3aWR0aCBvZiB0aGUgY29udGFpbmVyLCBidXQgaWYgYW4gZXhwbGljaXQgd2lkdGggaXMgc2V0LFxuICAgIC8vIGl0IGNhbm5vdCBiZSByZXNpemVkIGhvcml6b250YWxseS5cbiAgICAvLyBTdHJldGNoIGlzIHN0aWxsIGEgd29ya2luZyBkcmFmdC4gQ2hyb21lIGFuZCBGaXJlZm94IGhhdmUgaXQgaW1wbGVtZW50ZWRcbiAgICAvLyB3aXRoICdhdmFpbGFibGUnIHByZWZpeGVzLiBmaXQtY29udGVudCBpcyBhbm90aGVyIGdvb2QgdGFyZ2V0IGZvclxuICAgIC8vIFNhZmFyaSBzaW5jZSBpdCB3b3JrcyBpbiBhbG1vc3QgYWxsIHVzZSBjYXNlcyBleGNlcHQgd2hlbiBhbiBleHBsaWNpdFxuICAgIC8vIHdpZHRoIGlzIHNldCAodGhlIHVzZXIgY2FuIG1ha2UgdGhlIHRleHRhcmVhIHNtYWxsZXIgdGhhbiB0aGUgY29udGFpbmVyKS5cbiAgICAvLyBOb25lIG9mIHRoaXMgbWF0dGVycyBmb3IgSUUxMSwgd2hpY2ggZG9lc24ndCBzdXBwb3J0IHJlc2l6ZS5cbiAgICBtaW4td2lkdGg6IGZpdC1jb250ZW50O1xuICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICBtaW4td2lkdGg6IC1tb3otYXZhaWxhYmxlO1xuICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICBtaW4td2lkdGg6IC13ZWJraXQtZmlsbC1hdmFpbGFibGU7XG4gICAgLy8gc3R5bGVsaW50LWVuYWJsZSBkZWNsYXJhdGlvbi1ibG9jay1uby1kdXBsaWNhdGUtcHJvcGVydGllc1xuICAgIG92ZXJmbG93OiBoaWRkZW47XG4gICAgcmVzaXplOiBib3RoO1xuICB9XG59XG5cbkBtaXhpbiBfdGV4dGFyZWEtZmlsbGVkLXJlc2l6ZXIoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuICAvLyBTaGlmdCB0aGUgcmVzaXplciBlbGVtZW50IHVwIGJ5IGEgbWFyZ2luIGFtb3VudCB0byBtYWtlIHNwYWNlIGZvciB0aGVcbiAgLy8gcmVzaXplIGhhbmRsZS4gRm9yIGZpbGxlZCBlbGVtZW50cywgdGhlIHJlc2l6ZSBoYW5kbGUgZGlyZWN0bHkgdG91Y2hlc1xuICAvLyB0aGUgYm90dG9tIGxpbmUgYW5kIGlzIGhhcmQgdG8gc2VlLlxuICAvLyBVc2luZyBhIG1hcmdpbiBhZmZlY3RzIHRoZSB3aWR0aCBhbmQgcG9zaXRpb25pbmcgb2YgdGhlIG92ZXJhbGwgY29tcG9uZW50XG4gIC8vIGFuZCB1bmRlcmx5aW5nIHRleHRhcmVhLCB3aGljaCBpcyB3aHkgYSB0cmFuc2Zvcm0gaXMgdXNlZCBpbnN0ZWFkLlxuICAkeTogLTEgKiB2YXJpYWJsZXMuJHRleHRhcmVhLWlucHV0LWhhbmRsZS1tYXJnaW47XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoJHkpO1xuICB9XG59XG5cbkBtaXhpbiBfdGV4dGFyZWEtZmlsbGVkLXJlc2l6ZXItY2hpbGRyZW4oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuICAvLyBTZWUgYWJvdmUuIEFmdGVyIHNoaWZ0aW5nIHRoZSByZXNpemUgd3JhcHBlciBlbGVtZW50LCBhbGwgb2YgaXRzIGNoaWxkcmVuXG4gIC8vIHNob3VsZCBiZSBzaGlmdGVkIGluIHRoZSBvcHBvc2l0ZSBkaXJlY3Rpb24gKGRvd24pIHRvIGNvbXBlbnNhdGUuXG4gICR5OiB2YXJpYWJsZXMuJHRleHRhcmVhLWlucHV0LWhhbmRsZS1tYXJnaW47XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVkoJHkpO1xuICB9XG59XG5cbkBtaXhpbiBfdGV4dGFyZWEtb3V0bGluZWQtcmVzaXplcigkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gIC8vIFNoaWZ0IHRoZSByZXNpemVyIGVsZW1lbnQgbGVmdC91cCBieSBhIG1hcmdpbiBhbW91bnQgdG8gbWFrZSBzcGFjZSBmb3IgdGhlXG4gIC8vIHJlc2l6ZSBoYW5kbGUuIEZvciBvdXRsaW5lZCBlbGVtZW50cywgdGhlIHJlc2l6ZSBoYW5kbGUgZGlyZWN0bHkgdG91Y2hlc1xuICAvLyB0aGUgb3V0bGluZSBhbmQgaXMgaGFyZCB0byBzZWUuXG4gIC8vIFVzaW5nIGEgbWFyZ2luIGFmZmVjdHMgdGhlIHdpZHRoIGFuZCBwb3NpdGlvbmluZyBvZiB0aGUgb3ZlcmFsbCBjb21wb25lbnRcbiAgLy8gYW5kIHVuZGVybHlpbmcgdGV4dGFyZWEsIHdoaWNoIGlzIHdoeSBhIHRyYW5zZm9ybSBpcyB1c2VkIGluc3RlYWQuXG4gICR4OiAtMSAqIHZhcmlhYmxlcy4kdGV4dGFyZWEtaW5wdXQtaGFuZGxlLW1hcmdpbjtcbiAgJHk6IC0xICogdmFyaWFibGVzLiR0ZXh0YXJlYS1pbnB1dC1oYW5kbGUtbWFyZ2luO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgdHJhbnNmb3JtOiB0cmFuc2xhdGVYKCR4KSB0cmFuc2xhdGVZKCR5KTtcblxuICAgIEBpbmNsdWRlIHJ0bC1taXhpbnMucnRsIHtcbiAgICAgIC8vIEZsaXAgdGhlIGhvcml6b250YWwgc2hpZnRpbmcgZGlyZWN0aW9uIGZvciBSVExcbiAgICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgtMSAqICR4KSB0cmFuc2xhdGVZKCR5KTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF90ZXh0YXJlYS1vdXRsaW5lZC1yZXNpemVyLWNoaWxkcmVuKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcbiAgLy8gU2VlIGFib3ZlLiBBZnRlciBzaGlmdGluZyB0aGUgcmVzaXplIHdyYXBwZXIgZWxlbWVudCwgYWxsIG9mIGl0cyBjaGlsZHJlblxuICAvLyBzaG91bGQgYmUgc2hpZnRlZCBpbiB0aGUgb3Bwb3NpdGUgZGlyZWN0aW9uIChyaWdodCBhbmQgZG93bikgdG8gY29tcGVuc2F0ZS5cbiAgJHg6IHZhcmlhYmxlcy4kdGV4dGFyZWEtaW5wdXQtaGFuZGxlLW1hcmdpbjtcbiAgJHk6IHZhcmlhYmxlcy4kdGV4dGFyZWEtaW5wdXQtaGFuZGxlLW1hcmdpbjtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIHRyYW5zZm9ybTogdHJhbnNsYXRlWCgkeCkgdHJhbnNsYXRlWSgkeSk7XG5cbiAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJ0bCB7XG4gICAgICAvLyBGbGlwIHRoZSBob3Jpem9udGFsIHNoaWZ0aW5nIGRpcmVjdGlvbiBmb3IgUlRMXG4gICAgICB0cmFuc2Zvcm06IHRyYW5zbGF0ZVgoLTEgKiAkeCkgdHJhbnNsYXRlWSgkeSk7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfdGV4dGFyZWEtZmxvYXRpbmctbGFiZWwoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC8vIFJlc3RpbmcgbGFiZWwgcG9zaXRpb25cbiAgLm1kYy1mbG9hdGluZy1sYWJlbCB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIHRvcDogdmFyaWFibGVzLiR0ZXh0YXJlYS1sYWJlbC10b3A7XG4gICAgfVxuXG4gICAgLy8gUmVzZXRzIGNlbnRlciBhbGlnbmluZyB0aGUgZmxvYXRpbmcgbGFiZWwuXG4gICAgJjpub3QoLm1kYy1mbG9hdGluZy1sYWJlbC0tZmxvYXQtYWJvdmUpIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIHRyYW5zZm9ybTogbm9uZTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF90ZXh0YXJlYS1pbnB1dCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gICRmZWF0LXR5cG9ncmFwaHk6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCB0eXBvZ3JhcGh5KTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGZsZXgtZ3JvdzogMTtcbiAgICBoZWlnaHQ6IGF1dG87XG4gICAgbWluLWhlaWdodDogdmFyaWFibGVzLiR0ZXh0YXJlYS1saW5lLWhlaWdodDtcbiAgICBvdmVyZmxvdy14OiBoaWRkZW47IC8vIGh0dHBzOi8vYnVnemlsbGEubW96aWxsYS5vcmcvc2hvd19idWcuY2dpP2lkPTMzNjU0XG4gICAgb3ZlcmZsb3cteTogYXV0bztcbiAgICBib3gtc2l6aW5nOiBib3JkZXItYm94O1xuICAgIHJlc2l6ZTogbm9uZTtcbiAgICAvLyBUZXh0YXJlYSBoYXMgaG9yaXpvbnRhbCBwYWRkaW5nIGluc3RlYWQgb2YgdGhlIGNvbnRhaW5lci4gVGhpcyBhbGxvd3MgdGhlXG4gICAgLy8gcmVzaXplIGhhbmRsZSB0byBleHRlbmQgdG8gdGhlIGVkZ2Ugb2YgdGhlIGNvbnRhaW5lci5cbiAgICBwYWRkaW5nOiAwIHZhcmlhYmxlcy4kcGFkZGluZy1ob3Jpem9udGFsO1xuICB9XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC10eXBvZ3JhcGh5KSB7XG4gICAgbGluZS1oZWlnaHQ6IHZhcmlhYmxlcy4kdGV4dGFyZWEtbGluZS1oZWlnaHQ7XG4gIH1cbn1cblxuQG1peGluIF90ZXh0YXJlYS1pbnRlcm5hbC1jb3VudGVyKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSB0eXBvZ3JhcGh5LmJhc2VsaW5lLWJvdHRvbShcbiAgICB2YXJpYWJsZXMuJHRleHRhcmVhLWludGVybmFsLWNvdW50ZXItYmFzZWxpbmUtYm90dG9tLFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgYWxpZ24tc2VsZjogZmxleC1lbmQ7XG4gICAgLy8gTmVlZGVkIHNpbmNlIHBhZGRpbmcgaXMgb24gdGhlIHRleHRhcmVhIGFuZCBub3QgdGhlIGNvbnRhaW5lclxuICAgIHBhZGRpbmc6IDAgdmFyaWFibGVzLiRwYWRkaW5nLWhvcml6b250YWw7XG5cbiAgICAmOjpiZWZvcmUge1xuICAgICAgLy8gUmVtb3ZlIGJhc2VsaW5lLXRvcFxuICAgICAgZGlzcGxheTogbm9uZTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF90ZXh0YXJlYS1pbnB1dC13aXRoLWludGVybmFsLWNvdW50ZXIoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgbWFyZ2luLWJvdHRvbTogdmFyaWFibGVzLiR0ZXh0YXJlYS1pbnRlcm5hbC1jb3VudGVyLWlucHV0LW1hcmdpbi1ib3R0b207XG4gIH1cbn1cblxuQG1peGluIF90ZXh0YXJlYS1maWxsZWQoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgJjo6YmVmb3JlIHtcbiAgICAgIC8vIDx0ZXh0YXJlYT4gZG9lcyBub3QgYWxpZ24gdG8gYmFzZWxpbmUgd2hlbiBpdCBkb2VzIG5vdCBoYXZlIGEgdmFsdWUsXG4gICAgICAvLyB1bmxpa2UgPGlucHV0Piwgc28gd2UgaGF2ZSB0byB1c2UgcGFkZGluZyB0byBmYWtlIGl0IGluc3RlYWRcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuICB9XG5cbiAgLy8gRmxvYXRpbmcgbGFiZWwgcG9zaXRpb25cbiAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWwtbWl4aW5zLmZsb2F0LXBvc2l0aW9uKFxuICAgIHZhcmlhYmxlcy4kdGV4dGFyZWEtZmlsbGVkLWxhYmVsLXBvc2l0aW9uLXksXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcblxuICAvLyBGbG9hdGluZyBsYWJlbCBhbmltYXRpb25cbiAgQGluY2x1ZGUgZmxvYXRpbmctbGFiZWwtbWl4aW5zLnNoYWtlLWFuaW1hdGlvbihcbiAgICB0ZXh0YXJlYS1maWxsZWQsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbiAgQGF0LXJvb3Qge1xuICAgIEBpbmNsdWRlIGZsb2F0aW5nLWxhYmVsLW1peGlucy5zaGFrZS1rZXlmcmFtZXMoXG4gICAgICB0ZXh0YXJlYS1maWxsZWQsXG4gICAgICB2YXJpYWJsZXMuJHRleHRhcmVhLWZpbGxlZC1sYWJlbC1wb3NpdGlvbi15LFxuICAgICAgMCUsXG4gICAgICAkcXVlcnk6ICRxdWVyeVxuICAgICk7XG4gIH1cbn1cblxuQG1peGluIF90ZXh0YXJlYS1maWxsZWQtaW5wdXQoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgbWFyZ2luLXRvcDogdmFyaWFibGVzLiR0ZXh0YXJlYS1maWxsZWQtaW5wdXQtbWFyZ2luLXRvcDtcbiAgICBtYXJnaW4tYm90dG9tOiB2YXJpYWJsZXMuJHRleHRhcmVhLWZpbGxlZC1pbnB1dC1tYXJnaW4tYm90dG9tO1xuICB9XG59XG5cbkBtaXhpbiBfdGV4dGFyZWEtZmlsbGVkLW5vLWxhYmVsLWlucHV0KCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIG1hcmdpbi10b3A6IHZhcmlhYmxlcy4kdGV4dGFyZWEtZmlsbGVkLW5vLWxhYmVsLWlucHV0LW1hcmdpbi10b3A7XG4gICAgbWFyZ2luLWJvdHRvbTogdmFyaWFibGVzLiR0ZXh0YXJlYS1maWxsZWQtbm8tbGFiZWwtaW5wdXQtbWFyZ2luLWJvdHRvbTtcbiAgfVxufVxuXG5AbWl4aW4gX3RleHRhcmVhLW91dGxpbmVkKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgQGluY2x1ZGUgbm90Y2hlZC1vdXRsaW5lLW1peGlucy5ub3RjaC1vZmZzZXQoMCwgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gIC8vIEZsb2F0aW5nIGxhYmVsIHBvc2l0aW9uXG4gIEBpbmNsdWRlIG5vdGNoZWQtb3V0bGluZS1taXhpbnMuZmxvYXRpbmctbGFiZWwtZmxvYXQtcG9zaXRpb24tYWJzb2x1dGUoXG4gICAgdmFyaWFibGVzLiR0ZXh0YXJlYS1vdXRsaW5lZC1sYWJlbC1wb3NpdGlvbi15LFxuICAgICRxdWVyeTogJHF1ZXJ5XG4gICk7XG5cbiAgLy8gRmxvYXRpbmcgbGFiZWwgYW5pbWF0aW9uXG4gIEBpbmNsdWRlIGZsb2F0aW5nLWxhYmVsLW1peGlucy5zaGFrZS1hbmltYXRpb24oXG4gICAgdGV4dGFyZWEtb3V0bGluZWQsXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbiAgQGF0LXJvb3Qge1xuICAgIEBpbmNsdWRlIGZsb2F0aW5nLWxhYmVsLW1peGlucy5zaGFrZS1rZXlmcmFtZXMoXG4gICAgICB0ZXh0YXJlYS1vdXRsaW5lZCxcbiAgICAgIHZhcmlhYmxlcy4kdGV4dGFyZWEtb3V0bGluZWQtbGFiZWwtcG9zaXRpb24teSxcbiAgICAgIDAlLFxuICAgICAgJHF1ZXJ5OiAkcXVlcnlcbiAgICApO1xuICB9XG59XG5cbkBtaXhpbiBfdGV4dGFyZWEtb3V0bGluZWQtZmxvYXRpbmctbGFiZWwoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgdG9wOiB2YXJpYWJsZXMuJHRleHRhcmVhLW91dGxpbmVkLWxhYmVsLXRvcDtcbiAgfVxufVxuXG5AbWl4aW4gX3RleHRhcmVhLW91dGxpbmVkLWlucHV0KCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIG1hcmdpbi10b3A6IHZhcmlhYmxlcy4kdGV4dGFyZWEtb3V0bGluZWQtaW5wdXQtbWFyZ2luLXRvcDtcbiAgICBtYXJnaW4tYm90dG9tOiB2YXJpYWJsZXMuJHRleHRhcmVhLW91dGxpbmVkLWlucHV0LW1hcmdpbi1ib3R0b207XG4gIH1cbn1cblxuLy8gVGV4dCwgUHJlZml4IGFuZCBTdWZmaXhcblxuLy8gQ29tbW9uIHN0eWxlcyBmb3IgdGhlIHRleHQgb2YgdGhlIHRleHQgZmllbGQsIGluY2x1ZGluZyB0aGUgcHJlZml4LCBzdWZmaXgsXG4vLyBhbmQgaW5wdXQuXG5AbWl4aW4gX3RleHQoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1hbmltYXRpb246IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIC8vIEV4Y2x1ZGUgc2V0dGluZyBsaW5lLWhlaWdodCB0byBrZWVwIGNhcmV0ICh0ZXh0IGN1cnNvcikgc2FtZSBoZWlnaHQgYXMgdGhlIGlucHV0IHRleHQgaW4gaU9TIGJyb3dzZXIuXG4gIEBpbmNsdWRlIHR5cG9ncmFwaHkudHlwb2dyYXBoeShcbiAgICBzdWJ0aXRsZTEsXG4gICAgJGV4Y2x1ZGUtcHJvcHM6IChsaW5lLWhlaWdodCksXG4gICAgJHF1ZXJ5OiAkcXVlcnlcbiAgKTtcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBoZWlnaHQ6IHZhcmlhYmxlcy4kaW5wdXQtaGVpZ2h0O1xuICB9XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcbiAgICB0cmFuc2l0aW9uOiBhbmltYXRpb24uc3RhbmRhcmQob3BhY2l0eSwgMTUwbXMpO1xuICB9XG59XG5cbkBtaXhpbiBfaW5wdXQoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIF90ZXh0KCRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICB3aWR0aDogMTAwJTtcbiAgICBtaW4td2lkdGg6IDA7IC8vIEZpeGVzIGZsZXggaXNzdWVzIG9uIEZpcmVmb3hcbiAgICBib3JkZXI6IG5vbmU7XG4gICAgYm9yZGVyLXJhZGl1czogMDtcbiAgICBiYWNrZ3JvdW5kOiBub25lO1xuICAgIGFwcGVhcmFuY2U6IG5vbmU7XG4gICAgcGFkZGluZzogMDtcblxuICAgIC8vIFJlbW92ZSBidWlsdC1pbiB0cmFpbGluZyBjbGVhciBpY29uIG9uIElFMTEuIElFIHZlbmRvciBwcmVmaXhlcyBjYW5ub3RcbiAgICAvLyBiZSBjb21iaW5lZCB3aXRoIG90aGVyIHZlbmRvciBwcmVmaXhlcyBsaWtlIHRoZSB3ZWJraXQgb25lIGJlbG93LlxuICAgICY6Oi1tcy1jbGVhciB7XG4gICAgICBkaXNwbGF5OiBub25lO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSBidWlsdC1pbiBkYXRlcGlja2VyIGljb24gb24gQ2hyb21lXG4gICAgJjo6LXdlYmtpdC1jYWxlbmRhci1waWNrZXItaW5kaWNhdG9yIHtcbiAgICAgIGRpc3BsYXk6IG5vbmU7XG4gICAgfVxuXG4gICAgJjpmb2N1cyB7XG4gICAgICBvdXRsaW5lOiBub25lO1xuICAgIH1cblxuICAgIC8vIFJlbW92ZSByZWQgb3V0bGluZSBvbiBmaXJlZm94XG4gICAgJjppbnZhbGlkIHtcbiAgICAgIGJveC1zaGFkb3c6IG5vbmU7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBfaW5wdXQtcGxhY2Vob2xkZXIoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1hbmltYXRpb246IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBhbmltYXRpb24pO1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgdHJhbnNpdGlvbjogYW5pbWF0aW9uLnN0YW5kYXJkKG9wYWNpdHksIDY3bXMpO1xuICB9XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBvcGFjaXR5OiAwO1xuICB9XG59XG5cbkBtaXhpbiBfaW5wdXQtcGxhY2Vob2xkZXItdmlzaWJsZSgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWFuaW1hdGlvbjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGFuaW1hdGlvbik7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1hbmltYXRpb24pIHtcbiAgICB0cmFuc2l0aW9uLWRlbGF5OiA0MG1zO1xuICAgIHRyYW5zaXRpb24tZHVyYXRpb246IDExMG1zO1xuICB9XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBvcGFjaXR5OiAxO1xuICB9XG59XG5cbkBtaXhpbiBfYWZmaXgoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIF90ZXh0KCRxdWVyeTogJHF1ZXJ5KTtcbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBvcGFjaXR5OiAwO1xuICAgIHdoaXRlLXNwYWNlOiBub3dyYXA7XG4gIH1cbn1cblxuLy8gVE9ETyhiLzE1NTQ2NzYxMCk6IFJlbW92ZSB3aGVuIFNhZmFyaSBzdXBwb3J0cyBiYXNlbGluZSBhbGlnbm1lbnRcbi8vIGh0dHBzOi8vZ2l0aHViLmNvbS9tYXRlcmlhbC1jb21wb25lbnRzL21hdGVyaWFsLWNvbXBvbmVudHMtd2ViL2lzc3Vlcy81ODc5XG5AbWl4aW4gX2NlbnRlcmVkLWFmZml4LXNhZmFyaS1zdXBwb3J0KCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LXN0cnVjdHVyZSkge1xuICAgIGFsaWduLWl0ZW1zOiBjZW50ZXI7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIGRpc3BsYXk6IGlubGluZS1mbGV4O1xuICAgIGhlaWdodDogMTAwJTtcbiAgfVxufVxuXG5AbWl4aW4gX2FmZml4LXZpc2libGUoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgb3BhY2l0eTogMTtcbiAgfVxufVxuXG5AbWl4aW4gX3ByZWZpeCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJlZmxleGl2ZS1ib3goXG4gICAgICBwYWRkaW5nLFxuICAgICAgcmlnaHQsXG4gICAgICB2YXJpYWJsZXMuJHByZWZpeC1wYWRkaW5nXG4gICAgKTtcbiAgfVxufVxuXG5AbWl4aW4gX3ByZWZpeC1lbmQtYWxpZ25lZCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJlZmxleGl2ZS1ib3goXG4gICAgICBwYWRkaW5nLFxuICAgICAgcmlnaHQsXG4gICAgICB2YXJpYWJsZXMuJHByZWZpeC1lbmQtYWxpZ25lZC1wYWRkaW5nXG4gICAgKTtcbiAgfVxufVxuXG5AbWl4aW4gX3N1ZmZpeCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJlZmxleGl2ZS1ib3gocGFkZGluZywgbGVmdCwgdmFyaWFibGVzLiRzdWZmaXgtcGFkZGluZyk7XG4gIH1cbn1cblxuQG1peGluIF9zdWZmaXgtZW5kLWFsaWduZWQoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgQGluY2x1ZGUgcnRsLW1peGlucy5yZWZsZXhpdmUtYm94KFxuICAgICAgcGFkZGluZyxcbiAgICAgIGxlZnQsXG4gICAgICB2YXJpYWJsZXMuJHN1ZmZpeC1lbmQtYWxpZ25lZC1wYWRkaW5nXG4gICAgKTtcbiAgfVxufVxuXG4vLyBFbmQgYWxpZ25lZFxuQG1peGluIGVuZC1hbGlnbmVkXygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIC8vIElFMTEgZG9lcyBub3Qgc3VwcG9ydCB0ZXh0LWFsaWduOiBlbmRcbiAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgIH1cblxuICAgIEBpbmNsdWRlIHJ0bC1taXhpbnMucnRsIHtcbiAgICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgICAgdGV4dC1hbGlnbjogbGVmdDtcbiAgICAgIH1cbiAgICB9XG4gIH1cbn1cblxuLy8gRm9yY2VzIGlucHV0LCBwcmVmaXgsIGFuZCBzdWZmaXggdG8gYmUgTFRSIHdoZW4gaW4gYW4gUlRMIGVudmlyb25tZW50LiBPdGhlclxuLy8gZWxlbWVudHMgc3VjaCBhcyBsYWJlbHMgYW5kIGljb25zIHdpbGwgcmVtYWluIFJUTC5cbkBtaXhpbiBfbHRyLXRleHQoJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgQGluY2x1ZGUgcnRsLW1peGlucy5ydGwge1xuICAgICAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCxcbiAgICAgIC5tZGMtdGV4dC1maWVsZF9fYWZmaXgge1xuICAgICAgICAvKiBAbm9mbGlwICovXG4gICAgICAgIGRpcmVjdGlvbjogbHRyO1xuICAgICAgfVxuXG4gICAgICAubWRjLXRleHQtZmllbGRfX2FmZml4LS1wcmVmaXgge1xuICAgICAgICAvKiBAbm9mbGlwICovXG4gICAgICAgIHBhZGRpbmctbGVmdDogMDtcbiAgICAgICAgLyogQG5vZmxpcCAqL1xuICAgICAgICBwYWRkaW5nLXJpZ2h0OiB2YXJpYWJsZXMuJHByZWZpeC1wYWRkaW5nO1xuICAgICAgfVxuXG4gICAgICAubWRjLXRleHQtZmllbGRfX2FmZml4LS1zdWZmaXgge1xuICAgICAgICAvKiBAbm9mbGlwICovXG4gICAgICAgIHBhZGRpbmctbGVmdDogdmFyaWFibGVzLiRzdWZmaXgtcGFkZGluZztcbiAgICAgICAgLyogQG5vZmxpcCAqL1xuICAgICAgICBwYWRkaW5nLXJpZ2h0OiAwO1xuICAgICAgfVxuXG4gICAgICAvLyBOZWVkIHRvIHNwZWNpZnkgYW4gb3JkZXIgZm9yIGFsbCBlbGVtZW50cyBzaW5jZSBpY29ucyBtYWludGFpbiB0aGVpclxuICAgICAgLy8gb3JpZ2luYWwgcG9zaXRpb25zLiBXZSBjYW4ndCBqdXN0IHJldmVyc2UgdGhlIGNvbnRhaW5lci5cbiAgICAgIC5tZGMtdGV4dC1maWVsZF9faWNvbi0tbGVhZGluZyB7XG4gICAgICAgIG9yZGVyOiAxO1xuICAgICAgfVxuXG4gICAgICAubWRjLXRleHQtZmllbGRfX2FmZml4LS1zdWZmaXgge1xuICAgICAgICBvcmRlcjogMjtcbiAgICAgIH1cblxuICAgICAgLm1kYy10ZXh0LWZpZWxkX19pbnB1dCB7XG4gICAgICAgIG9yZGVyOiAzO1xuICAgICAgfVxuXG4gICAgICAubWRjLXRleHQtZmllbGRfX2FmZml4LS1wcmVmaXgge1xuICAgICAgICBvcmRlcjogNDtcbiAgICAgIH1cblxuICAgICAgLm1kYy10ZXh0LWZpZWxkX19pY29uLS10cmFpbGluZyB7XG4gICAgICAgIG9yZGVyOiA1O1xuICAgICAgfVxuICAgIH1cbiAgfVxufVxuXG4vLyBGb3JjZXMgaW5wdXQsIHByZWZpeCwgYW5kIHN1ZmZpeCB0aGF0IGFyZSBhbHJlYWR5IGZvcmNlZCB0byBMVFIgdG8gYWxzbyBiZVxuLy8gZW5kLWFsaWduZWQuIFRoaXMgbWl4aW4gc2hvdWxkIGJlIHVzZWQgYWxvbmdzaWRlIHRoZSBzdHlsZXMgcHJvdmlkZWQgaW5cbi8vIF9sdHItdGV4dCgpLlxuQG1peGluIF9sdHItdGV4dC1lbmQtYWxpZ25lZCgkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJ0bCB7XG4gICAgICAubWRjLXRleHQtZmllbGRfX2lucHV0IHtcbiAgICAgICAgLy8gSUUxMSBkb2VzIG5vdCBzdXBwb3J0IHRleHQtYWxpZ246IGVuZCwgc28gd2UgbmVlZCB0byBkdXBsaWNhdGVcbiAgICAgICAgLy8gdGhlIExUUiBlbmQtYWxpZ25lZCBzdHlsZSBoZXJlLlxuICAgICAgICAvKiBAbm9mbGlwICovXG4gICAgICAgIHRleHQtYWxpZ246IHJpZ2h0O1xuICAgICAgfVxuXG4gICAgICAubWRjLXRleHQtZmllbGRfX2FmZml4LS1wcmVmaXgge1xuICAgICAgICAvLyBwYWRkaW5nLWxlZnQ6IDAgcHJvdmlkZWQgYnkgX2x0ci10ZXh0IG1peGluXG4gICAgICAgIC8qIEBub2ZsaXAgKi9cbiAgICAgICAgcGFkZGluZy1yaWdodDogdmFyaWFibGVzLiRwcmVmaXgtZW5kLWFsaWduZWQtcGFkZGluZztcbiAgICAgIH1cblxuICAgICAgLm1kYy10ZXh0LWZpZWxkX19hZmZpeC0tc3VmZml4IHtcbiAgICAgICAgLyogQG5vZmxpcCAqL1xuICAgICAgICBwYWRkaW5nLWxlZnQ6IHZhcmlhYmxlcy4kc3VmZml4LWVuZC1hbGlnbmVkLXBhZGRpbmc7XG4gICAgICAgIC8vIHBhZGRpbmctcmlnaHQ6IDAgcHJvdmlkZWQgYnkgX2x0ci10ZXh0IG1peGluXG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbi8vIEN1c3RvbWl6YXRpb25cblxuQG1peGluIGluay1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIC5tZGMtdGV4dC1maWVsZF9faW5wdXQge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3AoY29sb3IsICRjb2xvcik7XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBwbGFjZWhvbGRlci1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAubWRjLXRleHQtZmllbGRfX2lucHV0IHtcbiAgICAgIEBpbmNsdWRlIHBsYWNlaG9sZGVyLXNlbGVjdG9yXyB7XG4gICAgICAgIEBpbmNsdWRlIHRoZW1lLnByb3AoY29sb3IsICRjb2xvcik7XG4gICAgICB9XG4gICAgfVxuICB9XG59XG5cbkBtaXhpbiBmaWxsLWNvbG9yXyhcbiAgJGNvbG9yLFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpLFxuICAkYWRkQWx0ZXJuYXRlOiBmYWxzZVxuKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICBAaWYgKCRhZGRBbHRlcm5hdGUpIHtcbiAgICAgIC8qIEBhbHRlcm5hdGUgKi9cbiAgICB9XG4gICAgQGluY2x1ZGUgdGhlbWUucHJvcChiYWNrZ3JvdW5kLWNvbG9yLCAkY29sb3IpO1xuICB9XG59XG5cbkBtaXhpbiBib3R0b20tbGluZS1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIC5tZGMtbGluZS1yaXBwbGUge1xuICAgIEBpbmNsdWRlIGxpbmUtcmlwcGxlLW1peGlucy5pbmFjdGl2ZS1jb2xvcigkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG5AbWl4aW4gaG92ZXItYm90dG9tLWxpbmUtY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICAmOmhvdmVyIC5tZGMtbGluZS1yaXBwbGUge1xuICAgIEBpbmNsdWRlIGxpbmUtcmlwcGxlLW1peGlucy5pbmFjdGl2ZS1jb2xvcigkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgfVxufVxuXG5AbWl4aW4gbGluZS1yaXBwbGUtY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAubWRjLWxpbmUtcmlwcGxlIHtcbiAgICBAaW5jbHVkZSBsaW5lLXJpcHBsZS1taXhpbnMuYWN0aXZlLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbkBtaXhpbiBob3Zlci1vdXRsaW5lLWNvbG9yXygkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJjpub3QoLm1kYy10ZXh0LWZpZWxkLS1mb2N1c2VkKTpob3ZlciB7XG4gICAgLm1kYy1ub3RjaGVkLW91dGxpbmUge1xuICAgICAgQGluY2x1ZGUgbm90Y2hlZC1vdXRsaW5lLW1peGlucy5jb2xvcigkY29sb3IsICRxdWVyeTogJHF1ZXJ5KTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGZvY3VzZWQtb3V0bGluZS1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICYubWRjLXRleHQtZmllbGQtLWZvY3VzZWQge1xuICAgIEBpbmNsdWRlIG5vdGNoZWQtb3V0bGluZS1taXhpbnMuY29sb3IoJGNvbG9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuQG1peGluIGxhYmVsLWluay1jb2xvcl8oJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gIC5tZGMtZmxvYXRpbmctbGFiZWwge1xuICAgIEBpbmNsdWRlIGZsb2F0aW5nLWxhYmVsLW1peGlucy5pbmstY29sb3IoJGNvbG9yLCAkcXVlcnk6ICRxdWVyeSk7XG4gIH1cbn1cblxuQG1peGluIF9wcmVmaXgtY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAubWRjLXRleHQtZmllbGRfX2FmZml4LS1wcmVmaXgge1xuICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcChjb2xvciwgJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9zdWZmaXgtY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtY29sb3IpIHtcbiAgICAubWRjLXRleHQtZmllbGRfX2FmZml4LS1zdWZmaXgge1xuICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcChjb2xvciwgJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cblxuLy8gU2VsZWN0b3JzXG5cbkBtaXhpbiBwbGFjZWhvbGRlci1zZWxlY3Rvcl8ge1xuICAvLyBHU1Mgd2lsbCBjb21iaW5lIHNlbGVjdG9ycyB3aXRoIHRoZSBzYW1lIGNvbnRlbnQsIGFuZCBzb21lIGJyb3dzZXJzIGhhdmUgYVxuICAvLyBDU1MgcXVpcmsgd2hlcmUgaXQgZHJvcHMgYSBydWxlIGlmIGl0IGRvZXMgbm90IHJlY29nbml6ZSBvbmUgb2YgdGhlXG4gIC8vIHNlbGVjdG9ycy5cbiAgLy8gVG8gYXZvaWQgR1NTIGNvbWJpbmluZyB0aGUgOjpwbGFjZWhvbGRlciBhbmQgOi1tcy1pbnB1dC1wbGFjZWhvbGRlclxuICAvLyBzZWxlY3RvcnMsIHdlIHdyYXAgdGhlbSBpbiBgQG1lZGlhIGFsbGAuXG4gIC8vIFRPRE8oYi8xNDIzMjkwNTEpXG4gIEBtZWRpYSBhbGwge1xuICAgIC8vIDo6cGxhY2Vob2xkZXIgbmVlZHMgdG8gYmUgd3JhcHBlZCBiZWNhdXNlIElFMTEgd2lsbCBkcm9wIG90aGVyIHNlbGVjdG9yc1xuICAgIC8vIHdpdGggdGhlIHNhbWUgY29udGVudFxuICAgICY6OnBsYWNlaG9sZGVyIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxuXG4gIEBtZWRpYSBhbGwge1xuICAgIC8vIDotbXMtaW5wdXQtcGxhY2Vob2xkZXIgbmVlZHMgdG8gYmUgd3JhcHBlZCBiZWNhdXNlIEZpcmVmb3ggd2lsbCBkcm9wXG4gICAgLy8gb3RoZXIgc2VsZWN0b3JzIHdpdGggdGhlIHNhbWUgY29udGVudFxuICAgICY6LW1zLWlucHV0LXBsYWNlaG9sZGVyIHtcbiAgICAgIEBjb250ZW50O1xuICAgIH1cbiAgfVxufVxuXG4vLyBTdGF0ZSBxdWFsaWZpZXJzXG5cbi8vL1xuLy8vIEhlbHBzIHN0eWxlIHRoZSB0ZXh0LWZpZWxkIG9ubHkgd2hlbiBpdCdzIGVuYWJsZWQuXG4vLy8gQGFjY2VzcyBwcml2YXRlXG4vLy9cbkBtaXhpbiBpZi1lbmFibGVkXyB7XG4gICY6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuXG4vLy9cbi8vLyBIZWxwcyBzdHlsZSB0aGUgdGV4dC1maWVsZCBvbmx5IHdoZW4gaXQncyBkaXNhYmxlZC5cbi8vLyBAYWNjZXNzIHByaXZhdGVcbi8vL1xuQG1peGluIGlmLWRpc2FibGVkXyB7XG4gICYubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIHtcbiAgICBAY29udGVudDtcbiAgfVxufVxuIiwiLy9cbi8vIENvcHlyaWdodCAyMDE4IEdvb2dsZSBJbmMuXG4vL1xuLy8gUGVybWlzc2lvbiBpcyBoZXJlYnkgZ3JhbnRlZCwgZnJlZSBvZiBjaGFyZ2UsIHRvIGFueSBwZXJzb24gb2J0YWluaW5nIGEgY29weVxuLy8gb2YgdGhpcyBzb2Z0d2FyZSBhbmQgYXNzb2NpYXRlZCBkb2N1bWVudGF0aW9uIGZpbGVzICh0aGUgXCJTb2Z0d2FyZVwiKSwgdG8gZGVhbFxuLy8gaW4gdGhlIFNvZnR3YXJlIHdpdGhvdXQgcmVzdHJpY3Rpb24sIGluY2x1ZGluZyB3aXRob3V0IGxpbWl0YXRpb24gdGhlIHJpZ2h0c1xuLy8gdG8gdXNlLCBjb3B5LCBtb2RpZnksIG1lcmdlLCBwdWJsaXNoLCBkaXN0cmlidXRlLCBzdWJsaWNlbnNlLCBhbmQvb3Igc2VsbFxuLy8gY29waWVzIG9mIHRoZSBTb2Z0d2FyZSwgYW5kIHRvIHBlcm1pdCBwZXJzb25zIHRvIHdob20gdGhlIFNvZnR3YXJlIGlzXG4vLyBmdXJuaXNoZWQgdG8gZG8gc28sIHN1YmplY3QgdG8gdGhlIGZvbGxvd2luZyBjb25kaXRpb25zOlxuLy9cbi8vIFRoZSBhYm92ZSBjb3B5cmlnaHQgbm90aWNlIGFuZCB0aGlzIHBlcm1pc3Npb24gbm90aWNlIHNoYWxsIGJlIGluY2x1ZGVkIGluXG4vLyBhbGwgY29waWVzIG9yIHN1YnN0YW50aWFsIHBvcnRpb25zIG9mIHRoZSBTb2Z0d2FyZS5cbi8vXG4vLyBUSEUgU09GVFdBUkUgSVMgUFJPVklERUQgXCJBUyBJU1wiLCBXSVRIT1VUIFdBUlJBTlRZIE9GIEFOWSBLSU5ELCBFWFBSRVNTIE9SXG4vLyBJTVBMSUVELCBJTkNMVURJTkcgQlVUIE5PVCBMSU1JVEVEIFRPIFRIRSBXQVJSQU5USUVTIE9GIE1FUkNIQU5UQUJJTElUWSxcbi8vIEZJVE5FU1MgRk9SIEEgUEFSVElDVUxBUiBQVVJQT1NFIEFORCBOT05JTkZSSU5HRU1FTlQuIElOIE5PIEVWRU5UIFNIQUxMIFRIRVxuLy8gQVVUSE9SUyBPUiBDT1BZUklHSFQgSE9MREVSUyBCRSBMSUFCTEUgRk9SIEFOWSBDTEFJTSwgREFNQUdFUyBPUiBPVEhFUlxuLy8gTElBQklMSVRZLCBXSEVUSEVSIElOIEFOIEFDVElPTiBPRiBDT05UUkFDVCwgVE9SVCBPUiBPVEhFUldJU0UsIEFSSVNJTkcgRlJPTSxcbi8vIE9VVCBPRiBPUiBJTiBDT05ORUNUSU9OIFdJVEggVEhFIFNPRlRXQVJFIE9SIFRIRSBVU0UgT1IgT1RIRVIgREVBTElOR1MgSU5cbi8vIFRIRSBTT0ZUV0FSRS5cbi8vXG5cbi8vIFNlbGVjdG9yICcubWRjLSonIHNob3VsZCBvbmx5IGJlIHVzZWQgaW4gdGhpcyBwcm9qZWN0LlxuLy8gc3R5bGVsaW50LWRpc2FibGUgc2VsZWN0b3ItY2xhc3MtcGF0dGVyblxuXG5AdXNlICdAbWF0ZXJpYWwvYW5pbWF0aW9uL2FuaW1hdGlvbic7XG5AdXNlICdAbWF0ZXJpYWwvYW5pbWF0aW9uL3ZhcmlhYmxlcyc7XG5AdXNlICdAbWF0ZXJpYWwvdGhlbWUvdGhlbWUnO1xuQHVzZSAnQG1hdGVyaWFsL3R5cG9ncmFwaHkvdHlwb2dyYXBoeSc7XG5AdXNlICdAbWF0ZXJpYWwvZmVhdHVyZS10YXJnZXRpbmcvZmVhdHVyZS10YXJnZXRpbmcnO1xuXG4vLyBQdWJsaWMgbWl4aW5zXG5cbkBtaXhpbiBoZWxwZXItdGV4dC1jb3JlLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gICRmZWF0LWFuaW1hdGlvbjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGFuaW1hdGlvbik7XG5cbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBkZWZpbmUgdGV4dC1maWVsZC1oZWxwZXItdGV4dFxuXG4gIC5tZGMtdGV4dC1maWVsZC1oZWxwZXItdGV4dCB7XG4gICAgQGluY2x1ZGUgdHlwb2dyYXBoeS50eXBvZ3JhcGh5KGNhcHRpb24sICRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSB0eXBvZ3JhcGh5LnRleHQtYmFzZWxpbmUoJHRvcDogMTZweCwgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIG1hcmdpbjogMDtcbiAgICAgIG9wYWNpdHk6IDA7XG4gICAgICB3aWxsLWNoYW5nZTogb3BhY2l0eTtcbiAgICB9XG5cbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWFuaW1hdGlvbikge1xuICAgICAgdHJhbnNpdGlvbjogYW5pbWF0aW9uLnN0YW5kYXJkKG9wYWNpdHksIDE1MG1zKTtcbiAgICB9XG4gIH1cblxuICAubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHQtLXBlcnNpc3RlbnQge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtYW5pbWF0aW9uKSB7XG4gICAgICB0cmFuc2l0aW9uOiBub25lO1xuICAgIH1cblxuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBvcGFjaXR5OiAxO1xuICAgICAgd2lsbC1jaGFuZ2U6IGluaXRpYWw7XG4gICAgfVxuICB9XG5cbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBlbmRcbn1cblxuLy8vXG4vLy8gQ3VzdG9taXplcyB0aGUgY29sb3Igb2YgdGhlIGhlbHBlciB0ZXh0IGZvbGxvd2luZyBhbiBlbmFibGVkIHRleHQtZmllbGQuXG4vLy8gQHBhcmFtIHtDb2xvcn0gJGNvbG9yIC0gVGhlIGRlc2lyZWQgaGVscGVyIHRleHQgY29sb3IuXG4vLy9cbkBtaXhpbiBoZWxwZXItdGV4dC1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJjpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkge1xuICAgIEBpbmNsdWRlIGhlbHBlci10ZXh0LWNvbG9yXygkY29sb3IsICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gQ3VzdG9taXplcyB0aGUgY29sb3Igb2YgdGhlIGhlbHBlciB0ZXh0IGZvbGxvd2luZyBhIGRpc2FibGVkIHRleHQtZmllbGQuXG4vLy8gQHBhcmFtIHtDb2xvcn0gJGNvbG9yIC0gVGhlIGRlc2lyZWQgaGVscGVyIHRleHQgY29sb3IuXG4vLy9cbkBtaXhpbiBkaXNhYmxlZC1oZWxwZXItdGV4dC1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJi5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQge1xuICAgIEBpbmNsdWRlIGhlbHBlci10ZXh0LWNvbG9yXygkY29sb3IsICRxdWVyeSk7XG4gIH1cbn1cblxuQG1peGluIGhlbHBlci10ZXh0LXZhbGlkYXRpb24tY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICY6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpIHtcbiAgICBAaW5jbHVkZSBoZWxwZXItdGV4dC12YWxpZGF0aW9uLWNvbG9yXygkY29sb3IsICRxdWVyeSk7XG4gIH1cbn1cblxuLy8gUHJpdmF0ZSBtaXhpbnNcblxuQG1peGluIGhlbHBlci10ZXh0LWNvbG9yXygkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgKyAubWRjLXRleHQtZmllbGQtaGVscGVyLWxpbmUgLm1kYy10ZXh0LWZpZWxkLWhlbHBlci10ZXh0IHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShjb2xvciwgJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIGhlbHBlci10ZXh0LXZhbGlkYXRpb24tY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICAmLm1kYy10ZXh0LWZpZWxkLS1pbnZhbGlkXG4gICAgKyAubWRjLXRleHQtZmllbGQtaGVscGVyLWxpbmVcbiAgICAubWRjLXRleHQtZmllbGQtaGVscGVyLXRleHQtLXZhbGlkYXRpb24tbXNnIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShjb2xvciwgJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxOSBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm5cblxuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lJztcbkB1c2UgJ0BtYXRlcmlhbC9ydGwvbWl4aW5zJyBhcyBydGwtbWl4aW5zO1xuQHVzZSAnQG1hdGVyaWFsL2ZlYXR1cmUtdGFyZ2V0aW5nL2ZlYXR1cmUtdGFyZ2V0aW5nJztcbkB1c2UgJ0BtYXRlcmlhbC90eXBvZ3JhcGh5L3R5cG9ncmFwaHknO1xuXG4vLyBQdWJsaWMgbWl4aW5zXG5cbkBtaXhpbiBjaGFyYWN0ZXItY291bnRlci1jb3JlLXN0eWxlcygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgLy8gcG9zdGNzcy1iZW0tbGludGVyOiBkZWZpbmUgdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlclxuXG4gIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlciB7XG4gICAgQGluY2x1ZGUgdHlwb2dyYXBoeS50eXBvZ3JhcGh5KGNhcHRpb24sICRxdWVyeTogJHF1ZXJ5KTtcbiAgICBAaW5jbHVkZSB0eXBvZ3JhcGh5LnRleHQtYmFzZWxpbmUoJHRvcDogMTZweCwgJHF1ZXJ5OiAkcXVlcnkpO1xuXG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAgIC8vIEtlZXAgZmxleCBpdGVtIGFsaWduIHRvIHRyYWlsaW5nIHNpZGUgb24gYWJzZW5jZSBvZiBoZWxwZXIgdGV4dC5cbiAgICAgIEBpbmNsdWRlIHJ0bC1taXhpbnMucmVmbGV4aXZlLWJveChtYXJnaW4sIGxlZnQsIGF1dG8pO1xuICAgICAgQGluY2x1ZGUgcnRsLW1peGlucy5yZWZsZXhpdmUtYm94KHBhZGRpbmcsIGxlZnQsIDE2cHgpO1xuXG4gICAgICB3aGl0ZS1zcGFjZTogbm93cmFwO1xuICAgIH1cbiAgfVxuXG4gIC8vIHBvc3Rjc3MtYmVtLWxpbnRlcjogZW5kXG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIGNvbG9yIG9mIHRoZSBjaGFyYWN0ZXIgY291bnRlciBhc3NvY2lhdGVkIHdpdGggYW4gZW5hYmxlZCB0ZXh0IGZpZWxkLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIGNoYXJhY3RlciBjb3VudGVyIGNvbG9yLlxuLy8vXG5AbWl4aW4gY2hhcmFjdGVyLWNvdW50ZXItY29sb3IoJGNvbG9yLCAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICY6bm90KC5tZGMtdGV4dC1maWVsZC0tZGlzYWJsZWQpIHtcbiAgICBAaW5jbHVkZSBjaGFyYWN0ZXItY291bnRlci1jb2xvcl8oJGNvbG9yLCAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIGNvbG9yIG9mIHRoZSBjaGFyYWN0ZXIgY291bnRlciBhc3NvY2lhdGVkIHdpdGggYSBkaXNhYmxlZCB0ZXh0IGZpZWxkLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIGNoYXJhY3RlciBjb3VudGVyIGNvbG9yLlxuLy8vXG5AbWl4aW4gZGlzYWJsZWQtY2hhcmFjdGVyLWNvdW50ZXItY29sb3IoXG4gICRjb2xvcixcbiAgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKVxuKSB7XG4gICYubWRjLXRleHQtZmllbGQtLWRpc2FibGVkIHtcbiAgICBAaW5jbHVkZSBjaGFyYWN0ZXItY291bnRlci1jb2xvcl8oJGNvbG9yLCAkcXVlcnkpO1xuICB9XG59XG5cbkBtaXhpbiBjaGFyYWN0ZXItY291bnRlci1wb3NpdGlvbihcbiAgJHhPZmZzZXQsXG4gICR5T2Zmc2V0LFxuICAkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpXG4pIHtcbiAgJGZlYXQtc3RydWN0dXJlOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgc3RydWN0dXJlKTtcblxuICAubWRjLXRleHQtZmllbGQtY2hhcmFjdGVyLWNvdW50ZXIge1xuICAgIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgICBAaW5jbHVkZSBydGwtbWl4aW5zLnJlZmxleGl2ZS1wb3NpdGlvbihyaWdodCwgJHhPZmZzZXQpO1xuICAgICAgcG9zaXRpb246IGFic29sdXRlO1xuICAgICAgYm90dG9tOiAkeU9mZnNldDtcbiAgICB9XG4gIH1cbn1cblxuLy8gUHJpdmF0ZSBtaXhpbnNcblxuQG1peGluIGNoYXJhY3Rlci1jb3VudGVyLWNvbG9yXygkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgLy8gQ2hhcmFjdGVyIGNvdW50ZXIgaXMgcGxhY2VkIGluc2lkZSBtZGMtdGV4dGZpZWxkIGVsZW1lbnQgKGZvciB0ZXh0YXJlYSB2YXJpYW50KSBvclxuICAvLyBpbnNpZGUgaGVscGVyIGxpbmUgd2hpY2ggaXMgc2libGluZyB0byBtZGMtdGV4dGZpZWxkLlxuICAubWRjLXRleHQtZmllbGQtY2hhcmFjdGVyLWNvdW50ZXIsXG4gICsgLm1kYy10ZXh0LWZpZWxkLWhlbHBlci1saW5lIC5tZGMtdGV4dC1maWVsZC1jaGFyYWN0ZXItY291bnRlciB7XG4gICAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1jb2xvcikge1xuICAgICAgQGluY2x1ZGUgdGhlbWUucHJvcGVydHkoY29sb3IsICRjb2xvcik7XG4gICAgfVxuICB9XG59XG4iLCIvL1xuLy8gQ29weXJpZ2h0IDIwMTggR29vZ2xlIEluYy5cbi8vXG4vLyBQZXJtaXNzaW9uIGlzIGhlcmVieSBncmFudGVkLCBmcmVlIG9mIGNoYXJnZSwgdG8gYW55IHBlcnNvbiBvYnRhaW5pbmcgYSBjb3B5XG4vLyBvZiB0aGlzIHNvZnR3YXJlIGFuZCBhc3NvY2lhdGVkIGRvY3VtZW50YXRpb24gZmlsZXMgKHRoZSBcIlNvZnR3YXJlXCIpLCB0byBkZWFsXG4vLyBpbiB0aGUgU29mdHdhcmUgd2l0aG91dCByZXN0cmljdGlvbiwgaW5jbHVkaW5nIHdpdGhvdXQgbGltaXRhdGlvbiB0aGUgcmlnaHRzXG4vLyB0byB1c2UsIGNvcHksIG1vZGlmeSwgbWVyZ2UsIHB1Ymxpc2gsIGRpc3RyaWJ1dGUsIHN1YmxpY2Vuc2UsIGFuZC9vciBzZWxsXG4vLyBjb3BpZXMgb2YgdGhlIFNvZnR3YXJlLCBhbmQgdG8gcGVybWl0IHBlcnNvbnMgdG8gd2hvbSB0aGUgU29mdHdhcmUgaXNcbi8vIGZ1cm5pc2hlZCB0byBkbyBzbywgc3ViamVjdCB0byB0aGUgZm9sbG93aW5nIGNvbmRpdGlvbnM6XG4vL1xuLy8gVGhlIGFib3ZlIGNvcHlyaWdodCBub3RpY2UgYW5kIHRoaXMgcGVybWlzc2lvbiBub3RpY2Ugc2hhbGwgYmUgaW5jbHVkZWQgaW5cbi8vIGFsbCBjb3BpZXMgb3Igc3Vic3RhbnRpYWwgcG9ydGlvbnMgb2YgdGhlIFNvZnR3YXJlLlxuLy9cbi8vIFRIRSBTT0ZUV0FSRSBJUyBQUk9WSURFRCBcIkFTIElTXCIsIFdJVEhPVVQgV0FSUkFOVFkgT0YgQU5ZIEtJTkQsIEVYUFJFU1MgT1Jcbi8vIElNUExJRUQsIElOQ0xVRElORyBCVVQgTk9UIExJTUlURUQgVE8gVEhFIFdBUlJBTlRJRVMgT0YgTUVSQ0hBTlRBQklMSVRZLFxuLy8gRklUTkVTUyBGT1IgQSBQQVJUSUNVTEFSIFBVUlBPU0UgQU5EIE5PTklORlJJTkdFTUVOVC4gSU4gTk8gRVZFTlQgU0hBTEwgVEhFXG4vLyBBVVRIT1JTIE9SIENPUFlSSUdIVCBIT0xERVJTIEJFIExJQUJMRSBGT1IgQU5ZIENMQUlNLCBEQU1BR0VTIE9SIE9USEVSXG4vLyBMSUFCSUxJVFksIFdIRVRIRVIgSU4gQU4gQUNUSU9OIE9GIENPTlRSQUNULCBUT1JUIE9SIE9USEVSV0lTRSwgQVJJU0lORyBGUk9NLFxuLy8gT1VUIE9GIE9SIElOIENPTk5FQ1RJT04gV0lUSCBUSEUgU09GVFdBUkUgT1IgVEhFIFVTRSBPUiBPVEhFUiBERUFMSU5HUyBJTlxuLy8gVEhFIFNPRlRXQVJFLlxuLy9cblxuLy8gU2VsZWN0b3IgJy5tZGMtKicgc2hvdWxkIG9ubHkgYmUgdXNlZCBpbiB0aGlzIHByb2plY3QuXG4vLyBzdHlsZWxpbnQtZGlzYWJsZSBzZWxlY3Rvci1jbGFzcy1wYXR0ZXJuXG5cbkB1c2UgJ3Nhc3M6bWF0aCc7XG5AdXNlICdAbWF0ZXJpYWwvcnRsL21peGlucycgYXMgcnRsLW1peGlucztcbkB1c2UgJ0BtYXRlcmlhbC90aGVtZS90aGVtZSc7XG5AdXNlICdAbWF0ZXJpYWwvZmVhdHVyZS10YXJnZXRpbmcvZmVhdHVyZS10YXJnZXRpbmcnO1xuQHVzZSAnLi92YXJpYWJsZXMnO1xuXG4vLyBQdWJsaWMgbWl4aW5zXG5cbkBtaXhpbiBpY29uLWNvcmUtc3R5bGVzKCRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgLm1kYy10ZXh0LWZpZWxkX19pY29uIHtcbiAgICBAaW5jbHVkZSBpY29uXygkcXVlcnk6ICRxdWVyeSk7XG5cbiAgICBzdmcge1xuICAgICAgQGluY2x1ZGUgX2ljb24tc3ZnKCRxdWVyeTogJHF1ZXJ5KTtcbiAgICB9XG4gIH1cblxuICAubWRjLXRleHQtZmllbGRfX2ljb24tLWxlYWRpbmcge1xuICAgIEBpbmNsdWRlIGxlYWRpbmctaWNvbl8oJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG5cbiAgLm1kYy10ZXh0LWZpZWxkX19pY29uLS10cmFpbGluZyB7XG4gICAgQGluY2x1ZGUgdHJhaWxpbmctaWNvbl8oJHF1ZXJ5OiAkcXVlcnkpO1xuICB9XG59XG5cbi8vL1xuLy8vIEN1c3RvbWl6ZXMgdGhlIGNvbG9yIGZvciB0aGUgbGVhZGluZyBpY29uIGluIGFuIGVuYWJsZWQgdGV4dC1maWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBpY29uIGNvbG9yLlxuLy8vXG5AbWl4aW4gbGVhZGluZy1pY29uLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAmOm5vdCgubWRjLXRleHQtZmllbGQtLWRpc2FibGVkKSB7XG4gICAgQGluY2x1ZGUgbGVhZGluZy1pY29uLWNvbG9yXygkY29sb3IsICRxdWVyeSk7XG4gIH1cbn1cblxuLy8vXG4vLy8gQ3VzdG9taXplcyB0aGUgY29sb3IgZm9yIHRoZSB0cmFpbGluZyBpY29uIGluIGFuIGVuYWJsZWQgdGV4dC1maWVsZC5cbi8vLyBAcGFyYW0ge0NvbG9yfSAkY29sb3IgLSBUaGUgZGVzaXJlZCBpY29uIGNvbG9yLlxuLy8vXG5AbWl4aW4gdHJhaWxpbmctaWNvbi1jb2xvcigkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJjpub3QoLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCkge1xuICAgIEBpbmNsdWRlIHRyYWlsaW5nLWljb24tY29sb3JfKCRjb2xvciwgJHF1ZXJ5KTtcbiAgfVxufVxuXG4vLy9cbi8vLyBDdXN0b21pemVzIHRoZSBjb2xvciBmb3IgdGhlIGxlYWRpbmcvdHJhaWxpbmcgaWNvbnMgaW4gYSBkaXNhYmxlZCB0ZXh0LWZpZWxkLlxuLy8vIEBwYXJhbSB7Q29sb3J9ICRjb2xvciAtIFRoZSBkZXNpcmVkIGljb24gY29sb3IuXG4vLy9cbkBtaXhpbiBkaXNhYmxlZC1pY29uLWNvbG9yKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAmLm1kYy10ZXh0LWZpZWxkLS1kaXNhYmxlZCB7XG4gICAgQGluY2x1ZGUgbGVhZGluZy1pY29uLWNvbG9yXygkY29sb3IsICRxdWVyeSk7XG4gICAgQGluY2x1ZGUgdHJhaWxpbmctaWNvbi1jb2xvcl8oJGNvbG9yLCAkcXVlcnkpO1xuICB9XG59XG5cbi8vLyBTZXRzIHRoZSBzaXplIG9mIHRoZSBsZWFkaW5nIGFuZCB0cmFpbGluZyBpY29ucy5cbi8vL1xuLy8vIEBwYXJhbSB7TnVtYmVyfSAkc2l6ZSAtIHRoZSBzaXplIG9mIHRoZSBpY29uIGluIHB4XG5AbWl4aW4gc2l6ZSgkc2l6ZSwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgLm1kYy10ZXh0LWZpZWxkX19pY29uIHtcbiAgICAgIGZvbnQtc2l6ZTogJHNpemU7XG4gICAgfVxuICB9XG59XG5cbi8vIFByaXZhdGUgbWl4aW5zXG5cbkBtaXhpbiBpY29uXygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG4gICRmZWF0LWNvbG9yOiBmZWF0dXJlLXRhcmdldGluZy5jcmVhdGUtdGFyZ2V0KCRxdWVyeSwgY29sb3IpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgYWxpZ24tc2VsZjogY2VudGVyO1xuICAgIGN1cnNvcjogcG9pbnRlcjtcbiAgfVxuXG4gICY6bm90KFt0YWJpbmRleF0pLFxuICAmW3RhYmluZGV4PSctMSddIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBjdXJzb3I6IGRlZmF1bHQ7XG4gICAgICBwb2ludGVyLWV2ZW50czogbm9uZTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIF9pY29uLXN2ZygkcXVlcnk6IGZlYXR1cmUtdGFyZ2V0aW5nLmFsbCgpKSB7XG4gICRmZWF0LXN0cnVjdHVyZTogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIHN0cnVjdHVyZSk7XG5cbiAgQGluY2x1ZGUgZmVhdHVyZS10YXJnZXRpbmcudGFyZ2V0cygkZmVhdC1zdHJ1Y3R1cmUpIHtcbiAgICAvLyBTVkcgY2hpbGRyZW4gY2FuIGNhdXNlIG1pc2FsaWdubWVudCB3aGVuIGRpc3BsYXllZCBhcyBpbmxpbmUgc2luY2VcbiAgICAvLyBsaW5lLWhlaWdodCB3aWxsIGJlIGluaGVyaXRlZCBhbmQgY2F1c2UgYWRkaXRpb25hbCB2ZXJ0aWNhbCBzcGFjZS5cbiAgICAvLyBTZXR0aW5nIHRoZSBkaXNwbGF5IHRvIGJsb2NrIHByZXZlbnRzIHRoaXMuXG4gICAgZGlzcGxheTogYmxvY2s7XG4gIH1cbn1cblxuQG1peGluIGxlYWRpbmctaWNvbl8oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgQGluY2x1ZGUgcnRsLW1peGlucy5yZWZsZXhpdmUtcHJvcGVydHkoXG4gICAgICBtYXJnaW4sXG4gICAgICB2YXJpYWJsZXMuJGxlYWRpbmctaWNvbi1wYWRkaW5nLWxlZnQsXG4gICAgICB2YXJpYWJsZXMuJGxlYWRpbmctaWNvbi1wYWRkaW5nLXJpZ2h0XG4gICAgKTtcbiAgfVxufVxuXG5AbWl4aW4gdHJhaWxpbmctaWNvbl8oJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1zdHJ1Y3R1cmU6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBzdHJ1Y3R1cmUpO1xuXG4gIEBpbmNsdWRlIGZlYXR1cmUtdGFyZ2V0aW5nLnRhcmdldHMoJGZlYXQtc3RydWN0dXJlKSB7XG4gICAgJHBhZGRpbmc6IG1hdGguZGl2KHZhcmlhYmxlcy4kdG91Y2gtdGFyZ2V0LXNpemUgLSB2YXJpYWJsZXMuJGljb24tc2l6ZSwgMik7XG4gICAgJGxlZnQtbWFyZ2luOiB2YXJpYWJsZXMuJHRyYWlsaW5nLWljb24tcGFkZGluZy1sZWZ0IC0gJHBhZGRpbmc7XG4gICAgJHJpZ2h0LW1hcmdpbjogdmFyaWFibGVzLiR0cmFpbGluZy1pY29uLXBhZGRpbmctcmlnaHQgLSAkcGFkZGluZztcblxuICAgIHBhZGRpbmc6ICRwYWRkaW5nO1xuICAgIEBpbmNsdWRlIHJ0bC1taXhpbnMucmVmbGV4aXZlLXByb3BlcnR5KG1hcmdpbiwgJGxlZnQtbWFyZ2luLCAkcmlnaHQtbWFyZ2luKTtcbiAgfVxufVxuXG5AbWl4aW4gbGVhZGluZy1pY29uLWNvbG9yXygkY29sb3IsICRxdWVyeTogZmVhdHVyZS10YXJnZXRpbmcuYWxsKCkpIHtcbiAgJGZlYXQtY29sb3I6IGZlYXR1cmUtdGFyZ2V0aW5nLmNyZWF0ZS10YXJnZXQoJHF1ZXJ5LCBjb2xvcik7XG5cbiAgLm1kYy10ZXh0LWZpZWxkX19pY29uLS1sZWFkaW5nIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShjb2xvciwgJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cblxuQG1peGluIHRyYWlsaW5nLWljb24tY29sb3JfKCRjb2xvciwgJHF1ZXJ5OiBmZWF0dXJlLXRhcmdldGluZy5hbGwoKSkge1xuICAkZmVhdC1jb2xvcjogZmVhdHVyZS10YXJnZXRpbmcuY3JlYXRlLXRhcmdldCgkcXVlcnksIGNvbG9yKTtcblxuICAubWRjLXRleHQtZmllbGRfX2ljb24tLXRyYWlsaW5nIHtcbiAgICBAaW5jbHVkZSBmZWF0dXJlLXRhcmdldGluZy50YXJnZXRzKCRmZWF0LWNvbG9yKSB7XG4gICAgICBAaW5jbHVkZSB0aGVtZS5wcm9wZXJ0eShjb2xvciwgJGNvbG9yKTtcbiAgICB9XG4gIH1cbn1cbiIsIi8vXG4vLyBDb3B5cmlnaHQgMjAxNyBHb29nbGUgSW5jLlxuLy9cbi8vIFBlcm1pc3Npb24gaXMgaGVyZWJ5IGdyYW50ZWQsIGZyZWUgb2YgY2hhcmdlLCB0byBhbnkgcGVyc29uIG9idGFpbmluZyBhIGNvcHlcbi8vIG9mIHRoaXMgc29mdHdhcmUgYW5kIGFzc29jaWF0ZWQgZG9jdW1lbnRhdGlvbiBmaWxlcyAodGhlIFwiU29mdHdhcmVcIiksIHRvIGRlYWxcbi8vIGluIHRoZSBTb2Z0d2FyZSB3aXRob3V0IHJlc3RyaWN0aW9uLCBpbmNsdWRpbmcgd2l0aG91dCBsaW1pdGF0aW9uIHRoZSByaWdodHNcbi8vIHRvIHVzZSwgY29weSwgbW9kaWZ5LCBtZXJnZSwgcHVibGlzaCwgZGlzdHJpYnV0ZSwgc3VibGljZW5zZSwgYW5kL29yIHNlbGxcbi8vIGNvcGllcyBvZiB0aGUgU29mdHdhcmUsIGFuZCB0byBwZXJtaXQgcGVyc29ucyB0byB3aG9tIHRoZSBTb2Z0d2FyZSBpc1xuLy8gZnVybmlzaGVkIHRvIGRvIHNvLCBzdWJqZWN0IHRvIHRoZSBmb2xsb3dpbmcgY29uZGl0aW9uczpcbi8vXG4vLyBUaGUgYWJvdmUgY29weXJpZ2h0IG5vdGljZSBhbmQgdGhpcyBwZXJtaXNzaW9uIG5vdGljZSBzaGFsbCBiZSBpbmNsdWRlZCBpblxuLy8gYWxsIGNvcGllcyBvciBzdWJzdGFudGlhbCBwb3J0aW9ucyBvZiB0aGUgU29mdHdhcmUuXG4vL1xuLy8gVEhFIFNPRlRXQVJFIElTIFBST1ZJREVEIFwiQVMgSVNcIiwgV0lUSE9VVCBXQVJSQU5UWSBPRiBBTlkgS0lORCwgRVhQUkVTUyBPUlxuLy8gSU1QTElFRCwgSU5DTFVESU5HIEJVVCBOT1QgTElNSVRFRCBUTyBUSEUgV0FSUkFOVElFUyBPRiBNRVJDSEFOVEFCSUxJVFksXG4vLyBGSVRORVNTIEZPUiBBIFBBUlRJQ1VMQVIgUFVSUE9TRSBBTkQgTk9OSU5GUklOR0VNRU5ULiBJTiBOTyBFVkVOVCBTSEFMTCBUSEVcbi8vIEFVVEhPUlMgT1IgQ09QWVJJR0hUIEhPTERFUlMgQkUgTElBQkxFIEZPUiBBTlkgQ0xBSU0sIERBTUFHRVMgT1IgT1RIRVJcbi8vIExJQUJJTElUWSwgV0hFVEhFUiBJTiBBTiBBQ1RJT04gT0YgQ09OVFJBQ1QsIFRPUlQgT1IgT1RIRVJXSVNFLCBBUklTSU5HIEZST00sXG4vLyBPVVQgT0YgT1IgSU4gQ09OTkVDVElPTiBXSVRIIFRIRSBTT0ZUV0FSRSBPUiBUSEUgVVNFIE9SIE9USEVSIERFQUxJTkdTIElOXG4vLyBUSEUgU09GVFdBUkUuXG4vL1xuXG4vLyBTZWxlY3RvciAnLm1kYy0qJyBzaG91bGQgb25seSBiZSB1c2VkIGluIHRoaXMgcHJvamVjdC5cbi8vIHN0eWxlbGludC1kaXNhYmxlIHNlbGVjdG9yLWNsYXNzLXBhdHRlcm5cblxuQHVzZSAnc2FzczptYXRoJztcbkB1c2UgJ3Nhc3M6Y29sb3InO1xuQHVzZSAnQG1hdGVyaWFsL2RlbnNpdHkvdmFyaWFibGVzJyBhcyBkZW5zaXR5LXZhcmlhYmxlcztcbkB1c2UgJ0BtYXRlcmlhbC9mbG9hdGluZy1sYWJlbC92YXJpYWJsZXMnIGFzIGZsb2F0aW5nLWxhYmVsLXZhcmlhYmxlcztcbkB1c2UgJ0BtYXRlcmlhbC9ub3RjaGVkLW91dGxpbmUvdmFyaWFibGVzJyBhcyBub3RjaGVkLW91dGxpbmUtdmFyaWFibGVzO1xuQHVzZSAnQG1hdGVyaWFsL3RoZW1lL3RoZW1lLWNvbG9yJztcblxuLy8vXG4vLy8gUmV0dXJucyBvdXRsaW5lZCB0ZXh0IGZpZWxkIGZsb2F0aW5nIGxhYmVsIHBvc2l0aW9uIGZvciBnaXZlbiBoZWlnaHQuXG4vLy9cbi8vLyBAdG9kbyBJbnN0ZWFkIG9mIGFkanVzdGluZyBgJHBvc2l0aW9uWWAgd2l0aCBsYWJlbCBib3ggaGVpZ2h0IHRoYXQgbWlnaHQgY2hhbmdlIGJhc2VkIG9uIGZsb2F0aW5nIGxhYmVsIGZvbnQgc2l6ZVxuLy8vICAgICB3cmFwIGxhYmVsIGluIGEgY2hpbGQgZWxlbWVudCB0byBhcHBseSBgdHJhbnNpdGlvblkoLTUwJSlgIHRvIGF1dG9tYXRpY2FsbHkgb2Zmc2V0IGJhc2VkIG9uIGJveCBoZWlnaHQuXG4vLy9cbkBmdW5jdGlvbiBnZXQtb3V0bGluZWQtbGFiZWwtcG9zaXRpb24teSgkdGV4dC1maWVsZC1oZWlnaHQpIHtcbiAgQHJldHVybiBtYXRoLmRpdigkdGV4dC1maWVsZC1oZWlnaHQsIDIpICtcbiAgICBtYXRoLmRpdihub3RjaGVkLW91dGxpbmUtdmFyaWFibGVzLiRsYWJlbC1ib3gtaGVpZ2h0LCAyKTtcbn1cblxuJGVycm9yOiBlcnJvciAhZGVmYXVsdDtcbiRkaXNhYmxlZC1ib3JkZXI6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC4wNikgIWRlZmF1bHQ7XG4kZGlzYWJsZWQtaWNvbjogcmdiYSh0aGVtZS1jb2xvci5wcm9wLXZhbHVlKG9uLXN1cmZhY2UpLCAwLjMpICFkZWZhdWx0O1xuJGJvdHRvbS1saW5lLWhvdmVyOiByZ2JhKHRoZW1lLWNvbG9yLnByb3AtdmFsdWUob24tc3VyZmFjZSksIDAuODcpICFkZWZhdWx0O1xuJGJvdHRvbS1saW5lLWlkbGU6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC40MikgIWRlZmF1bHQ7XG4kbGFiZWw6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC42KSAhZGVmYXVsdDtcblxuJGluay1jb2xvcjogcmdiYSh0aGVtZS1jb2xvci5wcm9wLXZhbHVlKG9uLXN1cmZhY2UpLCAwLjg3KSAhZGVmYXVsdDtcbiRoZWxwZXItdGV4dC1jb2xvcjogcmdiYSh0aGVtZS1jb2xvci5wcm9wLXZhbHVlKG9uLXN1cmZhY2UpLCAwLjYpICFkZWZhdWx0O1xuJGljb24tY29sb3I6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC41NCkgIWRlZmF1bHQ7XG4kZm9jdXNlZC1sYWJlbC1jb2xvcjogcmdiYSh0aGVtZS1jb2xvci5wcm9wLXZhbHVlKHByaW1hcnkpLCAwLjg3KSAhZGVmYXVsdDtcbiRwbGFjZWhvbGRlci1pbmstY29sb3I6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC41NCkgIWRlZmF1bHQ7XG4kYWZmaXgtY29sb3I6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC42KSAhZGVmYXVsdDtcblxuJGRpc2FibGVkLWxhYmVsLWNvbG9yOiByZ2JhKHRoZW1lLWNvbG9yLnByb3AtdmFsdWUob24tc3VyZmFjZSksIDAuMzgpICFkZWZhdWx0O1xuJGRpc2FibGVkLWluay1jb2xvcjogcmdiYSh0aGVtZS1jb2xvci5wcm9wLXZhbHVlKG9uLXN1cmZhY2UpLCAwLjM4KSAhZGVmYXVsdDtcbiRkaXNhYmxlZC1wbGFjZWhvbGRlci1pbmstY29sb3I6IHJnYmEoXG4gIHRoZW1lLWNvbG9yLnByb3AtdmFsdWUob24tc3VyZmFjZSksXG4gIDAuMzhcbikgIWRlZmF1bHQ7XG4kZGlzYWJsZWQtaGVscGVyLXRleHQtY29sb3I6IHJnYmEoXG4gIHRoZW1lLWNvbG9yLnByb3AtdmFsdWUob24tc3VyZmFjZSksXG4gIDAuMzhcbikgIWRlZmF1bHQ7XG4kZGlzYWJsZWQtYWZmaXgtY29sb3I6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC4zOCkgIWRlZmF1bHQ7XG5cbiRiYWNrZ3JvdW5kOiBjb2xvci5taXgoXG4gIHRoZW1lLWNvbG9yLnByb3AtdmFsdWUob24tc3VyZmFjZSksXG4gIHRoZW1lLWNvbG9yLnByb3AtdmFsdWUoc3VyZmFjZSksXG4gIDQlXG4pICFkZWZhdWx0O1xuJGRpc2FibGVkLWJhY2tncm91bmQ6IGNvbG9yLm1peChcbiAgdGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSxcbiAgdGhlbWUtY29sb3IucHJvcC12YWx1ZShzdXJmYWNlKSxcbiAgMiVcbikgIWRlZmF1bHQ7XG4kc2Vjb25kYXJ5LXRleHQ6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC42KSAhZGVmYXVsdDtcblxuJG91dGxpbmVkLWlkbGUtYm9yZGVyOiByZ2JhKHRoZW1lLWNvbG9yLnByb3AtdmFsdWUob24tc3VyZmFjZSksIDAuMzgpICFkZWZhdWx0O1xuJG91dGxpbmVkLWRpc2FibGVkLWJvcmRlcjogcmdiYShcbiAgdGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSxcbiAgMC4wNlxuKSAhZGVmYXVsdDtcbiRvdXRsaW5lZC1ob3Zlci1ib3JkZXI6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC44NykgIWRlZmF1bHQ7XG5cbiR0ZXh0YXJlYS1ib3JkZXI6IHJnYmEodGhlbWUtY29sb3IucHJvcC12YWx1ZShvbi1zdXJmYWNlKSwgMC43MykgIWRlZmF1bHQ7XG4kdGV4dGFyZWEtYmFja2dyb3VuZDogcmdiYSh0aGVtZS1jb2xvci5wcm9wLXZhbHVlKHN1cmZhY2UpLCAxKSAhZGVmYXVsdDtcbiR0ZXh0YXJlYS1kaXNhYmxlZC1ib3JkZXItY29sb3I6IHJnYmEoXG4gIHRoZW1lLWNvbG9yLnByb3AtdmFsdWUob24tc3VyZmFjZSksXG4gIDAuMjZcbikgIWRlZmF1bHQ7XG4vLyBjYW5ub3QgYmUgdHJhbnNwYXJlbnQgYmVjYXVzZSBtdWx0aWxpbmUgdGV4dGFyZWEgaW5wdXRcbi8vIHdpbGwgbWFrZSB0ZXh0IHVucmVhZGFibGVcbiR0ZXh0YXJlYS1kaXNhYmxlZC1iYWNrZ3JvdW5kOiByZ2JhKDI0OSwgMjQ5LCAyNDksIDEpICFkZWZhdWx0O1xuXG4kcmlwcGxlLXRhcmdldDogJy5tZGMtdGV4dC1maWVsZF9fcmlwcGxlJztcbiRvdXRsaW5lZC1zdHJva2Utd2lkdGg6IDJweCAhZGVmYXVsdDtcbiRoZWlnaHQ6IDU2cHggIWRlZmF1bHQ7XG4kbWluaW11bS1oZWlnaHQ6IDQwcHggIWRlZmF1bHQ7XG4kbWluaW11bS1oZWlnaHQtZm9yLWZpbGxlZC1sYWJlbDogNTJweCAhZGVmYXVsdDtcbiRtYXhpbXVtLWhlaWdodDogJGhlaWdodCAhZGVmYXVsdDtcbiRwYWRkaW5nLWhvcml6b250YWw6IDE2cHggIWRlZmF1bHQ7XG4kZGVuc2l0eS1zY2FsZTogZGVuc2l0eS12YXJpYWJsZXMuJGRlZmF1bHQtc2NhbGUgIWRlZmF1bHQ7XG4kZGVuc2l0eS1jb25maWc6IChcbiAgaGVpZ2h0OiAoXG4gICAgZGVmYXVsdDogJGhlaWdodCxcbiAgICBtYXhpbXVtOiAkbWF4aW11bS1oZWlnaHQsXG4gICAgbWluaW11bTogJG1pbmltdW0taGVpZ2h0LFxuICApLFxuKSAhZGVmYXVsdDtcbiRzaGFwZS1yYWRpdXM6IHNtYWxsICFkZWZhdWx0O1xuJGxhYmVsLXBvc2l0aW9uLXk6IGZsb2F0aW5nLWxhYmVsLXZhcmlhYmxlcy4kcG9zaXRpb24teSAhZGVmYXVsdDtcbiRsYWJlbC1vZmZzZXQ6IDE2cHggIWRlZmF1bHQ7XG4vLyBUT0RPKGIvMTU0MzUwNzg4KTogUmVtb3ZlIHRoaXMgdmFyaWFibGUsIGl0J3Mgbm90IHVzZWQgaW50ZXJuYWxseSBidXQgaXQgaXNcbi8vIGV4dGVybmFsbHkgaW4gQW5ndWxhclxuLy8vIEBkZXByZWNhdGVkIHRoaXMgdmFyaWFibGUgd2lsbCBiZSByZW1vdmVkIGluIHRoZSBmdXR1cmUuXG4vLy8gVXNlIGdldC1vdXRsaW5lZC1sYWJlbC1wb3NpdGlvbi15KCRoZWlnaHQpIGluc3RlYWRcbiRvdXRsaW5lZC1sYWJlbC1wb3NpdGlvbi15OiBnZXQtb3V0bGluZWQtbGFiZWwtcG9zaXRpb24teSgkaGVpZ2h0KSAhZGVmYXVsdDtcbiRvdXRsaW5lZC13aXRoLWxlYWRpbmctaWNvbi1sYWJlbC1wb3NpdGlvbi14OiAzMnB4ICFkZWZhdWx0O1xuJHRleHRhcmVhLW91dGxpbmVkLWxhYmVsLXBvc2l0aW9uLXk6IDI0Ljc1cHggIWRlZmF1bHQ7IC8vIHZpc3VhbGx5IH40ZHAgZnJvbSB0b3AgdG8gYmFzZWxpbmVcbiR0ZXh0YXJlYS1maWxsZWQtbGFiZWwtcG9zaXRpb24teTogMTAuMjVweCAhZGVmYXVsdDsgLy8gdmlzdWFsbHkgfjIwZHAgZnJvbSB0b3AgdG8gbGFiZWwgYmFzZWxpbmVcbiRoZWxwZXItbGluZS1wYWRkaW5nOiAxNnB4ICFkZWZhdWx0O1xuJGZpbGxlZC1iYXNlbGluZS10b3A6IDQwcHggIWRlZmF1bHQ7XG4kaW5wdXQtaGVpZ2h0OiAyOHB4ICFkZWZhdWx0O1xuJHRleHRhcmVhLWxhYmVsLXRvcDogMTlweCAhZGVmYXVsdDsgLy8gdmlzdWFsbHkgfjMyZHAgZnJvbSB0b3AgdG8gbGFiZWwgYmFzZWxpbmVcbiR0ZXh0YXJlYS1vdXRsaW5lZC1sYWJlbC10b3A6ICR0ZXh0YXJlYS1sYWJlbC10b3AgLVxuICBub3RjaGVkLW91dGxpbmUtdmFyaWFibGVzLiRib3JkZXItd2lkdGggIWRlZmF1bHQ7XG4kdGV4dGFyZWEtbGluZS1oZWlnaHQ6IDEuNXJlbSAhZGVmYXVsdDsgLy8gMjRkcCBmcm9tIGJhc2VsaW5lIHRvIGJhc2VsaW5lXG4kdGV4dGFyZWEtaW5wdXQtaGFuZGxlLW1hcmdpbjogMXB4ICFkZWZhdWx0O1xuLy8gT3V0bGluZWQgdGV4dGFyZWEncyBmaXJzdCBsaW5lIHNob3VsZCBiZSBwbGFjZWQgYXQgdGhlIHNhbWUgcG9zaXRpb24gYXNcbi8vIG91dGxpbmVkIHRleHRmaWVsZCwgYW5kIHNob3VsZCBsb29rIGlkZW50aWNhbCBpZiBpdCBpcyAxIHJvdy4gU2luY2UgdGV4dGZpZWxkXG4vLyBpcyBjZW50ZXJlZCBhbmQgZm9udCBtZXRyaWNzIHZhcnkgZm9yIHdoZXJlIHRoZSBiYXNlbGluZSBpcywgdGhlIGJlc3Qgd2F5IHRvXG4vLyBlbnN1cmUgdGV4dGFyZWEgYW5kIHRleHRmaWVsZCBhbGlnbiBpcyB3aXRoIHBhZGRpbmcuIEF0IDU2cHggaGVpZ2h0IHdpdGggYVxuLy8gMjRweCBsaW5lLWhlaWdodCwgYSBjZW50ZXJlZCB0ZXh0ZmllbGQgaGFzIDE2cHggb2YgdG9wIGFuZCBib3R0b20gcGFkZGluZy5cbi8vIFRleHRhcmVhIHNob3VsZCB1c2UgdGhpcyB0byBwb3NpdGlvbiBpdHNlbGYuXG4kdGV4dGFyZWEtb3V0bGluZWQtaW5wdXQtbWFyZ2luLXRvcDogMTZweCAhZGVmYXVsdDtcbiR0ZXh0YXJlYS1vdXRsaW5lZC1pbnB1dC1tYXJnaW4tYm90dG9tOiAxNnB4ICFkZWZhdWx0O1xuJHRleHRhcmVhLW91dGxpbmVkLWRlbnNpdHktY29uZmlnOiAoXG4gIG1hcmdpbi10b3A6IChcbiAgICBkZWZhdWx0OiAkdGV4dGFyZWEtb3V0bGluZWQtaW5wdXQtbWFyZ2luLXRvcCxcbiAgICBtYXhpbXVtOiAkdGV4dGFyZWEtb3V0bGluZWQtaW5wdXQtbWFyZ2luLXRvcCxcbiAgICBtaW5pbXVtOiAkdGV4dGFyZWEtb3V0bGluZWQtaW5wdXQtbWFyZ2luLXRvcCAtIDgsXG4gICksXG4gIG1hcmdpbi1ib3R0b206IChcbiAgICBkZWZhdWx0OiAkdGV4dGFyZWEtb3V0bGluZWQtaW5wdXQtbWFyZ2luLWJvdHRvbSxcbiAgICBtYXhpbXVtOiAkdGV4dGFyZWEtb3V0bGluZWQtaW5wdXQtbWFyZ2luLWJvdHRvbSxcbiAgICBtaW5pbXVtOiAkdGV4dGFyZWEtb3V0bGluZWQtaW5wdXQtbWFyZ2luLWJvdHRvbSAtIDgsXG4gICksXG4pICFkZWZhdWx0OyAvLyByZW1vdmUgMS8yIG9mIHNjYWxlIHRvIC00IGZvciBtaW5pbXVtXG4kdGV4dGFyZWEtb3V0bGluZWQtbGFiZWwtZGVuc2l0eS1jb25maWc6IChcbiAgdG9wOiAoXG4gICAgZGVmYXVsdDogJHRleHRhcmVhLW91dGxpbmVkLWxhYmVsLXRvcCxcbiAgICBtYXhpbXVtOiAkdGV4dGFyZWEtb3V0bGluZWQtbGFiZWwtdG9wLFxuICAgIG1pbmltdW06ICR0ZXh0YXJlYS1vdXRsaW5lZC1sYWJlbC10b3AgLSA4LFxuICApLFxuKSAhZGVmYXVsdDsgLy8gcmVtb3ZlIDEvMiBvZiBzY2FsZSB0byAtNCBmb3IgbWluaW11bVxuJHRleHRhcmVhLWZpbGxlZC1pbnB1dC1tYXJnaW4tdG9wOiAyM3B4ICFkZWZhdWx0OyAvLyB2aXN1YWxseSB+NDBkcCBmcm9tIHRvcCB0byBiYXNlbGluZVxuJHRleHRhcmVhLWZpbGxlZC1pbnB1dC1tYXJnaW4tYm90dG9tOiA5cHggIWRlZmF1bHQ7IC8vIHZpc3VhbGx5IH4xNmRwIGZyb20gYmFzZWxpbmUgdG8gYm90dG9tXG4kdGV4dGFyZWEtZmlsbGVkLWRlbnNpdHktY29uZmlnOiAoXG4gIG1hcmdpbi1ib3R0b206IChcbiAgICBkZWZhdWx0OiAkdGV4dGFyZWEtZmlsbGVkLWlucHV0LW1hcmdpbi1ib3R0b20sXG4gICAgbWF4aW11bTogJHRleHRhcmVhLWZpbGxlZC1pbnB1dC1tYXJnaW4tYm90dG9tLFxuICAgIG1pbmltdW06ICR0ZXh0YXJlYS1maWxsZWQtaW5wdXQtbWFyZ2luLWJvdHRvbSAtIDQsXG4gICksXG4pICFkZWZhdWx0OyAvLyBzY2FsZSB0byAtMSBmb3IgbWluaW11bVxuJHRleHRhcmVhLWZpbGxlZC1sYWJlbC1kZW5zaXR5LWNvbmZpZzogKFxuICB0b3A6IChcbiAgICBkZWZhdWx0OiAkdGV4dGFyZWEtbGFiZWwtdG9wLFxuICAgIG1heGltdW06ICR0ZXh0YXJlYS1sYWJlbC10b3AsXG4gICAgbWluaW11bTogJHRleHRhcmVhLWxhYmVsLXRvcCAtIDIsXG4gICksXG4pICFkZWZhdWx0OyAvLyByZW1vdmUgMS8yIG9mIHNjYWxlIHRvIC0xIGZvciBtaW5pbW1cbiR0ZXh0YXJlYS1maWxsZWQtbm8tbGFiZWwtaW5wdXQtbWFyZ2luLXRvcDogMTZweCAhZGVmYXVsdDsgLy8gc2VlIGFib3ZlIGV4cGxhbmF0aW9uIGZvciBvdXRsaW5lZCB0ZXh0YXJlYSBtYXJnaW5cbiR0ZXh0YXJlYS1maWxsZWQtbm8tbGFiZWwtaW5wdXQtbWFyZ2luLWJvdHRvbTogMTZweCAhZGVmYXVsdDsgLy8gc2VlIGFib3ZlIGV4cGxhbmF0aW9uIGZvciBvdXRsaW5lZCB0ZXh0YXJlYSBtYXJnaW5cbiR0ZXh0YXJlYS1maWxsZWQtbm8tbGFiZWwtZGVuc2l0eS1jb25maWc6IChcbiAgbWFyZ2luLXRvcDogKFxuICAgIGRlZmF1bHQ6ICR0ZXh0YXJlYS1maWxsZWQtbm8tbGFiZWwtaW5wdXQtbWFyZ2luLXRvcCxcbiAgICBtYXhpbXVtOiAkdGV4dGFyZWEtZmlsbGVkLW5vLWxhYmVsLWlucHV0LW1hcmdpbi10b3AsXG4gICAgbWluaW11bTogJHRleHRhcmVhLWZpbGxlZC1uby1sYWJlbC1pbnB1dC1tYXJnaW4tdG9wIC0gOCxcbiAgKSxcbiAgbWFyZ2luLWJvdHRvbTogKFxuICAgIGRlZmF1bHQ6ICR0ZXh0YXJlYS1maWxsZWQtbm8tbGFiZWwtaW5wdXQtbWFyZ2luLWJvdHRvbSxcbiAgICBtYXhpbXVtOiAkdGV4dGFyZWEtZmlsbGVkLW5vLWxhYmVsLWlucHV0LW1hcmdpbi1ib3R0b20sXG4gICAgbWluaW11bTogJHRleHRhcmVhLWZpbGxlZC1uby1sYWJlbC1pbnB1dC1tYXJnaW4tYm90dG9tIC0gOCxcbiAgKSxcbikgIWRlZmF1bHQ7IC8vIHJlbW92ZSAxLzIgb2Ygc2NhbGUgdG8gLTQgZm9yIG1pbmltdW1cbiR0ZXh0YXJlYS1pbnRlcm5hbC1jb3VudGVyLWlucHV0LW1hcmdpbi1ib3R0b206IDJweCAhZGVmYXVsdDsgLy8gdmlzdWFsbHkgfjIwZHAgZnJvbSBiYXNlbGluZSB0byBjb3VudGVyIGJhc2VsaW5lXG4kdGV4dGFyZWEtaW50ZXJuYWwtY291bnRlci1iYXNlbGluZS1ib3R0b206IDE2cHggIWRlZmF1bHQ7XG4vLyBOb3RlIHRoYXQgdGhlIHNjYWxlIGZhY3RvciBpcyBhbiBleWViYWxsZWQgYXBwcm94aW1hdGlvbiBvZiB3aGF0J3Mgc2hvd24gaW4gdGhlIG1vY2tzLlxuXG4kcHJlZml4LXBhZGRpbmc6IDJweCAhZGVmYXVsdDtcbiRwcmVmaXgtZW5kLWFsaWduZWQtcGFkZGluZzogMTJweCAhZGVmYXVsdDtcbiRzdWZmaXgtcGFkZGluZzogMTJweCAhZGVmYXVsdDtcbiRzdWZmaXgtZW5kLWFsaWduZWQtcGFkZGluZzogMnB4ICFkZWZhdWx0O1xuIiwiQHVzZSBcIkBtYXRlcmlhbC90aGVtZVwid2l0aCAoJHByaW1hcnk6ICM1ODY1RjIsXG4gICRzZWNvbmRhcnk6ICM1ODY1RjIsXG4gICRvbi1wcmltYXJ5OiAjMDAwLFxuICAkb24tc2Vjb25kYXJ5OiAjZmZmLFxuKTtcblxuQHVzZSBcIkBtYXRlcmlhbC90aGVtZS9tZGMtdGhlbWVcIjtcbkB1c2UgXCJAbWF0ZXJpYWwvdGhlbWUvbWl4aW5zXCI7XG5cbkB1c2UgXCJAbWF0ZXJpYWwvdHlwb2dyYXBoeS9tZGMtdHlwb2dyYXBoeVwiO1xuXG5AdXNlICdAbWF0ZXJpYWwvYnV0dG9uL21kYy1idXR0b24nO1xuQHVzZSBcIkBtYXRlcmlhbC9mbG9hdGluZy1sYWJlbC9tZGMtZmxvYXRpbmctbGFiZWxcIjtcbkB1c2UgXCJAbWF0ZXJpYWwvbGluZS1yaXBwbGUvbWRjLWxpbmUtcmlwcGxlXCI7XG5AdXNlIFwiQG1hdGVyaWFsL25vdGNoZWQtb3V0bGluZS9tZGMtbm90Y2hlZC1vdXRsaW5lXCI7XG5AdXNlIFwiQG1hdGVyaWFsL3RleHRmaWVsZFwiO1xuQHVzZSBcIkBtYXRlcmlhbC9mYWIvbWRjLWZhYlwiO1xuQHVzZSBcIkBtYXRlcmlhbC9pY29uLWJ1dHRvbi9tZGMtaWNvbi1idXR0b25cIjtcblxuQGluY2x1ZGUgdGV4dGZpZWxkLmNvcmUtc3R5bGVzO1xuXG5cbmJvZHkge1xuICBtYXJnaW46IDBweDtcbiAgYmFja2dyb3VuZC1jb2xvcjogdmFyKC0tbWRjLXRoZW1lLWJhY2tncm91bmQpO1xuICBvdmVyZmxvdy14OiBoaWRkZW47XG59XG5cbiNhdXRoQ29udGFpbmVyIHtcbiAgZGlzcGxheTogZmxleDtcbiAgYWxpZ24taXRlbXM6IGNlbnRlcjtcbiAgZmxleC1kaXJlY3Rpb246IGNvbHVtbjtcbiAgZmxleC13cmFwOiBub3dyYXA7XG5cbiAgdGV4dC1hbGlnbjogY2VudGVyO1xuICBwYWRkaW5nOiAwcHggMjBweDtcbiAgYm94LXNpemluZzogYm9yZGVyLWJveDtcblxuICBoZWlnaHQ6IDEwMHZoO1xuICB3aWR0aDogMTAwdnc7XG5cbiAgLmV4cGFuZCB7XG4gICAgZmxleC1ncm93OiAxO1xuICB9XG5cbiAgPmgxIHtcbiAgICBtYXJnaW4tYm90dG9tOiAwO1xuICB9XG5cbiAgLmdvQnV0dG9uQ29udGFpbmVyIHtcbiAgICBtYXJnaW4tbGVmdDogMTBweDtcbiAgICBkaXNwbGF5OiBpbmxpbmUtYmxvY2s7XG4gIH1cbn1cblxuI2NvbnRlbnQge1xuICBiYWNrZ3JvdW5kLXJlcGVhdDogbm8tcmVwZWF0O1xuICBiYWNrZ3JvdW5kLXNpemU6IGNvbnRhaW47XG4gIGJhY2tncm91bmQtcG9zaXRpb246IGNlbnRlcjtcbiAgd2lkdGg6IDEwMHZ3O1xuICBoZWlnaHQ6IGNhbGMoMTAwdmggLSA2MHB4KTtcbn1cblxuI2NhcHRpb24ge1xuICB3aWR0aDogMTAwdnc7XG4gIGhlaWdodDogNjBweDtcbiAgcGFkZGluZzogMTBweCAyMHB4O1xuICB0ZXh0LWFsaWduOiBjZW50ZXI7XG4gIGJveC1zaXppbmc6IGJvcmRlci1ib3g7XG5cbiAgaDQge1xuICAgIG1hcmdpbjogMDtcbiAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0= */